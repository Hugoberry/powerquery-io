name: Install and Run Power BI Desktop

on: [push]

jobs:
  powerbi-installation:
    runs-on: [ windows-latest] # This needs to be a self-hosted runner with Windows and GUI

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install Power BI Desktop
      run: |
        choco install --ignore-checksums powerbi

    - name: Start Power BI Desktop with PBIX
      run: |
        $pbixPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pre-scripts\dox.pbix"
        if (Test-Path $pbixPath) {
          Start-Process "C:\Program Files\Microsoft Power BI Desktop\bin\PBIDesktop.exe" -ArgumentList $pbixPath
          Start-Sleep -Seconds 60
        } else {
          Write-Error "PBIX file not found at path: $pbixPath"
          exit 1
        }

    - name: Get msmdsrv.exe port
      id: get-msmdsrv-port
      run: |
        $msmdsrvPorts = Get-Process -Name msmdsrv -ErrorAction SilentlyContinue | ForEach-Object {
          Get-NetTCPConnection -OwningProcess $_.Id | Select-Object LocalPort -Unique
        }

        if ($msmdsrvPorts) {
          foreach ($port in $msmdsrvPorts) {
            Write-Host "msmdsrv.exe is listening on port: $($port.LocalPort)"
          }
          # Assume there is only one instance for simplicity and set it as an environment variable
          echo "MSMDSRV_PORT=$($msmdsrvPorts[0].LocalPort)" >> $GITHUB_ENV
          echo "::set-output name=msmdsrv-port::$($msmdsrvPorts[0].LocalPort)"
        } else {
          Write-Host "No msmdsrv.exe process found."
        }

    - name: Debug - Print MSMDSRV_PORT
      run: |
        $msmdsrvPort = "${{ steps.get-msmdsrv-port.outputs.msmdsrv-port }}"
        Write-Host "MSMDSRV_PORT value is $msmdsrvPort"

    - name: Process the first database on the instance
      run: |
        $port = "${{ steps.get-msmdsrv-port-fr.outputs.msmdsrv-port }}"
        pwsh -File ./.github/scripts/myscript.ps1 -port $port -outputJsonFile 'en.json'
      shell: pwsh

    - name: Close Power BI Desktop
      run: |
        Stop-Process -Name PBIDesktop -Force -ErrorAction SilentlyContinue
        Write-Host "Power BI Desktop closed."

    - name: Start Power BI Desktop with PBIX in French
      run: |
        $env:PQ_UICultureOverride = "fr-FR"
        $pbixPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pre-scripts\dox.pbix"
        if (Test-Path $pbixPath) {
          Start-Process "C:\Program Files\Microsoft Power BI Desktop\bin\PBIDesktop.exe" -ArgumentList $pbixPath
          Start-Sleep -Seconds 60
        } else {
          Write-Error "PBIX file not found at path: $pbixPath"
          exit 1
        }

    - name: Get msmdsrv.exe port in French
      id: get-msmdsrv-port-fr
      run: |
        $msmdsrvPorts = Get-Process -Name msmdsrv -ErrorAction SilentlyContinue | ForEach-Object {
          Get-NetTCPConnection -OwningProcess $_.Id | Select-Object LocalPort -Unique
        }

        if ($msmdsrvPorts) {
          foreach ($port in $msmdsrvPorts) {
            Write-Host "msmdsrv.exe is listening on port: $($port.LocalPort)"
          }
          # Assume there is only one instance for simplicity and set it as an environment variable
          echo "MSMDSRV_PORT=$($msmdsrvPorts[0].LocalPort)" >> $GITHUB_ENV
          echo "::set-output name=msmdsrv-port::$($msmdsrvPorts[0].LocalPort)"
        } else {
          Write-Host "No msmdsrv.exe process found."
        }
        
    - name: Process the first database on the instance in French
      run: |
        $port = "${{ steps.get-msmdsrv-port-fr.outputs.msmdsrv-port }}"
        pwsh -File ./.github/scripts/myscript.ps1 -port $port -outputJsonFile 'fr.json'
      shell: pwsh