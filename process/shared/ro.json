{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Returnează o reprezentare structurală a unei baze de date Access.",
        "Documentation.LongDescription": "Returnează o reprezentare structurală a unei baze de date Access, <code>database</code>. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n</ul>\r\n\r\n    De exemplu, parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Returnează bazele de date Analysis Services de la o gazdă anume.",
        "Documentation.LongDescription": "Returnează bazele de date dintr-o instanță Analysis Services, <code>server</code>. Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : O valoare logică ce indică dacă tipurile specificate &#238;n modelul tabelar sau multidimensional va fi utilizat pentru tipurile de coloane cu măsură adăugată. Atunci c&#226;nd este setată la false, „numărul” tipului va fi utilizat pentru toate coloanele cu măsuri. Valoarea implicită pentru această opțiune este false.</li>\r\n<li><code>Culture</code> : Un nume de cultură care specifică cultura datelor. Acesta corespunde cu proprietatea șirului de conexiune „Identificator setări regionale”.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită depinde de driver.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>SubQueries</code> : Un număr (0, 1 sau 2) care setează valoarea proprietății „SubQueries” &#238;n șirul de conexiune. Aceasta controlează comportamentul membrilor calculați la subselectări sau subcuburi. (Valoarea implicită este 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Cuburi AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Date cub import/DirectQuery de la un AtScale.",
        "Documentation.LongDescription": "\r\nReturnează datele cub de la AtScale pe serverul <code>server</code>. Un parametru opțional de înregistrare, <code>options</code>, poate fi specificat pentru a controla următoarele opțiuni:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: o valoare logică care precizează dacă tipurile specificate în modelul tabelar sau multidimensional vor fi utilizate pentru tipurile de coloane de măsură adăugate. Când este setat la false, va fi utilizat tipul „number” pentru toate coloanele de măsură. Valoarea implicită pentru această opțiune este false.</li>\r\n        <li><code>CommandTimeout</code>: o durată (în secunde) care controlează cât timp poate rula interogarea pe partea serverului, înainte de a fi anulată. Valoarea implicită este dependentă de driver. </li>\r\n        <li><code>ConnectionTimeout</code>: o durată (în secunde) care controlează cât timp se așteaptă înainte de abandonarea unei încercări de a face o conexiune la server. Valoarea implicită este dependentă de driver. </li>\r\n\r\n</ul>\r\nParametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...].",
        "Documentation.Examples": {
          "Description": "Listează datele de cub dintr-un cub AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importă date din Explorator date Azure (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importă date de la instanța Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel de informații de evenimente Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Un tabel cu evenimente Storm din baza de date „Eșantioane” din clusterul „ajutor”"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Introduceți adresa URL a serviciului Azure DevOps Analytics.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Returnează conținutul descărcat de la adresa URL Azure DevOps Analytics ca valoare binară. Această funcție utilizează acreditări diferite pentru organizații diferite."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Flux Azure DevOps Services",
        "Documentation.DisplayName": "Flux Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Returnează un tabel de fluxuri OData oferite de Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Introduceți URL-ul punctului final API REST Azure Enterprise asociat cu înscrierea dvs.",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Returnează o listă de rapoarte și luni disponibile din API-ul Azure Enterprise",
        "Documentation.Name": "Importați date din Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Utilizarea funcției AzureEnterprise.Tables pentru a naviga la o valoare anume și a obține rezultatele.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tabel"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "See https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli for starter query samples.",
        "Documentation.Examples": [
          {
            "Description": "Return a table with query results of user query 'resources'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Listează tabelele dintr-o instanță Azure Spark.",
        "Documentation.LongDescription": "Listează tabelele dintr-o instanță Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Listează tabelele dintr-o instanță Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Returnează un tabel de navigare ce conţine containerele găsite în contul specificat dintr-un seif de stocare Azure.",
        "Documentation.LongDescription": "Returnează un tabel de navigare ce conţine un rând pentru fiecare container găsit la adresa URL a contului, <code>account</code>, dintr-un seif de stocare Azure. Fiecare rând conţine un link la bloburile containerului. <code>options</code> poate fi specificat pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>BlockSize</code> : Numărul de byți de citit &#238;nainte de a aștepta consumatorul de date. Valoarea implicită este de 4 MB.</li>\r\n<li><code>RequestSize</code> : Numărul de byți pentru care se &#238;ncearcă citirea &#238;ntr-o singură solicitare HTTP către server. Valoarea implicită este de 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opțiunea ConcurrentRequests acceptă descărcarea mai rapidă a datelor, preciz&#226;nd numărul de solicitări de efectuat &#238;n paralel, la costul utilizării memoriei. Memoria necesară este (ConcurrentRequest * RequestSize). Valoarea implicită este 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Returnează un tabel de navigare ce conține documentele găsite în containerul specificat și subfolderele sale din Azure Data Lake Storage.",
        "Documentation.LongDescription": "Returnează un tabel de navigare ce conține documentele găsite în containerul specificat și subfolderele sale la adresa URL a contului, <code>endpoint</code>, dintr-un sistem de fișiere Azure Data Lake Storage. <code>options</code> poate fi specificat pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>BlockSize</code> : Numărul de byți de citit &#238;nainte de a aștepta consumatorul de date. Valoarea implicită este de 4 MB.</li>\r\n<li><code>RequestSize</code> : Numărul de byți pentru care se &#238;ncearcă citirea &#238;ntr-o singură solicitare HTTP către server. Valoarea implicită este de 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opțiunea ConcurrentRequests acceptă descărcarea mai rapidă a datelor, preciz&#226;nd numărul de solicitări de efectuat &#238;n paralel, la costul utilizării memoriei. Memoria necesară este (ConcurrentRequest * RequestSize). Valoarea implicită este 16.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care controlează dacă fișierele sunt returnate &#238;ntr-o vizualizare de director arborescentă sau &#238;ntr-o listă plată. Valoarea implicită este false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Returnează un tabel de navigare ce conţine tabelele găsite în contul specificat dintr-un seif de stocare Azure.",
        "Documentation.LongDescription": "Returnează un tabel de navigare care conține un rând pentru fiecare tabel găsit la adresa URL a contului, <code>account</code>, dintr-un seif de stocare Azure. Fiecare rând conține un link la tabelul Azure. Se poate furniza un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietățile suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>Timeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona solicitarea pentru server. Valoarea implicită este specifică fiecărei surse.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight pe Serviciul Kubernetes Azure Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Această funcție este indisponibilă, deoarece necesită .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (învechit)",
        "Documentation.Caption": "Common Data Service (învechit)",
        "Documentation.LongDescription": "Conectați-vă la datele instanței Common Data Service (Dynamics 365 și PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Returnează conţinutul documentului CSV ca tabel.",
        "Documentation.LongDescription": "Returnează conținutul documentului CSV ca tabel.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> poate fi nul, numărul de coloane, o listă de nume de coloane, un tip de tabel sau o înregistrare de opțiuni.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> poate fi un singur caracter, o listă de caractere sau valoarea <code>\"\"</code>, care indică faptul că rândurile trebuie despărțite de caractere spațiu consecutive. <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Consultați <code>ExtraValues.Type</code> pentru valorile acceptate de <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> specifică tipul de codificare a textului.\r\n      </li>\r\n    </ul>\r\n\r\n    Dacă se specifică o înregistrare pentru <code>columns</code> (și <code>delimiter</code>, <code>extraValues</code> și <code>encoding</code> sunt nule), se pot furniza următoarele câmpuri de înregistrare:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: delimitatorul de coloane. Implicit: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: poate fi nul, numărul de coloane, o listă de nume de coloane sau un tip de tabel. Dacă numărul de coloane este mai mic decât numărul găsit în datele introduse, coloanele suplimentare vor fi ignorate. Dacă numărul de coloane este mai mare decât numărul găsit în datele introduse, coloanele suplimentare vor fi nule. Când nu este specificat, numărul de coloane va fi determinat de ceea ce se găsește în datele introduse.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: codificarea text a fișierului. Implicit: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: specifică modul în care sunt tratate ghilimelele.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (implicit): ghilimelele dintr-un câmp sunt semnificative doar dacă urmează imediat delimitatorul.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: ghilimelele dintr-un câmp sunt semnificative întotdeauna, indiferent unde apar.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: specifică modul în care sunt tratate sfârșiturile de linie între ghilimele.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (implicit): toate sfârșiturile de linie sunt tratate ca sfârșit de rând curent, chiar și atunci când apar în interiorul unei valori între ghilimele.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Toate sfârșiturile de linie sunt tratate ca sfârșit de rând curent, chiar și atunci când apar în interiorul unei valori între ghilimele.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Procesați textul CSV cu anteturi de coloană",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Returnează un tabel ce conţine setul de dimensiuni disponibile.",
        "Documentation.LongDescription": "Returnează un tabel ce conţine setul de dimensiuni disponibile în <code>cube</code>. Fiecare dimensiune este un tabel ce conţine un set de atribute de dimensiune şi fiecare atribut de dimensiune este reprezentat ca şi coloană în tabelul de dimensiuni. Dimensiunile pot fi extinse în cub utilizând Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Returnează un arbore imbricat de tabele reprezentând ierarhia de foldere de afișare a obiectelor (de exemplu, dimensiuni și măsuri).",
        "Documentation.LongDescription": "Returnează un arbore imbricat de tabele reprezentând ierarhia folderelor de afișare a obiectelor (de exemplu, dimensiuni și măsuri) disponibile pentru utilizare în <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Returnează un tabel care conține setul de proprietăți de măsură disponibile care sunt extinse în cub.",
        "Documentation.LongDescription": "Returnează un tabel care conține setul de proprietăți disponibile pentru măsurile care sunt extinse în cub.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Returnează un tabel ce conţine setul de măsuri disponibile.",
        "Documentation.LongDescription": "Returnează un tabel care conține setul de măsuri disponibile din cadrul <code>cube</code>.\r\n    Fiecare măsură este reprezentată ca funcție. Măsurile pot fi aplicate la cub utilizând Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Returnează un tabel care conține setul de parametri ce se pot aplica la cub.",
        "Documentation.LongDescription": "Returnează un tabel care conține setul de parametri ce se pot aplica la <code>cube</code>. Fiecare parametru este o funcție care poate fi invocată pentru a obține <code>cube</code> cu parametrul și argumentele sale aplicate.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Returnează un tabel care conține setul de proprietăți disponibile pentru dimensiunile care sunt extinse în cub.",
        "Documentation.LongDescription": "Returnează un tabel care conține setul de proprietăți disponibile pentru dimensiunile care sunt extinse în cub.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Introduceți adresa URL a contului dvs. Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Returnează un tabel ce conține un rând pentru fiecare folder și fișier găsit la adresa <code>url</code>, de la Azure Data Lake Storage Gen1. Fiecare rând conține proprietăți ale folderului sau fișierului și un link la conținutul său."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Introduceți adresa URL a contului dvs. Azure Data Lake Storage.",
        "Documentation.LongDescription": "Returnează un tabel ce conține un rând pentru fiecare fișier găsit la adresa <code>url</code>, de la Azure Data Lake Storage Gen1. Fiecare rând conține proprietăți ale fișierului și un link la conținutul său."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Introduceți adresa URL a unui cont Azure Cosmos DB.",
        "Documentation.LongDescription": "Returnează un tabel al bazelor de date Azure Cosmos DB de la <code>url</code>. Dacă se specifică <code>database</code>, se va returna în schimb un tabel de colecții. În plus, dacă este specificat câmpul <code>Query</code> în înregistrarea <code>options</code>, se vor returna rezultatele interogării executate pentru baza de date și/sau colecția specificată."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Introduceți URL-ul punctului dvs. final pentru serviciul OData Dynamics 365 Business Central (local).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (local)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (local)",
        "Documentation.LongDescription": "Returnează un tabel cu datele Dynamics 365 Business Central (local) relevante. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Introduceți adresa URL a punctului final al serviciului OData Dynamics NAV.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Returnează un tabel cu datele Dynamics NAV relevante. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Returnează cuburile dintr-o instanță Essbase, grupate după serverul Essbase.",
        "Documentation.LongDescription": "Returnează un tabel de cuburi grupate după serverul Essbase dintr-o instanță Essbase de pe serverul APS <code>url</code>. Un parametru opțional de înregistrare, <code>options</code>, poate fi specificat pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Returnează conținutul registrului de lucru Excel.",
        "Documentation.LongDescription": "Returnează conținutul registrului de lucru Excel.\r\n    <ul>\r\n     <li> <code>useHeaders</code> poate fi nul, o valoare logică (true/false) care indică dacă primul rând al fiecărui tabel returnat trebuie tratat ca antet sau ca o înregistrare de opțiuni. Implicit: false.</li>\r\n     <li> <code>delayTypes</code> poate fi nul sau o valoare logică (true/false) care indică dacă coloanele fiecărui tabel returnat trebuie lăsate fără tip. Implicit: false.</li>\r\n    </ul>\r\n\r\n    Dacă o înregistrare este specificată pentru <code>useHeaders</code> (și <code>delayTypes</code> este nul), pot fi furnizate următoarele câmpuri de înregistrare:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: poate fi nul sau o valoare logică (true/false) care indică dacă primul rând al fiecărui tabel returnat trebuie tratat ca antet. Implicit: false.</li>\r\n     <li> <code>DelayTypes</code>: poate fi nul sau o valoare logică (true/false) care indică dacă coloanele fiecărui tabel returnat trebuie lăsate fără tip. Implicit: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: poate fi nul sau o valoare logică (true/false) care indică dacă suprafața unei foi de lucru care conține date trebuie dedusă citind foaia de lucru în sine, nu citind metadatele dimensiunilor din fișier. Acest lucru poate fi util în cazurile în care metadatele dimensiunilor sunt incorecte. Rețineți că această opțiune este acceptată numai pentru fișierele Open XML Excel, nu pentru fișierele Excel moștenite. Implicit: false.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Returnați conținutul din Foaia1 dintr-un registru de lucru Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Returnează un tabel ce cuprinde proprietățile și conținutul fișierelor și folderelor găsite în folderul specificat.",
        "Documentation.LongDescription": "Returnează un tabel care conține un rând pentru fiecare folder și fișier găsit în folderul <code>path</code>. Fiecare rând conține proprietățile folderului sau fișierului și un link la conținutul său. Parametrul <code>options</code> este destinat în prezent doar utilizării interne.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Returnează un tabel ce conţine proprietăţile şi conţinutul fişierelor găsite în folderul şi subfolderele specificate.",
        "Documentation.LongDescription": "Returnează un tabel care conține un rând pentru fiecare fișier găsit în folderul <code>path</code> și în toate subfolderele sale. Fiecare rând conține proprietățile fișierului și un link la conținutul său. Parametrul <code>options</code> este destinat în prezent doar utilizării interne.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Importați date dintr-o bază de date Google BigQuery utilizând Azure AD",
        "Documentation.LongDescription": "\r\n      Returnează un tabel care enumeră proiectele disponibile în Google BigQuery utilizând Azure AD pentru <code>ID-ul proiectului de facturare</code>. Se poate specifica un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: o durată care controlează cât timp se așteaptă înainte de a abandona o încercare de conectare la server. Valoarea implicită este valoarea de expirare a conexiunii ODBC.</li>\r\n        <li><code>CommandTimeout</code>: o durată care controlează cât timp poate rula interogarea de pe partea serverului înainte de a fi anulată.</li>\r\n        <li><code>UseStorageApi</code>: specifică dacă se utilizează API-ul de stocare BigQuery pentru seturile de rezultate mari. Valoarea implicită este True pentru a utiliza API-ul de stocare. Setați la False pentru a nu utiliza API-ul de stocare</li>\r\n        <li><code>AudienceUri</code>: acesta este URI-ul audienței pe care driverul ODBC îl poate utiliza pentru solicitările sale de schimb de tokenuri. Acest câmp trebuie să fie un URI complet calificat (de exemplu, //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/aad-provider), unde pool_id este un nume unic global pentru a identifica grupul forței de muncă.</li>\r\n      </ul>\r\n    Parametrul de înregistrare este specificat ca [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Listați proiectele disponibile în Google BigQuery utilizând Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Sheets",
        "Documentation.Caption": "Google Sheets",
        "Documentation.Description": "Importă date din GoogleSheets",
        "Documentation.LongDescription": "Importă date din GoogleSheets"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Returnează un tabel de navigare ce conține containerele găsite în contul specificat dintr-un seif de stocare Azure.",
        "Documentation.LongDescription": "Returnează un tabel de navigare ce conține un rând pentru fiecare container găsit la adresa URL a contului, <code>account</code>, dintr-un seif de stocare Azure. Fiecare rând conține un link la bloburile containerului.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Returnează un tabel de navigare ce conține containerele găsite în contul specificat dintr-un seif de stocare Azure.",
        "Documentation.LongDescription": "Returnează un tabel de navigare ce conține un rând pentru fiecare container găsit la adresa URL a contului, <code>account</code>, dintr-un seif de stocare Azure. Fiecare rând conține un link la bloburile containerului.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Returnează un tabel ce conţine proprietăţile şi conţinutul fişierelor şi folderelor găsite în folderul specificat dintr-un sistem de fişiere Hadoop.",
        "Documentation.LongDescription": "Returnează un tabel ce conţine un rând pentru fiecare folder şi fişier găsit în adresa URL a folderului, <code>url</code>, dintr-un sistem de fişiere Hadoop. Fiecare rând conţine proprietăţi ale folderului sau fişierului şi un link la conţinutul său.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Returnează un tabel ce conţine proprietăţile şi conţinutul fişierelor găsite în folderul şi subfolderele specificate dintr-un sistem de fişiere Hadoop.",
        "Documentation.LongDescription": "Returnează un tabel ce conţine un rând pentru fiecare folder şi fişier găsit în adresa URL a folderului, <code>url</code>, şi subfoldere dintr-un sistem de fişiere Hadoop. Fiecare rând conţine proprietăţi ale fişierului şi un link la conţinutul său.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importați date dintr-un cluster Impala",
        "Documentation.LongDescription": "Importați date dintr-un cluster Impala <code>server</code>. Dacă nu s-a specificat un port, se va utiliza portul implicit 21050.",
        "Documentation.Examples": [
          {
            "Description": "Listați tabelele dintr-un cluster Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Importă date din Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importă date de la instanța Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel de informații de evenimente Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Un tabel cu evenimente Storm din baza de date „Eșantioane” din clusterul „ajutor”"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Returnează un tabel cu date de la un punct final MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Face un apel la API-ul MailChimp și returnează setul de date rezultat sub formă de tabel. Paginează automat toate rezultatele. Parametrul opțional entityName poate fi utilizat pentru punctele finale API unde punctul final rădăcină și entityName principal din răspunsul JSON nu se potrivesc.",
        "Documentation.Examples": [
          {
            "Description": "Extrage un tabel de date din punctul final pentru liste al API-ului MailChimp.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Un tabel cu date de liste."
          },
          {
            "Description": "Extrage un tabel de date de la punctul final cu folderele de campanie de la API-ul MailChimp.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Un tabel cu date de foldere de campanie."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Returnează rezultatele brute de răspuns de la un punct final din API-ul MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Face un apel la API-ul MailChimp și returnează răspunsul brut.",
        "Documentation.Examples": [
          {
            "Description": "Returnează datele brute de la punctul final reports/click-details din API-ul MailChimp pentru o campanie dată.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Date brute cu detalii despre clicuri din campania dată."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Oferiți funcții avansate de interogare.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Oferiți funcții avansate de interogare.",
        "Documentation.Examples": [
          {
            "Description": "Presupunând că astăzi este 15.06.2017, obțineți rezumatele de date dintre 1.05.2017 și 15.06.2017",
            "Code": "\r\n      permiteți    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      în     \r\n          rezultat\r\n    ",
            "Result": "Funcția va returna rezumatele de date dintre 1.05.2017 și 15.06.2017"
          },
          {
            "Description": "Presupunând că astăzi este 15.06.2017, obțineți rezumatele de date pentru aprilie 2017.",
            "Code": "\r\n      permiteți    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      în     \r\n          rezultat\r\n    ",
            "Result": "Funcția va returna datele dintre 1.04.2017 și 30.04.2017"
          },
          {
            "Description": "Presupunând că astăzi este 15.06.2017, obțineți rezumatele de date din aprilie 2017 până acum.",
            "Code": "\r\n      permiteți    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      în     \r\n          rezultat\r\n    ",
            "Result": "Funcția va returna datele dintre 1.04.2017 și 15.06.2017"
          },
          {
            "Description": "Presupunând că astăzi este 15.06.2017, obțineți rezumatele de date din decembrie anul trecut până în luna februarie a anului curent ",
            "Code": "\r\n      permiteți    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      în     \r\n          rezultat\r\n    ",
            "Result": "Funcția va returna datele dintre 1.12.2016 și 28.02.2017"
          },
          {
            "Description": "Presupunând că astăzi este 15.06.2017, obțineți taxele de piață pentru ultimele 18 luni",
            "Code": "\r\n      permiteți    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      în     \r\n          rezultat\r\n    ",
            "Result": "Funcția va returna datele dintre 1.12.2015 și 15.06.2017"
          },
          {
            "Description": "Presupunând că astăzi este 15.06.2017, obțineți taxele detaliate pentru iunie 2017 și mai 2017",
            "Code": "\r\n      permiteți    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      în     \r\n          rezultat\r\n    ",
            "Result": "Funcția va returna datele dintre 1.05.2017 și 15.06.2017"
          },
          {
            "Description": "Presupunând că astăzi este 3.07.2017, obțineți taxele detaliate pentru iulie 2016",
            "Code": "\r\n      permiteți  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      în     \r\n          rezultat\r\n    ",
            "Result": "Funcția va returna date dintre 1.07.2016 și 31.07.2016"
          },
          {
            "Description": "Presupunând că astăzi este 13.07.2017, obțineți rezumatele de sold pentru ultimele 10 luni, plus 13 zile din această lună",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funcția va returna datele dintre 1.09.2016 și 13.07.2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Returnează un tabel de vizualizări și tabele SQL din sursa de date ODBC. ",
        "Documentation.LongDescription": "Returnează un tabel de vizualizări și tabele SQL din sursa de date ODBC specificată de șirul de conexiune <code>connectionString</code>. <code>connectionString</code> poate fi text sau o înregistrare cu perechi proprietate-valoare. Valorile de proprietăți pot fi sub formă de text sau numere. Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită este de 15 secunde.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : O valoare logică (true/false) ce determină dacă se produc opțiuni șir de conexiune compatibile cu SQL Server pentru autentificarea Windows. Valoarea implicită este true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Returnați vizualizările și tabelele SQL din șirul de conexiune furnizat.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Returnează un tabel de tabele SQL și vizualizări din sursa de date OLE DB.",
        "Documentation.LongDescription": "Returnează un tabel de tabele SQL și vizualizări din sursa de date OLE DB specificată de șirul de conexiune <code>connectionString</code>. <code>connectionString</code> poate fi text sau o înregistrare cu perechi proprietăți-valoare. Valorile proprietăților pot fi text sau numere. Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este true).</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : O valoare logică (true/false) ce determină dacă se produc opțiuni șir de conexiune compatibile cu SQL Server pentru autentificarea Windows. Valoarea implicită este true.</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...] sau [Query = \"select ...\"], de exemplu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Returnează un tabel de tabele SQL şi vizualizări din baza de date Oracle.",
        "Documentation.LongDescription": "Returnează un tabel de tabele și vizualizări SQL din baza de date Oracle de pe serverul <code>server</code>. Portul poate fi specificat opțional împreună cu serverul, separat prin două puncte. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...] sau [Query = \"select ...\"], de exemplu.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Returnează toate tabelele găsite într-un fișier PDF.",
        "Documentation.LongDescription": "Returnează toate tabelele găsite în <code>pdf</code>. Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>Implementation</code> : Versiunea algoritmului de utilizat la identificarea tabelelor. Versiunile vechi sunt disponibile numai pentru compatibilitate inversă, pentru a &#238;mpiedica defectarea interogărilor vechi de către actualizările de algoritmi. Cea mai nouă versiune ar trebui să ofere &#238;ntotdeauna cele mai bune rezultate. Valorile valide sunt „1.3”, „1.2”, „1.1” sau nul.</li>\r\n<li><code>StartPage</code> : Specifică prima pagină din intervalul de pagini de examinat. Implicit: 1.</li>\r\n<li><code>EndPage</code> : Specifică ultima pagină din intervalul de pagini de examinat. Implicit: ultima pagină a documentului.</li>\r\n<li><code>MultiPageTables</code> : Controlează dacă tabelele similare de pe pagini consecutive vor fi automat combinate &#238;ntr-un singur tabel. Implicit: true.</li>\r\n<li><code>EnforceBorderLines</code> : Controlează dacă liniile de bordură sunt &#238;ntotdeauna impuse ca limite de celule (dacă este true) sau dacă sunt utilizate ca indicii, &#238;ntre altele, pentru a determina limitele celulelor (dacă este false). Implicit: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Se accesează datele",
        "Documentation.Examples": [
          {
            "Description": "Returnează tabelele incluse în exemplu.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\exemplu.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Introduceți adresa URL a contului dvs. Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Returnează un tabel cu date relevante din Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þγťћοη śςгίρт",
        "Documentation.Description": "Ежéĉüŧêѕ Ρуτнóπ şćŕíρť дпđ я℮ťűřйŝ ďåτą ƒŗãмєš",
        "Documentation.Examples": {
          "Description": "Ежéĉüŧêѕ Ρуτнóπ şćŕíρť дпđ я℮ťűřйŝ ďåτą ƒŗãмєš",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Я ѕсřїþţ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Returnează un tabel în care fiecare rând este un nume şi o valoare pentru câmp din înregistrarea de intrare.",
        "Documentation.LongDescription": "Returnează un tabel ce conţine coloanele <code>Name</code> şi <code>Value</code> cu un rând pentru fiecare câmp din <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Returnați tabelul din înregistrare.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Returnează pachetele dintr-o bază de date SAP HANA.",
        "Documentation.LongDescription": "Returnează un tabel de pachete multidimensionale de la baza de date SAP HANA <code>server</code>. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>Distribution</code> : Un element SapHanaDistribution care setează valoarea proprietății „Distribuire” din șirul de conexiune. Rutarea instrucțiunilor este metoda de a evalua nodul de server corect al unui sistem distribuit &#238;nainte de a executa instrucțiunea. Valoarea implicită este SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Specifică implementarea conectorului SAP HANA care să se utilizeze.</li>\r\n<li><code>EnableColumnBinding</code> : Leagă variabilele la coloanele unui set de rezultate SAP Hana la preluarea datelor. Poate &#238;mbunătăți performanța cu prețul unei utilizări ușor mai mari a memoriei. Valoarea implicită este fals.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită este de 15 secunde.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Returnează un tabel ce include conţinutul de pe un site SharePoint.",
        "Documentation.LongDescription": "Returnează un tabel care conține un rând pentru fiecare folder și document găsit pe site-ul SharePoint specificat, <code>url</code>. Fiecare rând conține proprietăți ale folderului sau fișierului și o legătură la conținutul său. Se poate specifica <code>options</code> pentru a controla opțiunile următoare:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Un număr (14 sau 15) sau textul „Auto” ce specifică versiunea de API SharePoint de utilizat pentru acest site. Atunci c&#226;nd nu se specifică, se va utiliza versiunea API 14. Atunci c&#226;nd se specifică Auto, versiunea serverului va fi descoperită automat, dacă este posibil, altfel va reveni la 14. Site-urile SharePoint care nu sunt &#238;n limba engleză necesită cel puțin versiunea 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Returnează un tabel ce include documente de pe un site SharePoint.",
        "Documentation.LongDescription": "Returnează un tabel care conține un rând pentru fiecare document găsit pe site-ul SharePoint specificat, <code>url</code>, și în subfoldere. Fiecare rând conține proprietăți ale folderului sau fișierului și o legătură la conținutul său. Se poate specifica <code>options</code> pentru a controla opțiunile următoare:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Un număr (14 sau 15) sau textul „Auto” ce specifică versiunea de API SharePoint de utilizat pentru acest site. Atunci c&#226;nd nu se specifică, se va utiliza versiunea API 14. Atunci c&#226;nd se specifică Auto, versiunea serverului va fi descoperită automat, dacă este posibil, altfel va reveni la 14. Site-urile SharePoint care nu sunt &#238;n limba engleză necesită cel puțin versiunea 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Returnează un tabel ce include conținutul dintr-o listă SharePoint.",
        "Documentation.LongDescription": "Returnează un tabel care conține un rând pentru fiecare element de listă găsit în lista SharePoint specificată, <code>url</code>. Fiecare rând conține proprietăți ale listei. Se poate specifica <code>options</code> pentru a controla opțiunile următoare:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Un număr (14 sau 15) sau textul „Auto” ce specifică versiunea de API SharePoint de utilizat pentru acest site. Atunci c&#226;nd nu se specifică, se va utiliza versiunea API 14. Atunci c&#226;nd se specifică Auto, versiunea serverului va fi descoperită automat, dacă este posibil, altfel va reveni la 14. Site-urile SharePoint care nu sunt &#238;n limba engleză necesită cel puțin versiunea 15.</li>\r\n<li><code>Implementation</code> : Opțional. Specifică ce versiune a conectorului SharePoint să utilizați. Valorile acceptate sunt „2.0” sau null. Dacă valoarea este „2.0”, se utilizează implementarea 2.0 a conectorului SharePoint. Dacă valoarea este nulă, se utilizează implementarea inițială a conectorului SharePoint.</li>\r\n<li><code>ViewMode</code> : Opțional. Această opțiune este validă doar pentru implementarea 2.0. Valorile acceptate sunt „Toate” și „Implicite”. Dacă nu este specificată nicio valoare, valoarea este setată la „Toate”. C&#226;nd se specifică valoarea „Toate”, vizualizarea include toate coloanele create de utilizator și definite de sistem. Atunci c&#226;nd se specifică valoarea „Implicite”, vizualizarea se va potrivi cu ceea ce vede utilizatorul atunci c&#226;nd analizează lista online &#238;n orice vizualizare setată de utilizator ca implicită &#238;n setările sale. Dacă utilizatorul editează vizualizarea implicită pentru a adăuga sau a elimina coloane create de utilizator sau definite de sistem sau prin crearea unei vizualizări noi și setarea acesteia ca implicită, aceste modificări se vor propaga prin conector.</li>\r\n<li><code>DisableAppendNoteColumns</code> : &#206;mpiedică conectorul să utilizeze un punct final separat pentru coloanele de note.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Returnează un tabel din conţinut la adresa URL specificată formatată conform interfeţei API SODA 2.0.",
        "Documentation.LongDescription": "Returnează un tabel din conţinut la adresa URL specificată <code>url</code> formatată conform interfeţei API SODA 2.0. Adresa URL trebuie să indice la o sursă compatibilă cu SODA validă care se termină cu o extensie .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Această funcție se poate utiliza pentru a apela oricare dintre punctele finale „Liste” oferite de API-ul SparkPost v1. Atunci când apelați API-ul SparkPost folosind această funcție, rețineți că API-ul SparkPost are o limită de rată API strictă. Dacă vedeți un cod de stare 429 returnat de serverul SparkPost, ați atins limita de rată și va trebui să așteptați câteva clipe înainte de a face mai multe apeluri.",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel cu o singură coloană completată cu date de la unul dintre punctele finale „Liste” v1 API SparkPost (consultați documentația SparkPost pentru detalii).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Regăsiți tabelele încorporate expuse de conectorul SparkPost cu date agregate pentru un număr de zile specificat de utilizator. Când reîmprospătați aceste tabele sau apelați API-ul SparkPost utilizând acest conector, rețineți că API-ul SparkPost are o limită de rată API strictă. Dacă vedeți un cod de stare 429 returnat de serverul SparkPost, ați atins limita de rată și va trebui să așteptați câteva clipe înainte de a face mai multe apeluri. Când alegeți o valoare pentru parametrul Număr de zile, rețineți că API-ul stochează numai 6 luni de date."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Returnează un table de baze de date pe un server SQL Server.",
        "Documentation.LongDescription": "Returnează un tabel cu bazele de date pe serverul SQL Server specificat, <code>server</code>. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Un număr care setează valoarea clauzei de interogare „maxdop” &#238;n interogarea SQL generată.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n<li><code>MultiSubnetFailover</code> : O valoare logică (true/false) care setează valoarea proprietății „MultiSubnetFailover” din șirul de conexiune (valoarea implicită este false).</li>\r\n<li><code>UnsafeTypeConversions</code> : O valoare logică (true/false) care, dacă este true, &#238;ncearcă să reformuleze conversiile de tip care ar putea eșua și face &#238;ntreaga interogare să eșueze. Nu se recomandă pentru utilizare generală.</li>\r\n<li><code>ContextInfo</code> : O valoare binară utilizată pentru a seta CONTEXT_INFO &#238;nainte de rularea fiecărei comenzi.</li>\r\n<li><code>OmitSRID</code> : O valoare logică (true/false) care, dacă este true, omite SRID atunci c&#226;nd produce text Well-Known Text din tipurile de geometrii și geografii.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : O valoare logică (True/False) care, dacă este True, permite plierea interogărilor &#238;n bazele de date de pe același server. Valoarea implicită este False.</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...], de exemplu.\r\n    <br>\r\n    Nu acceptă setarea unei interogări SQL care să ruleze pe server. Trebuie utilizată comanda <code>Sql.Database</code> în schimb pentru a rula o interogare SQL.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Creează un apel către API-ul Stripe, cu opțiunea de a limita numărul de apeluri API realizate.",
        "Documentation.LongDescription": "Creează un apel către API-ul Stripe de la https://api.stripe.com/v1/<code>metodă</code>, cu înregistrarea opțională <code>interogare</code> transmisă ca parametri suplimentari și <code>limităPagini</code>, opțional, ca limită a numărului de solicitări API. Sunt returnate întâi cele mai recente date. Dacă nu este specificată valoarea <code>limităPagini</code>, sunt returnate toate datele. Se utilizează versiunea Stripe 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Returnează datele tuturor plăților",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Un tabel cu toate datele de plăți pentru contul Stripe curent"
          },
          {
            "Description": "Returnează o pagină cu date despre plăți",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Un tabel cu cele mai recente date de plăți pentru contul Stripe curent"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Utilizează un tabel ca zonă tampon în memorie, izolându-l de modificările externe în timpul evaluării.",
        "Documentation.LongDescription": "Utilizează un tabel ca zonă tampon în memorie, izolându-l de modificările externe în timpul evaluării.\r\n    Utilizarea ca zonă tampon este superficială. Aceasta forțează evaluarea oricărei valori scalare a celulelor, dar lasă valorile non-scalare (înregistrări, liste, tabele ș.a.m.d.) ca atare.\r\n    <br>\r\n    <br>\r\n    Rețineți că utilizarea acestei funcții ar putea sau nu face ca interogările să ruleze mai rapid. În unele cazuri, interogările dvs. pot rula mai lent din cauza adăugării \r\n    costului citirii tuturor datelor și al stocării lor în memorie, precum și din cauză că utilizarea ca zonă tampon împiedică reformularea în aval. Dacă nu este nevoie ca datele să fie\r\n    utilizate ca zonă tampon și doar doriți să împiedicați reformularea în aval, utilizați în schimb <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Încărcați toate rândurile unui tabel SQL în memorie, astfel încât orice operațiune descendentă să nu mai poată interoga serverul SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Returnează un tabel care este rezultatul îmbinării unei liste de tabele.",
        "Documentation.LongDescription": "Returnează un tabel care este rezultatul îmbinării unei liste de tabele, <code>tables</code>. Tabelul rezultat va avea o structură a tipului de rând definită de <code>columns</code> sau printr-o uniune a tipurilor de intrări dacă <code>columns</code> nu este specificat.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Îmbinați cele trei tabele.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Îmbinați trei tabele cu structuri diferite.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Îmbinați două tabele și proiectați-le pe tipul dat.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Retrogradează anteturile coloanelor la primul rând de valori.",
        "Documentation.LongDescription": "Retrogradează anteturile coloanelor (adică, numele coloanelor) la primul rând de valori. Numele implicite de coloane sunt „Column1”, „Column2” şi aşa mai departe.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Retrogradează primul rând de valori din tabel.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Elimină rândurile duplicat din tabel.",
        "Documentation.LongDescription": "Elimină rândurile dublate din tabel.\r\n    Un parametru opțional, <code>equationCriteria</code>, specifică ce coloane din tabel sunt testate pentru dublare. Dacă nu se specifică <code>equationCriteria</code>, sunt testate toate coloanele. <br>\r\n    <br>\r\n    Deoarece Power Query descarcă uneori anumite operațiuni pentru sursele de date backend (cunoscută ca „pliere”) și optimizează uneori interogările \r\n    omițând operațiunile care nu sunt strict necesare, în general nu există nicio garanție care dublură anume va fi păstrată.\r\n    De exemplu, nu puteți presupune că primul rând cu un set unic de valori de coloană va rămâne, iar rândurile aflate mai jos în tabel vor fi eliminate.\r\n    Dacă doriți ca eliminarea dublurii să se comporte previzibil, mai întâi utilizați tabelul ca zonă tampon, utilizând <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Eliminați rândurile duplicat din tabel.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Eliminaţi rândurile duplicat din coloana [b] din tabelul <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Creează un tabel cu o listă de coloane şi valori specificate.",
        "Documentation.LongDescription": "Creează un tabel de tip <code>columns</code> dintr-o listă <code>lists</code> care conține liste imbricate cu nume și valori pentru coloane.\r\n    Dacă anumite coloane au mai multe valori decât alte coloane, valorile lipsă vor fi completate cu valoarea implicită, „null”, în cazul în care coloanele pot avea valori nule.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Se returnează un tabel dintr-o listă de nume de clienți. Fiecare valoare din elementul listă de clienți devine valoare de rând și fiecare listă devine o coloană.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Creaţi un tabel de la o listă de coloane dată şi de la o listă de nume de coloane.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Creați un tabel cu un număr diferit de coloane pe rând. Valoarea unui rând lipsă este nulă.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Converteşte o listă într-un tabel aplicând funcţia de divizare specificată fiecărui element din listă.",
        "Documentation.LongDescription": "Converteşte o listă, <code>list</code> într-un tabel aplicând funcţia opţională de divizare, <code>splitter</code>, fiecărui element din listă. În mod implicit, lista se presupune a fi o listă de valori text, care este divizată de virgule. <code>columns</code> opţional poate fi numărul de coloane, o listă de coloane sau TableType. <code>default</code> şi <code>extraValues</code> opţionale pot fi, de asemenea, specificate.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Creați un tabel dintr-o listă utilizând divizorul implicit.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Creați un tabel dintr-o listă utilizând un divizor personalizat.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Creați un tabel din listă utilizând divizorul Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Converteşte o listă de înregistrări într-un tabel.",
        "Documentation.LongDescription": "Converteşte <code>records</code>, o listă de înregistrări, într-un tabel.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Creați un tabel din înregistrări, utilizând nume de câmpuri din înregistrare ca nume de coloane.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Creați un tabel din înregistrări cu coloane tastate și selectați coloanele numerice.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Creează un tabel dintr-o listă de valori pentru rând și coloane opționale",
        "Documentation.LongDescription": "Creează un tabel din lista <code>rows</code>, în care fiecare element din listă este o listă interioară, care conține valorile de coloane pentru un singur rând. O listă opțională de nume de coloane, un tip de tabel sau un număr de coloane pot fi furnizate pentru <code>columns</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel cu coloana [IDClient] cu valorile {1, 2}, coloana [Nume] cu valorile {\"Bob\", \"Jim\"} și coloana [Telefon] cu valorile {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Returnează un tabel cu coloana [IDClient] cu valorile {1, 2}, coloana [Nume] cu valorile {\"Bob\", \"Jim\"} și coloana [Telefon] cu valorile {\"123-4567\", \"987-6543\"}, unde [IDClient] este tipul de număr și [Nume] și [Telefon] sunt tipuri de text.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Creează un tabel cu o coloană din valorile furnizate.",
        "Documentation.LongDescription": "Creează un tabel cu o coloană ce conține valoarea furnizată sau lista de valori, <code>value</code>. Un parametru opțional de înregistrare, <code>options</code>, poate fi specificat pentru a controla următoarele opțiuni:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: numele de coloană utilizat la crearea unui tabel dintr-o listă sau dintr-o valoare scalară.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Creaţi un tabel de la valoarea 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Creați un tabel din listă.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Creați un tabel de la valoarea 1, cu un nume de coloană particularizat.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Returnează informaţii despre modul de partiţionare a unui tabel.",
        "Documentation.LongDescription": "Returnează informaţii despre modul de partiţionare a unui tabel.  Se returnează un tabel în care fiecare coloană este o coloană de partiţie în tabelul original şi fiecare rând corespunde unei partiţii în tabelul original.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Returnează un profil al coloanelor unui tabel.",
        "Documentation.LongDescription": "<p>Returnează un profil pentru coloanele din <code>table</code>.</p>\r\n<p>Sunt returnate următoarele informații pentru fiecare coloană (când este cazul):\r\n<ul>\r\n  <li>minim</li>\r\n  <li>maxim</li>\r\n  <li>medie</li>\r\n  <li>deviație standard</li>\r\n  <li>contor</li>\r\n  <li>contor nule</li>\r\n  <li>număr distinct</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Promovează primul rând de valori drept anteturi noi pentru coloane (de exemplu nume de coloane).",
        "Documentation.LongDescription": "Promovează primul rând de valori drept anteturi noi pentru coloane (adică, numele coloanelor). În mod implicit, numai valorile text sau numerice sunt promovate ca anteturi. Opțiunile valide:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: dacă este setată la <code>true</code>, toate valorile scalare din primul rând sunt promovate la anteturi folosind valoarea <code>Culture</code>, dacă este specificată (sau setarea regională curentă a documentului).\r\n    Pentru valorile care nu pot fi convertite în text, va fi utilizat un nume de coloană implicit.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: un nume de cultură care specifică cultura datelor.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Promovați primul rând de valori din tabel.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Promovați toate valorile scalare din primul rând al acestui tabel în anteturi de coloane.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Returnează un tabel cu primele rânduri de numere ignorate.",
        "Documentation.LongDescription": "Returnează un tabel care nu conține primul număr de rânduri specificat <code>countOrCondition</code>, din tabelul <code>table</code>.\r\n    Numărul de rânduri eliminat depinde de parametrul opțional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Dacă <code>countOrCondition</code> este omis, numai primul rând este eliminat. </li>\r\n    <li> Dacă <code>countOrCondition</code> este un număr, vor fi eliminate numărul respectiv de rânduri (începând de sus). </li>\r\n    <li> Dacă <code>countOrCondition</code> este o condiție, rândurile care îndeplinesc condiția vor fi eliminate până când un rând nu îndeplinește condiția.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Eliminați primul rând din tabel.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Eliminați primele două rânduri din tabel.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Eliminați primele rânduri din tabel în care [IDClient] <=2.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Returnează un tabel cu ultimele N rânduri eliminate.",
        "Documentation.LongDescription": "Returnează un tabel care nu conține ultimele <code>countOrCondition</code> rânduri din tabelul <code>table</code>.\r\n        Numărul de rânduri eliminate depinde de parametrul opțional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Dacă <code>countOrCondition</code> este omis, numai ultimul rând este eliminat. </li>\r\n    <li> Dacă <code>countOrCondition</code> este un număr, se va elimina numărul respectiv de rânduri (începând de la final). </li>\r\n    <li> Dacă <code>countOrCondition</code> este o condiție, rândurile care îndeplinesc condiția vor fi eliminate până când un rând nu îndeplinește condiția.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Eliminați ultimul rând al tabelului.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Eliminați ultimele rânduri din tabel în care [IDClient] > 2.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Returnează un tabel cu rândurile eliminate din tabelul de intrare ce conţin o eroare în cel puţin una dintre celule. Dacă se specifică o listă de coloane, atunci numai celulele din coloanele specificate sunt verificate pentru erori.",
        "Documentation.LongDescription": "Returnează un tabel cu rândurile eliminate din tabelul de intrare ce conţin o eroare în cel puţin una dintre celule. Dacă se specifică o listă de coloane, atunci numai celulele din coloanele specificate sunt verificate pentru erori.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Eliminați valoarea de eroare din primul rând.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Returnează un tabel cu rândurile în ordine inversă.",
        "Documentation.LongDescription": "Returnează un tabel cu rândurile din datele introduse <code>table</code> în ordine inversă.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Inversați rândurile din tabel.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Returnează un tabel ce conține o descriere a coloanelor (de ex., schema) tabelului specificat.",
        "Documentation.LongDescription": "<p>Returnează un tabel care descrie coloanele din <code>table</code>.</p>\r\n<p>Fiecare rând din tabel descrie proprietățile unei coloane din <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Numele coloanei</b></td>\r\n    <td><b>Descriere</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Nume</code></td>\r\n    <td>Numele coloanei.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Poziție</code></td>\r\n    <td>Poziția bazată pe 0 a coloanei din <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Numele tipului de coloană.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Tipul tipului coloanei.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Dacă coloana poate conține valori <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Baza numerică (de exemplu, baza 2 sau baza 10) a câmpurilor <code>NumericPrecision</code> și <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Precizia unei coloane numerice în baza specificată de <code>NumericPrecisionBase</code>. Acesta este numărul maxim de cifre care pot fi reprezentate de o valoare de acest tip (inclusiv cifrele fracționare).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Scala unei coloane numerice în baza specificată de <code>NumericPrecisionBase</code>. Acesta este numărul de cifre din partea fracționară a unei valori de acest tip. O valoare <code>0</code> indică o scală fixă fără cifre fracționare. O valoare <code>null</code> indică faptul că scala nu este cunoscută (deoarece este flotantă sau nedefinită).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Numărul maxim de cifre fracționare acceptate în porțiunea secunde a unei valori dată sau oră.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Numărul maxim de caractere permise într-o coloană <code>text</code> sau numărul maxim de byți permiși într-o coloană <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Indică dacă această coloană poate varia în lungime (până la <code>MaxLength</code>) sau dacă are dimensiune fixă.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Numele tipului de coloană din sistemul de tipuri nativ al sursei (de exemplu, <code>nvarchar</code> pentru SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Expresia implicită pentru o valoare a acestei coloane în limba de expresie nativă a sursei (de exemplu, <code>42</code> sau <code>newid()</code> pentru SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Descrierea coloanei.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Returnează un tabel numai cu acele rânduri din tabelul de intrare care conţin o eroare în cel puţin una dintre celule. Dacă se specifică o listă de coloane, atunci numai celulele din coloanele specificate sunt verificate pentru erori.",
        "Documentation.LongDescription": "Returnează un tabel numai cu acele rânduri din tabelul de intrare care conţin o eroare în cel puţin una dintre celule. Dacă se specifică o listă de coloane, atunci numai celulele din coloanele specificate sunt verificate pentru erori.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Selectați numele de clienți ce conțin erori în rândurile lor.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Returnează un tabel cu primele rânduri de numere ignorate.",
        "Documentation.LongDescription": "Returnează un tabel care nu conține primele <code>countOrCondition</code> rânduri specificate din tabelul <code>table</code>.\r\n    Numărul de rânduri omise depinde de parametrul opțional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Dacă <code>countOrCondition</code> este omis, numai primul rând este ignorat. </li>\r\n    <li> Dacă <code>countOrCondition</code> este un număr, se va omite numărul respectiv de rânduri (începând de sus). </li>\r\n    <li> Dacă <code>countOrCondition</code> este o condiție, rândurile care îndeplinesc condiția vor fi omise, până când un rând nu îndeplinește condiția.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ignorați primul rând din tabel.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Ignorați primele două rânduri din tabel.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Ignorați primele rânduri în care [Preț] > 25 din tabel.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Împiedică rularea oricăror operațiuni în aval față de sursa originală a datelor.",
        "Documentation.LongDescription": "Împiedică rularea oricăror operațiuni în aval față de sursa originală a datelor din <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Preia date dintr-un tabel SQL într-un mod care împiedică rularea oricăror operațiuni în aval ca interogare pe serverul SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Transformă coloane în rânduri şi rânduri în coloane.",
        "Documentation.LongDescription": "Transformă coloane în rânduri şi rânduri în coloane.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformaţi rândurile din tabelul de perechi nume-valoare în coloane.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Obține relațiile dintr-un set de tabele.",
        "Documentation.LongDescription": "Obține relațiile dintr-un set de tabele. Se presupune că setul <code>tables</code> are o structură similară cu cea a unui tabel de navigare. Coloana definită de <code>dataColumn</code> conține tabelele de date propriu-zise.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Returnează un tabel de tabele SQL şi vizualizări din baza de date Teradata.",
        "Documentation.LongDescription": "Returnează un tabel de tabele și vizualizări SQL din baza de date Teradata de pe serverul <code>server</code>. Portul poate fi specificat opțional împreună cu serverul, separat prin două puncte. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...] sau [Query = \"select ...\"], de exemplu.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Introduceți numărul de luni de date istorice Twilio care să fie regăsite.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Returnează un tabel cu datele Twilio relevante."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Returnează un tabel ce conține o descriere a coloanelor (de ex., schema) tipului de tabel specificat.",
        "Documentation.LongDescription": "<p>Returnează un tabel care descrie coloanele din <code>tableType</code>.</p>\r\n<p>Consultați documentația <code>Table.Schema</code> pentru o descriere a tabelului rezultat.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Flux Azure DevOps Services",
        "Documentation.DisplayName": "Flux Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Returnează un tabel de fluxuri OData oferite de Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Conectați-vă la datele Viva Insights",
        "Documentation.LongDescription": "Importați măsurătorile săptămânale și datele de atribute din Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel cu atribute vizibile și măsurători pe săptămână pentru fiecare angajat măsurat din partiție.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "advancedParameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Returnează conţinutul documentului HTML divizat în structurile sale constituente, precum şi o reprezentare a documentului complet şi textul acestuia după eliminarea etichetelor.",
        "Documentation.LongDescription": "Returnează conţinutul documentului HTML divizat în structurile sale constituente, precum şi o reprezentare a documentului complet şi textul acestuia după eliminarea etichetelor.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Returnează un tabel cu măsurători Webtrends cheie.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Efectuează un apel la punctul final Webtrends KeyMetrics și returnează toate datele ca tabel.",
        "Documentation.Examples": [
          {
            "Description": "Extrage un tabel de măsurători cheie pentru entitatea găzduită 98765 din ultimele 30 de zile",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Un tabel de măsurători cheie"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Introduceți ID-ul de profil asociat contului dvs. Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Returnează un tabel cu datele Webtrends relevante."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Conectați-vă la datele Viva Insights",
        "Documentation.LongDescription": "Importați măsurătorile săptămânale și datele de atribute din Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel cu atribute vizibile și măsurători pe săptămână pentru fiecare angajat măsurat din partiție.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Returnează conţinutul documentului XML ca tabel ierarhic.",
        "Documentation.LongDescription": "Returnează conţinutul documentului XML ca tabel ierarhic.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Returnează conţinutul documentului XML ca şi colecţie imbricată de tabele aplatizate.",
        "Documentation.LongDescription": "Returnează conţinutul documentului XML ca şi colecţie imbricată de tabele aplatizate.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Regăsiți conținutul unui fișier xml local.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Introduceți adresa URL a contului Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Returnează un tabel cu datele Zendesk relevante."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Returnează colecția de scheme pentru o sursă de date ADO.NET.",
        "Documentation.LongDescription": "Returnează colecția de schemă pentru sursa de date ADO.NET cu numele de furnizor <code>providerName</code> și cu șirul de conexiune <code>connectionString</code>. <code>connectionString</code> poate fi text sau o înregistrare cu perechi proprietate-valoare. Valorile de proprietăți pot fi sub formă de text sau numere. Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : O valoare logică (true/false) ce determină dacă se produc opțiuni șir de conexiune compatibile cu SQL Server pentru autentificarea Windows. Valoarea implicită este true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Importați date dintr-o bază de date Amazon Redshift.",
        "Documentation.LongDescription": "Returnează un tabel care listează tabelele de pe clusterul Amazon Redshift <code>server</code> din baza de date <code>database</code>.  Un parametru opțional de înregistrare, <code>options</code>, poate fi specificat pentru a controla următoarele opțiuni:\r\n<ul>\r\n<li><code>Nume furnizor</code>: o valoare text de utilizat ca nume de furnizor pentru conexiune. Se utilizează la utilizarea Microsoft Authentication.</li>\r\n<li><code>Dimensiune lot</code>: numărul de rânduri preluate într-un singur apel către server.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Returnează un tabel de cuburi multidimensionale sau modele tabelare din baza de date Analysis Services.",
        "Documentation.LongDescription": "Returnează un tabel care conține cuburi multidimensionale sau modele tabelare de la baza de date Analysis Services <code>database</code> pe serverul <code>server</code>. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>Query</code> : O interogare MDX nativă utilizată pentru a prelua date.</li>\r\n<li><code>TypedMeasureColumns</code> : O valoare logică ce indică dacă tipurile specificate &#238;n modelul tabelar sau multidimensional va fi utilizat pentru tipurile de coloane cu măsură adăugată. Atunci c&#226;nd este setată la false, „numărul” tipului va fi utilizat pentru toate coloanele cu măsuri. Valoarea implicită pentru această opțiune este false.</li>\r\n<li><code>Culture</code> : Un nume de cultură care specifică cultura datelor. Acesta corespunde cu proprietatea șirului de conexiune „Identificator setări regionale”.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită depinde de driver.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>SubQueries</code> : Un număr (0, 1 sau 2) care setează valoarea proprietății „SubQueries” &#238;n șirul de conexiune. Aceasta controlează comportamentul membrilor calculați la subselectări sau subcuburi. (Valoarea implicită este 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Returnează un tabel ce listează tabelele din clusterul Spark specificat.",
        "Documentation.LongDescription": "Returnează un tabel ce listează tabelele din gazda <code>host</code> de cluster Spark utilizând <code>protocol</code>. Protocoale valide sunt:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel ce listează tabelele din clusterul Spark specificat.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Introduceți numele organizației și al proiectului.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (doar panourile)",
        "Documentation.LongDescription": "Returnează un tabel de vizualizări analitice oferite de Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Interogare interactivă HDInsight",
        "Documentation.Caption": null,
        "Documentation.Description": "Importați date din interogarea interactivă HDInsight",
        "Documentation.LongDescription": "\r\nReturnează o listă de tabele din interogarea interactivă HDInsight specificată de <code>database</code> pe <code>server</code> de interogare interactivă HDInsight. Un număr de port poate fi specificat opțional împreună cu serverul, separat de două puncte. Un parametru opțional <code>options</code> poate fi specificat pentru a controla următoarele opțiuni:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: o durată care controlează cât timp se așteaptă înainte de a abandona o încercare de a realiza o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n        <li><code>CommandTimeout</code>: o durată care controlează cât timp se permite rularea interogării de partea serverului înainte de a fi anulată. Valoarea implicită depinde de driver.</li>\r\n</ul>\r\nParametrul <code>options</code> este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Returnează un tabel cu coloane mapate la atributele unei entități din Common Data Model, inclusiv tipurile de date.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Returnează un tabel cu coloane mapate la atributele unei entități din Common Data Model, inclusiv tipurile de date. Coloanele din definiția entității vor fi adăugate dacă nu sunt mapate și toate coloanele nemapate vor fi eliminate.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "Retrieve all pages of data",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Returnează un cub după aplicarea unui parametru la acesta.",
        "Documentation.LongDescription": "Returnează un cub după aplicarea <code>parameter</code> cu <code>arguments</code> la <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Modifică granularitatea dimensională a contextului filtru pentru cub prin restrângerea atributelor mapate în coloanele specificate.",
        "Documentation.LongDescription": "Modifică granularitatea dimensională a contextului filtru pentru <code>cube</code> prin restrângerea atributelor mapate în coloanele specificate <code>columnNames</code>. De asemenea, coloanele sunt eliminate din vizualizarea tabelară a cubului.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Înlocuiește setul de dimensiuni returnat de Cube.Dimensions.",
        "Documentation.LongDescription": "Înlocuiește setul de dimensiuni returnat de <code>Cube.Dimensions</code>.\r\n    De exemplu, această funcție se poate utiliza pentru a adăuga o coloană ID la un atribut de dimensiune, astfel încât sursa de date să poată grupa ID-ul, nu valoarea afișată.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Aplică o listă de funcţii de cub.",
        "Documentation.LongDescription": "Aplică lista de funcţii de cub, <code>transforms</code>, pe <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Returnează un tabel de tabele și vizualizări SQL disponibile într-o bază de date Db2.",
        "Documentation.LongDescription": "Returnează un tabel de tabele și vizualizări SQL disponibile într-o bază de date Db2 de pe serverul <code>server</code>, din instanța de bază de date cu numele <code>database</code>. Portul poate fi specificat opțional împreună cu serverul, separat prin două puncte. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n<li><code>Implementation</code> : Specifică implementarea furnizorului intern de baze de date care se va utiliza. Valorile valide sunt: „IBM” și „Microsoft”.</li>\r\n<li><code>BinaryCodePage</code> : Un număr pentru CCSID (Coded Character Set Identifier - identificator set de caractere codat) pentru a decoda datele binare DB2 FOR BIT &#238;n șiruri de caractere. Se aplică pentru implementarea = “Microsoft”. Setați la 0 pentru a dezactiva conversia (implicit). Setați la 1 pentru a face conversia pe baza codificării bazei de date. Setați alt număr CCSID pentru a face conversia la codificarea aplicației.</li>\r\n<li><code>PackageCollection</code> : Specifică o valoare șir de caractere pentru colecția de pachete (valoarea implicită este „NULLID”) pentru a activa utilizarea pachetelor partajate necesare pentru a procesa instrucțiunile SQL. Se aplică pentru Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Specifică dacă conexiunea este efectuată prin intermediul unui gateway Db2 Connect. Se aplică la Implementare = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...] sau [Query = \"select ...\"], de exemplu.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Regăsește un set de date de la Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Returnează un tabel ce conține proprietățile și conținutul bloburilor găsite în containerul specificat dintr-un seif de stocare Azure.",
        "Documentation.LongDescription": "Returnează un tabel ce conține un rând pentru fiecare fișier blob găsit în adresa URL a containerului, <code>account</code>, dintr-un seif de stocare Azure. Fiecare rând conține proprietăți ale fișierului și un link la conținutul său.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Returnează un tabel care conține rezultatele rulării selectorilor CSS specificați în raport cu HTML-ul furnizat.",
        "Documentation.LongDescription": "Returnează un tabel care conține rezultatele rulării selectorilor CSS specificați pentru <code>html</code> furnizate. Poate fi furnizat un parametru opțional de înregistrare, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Se accesează datele",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel pornind de la o valoare text HTML eșantion.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Alexandru</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Extrage toate elementele href dintr-o valoare text HTML eșantion.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Returnează un tabel de tabele și vizualizări SQL disponibile într-o bază de date Informix.",
        "Documentation.LongDescription": "Returnează un tabel de tabele și vizualizări SQL disponibile într-o bază de date Informix de pe serverul <code>server</code> în instanța de bază de date cu numele <code>database</code>. Portul poate fi specificat opțional împreună cu serverul, separat prin două puncte. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...] sau [Query = \"select ...\"], de exemplu.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Returnează un tabel cu detaliile clientului potențial.",
        "Documentation.LongDescription": "Creează un apel către punctul final API Marketo REST de la <code>url</code>/rest/v1/leads.json. Sunt returnați toți clienții potențiali din lista <code>IDuriCliențiPotențiali</code>.",
        "Documentation.Examples": [
          {
            "Description": "Extrage detaliile pentru trei clienți potențiali",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Un tabel cu detaliile pentru clienții potențiali furnizați"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Introduceți URL-ul punctului final Marketo REST API asociat cu contul dvs.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Returnează un tabel cu datele Marketo relevante."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Returnează un tabel de tabele SQL, vizualizări şi funcţii scalare stocate disponibile într-o bază de date MySQL.",
        "Documentation.LongDescription": "Returnează un tabel de tabele, vizualizări și funcții scalare stocate SQL disponibile într-o bază de date MySQL de pe serverul <code>server</code>, în instanța de bază de date cu numele <code>database</code>. Portul poate fi specificat opțional împreună cu serverul, separat prin două puncte. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>Encoding</code> : O valoare TextEncoding ce specifică setul de caractere utilizat pentru a codifica toate interogările trimise la server (valoarea implicită este nul).</li>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>TreatTinyAsBoolean</code> : O valoare logică (true/false) care determină dacă se forțează coloanele tinyint de pe server ca valori logice. Valoarea implicită este true.</li>\r\n<li><code>OldGuids</code> : O valoare logică (true/false) care setează dacă coloanele char(36) (dacă este false) sau binary(16) (dacă este true) vor fi tratate ca GUID-uri. Valoarea implicită este false.</li>\r\n<li><code>ReturnSingleDatabase</code> : O valoare logică (true/false) care setează dacă se returnează toate tabelele din toate bazele de date (dacă este false) sau se returnează tabelele și vizualizările bazei de date specificate (dacă este true). Valoarea implicită este false.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...] sau [Query = \"select ...\"], de exemplu.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Importați date dintr-o bază de date IBM Netezza.",
        "Documentation.LongDescription": "\r\nReturnează un tabel de tabele, vizualizări și funcții Netezza stocate din baza de date Netezza Server <code>database</code> de pe serverul <code>server</code>. Portul poate fi specificat opțional împreună cu serverul, separat de semnul două puncte. Un parametru opțional de înregistrare, <code>options</code>, poate fi specificat pentru a controla următoarele opțiuni:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: O valoare logică (true/false) care stabilește dacă se generează proprietățile de navigare pentru valorile returnate (valoarea implicită este true)</li>\r\n        <li><code>HierarchicalNavigation</code>: O valoare logică (true/false) care stabilește dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false)</li>\r\n        <li><code>ConnectionTimeout</code>: O durată care controlează cât timp se așteaptă până la abandonarea unei încercări de a realiza o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n        <li><code>CommandTimeout</code>: O durată care controlează care controlează cât timp îi este permis interogării de pe partea server să ruleze înainte de a fi revocată. Valoarea implicită depinde de driver.</li>\r\n<li><code>NormalizeDatabaseName</code>: O valoare logică (true/false) care stabilește dacă normalizează numele bazei de date la majuscule sau îl interpretează literal (implicit este true).</li>\r\n</ul>\r\nParametrul înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...].",
        "Documentation.Examples": [
          {
            "Description": "Listați tabelele dintr-un proiect IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Returnează rezultatul rulării unei interogări native pe o bază de date ODBC.",
        "Documentation.LongDescription": "Returnează rezultatul rulării <code>query</code> cu șirul de conexiune <code>connectionString</code> folosind ODBC. <code>connectionString</code> poate fi text sau o înregistrare cu perechi proprietate-valoare. Valorile de proprietăți pot fi sub formă de text sau numere. Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită este de 15 secunde.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : O valoare logică (true/false) ce determină dacă se produc opțiuni șir de conexiune compatibile cu SQL Server pentru autentificarea Windows. Valoarea implicită este true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Returnați rezultatul rulării unei interogări simple pe șirul de conexiune furnizat.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Returnează rezultatul rulării unei interogări native pe o bază de date OLE DB.",
        "Documentation.LongDescription": "Returnează rezultatul rulării <code>query</code> cu șirul de conexiune <code>connectionString</code> folosind OLE DB. <code>connectionString</code> poate fi text sau o înregistrare cu perechi proprietate-valoare. Valorile de proprietăți pot fi sub formă de text sau numere. Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : O valoare logică (true/false) ce determină dacă se produc opțiuni șir de conexiune compatibile cu SQL Server pentru autentificarea Windows. Valoarea implicită este true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Returnează un tabel de tabele SQL şi vizualizări disponibile într-o bază de date PostgreSQL.",
        "Documentation.LongDescription": "Returnează un tabel de tabele și vizualizări SQL disponibile într-o bază de date PostgreSQL de pe serverul <code>server</code> în instanța de bază de date cu numele <code>database</code>. Portul poate fi specificat opțional împreună cu serverul, separat prin două puncte. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...] sau [Query = \"select ...\"], de exemplu.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Importați date de la un depozit Snowflake Computing.",
        "Documentation.LongDescription": "Returnează un tabel care listează tabelele din depozitul (<code>warehouse</code>) Snowflake Computing aflat pe <code>server</code>. Se poate specifica un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n<ul>\r\n<li><code>Rol</code>: o valoare text de folosit ca nume de rol pentru conexiune.</li>\r\n<li><code>CreateNavigationProperties</code>: o valoare logică (true/false) care setează dacă se generează proprietăți de navigare în valorile returnate (valoarea implicită este true).</li>\r\n<li><code>ConnectionTimeout</code>: numărul de secunde cât se așteaptă răspunsurile de rețea de la Snowflake.</li>\r\n<li><code>CommandTimeout</code>: numărul de secunde cât se așteaptă executarea unei interogări.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Enumerați tabelele dintr-un depozit Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Returnează un tabel ce listează tabelele din clusterul Spark specificat.",
        "Documentation.LongDescription": "Returnează un tabel ce listează tabelele din gazda <code>host</code> de cluster Spark utilizând <code>protocol</code>. Protocoale valide sunt:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Listează tabelele dintr-o instanță Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Returnează un tabel de tabele SQL, vizualizări şi funcţii stocate din baza de date SQL Server.",
        "Documentation.LongDescription": "Returnează un tabel cu tabele, vizualizări și funcții stocate SQL din baza de date SQL Server <code>database</code> de pe serverul <code>server</code>. Portul poate fi specificat opțional împreună cu serverul, separat prin virgulă sau două puncte. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Un număr care setează valoarea clauzei de interogare „maxdop” &#238;n interogarea SQL generată.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n<li><code>MultiSubnetFailover</code> : O valoare logică (true/false) care setează valoarea proprietății „MultiSubnetFailover” din șirul de conexiune (valoarea implicită este false).</li>\r\n<li><code>UnsafeTypeConversions</code> : O valoare logică (true/false) care, dacă este true, &#238;ncearcă să reformuleze conversiile de tip care ar putea eșua și face &#238;ntreaga interogare să eșueze. Nu se recomandă pentru utilizare generală.</li>\r\n<li><code>ContextInfo</code> : O valoare binară utilizată pentru a seta CONTEXT_INFO &#238;nainte de rularea fiecărei comenzi.</li>\r\n<li><code>OmitSRID</code> : O valoare logică (true/false) care, dacă este true, omite SRID atunci c&#226;nd produce text Well-Known Text din tipurile de geometrii și geografii.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : O valoare logică (True/False) care, dacă este True, permite plierea interogărilor &#238;n bazele de date de pe același server. Valoarea implicită este False.</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...] sau [Query = \"select ...\"], de exemplu.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Returnează un tabel de tabele şi vizualizări SQL disponibile într-o bază de date Sybase.",
        "Documentation.LongDescription": "Returnează un tabel de tabele și vizualizări SQL disponibile într-o bază de date Sybase de pe serverul <code>server</code> în instanța de bază de date cu numele <code>database</code>. Portul poate fi specificat opțional împreună cu serverul, separat prin două puncte. Poate fi specificat un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : O funcție utilizată pentru crearea numelor proprietăților de navigare.</li>\r\n<li><code>Query</code> : O interogare SQL nativă utilizată pentru a prelua date. Dacă interogarea produse mai multe seturi de rezultate, doar primul va fi returnat.</li>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>ConnectionTimeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona o &#238;ncercare de a face o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n</ul>\r\n\r\n    Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...] sau [Query = \"select ...\"], de exemplu.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Adaugă o coloană cu valori explicite pentru poziţie.",
        "Documentation.LongDescription": "Adaugă o coloană cu numele <code>newColumnName</code> la <code>table</code> cu valori explicite pentru poziţie.\r\n    O valoare opţională, <code>initialValue</code>, valoarea de index iniţială. O valoare opţională, <code>increment</code>, specifică cu cât trebuie să se crească fiecare valoare de index.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adăugați o coloană de index cu numele „Index” la tabel.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Adăugați o coloană de index cu numele „index”, începând de la valoarea 10 și crescând cu 5, la tabel.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Ţinând cont de o coloană de liste într-un tabel, creaţi o copie a unui rând pentru fiecare valoare din listă.",
        "Documentation.LongDescription": "Ţinând cont de <code>table</code>, în care <code>column</code> este o listă de valori, divizaţi lista într-un rând pentru fiecare valoare. Valorile din celelalte coloane sunt dublate în fiecare rând nou creat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Divizați coloana listă [Nume] din tabel.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Propagă valoarea unei celule anterioare în celulele cu valoarea null de mai jos din coloană.",
        "Documentation.LongDescription": "Returnează un tabel de la <code>table</code> specificat în care valoarea unei celule anterioare este propagată la celulele cu valoarea null de mai jos din <code>columns</code> specificat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Returnați un tabel cu valori nule în coloana [Loc] completată cu valoarea de deasupra acestora din tabel.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Propagă valoarea unei celule în celulele cu valoarea null de mai sus din coloană.",
        "Documentation.LongDescription": "Returnează un tabel de la <code>table</code> specificat în care valoarea următoarei celule este propagată la celulele cu valoarea null de mai sus din <code>columns</code> specificat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Returnați un tabel cu valori nule în coloana [Coloana2] completată cu valoarea de sub acestea din tabel.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Returnează toate rândurile care conţin textul dat în tabel.",
        "Documentation.LongDescription": "Returnează rândurile din tabelul <code>table</code> care conţin textul <code>text</code>. Dacă nu se găseşte textul, se returnează un tabel necompletat.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiți rândurile din tabel ce conțin „Bob”.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Returnează primele rânduri de numere specificate.",
        "Documentation.LongDescription": "Returnează primele rânduri ale tabelului <code>table</code>, în funcţie de valoarea <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Dacă <code>countOrCondition</code> este un număr, va fi returnat numărul respectiv de rânduri (începând de sus). </li>\r\n    <li> Dacă <code>countOrCondition</code> este o condiţie, rândurile care îndeplinesc condiţia vor fi returnate până când un rând nu îndeplineşte condiţia.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiți primele două rânduri din tabel.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Găsiți primele rânduri în care [a] > 0 în tabel.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Returnează un tabel care este rezultatul combinării unui set de tabele partiționate.",
        "Documentation.LongDescription": "Returnează un tabel care este rezultatul combinării unui set de tabele partiționate, <code>partitions</code>. <code>partitionColumn</code> este numele coloanei de adăugat. Tipul coloanei este în mod implicit <code>oricare</code>, dar poate fi specificat de <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiți tipul elementului din listă <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Returnează ultimul număr de rânduri specificat.",
        "Documentation.LongDescription": "Returnează ultimele rânduri din tabelul, <code>table</code>, în funcţie de valoarea <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Dacă <code>countOrCondition</code> este un număr, va fi returnat numărul respectiv de rânduri, începând de la poziţia (sfârşit - <code>countOrCondition</code>). </li>\r\n    <li> Dacă <code>countOrCondition</code> este o condiţie, rândurile care îndeplinesc condiţia vor fi returnate în poziţie crescătoare până când un rând nu îndeplineşte condiţia.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiți ultimele două rânduri din tabel.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Găsiți ultimele rânduri în care [a] > 0 în tabel.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Returnează un tabel în care toate coloanele au ca prefix textul dat.",
        "Documentation.LongDescription": "Returnează un tabel în care toate numele coloanelor din <code>table</code> furnizate au ca prefix textul dat, <code>prefix</code>, plus un punct în forma <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Introduceți prefixul „MyTable” pentru coloanele din tabel.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Returnează rândurile care încep la decalajul specificat.",
        "Documentation.LongDescription": "Returnează rândurile din <code>table</code> care încep de la <code>offset</code> specificat. Un parametru opţional, <code>count</code>, specifică numărul de rânduri de returnat. În mod implicit, sunt returnate toate rândurile după decalaj.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Returnați toate rândurile care încep de la decalajul 1 din tabel.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Returnați rândul care începe de la decalajul 1 din tabel.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Elimină coloanele specificate.",
        "Documentation.LongDescription": "Elimină <code>columns</code> specificate din <code>table</code> furnizate. \n\rDacă coloana specificată nu există, se declanșează o eroare dacă parametrul opțional <code>missingField</code> specifică un comportament alternativ (de exemplu, <code>MissingField.UseNull</code> sau <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Eliminați coloana [Telefon] din tabel.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Încercați să eliminați o coloană inexistentă din tabel.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Elimină toate ocurenţele rândurilor specificate din tabel.",
        "Documentation.LongDescription": "Elimină toate ocurențele <code>rows</code> specificate din <code>table</code>.\r\n    Poate fi specificat un parametru opțional, <code>equationCriteria</code>, pentru a controla comparația între rândurile tabelului.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi toate rândurile în care [a = 1] din tabelul <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Elimină numărul specificat de rânduri.",
        "Documentation.LongDescription": "Elimină <code>count</code> de rânduri de la începutul <code>table</code>, începând de la <code>offset</code> specificată. Un număr implicit 1 este utilizat dacă parametrul <code>count</code> nu este furnizat. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Eliminați primul rând din tabel.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Eliminați rândul de la poziția 1 din tabel.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Eliminați două rânduri începând cu poziția 1 din tabel.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Aplică redenumirile de forma {old, new}.",
        "Documentation.LongDescription": "Efectuează redenumirile date în coloanele din tabelul <code>table</code>. O operaţiune de înlocuire <code>renames</code> este alcătuită dintr-o listă de două valori, numele vechii coloane şi numele noii coloane furnizate într-o listă.\r\n    În cazul în care coloana nu există, apare o excepţie dacă parametrul opţional <code>missingField</code> nu specifică o alternativă (de ex., <code>MissingField.UseNull</code> sau <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiți numele coloanei „NumClient” cu „IDClient” în tabel.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Înlocuiți numele coloanei „NumClient” cu „IDClient” și „NumTelefon” cu „Telefon” în tabel.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Înlocuiți numele coloanei „ColNouă” cu „ColoanăNouă” în tabel și ignorați dacă această coloană nu există.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Returnează un tabel cu coloane în ordinea specificată.",
        "Documentation.LongDescription": "Returnează un tabel din datele introduse <code>table</code>, cu coloanele în ordinea specificată de <code>columnOrder</code>. Coloanele care nu sunt specificate în listă nu vor fi reordonate.\r\n     În cazul în care coloana nu există, apare o excepţie dacă parametrul opţional <code>missingField</code> nu specifică o alternativă (de ex., <code>MissingField.UseNull</code> sau <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Comutați ordinea coloanelor [Telefon] și [Nume] din tabel.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Comutați ordinea coloanelor [Telefon] și [Adresă] sau utilizați „MissingField.Ignore” în tabel. Nu modifică tabelul, deoarece coloana [Adresă] nu există.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Repetă rândurile din tabele de un număr specificat de ori.",
        "Documentation.LongDescription": "Returnează un tabel cu rândurile din datele introduse <code>table</code> repetate de <code>count</code> de ori.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Repetați de două ori rândurile din tabel.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Înlocuiește valorile erorilor din coloanele specificate cu valoarea specificată corespunzătoare.",
        "Documentation.LongDescription": "Înlocuiește valorile erorilor din coloanele specificate ale <code>table</code> cu noile valori din lista <code>errorReplacement</code>. Formatul listei este {{column1, value1}, …}. Poate exista o singură valoare înlocuitoare per coloană, iar specificarea coloanei de mai multe ori va produce o eroare.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiți valoarea erorii cu textul „lume” în tabel.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Înlocuiți valoarea erorii din coloana A cu textul „salut” și în coloana B cu textul „lume” în tabel.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Înlocuiește cheile tabelului specificat.",
        "Documentation.LongDescription": "Înlocuiește cheile tabelului specificat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiți cheile existente ale unui tabel.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Înlocuieşte toate rândurile specificate cu rândurile furnizate.",
        "Documentation.LongDescription": "Înlocuiește toate rândurile specificate din <code>table</code> cu cele furnizate. Rândurile de înlocuit și înlocuirile sunt specificate în <code>replacements</code>, utilizând formatarea {old, new}.\r\n    Poate fi specificat un parametru opțional <code>equationCriteria</code> pentru a controla comparația dintre rândurile tabelului.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiți rândurile [a = 1, b = 2] și [a = 2, b = 3] cu [a = -1, b = -2],[a = -2, b = -3] în tabel.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Returnează un tabel numai cu coloanele specificate.",
        "Documentation.LongDescription": "Returnează <code>table</code> numai cu <code>columns</code>specificat.\r\n    <ul>\r\n       <li><code>table</code>: Tabelul furnizat.</li>\r\n       <li><code>columns</code>: Lista de coloane din tabelul <code>table</code> de returnat. Coloanele din tabelul returnat sunt în ordinea listată în <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Opțional)</i> Ce să faceți dacă coloana nu există.  Example: <code>MissingField.UseNull</code> sau <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Includeți doar coloana [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Includeți doar coloanele [CustomerID] și [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Dacă coloana inclusă nu există, rezultatul implicit este o eroare.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Dacă coloana inclusă nu există, opțiunea <code>MissingField.UseNull</code> creează o coloană cu valori nule.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Selectaţi rândurile care îndeplinesc funcţia de condiţionare.",
        "Documentation.LongDescription": "Returnează un tabel de rânduri din <code>table</code>, care corespunde selecţiei <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Selectați rândurile din tabel în care valorile din coloana [CustomerID] sunt mai mari decât 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Selectați rândurile din tabel în care numele nu conțin un „B”.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Sortează tabelul utilizând unul sau mai multe nume de coloane şi criterii de comparaţie.",
        "Documentation.LongDescription": "Sortează <code>table</code> utilizând lista cu unul sau mai multe nume de coloane şi <code>comparisonCriteria</code> opţional în forma { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Sortați tabelul după coloana „IDComandă”.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Sortați tabelul după coloana „IDComandă” în ordine descrescătoare.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Sortați tabelul după coloana „IDClient”, apoi după coloana „IDComandă”, cu „IDClient” fiind în ordine descrescătoare.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transformă numele de coloane utilizând funcția dată.",
        "Documentation.LongDescription": "Transformă numele coloanelor utilizând funcția <code>nameGenerator</code> dată. Opțiuni valide:\r\n    <div>\r\n      <code>MaxLength</code> specifică lungimea maximă a numelor de coloane noi. Dacă funcția specificată generează un nume de coloană mai lung, numele lung va fi trunchiat.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> este utilizată pentru a controla comparația în timp ce se generează nume noi de coloane. Funcțiile de comparare pot fi utilizate pentru a furniza comparații care nu țin cont de diferența între literele mari sau mici ori care țin cont de cultură și de setările regionale.\r\n    </div>\r\n    <div>\r\n      Următoarele funcții de comparare predefinite sunt disponibile în limbajul pentru formule:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: Utilizată pentru a efectua o comparație ordinală exactă</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: Utilizată pentru a efectua o comparație ordinală exactă, care nu este sensibilă la litere mari și mici</li>\r\n      <li> <code>Comparer.FromCulture</code>: Utilizată pentru a efectua o comparație care ține cont de cultură</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Eliminați caracterul <code>#(tab)</code> din numele de coloană",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Transformă numele coloanelor pentru a genera nume care nu țin cont de litere mari sau mici, de lungime 6.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Aplică transformările de tip de forma { column, type } utilizând o anumită cultură.",
        "Documentation.LongDescription": "Returnează un tabel din datele introduse <code>table</code> aplicând operațiunea de transformare în coloanele specificate în parametrul <code>typeTransformations</code> (în care formatul este { column name, type name}), utilizând cultura specificată în parametrul opțional <code>culture</code> (de exemplu „ro-RO”).\r\n    În cazul în care coloana nu există, este ridicată o excepție.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformaţi valorile numerice din coloana [a] în valori text din tabelul <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Transformă valorile uneia sau mai multor coloane.",
        "Documentation.LongDescription": "Transformă <code>table</code> aplicând fiecare operațiune de coloană listată în <code>transformOperations</code> (unde formatul este { column name, transformation } sau { column name, transformation, new column type }).\r\n    Dacă se specifică o <code>defaultTransformation</code>, se va aplica tuturor coloanelor care nu sunt listate în <code>transformOperations</code>.\r\n    Dacă o coloană listată în <code>transformOperations</code> nu există, apare o excepție dacă parametrul opțional <code>missingField</code> nu specifică o alternativă (de exemplu, <code>MissingField.UseNull</code> sau <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia valorilor text din coloana [A] în valori numerice, și a valorilor numerice din coloana [B] în valori text.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Efectuați conversia valorilor numerice din coloana lipsă [X] în valori text, ignorând coloanele care nu există.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Efectuați conversia valorilor numerice din coloana lipsă [X] în valori text, stabilind implicit valori nule pentru coloanele care nu există.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Incrementați valorile numerice din coloana [B] și convertiți-le în valori text și efectuați conversia tuturor celorlalte coloane în numere.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Creează sau extinde un tabel cu rutine de tratare definite de utilizator pentru operațiuni de interogare și acțiune.",
        "Documentation.LongDescription": "<p>Returnează o vizualizare a <code>table</code> unde funcțiile specificate în <code>handlers</code> sunt utilizate în locul comportamentului implicit al unei operațiuni atunci când operațiunea este aplicată vizualizării.</p>\r\n<p>Dacă se furnizează <code>table</code>, toate funcțiile rutinei de tratare sunt opționale. Dacă <code>table</code> nu este furnizat, sunt necesare funcțiile rutinei de tratare <code>GetType</code> și <code>GetRows</code>. Dacă nu este specificată o funcție rutină de tratare pentru o operațiune, comportamentul implicit al operațiunii se aplică în schimb la <code>table</code> (cu excepția cazului <code>GetExpression</code>).</p>\r\n<p>Funcțiile rutină de tratare trebuie să returneze o valoare care este semantic echivalentă cu rezultatul aplicării operațiunii împotriva <code>table</code> (sau vizualizarea rezultată în cazul <code>GetExpression</code>).</p>\r\n<p>Dacă o funcție rutină de tratare declanșează o eroare, comportamentul implicit al operațiunii se aplică vizualizării.</p>\r\n<p><code>Table.View</code> poate fi utilizat pentru a implementa plierea la o sursă de date: traducerea interogărilor M în interogări specifice sursei (de exemplu, pentru a crea instrucțiuni T-SQL din interogări M).</p>\r\n<p>Consultați documentația conectorului particularizat publicat Power Query pentru o descriere mai completă a <code>Table.View</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Creați o vizualizare de bază care nu necesită accesarea rândurilor pentru a determina tipul sau numărul de rânduri.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Introduceți numele organizației și al proiectului.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (doar panourile)",
        "Documentation.LongDescription": "Returnează un tabel de vizualizări analitice oferite de Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Importați date din Vertica",
        "Documentation.LongDescription": "Returnează un tabel de scheme disponibile pe serverul numit de parametrul <code>server</code>, în baza de date numită de parametrul <code>database</code>.\r\nUn parametru de înregistrare opțional, <code>options</code>, poate fi furnizat pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: o durată care controlează cât se așteaptă înainte de a abandona încercarea de a realiza o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n    <li><code>CommandTimeout </code>: o durată care controlează cât timp poate rula interogarea de partea serverului înainte să fie anulată. Valoarea implicită depinde de driver.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Listați tabelele din Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Returnează un tabel cu conținutul de raport de la Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Efectuează un apel la punctul final de raportare Webtrends dat și returnează toate datele ca tabel.",
        "Documentation.Examples": [
          {
            "Description": "Efectuează un apel către punctul final de raport al vizitatorilor Webtrends pentru datele din ultimele 30 de zile",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Un tabel cu date ale vizitatorilor"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returneaza continuturile VisualQuery (vqr), rapoarte sau functii publicate de software-ul HR Zucchetti",
        "Documentation.Examples": [
          {
            "Description": "Cerere pentru lista angajatilor",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Returnează o listă de domenii Active Directory în aceeaşi pădure ca şi domeniul specificat sau lista domeniului computerului curent dacă niciunul nu este specificat.",
        "Documentation.LongDescription": "Returnează o listă de domenii Active Directory în aceeaşi pădure ca şi domeniul specificat sau lista domeniului computerului curent dacă niciunul nu este specificat.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Returnează rezultatul rulării unei interogări native pe o bază de date ADO.NET.",
        "Documentation.LongDescription": "Returnează rezultatul rulării <code>query</code> cu șirul de conexiune <code>connectionString</code> folosind furnizorul ADO.NET <code>providerName</code>. <code>connectionString</code> poate fi text sau o înregistrare cu perechi proprietate-valoare. Valorile de proprietăți pot fi sub formă de text sau numere. Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : O durată care controlează c&#226;t timp poate rula interogarea de partea serverului &#238;nainte să fie anulată. Valoarea implicită este de zece minute.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : O valoare logică (true/false) ce determină dacă se produc opțiuni șir de conexiune compatibile cu SQL Server pentru autentificarea Windows. Valoarea implicită este true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Returnează suitele de rapoarte din Adobe Analytics.",
        "Documentation.LongDescription": "Returnează un tabel de pachete multidimensionale din Adobe Analytics. Se poate specifica un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : O valoare logică (true/false) care setează dacă se vizualizează tabelele grupate după numele schemelor (valoarea implicită este false).</li>\r\n<li><code>MaxRetryCount</code> : Numărul de re&#238;ncercări de efectuat atunci c&#226;nd sondați după rezultatul interogării. Valoarea implicită este de 120.</li>\r\n<li><code>RetryInterval</code> : Durata de timp dintre re&#238;ncercări. Valoarea implicită este de 1 secundă.</li>\r\n<li><code>Implementation</code> : Specifică versiunea API Adobe Analytics. Valorile valide sunt: „2.0”. Valoarea implicită utilizează API versiunea 1.4.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Importați date dintr-un Hive LLAP",
        "Documentation.LongDescription": "\r\nReturnează o listă de tabele de la Hive LLAP specificate de <code>database</code> de pe un <code>server</code> Hive LLAP folosind un <code>protocol</code> selectat. Poate fi specificat, opțional, un număr de port împreună cu serverul, separat de două puncte. Protocolul de transport Thrift este un tip enumerat cu valorile „Standard” și „HTTP”. Un parametru opțional <code>options</code> poate fi specificat pentru a controla următoarele opțiuni:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: O durată care controlează cât timp se așteaptă până la abandonarea unei încercări de a realiza o conexiune la server. Valoarea implicită depinde de driver.</li>\r\n        <li><code>CommandTimeout</code>: O durată ce controlează cât timp poate rula interogarea de partea serverului înainte de a fi anulată. Valoarea implicită depinde de driver.</li>\r\n</ul>\r\nParametrul <code>options</code> este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Presupunând că astăzi este 15.06.2017, obțineți rezumatele de date dintre 1.05.2017 și 15.06.2017",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funcția va returna rezumatele de date dintre 1.05.2017 și 15.06.2017"
          },
          {
            "Description": "Presupunând că astăzi este 15.06.2017, obțineți rezumatele de date pentru aprilie 2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funcția va returna datele dintre 1.04.2017 și 30.04.2017"
          },
          {
            "Description": "Presupunând că astăzi este 15.06.2017, obțineți rezumatele de date din aprilie 2017 până acum.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funcția va returna datele dintre 1.04.2017 și 15.06.2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Introduceți numele organizației și al proiectului.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Returnează un tabel de fluxuri OData oferite de Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Conectați-vă la instanța Dataverse (Dynamics 365 și PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Îmbină tabelul de dimensiuni specificat în contextul filtru al cubului şi modifică granularitatea dimensională a contextului filtru prin extinderea setului specificat de atribute de dimensiune.",
        "Documentation.LongDescription": "Îmbină tabelul de dimensiuni specificat, <code>dimensionSelector</code>, în contextul filtru, <code>cube</code>, al cubului şi modifică granularitatea dimensională prin extinderea setului specificat, <code>attributeNames</code>, de atribute de dimensiune. Atributele de dimensiune sunt adăugate la vizualizarea tabelară cu coloanele denumite <code>newColumnNames</code> sau <code>attributeNames</code> daca nu se specifică.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Adaugă o coloană la cubul ce conţine rezultatele măsurii aplicate în contextul rând al fiecărui rând.",
        "Documentation.LongDescription": "Adaugă o coloană cu numele <code>column</code> la <code>cube</code> ce conţine rezultatele măsurii <code>measureSelector</code> aplicate în contextul rând al fiecărui rând. Aplicarea măsurii este afectată de modificările la granularitatea dimensiunii sau la slicing. Valorile măsurii vor fi ajustate după efectuarea anumitor operaţiuni în cub.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Introduceți mediul și firma dvs. Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Returnează un tabel cu datele Dynamics 365 Business Central relevante. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Introduceți mediul și firma dvs. Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Returnează un tabel cu datele Dynamics 365 Business Central relevante. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Introduceți mediul și firma dvs. Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Returnează un tabel cu datele Dynamics 365 Business Central relevante. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Introduceți mediul și firma dvs. Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Returnează un tabel cu datele Dynamics 365 Business Central relevante. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Returnează conținutul registrului de lucru Excel curent.",
        "Documentation.LongDescription": "Returnează conținutul registrului de lucru Excel curent. Returnează tabele, zone denumite și matrice dinamice. Spre deosebire de <code>Excel.Workbook</code>, nu returnează foi.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Returnează un table de conţinut de la un cont Microsoft Exchange.",
        "Documentation.LongDescription": "Returnează un cuprins din contul Microsoft Exchange <code>mailboxAddress</code>. Dacă nu se specifică <code>mailboxAddress</code>, se va utiliza contul implicit pentru acreditare.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Depozit",
        "Documentation.Caption": "Depozit",
        "Documentation.Description": "Importă date din depozite",
        "Documentation.LongDescription": "Importă date din depozite"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Returnează conturile Google Analytics.",
        "Documentation.LongDescription": "Returnează conturile Google Analytics care sunt accesibile de la acreditarea curentă.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Importați date dintr-o bază de date Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Returnează un tabel care enumeră proiectele disponibile în Google BigQuery. Se poate specifica un parametru de înregistrare opțional, <code>options</code>, pentru a controla următoarele opțiuni: \r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: o durată care controlează cât timp se așteaptă înainte de a abandona o încercare de conectare la server. Valoarea implicită este valoarea de expirare a conexiunii ODBC.</li>\r\n        <li><code>CommandTimeout</code>: o durată care controlează cât timp poate rula interogarea de pe partea serverului înainte de a fi anulată.</li>\r\n        <li><code>BillingProject</code>: ID-ul proiectului de facturare. Valoarea implicită este primul proiect disponibil.</li>\r\n        <li><code>UseStorageApi</code>: specifică dacă se utilizează API-ul de stocare BigQuery pentru seturile de rezultate mari. Valoarea implicită este true pentru a utiliza API-ul de stocare. Setați la false pentru a nu utiliza API-ul de stocare</li>\r\n      </ul>\r\n    Parametrul de înregistrare este specificat ca [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Listați proiectele disponibile în Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Importați date dintr-un Lakehouse",
        "Documentation.Description": "Importați date dintr-un Lakehouse",
        "Documentation.LongDescription": "Conectați-vă la toate Lakehouse-urile la care aveți acces și selectați entitățile pe care doriți să le utilizați"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Returnează un tabel cu date cheie MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Returnează un tabel cu date cheie MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel cu date cheie MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Un tabel cu date cheie MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Returnează un tabel cu activitățile clientului potențial.",
        "Documentation.LongDescription": "Creează un apel către punctul final API Marketo REST de la <code>url</code>/rest/v1/activities.json. Sunt returnate toate activitățile din lista <code>IDuriActivitate</code> care au avut loc după <code>oraÎnceput</code>.",
        "Documentation.Examples": [
          {
            "Description": "Extrage un tabel cu activitățile de vizitare a paginilor web începând cu 1 noiembrie 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Un tabel cu detaliile tuturor activităților de vizitare a paginilor web începând cu 1 noiembrie"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Fluxuri de date Power BI (moștenite)",
        "Documentation.Caption": "Importați date dintr-un flux de date Power BI",
        "Documentation.LongDescription": "Conectați-vă la toate fluxurile de date Power BI la care aveți acces și selectați entitățile pe care doriți să le utilizați."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Data mart-uri",
        "Documentation.Caption": "Data mart-uri",
        "Documentation.Description": "Importă date din data mart-uri",
        "Documentation.LongDescription": "Importă date din data mart-uri"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Fluxuri de date",
        "Documentation.Caption": "Importați date dintr-un flux de date",
        "Documentation.Description": "Importați date dintr-un flux de date",
        "Documentation.LongDescription": "Conectați-vă la toate fluxurile de date la care aveți acces și selectați entitățile pe care doriți să le utilizați."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importați date din QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Returnează un tabel cu tabelele disponibile în QuickBooks Online. Un parametru de înregistrare opțional, <code>options</code>, se poate specifica pentru a controla următoarele opțiuni:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: o durată care stabilește cât se așteaptă înainte să abandonați o încercare de creare a unei conexiuni la server.</li>\r\n            <li><code>CommandTimeout</code>: o durată care controlează cât timp poate rula interogarea de partea serverului înainte să fie anulată.</li>\r\n          </ul>\r\n        Parametrul de înregistrare este specificat ca [opțiune1 = valoare1, opțiune2 = valoare2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Returnează obiectele din contul Salesforce.",
        "Documentation.LongDescription": "Returnează obiectele din contul Salesforce furnizat în acreditări. Contul va fi conectat prin intermediul mediului furnizat <code>loginUrl</code>. Dacă nu este furnizat niciun mediu, contul se va conecta la mediul de producție (https://login.salesforce.com). Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : O valoare logică (true/false) care setează dacă se generează proprietăți de navigare pentru valorile returnate (valoarea implicită este false).</li>\r\n<li><code>ApiVersion</code> : Versiunea API-ului Salesforce de utilizat pentru această interogare. Atunci c&#226;nd nu este specificată, se utilizează versiunea API 29.0.</li>\r\n<li><code>Timeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona solicitarea pentru server. Valoarea implicită este specifică fiecărei surse.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Returnează rapoartele din contul Salesforce.",
        "Documentation.LongDescription": "Returnează rapoartele din contul Salesforce furnizat în acreditări. Contul va fi conectat prin intermediul mediului furnizat <code>loginUrl</code>. Dacă nu este furnizat niciun mediu, contul se va conecta la mediul de producție (https://login.salesforce.com). Poate fi furnizat un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Versiunea API-ului Salesforce de utilizat pentru această interogare. Atunci c&#226;nd nu este specificată, se utilizează versiunea API 29.0.</li>\r\n<li><code>Timeout</code> : O durată care controlează c&#226;t timp se așteaptă &#238;nainte de a abandona solicitarea pentru server. Valoarea implicită este specifică fiecărei surse.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Returnează elementele InfoCube și interogările dintr-un sistem SAP Business Warehouse, grupate după InfoArea.",
        "Documentation.LongDescription": "Returnează un tabel de elemente InfoCube și interogări, grupate după InfoArea, dintr-o instanță SAP Business Warehouse de la serverul <code>server</code> cu numărul de sistem <code>systemNumberOrSystemId</code> și ID client <code>clientId</code>. Poate fi specificat un parametru de înregistrare opțional, <code>optionsOrLogonGroup</code>, pentru a controla următoarele opțiuni:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Returnează un tabel de foi, rapoarte, foldere și spații de lucru de la API-ul Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Returnează un tabel imbricat de foi, rapoarte, foldere și spații de lucru disponibile de la API-ul Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Returnează foi, foldere, rapoarte și spații de lucru disponibile la nivelul superior al ierarhiei Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Un tabel de foldere, rapoarte și spații de lucru de la nivelul superior al ierarhiei Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Returnează un tabel de măsurători disponibile de la API-ul SparkPost v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Această funcție se poate utiliza pentru a regăsi date dintr-un anumit punct final „Măsurători” din API-ul SparkPost v1. Când reîmprospătați aceste tabele sau apelați API-ul SparkPost utilizând acest conector, rețineți că API-ul SparkPost are o limită de rată API strictă. Dacă vedeți un cod de stare 429 returnat de serverul SparkPost, ați atins limita de rată și va trebui să așteptați câteva clipe înainte de a face mai multe apeluri. La alegerea unei valori pentru parametrul Număr de zile, rețineți faptul că API-ul stochează numai 6 luni de date.",
        "Documentation.Examples": [
          {
            "Description": "Regăsește măsurătorile de livrare count_sent și count_rejected pentru toate campaign_ids agregate în ultimele trei zile. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabel"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Creează un apel către API-ul Stripe.",
        "Documentation.LongDescription": "Creează un apel către API-ul Stripe de la https://api.stripe.com/v1/<code>metodă</code>, cu înregistrarea <code>parametriSuplimentari</code> transmisă ca parametri suplimentari și lista <code>NumeColoane</code> a numelor de coloane așteptate. Se utilizează versiunea Stripe 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Returnează un tabel cu evenimentele create după 1 noiembrie 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Un tabel cu evenimentele specificate pentru contul Stripe curent"
          },
          {
            "Description": "Returnează un tabel cu toate codurile SKU",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Un tabel cu toate codurile SKU pentru contul Stripe curent"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Returnează un tabel care listează tabelele și funcțiile Stripe disponibile.",
        "Documentation.LongDescription": "Returnează un tabel care listează tabelele și funcțiile Stripe disponibile."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Spațiu de lucru Azure Synapse",
        "Documentation.Caption": "Spațiu de lucru Azure Synapse",
        "Documentation.LongDescription": "Conector PQ pentru spațiul de lucru Azure Synapse",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Adaugă o coloană cu numele specificat. Valoarea este calculată utilizând funcţia de selectare specificată cu fiecare rând preluat ca intrare.",
        "Documentation.LongDescription": "Adaugă o coloană cu numele <code>newColumnName</code> la tabelul <code>table</code>. Valorile pentru coloană sunt calculate utilizând funcţia de selectare specificată <code>columnGenerator</code> cu fiecare rând preluat ca intrare.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adăugați o coloană numerică denumită „PrețTotal” la tabel, cu fiecare valoare fiind suma coloanelor [Preț] și [Livrare].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Adaugă o nouă coloană cu valorile reprezentative obținute prin gruparea vagă a valorilor coloanei specificate în tabel.",
        "Documentation.LongDescription": "Adaugă o nouă coloană <code>newColumnName</code> la <code>table</code> cu valorile reprezentative <code>columnName</code>. Reprezentanții sunt obținuți prin potrivirea vagă a valorilor din <code>columnName</code> pentru fiecare rând.\r\n    <p>Un set opțional de <code>options</code> poate fi inclus pentru a specifica modul de comparare a coloanelor cheie. Opțiunile sunt: \r\n    <ul>\r\n<li><code>Culture</code> : Permite gruparea &#238;nregistrărilor pe baza unor reguli specifice culturii. Poate fi orice nume de cultură valid. De exemplu, o opțiune Cultură „ja-JP” grupează &#238;nregistrările pe baza culturii japoneze. Valoarea implicită este „”, care realizează grupările pe baza culturii invariabile engleze.</li>\r\n<li><code>IgnoreCase</code> : O valoare logică (True/False) care permite gruparea cheilor care nu sunt sensibile la litere mari și mici. De exemplu, c&#226;nd este True, „Struguri” este grupat cu „struguri”. Valoarea implicită este True.</li>\r\n<li><code>IgnoreSpace</code> : O valoare logică (True/False) care permite combinarea părților de text pentru a găsi grupuri. De exemplu, c&#226;nd este True, „Stru guri” este grupat cu „Struguri”. Valoarea implicită este True.</li>\r\n<li><code>SimilarityColumnName</code> : Un nume pentru coloana care arată similaritatea dintre o valoare de intrare și valoarea reprezentativă pentru acea intrare. Valoarea implicită este nulă, caz &#238;n care nu se va adăuga o nouă coloană pentru similitudini.</li>\r\n<li><code>Threshold</code> : Un număr &#238;ntre 0,00 și 1,00 care specifică scorul de similaritate la care se vor grupa două valori.\r\n    De exemplu, „Struguri” și „Sruguri” (lipsește „t”) se grupează numai dacă această opțiune este setată la mai puțin de 0,90.\r\n    Un prag de 1,00 permite numai potriviri exacte.\r\n    (Rețineți că o „potrivire exactă” vagă poate ignora diferențe precum literele mari și mici, ordinea cuvintelor și semnele de punctuație.)\r\n    Valoarea implicită este 0,80.</li>\r\n<li><code>TransformationTable</code> : Un tabel care permite gruparea &#238;nregistrărilor pe baza mapărilor de valori particularizate. Ar trebui să conțină coloane „De la” și „La”. De exemplu, „Struguri” este grupat cu „Stafide” dacă se furnizează un tabel de transformare cu coloana „De la” care conține „Struguri” și coloana „La” care conține „Stafide”. Rețineți că transformarea se va aplica &#238;n toate aparițiile textului din tabelul de transformare. Cu tabelul de transformare de mai sus, șirul „Strugurii sunt dulci” va fi grupat cu „Stafidele sunt dulci”.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Găsiți valorile reprezentative pentru locația angajaților.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Efectuează o uniune între tabele pe coloanele furnizate şi produce rezultatul uniunii într-o coloană nouă.",
        "Documentation.LongDescription": "Uneşte rândurile <code>table1</code> cu rândurile <code>table2</code> în funcţie de egalitatea valorilor din coloanele de chei selectate de <code>key1</code> (pentru <code>table1</code>) şi <code>key2</code> (pentru <code>table2</code>). Rezultatele sunt introduse în coloana cu numele <code>newColumnName</code>.\r\nAceastă funcţie se comportă la fel ca funcţia Table.Join cu JoinKind având valoarea LeftOuter, cu excepţia faptului că rezultatele uniunii sunt prezentate într-un mod imbricat decât într-un mod aplatizat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adăugaţi o coloană de unire la ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) cu numele „price/stock” din tabelul ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) unit în [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Adaugă o cheie la un tabel.",
        "Documentation.LongDescription": "Adaugă o cheie la <code>table</code>, unde <code>columns</code> este lista de nume de coloane care definesc cheia și <code>isPrimary</code>specifică dacă cheia este primară.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adăugați o cheie primară cu o singură coloană la un tabel.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Adaugă o coloană cu ierarhizare a uneia sau mai multor alte coloane.",
        "Documentation.LongDescription": "Adaugă o coloană cu numele <code>newColumnName</code> la <code>table</code> cu ierarhizare a uneia sau mai multor alte coloane descrise de <code>comparisonCriteria</code>.\r\nOpțiunea RankKind din <code>options</code> poate fi utilizată de utilizatorii avansați pentru a alege o metodă de ierarhizare mai specifică.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Adăugați o coloană denumită „RevenueRank” la tabelul care clasifică coloana „Revenue” de la cel mai mare la cel mai mic.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Agregă o coloană de tabele în mai multe coloane în tabelul inclus.",
        "Documentation.LongDescription": "Agregă tabele în <code>table</code>[<code>column</code>] în mai multe coloane ce conţin valori de agregat pentru tabele. Se utilizează <code>aggregations</code> pentru a specifica coloanele ce conţin tabelele de agregat, funcţiile de agregare de aplicat la tabele pentru a genera valorile acestora şi numele coloanelor de agregat de creat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agregaţi coloanele din tabel în <code>[t]</code> din tabelul <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> în suma <code>[t.a]</code>, valoarea min. şi max. a <code>[t.b]</code> şi numărul valorilor din <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Păstrează decalajul iniţial, apoi alternează preluarea şi ignorarea următoarelor rânduri.",
        "Documentation.LongDescription": "Păstrează decalajul iniţial, apoi alternează preluarea şi ignorarea următoarelor rânduri.\r\n    <ul>\r\n       <li><code>table</code>: Tabelul de intrare.</li>\r\n       <li><code>offset</code>: Numărul de rânduri de păstrat înainte de începerea iteraţiilor.</li>\r\n       <li><code>skip</code>: Numărul de rânduri de eliminat din fiecare iteraţie.</li>\r\n       <li><code>take</code>: Numărul de rânduri de păstrat în fiecare iteraţie.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Returnați un tabel din tabelul care, începând de la primul rând, ignoră 1 valoare, apoi păstrează 1 valoare.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Combină coloanele specificate într-o coloană nouă utilizând funcţia de combinare specificată.",
        "Documentation.LongDescription": "Combină coloanele specificate într-o coloană nouă utilizând funcţia de combinare specificată.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Combinați numele și prenumele într-o coloană nouă, separate prin virgulă.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Combină coloanele specificate într-o nouă coloană înregistrări de valoare, unde fiecare înregistrare are nume de câmpuri și valori care corespund numelor de coloane și valorilor coloanelor care au fost combinate.",
        "Documentation.LongDescription": "Combină coloanele specificate ale <code>table</code> într-o nouă coloană cu valori de înregistrări numită <code>newColumnName</code>, în care fiecare înregistrare are nume de câmpuri și valori care corespund numelor de coloane și valorilor coloanelor care au fost combinate. Dacă este specificată o înregistrare pentru <code>options</code>, pot fi furnizate următoarele opțiuni:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: când este specificat ca text, indică faptul că numele de coloană dat trebuie tratat ca nume afișat al înregistrării. Acesta nu trebuie să fie una dintre coloanele din înregistrarea în sine. </li>\r\n     <li> <code>TypeName</code>: când este specificat ca text, furnizează un nume de tip logic pentru înregistrarea rezultată, care poate fi utilizat în timpul încărcării datelor pentru a dirija comportamentul conform cu mediul de încărcare. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Dublează o coloană cu numele specificat. Valorile şi tipul sunt copiate din coloana sursă.",
        "Documentation.LongDescription": "Dublaţi coloana cu numele <code>columnName</code> la tabelul <code>table</code>. Valorile şi tipul pentru coloana <code>newColumnName</code> sunt copiate din coloana <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Dublaţi coloana „a” la o coloană cu numele „copied column” în tabelul <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Extinde o coloană de înregistrări în coloane cu fiecare dintre valori.",
        "Documentation.LongDescription": "Ţinând cont de <code>column</code> de înregistrări în datele introduse <code>table</code>, creează un tabel cu o coloană pentru fiecare câmp din înregistrare. Opţional, <code>newColumnNames</code> poate fi specificat pentru a asigura nume unice pentru coloanele din noul tabel.\r\n    <ul>\r\n        <li><code>table</code>: Tabelul original cu coloana de înregistrare de extins. </li>\r\n        <li><code>column</code>: Coloana de extins.</li>\r\n        <li><code>fieldNames</code>: Lista de câmpuri de extins în coloanele din tabel.</li>\r\n        <li><code>newColumnNames</code>: Lista de nume de coloane de dat noilor coloane. Numele noilor coloane nu pot dubla nicio coloană din noul tabel.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Extindeţi coloana [a] din tabelul <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> în 3 coloane „aa”, „bb” şi „cc”.",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Extinde o coloană de înregistrări sau o coloană de tabele în mai multe coloane în tabelul inclus.",
        "Documentation.LongDescription": "Extinde tabelele din <code>table</code>[<code>column</code>] în mai multe rânduri şi coloane. Se utilizează <code>columnNames</code> pentru a selecta coloanele de extins din tabelul intern. Specificaţi <code>newColumnNames</code> pentru a evita conflictele dintre coloanele existente şi noile coloane.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Extindeţi coloanele de tabel din <code>[a]</code> din tabelul <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> în 3 coloane <code>[t.a]</code>, <code>[t.b]</code> şi <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Grupează rândurile din tabel pe baza unei potriviri vagi a cheilor.",
        "Documentation.LongDescription": "Grupează rândurile <code>table</code> prin potrivire vagă a valorilor din coloana specificată, <code>key</code>, pentru fiecare rând.\r\n    Pentru fiecare grup, se construiește o înregistrare care conține coloanele cheie (și valorile lor), împreună cu toate coloanele agregate specificate de <code>aggregatedColumns</code>.\r\n    Această funcție nu poate garanta returnarea unei ordini fixe a rândurilor.\r\n    <p>Un set opțional de <code>options</code> poate fi inclus pentru a specifica modul de comparare a coloanelor cheie. Opțiunile includ: \r\n    <ul>\r\n<li><code>Culture</code> : Permite gruparea &#238;nregistrărilor pe baza unor reguli specifice culturii. Poate fi orice nume de cultură valid. De exemplu, o opțiune Cultură „ja-JP” grupează &#238;nregistrările pe baza culturii japoneze. Valoarea implicită este „”, care realizează grupările pe baza culturii invariabile engleze.</li>\r\n<li><code>IgnoreCase</code> : O valoare logică (True/False) care permite gruparea cheilor care nu sunt sensibile la litere mari și mici. De exemplu, c&#226;nd este True, „Struguri” este grupat cu „struguri”. Valoarea implicită este True.</li>\r\n<li><code>IgnoreSpace</code> : O valoare logică (True/False) care permite combinarea părților de text pentru a găsi grupuri. De exemplu, c&#226;nd este True, „Stru guri” este grupat cu „Struguri”. Valoarea implicită este True.</li>\r\n<li><code>SimilarityColumnName</code> : Un nume pentru coloana care arată similaritatea dintre o valoare de intrare și valoarea reprezentativă pentru acea intrare. Valoarea implicită este nulă, caz &#238;n care nu se va adăuga o nouă coloană pentru similitudini.</li>\r\n<li><code>Threshold</code> : Un număr &#238;ntre 0,00 și 1,00 care specifică scorul de similaritate la care se vor grupa două valori.\r\n    De exemplu, „Struguri” și „Sruguri” (lipsește „t”) se grupează numai dacă această opțiune este setată la mai puțin de 0,90.\r\n    Un prag de 1,00 permite numai potriviri exacte.\r\n    (Rețineți că o „potrivire exactă” vagă poate ignora diferențe precum literele mari și mici, ordinea cuvintelor și semnele de punctuație.)\r\n    Valoarea implicită este 0,80.</li>\r\n<li><code>TransformationTable</code> : Un tabel care permite gruparea &#238;nregistrărilor pe baza mapărilor de valori particularizate. Ar trebui să conțină coloane „De la” și „La”. De exemplu, „Struguri” este grupat cu „Stafide” dacă se furnizează un tabel de transformare cu coloana „De la” care conține „Struguri” și coloana „La” care conține „Stafide”. Rețineți că transformarea se va aplica &#238;n toate aparițiile textului din tabelul de transformare. Cu tabelul de transformare de mai sus, șirul „Strugurii sunt dulci” va fi grupat cu „Stafidele sunt dulci”.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Grupați tabelul adăugând o coloană agregată [Count] care conține numărul de angajați din fiecare locație („each Table.RowCount(_))”).",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Unește rândurile din cele două tabele care se potrivesc aproximativ în funcție de cheile date.",
        "Documentation.LongDescription": "<p>Unește rândurile din <code>table1</code> cu rândurile din <code>table2</code>, pe baza potrivirii vagi a valorilor din coloanele cheie selectate după <code>key1</code> (pentru <code>table1</code>) și <code>key2</code> (pentru <code>table2</code>).</p>\r\n<p>Potrivirea vagă este o comparație ce se bazează pe similaritatea textului, nu pe egalitate.</p>\r\n<p>În mod implicit, se efectuează o unire internă; totuși, poate fi inclus parametrul opțional <code>joinKind</code> pentru a specifica tipul de unire. Opțiunile sunt:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Se poate include un set opțional de <code>joinOptions</code> pentru a specifica modul de comparare a coloanelor cheie. Opțiunile sunt:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Un număr &#238;ntre 1 și 8 care specifică numărul de fire paralele de utilizat pentru potrivirea vagă. Valoarea implicită este 1.</li>\r\n<li><code>Culture</code> : Permite potrivirea &#238;nregistrărilor pe baza unor reguli specifice culturii. Poate fi orice nume de cultură valid. De exemplu, o opțiune Cultură „ja-JP” potrivește &#238;nregistrările pe baza culturii japoneze. Valoarea implicită este „”, care realizează grupările pe baza culturii invariabile engleze.</li>\r\n<li><code>IgnoreCase</code> : O valoare logică (True/False) care permite potrivirea cheilor care nu sunt sensibile la litere mari și mici. De exemplu, c&#226;nd este True, „Struguri” se potrivește cu „struguri”. Valoarea implicită este True.</li>\r\n<li><code>IgnoreSpace</code> : O valoare logică (True/False) care permite combinarea părților de text pentru a găsi potriviri. De exemplu, c&#226;nd este True, „Stru guri” este potrivit cu „Struguri”. Valoarea implicită este True.</li>\r\n<li><code>NumberOfMatches</code> : Un număr &#238;ntreg care specifică numărul maxim de r&#226;nduri care se potrivesc ce pot fi returnate pentru fiecare r&#226;nd de intrare. De exemplu, o valoare 1 va returna cel mult un r&#226;nd care se potrivește pentru fiecare r&#226;nd de intrare. Dacă această opțiune nu este furnizată, se returnează toate r&#226;ndurile care se potrivesc.</li>\r\n<li><code>SimilarityColumnName</code> : Un nume pentru coloana care arată similaritatea dintre o valoare de intrare și valoarea reprezentativă pentru acea intrare. Valoarea implicită este nulă, caz &#238;n care nu se va adăuga o nouă coloană pentru similitudini.</li>\r\n<li><code>Threshold</code> : Un număr &#238;ntre 0,00 și 1,00 care specifică scorul de similaritate la care se vor potrivi două valori.\r\n    De exemplu, „Struguri” și „Sruguri” (lipsește „t”) se potrivesc numai dacă această opțiune este setată la mai puțin de 0,90.\r\n    Un prag de 1,00 permite numai potriviri exacte.\r\n    (Rețineți că o „potrivire exactă” vagă poate ignora diferențe precum literele mari și mici, ordinea cuvintelor și semnele de punctuație.)\r\n    Valoarea implicită este 0,80.</li>\r\n<li><code>TransformationTable</code> : Un tabel care permite potrivirea &#238;nregistrărilor pe baza mapărilor de valori particularizate. Ar trebui să conțină coloane „De la” și „La”. De exemplu, „Struguri” este potrivit cu „Stafide” dacă se furnizează un tabel de transformare cu coloana „De la” care conține „Struguri” și coloana „La” care conține „Stafide”. Rețineți că transformarea se va aplica &#238;n toate aparițiile textului din tabelul de transformare. Cu tabelul de transformare de mai sus, șirul „Strugurii sunt dulci” va fi potrivit cu „Stafidele sunt dulci”.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Uniune aproximativă internă la stânga a două tabele, în funcție de [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Efectuează o unire aproximativă între tabele după coloanele furnizate și produce rezultatul unirii într-o coloană nouă.",
        "Documentation.LongDescription": "<p>Unește rândurile din <code>table1</code> cu rândurile din <code>table2</code>, în funcție de o potrivire vagă a valorilor din coloanele cheie selectate după <code>key1</code> (pentru <code>table1</code>) și <code>key2</code> (pentru <code>table2</code>). Rezultatele sunt returnate într-o coloană nouă cu numele <code>newColumnName</code>.</p>\r\n<p>Potrivirea vagă este o comparație ce se bazează pe similaritatea textului, nu pe egalitate.</p>\r\n<p>Parametrul opțional <code>joinKind</code> specifică tipul de unire care se va efectua. În mod implicit, se efectuează o unire externă la stânga, dacă nu se specifică <code>joinKind</code>. Opțiunile sunt:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Se poate include un set opțional <code>joinOptions</code> pentru a specifica modul de comparare a coloanelor cheie. Opțiunile sunt:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Un număr &#238;ntre 1 și 8 care specifică numărul de fire paralele de utilizat pentru potrivirea vagă. Valoarea implicită este 1.</li>\r\n<li><code>Culture</code> : Permite potrivirea &#238;nregistrărilor pe baza unor reguli specifice culturii. Poate fi orice nume de cultură valid. De exemplu, o opțiune Cultură „ja-JP” potrivește &#238;nregistrările pe baza culturii japoneze. Valoarea implicită este „”, care realizează grupările pe baza culturii invariabile engleze.</li>\r\n<li><code>IgnoreCase</code> : O valoare logică (True/False) care permite potrivirea cheilor care nu sunt sensibile la litere mari și mici. De exemplu, c&#226;nd este True, „Struguri” se potrivește cu „struguri”. Valoarea implicită este True.</li>\r\n<li><code>IgnoreSpace</code> : O valoare logică (True/False) care permite combinarea părților de text pentru a găsi potriviri. De exemplu, c&#226;nd este True, „Stru guri” este potrivit cu „Struguri”. Valoarea implicită este True.</li>\r\n<li><code>NumberOfMatches</code> : Un număr &#238;ntreg care specifică numărul maxim de r&#226;nduri care se potrivesc ce pot fi returnate pentru fiecare r&#226;nd de intrare. De exemplu, o valoare 1 va returna cel mult un r&#226;nd care se potrivește pentru fiecare r&#226;nd de intrare. Dacă această opțiune nu este furnizată, se returnează toate r&#226;ndurile care se potrivesc.</li>\r\n<li><code>SimilarityColumnName</code> : Un nume pentru coloana care arată similaritatea dintre o valoare de intrare și valoarea reprezentativă pentru acea intrare. Valoarea implicită este nulă, caz &#238;n care nu se va adăuga o nouă coloană pentru similitudini.</li>\r\n<li><code>Threshold</code> : Un număr &#238;ntre 0,00 și 1,00 care specifică scorul de similaritate la care se vor potrivi două valori.\r\n    De exemplu, „Struguri” și „Sruguri” (lipsește „t”) se potrivesc numai dacă această opțiune este setată la mai puțin de 0,90.\r\n    Un prag de 1,00 permite numai potriviri exacte.\r\n    (Rețineți că o „potrivire exactă” vagă poate ignora diferențe precum literele mari și mici, ordinea cuvintelor și semnele de punctuație.)\r\n    Valoarea implicită este 0,80.</li>\r\n<li><code>TransformationTable</code> : Un tabel care permite potrivirea &#238;nregistrărilor pe baza mapărilor de valori particularizate. Ar trebui să conțină coloane „De la” și „La”. De exemplu, „Struguri” este potrivit cu „Stafide” dacă se furnizează un tabel de transformare cu coloana „De la” care conține „Struguri” și coloana „La” care conține „Stafide”. Rețineți că transformarea se va aplica &#238;n toate aparițiile textului din tabelul de transformare. Cu tabelul de transformare de mai sus, șirul „Strugurii sunt dulci” va fi potrivit cu „Stafidele sunt dulci”.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Uniune aproximativă internă la stânga a două tabele, în funcție de [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Grupează rândurile din tabel care au aceeaşi cheie.",
        "Documentation.LongDescription": "Grupează rândurile de <code>table</code> după coloanele cheie definite de <code>key</code>. <code>key</code> poate fi un nume de coloană unic sau o listă de nume de coloane.\r\n    Pentru fiecare grup, este construită o înregistrare care conține coloanele cheie (și valorile lor), împreună cu toate coloanele agregate specificate de <code>aggregatedColumns</code>.\r\n    Opțional, <code>groupKind</code> și <code>comparer</code> pot fi, de asemenea, specificate. <br>\r\n    <br>\r\n    Dacă datele sunt sortate deja de coloanele cheie, se poate furniza un <code>groupKind</code> de tipul GroupKind.Local. Acest lucru poate îmbunătăți performanța grupării în anumite cazuri,\r\n    deoarece toate rândurile cu un set dat de valori cheie sunt considerate contigue. <br>\r\n    <br>\r\n    La trecerea unui <code>comparer</code>, rețineți că, dacă tratează chei diferite ca egale, un rând poate fi plasat într-un grup ale cărui chei diferă de ale sale. <br>\r\n    <br>\r\n    Această funcție nu garantează ordinea rândurilor returnate.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Grupați tabelul adăugând o coloană de agregat [total], care conține suma prețurilor (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Inserează o listă de rânduri în tabel în poziţia specificată.",
        "Documentation.LongDescription": "Returnează un tabel cu lista de rânduri, <code>rows</code>, inserată în <code>table</code> în poziția dată, <code>offset</code>. Fiecare coloană din rândul de inserat trebuie să corespundă tipurilor de coloane din tabel.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Inserați rândul în tabel la poziția 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Inserați două rânduri în tabel la poziția 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Uneşte rândurile din cele două tabele care se potrivesc în funcţie de cheile date.",
        "Documentation.LongDescription": "<p>Unește rândurile <code>table1</code> cu rândurile <code>table2</code> în funcție de o egalitatea valorilor din coloanele cheie selectate după <code>key1</code> (pentru <code>table1</code>) și <code>key2</code> (pentru <code>table2</code>).</p>\r\n<p>În mod implicit, este efectuată o unire internă; totuși, se poate include opțional și un <code>joinKind</code> pentru a specifica tipul de unire. Opțiunile includ:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Se poate include un set opțional <code>keyEqualityComparers</code> pentru a specifica modul de comparare a coloanelor cheie. Acest parametru este destinat în prezent doar pentru uz intern.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Asociați două tabele utilizând o singură coloană cheie.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Uniți două tabele care au nume de coloane conflictuale, utilizând mai multe coloane cheie.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Returnează cele mai mari rânduri utilizând criteriile date.",
        "Documentation.LongDescription": "Returnează cele mai mari rânduri din <code>table</code>, ținând cont de <code>comparisonCriteria</code>.\r\n    După sortarea rândurilor, parametrul <code>countOrCondition</code> poate fi specificat pentru a filtra ulterior rezultatul. Rețineți că algoritmul de sortare nu poate garanta un rezultat sortat fix. Parametrul <code>countOrCondition</code> poate lua mai multe forme:\r\n    <ul>\r\n        <li> Dacă se specifică un număr, este returnată o listă de maximum <code>countOrCondition</code> elemente în ordine crescătoare. </li>\r\n        <li> Dacă se specifică o condiție, este returnată o listă de elemente care, inițial, îndeplinesc condiția. Odată ce un element nu îndeplinește condiția, nu mai sunt luate în considerare elementele ulterioare. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Găsiți rândul cu cea mai mare valoare în coloana [a] cu condiția [a] > 0, în tabel. Rândurile sunt sortate înainte de aplicarea filtrului.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Găsiți rândul cu cea mai mare valoare în coloana [a] cu condiția [b] > 0, în tabel. Rândurile sunt sortate înainte de aplicarea filtrului.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Returnează cele mai mici rânduri utilizând criteriile date.",
        "Documentation.LongDescription": "Returnează cele mai mici rânduri din <code>table</code>, ținând cont de <code>comparisonCriteria</code>. După sortarea rândurilor, parametrul <code>countOrCondition</code> poate fi specificat pentru a filtra ulterior rezultatul. Rețineți că algoritmul de sortare nu poate garanta un rezultat sortat fix. Parametrul <code>countOrCondition</code> poate lua mai multe forme:\r\n    <ul>\r\n        <li> Dacă se specifică un număr, este returnată o listă de maximum <code>countOrCondition</code> elemente în ordine crescătoare. </li>\r\n        <li> Dacă se specifică o condiție, este returnată o listă de elemente care, inițial, îndeplinesc condiția. Odată ce elementul nu îndeplinește condiția, nu mai sunt luate în considerare elementele ulterioare. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Găsiți rândul cu cea mai mică valoare din coloana [a] cu condiția [a] < 3, în tabel. Rândurile sunt sortate înainte de aplicarea filtrului.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Găsiți rândul cu cea mai mică valoare din coloana [a] cu condiția [b] < 3, în tabel. Rândurile sunt sortate înainte de aplicarea filtrului.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Efectuează o uniune între tabele pe coloanele furnizate şi produce rezultatul uniunii într-o coloană nouă.",
        "Documentation.LongDescription": "<p>Unește rândurile din <code>table1</code> cu rândurile din <code>table2</code> pe baza egalității valorilor din coloanele cheie selectate de <code>key1</code> (pentru <code>table1</code>) și <code>key2</code> (pentru <code>table2</code>). Rezultatele sunt introduse în coloana cu numele <code>newColumnName</code>.</p>\r\n<p>Opțional, <code>joinKind</code> specifică tipul de unire care se va efectua. În mod implicit, se efectuează o unire externă la stânga, dacă nu se specifică <code>joinKind</code>.</p>\r\n<p>Se poate include un set opțional de <code>keyEqualityComparers</code> pentru a specifica modul de comparare a coloanelor cheie. Caracteristica este destinată momentan numai pentru utilizare internă.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Asociați două tabele utilizând o singură coloană cheie.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Dacă se specifică o pereche de coloane, care reprezintă perechile atribut-valoare, roteşte şi transformă datele din coloana de atribute în titlurile unei coloane.",
        "Documentation.LongDescription": "Dacă se specifică o pereche de coloane care reprezintă perechile atribut-valoare, roteşte şi transformă datele din coloana de atribute în titlurile unei coloane.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Preluaţi valorile „a”, „b” şi „c” din coloana de atribute a tabelului <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> şi pivotaţi-le în propria lor coloană.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Preluaţi valorile „a”, „b” şi „c” din coloana de atribute a tabelului <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> şi pivotaţi-le în propria lor coloană.  Atributul „c” pentru cheia „x” are mai multe valori asociate acestuia, deci utilizaţi funcţia List.Max pentru a rezolva conflictul.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Înlocuieşte intervalul specificat de rânduri cu rândurile furnizate.",
        "Documentation.LongDescription": "Înlocuieşte numărul specificat de rânduri, <code>count</code>, în datele introduse <code>table</code> cu <code>rows</code> specificat, care începe după <code>offset</code>. Parametrul <code>rows</code> este o listă de înregistrări.\r\n    <ul>\r\n       <li><code>table</code>: Tabelul în care este efectuată înlocuirea.</li>\r\n       <li><code>offset</code>: Numărul de rânduri de ignorat înainte de efectuarea înlocuirii.</li>\r\n       <li><code>count</code>: Numărul de rânduri de înlocuit.</li>\r\n       <li><code>rows</code>: Lista de înregistrări ale rândurilor de inserat în <code>table</code> în locaţia specificată de <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Începând cu poziția 1, înlocuiți 3 rânduri.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Înlocuieşte o valoare cu altă valoare în coloanele specificate.",
        "Documentation.LongDescription": "Înlocuieşte <code>oldValue</code> cu <code>newValue</code> în coloanele specificate din <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiți textul „la revedere” cu „lume” din coloana B, potrivind doar valoarea întreagă.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Înlocuiți textul „sa” cu „sau” în coloana B, potrivind oricare parte a valorii.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimizați numele angajaților din Statele Unite.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimizați toate coloanele angajaților din Statele Unite.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Divizează coloanele specificate într-un set de coloane suplimentare utilizând funcţia de divizare specificată.",
        "Documentation.LongDescription": "Divizează coloanele specificate într-un set de coloane suplimentare utilizând funcţia de divizare specificată.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Scindați coloana [Name], la poziția „i”, în două coloane",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Traduce un set de coloane dintr-un tabel în perechi atribut-valoare.",
        "Documentation.LongDescription": "Traduce un set de coloane dintr-un tabel în perechi atribut-valoare, combinate cu restul valorilor din fiecare rând.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Preia coloanele „a”, „b” şi „c” din tabelul <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> şi anulaţi pivotarea acestora în perechi atribut-valoare.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Transformă în perechi atribut-valoare toate coloanele, cu excepţia unui set specificat.",
        "Documentation.LongDescription": "Transformă în perechi atribut-valoare toate coloanele, cu excepţia unui set specificat, combinându-le cu restul valorilor din fiecare rând.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Transformă în perechi atribut-valoare toate coloanele, cu excepția unui set specificat, combinându-le cu restul valorilor din fiecare rând.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Analize personale Microsoft Teams",
        "Documentation.LongDescription": "<p>Conectorul Teams Analytics vă permite să obțineți detalii despre utilizarea Teams. Datele sunt disponibile atât pentru activitatea personală în Teams, cât și pentru activitatea din Teams din care faceți parte.</p>\r\n<p>Datele sunt disponibile pentru ultimele 90 de zile. </p>\r\n<p> Pentru detalii despre tipurile de date disponibile, consultați documentația de ajutor următoare: </p>\r\n<ul>\r\n<li><b>Utilizarea Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Activitatea utilizatorilor Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Introduceți numele organizației și al proiectului.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Returnează un tabel de fluxuri OData oferite de Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Returnează un format binar care citeşte o valoare binară.",
        "Documentation.LongDescription": "Returnează un format binar care citește o valoare binară.  Dacă se specifică <code>length</code>, valoarea binară va conține numărul respectiv de byți.  Dacă nu se specifică <code>length</code>, valoarea binară va conține numărul de byți rămași.  <code>length</code> poate fi specificat fie ca număr, fie ca format binar cu o lungime care apare înaintea datelor binare.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Returnează o valoare logică bazată pe verificarea de egalitate dintre cele două valori date.",
        "Documentation.LongDescription": "Returnează o valoare <code>logică</code> pe baza verificării egalității pentru cele două valori date, <code>x</code> și <code>y</code>, utilizând <code>comparer</code>furnizat.\r\n      <div>\r\n        <code>comparer</code> este un <code>Comparer</code> care este utilizat pentru a controla comparația.\r\n        Un comparator este o funcție care acceptă două argumente și returnează -1, 0 sau 1, în funcție dacă prima valoare este mai mică decât, egală cu sau mai mare decât secunda.\r\n        Comparatorii pot fi utilizați pentru a furniza comparații care nu sunt sensibile la literele mari și mici sau la cultură și la setările regionale.\r\n      </div>\r\n      <div>\r\n        Următoarele comparatoare încorporate sunt disponibile în limba formulei:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Utilizat pentru a efectua o comparație ordinală exactă</li>\r\n <li><code>Comparer.OrdinalIgnoreCase</code>: Utilizat pentru a efectua o comparație ordinală exactă, care nu este sensibilă la literele mari și mici</li>\r\n        <li> <code>Comparer.FromCulture</code>: Utilizat pentru a efectua o comparație receptivă la cultură</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Comparați „1” și „A” folosind setările lingvistice „en-US” pentru a determina dacă valorile sunt egale.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Returnează data şi ora curente în fusul orar local. Această valoare este fixă şi nu se va modifica cu apelurile succesive.",
        "Documentation.LongDescription": "Returnează o valoare <code>datetime</code> setată la data şi ora curente ale sistemului. Această valoare este fixă şi nu se va modifica cu apeluri succesive, cum ar fi DateTime.LocalNow, care ar putea returna diferite valori în cursul executării unei expresii.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Returnează data şi ora curente în fusul orar local.",
        "Documentation.LongDescription": "Returnează o valoare <code>datetime</code> setată la data şi ora curente ale sistemului.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Returnează data şi ora curente în fusul orar local. Această valoare este fixă şi nu se va modifica cu apelurile succesive.",
        "Documentation.LongDescription": "Returnează o valoare <code>datetime</code> setată la data şi ora curente ale sistemului. Valoarea returnată conţine informaţii despre fusul orar care reprezintă fusul orar local. Această valoare este fixă şi nu se va modifica cu apeluri succesive, cum ar fi DateTimeZone.LocalNow, care ar putea returna diferite valori în cursul executării unei expresii.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Returnează data şi ora curente în UTC (fusul orar GMT). Această valoare este fixă şi nu se va modifica cu apelurile succesive.",
        "Documentation.LongDescription": "Returnează data şi ora curente în UTC (fusul orar GMT). Această valoare este fixă şi nu se va modifica cu apelurile succesive.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Returnează data şi ora curente în fusul orar local.",
        "Documentation.LongDescription": "Returnează o valoare <code>datetimezone</code> setată la data și ora curente ale sistemului.\r\n    Valoarea returnată conține informații despre fusul orar care reprezintă fusul orar local.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Returnează data şi ora curente în UTC (fusul orar GMT).",
        "Documentation.LongDescription": "Returnează data şi ora curente în UTC (fusul orar GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi data şi ora curente în UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Returnează un identificator opac pentru evaluarea ce rulează momentan.",
        "Documentation.LongDescription": "Returnează un identificator opac pentru evaluarea ce rulează momentan.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Returnează un identificator opac pentru a corela solicitările primite cu cele trimise.",
        "Documentation.LongDescription": "Returnează un identificator opac pentru a corela solicitările primite cu cele trimise.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Scrie o intrare de trasare, dacă s-a activat trasarea, și returnează valoarea.",
        "Documentation.LongDescription": "Scrie o trasare <code>message</code>, dacă s-a activat trasarea, și returnează <code>value</code>. Un parametru opțional, <code>delayed</code>, specifică dacă să se amâne evaluarea <code>value</code> până la trasarea mesajului. <code>traceLevel</code> poate prelua una dintre următoarele valori:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Trasați mesajul înainte de a invoca funcția Text.From și a returna rezultatul.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Furnizorul de identitate implicit pentru gazda curentă.",
        "Documentation.LongDescription": "Furnizorul de identitate implicit pentru gazda curentă.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Acumulează o valoare rezumat din elementele din listă.",
        "Documentation.LongDescription": "Acumulează o valoare rezumat din elementele din lista <code>list</code>, utilizând <code>accumulator</code>.\r\n    Un parametru opţional pentru valoarea de pornire, <code>seed</code>, poate fi setat.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Acumulează valoarea rezumat din elementele din lista {1, 2, 3, 4, 5}, utilizând ((stare, actual) => stare + actual).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Generează o listă de valori datetimezone dintr-o valoare iniţială, un număr şi o valoare pentru durată incrementală.",
        "Documentation.LongDescription": "Returnează o listă de valori <code>datetimezone</code> de dimensiunea <code>count</code>, începând de la <code>start</code>. Incrementul dat, <code>step</code>, este o valoare <code>duration</code> care este adăugată la fiecare valoare.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de 10 valori începând de la 5 minute înainte de Revelion (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) crescând cu 1 minut (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Generează o listă de valori datetime dintr-o valoare iniţială, un număr şi o valoare pentru durată incrementală.",
        "Documentation.LongDescription": "Returnează o listă de valori <code>datetime</code> de dimensiunea <code>count</code>, începând de la <code>start</code>. Incrementul dat, <code>step</code>, este o valoare <code>duration</code> care este adăugată la fiecare valoare.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de 10 valori începând de la 5 minute înainte de Revelion (#datetime(2011, 12, 31, 23, 55, 0)) crescând cu 1 minut (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Generează o listă de valori date dintr-o valoare iniţială, un număr şi o valoare pentru durată incrementală.",
        "Documentation.LongDescription": "Returnează o listă de valori <code>date</code> de dimensiunea <code>count</code>, începând de la <code>start</code>. Incrementul dat, <code>step</code>, este o valoare <code>duration</code> care este adăugată la fiecare valoare.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creați o listă de 5 valori începând de la Ajunul Anului Nou (#date(2011, 12, 31)) și incrementând cu 1 zi (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Generează o listă de valori pentru durată dintr-o valoare iniţială, un număr şi o valoare pentru durată incrementală.",
        "Documentation.LongDescription": "Returnează o listă de valori <code>count</code> <code>duration</code>, începând de la <code>start</code> şi crescută cu valoarea <code>duration</code> dată <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creați o listă de 5 valori începând de la 1 oră și incrementând cu o oră.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Generează o listă de valori.",
        "Documentation.LongDescription": "Generează o listă de valori utilizând funcțiile furnizate. Funcția <code>initial</code> generează o valoare candidat de pornire, care este apoi testată cu <code>condition</code>.\r\n    Dacă valoarea candidat este aprobată, este returnată ca parte a listei rezultate, iar următoarea valoare candidată este generată prin trecerea noii valori aprobate la <code>next</code>.\r\n    Odată ce o valoare candidat nu reușește să se potrivească cu <code>condition</code>, procesul de generare a listei se oprește.\r\n    Un parametru opțional, <code>selector</code>, poate fi furnizat, de asemenea, pentru a transforma elementele din lista rezultată.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creați o listă începând de la zece, scăzând în mod repetat cu unu și asigurându-vă că fiecare element este mai mare decât zero.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Generaţi o listă de înregistrări ce conţin x şi y, unde x este o valoare şi y este o listă. x trebuie să rămână mai mic decât 10 şi reprezintă numărul de elemente din lista y. După generarea listei, returnaţi numai valorile x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Inserează valori într-o listă la indexul dat.",
        "Documentation.LongDescription": "Returnează o nouă listă produsă prin inserarea valorilor din <code>values</code> în <code>list</code> la <code>index</code>. Prima poziţie din listă este la indexul 0.\r\n      <ul>\r\n        <li><code>list</code>: Lista ţintă în care urmează să fie inserate valorile.</li>\r\n        <li><code>index</code>: Indexul listei ţintă (<code>list</code>) în care urmează să fie inserate valorile. Prima poziţie din listă este la indexul 0.</li>\r\n        <li><code>values</code>: Lista de valori care urmează să fie inserate în <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Inseraţi lista ({3, 4}) în lista ţintă ({1, 2, 5}) la indexul 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Inseraţi o listă cu o listă imbricată ({1, {1,1, 1,2}}) într-o listă ţintă ({2, 3, 4}) la indexul 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Înlocuieşte numărul de valori începând de la poziţia cu valorile de înlocuire.",
        "Documentation.LongDescription": "Înlocuieşte valorile <code>count</code> din <code>list</code> cu lista <code>replaceWith</code>, începând de la poziţia specificată, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiţi {7, 8, 9} din lista {1, 2, 7, 8, 9, 5} cu {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Caută o listă pentru valoarea specificată şi o înlocuieşte.",
        "Documentation.LongDescription": "Caută o listă de valori, <code>list</code>, pentru valoarea <code>oldValue</code> şi înlocuieşte fiecare ocurenţă cu valoarea de înlocuire <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiţi toate valorile „a” din lista {\"a\", \"B\", \"a\", \"a\"} cu „A”.",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Generează o listă de valori time dintr-o valoare iniţială, un număr şi o valoare pentru durată incrementală.",
        "Documentation.LongDescription": "Returnează o listă de valori <code>time</code> de dimensiunea <code>count</code>, începând de la <code>start</code>. Incrementul dat, <code>step</code>, este o valoare <code>duration</code> care este adăugată la fiecare valoare.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de 4 valori începând de la prânz (#time(12, 0, 0)) crescând cu o oră (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Returnează o listă ale cărei elemente sunt transformate din lista de intrare utilizând funcţiile specificate.",
        "Documentation.LongDescription": "Returnează o listă ale cărei elemente sunt proiectate din lista de intrare.<br>\r\n    <br>\r\n    Funcția <code>collectionTransform</code> transformă fiecare element într-o listă intermediară, iar funcția <code>resultTransform</code> primește elementul original, precum și un element din lista intermediară pentru a construi rezultatul final.<br>\r\n    <br>\r\n    Funcția <code>collectionTransform</code> are semnătura <code> (x ca oricare) ca listă => ...</code>,  unde <code>x</code> este un element în <code>list</code>.\r\n    Funcția <code>resultTransform</code> proiectează forma rezultatului și are semnătura <code>(x ca oricare, y ca oricare) ca oricare => ...</code>, unde <code>x</code> este un element în <code>list</code> și <code>y</code> este un element din lista generată prin trecerea <code>x</code> la <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Aplatizați o listă de oameni și animalele lor de companie.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Returnează un număr aleatoriu.",
        "Documentation.LongDescription": "Returnează un număr aleatoriu cuprins între 0 și 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi un număr aleatoriu.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Adaugă un câmp la o înregistrare.",
        "Documentation.LongDescription": "Adaugă un câmp la o înregistrare <code>record</code>, ţinând cont de numele câmpului <code>fieldName</code> şi de valoarea <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Adăugați câmpul Adresă la înregistrare.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Înlocuieşte textul cu datele introduse furnizate.",
        "Documentation.LongDescription": "Înlocuieşte textul <code>old</code> din <code>text</code> original cu textul <code>new</code>. Această funcţie de înlocuire poate fi utilizată în <code>List.ReplaceValue</code> şi în <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiţi textul „hE”cu „He” în şirul „hEllo world”.",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Înlocuieşte valorile cu valorile introduse furnizate.",
        "Documentation.LongDescription": "Înlocuieşte valoarea <code>old</code> din <code>value</code> original cu valoarea <code>new</code>. Această funcţie de înlocuire poate fi utilizată în <code>List.ReplaceValue</code> şi în <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiţi valoarea 11 cu valoarea 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Returnează un rezultat JSON de la API-ul Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Efectuează un apel la API-ul REST Smartsheet 2.0 la punctul final specificat și returnează rezultatele ca înregistrare JSON.",
        "Documentation.Examples": [
          {
            "Description": "Extrage date de la punctul final API Smartsheet al foilor cu argumente suplimentare specificate",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Un tabel cu informații de foi, returnat de API-ul Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.TestContents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Returnează o funcție care nu aplică separare, returnând argumentul ca listă cu un singur element.",
        "Documentation.LongDescription": "Returnează o funcție care nu aplică separare, returnând argumentul ca listă cu un singur element.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Returnează o funcţie care divizează textul într-o listă de text la un spaţiu gol.",
        "Documentation.LongDescription": "Returnează o funcţie care divizează textul într-o listă de text la un spaţiu gol.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divizează intrarea după caractere de spații albe, tratând ghilimelele ca orice alt caracter.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Partiţionează tabelul într-o listă de tabele în funcţie de numărul de grupuri şi de coloana specificată.",
        "Documentation.LongDescription": "Partiţionează <code>table</code> într-o listă de <code>groups</code> număr de tabele, în funcţie de valoarea <code>column</code> şi de o funcţie <code>hash</code>.\r\n    Funcţia <code>hash</code> este aplicată valorii rândului <code>column</code> pentru a obţine o valoare hash pentru rând. Valoarea hash modulo <code>groups</code> determină în care dintre tabelele returnate va fi plasat rândul.\r\n    <ul>\r\n       <li><code>table</code>: Tabelul de partiţionat.</li>\r\n       <li><code>column</code>: Coloana pe care se va aplica algoritmul hash pentru a determina în ce tabel returnat se află rândul.</li>\r\n       <li><code>groups</code>: Numărul de tabele în care va fi partiţionat tabelul de intrare.</li>\r\n       <li><code>hash</code>: Funcţia aplicată pentru a obţine o valoare hash.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Partiţionaţi tabelul <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> în 2 tabele pe coloana [a], utilizând valoarea coloanelor ca funcţie hash.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Returnează porțiunea <code>text</code> dintre <code>startDelimiter</code> și <code>endDelimiter</code> specificate.\r\n    O valoare numerică opțională <code>startIndex</code> indică ce apariție a instanței <code>startDelimiter</code> trebuie luată în calcul.\r\n    O listă opțională <code>startIndex</code> indică ce apariție a instanței <code>startDelimiter</code> trebuie luată în calcul și dacă indexarea trebuie realizată de la începutul sau de la sfârșitul intrării.\r\n    <code>endIndex</code> este similar, cu excepția faptului că indexarea se face în raport cu <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obțineți porțiunea din „111 (222) 333 (444)” dintre (prima) paranteză deschisă și (prima) paranteză închisă care o urmează.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Obțineți porțiunea din „111 (222) 333 (444)” dintre a doua paranteză deschisă și prima paranteză închisă care o urmează.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Obțineți porțiunea din „111 (222) 333 (444)” dintre a doua paranteză deschisă de la sfârșit și a doua paranteză închisă care o urmează.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Inserează o valoare text în alta la o poziţie dată.",
        "Documentation.LongDescription": "Returnează rezultatul inserării valorii text <code>newText</code> în valoarea text <code>text</code> la poziţia <code>offset</code>. Poziţiile încep la numărul 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Inseraţi „C” între „B” şi „D” în „ABD”.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Returnează un identificator unic global (GUID) nou, aleatoriu.",
        "Documentation.LongDescription": "Returnează un identificator unic global (GUID) nou, aleatoriu.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Înlocuieşte toate ocurenţele subşirurilor date în text.",
        "Documentation.LongDescription": "Returnează rezultatul înlocuirii tuturor ocurenţelor valorii text <code>old</code> din valoarea text <code>text</code> cu valoarea text <code>new</code>. Această funcţie este sensibilă la litere mari şi mici.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiţi fiecare ocurenţă a cuvântului „the” dintr-o propoziţie cu „a”.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Elimină un interval de caractere şi inserează o nouă valoare într-o poziţie specificată.",
        "Documentation.LongDescription": "Returnează rezultatul eliminării unui număr de caractere, <code>count</code>, din valoare text <code>text</code> începând de la poziţia <code>offset</code> şi al inserării valorii text <code>newText</code> în aceeaşi poziţie în <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiţi un singur caracter în poziţia 2 în valoarea text „ABGF” cu o nouă valoare text „CDE”.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Adaugă o cheie la tipul de tabel dat.",
        "Documentation.LongDescription": "Adaugă o cheie la tipul de tabel dat.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Returnează o listă de identități pe care le va accepta condiția.",
        "Documentation.LongDescription": "<p>Utilizând <code>identityProvider</code> specificat, convertește <code>condition</code> în lista de identități pentru care <code>condition</code> ar returna <code>true</code> în toate contextele de autorizare cu <code>identityProvider</code> ca furnizor de identitate. Apare o eroare dacă nu se poate converti <code>condition</code> într-o listă de identități, de exemplu, dacă <code>condition</code> consultă atribute diferite de identitățile de utilizator sau de grup pentru a lua o decizie.</p>\r\n    <p>Rețineți că lista de identități reprezintă identitățile așa cum apar în <code>condition</code> și nicio normalizare (cum ar fi extinderea grupului) nu se efectuează asupra lor.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Comprimă o valoare binară utilizând tipul de comprimare specificat.",
        "Documentation.LongDescription": "Comprimă o valoare binară utilizând tipul de comprimare dat. Rezultatul acestui apel este o copie comprimată a intrării. Tipurile de comprimare cuprind:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Comprimă valoarea binară.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Decomprimă o valoare binară utilizând tipul de comprimare specificat.",
        "Documentation.LongDescription": "Decomprimă o valoare binară utilizând tipul de comprimare specificat. Rezultatul acestui apel este o copie decomprimată a intrării. Tipurile de comprimare cuprind:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Decomprimă valoarea binară.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Returnează un subset al valorii binare începând de la un decalaj.",
        "Documentation.LongDescription": "Returnează un subset al valorii binare, începând de la decalajul <code>binary</code>. Un parametru opţional, <code>offset</code>, setează lungimea maximă a subsetului.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Returnează un subset al valorii binare începând de la decalajul 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Returnează un subset de lungime 2 de la decalajul 6 al valorii binare.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Scindează binarul specificat într-o listă de fișiere binare, utilizând dimensiunea de pagină specificată.",
        "Documentation.LongDescription": "Scindează <code>binary</code> într-o listă de fișiere binare în care primul element din lista de ieșire este un binar care conține primii <code>pageSize</code> byți din\r\n binarul sursă, următorul element al listei de ieșire este un binar care conține următorii <code>pageSize</code> byți din binarul sursă și așa mai departe.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Creează sau extinde un binar cu rutine de tratare definite de utilizator pentru operații de interogare și acțiune.",
        "Documentation.LongDescription": "<p>Returnează o vizualizare a <code>binary</code> unde funcțiile specificate în <code>handlers</code> sunt utilizate în locul comportamentului implicit al unei operații atunci când operația este aplicată vizualizării.</p>\r\n<p>Dacă <code>binary</code> este furnizat, toate funcțiile rutinei de tratare sunt opționale. Dacă <code>binary</code> nu este furnizat, este necesară funcția de tratare <code>GetStream</code>. Dacă nu este specificată o funcție rutină de tratare pentru o operație, comportamentul implicit al operației se aplică în schimb la <code>binary</code> (cu excepția cazului <code>GetExpression</code>).</p>\r\n<p>Funcțiile rutină de tratare trebuie să returneze o valoare care este semantic echivalentă cu rezultatul aplicării operației împotriva <code>binary</code> (sau vizualizarea rezultată în cazul <code>GetExpression</code>).</p>\r\n<p>Dacă o funcție rutină de tratare declanșează o eroare, comportamentul implicit al operației se aplică vizualizării.</p>\r\n<p><code>Binary.View</code> poate fi utilizat pentru a implementa plierea la o sursă de date – traducerea interogărilor M în operații specifice sursei (de exemplu, pentru a descărca o secțiune a unui fișier).</p>\r\n<p>Consultați documentația conectorului personalizat Power Query publicat pentru o descriere mai completă a <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Creează o vizualizare de bază care nu necesită accesarea datelor pentru a determina lungimea.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Returnează un format binar cu ordinea de octeţi specificată de o funcţie.",
        "Documentation.LongDescription": "Returnează un format binar cu ordinea de octeţi specificată de <code>binaryFormat</code>.  Ordinea de octeţi implicită este <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Returnează un format binar care alege următorul format binar în funcţie de o valoare care a fost citită deja.",
        "Documentation.LongDescription": "Returnează un format binar care alege următorul format binar în funcţie de o valoare care a fost citită deja.  Valoarea binară a formatului produsă de această funcţie funcţionează în etape:<ul>\r\n<li>Formatul binar specificat de parametrul <code>binaryFormat</code> este utilizat pentru a citi o valoare.</li>\r\n<li>Valoarea este transmisă la funcţia de alegere specificată de parametrul <code>chooseFunction</code>.</li>\r\n<li>Funcţia de alegere inspectează valoarea şi returnează un format binar secundar.</li>\r\n<li>Formatul binar secundar este utilizat pentru a citi o valoare secundară.</li>\r\n<li>Dacă se specifică funcţia de combinare, atunci valorile principale şi secundare sunt transmise la funcţia de combinare şi se returnează valoarea rezultată.</li>\r\n<li>Dacă nu se specifică funcţia de combinare, se returnează valoarea secundară.</li>\r\n<li>Se returnează valoarea secundară.</li>\r\n</ul>Parametrul <code>type</code> opţional indică tipul de format binar care va fi returnat de funcţia de alegere.  Se poate specifica fie <code>type any</code>, <code>type list</code>, fie <code>type binary</code>.  Dacă nu se specifică parametrul <code>type</code>, atunci se utilizează <code>type any</code>.   Dacă se utilizează <code>type list</code> sau <code>type binary</code>, atunci sistemul poate returna o valoare <code>binary</code> sau <code>list</code> de redare în flux în locul uneia din zona tampon, lucru ce poate reduce volumul de memorie necesar pentru a citi formatul.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Citiţi o listă de octeţi în care numărul de elemente este determinat de primul octet.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Citiţi o listă de octeţi în care numărul de elemente este determinat de primul octet şi păstraţi primul octet citit.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Citiţi o listă de octeţi în care numărul de elemente este determinat de primul octet utilizând o listă de redare în flux.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Returnează un format binar care citeşte un grup de elemente.",
        "Documentation.LongDescription": "Parametrii sunt următorii:\r\n<ul>\r\n<li>Parametrul <code>binaryFormat</code> specifică formatul binar al valorii cheii.</li>\r\n<li>Parametrul <code>group</code> furnizează informații despre grupul de elemente cunoscute.</li>\r\n<li>Parametrul <code>extra</code> opțional poate fi utilizat pentru a specifica o funcție ce va returna o valoare în format binar a valorii care urmează orice cheie ce nu era așteptată. Dacă nu se specifică parametrul <code>extra</code>, atunci va apărea o eroare dacă există valori neașteptate pentru chei.</li>\r\n</ul>\r\nParametrul <code>group</code> specifică o listă de definiții ale elementelor. Fiecare definiție de element este o listă ce conține între 3 și 5 valori, după cum urmează:\r\n<ul>\r\n<li>Valoarea cheii. Valoarea cheii care corespunde elementului. Aceasta trebuie să fie unică în cadrul setului de elemente.</li>\r\n<li>Formatul elementului. Formatul binar care corespunde valorii elementului. Acesta permite ca fiecare element să aibă un format diferit. </li>\r\n<li>Ocurență element. Valoarea <code>BinaryOccurrence.Type</code> indică de câte ori se așteaptă ca elementul să apară într-un grup. Elementele obligatorii care nu sunt prezente cauzează o eroare. Elementele dublate obligatorii sau opționale sunt tratate ca valori de chei neașteptate.</li>\r\n<li>Valoare implicită element (opțional). Dacă valoarea implicită a elementului apare în lista de definiții ale elementului și nu este nulă, atunci aceasta va fi utilizată în loc de valoarea implicită. Valoarea implicită pentru elementele repetate sau opționale este nulă și valoarea implicită pentru valorile repetate este o listă necompletată { }.</li>\r\n<li>Transformare valoare element (opțional). Dacă funcția de transformare a valorii elementului apare în lista de definiții ale elementului și nu este nulă, atunci aceasta va fi apelată pentru a transforma valoarea elementului înainte ca acesta să fie returnat. Funcția de transformare este apelată numai dacă elementul apare în datele de intrare (nu va fi apelată niciodată cu valoarea implicită). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Următorul element presupune o valoare pentru chei care este un singur octet, cu 4 elemente aşteptate în grup, toate care au un octet de date ce urmează cheii.  Elementul apare în datele introduse după cum urmează:\r\n<ul>\r\n<li>Cheia 1 este obligatorie şi apare cu valoarea 11.</li>\r\n<li>Cheia 2 se repetă şi apare de două ori cu valoarea 22 şi duce la o valoare de { 22, 22 }.</li>\r\n<li>Cheia 3 este opţională şi nu apare, rezultând la o valoare null.</li>\r\n<li>Cheia 4 se repetă, dar nu apare şi duce la o valoare de { }.</li>\r\n<li>Cheia 5 nu face parte din grup, dar apare o dată cu valoarea 55.  Funcţia suplimentară este apelată cu valoarea cheii 5 şi returnează formatul care corespunde valorii respective (BinaryFormat.Byte).  Valoarea 55 este citită şi eliminată.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Exemplul următor ilustrează transformarea valorii elementului şi valoarea implicită a elementului.   Elementul de repetare cu cheia 1 însumează lista de valori citite utilizând List.Sum.  Elementul opţional cu cheia 2 are o valoare implicită de 123 în loc de null.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Returnează un format binar care limitează numărul de date care pot fi citite.",
        "Documentation.LongDescription": "Returnează un format binar care limitează cantitatea de date care poate fi citită.  Atât <code>BinaryFormat.List</code>, cât şi <code>BinaryFormat.Binary</code> pot fi utilizate pentru citire până la terminarea datelor,  <code>BinaryFormat.Length</code> poate fi utilizat pentru a limita numărul de byți care sunt citiți.  Parametrul <code>binaryFormat</code> specifică formatul binar de limitat.  Parametrul <code>length</code> specifică numărul de byți de citit.  Parametrul <code>length</code> poate fi o valoare numerică sau o valoare binară a formatului, care specifică formatul valorii lungime ce apare înaintea valorii citite.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Limitaţi numărul de octeţi citiţi la 2 la citirea unei liste de octeţi.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Limitați numărul de byți la citirea unei liste de byți la valoarea unui byte care apare înaintea listei.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Returnează un format binar care va transforma valorile citite de alt format binar.",
        "Documentation.LongDescription": "Returnează un format binar care va transforma valorile citite de alt format binar.  Parametrul <code>binaryFormat</code> specifică formatul binar care va fi utilizat pentru a citi valoarea.  Se invocă <code>function</code> cu valoarea citită şi returnează valoarea transformată.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Citiţi un octet şi adăugaţi unul la acesta.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Returnează o funcție de comparare care utilizează reguli ordinale pentru a compara valorile.",
        "Documentation.LongDescription": "Returnează o funcție de comparare și care utilizează reguli ordinale pentru a compara valorile furnizate <code>x</code> și <code>y</code>.<br>\r\n        <br>\r\n        O funcție de comparare acceptă două argumente și returnează -1, 0 sau 1, în funcție dacă prima valoare este mai mică decât, egală cu sau mai mare decât a doua.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Utilizând reguli ordinale, comparați dacă enciclopædia” și „enciclopedia” sunt echivalente. Rețineți că acestea sunt echivalente utilizând <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Returnează o funcție de comparare care nu ține cont de literele mari și mici care utilizează reguli ordinale pentru a compara valorile.",
        "Documentation.LongDescription": "Returnează o funcție de comparare care nu este sensibilă la literele mari și mici și care utilizează reguli ordinale pentru a compara valorile furnizate <code>x</code> și <code>y</code>.<br>\r\n        <br>\r\n        O funcție de comparare acceptă două argumente și returnează -1, 0 sau 1, în funcție dacă prima valoare este mai mică decât, egală cu sau mai mare decât a doua.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Utilizând reguli ordinale care nu țin cont de literele mari și mici, comparați „Abc” cu „abc”. Rețineți că „Abc” este mai mic decât „abc” când se folosește <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Returnează o proprietate a unui atribut de dimensiune.",
        "Documentation.LongDescription": "Returnează proprietatea <code>propertyName</code> a atributului de dimensiune <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Returnează o proprietate a unei măsuri (proprietate de celulă).",
        "Documentation.LongDescription": "Returnează proprietatea <code>propertyName</code> a măsurii <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Sursă interogare Databricks SQL",
        "Documentation.LongDescription": "Definiți o sursă de date Databricks pentru rularea interogărilor SQL"
      },
      "ReturnType": "Interogare SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Sursă interogare Databricks SQL",
        "Documentation.LongDescription": "Definiți o sursă de date Databricks pentru rularea interogărilor SQL"
      },
      "ReturnType": "Interogare SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Adaugă zilele specificat la dată.",
        "Documentation.LongDescription": "Returnează rezultatul <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din adăugarea a <code>numberOfDays</code> zile la valoarea <code>datetime</code><code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> la care sunt adăugate zile.</li>\r\n      <li><code>numberOfDays</code>: Numărul de zile de adăugat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adăugaţi 5 zile la valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> reprezentând data 14/05/2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Adaugă lunile specificate la dată.",
        "Documentation.LongDescription": "Returnează rezultatul <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din adăugarea a <code>numberOfMonths</code> luni la valoarea <code>datetime</code><code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> la care sunt adăugate luni.</li>\r\n        <li><code>numberOfMonths</code>: numărul de luni de adăugat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adăugaţi 5 luni la valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> reprezentând data 14/05/2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Adăugaţi 18 luni la valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> reprezentând data şi ora 14/05/2011 08:15:22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Adaugă trimestrele specificate la dată.",
        "Documentation.LongDescription": "Returnează rezultatul <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din adăugarea a <code>numberOfQuarters</code> trimestre la valoarea <code>datetime</code><code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> la care sunt adăugate trimestre.</li>\r\n      <li><code>numberOfQuarters</code>: Numărul de trimestre de adăugat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adăugaţi 1 trimestru la valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> reprezentând data 14/05/2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Adaugă săptămânile specificate la dată.",
        "Documentation.LongDescription": "Returnează rezultatul <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din adăugarea a <code>numberOfWeeks</code> săptămâni la valoarea <code>datetime</code><code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> la care sunt adăugate săptămâni.</li>\r\n      <li><code>numberOfWeeks</code>: Numărul de săptămâni de adăugat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adăugaţi 2 săptămâni la valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> reprezentând data 14/05/2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Adaugă anii specificaţi la dată.",
        "Documentation.LongDescription": "Returnează rezultatul <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din adăugarea a <code>numberOfYears</code> la o valoare <code>datetime</code><code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> la care sunt adăugați anii.</li>\r\n        <li><code>numberOfYears</code>: numărul de ani de adăugat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adăugaţi 4 ani la valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> reprezentând data 14/05/2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Adăugaţi 10 ani la valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> reprezentând data şi ora 14/05/2011 08:15:22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Indică dacă această dată cade în următorul număr de zile, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ziua curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului număr de zile, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ziua curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>days</code>: Numărul de zile.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă ziua ulterioară celei indicate de ora curentă a sistemului cade în următoarele două zile.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Indică dacă această dată cade în următorul număr de luni, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în luna curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului număr de luni, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în luna curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>months</code>: Numărul de luni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă luna ulterioară celei indicate de ora curentă a sistemului cade în următoarele două luni.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Indică dacă această dată cade în următorul număr de trimestre, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în trimestrul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului număr de trimestre, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în trimestrul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>quarters</code>: Numărul de trimestre.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă trimestrul ulterior celui indicat de ora curentă a sistemului cade în următoarele două trimestre.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Indică dacă această dată cade în următorul număr de săptămâni, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în săptămâna curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului număr de săptămâni, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în săptămâna curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>weeks</code>: Numărul de săptămâni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă săptămâna ulterioară celei indicate de ora curentă a sistemului cade în următoarele două săptămâni.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Indică dacă această dată cade în următorul număr de ani, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în anul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului număr de ani, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în anul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>years</code>: Numărul de ani.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă anul ulterior celui indicat de ora curentă a sistemului cade în următorii doi ani.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Indică dacă această dată cade în timpul numărului de zile anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți faptul că această funcție va returna false atunci când primește o valoare care cade în ziua curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul numărului de zile anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ziua curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>days</code>: Numărul de zile.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă ziua anterioară celei indicate de ora curentă a sistemului cade în precedentele două zile.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Indică dacă această dată cade în timpul numărului de luni anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți faptul că această funcție va returna false atunci când primește o valoare care cade în luna curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul numărului de luni anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în luna curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>months</code>: Numărul de luni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă luna anterioară celei indicate de ora curentă a sistemului cade în precedentele două luni.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Indică dacă această dată cade în timpul numărului de trimestre anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți faptul că această funcție va returna false atunci când primește o valoare care cade în trimestrul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul numărului de trimestre anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în trimestrul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>quarters</code>: Numărul de trimestre.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă trimestrul anterior celui indicat de ora curentă a sistemului cade în precedentele două trimestre.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Indică dacă această dată cade în timpul numărului de săptămâni anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți faptul că această funcție va returna false atunci când primește o valoare care cade în săptămâna curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul numărului de săptămâni anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în săptămâna curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>weeks</code>: Numărul de săptămâni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă săptămâna anterioară celei indicate de ora curentă a sistemului cade în precedentele două săptămâni.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Indică dacă această dată cade în timpul numărului de ani anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți faptul că această funcție va returna false atunci când primește o valoare care cade în anul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul numărului de ani anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în anul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>years</code>: Numărul de ani.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă anul anterior celui indicat de ora curentă a sistemului cade în precedenții doi ani.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Adaugă informații despre fusul orar la valoarea datetime.",
        "Documentation.LongDescription": "Adaugă informații despre fusul orar la valoarea <code>dateTime</code>. Informațiile despre fusul orar includ <code>timezoneHours</code> și, opțional, <code>timezoneMinutes</code>, care specifică decalajul dorit față de ora UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Setați fusul orar la UTC+7:30 (decalaj de 7 ore și 30 de minute față de UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Indică dacă această valoare datetime cade în următorul număr de ore, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ora curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului număr de ore, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ora curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>hours</code>: Numărul de ore.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă ora ulterioară celei indicate de ora curentă a sistemului este în următoarele două ore.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Indică dacă această valoare datetime cade în următorul număr de minute, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în minutul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului număr de minute, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în minutul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>minutes</code>: Numărul de minute.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă minutul ulterior celui indicat de ora curentă a sistemului este în următoarele două minute.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Indică dacă această valoare datetime cade în următorul număr de secunde, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în secunda curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului număr de secunde, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în secunda curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>seconds</code>: Numărul de secunde.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă secunda ulterioară celei indicate de ora curentă a sistemului este în următoarele două secunde.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Indică dacă această valoare datetime cade în numărul de ore anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ora curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul numărului de ore anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ora curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>hours</code>: Numărul de ore.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă ora anterioară celei indicate de ora curentă a sistemului este în cele două ore precedente.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Indică dacă această valoare datetime cade în numărul de minute anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în minutul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul numărului de minute anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în minutul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>minutes</code>: Numărul de minute.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă minutul anterior celui indicat de ora curentă a sistemului este în precedentele două minute.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Indică dacă această valoare datetime cade în numărul de secunde anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în secunda curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul numărului de secunde anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în secunda curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      <li><code>seconds</code>: Numărul de secunde.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă secunda anterioară celei indicate de ora curentă a sistemului este în cele două secunde precedente.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Modifică fusul orar al valorii.",
        "Documentation.LongDescription": "Modifică informaţiile despre fusul orar din valoarea datetimezone <code>dateTimeZone</code> la noile informaţii despre fusul orar furnizate de <code>timezoneHours</code> şi, opţional, <code>timezoneMinutes</code>.\r\n    Dacă <code>dateTimeZone</code> nu conţine o componentă timezone, apare o excepţie.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Modificaţi informaţiile despre fusul orar pentru #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) la 8 ore.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Modificaţi informaţiile despre fusul orar pentru #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) la -30 de minute.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Accesează o valoare după nume într-un fişier mashup încorporat.",
        "Documentation.LongDescription": "Accesează o valoare după nume într-un fişier mashup încorporat.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Creează o funcție cu o semnătură de parametru specific peste o funcție care acceptă un singur argument listă",
        "Documentation.LongDescription": "Preia o funcție unară <code>function</code> și creează o nouă funcție cu tipul <code>functionType</code> care construiește o listă din argumentele sale și o transmite la <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Convertește List.Sum într-o funcție cu două argumente, ale cărei argumente sunt adunate",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Convertește o funcție transformând o listă într-o funcție cu două argumente",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Invocă funcţia dată",
        "Documentation.LongDescription": "Invocă funcţia dată utilizând lista de argumente specificată şi returnează rezultatul.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Invocă Record.FieldNames cu un argument [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Invocă funcția dată după expirarea duratei specificate.",
        "Documentation.LongDescription": "Returnează rezultatul invocării <code>function</code> după ce trece durata <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Creează o funcție scalară peste o funcție vectorială, procesând în loturi mai multe invocări.",
        "Documentation.LongDescription": "<p>Returnează o funcție scalară de tip <code>scalarFunctionType</code> care invocă <code>vectorFunction</code> cu un singur rând de argumente și returnează rezultatul său unic. În plus, când funcția scalară este aplicată repetat pentru fiecare rând al unui tabel de intrări, precum cel din Table.AddColumn, <code>vectorFunction</code> se va aplica o singură dată pentru toate datele de intrare.</p>\r\n <p><code>vectorFunction</code> va primi un tabel ale cărui coloane se potrivesc ca nume și poziție cu parametrii <code>scalarFunctionType</code>. Fiecare rând din acest tabel conține argumentele pentru o apelare a funcției scalare, în timp ce coloanele corespund parametrilor <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> trebuie să returneze o listă de aceeași lungime cu tabelul de intrare, al cărei element din fiecare poziție trebuie să aibă același rezultat ca evaluarea funcției scalare pe rândul de intrare din aceeași poziție.</p>\r\n<p>Se așteaptă ca tabelul de intrare să fie transmis în flux, astfel că se așteaptă ca <code>vectorFunction</code> să-și transmită în flux rezultatul pe măsură ce sosesc intrările, lucrând cu un singur bloc de intrare la un moment dat. În special, <code>vectorFunction</code> nu trebuie să enumere tabelul său de intrări de mai multe ori.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Creează o înregistrare care reprezintă un punct geografic pornind de la părți.",
        "Documentation.LongDescription": "Creează o înregistrare care reprezintă un punct geografic pornind de la componentele sale constitutive, cum ar fi longitudinea, latitudinea și, dacă sunt prezente, altitudinea (Z) și măsura (M). Un identificator opțional de referință spațială (SRID) poate fi specificat dacă este diferit de valoarea implicită (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Creează o înregistrare care reprezintă un punct geometric, pornind de la părți.",
        "Documentation.LongDescription": "Creează o înregistrare care reprezintă un punct geografic din părțile sale constitutive, cum ar fi coordonata X, coordonata Y și, dacă sunt prezente, coordonata Z și măsura (M). Un identificator opțional de referință spațială (SRID) poate fi specificat dacă este diferit de valoarea implicită (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Creează o identitate.",
        "Documentation.LongDescription": "Creează o identitate.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Determină dacă o identitate este membra unei colecții de identități.",
        "Documentation.LongDescription": "Determină dacă o identitate este membra unei colecții de identități.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Returnează o listă comprimată cu toate elementele decalajului numerotate cu numere impare dintr-o listă.",
        "Documentation.LongDescription": "Returnează o listă comprimată cu toate elementele decalajului numerotate cu numere impare dintr-o listă. Alternează între preluarea şi ignorarea valorilor din lista <code>list</code> în funcţie de parametri.\r\n    <ul>\r\n    <li><code>count</code>: Specifică numărul de valori care sunt ignorate de fiecare dată.</li>\r\n    <li><code>repeatInterval</code>: Un interval de repetare opţional pentru a indica numărul de valori adăugate între valorile ignorate.</li>\r\n    <li><code>offset</code>: Un parametru de decalaj al opţiunilor pentru a începe ignorarea valorilor la decalajul iniţial.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de la {1..10} care ignoră primul număr.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Creați o listă de la {1..10} care ignoră fiecare al doilea număr.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Creaţi o listă de la {1..10} care începe de la 1 şi ignoră fiecare al doilea număr.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Creați o listă de la {1..10} care începe de la 1, ignoră o valoare, păstrează două valori și așa mai departe.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Indică dacă lista conţine valoarea.",
        "Documentation.LongDescription": "Indică dacă lista <code>list</code> conține valoarea <code>value</code>.\r\n    Returnează true dacă valoarea este găsită în listă; în caz contrar, returnează false. O valoare opțională criteriu de ecuație, <code>equationCriteria</code>, poate fi specificată pentru a controla testarea egalității. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi dacă lista {1, 2, 3, 4, 5} conţine 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Aflaţi dacă lista {1, 2, 3, 4, 5} conţine 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Indică dacă o listă include toate valorile în altă listă.",
        "Documentation.LongDescription": "Indică dacă lista <code>list</code> include toate valorile în altă listă, <code>values</code>.\r\n    Returnează true dacă valoarea este găsită în listă; în caz contrar, returnează false. O valoare opţională pentru criteriile ecuaţiei, <code>equationCriteria</code>, poate fi specificată pentru a controla testarea egalităţii. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi dacă lista {1, 2, 3, 4, 5} conţine 3 şi 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Aflaţi dacă lista {1, 2, 3, 4, 5} conţine 5 şi 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Indică dacă o listă include oricare dintre valori în altă listă.",
        "Documentation.LongDescription": "Indică dacă lista <code>list</code> include oricare dintre valori în altă listă, <code>values</code>.\r\n        Returnează true dacă valoarea este găsită în listă; în caz contrar, returnează false. O valoare opţională pentru criteriile ecuaţiei, <code>equationCriteria</code>, poate fi specificată pentru a controla testarea egalităţii. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi dacă lista {1, 2, 3, 4, 5} conţine 3 sau 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Aflaţi dacă lista {1, 2, 3, 4, 5} conţine 6 sau 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Returnează covarianţa dintre cele două liste de numere.",
        "Documentation.LongDescription": "Returnează covarianţa dintre două liste, <code>numberList1</code> şi <code>numberList2</code>. <code>numberList1</code> şi <code>numberList2</code> trebuie să conţină acelaşi număr de valori <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Calculaţi covarianţa dintre două liste.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Returnează diferenţa dintre cele două liste date.",
        "Documentation.LongDescription": "Returnează elementele din lista <code>list1</code> care nu apar în lista <code>list2</code>. Sunt acceptate valori duplicat. \r\n    Poate fi specificată o valoare opțională criteriu de ecuație, <code>equationCriteria</code>, pentru a controla testarea egalității. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiți elementele din lista {1, 2, 3, 4, 5} care nu apar în {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Găsiţi elementele din lista {1, 2} care nu apar în {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Returnează o listă de valori (inclusiv câmpurile pentru înregistrare) care conţin textul specificat.",
        "Documentation.LongDescription": "Returnează o listă de valori din lista <code>list</code> ce conţin valoarea <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi valorile text din lista {\"a\", \"b\", \"ab\"} care se potrivesc cu „a”. ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Returnează primul set de elemente din listă specificând numărul de elemente de returnat sau o condiţie de calificare.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Dacă se specifică un număr, se returnează maximum numărul de elemente respectiv. </li>\r\n  <li>Dacă se specifică o condiție, sunt returnate toate elementele care îndeplinesc inițial condiția. Odată ce un element nu îndeplinește condiția, nu mai sunt luate în considerare elementele ulterioare. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi valorile iniţiale din lista {3, 4, 5, -1, 7, 8, 2} care sunt mai mari decât 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Returnează true dacă funcţia de condiţionare este îndeplinită de toate valorile din listă.",
        "Documentation.LongDescription": "Returnează <code>true</code> dacă funcţia de condiţionare, <code>condition</code>, este îndeplinită de toate valorile din lista <code>list</code>; în caz contrar, returnează <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă toate valorile din lista {11, 12, 13} sunt mai mari decât 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Determinaţi dacă toate valorile din lista {1, 2, 3} sunt mai mari decât 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Returnează true dacă funcţia de condiţionare este îndeplinită de orice valoare.",
        "Documentation.LongDescription": "Returnează <code>true</code> dacă funcţia de condiţionare, <code>condition</code>, este îndeplinită de oricare dintre valorile din lista <code>list</code>; în caz contrar, returnează <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi dacă oricare dintre valorile din lista {9, 10, 11} este mai mare decât 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Aflaţi dacă oricare dintre valorile din lista {1, 2, 3} este mai mare decât 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Returnează valorile maxime din listă. Numărul de valori de returnat sau condiția de filtrare trebuie să fie specificate.",
        "Documentation.LongDescription": "Returnează valoarea sau valorile maxime din listă, <code>list</code>.\r\n    După sortarea rândurilor, se pot specifica parametrii opționali pentru a filtra ulterior rezultatul. Parametrul opțional, <code>countOrCondition</code>, specifică numărul de valori de returnat sau o condiție de filtrare. Parametrul opțional, <code>comparisonCriteria</code>, specifică modul de comparare a valorilor din listă.\r\n <ul>\r\n        <li> <code>list</code>: lista de valori.</li>\r\n        <li> <code>countOrCondition</code>: dacă se specifică un număr, este returnată o listă de maximum <code>countOrCondition</code> elemente în ordine crescătoare. Dacă se specifică o condiție, este returnată o listă de elemente care, inițial, îndeplinesc condiția. Odată ce un element nu îndeplinește condiția, nu mai sunt luate în considerare elementele ulterioare.</li>\r\n<li><code>comparisonCriteria</code>: <i>[opțional]</i> o valoare <code>comparisonCriteria</code> opțională poate fi specificată pentru a determina modul de comparare a elementelor din listă. Dacă acest parametru este nul, atunci se utilizează funcția de comparare implicită.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Returnează valorile minime din listă. Numărul de valori de returnat sau condiția de filtrare poate fi specificată.",
        "Documentation.LongDescription": "Returnează valoarea sau valorile minime din listă, <code>list</code>.\r\n    Parametrul, <code>countOrCondition</code>, specifică numărul de valori de returnat sau o condiție de filtrare. Parametrul opțional, <code>comparisonCriteria</code>, specifică modul de comparare a valorilor din listă.\r\n <ul>\r\n        <li> <code>list</code>: lista de valori.</li>\r\n        <li> <code>countOrCondition</code>: dacă se specifică un număr, este returnată o listă de maximum <code>countOrCondition</code> elemente în ordine crescătoare. Dacă se specifică o condiție, este returnată o listă de elemente care, inițial, îndeplinesc condiția. Odată ce un element nu îndeplinește condiția, nu mai sunt luate în considerare elementele ulterioare. Dacă acest parametru este nul, se returnează cea mai mică valoare unică din listă.</li>\r\n<li><code>comparisonCriteria</code>: <i>[opțional]</i> o valoare <code>comparisonCriteria</code> opțională poate fi specificată pentru a determina modul de comparare a elementelor din listă. Dacă acest parametru este nul, atunci se utilizează funcția de comparare implicită.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi cele mai mici 5 valori din lista <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Returnează o listă de numere dintr-o valoare iniţială, un număr şi o valoare opţională a incrementului.",
        "Documentation.LongDescription": "Returnează o listă de numere dintr-o valoare iniţială, un număr şi o valoare opţională a incrementului. Valoarea implicită a incrementului este 1.\r\n<ul>\r\n   <li><code>start</code>: Valoarea iniţială din listă.</li>\r\n   <li><code>count</code>: Numărul de valori de creat.</li>\r\n   <li><code>increment</code>: <i>[Opţional]</i> Valoarea cu care să creşteţi. Dacă este omisă, valorile sunt crescute cu 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Generaţi o listă de 10 numere consecutive începând cu 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Generaţi o listă de 10 numere începând cu 1, cu un increment de 2 pentru fiecare număr ulterior.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Returnează una sau mai multe percentile eșantion care corespund probabilităților date.",
        "Documentation.LongDescription": "Returnează una sau mai multe percentile eșantion din lista <code>list</code>. Dacă valoarea <code>percentiles</code> este un număr între 0,0 și 1,0, va fi tratată ca percentilă, iar rezultatul va fi\r\n    o singură valoare care corespunde acestei probabilități. Dacă valoarea <code>percentiles</code> este o listă de numere cu valori între 0,0 și 1,0, rezultatul va fi o listă de percentile\r\n    care corespund probabilității de intrare. Opțiunea PercentileMode din <code>options</code> poate fi utilizată de utilizatori avansați pentru a alege o metodă de interpolare mai specifică, dar nu este recomandată pentru majoritatea utilizărilor.\r\n    Simbolurile predefinite <code>PercentileMode.ExcelInc</code> și <code>PercentileMode.ExcelExc</code> se potrivesc cu metodele de interpolare utilizate de funcțiile Excel\r\n    <code>PERCENTILE.INC</code> și <code>PERCENTILE.EXC</code>. Comportamentul implicit se potrivește cu <code>PercentileMode.ExcelInc</code>. Simbolurile\r\n    <code>PercentileMode.SqlCont</code> și <code>PercentileMode.SqlDisc</code> corespund comportamentului SQL Server pentru <code>PERCENTILE_CONT</code> și, respectiv, \r\n    <code>PERCENTILE_DISC</code>.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Găsiți prima cuartilă din lista <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Găsiți cuartilele listei <code> {5, 3, 1, 7, 9} </code> utilizând o metodă de interpolare care se potrivește cu <code>PERCENTILE.EXC</code> din Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Returnează decalajele unei valori dintr-o listă.",
        "Documentation.LongDescription": "Returnează decalajul la care valoarea <code>value</code> apare în lista <code>list</code>. Returnează -1 dacă valoarea nu apare.\r\n    Poate fi specificat un parametru de ocurență opțional <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: numărul maxim de ocurențe de raportat.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi poziţia din lista {1, 2, 3} în care apare valoarea 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Returnează primul decalaj al unei valori dintr-o listă.",
        "Documentation.LongDescription": "Returnează decalajul din lista <code>list</code> al primei ocurențe a unei valori dintr-o listă <code>values</code>. Returnează -1 dacă nu se găsește nicio ocurență.\r\n    Poate fi specificat un parametru de ocurență opțional <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: numărul maxim de ocurențe care pot fi returnate.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi prima poziţie din lista {1, 2, 3} în care apare valoarea 2 sau 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Returnează un subset al listei începând de la un decalaj.",
        "Documentation.LongDescription": "Returnează un subset al listei începând de la decalajul <code>list</code>. Un parametru opţional, <code>offset</code>, setează numărul maxim de elemente din subset.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi subsetul începând de la decalajul 6 al listei de numere de la 1 la 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Găsiţi subsetul de lungime 2 de la decalajul 6, din lista de numere de la 1 la 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Elimină elementele din list1 care sunt prezente în listă.",
        "Documentation.LongDescription": "Elimină toate ocurenţele valorilor date în <code>list2</code> din <code>list1</code>. Dacă valorile din <code>list2</code> nu există în <code>list1</code>, se returnează lista originală.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi elementele din lista {2, 4, 6} din lista {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Elimină toate ocurenţele valorilor de intrare.",
        "Documentation.LongDescription": "Elimină toate ocurenţele valorilor specificate în <code>list2</code> din lista <code>list1</code>. Dacă valorile din <code>list2</code> nu există în <code>list1</code>, se returnează lista originală.\r\n    O valoare opţională pentru criteriile ecuaţiei, <code>equationCriteria</code>, poate fi specificată pentru a controla testarea egalităţii. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de la {1, 2, 3, 4, 5, 5} fără {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Elimină numărul de valori începând de la poziţia specificată.",
        "Documentation.LongDescription": "Elimină valorile <code>count</code> din <code>list</code> începând de la poziţia specificată, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi 3 valori din lista {1, 2, 3, 4, -6, -2, -1, 5} începând de la indexul 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Returnează o listă care reprezintă repetiţiile numărului din lista originală.",
        "Documentation.LongDescription": "Returnează o listă care reprezintă repetiţiile <code>count</code> din lista originală, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă care are {1, 2} repetate de 3 ori.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Aplică fiecare înlocuire de { old, new }.",
        "Documentation.LongDescription": "Efectuează înlocuirile specificate în lista <code>list</code>. O operaţie de înlocuire <code>replacements</code> este alcătuită dintr-o listă de două valori, valoarea veche şi valoarea nouă, furnizate într-o listă.\r\n    O valoare opţională pentru criteriile ecuaţiei, <code>equationCriteria</code>, poate fi specificată pentru a controla testarea egalităţii.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de la {1, 2, 3, 4, 5} care înlocuieşte valoarea 5 cu -5 şi valoarea 1 cu -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Returnează o listă de valori care se potrivesc condiţiei.",
        "Documentation.LongDescription": "Returnează o listă de valori din lista <code>list</code>, care se potrivesc condiţiei de selectare <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi valorile din lista {1, -3, 4, 9, -2} care sunt mai mari decât 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Scindează lista specificată într-o listă de liste, utilizând dimensiunea de pagină specificată.",
        "Documentation.LongDescription": "Scindează <code>list</code> într-o listă de liste în care primul element al listei de ieșire este o listă care conține primele <code>pageSize</code> elemente din\r\n    lista sursă, următorul element al listei de ieșire este o listă care conține următoarele <code>pageSize</code> elemente din lista sursă și așa mai departe.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Returnează o nouă listă de valori calculate din această listă.",
        "Documentation.LongDescription": "Returnează o nouă listă de valori prin aplicarea funcţiei de transformare <code>transform</code> la lista, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Adăugaţi 1 la fiecare valoare din lista {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Returnează arctangenta împărţirii a două numere.",
        "Documentation.LongDescription": "Returnează arctangenta împărţirii a două numere, <code>y</code> şi <code>x</code>. Împărţirea va fi construită ca <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Returnează rezultatul efectuării unei operaţiuni „And” la nivel de bit între cele două date introduse.",
        "Documentation.LongDescription": "Returnează rezultatul efectuării operaţiunii „And” la nivel de bit între <code>number1</code> şi <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Returnează rezultatul efectuării operaţiunii „Or” la nivel de bit între cele două date introduse.",
        "Documentation.LongDescription": "Returnează rezultatul efectuării operaţiunii „Or” la nivel de bit între <code>number1</code> şi <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Deplasează setul de biţi spre stânga.",
        "Documentation.LongDescription": "Returnează rezultatul efectuării unei deplasări spre stânga la nivel de bit pe <code>number1</code>, cu numărul specificat de biţi <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Deplasează setul de biţi spre dreapta.",
        "Documentation.LongDescription": "Returnează rezultatul efectuării unei deplasări spre dreapta la nivel de bit pe <code>number1</code>, cu numărul specificat de biţi <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Returnează rezultatul efectuării operaţiunii „XOR” (Exclusive-OR) la nivel de bit între cele două date introduse.",
        "Documentation.LongDescription": "Returnează rezultatul efectuării operaţiunii „XOR” (Exclusive-OR) la nivel de bit între <code>number1</code> şi <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Returnează numărul combinaţiilor unice.",
        "Documentation.LongDescription": "Returnează numărul combinaţiilor unice dintr-o listă de elemente, <code>setSize</code> cu dimensiunea specificată a combinaţiei <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Numărul de elemente din listă.</li>\r\n    <li><code>combinationSize</code>: Numărul de elemente din fiecare combinaţie.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi numărul de combinaţii dintr-un număr total de 5 elemente când fiecare combinaţie este un grup de 3.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Împarte două numere şi returnează partea de număr întreg din rezultat.",
        "Documentation.LongDescription": "Returnează partea de număr întreg din rezultatul obținut prin împărțirea unui număr, <code>number1</code>, la alt număr, <code>number2</code>. \r\n    Dacă <code>number1</code> sau <code>number2</code> sunt nule, <code>Number.IntegerDivide</code> returnează nul.\r\n      <ul>\r\n        <li><code>number1</code>: deîmpărțitul.</li>\r\n        <li><code>number2</code>: împărțitorul.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Împărţiţi 6 la 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Împărţiţi 8,3 la 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Numărul întreg împarte două numere şi returnează restul.",
        "Documentation.LongDescription": "Returnează restul care rezultă din împărțirea întreagă a <code>number</code> la <code>divisor</code>.\r\n    Dacă <code>number</code> sau <code>divisor</code> este nul, <code>Number.Mod</code> returnează nul.\r\n      <ul>\r\n        <li><code>number</code>: deîmpărțitul.</li>\r\n        <li><code>divisor</code>: împărțitorul.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi restul când împărţiţi 5 la 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Returnează numărul de permutări.",
        "Documentation.LongDescription": "Returnează numărul de permutări care pot fi generate de la un număr de elemente, <code>setSize</code>, cu o dimensiune de permutare specificată, <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi numărul de permutări dintr-un număr total de 5 elemente în grupuri de 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Ridică un număr la puterea dată.",
        "Documentation.LongDescription": "Returnează rezultatul ridicării <code>number</code> la puterea <code>power</code>. \r\n    Dacă <code>number</code> sau <code>power</code> este nul, <code>Number.Power</code> returnează nul.\r\n      <ul>\r\n        <li><code>number</code>: baza.</li>\r\n        <li><code>power</code>: exponentul.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi valoarea 5 ridicată la puterea 3 (5 la cub).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Returnează un număr aleatoriu cuprins între două numere.",
        "Documentation.LongDescription": "Returnează un număr aleatoriu cuprins între <code>bottom</code> şi <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi un număr aleatoriu cuprins între 1 şi 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Returnează valoarea câmpului specificat într-o înregistrare.",
        "Documentation.LongDescription": "Returnează valoarea <code>field</code> specificată în <code>record</code>. Dacă nu se găseşte câmpul, apare o excepţie.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Găsiți valoarea câmpului „IDClient” în înregistrare.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Returnează valoarea câmpului specificat într-o înregistrare sau valoarea implicită dacă nu se găseşte câmpul.",
        "Documentation.LongDescription": "Returnează valoarea câmpului specificat <code>field</code> din înregistrarea <code>record</code>. Dacă nu se găseşte câmpul, se returnează <code>defaultValue</code> opţional.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Găsiți valoarea câmpului „Telefon” din înregistrare sau returnați valoarea nulă dacă nu există.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Găsiți valoarea câmpului „Telefon” din înregistrare sau returnați valoarea implicită dacă nu există.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Returnează o înregistrare dintr-o listă de valori pentru câmp şi de un set de câmpuri.",
        "Documentation.LongDescription": "Returnează o înregistrare din <code>list</code> de valori pentru câmp şi de un set de câmpuri.  <code>fields</code> se poate specifica fie printr-o listă de valori text, fie printr-un tip de înregistrare.  Apare o eroare în cazul în care câmpurile nu sunt unice.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Generaţi o înregistrare dintr-o listă de valori pentru câmp şi o listă de nume de câmpuri.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Generaţi o înregistrare dintr-o listă de valori pentru câmp şi un tip de înregistrare.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Indică dacă înregistrarea conţine câmpuri specificate.",
        "Documentation.LongDescription": "Indică dacă înregistrarea <code>record</code> are câmpurile specificate în <code>fields</code>, returnând o valoare logică (true sau false).\r\n    Mai multe valori pentru câmp pot fi specificate utilizând o listă.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificați dacă înregistrarea conține câmpul „IDClient”.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Verificați dacă înregistrarea conține câmpul „IDClient” și „Adresă”.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Elimină câmpurile specificate din înregistrarea de intrare.",
        "Documentation.LongDescription": "Returnează o înregistrare care elimină toate câmpurile specificate în lista <code>fields</code> din datele introduse <code>record</code>. În cazul în care câmpul specificat nu există, apare o excepţie.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Eliminați câmpul „Preț” din înregistrare.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Eliminați câmpurile „Preț” și „Element” din înregistrare.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Aplică redenumirile dintr-o listă în forma { old, new }.",
        "Documentation.LongDescription": "Returnează o înregistrare după redenumirea câmpurilor din datele introduse <code>record</code> în nume de câmpuri noi specificate în lista <code>renames</code>. Pentru mai multe redenumiri, se poate utiliza o listă imbricată ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Redenumiți câmpul „PrețUnitar” în „Preț” din înregistrare.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Redenumiți câmpurile „PrețUnitar” în „Preț” și „NumComandă” în „IdComandă” din înregistrare.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Reordonează câmpurile specificate în ordinea nouă.",
        "Documentation.LongDescription": "Returnează o înregistrare după reordonarea câmpurilor din <code>record</code> în ordinea câmpurilor specificate în lista <code>fieldOrder</code>. Valorile pentru câmp sunt păstrate, iar câmpurile nelistate în <code>fieldOrder</code> sunt lăsate în poziţia originală.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Reordonați unele dintre câmpurile din înregistrare.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Returnează o înregistrare care conţine numai câmpurile specificate.",
        "Documentation.LongDescription": "Returnează o înregistrare ce include numai câmpurile specificate în lista <code>fields</code> din datele introduse <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Selectați câmpurile „Element” și „Preț” din înregistrare.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Returnează o înregistrare după aplicarea transformărilor specificate.",
        "Documentation.LongDescription": "Returnează o înregistrare după aplicarea transformărilor specificate în lista <code>transformOperations</code> la <code>record</code>.\r\n    Unul sau mai multe câmpuri pot fi transformate la un moment dat.\r\n      <div>În cazul transformării unui singur câmp, se așteaptă ca <code>transformOperations</code> să fie o listă cu două elemente. Primul element din <code>transformOperations</code> specifică un nume de câmp, iar al doilea element din <code>transformOperations</code> specifică funcția de utilizat pentru transformare. De exemplu, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>În cazul transformării mai multor câmpuri, se așteaptă ca <code>transformOperations</code> să fie o listă de liste, în care fiecare listă interioară este o pereche de nume de câmp și operațiune de transformare. De exemplu, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia câmpului „Preț” la un număr.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Efectuați conversia câmpurilor „IDComandă” și „Preț” la numere.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Returnează o funcție care scindează textul într-o listă de texte conform unei tranziții de la un tip de caractere la altul. Parametrii {0} și {1} pot fi o listă de caractere sau o funcție care ia un caracter și returnează true/false.",
        "Documentation.LongDescription": "Returnează o funcție care scindează textul într-o listă de texte conform unei tranziții de la un tip de caractere la altul. Parametrii <code>before</code> și <code>after</code> pot fi o listă de caractere sau o funcție care ia un caracter și returnează true/false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divizează intrarea de fiecare dată când o literă mare sau mică este urmată de o cifră.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Convertește interogarea SQL furnizată în cod M. Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Convertește interogarea <code>sql</code> furnizată în cod M, cu identificatorii disponibili definiți de <code>environment</code>. Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Returnează o coloană specificată de date din tabel ca listă.",
        "Documentation.LongDescription": "Returnează coloana de date specificată de <code>column</code> din tabelul <code>table</code> ca listă.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Returnează valorile din coloana [Nume] din tabel.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Returnează o listă cu numele de coloane ce corespund tipurilor specificate.",
        "Documentation.LongDescription": "Returnează o listă cu numele de coloane din tabelul <code>table</code> ce corespund tipurilor specificate în <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Returnează numele de coloane de tipul Number.Type din tabel.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Indică dacă înregistrarea specificată apare ca rând în tabel.",
        "Documentation.LongDescription": "Indică dacă înregistrarea specificată, <code>row</code>, apare ca rând în <code>table</code>.\r\n    Un parametru opţional <code>equationCriteria</code> poate fi specificat pentru a controla comparaţia dintre rândurile tabelului.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă tabelul conține rândul.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinați dacă tabelul conține rândul.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinați dacă tabelul conține rândul, comparând numai coloana [Nume].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Indică dacă toate înregistrările specificate apar ca rânduri în tabel.",
        "Documentation.LongDescription": "Indică dacă toate înregistrările specificate în lista de înregistrări <code>rows</code> apar ca rânduri în <code>table</code>.\r\n    Un parametru opţional <code>equationCriteria</code> poate fi specificat pentru a controla comparaţia dintre rândurile tabelului.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă tabelul conține toate rândurile, comparând numai coloana [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinați dacă tabelul conține toate rândurile.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Indică dacă oricare dintre înregistrările specificate apar ca rânduri în tabel.",
        "Documentation.LongDescription": "Indică dacă oricare dintre înregistrările specificate în lista de înregistrări <code>rows</code> apar ca rânduri în <code>table</code>.\r\n    Un parametru opţional <code>equationCriteria</code> poate fi specificat pentru a controla comparaţia dintre rândurile tabelului.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă tabelul <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> conţine rândurile <code>[a = 1, b = 2]</code> sau <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinaţi dacă tabelul <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> conţine rândurile <code>[a = 1, b = 3]</code> sau <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinaţi dacă tabelul <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> conţine rândurile <code>[a = 1, b = 3]</code> sau <code>[a = 3, b = 5]</code> comparând doar coloana [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Indică dacă tabelul conține coloanele specificate.",
        "Documentation.LongDescription": "Indică dacă <code>table</code> conține coloanele specificate, <code>columns</code>. Returnează <code>True</code> dacă tabelul conține coloanele; în caz contrar, returnează <code>False</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă tabelul conține coloana [Nume].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Aflați dacă tabelul conține coloana [Nume] și [NumărDeTelefon].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Indică dacă toate rândurile din tabel îndeplinesc condiţia dată.",
        "Documentation.LongDescription": "Indică dacă toate rândurile din <code>table</code> îndeplinesc <code>condition</code> dată. Returnează <code>true</code> dacă toate rândurile corespund; în caz contrar, returnează <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă toate valorile pentru rând din coloana [a] sunt pare în tabel.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Aflaţi dacă toate valorile pentru rând sunt [a = 1, b = 2], în tabelul <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Indică dacă toate rândurile din tabel îndeplinesc condiţia dată.",
        "Documentation.LongDescription": "Indică dacă toate rândurile din <code>table</code> îndeplinesc <code>condition</code> dată. Returnează <code>true</code> dacă toate rândurile corespund; în caz contrar, returnează <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă oricare dintre valorile pentru rând din coloana [a] sunt pare în tabelul <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinaţi dacă oricare dintre valorile pentru rând sunt [a = 1, b = 2], în tabelul <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Returnează cel mai mare rând sau cea mai mare valoare implicită utilizând criteriile date.",
        "Documentation.LongDescription": "Returnează cel mai mare rând din <code>table</code>, ţinând cont de <code>comparisonCriteria</code>. Dacă tabelul este necompletat, se returnează valoarea <code>default</code> opţională. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi rândul cu cea mai mare valoare din coloana [a] din tabelul <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Găsiţi rândul cu cea mai mare valoare din coloana [a] din tabelul <code>({})</code>. Returnaţi -1 dacă este necompletat.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Returnează cel mai mic rând sau cea mai mică valoare implicită utilizând criteriile date.",
        "Documentation.LongDescription": "Returnează cel mai mic rând din <code>table</code>, ţinând cont de <code>comparisonCriteria</code>. Dacă tabelul este necompletat, se returnează valoarea <code>default</code> opţională.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Găsiți rândul cu cea mai mică valoare din coloana [a] din tabel.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Găsiți rândul cu cea mai mică valoare din coloana [a] din tabel. Returnați -1 dacă este necompletat.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Returnează poziţia sau poziţiile rândului în cadrul tabelului.",
        "Documentation.LongDescription": "Returnează poziția de rând a primei ocurențe a <code>row</code> în <code>table</code> specificat. Returnează -1 dacă nu se găsește nicio ocurență.\r\n    <ul>\r\n       <li><code>table</code>: tabelul de intrare.</li>\r\n       <li><code>row</code>: rândul din tabelul pentru care trebuie găsită poziția.</li>\r\n       <li><code>occurrence</code>: <i>[opțional]</i> specifică ce ocurențe ale rândului să se returneze.</li>\r\n       <li><code>equationCriteria</code>: <i>[opțional]</i> controlează comparația între rândurile tabelului.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi poziţia primei ocurenţe de [a = 2, b = 4] în tabelul <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Găsiţi poziţia celei de-a doua ocurenţe de [a = 2, b = 4] în tabelul <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Găsiţi poziţia tuturor ocurenţelor de [a = 2, b = 4] din tabelul <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Returnează poziţia sau poziţiile oricăruia dintre rândurile specificate în cadrul tabelului.",
        "Documentation.LongDescription": "Returnează poziția sau pozițiile de rând din <code>table</code> ale primei ocurențe alei listei de <code>rows</code>. Returnează -1 dacă nu se găsește nicio ocurență.\r\n    <ul>\r\n    <li><code>table</code>: tabelul de intrare.</li>\r\n       <li><code>rows</code>: lista de rânduri din tabelul pentru care trebuie găsite pozițiile.</li>\r\n       <li><code>occurrence</code>: <i>[opțional]</i> specifică ce ocurențe ale rândului să se returneze.</li>\r\n       <li><code>equationCriteria</code>: <i>[opțional]</i> controlează comparația între rândurile tabelului.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi poziţia primei ocurenţe de [a = 2, b = 4] sau [a = 6, b = 8] în tabelul <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Găsiţi poziţia tuturor ocurenţelor de [a = 2, b = 4] sau [a = 6, b = 8] din tabelul <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Scindează tabelul specificat într-o listă de tabele, utilizând dimensiunea de pagină specificată.",
        "Documentation.LongDescription": "Scindează <code>table</code> într-o listă de tabele în care primul element al listei este un tabel care conține primele <code>pageSize</code> rânduri din\r\n    tabelul sursă, următorul element al listei este un tabel care conține următoarele <code>pageSize</code> rânduri din tabelul sursă și așa mai departe.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Scindează un tabel de cinci înregistrări în tabele cu câte două înregistrări fiecare.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Returnează o listă care conține primele rânduri de numere specificate și rândurile rămase.",
        "Documentation.LongDescription": "Returnează o listă care conține două tabele: un tabel cu primele N rânduri de <code>table</code> (după cum este specificat de <code>count</code>) și un tabel care conține rândurile rămase de <code>table</code>.\r\n\r\nDacă tabelele din lista rezultată sunt enumerate exact o singură dată și în ordine, funcția va enumera <code>table</code> o singură dată.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Returnați primele două rânduri ale tabelului și rândurile rămase.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Transformă rândurile din tabel utilizând funcţia de transformare specificată.",
        "Documentation.LongDescription": "Creează o <code>listă</code> aplicând operațiunea <code>transform</code> la fiecare linie din <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformați rândurile unui tabel într-o listă de numere.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Transformați rândurile unui tabel numeric în înregistrări textuale.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Returnează porțiunea din <code>text</code> de după <code>delimiter</code> specificat.\r\n    O valoare numerică opțională <code>index</code> indică ce apariție a instanței <code>delimiter</code> trebuie luată în calcul.\r\n    O listă opțională <code>index</code> indică ce apariție a instanței <code>delimiter</code> trebuie luată în calcul și dacă indexarea trebuie realizată de la începutul sau de la sfârșitul intrării.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obțineți porțiunea din „111-222-333” de după (prima) cratimă.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Obțineți porțiunea din „111-222-333” de după a doua cratimă.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Obțineți porțiunea din „111-222-333” de după a doua cratimă de la sfârșit.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Returnează caracterul la poziţia specificată.",
        "Documentation.LongDescription": "Returnează caracterul din valoarea text, <code>text</code> în poziţia <code>index</code>. Primul caracter din text este în poziţia 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi caracterul din poziţia 4 în şirul „Hello, World”.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Returnează porțiunea din <code>text</code> de dinainte de <code>delimiter</code> specificat.\r\n    O valoare numerică opțională <code>index</code> indică ce apariție a instanței <code>delimiter</code> trebuie luată în calcul.\r\n    O listă opțională <code>index</code> indică ce apariție a instanței <code>delimiter</code> trebuie luată în calcul și dacă indexarea trebuie realizată de la începutul sau de la sfârșitul intrării.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obțineți porțiunea din „111-222-333” de dinainte de (prima) cratimă.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Obțineți porțiunea din „111-222-333” de dinainte de a doua cratimă.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Obțineți porțiunea din „111-222-333” de dinainte de a doua cratimă de la sfârșit.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Returnează dacă textul conţine un subşir.",
        "Documentation.LongDescription": "Detectează dacă <code>text</code> conține valoarea <code>substring</code>. Returnează true dacă valoarea este găsită. Această funcție nu acceptă caractere wildcard sau expresii regulate.\r\n      <br>\r\n      <br>\r\n      Argumentul opțional <code>comparer</code> poate fi utilizat pentru a specifica comparații care nu sunt sensibile la litere mari și mici sau care țin cont de cultură și de setările regionale.\r\n      Următoarele funcții de comparare încorporate sunt disponibile în limbajul formulelor:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Utilizat pentru a efectua o comparație ordinală sensibilă la litere mari și mici</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Utilizat pentru a efectua o comparație ordinală care nu este sensibilă la litere mari și mici</li>\r\n        <li> <code>Comparer.FromCulture</code>: Utilizată pentru a efectua o comparație care ține cont de cultură</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi dacă textul „Hello World” conţine „Hello”.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Aflaţi dacă textul „Hello World” conţine „hello”.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Aflați dacă textul „Hello World” conține „hello”, utilizând o funcție de comparare care nu diferențiază între litere mari și mici.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Returnează ultimele caractere ale textului.",
        "Documentation.LongDescription": "Returnează o valoare <code>text</code> care reprezintă ultimele <code>count</code> caractere din valoarea <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi ultimele 5 caractere ale textului „Hello, World”.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Indică dacă textul se termină cu valoarea specificată.",
        "Documentation.LongDescription": "Indică dacă textul dat, <code>text</code>, se termină cu valoarea specificată, <code>substring</code>. Indicația este sensibilă la litere mari și mici.\r\n\r\n      <div>\r\n        <code>comparer</code> este o funcție de comparare <code>Comparer</code> care este utilizată pentru a controla comparația. Funcțiile de comparare pot fi utilizate pentru a furniza comparații care nu țin cont de diferența între literele mari sau mici ori care țin cont de cultură și de setările regionale.\r\n      </div>\r\n      <div>\r\n        Următoarele funcții de comparare predefinite sunt disponibile în limbajul pentru formule:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Utilizată pentru a efectua o comparație ordinală exactă</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Utilizată pentru a efectua o comparație ordinală exactă care nu este sensibilă la litere mari și mici</li>\r\n        <li> <code>Comparer.FromCulture</code>: Utilizată pentru a efectua o comparație care ține cont de cultură</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Verificaţi dacă „Hello, World” se termină cu „world”.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Verificaţi dacă „Hello, World” se termină cu „World”.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Returnează textul formatat dintr-un șir de format și argumente.",
        "Documentation.LongDescription": "Returnează text formatat care este creat prin aplicarea <code>arguments</code> dintr-o listă sau dintr-o înregistrare la un șir de format <code>formatString</code>. Un cod <code>culture</code> opțional poate fi de asemenea furnizat (de exemplu, „ro-RO”).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Formatați o listă de numere.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Formatați tipuri de date diferite dintr-o înregistrare, în conformitate cu cultura Română - România.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Returnează un subșir până la o lungime specifică.",
        "Documentation.LongDescription": "Returnează <code>count</code> caractere sau până la sfârșitul <code>text</code>; la decalajul <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Găsiți subșirul din textul „Salut lume” care începe la indexul 6 și care are lungimea de 5 caractere.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Găsiți subșirul din textul „Salut lume” care începe la indexul 6 și până la sfârșit.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Returnează textul de o lungime specificată completând sfârşitul textului dat.",
        "Documentation.LongDescription": "Returnează o valoare <code>text</code> completată la lungimea <code>count</code> prin inserarea de spații la sfârșitul valorii text <code>text</code>.\r\n    Poate fi utilizat un caracter opțional <code>character</code> pentru a specifica caracterul utilizat pentru completare. Caracterul implicit pentru completare este un spațiu.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Completaţi sfârşitul unei valori text, astfel încât aceasta să aibă 10 caractere.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Completaţi sfârşitul unei valori text cu „|”, astfel încât aceasta să aibă 10 caractere.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Returnează textul de o lungime specificată completând începutul textului dat.",
        "Documentation.LongDescription": "Returnează o valoare <code>text</code> completată la lungimea <code>count</code> prin inserarea de spații la începutul valorii text <code>text</code>.\r\n    Poate fi utilizat un caracter opțional <code>character</code> pentru a specifica caracterul utilizat pentru completare. Caracterul implicit pentru completare este un spațiu.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Completaţi începutul unei valori text, astfel încât aceasta să aibă 10 caractere.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Completaţi începutul unei valori text cu „|”, astfel încât aceasta să aibă 10 caractere.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Returnează prima poziţie a valorii (-1 dacă nu se găseşte).",
        "Documentation.LongDescription": "Returnează poziția de ocurență specificată a valorii text <code>substring</code> găsită în <code>text</code>.\r\n    Se poate utiliza un parametru opțional <code>occurrence</code> pentru a specifica poziția ocurență de returnat (prima ocurență în mod implicit).\r\n    Returnează -1 dacă nu s-a găsit <code>substring</code>.\r\n\r\n      <div>\r\n        <code>comparer</code> este o <code>Funcție de comparare</code> care este utilizată pentru a controla comparația. Funcțiile de comparare pot fi utilizate pentru a furniza comparații care nu țin cont de diferența între litere mari sau mici ori care țin cont de cultură și de setările regionale.\r\n      </div>\r\n      <div>\r\n        Următoarele funcții de comparare predefinite sunt disponibile în limbajul pentru formule:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Utilizat pentru a efectua o comparație ordinală exactă</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Utilizat pentru a efectua o comparație exactă care nu este sensibilă la litere mari și mici</li>\r\n        <li> <code>Comparer.FromCulture</code>: Utilizat pentru a efectua o comparație care ține cont de cultură</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi poziţia primei ocurenţe a textului „World” din textul „Hello, World! Hello, World!”.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Obțineți poziția ultimei ocurențe a textului „World” din „Hello, World! Hello, World!”.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Returnează prima poziţie în valoarea text a oricărui caracter listat (-1 dacă nu se găseşte).",
        "Documentation.LongDescription": "Returnează prima poziție a oricărui caracter din lista <code>characters</code> care este găsită în <code>text</code>.\n    Se poate utiliza un parametru opțional <code>occurrence</code> pentru a specifica ce poziție de apariție să se returneze.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Găsiți prima poziție „W” sau „H” în textul „Hello, World!”.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Găsiți toate pozițiile „W” sau „H” în textul „Hello, World!”.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Returnează un subşir găsit la decalaj.",
        "Documentation.LongDescription": "Returnează un subșir din textul <code>text</code> găsit la decalajul <code>offset</code>.\r\n    Un parametru opțional, <code>count</code>, poate fi inclus pentru a specifica numărul de caractere de returnat. Generează o eroare dacă nu sunt caractere suficiente.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi subşirul din textul „Hello World” care începe la indexul 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Găsiţi subşirul din textul „Hello World Hello” care începe la indexul 6 şi care are lungimea de 5 caractere.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Elimină toate ocurenţele caracterului dat sau ale listei de caractere din valoarea text a datelor introduse.",
        "Documentation.LongDescription": "Returnează o copie a valorii text <code>text</code> cu toate caracterele din <code>removeChars</code> eliminate.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi caracterele , şi ; din valoarea text.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Elimină un număr de caractere care începe la decalajul dat.",
        "Documentation.LongDescription": "Returnează o copie a valorii text <code>text</code>, cu toate caracterele de la poziția <code>offset</code> eliminate.\r\n    Poate fi utilizat un parametru opțional, <code>count</code>, pentru a specifica numărul de caractere de eliminat. Valoarea implicită a <code>count</code> este 1. Valorile pentru poziție încep de la 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi 1 caracter din valoarea text „ABEFC” la poziţia 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Eliminaţi două caractere din valoarea text „ABEFC” începând cu poziţia 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Returnează o valoare text compusă din textul de intrare repetat de un număr specificat de ori.",
        "Documentation.LongDescription": "Returnează o valoare text compusă din textul de intrare <code>text</code> repetat de <code>count</code> ori.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Repetaţi textul „a” de cinci ori.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Repetaţi textul „helloworld” de trei ori.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Selectează toate aparițiile caracterului dat sau ale listei de caractere din valoarea text de intrare.",
        "Documentation.LongDescription": "Returnează o copie a valorii text <code>text</code> cu toate caracterele care nu se află în <code>selectChars</code> eliminate.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Selectați toate caracterele din zona de „a” la „z” din valoarea text.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Divizează textul într-o listă de valori text în funcţie de un delimitator specificat.",
        "Documentation.LongDescription": "Returnează o listă de valori text care rezultă din divizarea unei valori text <code>text</code> în funcţie de delimitatorul specificat, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă din valoarea text delimitată de „|” „Name|Address|PhoneNumber”.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Returnează o listă de valori text, divizate după oricare dintre caracterele din delimitator.",
        "Documentation.LongDescription": "Returnează o listă de valori text care rezultă din divizarea unei valori text <code>text</code> în funcţie de orice caracter din delimitatorul specificat, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă din valoarea text „Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com”.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Returnează începutul textului.",
        "Documentation.LongDescription": "Returnează primele <code>count</code> caractere din <code>text</code> ca valoare text.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi primele 5 caractere din „Hello, World”.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Indică dacă textul începe cu o valoare specificată.",
        "Documentation.LongDescription": "Returnează true dacă valoarea text <code>text</code> începe cu valoarea text <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> O valoare <code>text</code> care urmează să fie căutată</li>\r\n        <li><code>substring</code>: <i></i> O valoare <code>text</code> care este subșirul de căutat în <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Opțional]</i> O funcție de comparare <code>Comparer</code> utilizată pentru controlul comparației. De exemplu, <code>Comparer.OrdinalIgnoreCase</code> poate fi utilizată pentru a efectua căutări care nu sunt sensibile la litere mari și mici</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> este o funcție de comparare <code>Comparer</code> care este utilizată pentru a controla comparația. Funcțiile de comparare pot fi utilizate pentru a furniza comparații care nu țin cont de diferența între literele mari sau mici ori care țin cont de cultură și de setările regionale.\r\n      </div>\r\n      <div>\r\n        Următoarele funcții de comparare predefinite sunt disponibile în limbajul pentru formule:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Utilizată pentru a efectua o comparație ordinală exactă</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Utilizată pentru a efectua o comparație ordinală exactă, care nu este sensibilă la litere mari și mici</li>\r\n        <li> <code>Comparer.FromCulture</code>: Utilizat pentru a efectua o comparație care ține cont de cultură</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Verificaţi dacă textul „Hello, World” începe cu textul „hello”.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Verificaţi dacă textul „Hello, World” începe cu textul „Hello”.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Returnează un tip care reprezintă funcţiile cu parametrul specific şi returnează restricţiile pentru tip.",
        "Documentation.LongDescription": "Creează un <code>tip de funcție</code> din <code>signature</code>, o înregistrare de <code>ReturnType</code> și <code>Parameters</code> și <code>min</code>, numărul minim de argumente necesare pentru a invoca funcția.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Creează tipul pentru o funcție care ia un parametru număr denumit X și returnează un număr.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Returnează un tip ce reprezintă înregistrările cu anumite restricţii pentru tip asupra câmpurilor.",
        "Documentation.LongDescription": "Returnează un tip ce reprezintă înregistrările cu anumite restricţii pentru tip asupra câmpurilor.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Generați dinamic un tip de tabel.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Determină dacă o valoare de primul tip este întotdeauna compatibilă cu al doilea tip.",
        "Documentation.LongDescription": "Determină dacă o valoare de <code>type1</code> este întotdeauna compatibilă cu <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă o valoare a numărului de tip poate fi tratată întotdeauna ca oricare tip.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Determinați dacă o valoare de tip oricare poate fi tratată întotdeauna și ca număr de tip.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Înlocuiește fațetele unui tip.",
        "Documentation.LongDescription": "Înlocuiește fațetele pentru <code>type</code> cu fațetele cuprinse în înregistrarea <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Returnează un nou tip de tabel cu toate cheile înlocuite cu lista de chei specificată.",
        "Documentation.LongDescription": "Returnează un nou tip de tabel cu toate cheile înlocuite cu lista de chei specificată.<br>\r\n    <br>\r\n    Fiecare cheie este definită utilizând o înregistrare în formularul următor:\r\n    <ul>\r\n      <li>\r\n        <code>Coloane</code>: o listă de nume de coloane care definesc cheia\r\n      </li>\r\n      <li>\r\n        <code>Primar</code>: <code>true</code> dacă cheia este cheia primară a tabelului; în caz contrar, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Lista de chei specificată este validată pentru a vă asigura că nu sunt definite mai multe chei primare și că toate numele de coloane cheie există în tipul de tabel.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiți informațiile cheie dintr-un tip de tabel.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Goliți informațiile cheie definite anterior dintr-un tip de tabel.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Returnează tipul unei coloane dintr-un tabel.",
        "Documentation.LongDescription": "Returnează tipul coloanei <code>column</code> din tipul de tabel <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Returnează un identificator URI absolut care reprezintă combinaţia dintre identificatorul URI de intrare de bază şi identificatorul URI relativ.",
        "Documentation.LongDescription": "Returnează un identificator URI absolut care este combinaţia dintre <code>baseUri</code> de intrare şi <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Returnează suma celor două valori.",
        "Documentation.LongDescription": "Returnează suma dintre <code>value1</code> şi <code>value2</code>. Un parametru <code>precision</code> opţional poate fi specificat; în mod implicit, se utilizează <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Returnează valoarea dacă este compatibilă cu tipul specificat.",
        "Documentation.LongDescription": "Returnează valoarea dacă este compatibilă cu tipul specificat. Acesta este echivalent cu operatorul „as” din M, cu excepția faptului că poate accepta referințe de tip identificator, cum ar fi Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Distribuiți un număr la un număr.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Încercați să transformați o valoare text într-un număr.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Returnează -1, 0 sau 1, în funcție dacă prima valoare este mai mică decât, egală cu sau mai mare decât a doua.",
        "Documentation.LongDescription": "Returnează -1, 0 sau 1, în funcție dacă prima valoare este mai mică decât, egală cu sau mai mare decât a doua.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Returnează rezultatul împărţirii primei valori la cea de-a doua.",
        "Documentation.LongDescription": "Returnează rezultatul împărţirii <code>value1</code> la <code>value2</code>. Un parametru <code>precision</code> opţional poate fi specificat; în mod implicit, se utilizează <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Returnează dacă două valori sunt egale.",
        "Documentation.LongDescription": "Returnează true dacă valoarea <code>value1</code> este egală cu valoarea <code>value2</code>; în caz contrar, returnează false.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Determină dacă o valoare este compatibilă cu tipul specificat.",
        "Documentation.LongDescription": "Determină dacă o valoare este compatibilă cu tipul specificat. Acest lucru este echivalent cu operatorul „is” din M, cu excepția că poate accepta referințe de tip identificator, cum ar fi Number. Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Comparați două modalități de a determina dacă un număr este compatibil cu numărul de tip.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Returnează produsul celor două valori.",
        "Documentation.LongDescription": "Returnează produsul înmulţirii <code>value1</code> cu <code>value2</code>. Un parametru <code>precision</code> opţional poate fi specificat; în mod implicit, se utilizează <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Evaluează o interogare pentru o țintă.",
        "Documentation.LongDescription": "<p>Evaluează <code>query</code> față de <code>target</code> utilizând parametrii specificați în <code>parameters</code> și opțiunile specificate în <code>options</code>.</p>\r\n<p>Ieșirea interogării este definită de <code>target</code>.</p>\r\n<p><code>target</code> furnizează contextul operațiunii descrise de <code>query</code>.</p>\r\n<p><code>query</code> descrie interogarea de executat în raport cu <code>target</code>. <code>query</code> este exprimat într-un mod specific pentru <code>target</code> (de exemplu, o instrucțiune T-SQL).</p>\r\n<p>Valoare opțională <code>parameters</code> poate conține fie o listă, fie o înregistrare, după caz, pentru a furniza valorile parametrilor așteptate de <code>query</code>.</p>\r\n<p>Înregistrarea <code>options</code> opțională poate conține opțiuni care afectează comportamentul de evaluare al <code>query</code> față de <code>target</code>. Aceste opțiuni sunt specifice pentru <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Returnează dacă două valori sunt egale.",
        "Documentation.LongDescription": "Returnează null dacă oricare argument „<code>value1</code>”, „<code>value2</code>” este null; în caz contrar, este echivalent cu Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Înlocuieşte informaţiile despre metadatele din valoarea introdusă.",
        "Documentation.LongDescription": "Înlocuieşte informaţiile despre metadatele din valoarea introdusă.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Înlocuiește tipul valorii.",
        "Documentation.LongDescription": "Înlocuiește tipul pentru <code>value</code> cu valoarea <code>type</code> furnizată.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Înlocuiți tipul implicit al unei înregistrări cu un tip mai specific.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Returnează diferenţa celor două valori.",
        "Documentation.LongDescription": "Returnează diferenţa dintre <code>value1</code> şi <code>value2</code>. Un parametru <code>precision</code> opţional poate fi specificat; în mod implicit, se utilizează <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Creează o acțiune care, atunci când este executată, va returna rezultatele efectuării unei solicitări HTTP ca valoare binară.",
        "Documentation.LongDescription": "Creează o acțiune care, atunci când este executată, va returna rezultatele efectuării unei solicitări de <code>method</code> față de <code>url</code>, utilizând HTTP ca valoare binară.\r\n    Se poate furniza un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>Query</code> : Adăugați programatic parametri de interogare la URL fără să trebuiască să vă faceți griji pentru aplicarea „escape”.</li>\r\n<li><code>ApiKeyName</code> : Dacă site-ul țintă are o noțiune de cheie API, acest parametru poate fi utilizat pentru a specifica numele (nu valoarea) parametrului cheie care trebuie utilizat &#238;n URL. Valoarea reală a cheii este furnizată &#238;n acreditare.</li>\r\n<li><code>Headers</code> : Specificarea acestei valori ca &#238;nregistrare va furniza anteturi suplimentare la o solicitare HTTP.</li>\r\n<li><code>Timeout</code> : Specificarea acestei valori ca durată va schimba perioada de expirare pentru o solicitare HTTP. Valoarea implicită este de 100 de secunde.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Specificarea acestei valori ca listă va exclude aceste chei de antet HTTP din calculul pentru amplasarea datelor &#238;n cache.</li>\r\n<li><code>IsRetry</code> : Specificarea acestei valori logice ca true va ignora orice răspuns existent &#238;n memoria cache la preluarea datelor.</li>\r\n<li><code>ManualStatusHandling</code> : Specificarea acestei valori ca listă va &#238;mpiedica orice manipulare &#238;ncorporată pentru solicitările HTTP al căror răspuns are unul dintre aceste coduri de stare.</li>\r\n<li><code>RelativePath</code> : Specificarea acestei valori ca text o adaugă la adresa URL de bază &#238;nainte de a face solicitarea.</li>\r\n<li><code>Content</code> : Specificarea acestei valori va determina ca conținutul său să devină corpul solicitării HTTP.</li>\r\n</ul>\r\n\r\n <br>\r\n    Rețineți că această funcție este dezactivată în majoritatea contextelor. Luați în considerare utilizarea Web.Contents sau Web.Headers în schimb.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Efectuați o solicitare GET în raport cu Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Introduceți URL-ul punctului final API REST Azure Enterprise asociat cu înscrierea dvs.",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Returnează rezultatele binare ale apelului la URL-ul furnizat pentru API-ul Azure Enterprise.",
        "Documentation.Examples": [
          {
            "Description": "Utilizarea funcției AzureEnterprise.Contents pentru a returna rezultatele unui raport specificat.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabel"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Returnează conținutul blobului specificat dintr-un seif de stocare Azure.",
        "Documentation.LongDescription": "Returnează conținutul blobului de la adresa URL, <code>url</code>, dintr-un seif de stocare Azure. <code>options</code> poate fi specificat pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>BlockSize</code> : Numărul de byți de citit &#238;nainte de a aștepta consumatorul de date. Valoarea implicită este de 4 MB.</li>\r\n<li><code>RequestSize</code> : Numărul de byți pentru care se &#238;ncearcă citirea &#238;ntr-o singură solicitare HTTP către server. Valoarea implicită este de 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opțiunea ConcurrentRequests acceptă descărcarea mai rapidă a datelor, preciz&#226;nd numărul de solicitări de efectuat &#238;n paralel, la costul utilizării memoriei. Memoria necesară este (ConcurrentRequest * RequestSize). Valoarea implicită este 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Returnează conținutul fișierului specificat dintr-un sistem de fișiere Azure Data Lake Storage.",
        "Documentation.LongDescription": "Returnează conținutul fișierului de la adresa URL, <code>url</code>, dintr-un sistem de fișiere Azure Data Lake Storage. <code>options</code> poate fi specificat pentru a controla următoarele opțiuni:\r\n    <ul>\r\n<li><code>BlockSize</code> : Numărul de byți de citit &#238;nainte de a aștepta consumatorul de date. Valoarea implicită este de 4 MB.</li>\r\n<li><code>RequestSize</code> : Numărul de byți pentru care se &#238;ncearcă citirea &#238;ntr-o singură solicitare HTTP către server. Valoarea implicită este de 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opțiunea ConcurrentRequests acceptă descărcarea mai rapidă a datelor, preciz&#226;nd numărul de solicitări de efectuat &#238;n paralel, la costul utilizării memoriei. Memoria necesară este (ConcurrentRequest * RequestSize). Valoarea implicită este 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Returnează lungimea aproximativă a codului binar.",
        "Documentation.LongDescription": "Returnează lungimea aproximativă de <code>binary</code>sau o eroare dacă sursa de date nu acceptă o lungime aproximativă.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Obțineți lungimea aproximativă a valorii binare.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Utilizează valoarea binară ca zonă tampon în memorie.",
        "Documentation.LongDescription": "Utilizează valoarea binară ca zonă tampon în memorie. Rezultatul acestui apel este o valoare binară stabilă, ceea ce înseamnă că va avea o lungime şi o ordine de octeţi determinate.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o versiune stabilă a valorii binare.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Combină o linie de valori binary într-o singură valoare binary.",
        "Documentation.LongDescription": "Combină o linie de valori binary într-o singură valoare binary.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Creează o valoare binară din valoarea dată",
        "Documentation.LongDescription": "Returnează o valoare <code>binary</code> din <code>value</code> dată. Dacă <code>value</code> dată este <code>null</code>, <code>Binary.From</code> returnează <code>null</code>.  Dacă <code>value</code> dată este <code>binary</code>, se returnează <code>value</code>. Valorile următoarelor tipuri pot fi convertite la o valoare <code>binary</code>:\r\n      <ul>\r\n        <li><code>text</code>: o valoare <code>binary</code> din reprezentarea text. Pentru detalii, consultați <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nDacă <code>value</code> este de orice alt tip, se returnează o eroare.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi valoarea <code>binary</code> a <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Converteşte o linie de numere într-o valoare binară.",
        "Documentation.LongDescription": "Converteşte o linie de numere într-o valoare binară.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Decodifică datele dintr-un formular text într-o valoare binary.",
        "Documentation.LongDescription": "Returnează rezultatul conversiei valorii text <code>text</code> într-o valoare binară (listă de <code>number</code>). <code>encoding</code> poate fi specificat pentru indicarea codificării utilizate în valoarea text.\r\n      Următoarele valori <code>BinaryEncoding</code> pot fi utilizate pentru <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codificare în baza 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codificare hexazecimală</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Decodificaţi „1011” în valoare binary.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Decodificaţi „1011” în valoare binary cu codificare hexazecimală.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Citește fluxul binar și încearcă să determine tipul de conținut și formatul informațiilor din flux.",
        "Documentation.LongDescription": "Returnează o înregistrare cu câmpul Content.Type care conține tipul MIME dedus.\r\n    Dacă tipul de conținut dedus este text/* și se detectează o pagină de cod de codificare, se returnează în plus și câmpul Content.Encoding, care conține codificarea fluxului.\r\n    Dacă tipul de conținut dedus este text/csv, iar formatul este delimitat, se returnează în plus câmpul Csv.PotentialDelimiter, care conține un tabel pentru analiza delimitatorilor potențiali.\r\n    Dacă tipul de conținut dedus este text/csv, iar formatul este lățime fixă, se returnează în plus și câmpul Csv.PotentialPositions, care conține o listă pentru analiza pozițiilor de coloane cu lățime fixă potențiale.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Returnează numărul de caractere.",
        "Documentation.LongDescription": "Returnează numărul de caractere.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Converteşte o valoare binară într-o listă de numere.",
        "Documentation.LongDescription": "Converteşte o valoare binară într-o listă de numere.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Codifică datele binare într-un formular text.",
        "Documentation.LongDescription": "Returnează rezultatul conversiei unei liste de numere binare <code>binary</code> într-o valoare text. Opțional, <code>encoding</code> poate fi specificat pentru a arăta codificarea care va fi utilizată în valoarea text produsă\r\n      Următoarele valori <code>BinaryEncoding</code> pot fi utilizate pentru <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codificare în baza 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codificare hexazecimală</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Creează o înregistrare de eroare modificată care nu va declanșa o rezervă atunci când este generată de o rutină de tratare definită într-o vizualizare (prin Binary.View).",
        "Documentation.LongDescription": "Creează o înregistrare de eroare modificată din <code>errorRecord</code> care nu va declanșa o rezervă atunci când este generată de o rutină de tratare definită într-o vizualizare (prin Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Creează o funcție care poate fi interceptată de o rutină de tratare definită într-o vizualizare (prin Binary.View).",
        "Documentation.LongDescription": "<p>Creează o funcție de vizualizare bazată pe <code>function</code>, care poate fi gestionată într-o vizualizare creată de <code>Binary.View</code>.</p>\r\n<p>Rutina de tratare <code>OnInvoke</code> a <code>Binary.View</code> poate fi utilizată pentru a defini o rutină de tratare pentru funcția de vizualizare.</p>\r\n<p>La fel ca în rutinele de tratare pentru operații încorporate, dacă nu este specificată nicio rutină de tratare <code>OnInvoke</code> sau dacă nu tratează funcția de vizualizare sau dacă rutina de tratare declanșează o eroare, se aplică <code>function</code> peste vizualizare.</p>\r\n<p>Consultați documentația conectorului personalizat Power Query publicat pentru o descriere mai completă a <code>Binary.View</code> și a funcțiilor de vizualizare personalizate.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Un format binar care citeşte un număr întreg cu semn pe 64 de biţi care a fost codificat utilizând codificarea cu o lungime variabilă de 7 biţi.",
        "Documentation.LongDescription": "Un format binar care citeşte un număr întreg cu semn pe 64 de biţi care a fost codificat utilizând codificarea cu o lungime variabilă de 7 biţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Un format binar care citeşte un număr întreg fără semn pe 64 de biţi care a fost codificat utilizând codificarea cu o lungime variabilă de 7 biţi.",
        "Documentation.LongDescription": "Un format binar care citeşte un număr întreg fără semn pe 64 de biţi care a fost codificat utilizând codificarea cu o lungime variabilă de 7 biţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Un format binar care citeşte un număr întreg fără semn pe 8 biţi.",
        "Documentation.LongDescription": "Un format binar care citeşte un număr întreg fără semn pe 8 biţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Un format binar care citeşte o valoare zecimală .NET pe 16 octeţi.",
        "Documentation.LongDescription": "Un format binar care citeşte o valoare zecimală .NET pe 16 octeţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Un format binar care citeşte o valoare IEEE cu virgulă mobilă cu dublă precizie pe 8 octeţi.",
        "Documentation.LongDescription": "Un format binar care citeşte o valoare IEEE cu virgulă mobilă cu dublă precizie pe 8 octeţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Returnează un format binar care citeşte o secvenţă de elemente şi returnează  o listă.",
        "Documentation.LongDescription": "Returnează un format binar care citește o secvență de elemente și returnează <code>list</code>.  Parametrul <code>binaryFormat</code> specifică formatul binar al fiecărui element.  Există trei modalități de determinare a numărului de elemente citite: <ul><li>Dacă nu se specifică <code>countOrCondition</code>, atunci formatul binar va citi până când nu mai există elemente.</li><li>Dacă <code>countOrCondition</code> este un număr, atunci formatul binar va citi numărul respectiv de elemente.</li><li>Dacă <code>countOrCondition</code> este o funcție, atunci funcția respectivă va fi invocată pentru fiecare element citit.  Funcția returnează true pentru a continua și false pentru a opri citirea elementelor.  Elementul final este inclus în listă.</li><li>Dacă <code>countOrCondition</code> este un format binar, atunci numărul de elemente este așteptat să apară înaintea listei, iar formatul specificat este utilizat pentru a citi numărul.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Citiţi octeţii până la terminarea datelor.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Citiţi doi octeţi.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Citiţi octeţii până când valoarea pentru octeţi este mai mare sau egală cu doi.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Un format binar care nu citeşte niciun octet şi returnează valoarea null.",
        "Documentation.LongDescription": "Un format binar care nu citeşte niciun octet şi returnează valoarea null.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Returnează un format binar care citeşte o înregistrare.",
        "Documentation.LongDescription": "Returnează un format binar care citeşte o înregistrare.  Parametrul <code>record</code> specifică formatul înregistrării.  Fiecare câmp din înregistrare poate avea un format binar diferit.  Dacă un câmp conţine o valoare care nu este o valoare binară a formatului, atunci nu se va citi nicio dată pentru câmpul respectiv, iar valoarea pentru câmp este repetată în rezultat.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Citiţi o înregistrare ce conţine un număr întreg pe 16 biţi şi un număr întreg pe 32 de biţi.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Un format binar care citeşte un număr întreg cu semn pe 16 biţi.",
        "Documentation.LongDescription": "Un format binar care citeşte un număr întreg cu semn pe 16 biţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Un format binar care citeşte un număr întreg cu semn pe 32 de biţi.",
        "Documentation.LongDescription": "Un format binar care citeşte un număr întreg cu semn pe 32 de biţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Un format binar care citeşte un număr întreg cu semn pe 64 de biţi.",
        "Documentation.LongDescription": "Un format binar care citeşte un număr întreg cu semn pe 64 de biţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Un format binar care citeşte o valoare IEEE cu virgulă mobilă cu precizie simplă pe 4 octeţi.",
        "Documentation.LongDescription": "Un format binar care citeşte o valoare IEEE cu virgulă mobilă cu precizie simplă pe 4 octeţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Returnează un format binar care citeşte o valoare text.",
        "Documentation.LongDescription": "Returnează un format binar care citește o valoare text.  <code>length</code> specifică numărul de byți de decodificat sau formatul binar al lungimii care apare înaintea textului.  Valoarea <code>encoding</code> opțională arată codificarea textului.  Dacă nu se specifică <code>encoding</code>, atunci codificarea este determinată din marcatorii pentru ordinea biților Unicode.  Dacă nu există marcatori pentru ordinea biților, atunci se utilizează <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Decodificaţi doi octeţi ca text ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Decodificaţi textul ASCII în care lungimea textului în octeţi apare înaintea textului ca octet.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Un format binar care citeşte un număr întreg fără semn pe 16 biţi.",
        "Documentation.LongDescription": "Un format binar care citeşte un număr întreg fără semn pe 16 biţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Un format binar care citeşte un număr întreg fără semn pe 32 de biţi.",
        "Documentation.LongDescription": "Un format binar care citeşte un număr întreg fără semn pe 32 de biţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Un format binar care citeşte un număr întreg fără semn pe 64 de biţi.",
        "Documentation.LongDescription": "Un format binar care citeşte un număr întreg fără semn pe 64 de biţi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Creează un număr întreg, pe 8 biți, din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> întreagă, pe 8 biți, din <code>value</code>dată. Dacă <code>value</code> dată este <code>null</code>, <code>Byte.From</code> returnează <code>null</code>. Dacă <code>value</code> dată este un <code>number</code> în intervalul de numere întregi pe 8 biți fără parte fracționară, se returnează <code>value</code>. Dacă are o parte fracționară, numărul este rotunjit cu modul de rotunjire specificat. Modul de rotunjire implicit este <code>RoundingMode.ToEven</code>. Dacă <code>value</code> este de orice alt tip, se va efectua mai întâi conversia la un <code>number</code> utilizând <code>Number.FromText</code>. Consultați <code>Number.Round</code> pentru modurile de rotunjire disponibile. De asemenea, poate fi furnizată o <code>culture</code> opțională (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obțineți valoarea <code>number</code> întreagă, pe 8 biți, pentru <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obțineți valoarea <code>number</code> întreagă, pe 8 biți, pentru <code>\"4.5\"</code>, utilizând <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Convertește un număr într-un caracter text.",
        "Documentation.LongDescription": "Returnează echivalentul în caractere a numărului.<br>\r\n    <br>\r\n    <code>number</code> furnizat trebuie să fie un punct de cod Unicode pe 21 de biți.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Convertește un număr la valoarea sa echivalentă în caractere.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Convertiți un caracter într-un număr și reveniți.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Convertiți punctul de cod hexazecimal pentru emoticonul „față rânjind” în perechea surogat UTF-16 echivalentă.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Convertește un caracter la o valoare numerică.",
        "Documentation.LongDescription": "Returnează echivalentul numeric al <code>character</code>.<br>\r\n    <br>\r\n    Rezultatul va fi punctul de cod Unicode pe 21 de biți reprezentat de caracterul furnizat sau perechea surogat.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Convertește un caracter la valoarea sa numerică echivalentă.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Convertiți perechea surogat UTF-16 pentru emoticonul „față rânjind” în punctul său de cod hexazecimal echivalent.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Returnează o funcție ce combină o listă de texte utilizând delimitatorul specificat.",
        "Documentation.LongDescription": "Returnează o funcție ce combină o listă de valori text într-o singură valoare text utilizând delimitatorul specificat.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combinați o listă de valori text utilizând un delimitator prin punct și virgulă.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Combinați textul a două coloane utilizând un delimitator prin virgulă și un citat în stil CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Returnează o funcție ce combină o listă de texte utilizând o secvență de delimitatori.",
        "Documentation.LongDescription": "Returnează o funcție ce combină o listă de valori text într-o singură valoare text utilizând o secvență de delimitatori.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combinați o listă de valori text utilizând o secvență de delimitatori.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Returnează o funcție ce combină o listă de texte utilizând lungimile specificate.",
        "Documentation.LongDescription": "Returnează o funcție ce combină o listă de valori text într-o singură valoare text utilizând lungimile specificate.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combinați o listă de valori text prin extragerea numerelor de caractere specificate din fiecare valoare de intrare.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Combinați o listă de valori text prin extragerea numerelor de caractere specificate, după prima completare prealabilă a rezultatului cu textul șablonului.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Returnează o funcție ce combină o listă de texte utilizând pozițiile de rezultat specificate.",
        "Documentation.LongDescription": "Returnează o funcție ce combină o listă de valori text într-o singură valoare text utilizând pozițiile de rezultat specificate.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combinați o listă de valori text plasându-le în rezultat la pozițiile specificate.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Returnează o funcție ce combină o listă de texte utilizând pozițiile și lungimile specificate.",
        "Documentation.LongDescription": "Returnează o funcție ce combină o listă de valori text într-o singură valoare text utilizând pozițiile de rezultat și lungimile specificate. O lungime nulă indică faptul că trebuie inclusă întreaga valoare text.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combinați o listă de valori text utilizând pozițiile de rezultat și lungimile specificate.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Returnează o funcție de comparare pe baza culturii și sensibilității la literele mari și mici specificate.",
        "Documentation.LongDescription": "Returnează o funcție de comparare care utilizează <code>culture</code> și sensibilitatea la literele mari și mici specificată de <code>ignoreCase</code> pentru a efectua comparații.<br>\r\n      <br>\r\n      O funcție de comparare acceptă două argumente și returnează -1, 0 sau 1, în funcție dacă prima valoare este mai mică decât, egală cu sau mai mare decât a doua.<br>\r\n      <br>\r\n      Valoarea implicită pentru <code>ignoreCase</code> este false. <code>culture</code> ar trebui să fie una dintre setările regionale acceptate de .NET Framework (de exemplu, \"ro-RO\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Comparați „a” și „A” folosind setările locale „en-US” pentru a determina dacă valorile sunt egale.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Comparați „a” și „A” folosind setările lingvistice „en-US” și ignorând majusculele pentru a determina dacă valorile sunt egale.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Returnează identificatorul de membru unic din valoarea de proprietate a membrilor.",
        "Documentation.LongDescription": "Returnează identificatorul de membru unic dintr-o valoare de proprietate a membrilor. <code>attribute</code>. Returnează nul pentru orice alte valori.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Returnează cheia unei proprietăți.",
        "Documentation.LongDescription": "Returnează cheia proprietății <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Returnează o valoare monetară din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>currency</code> pornind de la valoarea <code>value</code> dată. Dacă valoarea <code>value</code> dată este <code>null</code>, <code>Currency.From</code> returnează <code>null</code>.  Dacă valoarea <code>value</code> dată este o valoare <code>number</code> din intervalul valorilor monetare, partea fracționară din <code>value</code> este rotunjită la 4 cifre zecimale și returnată. Dacă valoarea <code>value</code> dată este de orice alt tip, va fi convertită mai întâi la o valoare <code>number</code>utilizând <code>Number.FromText</code>. Intervalul valid pentru valori monetare este de la <code>-922.337.203.685.477,5808</code> la <code>922.337.203.685.477,5807</code>. Consultați <code>Number.Round</code> pentru a afla informații despre modurile de rotunjire disponibile. Valoarea implicită este <code>RoundingMode.ToEven</code>. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obțineți valoarea <code>currency</code> <code>\"1,23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Obțineți valoarea <code>currency</code> pentru <code>\"1.23455\"</code> utilizând <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Returnează componenta day.",
        "Documentation.LongDescription": "Returnează componenta zi a unei valori <code>date</code>, <code>datetime</code> sau <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din care este extrasă componenta zi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi componenta day a unei valori <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> reprezentând data şi ora 14/05/2011 17:00:00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Returnează un număr (de la 0 la 6) care indică ziua din săptămână în care cade valoarea furnizată.",
        "Documentation.LongDescription": "Returnează un număr (de la 0 la 6) care indică ziua din săptămână în care cade <code>dateTime</code> furnizată.\r\n  <ul>\r\n        <li><code>dateTime</code>: O valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: O valoare <code>Day</code> care indică ziua care să fie considerată prima zi a săptămânii. Valorile permise sunt Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday sau Day.Saturday. Dacă este nespecificată, se utilizează o valoare implicită dependentă de cultură.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obțineți ziua din săptămână reprezentată de luni 21 februarie 2011, tratând duminica drept prima zi a săptămânii.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Obțineți ziua din săptămână reprezentată de luni 21 februarie 2011, tratând lunea drept prima zi a săptămânii.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Returnează numele zilei din săptămână.",
        "Documentation.LongDescription": "Returnează numele zilei din săptămână pentru <code>date</code> furnizat. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obțineți numele zilei din săptămână.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Returnează un număr de la 1 la 366, care reprezintă ziua din an.",
        "Documentation.LongDescription": "Returnează un număr ce reprezintă ziua din an din valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> furnizată, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ziua din an pentru 1 martie 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Returnează un număr de la 28 la 31, care indică numărul de zile din lună.",
        "Documentation.LongDescription": "Returnează numărul de zile din lună din valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> pentru care se returnează numărul de zile din lună.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Numărul de zile din luna decembrie este reprezentat prin <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Returnează sfârșitul zilei.",
        "Documentation.LongDescription": "Returnează sfârșitul trimestrului reprezentat de <code>dateTime</code>. Informațiile legate de fusul orar sunt păstrate.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din care este calculat sfârșitul zilei.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi sfârşitul zilei pentru 14/05/2011 17:00:00.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Aflaţi sfârşitul zilei pentru 17/05/2011 17:00:00 – 7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Returnează sfârșitul lunii.",
        "Documentation.LongDescription": "Returnează sfârșitul lunii care conține <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din care este calculat sfârșitul lunii</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi sfârşitul lunii pentru 14/05/2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Aflaţi sfârşitul lunii pentru 17/05/2011 17:00:00 PM – 7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Returnează sfârșitul trimestrului.",
        "Documentation.LongDescription": "Returnează sfârșitul trimestrului care conține <code>dateTime</code>. Informațiile legate de fusul orar sunt păstrate.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din care este calculat sfârșitul trimestrului.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiți sfârșitul trimestrului pentru 10 octombrie 2011, 8:00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Returnează sfârșitul săptămânii.",
        "Documentation.LongDescription": "Returnează sfârșitul săptămânii care conține <code>dateTime</code>.\r\n    Această funcție preia o valoare <code>Day</code> opțională, <code>firstDayOfWeek</code>, pentru a seta prima zi a săptămânii pentru acest calcul relativ. Valoarea implicită este <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> din care este calculată ultima zi a săptămânii</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[opțional]</i> o valoare <code>Day.Type</code> ce reprezintă prima zi a săptămânii. Valorile posibile sunt <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> și <code>Day.Saturday.</code>. Valoarea implicită este <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi sfârşitul săptămânii pentru 14/05/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Aflaţi sfârşitul săptămânii pentru 17/05/2011 17:00:00 – 7:00, cu duminică drept prima zi a săptămânii.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Returnează sfârșitul anului.",
        "Documentation.LongDescription": "Returnează sfârșitul anului care conține <code>dateTime</code>, inclusiv secundele fracționare. Informațiile legate de fusul orar sunt păstrate.\r\n      <ul>\r\n        <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code>, din care este calculat sfârșitul anului.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi sfârşitul anului pentru 14/05/2011 17:00:00.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Aflaţi sfârşitul orei pentru 17/05/2011 17:00:00 – 7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Creează o dată din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>date</code> din <code>value</code> dat. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).\r\nDacă <code>value</code> dat este <code>null</code>, <code>Date.From</code> returnează <code>null</code>. Dacă <code>value</code> dat este <code>date</code>, se returnează <code>value</code>. Valorile următoarelor tipuri pot fi convertite într-o valoare <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: o valoare <code>date</code> din reprezentarea textuală. Pentru detalii, consultați <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: componenta dată calendaristică a <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: componenta dată calendaristică a echivalentului de tip datetime local al <code>value</code>.</li>\r\n        <li><code>number</code>: componenta dată calendaristică a echivalentului de tip datetime al OLE Automation Date exprimată de <code>value</code>.</li>\r\n      </ul>\r\nDacă <code>value</code> este de orice alt tip, se returnează o eroare.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>43910</code> la o valoare <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Convertiţi <code>#datetime(1899, 12, 30, 06, 45, 12)</code> la o valoare <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Creează o dată din formate de dată locale, universale și particularizate.",
        "Documentation.LongDescription": "Creează o valoare <code>date</code> dintr-o reprezentare textuală, <code>text</code>. Un parametru <code>record</code> opțional, <code>options</code>, poate fi furnizat pentru a specifica proprietăți suplimentare. <code>record</code> poate conține următoarele câmpuri:\r\n<ul>\r\n   <li><code>Format</code>: o valoare <code>text</code> ce indică formatul de utilizat. Pentru mai multe detalii, accesați https://go.microsoft.com/fwlink/?linkid=2180104 și https://go.microsoft.com/fwlink/?linkid=2180105. Dacă se omite acest câmp sau se furnizează <code>null</code>, acest lucru va duce la analizarea datei utilizând cel mai bun efort.</li>\r\n   <li><code>Culture</code>: atunci când <code>Format</code> nu este null, <code>Culture</code> controlează anumiți specificatori de format. De exemplu, în <code>\"en-US\"</code> <code>\"MMM\"</code> este <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, în timp ce în <code>\"ru-RU\"</code> <code>\"MMM\"</code> este <code>\"янв\", \"фев\", \"мар\", ...</code>. Atunci când <code>Format</code> este <code>null</code>, <code>Culture</code> controlează formatul implicit de utilizat. Atunci când <code>Culture</code> este <code>null</code> sau se omite, se utilizează <code>Culture.Current</code>.</li>\r\n</ul>\r\nPentru a accepta fluxurile de lucru moștenite, <code>options</code> poate fi, de asemenea, o valoare text. Acesta are același comportament ca și cum <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia <code>\"2010-12-31\"</code> într-o valoare <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Efectuați conversia utilizând un format particularizat și cultura germană.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Găsiți data din calendarul gregorian care corespunde începutului anului 1400 din calendarul Hijri.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Indică dacă această dată apare în timpul zilei curente, după cum este determinat de data şi ora curente ale sistemului.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> apare în timpul zilei curente, după cum este determinat de data şi ora curente ale sistemului.\r\n      <ul>\r\n      <li><code>dateTime</code>: O valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă ora curentă a sistemului este în ziua curentă.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Indică dacă această dată apare în timpul lunii curente, după cum este determinat de data şi ora curente ale sistemului.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> apare în timpul lunii curente, după cum este determinat de data şi ora curente ale sistemului.\r\n      <ul>\r\n      <li><code>dateTime</code>: O valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă ora curentă a sistemului este în luna curentă.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Indică dacă această dată apare în timpul trimestrului curent, după cum este determinat de data şi ora curente ale sistemului.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> apare în timpul trimestrului curent, după cum este determinat de data şi ora curente ale sistemului.\r\n      <ul>\r\n      <li><code>dateTime</code>: O valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă ora curentă a sistemului este în trimestrul curent.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Indică dacă această dată apare în timpul săptămânii curente, după cum este determinat de data şi ora curente ale sistemului.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> apare în timpul săptămânii curente, după cum este determinat de data şi ora curente ale sistemului.\r\n      <ul>\r\n      <li><code>dateTime</code>: O valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă ora curentă a sistemului este în săptămâna curentă.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Indică dacă această dată apare în timpul anului curent, după cum este determinat de data şi ora curente ale sistemului.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> apare în timpul anului curent, după cum este determinat de data şi ora curente ale sistemului.\r\n      <ul>\r\n      <li><code>dateTime</code>: O valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă ora curentă a sistemului este în anul curent.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Indică dacă această dată cade în timpul zilei următoare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ziua curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul zilei următoare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ziua curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă ziua ulterioară orei curente a sistemului este în ziua următoare.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Indică dacă această dată cade în timpul lunii următoare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în luna curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul lunii următoare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în luna curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă luna ulterioară orei curente a sistemului este în luna următoare.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Indică dacă această dată cade în timpul trimestrului următor, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în trimestrul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului trimestru, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în trimestrul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă trimestrul ulterior orei curente a sistemului este în trimestrul următor.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Indică dacă această dată cade în timpul săptămânii următoare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în săptămâna curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următoarei săptămâni, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în săptămâna curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă săptămâna ulterioară orei curente a sistemului este în săptămâna următoare.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Indică dacă această dată cade în timpul anului următor, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în anul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următorului an, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în anul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă anul ulterior orei curente a sistemului este în anul următor.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Indică dacă această dată cade în timpul zilei anterioare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ziua curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul zilei anterioare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ziua curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă ziua anterioară orei curente a sistemului este în ziua anterioară.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Indică dacă această dată cade în timpul lunii anterioare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în luna curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul lunii anterioare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în luna curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă luna anterioară orei curente a sistemului este în luna anterioară.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Indică dacă această dată cade în timpul trimestrului anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în trimestrul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul trimestrului anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în trimestrul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă trimestrul anterior orei curente a sistemului este în trimestrul anterior.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Indică dacă această dată cade în timpul săptămânii anterioare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în săptămâna curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul săptămânii anterioare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în săptămâna curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă săptămâna anterioară orei curente a sistemului este în săptămâna anterioară.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Indică dacă această dată cade în timpul anului anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în anul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul anului anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în anul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă anul anterior orei curente a sistemului este în anul anterior.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Indică dacă această dată apare în timpul anului curent şi este în sau înainte de ziua curentă, după cum este determinat de data şi ora curente ale sistemului.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> apare în timpul anului curent şi este în sau înainte de ziua curentă, după cum este determinat de data şi ora curente ale sistemului.\r\n      <ul>\r\n      <li><code>dateTime</code>: O valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă ora curentă a sistemului este în anul acesta până în prezent.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Indică dacă această dată cade într-un an bisect.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade într-un an bisect.\r\n <ul>\r\n        <li><code>dateTime</code>: o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă anul 2012, reprezentat de <code>#date(2012, 01, 01)</code> este un an bisect.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Returnează componenta month.",
        "Documentation.LongDescription": "Returnează componenta month a valorii <code>datetime</code> specificate, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi luna din #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Returnează numele componentei lună.",
        "Documentation.LongDescription": "Returnează numele componentei month pentru <code>date</code> furnizat. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obțineți numele lunii.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Returnează un număr care indică în ce trimestru al anului cade data.",
        "Documentation.LongDescription": "Returnează un număr de la 1 la 4 care indică în ce trimestru al anului cade data <code>dateTime</code>. <code>dateTime</code> poate fi o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi în ce trimestru al anului cade data #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Returnează începutul zilei.",
        "Documentation.LongDescription": "Returnează începutul zilei reprezentat de <code>dateTime</code>.\r\n    <code>dateTime</code> trebuie să fie o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiți începutul zilei pentru 10 octombrie 2011, 8:00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Returnează începutul lunii.",
        "Documentation.LongDescription": "Returnează începutul lunii care conține <code>dateTime</code>.\r\n    <code>dateTime</code> trebuie să fie o valoare <code>date</code> sau <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiți începutul lunii pentru 10 octombrie 2011, 8:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Returnează începutul trimestrului.",
        "Documentation.LongDescription": "Returnează începutul trimestrului care conține <code>dateTime</code>.\r\n    <code>dateTime</code> trebuie să fie o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiți începutul trimestrului pentru 10 octombrie 2011, 8:00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Returnează începutul săptămânii.",
        "Documentation.LongDescription": "Returnează începutul săptămânii care conține <code>dateTime</code>.\r\n    <code>dateTime</code> trebuie să fie o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiți începutul săptămânii pentru marți, 11 octombrie 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Găsiți începutul săptămânii pentru marți, 11 octombrie 2011, utilizând luni ca început de săptămână.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Returnează începutul anului.",
        "Documentation.LongDescription": "Returnează începutul anului care conține <code>dateTime</code>.\r\n    <code>dateTime</code> trebuie să fie o valoare <code>date</code>, <code>datetime</code> sau <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiți începutul anului pentru 10 octombrie 2011, 8:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Returnează o înregistrare ce conţine părţi din valoarea pentru dată.",
        "Documentation.LongDescription": "Returnează o înregistrare care conține părți din valoarea dată calendaristică furnizată, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: o valoare <code>date</code> pentru care urmează să fie calculată înregistrarea părților sale.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi valoarea <code>#date(2011, 12, 31)</code> într-o înregistrare ce conţine părţi din valoarea date.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Returnează o reprezentare textuală a valorii de tip dată.",
        "Documentation.LongDescription": "Returnează o reprezentare textuală a <code>date</code>. Un parametru opțional de <code>record</code>, <code>options</code>, poate fi furnizat pentru a specifica proprietăți suplimentare. <code>culture</code> este utilizat numai pentru fluxuri de lucru moștenite. <code>record</code> poate conține următoarele câmpuri:\r\n<ul>\r\n   <li><code>Format</code>: o valoare <code>text</code> ce indică formatul de utilizat. Pentru mai multe detalii, accesați https://go.microsoft.com/fwlink/?linkid=2180104 și https://go.microsoft.com/fwlink/?linkid=2180105. Omiterea acestui câmp sau furnizarea <code>null</code> va duce la formatarea datei utilizând valoarea implicită definită de <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: atunci când <code>Format</code> nu este nul, <code>Culture</code> controlează anumiți specificatori de format. De exemplu, în <code>\"en-US\"</code> <code>\"MMM\"</code> este <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, în timp ce în <code>\"ru-RU\"</code> <code>\"MMM\"</code> este <code>\"янв\", \"фев\", \"мар\", ...</code>. Atunci când <code>Format</code> este <code>null</code>, <code>Culture</code> controlează formatul implicit de utilizat. Atunci când <code>Culture</code> este <code>null</code> sau se omite, se utilizează <code>Culture.Current</code>.</li>\r\n</ul>\r\nPentru a accepta fluxurile de lucru moștenite, <code>options</code> și <code>culture</code> pot fi, de asemenea, valori text. Aceasta are același comportament ca și cum <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia <code>#date(2010, 12, 31)</code> într-o valoare <code>text</code>. <i>Rezultatul poate varia în funcție de cultura actuală.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Efectuați conversia utilizând un format particularizat și cultura germană.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Găsiți anul din calendarul Hijri care corespunde datei de 1 ianuarie 2000 din calendarul gregorian.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Returnează un număr de la 1 la 6 care indică în ce săptămână din lună cade această dată.",
        "Documentation.LongDescription": "Returnează un număr de la 1 la 6 care indică în ce săptămână din lună cade data <code>dateTime</code>.\r\n <ul>\r\n      <li><code>dateTime</code>: O valoare <code>datetime</code> pentru care este determinată săptămâna din lună.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinați în ce săptămână din martie cade data de 15 în 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Returnează un număr de la 1 la 54 care indică în ce săptămână a anului cade această dată.",
        "Documentation.LongDescription": "Returnează un număr de la 1 la 54 care indică în ce săptămână din an cade data, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: O valoare <code>datetime</code> pentru care este determinată săptămâna din an.</li>\r\n        <li><code>firstDayOfWeek</code>: O valoare opțională <code>Day.Type</code> care indică ziua considerată drept începutul unei noi săptămâni (de exemplu, <code>Day.Sunday</code>). Dacă nu se specifică, se utilizează o valoare implicită dependentă de cultură.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinați ce săptămână a anului conține 27 martie 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Determinați ce săptămână din an conține 27 martie 2011, utilizând ziua de luni ca începutul săptămânii.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Returnează componenta year.",
        "Documentation.LongDescription": "Returnează componenta year a valorii <code>datetime</code> furnizate, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi anul din #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Returnează componenta date a valorii date, datetime sau datetimezone specificate.",
        "Documentation.LongDescription": "Returnează componenta date <code>dateTime</code>, valoarea <code>date</code>, <code>datetime</code> sau <code>datetimezone</code> dată.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi valoarea date a #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Creează o valoare datetime din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>datetime</code> din <code>value</code> dat. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).\r\nDacă <code>value</code> dat este <code>null</code>, <code>DateTime.From</code> returnează <code>null</code>. Dacă <code>value</code> dat este <code>datetime</code>, se returnează <code>value</code>. Valorile următoarelor tipuri pot fi convertite într-o valoare <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: o valoare <code>datetime</code> din reprezentarea textuală. Pentru detalii, consultați <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: o valoare <code>datetime</code> cu <code>value</code> drept componentă date și <code>12:00:00 AM</code> drept componentă time.</li>\r\n        <li><code>datetimezone</code>: echivalentul <code>datetime</code> local al <code>value</code>.</li>\r\n        <li><code>time</code>: o valoare <code>datetime</code> cu echivalentul de tip dată calendaristică al OLE Automation Date cu <code>0</code> pentru componenta date și <code>value</code> pentru componenta time.</li>\r\n        <li><code>number</code>: un echivalent de tip <code>datetime</code> al OLE Automation Date exprimată de <code>value</code>. </li>\r\n      </ul>\r\nDacă <code>value</code> este de orice alt tip, se returnează o eroare.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>#time(06, 45, 12)</code> la o valoare <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Convertiţi <code>#date(1975, 4, 4)</code> la o valoare <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Creează o valoare datetime de la un număr lung pe 64 de biţi.",
        "Documentation.LongDescription": "Creează o valoare <code>datetime</code> din valoarea <code>fileTime</code> şi o converteşte în fusul orar local. Ora fişierului este ora fişierului Windows care reprezintă numărul de intervale de 100-nanosecunde care au trecut de la ora 12:00 miezul nopţii, 1 ianuarie 1601 era noastră (C.E.) Timp universal (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>129876402529842245</code> într-o valoare datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Creează o valoare datetimezone din formatele datetime locale şi universale.",
        "Documentation.LongDescription": "Creează o valoare <code>datetime</code> dintr-o reprezentare textuală, <code>text</code>. Un parametru <code>record</code> opțional, <code>options</code>, poate fi furnizat pentru a specifica proprietăți suplimentare. <code>record</code> poate conține următoarele câmpuri:\r\n<ul>\r\n   <li><code>Format</code>: o valoare <code>text</code> ce indică formatul de utilizat. Pentru mai multe detalii, accesați https://go.microsoft.com/fwlink/?linkid=2180104 și https://go.microsoft.com/fwlink/?linkid=2180105. Dacă se omite acest câmp sau se furnizează <code>null</code>, acest lucru va duce la analizarea datei utilizând cel mai bun efort.</li>\r\n   <li><code>Culture</code>: atunci când <code>Format</code> nu este null, <code>Culture</code> controlează anumiți specificatori de format. De exemplu, în <code>\"en-US\"</code> <code>\"MMM\"</code> este <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, în timp ce în <code>\"ru-RU\"</code> <code>\"MMM\"</code> este <code>\"янв\", \"фев\", \"мар\", ...</code>. Atunci când <code>Format</code> este <code>null</code>, <code>Culture</code> controlează formatul implicit de utilizat. Atunci când <code>Culture</code> este <code>null</code> sau se omite, se utilizează <code>Culture.Current</code>.</li>\r\n</ul>\r\nPentru a accepta fluxurile de lucru moștenite, <code>options</code> poate fi, de asemenea, o valoare text. Acesta are același comportament ca și cum <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia <code>\"2010-12-31T01:30:00\"</code> într-o valoare datetime.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Efectuați conversia <code>\"2010-12-31T01:30:00.121212\"</code> într-o valoare datetime.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Efectuați conversia <code>\"2010-12-31T01:30:00\"</code> într-o valoare datetime.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Efectuați conversia <code>\"20101231T013000\"</code> într-o valoare datetime.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Indică dacă această valoare datetime apare în timpul orei curente, după cum este determinat de data și ora curente ale sistemului.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> apare în timpul orei curente, după cum este determinat de data și ora curente ale sistemului.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă ora curentă a sistemului este în ora curentă.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Indică dacă această valoare datetime apare în timpul minutului curent, după cum este determinat de data și ora curente ale sistemului.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> apare în timpul minutului curent, după cum este determinat de data și ora curente ale sistemului.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă ora curentă a sistemului este în minutul curent.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Indică dacă această valoare datetime apare în timpul secundei curente, după cum este determinat de data și ora curente ale sistemului.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> apare în timpul secundei curente, după cum este determinat de data și ora curente ale sistemului.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă ora curentă a sistemului este în secunda curentă.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Indică dacă această valoare datetime cade în timpul orei următoare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ora curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul orei următoare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ora curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă ora ulterioară celei indicate de ora curentă a sistemului este în ora următoare.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Indică dacă această valoare datetime cade în timpul minutului următor, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în minutul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul minutului următor, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în minutul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă minutul ulterior celui indicat de ora curentă a sistemului este în minutul următor.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Indică dacă această valoare datetime cade în timpul secundei următoare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în secunda curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul următoarei secunde, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în secunda curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă secunda ulterioară celei indicate de ora curentă a sistemului este în următoarea secundă.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Indică dacă această valoare datetime cade în ora anterioară, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ora curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul orei anterioare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în ora curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă ora anterioară celei indicate de ora curentă a sistemului este în ora anterioară.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Indică dacă această valoare datetime cade în minutul anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în minutul curent.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul minutului anterior, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în minutul curent.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă minutul anterior celui indicat de ora curentă a sistemului este în minutul anterior.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Indică dacă această valoare datetime cade în secunda anterioară, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în secunda curentă.",
        "Documentation.LongDescription": "Indică dacă valoarea datetime dată <code>dateTime</code> cade în timpul secundei anterioare, după cum este determinat de data și ora curente ale sistemului. Rețineți că această funcție va returna false atunci când primește o valoare care cade în secunda curentă.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valoare <code>datetime</code> sau <code>datetimezone</code> de evaluat.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determină dacă secunda anterioară celei indicate de ora curentă a sistemului este în secunda precedentă.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Returnează componenta time a valorii datetime date.",
        "Documentation.LongDescription": "Returnează componenta time a valorii datetime date, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi valoarea pentru oră pentru #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Returnează o înregistrare ce conţine părţi din valoarea datetime.",
        "Documentation.LongDescription": "Returnează o înregistrare care conține părți din valoarea datetime dată, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: o valoare <code>datetime</code> pentru care urmează să fie calculată înregistrarea părților sale.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi valoarea <code>#datetime(2011, 12, 31, 11, 56, 2)</code> într-o înregistrare ce conţine valori pentru dată şi oră.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Returnează o reprezentare textuală a valorii datetime.",
        "Documentation.LongDescription": "Returnează o reprezentare textuală a <code>dateTime</code>. Un parametru opțional de <code>record</code>, <code>options</code>, poate fi furnizat pentru a specifica proprietăți suplimentare. <code>culture</code> este utilizat numai pentru fluxuri de lucru moștenite. <code>record</code> poate conține următoarele câmpuri:\r\n<ul>\r\n   <li><code>Format</code>: o valoare <code>text</code> ce indică formatul de utilizat. Pentru mai multe detalii, accesați https://go.microsoft.com/fwlink/?linkid=2180104 și https://go.microsoft.com/fwlink/?linkid=2180105. Omiterea acestui câmp sau furnizarea <code>null</code> va duce la formatarea datei utilizând valoarea implicită definită de <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: atunci când <code>Format</code> nu este nul, <code>Culture</code> controlează anumiți specificatori de format. De exemplu, în <code>\"en-US\"</code> <code>\"MMM\"</code> este <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, în timp ce în <code>\"ru-RU\"</code> <code>\"MMM\"</code> este <code>\"янв\", \"фев\", \"мар\", ...</code>. Atunci când <code>Format</code> este <code>null</code>, <code>Culture</code> controlează formatul implicit de utilizat. Atunci când <code>Culture</code> este <code>null</code> sau se omite, se utilizează <code>Culture.Current</code>.</li>\r\n</ul>\r\nPentru a accepta fluxurile de lucru moștenite, <code>options</code> și <code>culture</code> pot fi, de asemenea, valori text. Aceasta are același comportament ca și cum <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia <code>#datetime(2010, 12, 31, 01, 30, 25)</code> într-o valoare <code>text</code>. <i>Rezultatul poate varia în funcție de cultura actuală.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Efectuați conversia utilizând un format particularizat și cultura germană.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Efectuați conversia utilizând modelul ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Creează o valoare datetimezone din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>datetimezone</code> din <code>value</code> dat. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, \"ro-RO\").\r\nDacă <code>value</code> dat este <code>null</code>, <code>DateTimeZone.From</code> returnează <code>null</code>. Dacă <code>value</code> dat este <code>datetimezone</code>, se returnează <code>value</code>. Valorile următoarelor tipuri pot fi convertite într-o valoare <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: o valoare <code>datetimezone</code> din reprezentarea textuală. Pentru detalii, consultați <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: o valoare <code>datetimezone</code> cu <code>value</code> drept componentă date, <code>12:00:00 AM</code> drept componentă time și decalajul corespunzător fusului orar local.</li>\r\n        <li><code>datetime</code>: o valoare <code>datetimezone</code> cu <code>value</code> ca valoare datetime și decalajul corespunzător fusului orar local.</li>\r\n        <li><code>time</code>: o valoare <code>datetimezone</code> cu echivalentul de tip date al OLE Automation Date de <code>0</code> pentru componenta date, <code>value</code> pentru componenta time și decalajul corespunzător fusului orar local.</li>\r\n        <li><code>number</code>: o valoare <code>datetimezone</code> cu echivalentul de tip datetime al datei OLE Automation exprimată de <code>value</code> și decalajul corespunzător fusului orar local.</li>\r\n      </ul>\r\nDacă <code>value</code> este de orice alt tip, se returnează o eroare.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>\"2020-10-30T01:30:00-08:00\"</code> la o valoare <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Creează o valoare datetimezone dintr-un număr lung pe 64 de biţi.",
        "Documentation.LongDescription": "Creează o valoare <code>datetimezone</code> din valoarea <code>fileTime</code> și o convertește în fusul orar local. Ora fișierului este ora fișierului Windows care reprezintă numărul de intervale de 100-nanosecunde care au trecut de la ora 12:00 miezul nopții, 1 ianuarie, 1601 era noastră. (C.E.) Timp universal (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>129876402529842245</code> într-o valoare datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Creează un datetimezone din formatele datetimezone local, universal și particularizat.",
        "Documentation.LongDescription": "Creează o valoare <code>datetimezone</code> dintr-o reprezentare textuală, <code>text</code>. Un parametru <code>record</code> opțional, <code>options</code>, poate fi furnizat pentru a specifica proprietăți suplimentare. <code>record</code> poate conține următoarele câmpuri:\r\n<ul>\r\n   <li><code>Format</code>: o valoare <code>text</code> ce indică formatul de utilizat. Pentru mai multe detalii, accesați https://go.microsoft.com/fwlink/?linkid=2180104 și https://go.microsoft.com/fwlink/?linkid=2180105. Dacă se omite acest câmp sau se furnizează <code>null</code>, acest lucru va duce la analizarea datei utilizând cel mai bun efort.</li>\r\n   <li><code>Culture</code>: atunci când <code>Format</code> nu este null, <code>Culture</code> controlează anumiți specificatori de format. De exemplu, în <code>\"en-US\"</code> <code>\"MMM\"</code> este <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, în timp ce în <code>\"ru-RU\"</code> <code>\"MMM\"</code> este <code>\"янв\", \"фев\", \"мар\", ...</code>. Atunci când <code>Format</code> este <code>null</code>, <code>Culture</code> controlează formatul implicit de utilizat. Atunci când <code>Culture</code> este <code>null</code> sau se omite, se utilizează <code>Culture.Current</code>.</li>\r\n</ul>\r\nPentru a accepta fluxurile de lucru moștenite, <code>options</code> poate fi, de asemenea, o valoare text. Acesta are același comportament ca și cum <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia <code>\"2010-12-31T01:30:00-08:00\"</code> într-o valoare <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Efectuați conversia utilizând un format particularizat și cultura germană.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Efectuați conversia utilizând ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Elimină informaţiile despre fusul orar din valoarea datetimezone dată.",
        "Documentation.LongDescription": "Returnează o valoare #datetime din <code>dateTimeZone</code> cu informaţiile legate de fusul orar eliminate.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Elimină informaţiile despre fusul orar din valoarea #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Converteşte componenta timezone la fusul orar local.",
        "Documentation.LongDescription": "Modifică informaţiile despre fusul orar din valoarea datetimezone <code>dateTimeZone</code> la informaţii despre fusul orar local.\r\n    Dacă <code>dateTimeZone</code> nu conţine o componentă timezone, sunt adăugate informaţiile despre fusul orar local.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Modificaţi informaţiile despre fusul orar pentru #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) la fusul orar local (se presupune că acesta este PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Returnează o înregistrare ce conţine părţi din valoarea datetimezone.",
        "Documentation.LongDescription": "Returnează o înregistrare care conține părți din valoarea datetimezone specificată, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: o valoare <code>datetimezone</code> pentru care urmează să fie calculată înregistrarea părților sale.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi valoarea <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> într-o înregistrare ce conţine valorile Date, Time şi Zone.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Returnează o reprezentare textuală a valorii datetimezone.",
        "Documentation.LongDescription": "Returnează o reprezentare textuală a <code>dateTimeZone</code>. Un parametru opțional de <code>record</code>, <code>options</code>, poate fi furnizat pentru a specifica proprietăți suplimentare. <code>culture</code> este utilizat numai pentru fluxuri de lucru moștenite. <code>record</code> poate conține următoarele câmpuri:\r\n<ul>\r\n   <li><code>Format</code>: o valoare <code>text</code> ce indică formatul de utilizat. Pentru mai multe detalii, accesați https://go.microsoft.com/fwlink/?linkid=2180104 și https://go.microsoft.com/fwlink/?linkid=2180105. Omiterea acestui câmp sau furnizarea <code>null</code> va duce la formatarea datei utilizând valoarea implicită definită de <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: atunci când <code>Format</code> nu este nul, <code>Culture</code> controlează anumiți specificatori de format. De exemplu, în <code>\"en-US\"</code> <code>\"MMM\"</code> este <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, în timp ce în <code>\"ru-RU\"</code> <code>\"MMM\"</code> este <code>\"янв\", \"фев\", \"мар\", ...</code>. Atunci când <code>Format</code> este <code>null</code>, <code>Culture</code> controlează formatul implicit de utilizat. Atunci când <code>Culture</code> este <code>null</code> sau se omite, se utilizează <code>Culture.Current</code>.</li>\r\n</ul>\r\nPentru a accepta fluxurile de lucru moștenite, <code>options</code> și <code>culture</code> pot fi, de asemenea, valori text. Aceasta are același comportament ca și cum <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> într-o valoare <code>text</code>. <i>Rezultatul poate varia în funcție de cultura actuală.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Efectuați conversia utilizând un format particularizat și cultura germană.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Efectuați conversia utilizând modelul ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Converteşte componenta timezone la fusul orar UTC.",
        "Documentation.LongDescription": "Modifică informaţiile despre fusul orar din valoarea datetime <code>dateTimeZone</code> la informaţii despre fusul orar UTC sau Timp universal.\r\n    Dacă <code>dateTimeZone</code> nu conţine o componentă timezone, sunt adăugate informaţiile despre fusul orar UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Modificaţi informaţiile despre fusul orar pentru #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) la fusul orar UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Modifică fusul orar al valorii.",
        "Documentation.LongDescription": "Modifică fusul orar al valorii.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Modifică fusul orar al valorii.",
        "Documentation.LongDescription": "Modifică fusul orar al valorii.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Creează o valoare Decimal din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> Decimal din valoarea <code>value</code> dată. Dacă valoarea <code>value</code> dată este <code>null</code>, <code>Decimal.From</code> returnează <code>null</code>. Dacă valoarea <code>value</code> dată este un <code>number</code> în intervalul de numere Decimal, se returnează <code>value</code>, altfel se returnează o eroare. Dacă valoarea <code>value</code> dată este de orice alt tip, va fi convertită într-o valoare <code>number</code> utilizând <code>Number.FromText</code>. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obțineți valoarea <code>number</code> Decimal pentru <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Returnează conținutul tabelului Delta Lake.",
        "Documentation.LongDescription": "Returnează conținutul tabelului Delta Lake.",
        "Documentation.Category": "Se accesează datele",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Creează o valoare Double din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> Double din valoarea <code>value</code> dată. Dacă valoarea <code>value</code> dată este <code>null</code>, <code>Double.From</code> returnează <code>null</code>. Dacă valoarea <code>value</code> dată este un <code>number</code> în intervalul de numere Double, se returnează <code>value</code>, altfel se returnează o eroare. Dacă valoarea <code>value</code> dată este de orice alt tip, va fi convertită într-o valoare <code>number</code> utilizând <code>Number.FromText</code>. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obțineți valoarea <code>number</code> Double pentru <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Returnează porțiunea de zile dintr-o durată.",
        "Documentation.LongDescription": "Returnează porțiunea de zile din <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrageți numărul de zile dintre două date.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Creează o durată din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>duration</code> din <code>value</code> dat. Dacă <code>value</code> dat este <code>null</code>, <code>Duration.From</code> returnează <code>null</code>.  Dacă <code>value</code> dat este <code>duration</code>, se returnează <code>value</code>. Valorile de următoarele tipuri pot fi convertite la o valoare <code>duration</code>:\r\n      <ul>\r\n        <li><code>text</code>: o valoare <code>duration</code> din formele textuale ale timpului scurs (d.h:m:s). Pentru detalii, consultați <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>: un echivalent de tip <code>duration</code> pentru numărul zilelor întregi sau fracționare exprimate de <code>value</code>.</li>\r\n      </ul>\r\nDacă <code>value</code> este de orice alt tip, se returnează o eroare.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>2.525</code> într-o valoare <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Returnează o valoare pentru durată din formele textuale ale timpului scurs (d.h:m:s).",
        "Documentation.LongDescription": "Returnează o valoare pentru durată din textul specificat, <code>text</code>. Următoarele formate pot fi analizate de această funcție:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Toate intervalele includ capetele)<br>\r\n        ddd: numărul de zile.<br>\r\n        hh: numărul de ore, între 0 și 23.<br>\r\n        mm: numărul de minute, între 0 și 59.<br>\r\n        ss: numărul de secunde, între 0 și 59.<br>\r\n        ff: fracțiune de secunde, între 0 și 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>\"2.05:55:20\"</code> într-o valoare <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Returnează porțiunea de ore dintr-o durată.",
        "Documentation.LongDescription": "Returnează porțiunea de ore din <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrageți orele dintr-o valoare pentru durată.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Returnează porțiunea de minute dintr-o durată.",
        "Documentation.LongDescription": "Returnează porțiunea de minute din <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrageți minutele dintr-o valoare pentru durată.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Returnează porțiunea de secunde dintr-o durată.",
        "Documentation.LongDescription": "Returnează porțiunea de secunde din <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrageți secundele dintr-o valoare pentru durată.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Returnează o înregistrare ce conţine părţile duratei.",
        "Documentation.LongDescription": "Returnează o înregistrare care conține părți din valoarea durată, <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: o valoare <code>duration</code> de la care este creată înregistrarea.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>#duration(2, 5, 55, 20)</code> într-o înregistrare a părţilor, inclusiv zile, ore, minute şi secunde dacă există.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Returnează text în forma „d.h:m:s”.",
        "Documentation.LongDescription": "Returnează o reprezentare textuală în forma „day.hour:mins:sec” a valorii durată date, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: o <code>durată</code> din care se calculează reprezentarea textuală.</li>\r\n  <li><code>format</code>: <i>[Opțional]</i> Depreciat, va returna eroare dacă nu este nul</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>#duration(2, 5, 55, 20)</code> într-o valoare text.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Returnează numărul total de zile pe care le cuprinde această durată.",
        "Documentation.LongDescription": "Returnează numărul total de zile cuprinse în <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numărul total de zile cuprinse într-o valoare pentru durată.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Returnează numărul total de ore pe care le cuprinde această durată.",
        "Documentation.LongDescription": "Returnează numărul total de ore cuprinse în <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numărul total de ore cuprinse într-o valoare pentru durată.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Returnează numărul total de minute cuprinse în această durată.",
        "Documentation.LongDescription": "Returnează numărul total de minute cuprinse în <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numărul total de minute cuprinse într-o valoare pentru durată.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Returnează numărul total de secunde cuprinse în această durată.",
        "Documentation.LongDescription": "Returnează numărul total de secunde cuprinse în <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numărul total de secunde cuprinse într-o valoare pentru durată.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Returnează o înregistrare de eroare din valorile text furnizate pentru motiv, mesaj şi detalii.",
        "Documentation.LongDescription": "Returnează o înregistrare de eroare din valorile text furnizate pentru motiv, mesaj şi detalii.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Returnează reprezentarea codului sursă M a unei valori constante.",
        "Documentation.LongDescription": "Returnează reprezentarea codului sursă M a unei valori constante.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Obțineți reprezentarea codului sursă M pentru o valoare numerică.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Obțineți reprezentarea codului sursă M pentru o valoare dată.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Obțineți reprezentarea codului sursă M a unei valori text.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Returnează rezultatul evaluării unei expresii M.",
        "Documentation.LongDescription": "Returnează rezultatul evaluării unei expresii M <code>document</code>, cu identificatorii disponibili care pot fi menționați ca definiți de <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Evaluați o sumă simplă.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Evaluați o sumă mai complexă.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Evaluați concatenarea unei valori text cu un identificator.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Returnează reprezentarea codului sursă M a unui identificator.",
        "Documentation.LongDescription": "Returnează reprezentarea codului sursă M a unui identificator <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Obțineți reprezentarea codului sursă M pentru un identificator.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Obțineți reprezentarea codului sursă M pentru un identificator care conține un spațiu.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Returnează conţinutul fişierului specificat ca binar.",
        "Documentation.LongDescription": "Returnează conținutul fișierului, <code>path</code>, ca Binary. Parametrul <code>options</code> este destinat în prezent doar utilizării interne.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Returnează dacă o funcție anume este sau nu considerată o sursă de date.",
        "Documentation.LongDescription": "Returnează dacă <code>function</code> este sau nu considerată o sursă de date.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Translatează un text care reprezintă o valoare geografică în format WKT (Well-Known Text) într-o înregistrare structurată.",
        "Documentation.LongDescription": "Translatează un text care reprezintă o valoare geografică în format WKT (Well-Known Text) într-o înregistrare structurată. WKT este un format standard definit de Open Geospatial Consortium (OGC) și este formatul tipic de serializare utilizat de bazele de date, inclusiv SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Translatează o valoare de punct geografic structurat în reprezentarea sa WKT (Well-Known Text).",
        "Documentation.LongDescription": "Translatează o valoare de punct geografic structurat într-o reprezentare WKT (Well-Known Text) după cum este definită de Open Geospatial Consortium (OGC), precum și formatul de serializare utilizat de mai multe baze de date, inclusiv SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Translatează textul care reprezintă o valoare geometrică în format WKT (Well-Known Text) într-o înregistrare structurată.",
        "Documentation.LongDescription": "Translatează textul care reprezintă o valoare geometrică în format WKT (Well-Known Text) într-o înregistrare structurată. WKT este un format standard definit de Open Geospatial Consortium (OGC) și este formatul tipic de serializare utilizat de bazele de date, inclusiv SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Translatează o valoare de punct geometric structurat în reprezentarea sa de WKT (Well-Known Text).",
        "Documentation.LongDescription": "Translatează o valoare de punct geometric structurat în reprezentarea sa WKT (Well-Known Text), după cum este definită de Open Geospatial Consortium (OGC), precum și formatul de serializare utilizat de mai multe baze de date, inclusiv SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Returnează o valoare GUID din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>Guid.Type</code> din <code>value</code> dat. Dacă <code>value</code> dat este <code>null</code>, <code>Guid.From</code> returnează <code>null</code>.  Se va efectua o verificare pentru a se stabili dacă <code>value</code> dat este într-un format acceptabil. Formatele acceptabile sunt furnizate în exemple.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "GUID-ul poate fi furnizat ca 32 de cifre hexazecimale contigue.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID-ul poate fi furnizat ca 32 de cifre hexazecimale separate prin cratime în blocuri de 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID-ul poate fi furnizat ca 32 de cifre hexazecimale separate prin cratime și incluse între acolade.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID-ul poate fi furnizat ca 32 de cifre hexazecimale separate prin cratime și incluse între paranteze.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Creează un număr întreg pe 16 de biți din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> întreagă, pe 16 biți, din <code>value</code>dată. Dacă <code>value</code> dată este <code>null</code>, <code>Int16.From</code> returnează <code>null</code>. Dacă <code>value</code> dată este un <code>number</code> în intervalul de numere întregi pe 16 biți fără parte fracționară, se returnează <code>value</code>. Dacă are o parte fracționară, numărul este rotunjit cu modul de rotunjire specificat. Modul de rotunjire implicit este <code>RoundingMode.ToEven</code>. Dacă <code>value</code> este de orice alt tip, se va efectua mai întâi conversia la un <code>number</code> utilizând <code>Number.FromText</code>. Consultați <code>Number.Round</code> pentru modurile de rotunjire disponibile. De asemenea, poate fi furnizată o <code>culture</code> opțională (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obțineți valoarea <code>number</code> întreagă, pe 16 biți, pentru <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obțineți valoarea <code>number</code> întreagă, pe 16 biți, pentru <code>\"4.5\"</code>, utilizând <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Creează un număr întreg pe 32 de biți din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> întreagă, pe 32 biți, din <code>value</code>dată. Dacă <code>value</code> dată este <code>null</code>, <code>Int32.From</code> returnează <code>null</code>. Dacă <code>value</code> dată este un <code>number</code> în intervalul de numere întregi pe 32 biți fără parte fracționară, se returnează <code>value</code>. Dacă are o parte fracționară, numărul este rotunjit cu modul de rotunjire specificat. Modul de rotunjire implicit este <code>RoundingMode.ToEven</code>. Dacă <code>value</code> este de orice alt tip, se va efectua mai întâi conversia la un <code>number</code> utilizând <code>Number.FromText</code>. Consultați <code>Number.Round</code> pentru modurile de rotunjire disponibile. De asemenea, poate fi furnizată o <code>culture</code> opțională (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obțineți valoarea <code>number</code> întreagă, pe 32 de biți, pentru <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obțineți valoarea <code>number</code> întreagă, pe 32 de biți, pentru <code>\"4.5\"</code>, utilizând <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Creează un număr întreg pe 64 de biți din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> întreagă, pe 64 biți, din <code>value</code>dată. Dacă <code>value</code> dată este <code>null</code>, <code>Int64.From</code> returnează <code>null</code>. Dacă <code>value</code> dată este un <code>number</code> în intervalul de numere întregi pe 64 biți fără parte fracționară, se returnează <code>value</code>. Dacă are o parte fracționară, numărul este rotunjit cu modul de rotunjire specificat. Modul de rotunjire implicit este <code>RoundingMode.ToEven</code>. Dacă <code>value</code> este de orice alt tip, se va efectua mai întâi conversia la un <code>number</code> utilizând <code>Number.FromText</code>. Consultați <code>Number.Round</code> pentru modurile de rotunjire disponibile. De asemenea, poate fi furnizată o <code>culture</code> opțională (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obține valoarea <code>number</code> întreagă pe 64 de biți a <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obțineți valoarea <code>number</code> întreagă pe 64 de biți a <code>\"4.5\"</code> utilizând <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Creează un număr întreg pe 8 biți, cu semn, din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> întreagă, pe 8 biți, din <code>value</code>dată. Dacă <code>value</code> dată este <code>null</code>, <code>Int8.From</code> returnează <code>null</code>. Dacă <code>value</code> dată este un <code>number</code> în intervalul de numere întregi pe 8 biți fără parte fracționară, se returnează <code>value</code>. Dacă are o parte fracționară, numărul este rotunjit cu modul de rotunjire specificat. Modul de rotunjire implicit este <code>RoundingMode.ToEven</code>. Dacă <code>value</code> este de orice alt tip, se va efectua mai întâi conversia la un <code>number</code> utilizând <code>Number.FromText</code>. Consultați <code>Number.Round</code> pentru modurile de rotunjire disponibile. De asemenea, poate fi furnizată o <code>culture</code> opțională (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obțineți valoarea <code>number</code> întreagă, pe 8 biți și cu semn pentru <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obțineți valoarea <code>number</code> întreagă pe 8 biți și cu semn pentru <code>\"4.5\"</code>, utilizând <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Returnează arborele sintactic abstract (AST) pentru corpul unei funcții.",
        "Documentation.LongDescription": "<p>Returnează arborele de sintaxă abstract (AST) pentru corpul <code>function</code>, normalizat într-o <i>expresie de linie</i>:\r\n<ul>\r\n  <li>Funcția trebuie să fie un argument 1 lambda.</li>\r\n  <li>Toate referințele la parametrul funcției sunt înlocuite cu <code>ItemExpression.Item</code>.</li>\r\n  <li>AST va fi simplificată pentru a conține numai noduri de tipul:\r\n    <ul>\r\n      <li><code>Constantă</code></li>\r\n      <li><code>Invocare</code></li>\r\n      <li><code>Unar</code></li>\r\n      <li><code>Binar</code></li>\r\n      <li><code>Dacă</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Eroare în cazul în care nu se poate returna o expresie AST de element pentru corpul <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Returnează AST pentru corpul funcției <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Returnează conţinutul documentului JSON.",
        "Documentation.LongDescription": "Returnează conţinutul documentului JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Produce o reprezentare JSON a unei valori date.",
        "Documentation.LongDescription": "<p>Generează o reprezentare JSON a unei valori date <code>value</code> cu o codificare de text specificată de <code>encoding</code>. Dacă <code>encoding</code> se omite, se utilizează UTF8. Valorile sunt reprezentate după cum urmează:</p>\r\n <ul>\r\n        <li>valorile nule, text și logice sunt reprezentate ca tipuri JSON corespunzătoare</li>\r\n        <li>Numerele sunt reprezentate ca numere în JSON, cu excepția faptului că  <code>#infinity</code>, <code>-#infinity</code> și <code>#nan</code> sunt convertite la valori nule</li>\r\n        <li>Listele sunt reprezentate ca matrice JSON</li>\r\n        <li>Înregistrările sunt reprezentate ca obiecte JSON</li>\r\n        <li>Tabelele sunt reprezentate ca matrice de obiecte</li>\r\n        <li>Datele, orele, valorile dată și oră, valorile dată și fus orar și duratele sunt reprezentate ca text ISO-8601</li>\r\n        <li>Valorile binare sunt reprezentate ca text codificat în baza 64</li>\r\n        <li>Tipurile și funcțiile generează o eroare</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Faceți conversia unei valori complexe la JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Convertește o valoare binară într-o listă de valori text divizate la sfârșitul de linie. Dacă se specifică un stil de citare, atunci sfârșiturile de linie pot apărea între ghilimele. Dacă includeLineSeparators are valoarea true, atunci caracterele sfârșit de linie sunt incluse în text.",
        "Documentation.LongDescription": "Convertește o valoare binară într-o listă de valori text divizate la sfârșitul de linie. Dacă se specifică un stil de citare, atunci sfârșiturile de linie pot apărea între ghilimele. Dacă includeLineSeparators are valoarea true, atunci caracterele sfârșit de linie sunt incluse în text.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Convertește o valoare text într-o listă de valori text divizate la sfârșiturile de linie. Dacă includeLineSeparators este true, atunci caracterele sfârșit de linie sunt incluse în text.",
        "Documentation.LongDescription": "Convertește o valoare text într-o listă de valori text divizate la sfârșiturile de linie. Dacă includeLineSeparators este true, atunci caracterele sfârșit de linie sunt incluse în text.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (implicit) nu este necesar un comportament de includere între ghilimele.</li>\r\n            <li><code>QuoteStyle.Csv:</code> includerea între ghilimele se efectuează ca în formatul CSV. Se utilizează un caracter ghilimea dublă pentru a demarca astfel de regiuni și se mai utilizează o pereche de ghilimele duble pentru a indica prezența unui caracter ghilimea unică într-o astfel de regiune. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Converteşte o listă de texte într-o valoare binară utilizând codificarea specificată şi lineSeparator. Valoarea lineSeparator specificată este adăugată fiecărei linii.  Dacă nu se specifică, atunci se utilizează caracterele de tip sfârşit de linie şi linie nouă.",
        "Documentation.LongDescription": "Converteşte o listă de texte într-o valoare binară utilizând codificarea specificată şi lineSeparator. Valoarea lineSeparator specificată este adăugată fiecărei linii.  Dacă nu se specifică, atunci se utilizează caracterele de tip sfârşit de linie şi linie nouă.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Converteşte o listă de texte într-un singur text.  Valoarea lineSeparator specificată este adăugată la fiecare linie.  Dacă nu se specifică, atunci se utilizează caracterele de tip sfârşit de linie şi linie nouă.",
        "Documentation.LongDescription": "Converteşte o listă de texte într-un singur text.  Valoarea lineSeparator specificată este adăugată la fiecare linie.  Dacă nu se specifică, atunci se utilizează caracterele de tip sfârşit de linie şi linie nouă.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Returnează true dacă toate expresiile sunt adevărate.",
        "Documentation.LongDescription": "Returnează true dacă toate expresiile din lista <code>list</code> sunt adevărate.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă toate expresiile din lista {true, true, 2 > 0} sunt adevărate.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Determinaţi dacă toate expresiile din lista {true, true, 2 < 0} sunt adevărate.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Returnează true dacă orice expresie este adevărată.",
        "Documentation.LongDescription": "Returnează true dacă orice expresie din lista <code>list</code> este adevărată.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi dacă oricare dintre expresiile din lista {true, false, 2 > 0} sunt adevărate.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Determinaţi dacă oricare dintre expresiile din lista {2 = 0, false, 2 < 0} este adevărată.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Returnează media valorilor. Funcţionează cu valorile numerice, pentru dată, datetime, datetimezone şi pentru durată.",
        "Documentation.LongDescription": "Returnează valoare medie pentru elementele din listă, <code>list</code>. Rezultatul este oferit în acelaşi tip datatype ca şi valorile din listă. Funcţionează numai cu valorile numerice, pentru dată, pentru oră, datetime, datetimezone şi pentru durată.\r\n    Dacă lista este necompletată, se returnează null.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi media din lista de numere, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Găsiţi media valorilor date 1 ianuarie 2011, 2 ianuarie 2011 şi 3 ianuarie 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Utilizează o listă ca zonă tampon.",
        "Documentation.LongDescription": "Utilizează lista <code>list</code> ca zonă tampon în memorie. Rezultatul acestui apel este o listă stabilă.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o copie stabilă a listei {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Returnează o singură listă prin combinarea mai multor liste.",
        "Documentation.LongDescription": "Preia o listă de liste, <code>lists</code>, şi le îmbină într-o singură listă nouă.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Combinaţi cele două liste simple {1, 2} şi {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Combinaţi cele două liste, {1, 2} şi {3, {4, 5}}, dintre care una conţine o listă imbricată.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Returnează numărul de elemente din listă.",
        "Documentation.LongDescription": "Returnează numărul de elemente din lista <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi numărul de valori din lista {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Returnează o listă de valori cu duplicatele eliminate.",
        "Documentation.LongDescription": "Returnează o listă ce conţine toate valorile din lista <code>list</code> cu duplicatele eliminate. Dacă lista este necompletată, rezultatul este o listă necompletată.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi duplicatele din lista {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Returnează prima valoare a listei sau valoarea implicită specificată dacă este necompletată.",
        "Documentation.LongDescription": "Returnează primul element din lista <code>list</code> sau valoarea implicită opţională, <code>defaultValue</code>, dacă lista este necompletată.\r\n    Dacă lista este necompletată şi nu se specifică o valoare implicită, funcţia returnează <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi prima valoare din lista {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Aflaţi prima valoare din lista {}. Dacă lista este necompletată, se returnează -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Returnează intersecţia valorilor pentru listă găsite în datele introduse.",
        "Documentation.LongDescription": "Returnează intersecția valorilor de listă găsite în lista de intrare <code>lists</code>. Se poate specifica un parametru opțional, <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi intersecţia listelor {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Indică dacă există duplicate în listă.",
        "Documentation.LongDescription": "Returnează o valoare logică dacă există duplicate în lista <code>list</code>; <code>true</code> dacă lista este distinctă, <code>false</code> dacă există valori duplicat. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi dacă lista {1, 2, 3} este distinctă (adică, fără duplicate).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Aflaţi dacă lista {1, 2, 3, 3} este distinctă (adică, fără duplicate).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Returnează true dacă lista este necompletată.",
        "Documentation.LongDescription": "Returnează <code>true</code> dacă lista, <code>list</code>, nu conţine valori (lungime 0). Dacă lista conţine valori (lungime > 0), returnează <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi dacă lista {} este necompletată.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Aflaţi dacă lista {1, 2} este necompletată.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Returnează ultima valoare a listei sau valoarea implicită specificată dacă este necompletată.",
        "Documentation.LongDescription": "Returnează ultimul element din lista <code>list</code> sau valoarea implicită opţională, <code>defaultValue</code>, dacă lista este necompletată.\r\n    Dacă lista este necompletată şi nu se specifică o valoare implicită, funcţia returnează <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi ultima valoare din lista {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Aflaţi ultima valoare din lista {} sau -1 dacă este necompletată.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Returnează ultima valoare din listă.  Opţional, puteţi specifica numărul de valori de returnat sau o condiţie de calificare.",
        "Documentation.LongDescription": "Returnează ultimul element din lista <code>list</code>. Dacă lista este necompletată, apare o excepție.\r\n Această funcție preia un parametru opțional, <code>countOrCondition</code>, pentru a accepta colectarea mai multor elemente sau filtrarea elementelor. <code>countOrCondition</code> poate fi specificat în trei moduri:\r\n <ul>\r\n  <li>Dacă se specifică un număr, se returnează maximum numărul de elemente respectiv. </li>\r\n  <li>Dacă se specifică o condiție, sunt returnate toate elementele care îndeplinesc inițial condiția, începând de la sfârșitul listei. Odată ce un element nu îndeplinește condiția, nu mai sunt luate în considerare elementele ulterioare. </li>\r\n  <li>Dacă acest parametru este nul, este returnat ultimul element din listă.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi ultima valoare din lista {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Găsiţi ultimele valori din lista {3, 4, 5, -1, 7, 8, 2} care sunt mai mari decât 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Returnează valoarea maximă sau valoarea implicită pentru o listă necompletată.",
        "Documentation.LongDescription": "Returnează elementul maxim din lista <code>list</code> sau valoarea implicită opțională, <code>default</code>, dacă lista este goală.\r\n    O valoare comparisonCriteria opțională, <code>comparisonCriteria</code>, poate fi specificată pentru a determina modul de comparare a elementelor din listă. Dacă acest parametru este nul, atunci se utilizează funcția de comparare implicită.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi numărul maxim din lista {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Aflaţi numărul maxim din lista {} sau returnaţi -1 dacă este necompletată. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Returnează valoarea mediană din listă.",
        "Documentation.LongDescription": "Returnează elementul median din lista <code>list</code>. Această funcție returnează <code>null</code> dacă lista nu conține valori non-<code>null</code>.\r\n    Dacă există un număr par de elemente, funcția alege pe cel mai mic dintre cele două elemente mediane, cu excepția cazului în care lista este\r\n    compusă în întregime din elemente datetime, durate, numere sau ore, caz în care returnează media celor două elemente.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi elementul median din lista <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Returnează valoarea minimă sau valoarea implicită pentru o listă necompletată.",
        "Documentation.LongDescription": "Returnează elementul minim din lista <code>list</code> sau valoarea implicită opțională, <code>default</code>, dacă lista este goală.\r\n    O valoare comparisonCriteria opțională, <code>comparisonCriteria</code>, poate fi specificată pentru a determina modul de comparare a elementelor din listă. Dacă acest parametru este nul, atunci se utilizează funcția de comparare implicită.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi numărul minim din lista {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Aflaţi numărul minim din lista {} sau returnaţi -1 dacă este necompletată. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Returnează valoarea cea mai frecventă din listă.",
        "Documentation.LongDescription": "Returnează elementul care apare cel mai frecvent în listă, <code>list</code>. Dacă lista este goală, se generează o excepție. Dacă apar mai multe elemente cu aceeași frecvență maximă, se alege ultimul element. \r\n    Poate fi specificată o valoare <code>comparisonCriteria</code> opțională, <code>equationCriteria</code>, pentru a controla testarea egalității. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Returnează elementul care apare cel mai frecvent în lista <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Găsiţi elementul care apare cel mai frecvent în lista <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Returnează o listă cu cele mai frecvente valori din listă.",
        "Documentation.LongDescription": "Returnează elementul care apare cel mai frecvent în listă, <code>list</code>. Dacă lista este goală, se generează o excepție. Dacă apar mai multe elemente cu aceeași frecvență maximă, se alege ultimul element. \r\n    Poate fi specificată o valoare <code>comparisonCriteria</code> opțională, <code>equationCriteria</code>, pentru a controla testarea egalității. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi elementele care apar cel mai frecvent în lista <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Returnează numărul de elemente care nu sunt null din listă.",
        "Documentation.LongDescription": "Returnează numărul de elemente care nu sunt null din lista <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Returnează o listă de decalaje pentru datele introduse.",
        "Documentation.LongDescription": "Returnează o listă de decalaje pentru lista de intrare <code>list</code>.\r\n    Când se utilizează List.Transform pentru a modifica o listă, lista de poziții poate fi utilizată pentru a oferi acces de transformare la poziție.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi decalajele valorilor din lista {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Returnează produsul numerelor din listă.",
        "Documentation.LongDescription": "Returnează produsul numerelor care nu au valoarea null din listă, <code>numbersList</code>. Returnează null dacă nu există nicio valoare care nu este null în listă.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi produsul numerelor din lista <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Returnează o listă de numere aleatorii.",
        "Documentation.LongDescription": "Returnează o listă de numere aleatorii între 0 și 1, ținând cont de numărul de valori de generat și de o valoare inițială opțională.\r\n<ul>\r\n   <li><code>count</code>: numărul de valori aleatorii de generat.</li>\r\n   <li><code>seed</code>: <i>[opțional]</i> o valoare numerică utilizată pentru a iniția o valoare de pornire pentru generatorul de numere aleatorii. Dacă se omite, este generată o listă unică de numere aleatorii de fiecare dată când apelați funcția. Dacă specificați ca valoare inițială un număr, fiecare apel la funcție generează aceeași listă de numere aleatorii.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de 3 numere aleatorii.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Creaţi o listă de 3 numere aleatorii, specificând valoarea de pornire.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Returnează o listă care ignoră numărul specificat de elemente la începutul listei.",
        "Documentation.LongDescription": "Returnează o listă care elimină primul element din lista <code>list</code>. Dacă lista <code>list</code> este goală, se returnează o listă goală.\r\nAceastă funcție preia un parametru opțional, <code>countOrCondition</code>, pentru a accepta eliminarea mai multor valori, așa cum se arată mai jos.\r\n <ul>\r\n <li>Dacă se specifică un număr, se elimină cel mult numărul de elemente respectiv. </li>\r\n <li>Dacă se specifică o condiție, lista returnată începe cu primul element din <code>list</code> care îndeplinește criteriile. Odată ce un element nu îndeplinește condiția, nu mai sunt luate în considerare elementele ulterioare. </li>\r\n <li>Dacă acest parametru este nul, este aplicat comportamentul implicit. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de la {1, 2, 3, 4, 5} fără primele 3 numere.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Creaţi o listă de la {5, 4, 2, 6, 1} care începe cu un număr mai mic decât 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Returnează o listă care elimină numărul specificat de elemente de la sfârşitul listei.",
        "Documentation.LongDescription": "Returnează o listă care elimină ultimele <code>countOrCondition</code> elemente de la sfârşitul listei <code>list</code>. Dacă <code>list</code> are mai puţin de <code>countOrCondition</code> elemente, se returnează o listă necompletată.\r\n <ul>\r\n <li>Dacă se specifică un număr, sunt eliminate maximum numărul de elemente respectiv. </li>\r\n <li>Dacă se specifică o condiţie, lista returnată se termină cu primul element de la final din <code>list</code> care îndeplineşte criteriile. Odată ce un element nu îndeplineşte condiţia, nu mai sunt luate în considerare elementele ulterioare. </li>\r\n <li>Dacă acest parametru are valoarea null, numai un singur element este eliminat. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de la {1, 2, 3, 4, 5} fără ultimele 3 numere.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Creaţi o listă de la {5, 4, 2, 6, 4} care se termină cu un număr mai mic decât 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Elimină toate valorile „null” din lista specificată.",
        "Documentation.LongDescription": "Elimină toate ocurenţele valorilor „null” din <code>list</code>. Dacă nu există valori „null” în listă, se returnează lista originală.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi valorile „null” din lista {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Inversează numărul valorilor din listă.",
        "Documentation.LongDescription": "Returnează o listă cu valorile din lista <code>list</code> în ordine inversă.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de la {1..10} în ordine inversă.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Returnează singurul element din listă pentru o listă de lungimea unu; în caz contrar, afişează o excepţie.",
        "Documentation.LongDescription": "Dacă există doar un element în lista <code>list</code>, returnează acel element.\r\n    Dacă există mai multe elemente sau lista este goală, funcția generează o excepție.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi singura valoare din lista {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Aflaţi singura valoare din lista {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Returnează singurul element din listă pentru o listă de lungimea unu şi valoarea implicită pentru o listă necompletată.",
        "Documentation.LongDescription": "Dacă există doar un element în lista <code>list</code>, returnează acel element.\r\n    Dacă lista este goală, funcția returnează nul dacă nu se specifică <code>default</code> opțional. Dacă există mai multe elemente în listă, funcția returnează o eroare.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi singura valoare din lista {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Aflaţi singura valoare din lista {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Aflaţi singura valoare din lista {}. Dacă lista este necompletată, se returnează -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Returnează o listă care ignoră numărul specificat de elemente la începutul listei.",
        "Documentation.LongDescription": "Returnează o listă care omite primul element din lista <code>list</code>. Dacă lista <code>list</code> este goală, se returnează o listă goală.\r\nAceastă funcție preia un parametru opțional, <code>countOrCondition</code>, pentru a accepta omiterea mai multor valori, așa cum se arată mai jos.\r\n <ul>\r\n <li>Dacă se specifică un număr, sunt omise cel mult numărul de elemente respectiv. </li>\r\n <li>Dacă se specifică o condiție, lista returnată începe cu primul element din <code>list</code> care îndeplinește criteriile. Odată ce un element nu îndeplinește condiția, nu mai sunt luate în considerare elementele ulterioare. </li>\r\n <li>Dacă acest parametru este nul, este aplicat comportamentul implicit. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de la {1, 2, 3, 4, 5} fără primele 3 numere.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Creaţi o listă de la {5, 4, 2, 6, 1} care începe cu un număr mai mic decât 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Sortează o listă de date conform criteriilor specificate.",
        "Documentation.LongDescription": "Sortează o listă de date, <code>list</code>, conform criteriilor opționale specificate.\r\n    Un parametru opțional, <code>comparisonCriteria</code>, poate fi specificat drept criteriu de comparație. Acesta poate lua următoarele valori:\r\n    <ul>\r\n    <li>Pentru a controla ordinea, criteriul de comparație poate fi o valoare de enumerare Order. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Pentru a calcula o cheie de utilizat pentru sortare, se poate utiliza o funcție de 1 argument. </li>\r\n    <li> Pentru a selecta atât o cheie, cât și o ordine de control, criteriul de comparație poate fi o listă care conține cheia și ordinea (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li>Pentru a controla complet comparația, se poate utiliza o funcție de 2 argumente. Această funcție va primi două elemente din listă (oricare două elemente, în orice ordine). Funcția trebuie să returneze una dintre următoarele valori:\r\n        <ul>\r\n            <li> <code>-1</code>: Primul element este mai mic decât al doilea element.</li>\r\n            <li><code>0</code>: Elementele sunt egale.</li>\r\n            <li><code>1</code>: Primul element este mai mare decât al doilea element.</li>\r\n        </ul>\r\n Value.Compare este o metodă care poate fi utilizată pentru a delega această logică. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Sortaţi lista {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Sortaţi lista {2, 3, 1} în ordine descrescătoare.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Sortaţi lista {2, 3, 1} în ordine descrescătoare utilizând metoda Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Returnează un exemplu pe baza estimării deviaţiei standard.",
        "Documentation.LongDescription": "Returnează un eșantion bazat pe estimarea deviației standard a valorilor din listă, <code>numbersList</code>.\r\n    Dacă <code>numbersList</code> este o listă de numere, se returnează un număr.\r\n    Se generează o excepție pentru o listă goală sau o listă de elemente care nu sunt de tipul <code>number</code>.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi deviaţia standard a numerelor de la 1 la 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Returnează suma elementelor din listă.",
        "Documentation.LongDescription": "Returnează suma valorilor care nu sunt null din listă, <code>list</code>.  Returnează null dacă nu există nicio valoare care nu este null în listă.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi suma numerelor din lista <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Returnează uniunea valorilor din listă găsite în datele introduse.",
        "Documentation.LongDescription": "Preia o listă de liste <code>lists</code>, îmbină elementele în liste individuale și le returnează în lista de ieșire. Ca rezultat, lista returnată conține toate elementele din toate listele de intrare.\r\n    Această operațiune menține semantica tradițională cu dubluri, astfel că valorile duplicate sunt potrivite ca parte a uniunii. \r\n    O valoare opțională criteriu de ecuație, <code>equationCriteria</code>, poate fi specificată pentru a controla testarea egalității. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o uniune a listei {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Returnează o listă de liste prin combinarea elementelor aflate în aceeași poziție în mai multe liste.",
        "Documentation.LongDescription": "Ia o listă de liste, <code>lists</code>, și returnează o listă de liste care combină elementele din aceeași poziție.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Arhivează cele două liste simple {1, 2} și {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Arhivează cele două liste simple de lungimi diferite {1, 2} și {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Creează o valoare logical din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>logical</code> din <code>value</code> dat. Dacă <code>value</code> dat este <code>null</code>, <code>Logical.From</code> returnează <code>null</code>.  Dacă <code>value</code> dat este <code>logical</code>, se returnează <code>value</code>. Valorile următoarelor tipuri pot fi convertite la o valoare <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: o valoare <code>logical</code> din valoarea text, fie <code>„true”</code>, fie <code>„false”</code>. Pentru detalii, consultați <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>false</code> dacă <code>value</code> este egal cu <code>0</code>; în caz contrar, <code>true</code>.</li>\r\n      </ul>\r\nDacă <code>value</code> este de orice alt tip, se returnează o eroare.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>2</code> la o valoare <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Creează o valoare logică din valorile text „true” şi „false”.",
        "Documentation.LongDescription": "Creează o valoare logică din valoarea text <code>text</code>, fie „true”, fie „false”. Dacă <code>text</code> conţine un şir diferit, apare o excepţie. Valoarea text <code>text</code> nu este sensibilă la litere mari şi mici.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o valoare logică din şirul text „true”.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Creaţi o valoare logică din şirul text „a”.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Returnează textul „true” sau „false” dintr-o valoare logică.",
        "Documentation.LongDescription": "Creează o valoare text din valoarea logică <code>logicalValue</code>, fie <code>true</code>, fie <code>false</code>. Dacă <code>logicalValue</code> nu este o valoare logică, apare o excepţie.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o valoare text din valoarea logică <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Returnează valoarea absolută a numărului.",
        "Documentation.LongDescription": "Returnează valoarea absolută a <code>number</code>. Dacă <code>number</code> este nul, <code>Number.Abs</code> returnează nul.\r\n    <ul>\r\n        <li><code>number</code>: o valoare <code>number</code> pentru care urmează să fie calculată valoarea absolută.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Valoarea absolută -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Returnează arccosinusul numărului.",
        "Documentation.LongDescription": "Returnează arccosinusul <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Returnează arcsinusul numărului.",
        "Documentation.LongDescription": "Returnează arcsinusul <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Returnează arctangenta numărului.",
        "Documentation.LongDescription": "Returnează arctangenta <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Returnează un octet în care fiecare bit este opusul datelor introduse.",
        "Documentation.LongDescription": "Returnează rezultatul efectuării operaţiunii „Not” la nivel de bit pe <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Returnează cosinusul numărului.",
        "Documentation.LongDescription": "Returnează cosinusul <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi cosinusul unghiului 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Returnează cosinusul hiperbolic al numărului.",
        "Documentation.LongDescription": "Returnează cosinusul hiperbolic al <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Ridică e la puterea dată.",
        "Documentation.LongDescription": "Returnează rezultatul ridicării e la puterea <code>number</code> (funcția exponențială).\r\n      <ul>\r\n        <li><code>number</code>: o valoare <code>number</code> pentru care urmează să fie calculată funcția exponențială. Dacă <code>number</code> este nul, <code>Number.Exp</code> returnează nul. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ridicaţi e la puterea 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Returnează produsul factorial al numărului.",
        "Documentation.LongDescription": "Returnează produsul factorial al numărului <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi produsul factorial pentru 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Creează un număr din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> din <code>value</code> dat. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).\r\nDacă <code>value</code> dat este <code>null</code>, <code>Number.From</code> returnează <code>null</code>.  Dacă <code>value</code> dat este <code>number</code>, se returnează <code>value</code>. Valorile următoarelor tipuri pot fi convertite la o valoare <code>number</code>:\r\n      <ul>\r\n        <li><code>text</code>: o valoare <code>number</code> din reprezentarea textuală. Sunt tratate formate text obișnuite („15”, „3,423.10”, „5.0E-10”). Pentru detalii, consultați <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: 1 pentru <code>true</code>, 0 pentru <code>false</code>.</li>\r\n        <li><code>datetime</code>: un număr în virgulă mobilă cu dublă precizie, ce conține un echivalent dată OLE Automation.</li>\r\n        <li><code>datetimezone</code>: un număr în virgulă mobilă cu dublă precizie, ce conține un echivalent al datei OLE Automation al datei și orei locale de <code>value</code>.</li>\r\n        <li><code>date</code>: un număr în virgulă mobilă cu dublă precizie, ce conține un echivalent dată OLE Automation.</li>\r\n        <li><code>time</code>: exprimată în zile fracționare.</li>\r\n        <li><code>duration</code>: exprimată în zile întregi și fracționare.</li>\r\n      </ul>\r\nDacă <code>value</code> este de orice alt tip, se returnează o eroare.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi valoarea <code>number</code> de <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obţineţi valoarea <code>number</code> a <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Obțineți valoarea <code>number</code> a <code>\"12.3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Creează numere din formatele text obişnuite (\"15\", \"3,423.10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> din valoarea text dată, <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: reprezentarea textuală a unei valori numerice. Reprezentarea trebuie să fie într-un format numeric obișnuit cum ar fi „15”, „3.423,10” sau „5,0E-10”.</li>\r\n  <li><code>culture</code>: O valoare cultură opțională care controlează modul în care este interpretat <code>text</code> (de exemplu „ro-RO”).</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi valoarea number pentru <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obţineţi valoarea numerică pentru <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Indică dacă valoarea este pară.",
        "Documentation.LongDescription": "Indică dacă valoarea, <code>number</code>, este pară returnând <code>true</code> dacă este pară; în caz contrar, returnează <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificaţi dacă 625 este un număr par.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Verificaţi dacă 82 este un număr par.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Indică dacă valoarea este NaN (nu este număr).",
        "Documentation.LongDescription": "Indică dacă valoarea este NaN (nu este număr). Returnează <code>true</code> dacă <code>number</code> este echivalent cu <code>Number.IsNaN</code>; în caz contrar, returnează <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificaţi dacă 0 împărţit la 0 este NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Verificaţi dacă 1 împărţit la 0 este NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Indică dacă valoarea este impară.",
        "Documentation.LongDescription": "Indică dacă valoarea este impară. Returnează <code>true</code> dacă <code>number</code> este un număr impar; în caz contrar, returnează <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificaţi dacă 625 este un număr impar.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Verificaţi dacă 82 este un număr impar.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Returnează logaritmul natural al numărului.",
        "Documentation.LongDescription": "Returnează logaritmul natural al unui număr, <code>number</code>. Dacă <code>number</code> este nul, <code>Number.Ln</code> returnează nul.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi logaritmul natural pentru 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Returnează logaritmul numărului în baza specificată (valoare e implicită).",
        "Documentation.LongDescription": "Returnează logaritmul unui număr, <code>number</code>, în baza <code>base</code> specificată. Dacă nu se specifică <code>base</code>, valoarea implicită este Number.E.\r\n    Dacă <code>number</code> este nul, <code>Number.Log</code> returnează nul.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Aflați logaritmul în baza 10 pentru 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Aflați logaritmul în baza e pentru 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Returnează logaritmul în baza 10 al numărului.",
        "Documentation.LongDescription": "Returnează logaritmul în baza 10 al unui număr, <code>number</code>. Dacă <code>number</code> este nul, <code>Number.Log10</code> returnează nul.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Aflați logaritmul în baza 10 pentru 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Returnează numărul rotunjit. Numărul de cifre şi modul de rotunjire pot fi specificate.",
        "Documentation.LongDescription": "Returnează rezultatul rotunjirii <code>number</code> la cel mai apropiat număr. Dacă <code>number</code> este nul, <code>Number.Round</code> returnează null.<br>\r\n      <br>\r\n      În mod implicit, <code>number</code> este rotunjit până la cel mai apropiat întreg, iar legăturile sunt întrerupte prin rotunjire la cel mai apropiat număr par (utilizând <code>RoundingMode.ToEven</code> numit și „rotunjire prin ant”).<br>\r\n      <br>\r\n      Cu toate acestea, aceste valori implicite pot fi înlocuite prin următorii parametri opționali.\r\n       <ul>\r\n        <li><code>digits</code>: determină ca <code>number</code> să fie rotunjit la numărul specificat de cifre zecimale.</li>\r\n        <li><code>roundingMode</code>: înlocuiește comportamentul implicit de separare atunci <code>number</code> este la punctul median dintre două valori rotunjite potențiale\r\n      (consultați <code>RoundingMode.Type</code> pentru valori posibile).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rotunjiţi 1,234 la cel mai apropiat număr întreg.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Rotunjiţi 1,56 la cel mai apropiat număr întreg.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Rotunjiţi 1,2345 la două zecimale.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Rotunjiţi 1,2345 la trei zecimale (rotunjire prin adaos).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Rotunjiţi 1,2345 la trei zecimale (rotunjire prin lipsă).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Returnează rezultatul rotunjirii numerelor pozitive prin adaos și a numerelor negative prin lipsă. Se poate specifica numărul de cifre.",
        "Documentation.LongDescription": "Returnează rezultatul rotunjirii <code>number</code> în funcție de semnul numărului. Această funcție va rotunji numere pozitive prin adaos și numere negative prin lipsă.\r\n    Dacă se specifică <code>digits</code>, <code>number</code> este rotunjit la numărul <code>digits</code> de cifre zecimale.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rotunjiţi numărul -1,2 de la zero.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Rotunjiţi numărul 1,2 de la zero.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Rotunjiți numărul -1,234 la două zecimale de la zero.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Returnează cel mai mare număr întreg anterior. Se poate specifica numărul de cifre.",
        "Documentation.LongDescription": "Returnează rezultatul rotunjirii <code>number</code> prin lipsă la cel mai mare număr întreg anterior. Dacă <code>number</code> este nul, această funcție returnează nul.\r\n\r\n    Dacă se furnizează <code>digits</code>, <code>number</code> este rotunjit la numărul specificat de cifre zecimale.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rotunjiţi prin lipsă 1,234 la numărul întreg.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Rotunjiţi prin lipsă 1,999 la numărul întreg.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Rotunjiți prin lipsă 1,999 la două zecimale.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Returnează rezultatul rotunjirii numerelor pozitive prin lipsă și a numerelor negative prin adaos. Se poate specifica numărul de cifre.",
        "Documentation.LongDescription": "Returnează rezultatul rotunjirii <code>number</code> în funcție de semnul numărului. Această funcție va rotunji numere pozitive prin lipsă și numere negative prin adaos.\r\n    Dacă se specifică <code>digits</code>, <code>number</code> este rotunjit la numărul <code>digits</code> de cifre zecimale.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rotunjiţi numărul -1,2 spre zero.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Rotunjiţi numărul 1,2 spre zero.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Rotunjiți numărul -1,234 la două zecimale spre zero.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Returnează cel mai mare număr următor. Se poate specifica numărul de cifre.",
        "Documentation.LongDescription": "Returnează rezultatul rotunjirii <code>number</code> prin adaos la următorul cel mai mare număr întreg. Dacă <code>number</code> este nul, această funcție returnează null.\r\n    Dacă se furnizează <code>digits</code>, <code>number</code> este rotunjit la numărul specificat de cifre zecimale.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rotunjiţi prin adaos 1,234 la numărul întreg.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Rotunjiţi prin adaos 1,999 la numărul întreg.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Rotunjiți prin adaos 1,2345 la două zecimale.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Returnează 1 dacă numărul este pozitiv, -1 dacă numărul este negativ sau 0 dacă numărul este zero.",
        "Documentation.LongDescription": "Returnează 1 dacă <code>number</code> este un număr pozitiv, -1 dacă este un număr negativ și 0 dacă este zero.\r\n    Dacă <code>number</code> este nul, <code>Number.Sign</code> returnează nul.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinaţi semnul pentru 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Determinaţi semnul pentru -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Determinaţi semnul pentru 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Returnează sinusul numărului.",
        "Documentation.LongDescription": "Returnează sinusul <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi sinusul unghiului 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Returnează sinusul hiperbolic al numărului.",
        "Documentation.LongDescription": "Returnează sinusul hiperbolic al <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Returnează rădăcina pătrată a numărului.",
        "Documentation.LongDescription": "Returnează rădăcina pătrată a <code>number</code>.\r\n    Dacă <code>number</code> este nul, <code>Number.Sqrt</code> returnează nul. Dacă este o valoare negativă, se returnează <code>Number.NaN</code> (nu este număr).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi rădăcina pătrată pentru 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Găsiţi rădăcina pătrată pentru 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Returnează tangenta numărului.",
        "Documentation.LongDescription": "Returnează tangenta <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi tangenta unghiului 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Returnează tangenta hiperbolică a numărului.",
        "Documentation.LongDescription": "Returnează tangenta hiperbolică a <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Efectuează conversia numărului dat în text.",
        "Documentation.LongDescription": "Efectuează conversia valorii numerice <code>number</code> într-o valoare text conform formatului specificat de <code>format</code>.<br>\r\n    <br>\r\n    Formatul este o valoare text care indică modul în care ar trebui să se efectueze conversia numărului. Pentru mai multe detalii despre valorile de format acceptate, accesați https://go.microsoft.com/fwlink/?linkid=2241210 și https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Opțional, se poate furniza și <code>culture</code> (de exemplu, „ro-RO”) pentru a controla comportamentul <code>format</code> care depinde de cultură.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia unui număr în text fără a specifica un format.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Efectuați conversia unui număr în format exponențial.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Efectuați conversia unui număr în format procentual cu o singură zecimală.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Returnează un tabel de fluxuri OData oferite de un serviciu OData.",
        "Documentation.LongDescription": "Returnează un tabel de fluxuri OData oferite de un serviciu OData dintr-un URI <code>serviceUri</code>, anteturi <code>headers</code>. O valoare booleană care specifică dacă se utilizează conexiuni concurente sau un parametru opțional de înregistrare, <code>options</code>, poate fi specificată pentru a seta următoarele opțiuni:\r\n    <ul>\r\n    <li><code>Query</code>: Adăugați în mod programatic parametri de interogare la adresa URL fără a vă face griji cu privire la escaping. </li>\r\n    <li> <code>Headers</code> : Specificarea acestei valori ca înregistrare va furniza anteturi suplimentare unei solicitări HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Specificarea acestei valori ca listă va exclude aceste chei de antet HTTP din calculul pentru memorarea în cache a datelor.</li>\r\n    <li> <code>ApiKeyName</code> : dacă site-ul țintă are o noțiune de cheie API, acest parametru poate fi utilizat pentru a specifica numele (nu valoarea) parametrului cheie care trebuie utilizat în URL. Valoarea reală a cheii este furnizată în acreditare.</li>\r\n    <li> <code>Timeout</code> : Specificarea acestei valori ca durată va modifica timpul de expirare pentru o solicitare HTTP. Valoarea implicită este 600 de secunde.</li>\r\n    <li> <code>EnableBatch</code> : O valoare logică (true/false) care setează dacă se permite generarea unei solicitări OData $batch, dacă valoarea MaxUriLength este depășită (valoarea implicită este false).</li>\r\n    <li> <code>MaxUriLength</code> : Un număr care indică lungimea maximă a unui URI permis trimis la un serviciu OData. Dacă valoarea este depășită și EnableBatch are valoarea true, solicitarea va fi făcută către un punct final OData $batch, altfel nu va reuși (valoarea implicită este 2048).</li>\r\n    <li> <code>Concurrent</code> : O valoare logică (true/false) care, atunci când este setată la valoarea true, determină efectuarea simultană a soli,citărilor către serviciu. Când este setată la valoarea false, solicitările vor fi efectuate secvențial. Când nu este specificată, valoarea va fi determinată de adnotarea AsynchronousRequestsSupported a serviciului. Dacă serviciul nu specifică dacă AsynchronousRequestsSupported este acceptat, solicitările se vor face secvențial.</li>\r\n    <li> <code>ODataVersion</code> : Un număr (3 sau 4) care specifică versiunea de protocol OData de utilizat pentru acest serviciu OData. Când nu se specifică, se vor solicita toate versiunile acceptate. Versiunea serviciului va fi determinată de antetul OData-Version returnat de service.</li>\r\n    <li> <code>FunctionOverloads</code>: O valoare logică (true/false) când este setată la valoarea true, supraîncărcările importului de funcții vor fi listate în navigator ca intrări separate; dacă este setată la valoarea false, supraîncărcările importului de funcții vor fi listate ca o singură funcție de uniune în navigator. Valoare implicită pentru V3 este false. Valoare implicită pentru V4 este true.</li>\r\n    <li> <code>MoreColumns</code>: O valoare logică (true/false) care, atunci când este setată la true, adaugă o coloană „Mai multe coloane” la fiecare flux de entitate care conține tipuri deschise și tipuri polimorfe. Aceasta va conține câmpurile nedeclarate în tipul de bază. Când are valoarea false, acest câmp nu este prezent. Valoarea implicită este false.</li>\r\n    <li> <code>IncludeAnnotations</code> : O listă separată prin virgule de modele sau nume de termeni calificați pentru spațiul de nume de inclus cu „*” drept caractere wildcard. În mod implicit, niciuna dintre adnotări nu este inclusă.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : O listă separată prin virgule de nume sau modele de termeni calificați pentru spațiul de nume de inclus în solicitările de documente de metadate, cu „*” drept caractere wildcard. În mod implicit, include aceleași adnotări ca IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code> : Permite serviciului OData să evite scrierea anumitor valori în răspunsuri. Dacă este recunoscută de serviciu, vom deduce aceste valori din câmpurile omise. Opțiunile includ:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : Permite serviciului OData să omită valori nule.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : Specifică implementarea conectorului OData de utilizat. Valorile valide sunt „2.0” sau nul.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Conectează la serviciul OData TripPin.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Returnează rezultatul încercării de a deduce capacitățile SQL pentru un driver ODBC.",
        "Documentation.LongDescription": "Returnează rezultatul încercării de a deduce capacitățile SQL cu șirul de conexiune <code>connectionString</code>, folosind ODBC. <code>connectionString</code> poate fi text sau o înregistrare cu perechi de valori de proprietate. Valorile de proprietate pot fi text sau numere.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Returnați capacitățile SQL deduse pentru un șir de conexiune.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Returnează conținutul documentului Parquet ca tabel.",
        "Documentation.LongDescription": "Returnează conținutul documentului Parquet ca tabel. Printre opțiuni se numără:\n    <ul>\n    <li> <code>TypeMapping</code>: o valoare text care controlează maparea tipului implicit la citirea și scrierea fișierelor. Valoarea implicită este nulă și încearcă să păstreze cât mai multă fidelitate față de tipul original. O valoare „Sql” va produce rezultatele cele mai compatibile cu Sql Server.</li>\n    </ul>",
        "Documentation.Category": "Se accesează datele",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Se accesează datele",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Returnează o valoare procentuală din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare<code>percentage</code> dintr-o valoare <code>value</code> dată. Dacă <code>value</code> dată este <code>null</code>, <code>Percentage.From</code> returnează <code>null</code>. Dacă <code>value</code> dată este <code>text</code> cu un simbol la un procent de sfârșit, atunci va fi returnat numărul zecimal convertit. În caz contrar, convertiți la o valoare <code>number</code> utilizând <code>Number.From</code>. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obțineți valoarea <code>percentage</code> a <code>\"12.3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Returnează o înregistrare a cadrelor de date din fișierul RData.",
        "Documentation.LongDescription": "Returnează o înregistrare a cadrelor de date din fișierul RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Combină înregistrările în lista dată.",
        "Documentation.LongDescription": "Combină înregistrările în lista dată <code>records</code>. Dacă <code>records</code> conţine valori care nu aparţin înregistrării, se returnează o eroare.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Creați o înregistrare combinată din înregistrări.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Returnează numărul de câmpuri din înregistrare.",
        "Documentation.LongDescription": "Returnează numărul de câmpuri din înregistrarea <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numărul de câmpuri din înregistrare.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Returnează numele câmpurilor.",
        "Documentation.LongDescription": "Returnează numele câmpurilor din înregistrarea <code>record</code> ca text.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numele câmpurilor din înregistrare.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Returnează o listă de valori pentru câmp.",
        "Documentation.LongDescription": "Returnează o listă de valori pentru câmp din înregistrarea <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Găsiți valorile pentru câmp din înregistrare.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Creează o înregistrare dintr-un tabel de forma {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Returnează o înregistrare dintr-un tabel de înregistrări <code>table</code> ce conţine numele câmpurilor şi numele valorilor <code>{[Name = name, Value = value]}</code>. Dacă numele câmpurilor nu sunt unice, apare o excepţie.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Creați o înregistrare din tabelul de forma Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Returnează o listă de valori ce conţine valorile pentru câmp ale înregistrării introduse.",
        "Documentation.LongDescription": "Returnează o listă de valori ce conţine valorile pentru câmp din datele introduse <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Extrageţi valorile pentru câmp dintr-o înregistrare.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Returnează un arbore sintactic abstract (AST) care reprezintă accesul la o coloană dintr-o expresie de linie.",
        "Documentation.LongDescription": "Returnează un arbore sintactic abstract (AST) care reprezintă accesul la coloana <code>columnName</code> a înregistrării dintr-o expresie de linie.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Creează un AST ce reprezintă accesul la coloana „NumeClient”.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Returnează arborele sintactic abstract (AST) pentru corpul unei funcții.",
        "Documentation.LongDescription": "<p>Returnează arborele de sintaxă abstract (AST) pentru corpul <code>function</code>, normalizat într-o <i>expresie de linie</i>:\r\n<ul>\r\n  <li>Funcția trebuie să fie un argument 1 lambda.</li>\r\n  <li>Toate referințele la parametrul funcției sunt înlocuite cu <code>RowExpression.Row</code>.</li>\r\n  <li>Toate referințele la coloane sunt înlocuite cu <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>AST va fi simplificat pentru a conține numai noduri de tipul:\r\n    <ul>\r\n      <li><code>Constantă</code></li>\r\n      <li><code>Invocare</code></li>\r\n      <li><code>Unar</code></li>\r\n      <li><code>Binar</code></li>\r\n      <li><code>Dacă</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>O eroare apare dacă nu se poate returna o expresie de rând AST pentru corpul <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Returnează expresia AST pentru corpul funcției <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Creează o valoare Single din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>number</code> Single din valoarea <code>value</code> dată. Dacă valoarea <code>value</code> dată este <code>null</code>, <code>Single.From</code> returnează <code>null</code>. Dacă valoarea <code>value</code> dată este un <code>number</code> în intervalul de numere Single, se returnează <code>value</code>, altfel se returnează o eroare. Dacă valoarea <code>value</code> dată este de orice alt tip, va fi convertită într-o valoare <code>number</code> utilizând <code>Number.FromText</code>. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obțineți valoarea <code>number</code> Single pentru <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Returnează un tabel de date de la un punct final de index Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Efectuează un apel la API-ul Smartsheet 2.0 REST la punctul final specificat și transformă elementul de date returnat într-un tabel.",
        "Documentation.Examples": [
          {
            "Description": "Extrage un tabel cu informații de utilizator de la API-ul Smartsheet",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Un tabel cu informații de utilizator, așa cum este returnat de API-ul Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Returnează o funcţie care divizează textul într-o listă de text la oricare dintre delimitatoarele specificate.",
        "Documentation.LongDescription": "Returnează o funcţie care divizează textul într-o listă de text la oricare dintre delimitatoarele specificate.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divizează intrarea prin virgulă sau punct și virgulă, ignorând ghilimelele și delimitatorii citați și începând de la începutul intrării.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Divizează intrarea prin virgulă sau punct și virgulă, ignorând ghilimelele și delimitatorii citați și începând de la sfârșitul intrării.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Returnează o funcţie care divizează textul într-o listă de text conform delimitatorului specificat.",
        "Documentation.LongDescription": "Returnează o funcţie care divizează textul într-o listă de text conform delimitatorului specificat.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divizează intrarea prin virgulă, ignorând virgulele citate.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Returnează o funcţie care divizează textul într-o listă de text la fiecare delimitator specificat în secvenţă.",
        "Documentation.LongDescription": "Returnează o funcţie care divizează textul într-o listă de text la fiecare delimitator specificat în secvenţă.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divizează intrarea prin virgulă, apoi punct și virgulă, începând de la începutul intrării.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Divizează intrarea prin virgulă, apoi punct și virgulă, tratând ghilimelele ca orice alt caracter și începând de la sfârșitul intrării.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Returnează o funcţie care divizează textul într-o listă de text la fiecare lungime specificată.",
        "Documentation.LongDescription": "Returnează o funcţie care divizează textul într-o listă de text la fiecare lungime specificată.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divizează intrarea în primele două caractere urmate de următoarele trei, începând de la începutul intrării.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Divizează intrarea în primele trei caractere urmate de următoarele două, începând de la sfârșitul intrării.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Returnează o funcţie care divizează textul într-o listă de text la fiecare poziţie specificată.",
        "Documentation.LongDescription": "Returnează o funcţie care divizează textul într-o listă de text la fiecare poziţie specificată.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divizează intrarea la pozițiile specificate, începând de la începutul intrării.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Divizează intrarea la pozițiile specificate, începând de la sfârșitul intrării.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Returnează o funcţie ce divizează textul într-o listă de text conform decalajelor şi lungimilor specificate.",
        "Documentation.LongDescription": "Returnează o funcție care divizează textul într-o listă de text conform decalajelor și lungimilor specificate. O lungime nulă indică faptul că toate intrările rămase trebuie incluse.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divizează intrarea după poziția specificată și perechile de lungime, începând de la începutul intrării. Rețineți că intervalele din acest exemplu se suprapun.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Divizează intrarea după poziția specificată și perechile de lungime, începând de la sfârșitul intrării.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Împărțiți intrarea într-un cod poștal de lungime fixă, urmat de un nume de oraș de lungime variabilă.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Returnează o funcţie care divizează textul într-o listă de text după lungimea specificată în mod repetat.",
        "Documentation.LongDescription": "Returnează o funcţie care divizează textul într-o listă de text după lungimea specificată în mod repetat.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divizează în mod repetat intrarea în blocuri de trei caractere, începând de la începutul intrării.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Divizează în mod repetat intrarea în blocuri de trei caractere, începând de la sfârșitul intrării.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Returnează numărul aproximativ de rânduri din tabel.",
        "Documentation.LongDescription": "Returnează numărul aproximativ de rânduri în <code>table</code>sau o eroare dacă sursa de date nu acceptă aproximarea.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Estimează numărul de combinații distincte între localitate și stat într-un tabel mare, care poate fi utilizat ca estimare de cardinalitate pentru coloane. Estimările de cardinalitate sunt suficient de importante pentru ca diverse surse de date (cum ar fi SQL Server) acceptă această aproximare anume, utilizând adesea un algoritm numit HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Returnează numărul de coloane din tabel.",
        "Documentation.LongDescription": "Returnează numărul de coloane din tabelul <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numărul de coloane din tabel.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Returnează numele coloanelor ca listă.",
        "Documentation.LongDescription": "Returnează numele coloanelor din tabelul <code>table</code> ca listă de text.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numele coloanelor din tabel.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Returnează primul rând sau o valoare implicită specificată.",
        "Documentation.LongDescription": "Returnează primul rând din <code>table</code> sau o valoare implicită opţională, <code>default</code>, dacă tabelul este necompletat.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiți primul rând al tabelului.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Găsiţi primul rând al tabelului <code>({})</code> sau returnaţi [a = 0, b = 0] dacă este necompletat.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Returnează prima coloană a primului rând al tabelului sau o valoare implicită specificată.",
        "Documentation.LongDescription": "Returnează prima coloană a primului rând al tabelului <code>table</code> sau o valoare implicită specificată.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Indică dacă tabelul conține numai rânduri distincte (fără dubluri).",
        "Documentation.LongDescription": "Indică dacă <code>table</code> conține numai rânduri distincte (fără dubluri). Returnează <code>true</code> dacă rândurile sunt distincte; în caz contrar, returnează <code>false</code>.\r\n    Un parametru opțional, <code>comparisonCriteria</code>, specifică ce coloane din tabel sunt testate pentru duplicare. Dacă nu se specifică <code>comparisonCriteria</code>, sunt testate toate coloanele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă tabelul este distinct.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinați dacă tabelul este distinct în coloană.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Indică dacă tabelul conține vreun rând.",
        "Documentation.LongDescription": "Indică dacă <code>table</code> conține vreun rând. Returnează <code>true</code> dacă nu există rânduri (adică, tabelul este necompletat); în caz contrar, returnează <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă tabelul este necompletat.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinaţi dacă tabelul <code>({})</code> este necompletat.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Returnează cheile tabelului specificat.",
        "Documentation.LongDescription": "Returnează cheile tabelului specificat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Obțineți lista de chei pentru un tabel.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Returnează ultimul rând sau o valoare implicită specificată.",
        "Documentation.LongDescription": "Returnează ultimul rând din <code>table</code> sau o valoare implicită opţională, <code>default</code>, dacă tabelul este necompletat.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Găsiți ultimul rând al tabelului.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Găsiţi ultimul rând al tabelului <code>({})</code> sau returnaţi [a = 0, b = 0] dacă este necompletat.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Returnează numărul de rânduri din tabel.",
        "Documentation.LongDescription": "Returnează numărul de rânduri din <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numărul de rânduri din tabel.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Returnează un singur rând din tabel.",
        "Documentation.LongDescription": "Returnează un singur rând în <code>table</code> cu un rând. Dacă <code>table</code> conţine mai multe rânduri, apare o excepţie.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Returnează un singur rând din tabel.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Creează o listă de liste imbricate ale valorilor pentru coloană dintr-un tabel.",
        "Documentation.LongDescription": "Creează o listă de liste imbricate din tabel, <code>table</code>.  Fiecare element de listă este o listă interioară ce conţine valorile pentru coloană.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Creați o listă de valori pentru coloană din tabel.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Converteşte un tabel într-o listă aplicând funcţia de combinare specificată în fiecare rând de valori din tabel.",
        "Documentation.LongDescription": "Converteşte un tabel într-o listă aplicând funcţia de combinare specificată în fiecare rând de valori din tabel.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Combinați textul fiecărui rând cu o virgulă.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Converteşte un tabel într-o listă de înregistrări.",
        "Documentation.LongDescription": "Converteşte un tabel, <code>table</code>, într-o listă de înregistrări.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi tabelul într-o listă de înregistrări.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Creează o listă de liste imbricate ale valorilor pentru rând dintr-un tabel.",
        "Documentation.LongDescription": "Creează o listă de liste imbricate din tabel, <code>table</code>.  Fiecare element de listă este o listă interioară ce conţine valorile pentru rând.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Creați o listă de valori pentru rând din tabel.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Creează o înregistrare de eroare modificată care nu va declanșa o rezervă atunci când este generată de o rutină de tratare definită într-o vizualizare (prin Table.View).",
        "Documentation.LongDescription": "Creează o înregistrare de eroare modificată din <code>errorRecord</code> care nu va declanșa o rezervă atunci când este generată de o rutină de tratare definită într-o vizualizare (prin Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Creează o funcție care poate fi interceptată de o rutină de tratare definită pe o vizualizare (prin Table.View).",
        "Documentation.LongDescription": "<p>Creează o funcție de vizualizare bazată pe <code>function</code>, care poate fi gestionată într-o vizualizare creată de <code>Table.View</code>.</p>\r\n<p>Rutina de tratare <code>OnInvoke</code> a <code>Table.View</code> poate fi utilizată pentru a defini o rutină de tratare pentru funcția de vizualizare.</p>\r\n<p>La fel ca în rutinele de tratare pentru operații încorporate, dacă nu este specificată nicio rutină de tratare <code>OnInvoke</code> sau dacă rutina de tratare declanșează o eroare, se aplică <code>function</code> în partea de sus a vizualizării.</p>\r\n<p>Consultați documentația conectorului particularizat publicat Power Query pentru o descriere mai completă a <code>Table.View</code> și a funcțiilor de vizualizare particularizate.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Returnează valoarea text cu toate caracterele de control eliminate.",
        "Documentation.LongDescription": "Returnează o valoare text cu toate caracterele de control <code>text</code> eliminate.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Eliminați sfârșiturile de linii și alte caractere de control dintr-o valoare text.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Concatenează o listă de valori text într-o singură valoare text.",
        "Documentation.LongDescription": "Returnează rezultatul combinării listei de valori text, <code>texts</code>, într-o singură valoare text. Toate valorile <code></code> nule prezente în <code>texts</code> sunt ignorate.\r\n    Se poate specifica un <code>separator</code> opțional utilizat în textul combinat final.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Combinaţi valorile text „Seattle” şi „WA”.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Combinaţi valorile text „Seattle” și „WA” separate printr-o virgulă și un spaţiu.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Combinați valorile \"Seattle\", <code></code> null și \"WA\", separate prin virgulă și spațiu. (Rețineți că <code>nul</code> este ignorat.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Creează o valoare text din valoarea dată.",
        "Documentation.LongDescription": "Returnează reprezentarea text a <code>value</code>. <code>value</code> poate fi o valoare <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> sau <code>binary</code>.\r\n    Dacă valoarea specificată este nulă, <code>Text.From</code> returnează nul. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o valoare text din numărul 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Decodifică datele dintr-o formă binară în text.",
        "Documentation.LongDescription": "Decodifică datele, <code>binary</code>, dintr-o valoare binară într-o valoare text, utilizând tipul <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Deduce tipul de număr granular (Int64.Type, Double.Type și așa mai departe) al unui număr codificat în text.",
        "Documentation.LongDescription": "Deduce tipul de număr granular (Int64.Type, Double.Type și așa mai departe) al <code>text</code>. Este generată o eroare dacă <code>text</code> nu este un număr. De asemenea, poate fi furnizat un <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Returnează numărul de caractere.",
        "Documentation.LongDescription": "Returnează numărul de caractere din textul <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Aflaţi câte caractere sunt în textul „Hello World”.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Converteşte toate caracterele în litere mici.",
        "Documentation.LongDescription": "Returnează rezultatul conversiei tuturor caracterelor din <code>text</code> la litere mici. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi versiunea în litere mici pentru „AbCd”.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Scrie cu majusculă prima literă a fiecărui cuvânt.",
        "Documentation.LongDescription": "Returnează rezultatul scrierii cu majusculă numai a primei litere a fiecărui cuvânt din valoarea text <code>text</code>. Toate celelalte litere sunt returnate cu litere mici. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Utilizaţi <code>Text.Proper</code> într-o propoziţie simplă.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Inversează <code>text</code> furnizat.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Inversați textul „123”.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Codifică textul într-o formă binară.",
        "Documentation.LongDescription": "Codifică valoarea text dată, <code>text</code>, într-o valoare binară utilizând <code>encoding</code> specificată.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Returnează o listă de valori de caractere din valoarea text dată.",
        "Documentation.LongDescription": "Returnează o listă de valori de caractere din valoarea text dată <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Creaţi o listă de valori de caractere din textul „Hello World”.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Elimină toate spaţiile goale de la început şi de la sfârşit.",
        "Documentation.LongDescription": "Returnează rezultatul eliminării tuturor spaţiilor goale de la început şi de la sfârşit din valoarea text <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi spaţiile goale de la început şi de la sfârşit din „     a b c d    ”.",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Elimină toate spaţiile goale de la sfârşit.",
        "Documentation.LongDescription": "Returnează rezultatul eliminării tuturor spaţiilor goale de la sfârşit din valoarea text <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi spaţiile goale de la sfârşit din „     a b c d    ”.",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Elimină toate spaţiile goale de la început.",
        "Documentation.LongDescription": "Returnează rezultatul eliminării tuturor spaţiilor goale de la început din valoarea text <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Eliminaţi spaţiile goale de la început din „     a b c d    ”.",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Converteşte toate caracterele în litere mari.",
        "Documentation.LongDescription": "Returnează rezultatul conversiei tuturor caracterelor din <code>text</code> în litere mari. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi versiunea în litere mari pentru „aBcD”.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Returnează sfârșitul orei.",
        "Documentation.LongDescription": "Returnează sfârșitul orei reprezentat de <code>dateTime</code>, inclusiv secundele fracționare. Informațiile legate de fusul orar sunt păstrate.\r\n      <ul>\r\n        <li><code>dateTime</code>: o valoare <code>time</code>, <code>datetime</code> sau <code>datetimezone</code>, din care este calculat sfârșitul orei.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obţineţi sfârşitul orei pentru 14/05/2011 17:00:00.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Obţineţi sfârşitul orei pentru 17/05/2011 17:00:00 – 7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Creează o valoare time din valoarea dată.",
        "Documentation.LongDescription": "Returnează o valoare <code>time</code> din <code>value</code> dat. De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).\r\nDacă <code>value</code> dat este <code>null</code>, <code>Time.From</code> returnează <code>null</code>. Dacă <code>value</code> dat este <code>time</code>, se returnează <code>value</code>. Valorile de următoarele tipuri pot fi convertite la o valoare <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: o valoare <code>time</code> din reprezentarea textuală. Pentru detalii, consultați <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: componenta time a <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: componenta time a echivalentului de tip datetime local al <code>value</code>.</li>\r\n        <li><code>number</code>: o valoare <code>time</code> echivalentă cu numărul de zile fracționare exprimate de <code>value</code>. Dacă <code>value</code> este negativ sau mai mare sau egal cu 1, se returnează o eroare.</li>\r\n      </ul>\r\nDacă <code>value</code> este de orice alt tip, se returnează o eroare.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>0.7575</code> la o valoare <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Convertiţi <code>#datetime(1899, 12, 30, 06, 45, 12)</code> la o valoare <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Creează o valoare Time din formatele Time locale, universale și particularizate.",
        "Documentation.LongDescription": "Creează o valoare <code>time</code> dintr-o reprezentare textuală, <code>text</code>. Un parametru <code>record</code> opțional, <code>options</code>, poate fi furnizat pentru a specifica proprietăți suplimentare. <code>record</code> poate conține următoarele câmpuri:\r\n<ul>\r\n   <li><code>Format</code>: o valoare <code>text</code> ce indică formatul de utilizat. Pentru mai multe detalii, accesați https://go.microsoft.com/fwlink/?linkid=2180104 și https://go.microsoft.com/fwlink/?linkid=2180105. Dacă se omite acest câmp sau se furnizează <code>null</code>, acest lucru va duce la analizarea datei utilizând cel mai bun efort.</li>\r\n   <li><code>Culture</code>: atunci când <code>Format</code> nu este null, <code>Culture</code> controlează anumiți specificatori de format. De exemplu, în <code>\"en-US\"</code> <code>\"tt\"</code> este <code>\"AM\" sau \"PM\"</code>, în timp ce în <code>\"ar-EG\"</code> <code>\"tt\"</code> este <code>\"ص\" sau \"م\"</code>. Atunci când <code>Format</code> este <code>null</code>, <code>Culture</code> controlează formatul implicit de utilizat. Atunci când <code>Culture</code> este <code>null</code> sau se omite, se utilizează <code>Culture.Current</code>.</li>\r\n</ul>\r\nPentru a accepta fluxurile de lucru moștenite, <code>options</code> poate fi, de asemenea, o valoare text. Acesta are același comportament ca și cum <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi <code>\"10:12:31am\"</code> într-o valoare pentru oră.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Convertiți <code>\"1012\"</code> într-o valoare Time.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Convertiți <code>\"10\"</code> într-o valoare Time.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Returnează componenta hour.",
        "Documentation.LongDescription": "Returnează componenta hour a valorii <code>time</code>, <code>datetime</code> sau <code>datetimezone</code> furnizate, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi ora din #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Returnează componenta minute.",
        "Documentation.LongDescription": "Returnează componenta minute din valoarea <code>time</code>, <code>datetime</code> sau <code>datetimezone</code> furnizată, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi minutul din #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Returnează componenta second.",
        "Documentation.LongDescription": "Returnează componenta second din valoarea <code>time</code>, <code>datetime</code> sau <code>datetimezone</code> furnizată, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Găsiți a doua valoare dintr-o valoare datetime.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Returnează începutul orei.",
        "Documentation.LongDescription": "Returnează începutul orei reprezentat de <code>dateTime</code>.\r\n    <code>dateTime</code> trebuie să fie o valoare <code>time</code>, <code>datetime</code> sau <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Găsiți începutul orei pentru 10 octombrie 2011, 8:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Returnează o înregistrare ce conţine părţi din valoarea pentru oră.",
        "Documentation.LongDescription": "Returnează o înregistrare care conține părți din valoarea de timp dată, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: o valoare <code>time</code> pentru care urmează să fie calculată înregistrarea părților sale.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Convertiţi valoarea <code>#time(11, 56, 2)</code> într-o înregistrare ce conţine valorile pentru oră.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Returnează o reprezentare textuală a valorii de tip oră.",
        "Documentation.LongDescription": "Returnează o reprezentare textuală a <code>time</code>. Un parametru opțional de <code>record</code>, <code>options</code>, poate fi furnizat pentru a specifica proprietăți suplimentare. <code>culture</code> este utilizat numai pentru fluxuri de lucru moștenite. <code>record</code> poate conține următoarele câmpuri:\r\n<ul>\r\n   <li><code>Format</code>: o valoare <code>text</code> ce indică formatul de utilizat. Pentru mai multe detalii, accesați https://go.microsoft.com/fwlink/?linkid=2180104 și https://go.microsoft.com/fwlink/?linkid=2180105. Omiterea acestui câmp sau furnizarea <code>null</code> va duce la formatarea datei utilizând valoarea implicită definită de <code>Culture</code></li>.\r\n   <li><code>Culture</code>: atunci când <code>Format</code> nu este nul, <code>Culture</code> controlează anumiți specificatori de format. De exemplu, în <code>\"en-US\"</code> <code>\"tt\"</code> este <code>\"AM\" sau \"PM\"</code>, în timp ce în <code>\"ar-EG\"</code> <code>\"tt\"</code> este <code>\"ص\" sau \"م\"</code>.. Atunci când <code>Format</code> este <code>null</code>, <code>Culture</code> controlează formatul implicit de utilizat. Atunci când <code>Culture</code> este <code>null</code> sau se omite, se utilizează <code>Culture.Current</code>.</li>\r\n</ul>\r\nPentru a accepta fluxurile de lucru moștenite, <code>options</code> și <code>culture</code> pot fi, de asemenea, valori text. Aceasta are același comportament ca și cum <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Efectuați conversia <code>#time(01, 30, 25)</code> într-o valoare <code>text</code>. <i>Rezultatul poate varia în funcție de cultura actuală.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Efectuați conversia utilizând un format particularizat și cultura germană.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Efectuați conversia utilizând formatul de oră standard.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Returnează o versiune închisă a tipului de înregistrare dat (sau același tip, dacă este deja închis).",
        "Documentation.LongDescription": "Returnează o versiune închisă a <code>înregistrării</code> date <code>type</code> (sau același tip, dacă este deja închis).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Creați o versiune închisă a <code>tipului [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Returnează fațetele unui tip.",
        "Documentation.LongDescription": "Returnează o înregistrare ce conține fațetele pentru <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Returnează o înregistrare cu valori de câmp setate la numele parametrilor unui tip de funcție, iar valorile lor setate la tipurile corespunzătoare.",
        "Documentation.LongDescription": "Returnează o înregistrare cu valori de câmp setate la numele parametrilor <code>type</code>, iar valorile lor setate la tipurile corespunzătoare.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Găsiți tipurile parametrilor funcției <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Returnează un număr care indică numărul minim de parametri necesari pentru a invoca tipul de funcție.",
        "Documentation.LongDescription": "Returnează un număr care indică numărul minim de parametri necesari pentru a invoca intrarea <code>type</code> a funcției.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numărul de parametri necesari ai funcției <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Returnează un tip returnat de un tip de funcție.",
        "Documentation.LongDescription": "Returnează un tip returnat de o funcție <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Găsiți tipul returnat de <code>() ca any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Returnează true dacă o funcție este de un tip care acceptă valori null; altfel, fals.",
        "Documentation.LongDescription": "Returnează <code>true</code> dacă un tip <code>nullable</code>; altfel, <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă <code>număr</code> acceptă valori null.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Determinați dacă <code>tip număr care acceptă valoarea null</code> acceptă valoarea null.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Returnează dacă un tip de înregistrare este deschis.",
        "Documentation.LongDescription": "Returnează o valoare <code>logică</code> indicând dacă o înregistrare <code>type</code> este deschisă.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinați dacă înregistrarea de <code>type [ A = number, ...]</code> este deschisă.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Returnează un tip de element dintr-o listă de tipuri.",
        "Documentation.LongDescription": "Returnează un tip de element dintr-o listă <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Găsiți tipul elementului din listă <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Returnează tipul care nu acceptă valoarea null dintr-un tip.",
        "Documentation.LongDescription": "Returnează tipul care nu <code>acceptă valoarea null</code> din <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Returnează tipul care nu acceptă valoarea null de <code>număr care acceptă valoarea null</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Returnează o versiune deschisă a tipului de înregistrare dat (sau același tip, dacă este deja deschisă).",
        "Documentation.LongDescription": "Returnează o versiune deschisă a <code>înregistrării</code> date <code>type</code> (sau același tip, dacă este deja deschisă).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Creați o versiune deschisă de <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Returnează o înregistrare care descrie câmpurile unui tip de înregistrare cu fiecare câmp al tipului de înregistrare returnat, având un nume și o valoare corespunzătoare.",
        "Documentation.LongDescription": "Returnează o înregistrare care descrie câmpurile unei înregistrări <code>type</code>. Fiecare câmp al tipului de înregistrare returnat are un nume și o valoare corespunzătoare, sub forma unei înregistrări <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Găsiți numele și valoarea înregistrării <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Returnează o posibilă listă necompletată de chei pentru tipul de tabel dat.",
        "Documentation.LongDescription": "Returnează o posibilă listă necompletată de chei pentru tipul de tabel dat.<br>\r\n    <br>\r\n    Fiecare cheie este definită utilizând o înregistrare în formularul următor:\r\n    <ul>\r\n      <li>\r\n        <code>Coloane</code>: o listă de nume de coloane care definesc cheia\r\n      </li>\r\n      <li>\r\n        <code>Primar</code>: <code>true</code> dacă cheia este cheia primară a tabelului; în caz contrar, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Returnați informațiile cheie pentru un tip de tabel.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Returnează tipul de linie pentru tipul de tabel.",
        "Documentation.LongDescription": "Returnează tipul de linie pentru tipul de tabel specificat. Rezultatul va fi întotdeauna un tip de înregistrare.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Returnează informațiile despre tipul de linie pentru un tabel simplu.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Returnează reuniunea unei liste de tipuri.",
        "Documentation.LongDescription": "Returnează reuniunea tipurilor din <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Asamblați o înregistrare într-un șir de interogare URI.",
        "Documentation.LongDescription": "Asamblați înregistrarea <code>query</code> într-un șir de interogare URI, aplicând escape pentru caractere dacă este necesar.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codificați un șir de interogare care conține unele caractere speciale.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Realizează codificarea caracterelor speciale în conformitate cu regulile RFC 3986.",
        "Documentation.LongDescription": "Realizează codificarea caracterelor speciale din intrarea <code>data</code> în conformitate cu regulile RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codificați caracterele speciale din \"+bani$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Returnează părţile identificatorului URI absolut de intrare ca înregistrare.",
        "Documentation.LongDescription": "Returnează părţile <code>absoluteUri</code> de intrare ca înregistrare, conţinând valori, cum ar fi schemă, gazdă, port, cale, interogare, fragment, nume de utilizator şi parolă.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Găsiţi părţile identificatorului URI absolut „www.adventure-works.com”.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Decodificați un șir codificat cu procente.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Introduceți adresa URL a serviciului Azure DevOps Analytics.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Returnează conținutul descărcat de la adresa URL Azure DevOps Analytics ca valoare binară. Această funcție utilizează acreditări diferite pentru organizații diferite."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Introduceți adresa URL a serviciului Azure DevOps Analytics.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Returnează conținutul descărcat de la adresa URL a Azure DevOps Analytics Service ca valoare binară. Această funcție utilizează acreditările globale pentru întreaga organizație care poate fi accesată."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Exprimă planurile alternative de interogare.",
        "Documentation.LongDescription": "Exprimă planurile alternative de interogare dintr-o expresie plan de interogare obținută prin intermediul Value.Expression(Value.Optimize(...)). Nu este destinat pentru alte utilizări.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Returnează un arbore sintactic abstract (AST) care reprezintă expresia valorii.",
        "Documentation.LongDescription": "Returnează un arbore sintactic abstract (AST) care reprezintă expresia valorii",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Creează o valoare cu tip definit explicit dintr-o reprezentare textuală.",
        "Documentation.LongDescription": "Decodifică o valoare dintr-o reprezentare textuală, <code>text</code>, şi o interpretează ca valoare cu un tip corespunzător.\r\n    <code>Value.FromText</code> preia o valoare text și returnează un număr, o valoare logică, o valoare null, o valoare datetime, o valoare durată sau o valoare text. Valoarea text goală este interpretată ca o valoare nulă.\r\n    De asemenea, poate fi furnizat un parametru <code>culture</code> opțional (de exemplu, „ro-RO”).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Returnează o înregistrare ce conţine metadatele din valoarea introdusă.",
        "Documentation.LongDescription": "Returnează o înregistrare ce conţine metadatele din valoarea introdusă.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Semnalează către Value.Expression să returneze expresia optimizată pentru o valoare.",
        "Documentation.LongDescription": "Când se utilizează în cadrul Value.Expression, dacă <code>value</code> reprezintă o interogare care poate fi optimizată, această funcție indică faptul că expresia optimizată trebuie returnată. În caz contrar, <code>value</code> va fi transmis fără niciun efect.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Elimină metadatele din valoarea introdusă.",
        "Documentation.LongDescription": "Elimină metadatele din valoarea introdusă.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Returnează tipul valorii date.",
        "Documentation.LongDescription": "Returnează tipul valorii date.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Această funcție este destinată numai utilizării interne.",
        "Documentation.LongDescription": "Această funcție este destinată numai utilizării interne.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Returnează codul HTML pentru URL-ul specificat, așa cum este vizualizat de un browser web.",
        "Documentation.LongDescription": "Returnează codul HTML pentru <code>url</code> specificat, așa cum este vizualizat de un browser web. Un parametru opțional de înregistrare, <code>options</code>, poate fi furnizat pentru a specifica proprietățile suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: dacă site-ul țintă are cunoștință de o cheie API, acest parametru poate fi utilizat pentru a specifica numele (nu valoarea) parametrului cheie care trebuie utilizat în URL. Valoarea cheii este furnizată în acreditare.</li>\r\n        <li><code>WaitFor</code>: specifică o condiție de așteptat înainte de descărcarea codului HTML, pe lângă așteptarea ca pagina să se încarce (care se aplică întotdeauna). Poate fi o înregistrare care conține câmpurile Timeout și/sau Selector. Dacă se specifică doar Timeout, funcția va aștepta durata de timp specificată înainte să descarce codul HTML. Dacă se specifică atât Selector, cât și Timeout, iar perioada de expirare se scurge înainte ca Selectorul să existe pe pagină, va fi lansată o eroare. Dacă se specifică un Selector fără Timeout, se aplică o valoare implicită Timeout, de 30 de secunde.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Se accesează datele",
        "Documentation.Examples": [
          {
            "Description": "Returnează codul HTML pentru https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Returnează codul HTML pentru https://microsoft.com după ce se așteaptă să existe un selector CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Returnează codul HTML pentru https://microsoft.com după ce se așteaptă zece secunde.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Returnează codul HTML pentru https://microsoft.com după ce se așteaptă până la zece secunde să existe un selector CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Returnează conţinutul descărcat de la adresa URL ca binary.",
        "Documentation.LongDescription": "Returnează conținutul descărcat de la <code>url</code> ca binar. Se poate furniza un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>Query</code> : Adăugați programatic parametri de interogare la URL fără să trebuiască să vă faceți griji pentru aplicarea „escape”.</li>\r\n<li><code>ApiKeyName</code> : Dacă site-ul țintă are o noțiune de cheie API, acest parametru poate fi utilizat pentru a specifica numele (nu valoarea) parametrului cheie care trebuie utilizat &#238;n URL. Valoarea reală a cheii este furnizată &#238;n acreditare.</li>\r\n<li><code>Headers</code> : Specificarea acestei valori ca &#238;nregistrare va furniza anteturi suplimentare la o solicitare HTTP.</li>\r\n<li><code>Timeout</code> : Specificarea acestei valori ca durată va schimba perioada de expirare pentru o solicitare HTTP. Valoarea implicită este de 100 de secunde.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Specificarea acestei valori ca listă va exclude aceste chei de antet HTTP din calculul pentru amplasarea datelor &#238;n cache.</li>\r\n<li><code>IsRetry</code> : Specificarea acestei valori logice ca true va ignora orice răspuns existent &#238;n memoria cache la preluarea datelor.</li>\r\n<li><code>ManualStatusHandling</code> : Specificarea acestei valori ca listă va &#238;mpiedica orice manipulare &#238;ncorporată pentru solicitările HTTP al căror răspuns are unul dintre aceste coduri de stare.</li>\r\n<li><code>RelativePath</code> : Specificarea acestei valori ca text o adaugă la adresa URL de bază &#238;nainte de a face solicitarea.</li>\r\n<li><code>Content</code> : Specificarea acestei valori modifică solicitarea web de la GET la POST, folosind valoarea opțiunii drept conținut POST.</li>\r\n</ul>\r\n\r\n    Solicitarea HTTP se face fie ca GET (atunci când nu se specifică conținut), fie ca POST (când există conținut). Solicitările POST se pot face doar anonim.\r\n    <br>\r\n    Anteturile răspunsului HTTP sunt disponibile ca metadate pentru rezultatul binar. În afara unui context conector de date particularizat, este disponibil doar un subset de anteturi de răspuns (din motive de securitate).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Regăsiți conținutul <code>\"https://bing.com/search?q=Power+Query\"</code> utilizând opțiunile RelativePath și Query. Aceste opțiuni pot fi utilizate pentru a interoga dinamic o adresă URL statică de bază.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Efectuați un POST față de un URL, transmițând o sarcină JSON binară și analizând răspunsul ca JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Conectați-vă la un URL securizat care acceptă o cheie de autentificare ca parte a șirului de interogare. În loc de codificarea fizică a cheii secrete în M (care ar reprezenta un risc de securitate), \r\n    cheia poate fi furnizată în siguranță specificându-i numele (nu valoarea) în M, alegând autentificare Web API și introducând valoarea cheii ca parte a acreditării Web API.\r\n    Când se utilizează în acest mod, exemplul următor va genera o solicitare către <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Returnează anteturile HTTP descărcate de la URL ca valoare a înregistrării.",
        "Documentation.LongDescription": "Returnează anteturile descărcate de la <code>url</code> ca înregistrare. Se poate furniza un parametru de înregistrare opțional, <code>options</code>, pentru a specifica proprietăți suplimentare. Înregistrarea poate conține următoarele câmpuri:\r\n    <ul>\r\n<li><code>Query</code> : Adăugați programatic parametri de interogare la URL fără să trebuiască să vă faceți griji pentru aplicarea „escape”.</li>\r\n<li><code>ApiKeyName</code> : Dacă site-ul țintă are o noțiune de cheie API, acest parametru poate fi utilizat pentru a specifica numele (nu valoarea) parametrului cheie care trebuie utilizat &#238;n URL. Valoarea reală a cheii este furnizată &#238;n acreditare.</li>\r\n<li><code>Headers</code> : Specificarea acestei valori ca &#238;nregistrare va furniza anteturi suplimentare la o solicitare HTTP.</li>\r\n<li><code>Timeout</code> : Specificarea acestei valori ca durată va schimba perioada de expirare pentru o solicitare HTTP. Valoarea implicită este de 100 de secunde.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Specificarea acestei valori ca listă va exclude aceste chei de antet HTTP din calculul pentru amplasarea datelor &#238;n cache.</li>\r\n<li><code>IsRetry</code> : Specificarea acestei valori logice ca true va ignora orice răspuns existent &#238;n memoria cache la preluarea datelor.</li>\r\n<li><code>ManualStatusHandling</code> : Specificarea acestei valori ca listă va &#238;mpiedica orice manipulare &#238;ncorporată pentru solicitările HTTP al căror răspuns are unul dintre aceste coduri de stare.</li>\r\n<li><code>RelativePath</code> : Specificarea acestei valori ca text o adaugă la adresa URL de bază &#238;nainte de a face solicitarea.</li>\r\n</ul>\r\n\r\n    Solicitarea HTTP se face cu metoda HEAD. În afara unui context conector de date particularizat, este disponibil doar un subset de anteturi de răspuns (din motive de securitate).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Regăsiți anteturile HTTP pentru <code>\"https://bing.com/search?q=Power+Query\"</code> utilizând opțiunile RelativePath și Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Contextul de autorizare în raport cu care se evaluează o condiție de intrare pentru controlul accesului (ACE).",
        "Documentation.LongDescription": "Contextul de autorizare în raport cu care se evaluează o condiție de intrare pentru controlul accesului (ACE).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Un tabel cu intrări pentru controlul accesului (ACE).",
        "Documentation.LongDescription": "Un tabel ordonat de intrări de control al accesului (ACE), care reprezintă regulile de autorizare. Fiecare rând este evaluat în contextul curent de autorizare (în ordine) și primul rând pentru care expresia <code>Condition</code> returnează true determină regula care se aplică. Coloana <code>Action</code> reprezintă tipul de acțiune la care se aplică regula. Coloana <code>AccessControlKind</code> stabilește dacă accesul trebuie permis sau refuzat pentru acțiune.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Specifică tipul de control al accesului.",
        "Documentation.LongDescription": "Specifică tipul de control al accesului.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Tipul care reprezintă toate valorile.",
        "Documentation.LongDescription": "Tipul care reprezintă toate valorile.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Tipul care reprezintă toate valorile binare.",
        "Documentation.LongDescription": "Tipul care reprezintă toate valorile binare.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Specifică tipul de codificare binară.",
        "Documentation.LongDescription": "Specifică tipul de codificare binară.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Specifică de câte ori se așteaptă ca elementul să apară în grup.",
        "Documentation.LongDescription": "Specifică de câte ori se așteaptă ca elementul să apară în grup.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Descrie tipul de tampon de efectuat.",
        "Documentation.LongDescription": "Descrie tipul de tampon de efectuat.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Tipul care reprezintă toţi octeţii.",
        "Documentation.LongDescription": "Tipul care reprezintă toţi octeţii.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Specifică ordinea byților.",
        "Documentation.LongDescription": "Specifică ordinea byților.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Tipul care reprezintă toate caracterele.",
        "Documentation.LongDescription": "Tipul care reprezintă toate caracterele.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Specifică tipul de comprimare.",
        "Documentation.LongDescription": "Specifică tipul de comprimare.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Specifică semnificația ghilimelelor în documentele CSV.",
        "Documentation.LongDescription": "Specifică semnificația ghilimelelor în documentele CSV.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Tipul care reprezintă valoarea monetară.",
        "Documentation.LongDescription": "Tipul care reprezintă valoarea monetară.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Tipul care reprezintă toate valorile pentru dată.",
        "Documentation.LongDescription": "Tipul care reprezintă toate valorile pentru dată.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Tipul care reprezintă toate valorile pentru dată şi oră fără un fus orar asociat.",
        "Documentation.LongDescription": "Tipul care reprezintă toate valorile pentru dată şi oră fără un fus orar asociat.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Tipul care reprezintă toate valorile pentru dată şi oră relative la un fus orar.",
        "Documentation.LongDescription": "Tipul care reprezintă toate valorile pentru dată şi oră relative la un fus orar.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Specifică o zi din săptămână.",
        "Documentation.LongDescription": "Specifică o zi din săptămână.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Tipul care reprezintă numărul Decimal în virgulă fixă.",
        "Documentation.LongDescription": "Tipul care reprezintă numărul Decimal în virgulă fixă.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Tipul care reprezintă numărul în virgulă mobilă cu precizie dublă.",
        "Documentation.LongDescription": "Tipul care reprezintă numărul în virgulă mobilă cu precizie dublă.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Tipul care reprezintă toate valorile pentru durată.",
        "Documentation.LongDescription": "Tipul care reprezintă toate valorile pentru durată.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Specifică acțiunea așteptată pentru valorile suplimentare dintr-un rând care conține mai multe coloane decât era de așteptat.",
        "Documentation.LongDescription": "Specifică acțiunea așteptată pentru valorile suplimentare dintr-un rând care conține mai multe coloane decât era de așteptat.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Tipul care reprezintă toate funcţiile.",
        "Documentation.LongDescription": "Tipul care reprezintă toate funcţiile.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Specifică tipul de grupare.",
        "Documentation.LongDescription": "Mai multe grupuri locale pot fi produse cu aceeași valoare cheie, dar pentru o valoare cheie dată se produce un singur grup global.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Tipul care reprezintă o valoare Guid.",
        "Documentation.LongDescription": "Tipul care reprezintă o valoare Guid.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "O identitate reprezintă un utilizator, un grup, un dispozitiv sau alt lucru identificabil.",
        "Documentation.LongDescription": "O identitate reprezintă un utilizator, un grup, un dispozitiv sau alt lucru identificabil.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Definește un domeniu în care se creează și se compară identități.",
        "Documentation.LongDescription": "Definește un domeniu în care se creează și se compară identități.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Tipul care reprezintă numărul întreg pe 16 biți, cu semn.",
        "Documentation.LongDescription": "Tipul care reprezintă numărul întreg pe 16 biți, cu semn.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Tipul care reprezintă numărul întreg pe 32 de biți, cu semn.",
        "Documentation.LongDescription": "Tipul care reprezintă numărul întreg pe 32 de biți, cu semn.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Tipul care reprezintă numărul întreg pe 64 de biți, cu semn.",
        "Documentation.LongDescription": "Tipul care reprezintă numărul întreg pe 64 de biți, cu semn.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Tipul care reprezintă o valoare întreagă pe 8 biți, cu semn.",
        "Documentation.LongDescription": "Tipul care reprezintă o valoare întreagă pe 8 biți, cu semn.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Specifică algoritmul de asociere de utilizat în operația de asociere.",
        "Documentation.LongDescription": "Specifică algoritmul de asociere de utilizat în operația de asociere.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Specifică tipul de operațiune de asociere.",
        "Documentation.LongDescription": "Specifică tipul de operațiune de asociere.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Specifică tabelul din stânga sau din dreapta al unei uniri.",
        "Documentation.LongDescription": "Specifică tabelul din stânga sau din dreapta al unei uniri.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Descrie tipul de clauză limită acceptat de dialectul SQL utilizat de această sursă de date.",
        "Documentation.LongDescription": "Descrie tipul de clauză limită acceptat de dialectul SQL utilizat de această sursă de date.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Tipul care reprezintă toate listele.",
        "Documentation.LongDescription": "Tipul care reprezintă toate listele.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Tipul care reprezintă toate valorile logică.",
        "Documentation.LongDescription": "Tipul care reprezintă toate valorile logică.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Specifică acțiunea așteptată pentru valorile lipsă dintr-un rând care conține mai puține coloane decât era de așteptat.",
        "Documentation.LongDescription": "Specifică acțiunea așteptată pentru valorile lipsă dintr-un rând care conține mai puține coloane decât era de așteptat.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Tipul care reprezintă valoarea null.",
        "Documentation.LongDescription": "Tipul care reprezintă valoarea null.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Tipul care reprezintă toate numerele.",
        "Documentation.LongDescription": "Tipul care reprezintă toate numerele.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Specifică tipurile de valori pe care le poate omite un serviciu OData.",
        "Documentation.LongDescription": "Specifică tipurile de valori pe care le poate omite un serviciu OData.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Specifică ocurența unui element într-o secvență.",
        "Documentation.LongDescription": "Specifică ocurența unui element într-o secvență.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Specifică direcția de sortare.",
        "Documentation.LongDescription": "Specifică direcția de sortare.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Tipul care reprezintă o parolă text.",
        "Documentation.LongDescription": "Tipul care reprezintă o parolă text.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Tipul ce reprezintă valoarea procentuală.",
        "Documentation.LongDescription": "Tipul ce reprezintă valoarea procentuală.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Specifică tipul modului percentilă.",
        "Documentation.LongDescription": "Specifică tipul modului percentilă.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Specifică precizia comparației.",
        "Documentation.LongDescription": "Specifică precizia comparației.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Specifică stilul pentru ghilimele.",
        "Documentation.LongDescription": "Specifică stilul pentru ghilimele.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Specifică tipul de ierarhizare.",
        "Documentation.LongDescription": "Specifică tipul de ierarhizare.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Tipul care reprezintă toate înregistrările.",
        "Documentation.LongDescription": "Tipul care reprezintă toate înregistrările.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Indică dacă indexarea trebuie realizată de la începutul sau de la sfârșitul intrării.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Specifică direcția de rotunjire atunci când nu se poate decide între numerele posibile la care să se facă rotunjirea.",
        "Documentation.LongDescription": "Specifică direcția de rotunjire atunci când nu se poate decide între numerele posibile la care să se facă rotunjirea.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Opțiuni valide pentru opțiunea mod de executare SAP Business Warehouse.",
        "Documentation.LongDescription": "Opțiuni valide pentru opțiunea mod de executare SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Opțiunile valide pentru opțiunea de distribuire SAP HANA.",
        "Documentation.LongDescription": "Opțiunile valide pentru opțiunea de distribuire SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Un operator de interval pentru parametrii de intrare interval SAP HANA.",
        "Documentation.LongDescription": "Un operator de interval pentru parametrii de intrare interval SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Tipul care reprezintă numărul în virgulă mobilă cu precizie simplă.",
        "Documentation.LongDescription": "Tipul care reprezintă numărul în virgulă mobilă cu precizie simplă.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Protocolul de utilizat la conectarea la o instanță Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Tipul care reprezintă toate tabelele.",
        "Documentation.LongDescription": "Tipul care reprezintă toate tabelele.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Tipul care reprezintă toate valorile text.",
        "Documentation.LongDescription": "Tipul care reprezintă toate valorile text.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Specifică tipul de codificare a textului.",
        "Documentation.LongDescription": "Specifică tipul de codificare a textului.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Tipul care reprezintă toate valorile pentru oră.",
        "Documentation.LongDescription": "Tipul care reprezintă toate valorile pentru oră.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Specifică nivelul de trasare.",
        "Documentation.LongDescription": "Specifică nivelul de trasare.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Tipul care reprezintă toate tipurile.",
        "Documentation.LongDescription": "Tipul care reprezintă toate tipurile.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Tipul care reprezintă un URI text.",
        "Documentation.LongDescription": "Tipul care reprezintă un URI text.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Specifică o metodă HTTP.",
        "Documentation.LongDescription": "Specifică o metodă HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
