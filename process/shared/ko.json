{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Access 데이터베이스의 구조적 표현을 반환합니다.",
        "Documentation.LongDescription": "Access 데이터베이스의 구조적 표현 <code>database</code>을(를) 반환합니다. 선택적 레코드 매개 변수 <code>options</code>이(가) 다음 옵션을 제어하기 위해 지정될 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n</ul>\r\n\r\n    예를 들어, 레코드 매개 변수는 [option1 = value1, option2 = value2...] 형식으로 지정됩니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "특정 호스트에서 Analysis Services 데이터베이스를 반환합니다.",
        "Documentation.LongDescription": "Analysis Services 인스턴스 <code>server</code>에서 데이터베이스를 반환합니다. 선택적 레코드 매개 변수 <code>options</code>이(가) 추가 속성을 지정하기 위해 제공될 수 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : 다차원 또는 테이블 형식 모델에 지정된 형식이 추가된 측정 열의 형식에 사용됨을 나타내는 논리 값입니다. false로 설정하면 모든 측정 열에 대해 형식 number가 사용됩니다. 이 옵션의 기본값은 false입니다.</li>\r\n<li><code>Culture</code> : 데이터의 문화권을 지정하는 문화권 이름입니다. 이는 &#39;Locale Identifier&#39; 연결 문자열 속성에 해당합니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>SubQueries</code> : 연결 문자열에서 &quot;SubQueries&quot; 속성 값을 설정하는 숫자(0, 1 또는 2)입니다. 이 숫자는 subselect 또는 subcute에 대한 계산 멤버의 동작의 제어합니다(기본값은 2임).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "AtScale 큐브",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "AtScale의 가져오기/DirectQuery 큐브 데이터입니다.",
        "Documentation.LongDescription": "\r\n서버 <code>server</code>의 AtScale에서 큐브 데이터를 반환합니다. 선택적 레코드 매개 변수 <code>options</code>를 지정하여 다음 옵션을 제어할 수도 있습니다.\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: 다차원 또는 테이블 형식 모델에 지정된 유형을 추가된 측정값 열 유형에 사용할지 여부를 나타내는 논리적 값입니다. false로 설정할 경우 \"number\" 유형이 모든 측정값 열에 사용됩니다. 이 옵션의 기본값은 false입니다.</li>\r\n        <li><code>CommandTimeout</code>: 서버 쪽 쿼리를 취소 전까지 얼마나 오랫동안 실행할 수 있는지를 제어하는 기간(초)입니다. 기본값은 드라이버에 따라 다릅니다. </li>\r\n        <li><code>ConnectionTimeout</code>: 서버에 대한 연결 시도를 중단하기 전까지 얼마나 오랫동안 대기할지를 제어하는 기간(초)입니다. 기본값은 드라이버에 따라 다릅니다. </li>\r\n\r\n</ul>\r\n레코드 매개 변수는 [option1 = value1, option2 = value2...]로 지정됩니다.",
        "Documentation.Examples": {
          "Description": "AtScale 큐브에서 큐브 데이터를 나열합니다.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Azure Data Explorer(Kusto)에서 데이터를 가져옵니다.",
        "Documentation.DisplayName": "Azure Data Explorer(Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer(Kusto)",
        "Documentation.LongDescription": "Azure Data Explorer(Kusto) 인스턴스에서 데이터를 가져옵니다.",
        "Documentation.Examples": [
          {
            "Description": "Storm Events 정보 테이블을 반환합니다.",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "\"도움말\" 클러스터에 있는 \"Samples\" 데이터베이스의 Storm Events가 포함된 테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Analytics 서비스의 URL을 입력합니다.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "DevOps Analytics 서비스 URL에서 이진 값으로 다운로드한 콘텐츠를 반환합니다. 이 함수는 조직마다 각기 다른 자격 증명을 사용합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services 피드",
        "Documentation.DisplayName": "Azure DevOps Services 피드",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Azure DevOps에서 제공하는 OData 피드의 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "등록에 연결된 Azure 엔터프라이즈 REST API 끝점의 URL을 입력합니다.",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Azure 엔터프라이즈 API에서 사용할 수 있는 보고서 및 개월 목록을 반환합니다.",
        "Documentation.Name": "Azure 엔터프라이즈에서 데이터 가져오기",
        "Documentation.Examples": [
          {
            "Description": "AzureEnterprise.Tables 함수를 사용하고 특정 값을 탐색하여 결과를 얻습니다.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "시작 쿼리 샘플은 https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli를 참조하세요.",
        "Documentation.Examples": [
          {
            "Description": "사용자 쿼리 'resources'의 쿼리 결과가 포함된 테이블 반환",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Azure Spark 인스턴스의 테이블을 나열합니다.",
        "Documentation.LongDescription": "Azure Spark 인스턴스의 테이블을 나열합니다.",
        "Documentation.Examples": [
          {
            "Description": "Azure Spark 인스턴스의 테이블을 나열합니다.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Azure 스토리지 자격 증명 모음에서 지정된 계정에 있는 컨테이너를 포함하는 탐색 테이블을 반환합니다.",
        "Documentation.LongDescription": "Azure 스토리지 자격 증명 모음에서 계정 URL <code>account</code>에 있는 각 컨테이너에 대한 행을 포함하는 탐색 테이블을 반환합니다. 각 행에는 컨테이너 Blob에 대한 링크가 있습니다. 다음 옵션을 제어하기 위해 <code>options</code>이(가) 지정될 수 있습니다.\r\n    <ul>\r\n<li><code>BlockSize</code> : 데이터 소비자에서 대기하기 전 읽을 바이트 수입니다. 기본값은 4MB입니다.</li>\r\n<li><code>RequestSize</code> : 서버에 대한 단일 HTTP 요청에서 읽으려는 바이트 수입니다. 기본값은 4MB입니다.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 옵션은 메모리 사용률 비용으로 동시에 수행되는 요청 수를 지정하여 더 빠른 데이터 다운로드를 지원합니다. 필요한 메모리는 (ConcurrentRequest * RequestSize)입니다. 기본값은 16입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Azure Data Lake Storage에서 지정한 컨테이너 및 해당 하위 폴더에 있는 문서가 포함된 탐색 테이블을 반환합니다.",
        "Documentation.LongDescription": "Azure Data Lake Storage 파일 시스템의 계정 URL(<code>endpoint</code>)에서 지정한 컨테이너 및 해당 하위 폴더에 있는 문서가 포함된 탐색 테이블을 반환합니다. 다음 옵션을 제어하기 위해 <code>options</code>이(가) 지정될 수 있습니다.\r\n    <ul>\r\n<li><code>BlockSize</code> : 데이터 소비자에서 대기하기 전 읽을 바이트 수입니다. 기본값은 4MB입니다.</li>\r\n<li><code>RequestSize</code> : 서버에 대한 단일 HTTP 요청에서 읽으려는 바이트 수입니다. 기본값은 4MB입니다.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 옵션은 메모리 사용률 비용으로 동시에 수행되는 요청 수를 지정하여 더 빠른 데이터 다운로드를 지원합니다. 필요한 메모리는 (ConcurrentRequest * RequestSize)입니다. 기본값은 16입니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 파일이 트리 형식 디렉터리 보기 또는 단순 목록에 반환되는지 여부를 제어하는 논리(true/false)입니다. 기본값은 false입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Azure 스토리지 자격 증명 모음에서 지정된 계정에 있는 테이블을 포함하는 탐색 테이블을 반환합니다.",
        "Documentation.LongDescription": "Azure 스토리지 자격 증명 모음에서 계정 URL(<code>account</code>)에 있는 각 테이블에 대한 행을 포함하는 탐색 테이블을 반환합니다. 각 행에는 Azure 테이블 링크가 포함되어 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 제공하여 추가 속성을 지정할 수도 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>Timeout</code> : 서버에 대한 요청을 중단하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 원본에 따라 다릅니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "AKS Trino의 Azure HDInsight"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "블룸버그 데이터 및 분석  v1.1.3",
        "Documentation.Description": "블룸버그 데이터 불러오기에 사용됨"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": ".NET 4.5가 필요하기 때문에 이 함수는 사용할 수 없습니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service(레거시)",
        "Documentation.Caption": "Common Data Service(레거시)",
        "Documentation.LongDescription": "Common Data Service 인스턴스(Dynamics 365 및 PowerApps)에 연결합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "CSV 문서의 내용을 테이블로 반환합니다.",
        "Documentation.LongDescription": "CSV 문서의 내용을 테이블로 반환합니다.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code>은(는) null, 열 수, 열 이름 목록, 테이블 유형 또는 옵션 레코드가 될 수 있습니다.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code>은(는) 단일 문자, 문자 목록 또는 <code>\"\"</code> 값(행이 연속 공백 문자로 분할되어야 함을 나타냄)일 수 있습니다. 기본값: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>extraValues</code>에 대해 지원되는 값은 <code>ExtraValues.Type</code>을 참조하세요.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code>은(는) 텍스트 인코딩 유형을 지정합니다.\r\n      </li>\r\n    </ul>\r\n\r\n    <code>columns</code>(<code>delimiter</code>, <code>extraValues</code> 및 <code>encoding</code>은(는) null임)에 대해 레코드가 지정된 경우 다음 레코드 필드가 제공될 수 있습니다.\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: 열 구분 기호입니다. 기본값: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: null, 열 수, 열 이름 목록 또는 테이블 유형일 수 있습니다. 열 수가 입력에서 찾은 수보다 적으면 추가 열이 무시됩니다. 열 수가 입력에서 찾은 수보다 크면 추가 열은 null이 됩니다. 지정하지 않으면 열 수는 입력에서 찾은 항목에 따라 결정됩니다.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: 파일의 텍스트 인코딩입니다. 기본값: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: 따옴표 처리 방법을 지정합니다.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (default): 필드의 따옴표는 구분 기호 바로 다음에 오는 경우에만 중요합니다.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: 필드의 따옴표는 나타나는 위치에 관계없이 항상 중요합니다.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: 따옴표로 묶인 줄 바꿈을 처리하는 방법을 지정합니다.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (default): 따옴표로 묶인 줄 바꿈은 현재 행의 끝이 아니라 데이터의 일부로 처리됩니다.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: 모든 줄 바꿈은 따옴표로 묶인 값 내에서 발생하는 경우에도 현재 행의 끝으로 처리됩니다.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "열 머리글이 있는 CSV 텍스트 처리",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "사용 가능한 차원 집합이 포함된 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>cube</code> 내에서 사용 가능한 차원 집합이 포함된 테이블을 반환합니다. 각 차원은 차원 특성 집합을 포함하는 테이블이고 각 차원 특성은 차원 테이블에서 열로 표시됩니다. 차원은 Cube.AddAndExpandDimensionColumn을 사용해서 큐브에서 확장할 수 있습니다. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "객체의 폴더 표시 계층을 나타내는 중첩된 테이블 트리를 반환합니다(예: 차원 및 측정값).",
        "Documentation.LongDescription": "<code>cube</code>에서 사용할 수 있는 객체의 폴더 표시 계층을 나타내는 중첩된 테이블 트리를 반환합니다(예: 차원 및 측정값).",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "큐브에서 확장되는 사용 가능한 측정값 속성 집합이 포함된 테이블을 반환합니다.",
        "Documentation.LongDescription": "큐브에서 확장되는 측정값에 대해 사용 가능한 속성 집합이 포함된 테이블을 반환합니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "사용 가능한 측정값 집합을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>cube</code> 내에서 사용 가능한 측정값 집합이 포함된 테이블을 반환합니다.\r\n    각 측정값은 함수로 표현됩니다. 측정값은 Cube.AddMeasureColumn을 사용해서 큐브에 적용할 수 있습니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "큐브에 적용될 수 있는 매개 변수 집합을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>cube</code>에 적용될 수 있는 매개 변수 집합을 포함하는 테이블을 반환합니다. 각 매개 변수는 해당 매개 변수 및 적용된 인수가 포함된 <code>cube</code>을(를) 받도록 호출될 수 있는 함수입니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "큐브에서 확장되는 차원에 대해 사용 가능한 속성 집합이 포함된 테이블을 반환합니다.",
        "Documentation.LongDescription": "큐브에서 확장되는 차원에 대해 사용 가능한 속성 집합이 포함된 테이블을 반환합니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Azure Data Lake Storage Gen1 계정의 URL을 입력합니다.",
        "Documentation.LongDescription": "Azure Data Lake Storage Gen1의 <code>url</code>에서 찾은 각 폴더 및 파일에 대한 행을 포함하는 테이블을 반환합니다. 각 행에는 폴더 또는 파일의 속성과 콘텐츠에 대한 링크가 포함되어 있습니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Azure Data Lake Storage 계정의 URL을 입력합니다.",
        "Documentation.LongDescription": "Azure Data Lake Storage Gen1의 <code>url</code>에서 찾은 각 파일에 대한 행을 포함하는 테이블을 반환합니다. 각 행에는 파일의 속성과 콘텐츠에 대한 링크가 포함되어 있습니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB(SQL API)",
        "Documentation.Description": "Azure Cosmos DB 계정의 URL을 입력합니다.",
        "Documentation.LongDescription": "<code>url</code>에 있는 Azure Cosmos DB 데이터베이스의 테이블을 반환합니다. <code>database</code>가 지정된 경우 컬렉션의 테이블이 대신 반환됩니다. 또한 <code>Query</code> 필드가 <code>options</code> 레코드에 지정된 경우 지정된 데이터베이스 및/또는 컬렉션에서 실행되는 쿼리의 결과가 반환됩니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central(온-프레미스) OData Service 엔드포인트의 URL을 입력합니다.",
        "Documentation.DisplayName": "Dynamics 365 Business Central(온-프레미스)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central(온-프레미스)",
        "Documentation.LongDescription": "관련 Dynamics 365 Business Central(온-프레미스) 데이터가 포함된 테이블을 반환합니다. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics NAV OData Service 엔드포인트 URL을 입력합니다.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "관련 Dynamics NAV 데이터가 포함된 테이블을 반환합니다. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Essbase 서버별로 그룹화된 Essbase 인스턴스에서 큐브를 반환합니다.",
        "Documentation.LongDescription": "APS 서버 <code>url</code>의 Essbase 인스턴스에서 Essbase 서버로 그룹화된 큐브 테이블을 반환합니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Excel 통합 문서의 내용을 반환합니다.",
        "Documentation.LongDescription": "Excel 통합 문서의 내용을 반환합니다. \r\n    <ul>\r\n     <li> <code>useHeaders</code>은(는) Null일 수 있으며, 이는 반환된 각 테이블의 첫 번째 행을 헤더로 처리할지, 아니면 옵션 레코드로 처리할지를 나타내는 논리 값(true/false)입니다. 기본값: false.</li>\r\n     <li> <code>delayTypes</code>은(는) Null일 수도 있고, 반환된 각 테이블의 열을 형식화되지 않은 상태로 유지해야 하는지 여부를 나타내는 논리 값(true/false) 값일 수도 있습니다. 기본값: false.</li>\r\n    </ul>\r\n\r\n    <code>useHeaders</code>에 대한 레코드가 지정되어 있고 <code>delayTypes</code>이(가) Null인 경우 다음 레코드 필드가 제공될 수 있습니다.\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Null일 수도 있고, 반환된 각 테이블의 첫 번째 행을 헤더로 처리할지 여부를 나타내는 논리 값(true/false) 값일 수도 있습니다. 기본값: false.</li>\r\n     <li> <code>DelayTypes</code>: Null일 수도 있고, 반환된 각 테이블의 열을 형식화되지 않은 상태로 유지해야 하는지 여부를 나타내는 논리 값(true/false)일 수도 있습니다. 기본값: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: Null일 수도 있고, 파일에서 차원 메타데이터를 읽는 대신 워크시트 자체를 읽어 데이터가 포함된 워크시트의 영역을 유추해야 하는지 여부를 나타내는 논리 값(true/false)일 수도 있습니다. 이는 차원 메타데이터가 올바르지 않은 경우 유용할 수 있습니다. 이 옵션은 Open XML Excel 파일에 대해서만 지원되며 레거시 Excel 파일에는 지원되지 않습니다. 기본값: false.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Excel 통합 문서에서 시트 1의 내용을 반환합니다.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "지정된 폴더에 있는 파일 및 폴더의 속성과 내용을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "폴더 <code>path</code>에 있는 각 폴더 및 파일에 대한 행을 포함하는 테이블을 반환합니다. 각 행에는 폴더 또는 파일의 속성과 해당 내용에 대한 링크가 포함됩니다. <code>options</code> 매개 변수는 현재 내부 전용입니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "지정된 폴더 및 하위 폴더에 있는 파일의 속성과 내용을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "폴더 <code>path</code>와(과) 모든 하위 폴더에서 찾은 각 파일에 대한 행을 포함하는 테이블을 반환합니다. 각 행에는 파일의 속성과 해당 콘텐츠에 대한 링크가 포함됩니다. <code>options</code> 매개 변수는 현재 내부용으로만 사용됩니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery(Azure AD)",
        "Documentation.Caption": "Google BigQuery(Azure AD)",
        "Documentation.Description": "Azure AD를 사용하여 Google BigQuery 데이터베이스에서 데이터 가져오기",
        "Documentation.LongDescription": "\r\n      <code>청구 프로젝트 ID</code>에 대해 Azure AD를 사용하여 Google BigQuery에서 사용 가능한 프로젝트를 나열하는 테이블을 반환합니다. 다음 옵션을 제어하기 위해 선택적 레코드 매개 변수인 <code>options</code>를 지정할 수 있습니다.\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: 서버 연결 시도를 포기하기 전에 대기하는 시간을 제어하는 기간입니다. 기본값은 ODBC 연결 시간 값입니다..</li>\r\n        <li><code>CommandTimeout</code>: 서버 측 쿼리가 취소되기 전에 실행할 수 있는 기간을 제어하는 기간입니다.</li>\r\n        <li><code>UseStorageApi</code>: 큰 결과 세트에 BigQuery Storage API를 사용할지 여부를 지정합니다. Storage API를 사용하려면 기본값이 true입니다. Storage API를 사용하지 않으려면 false로 설정하세요.</li>\r\n        <li><code>AudienceUri</code>: ODBC 드라이버가 토큰 교환 요청에 사용할 수 있는 대상 URI입니다. 이 필드는 정규화된 URI(예: //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread)여야 합니다. 여기서 pool_id는 인력 풀을 식별하기 위한 전역적 고유 이름입니다.</li>\r\n      </ul>\r\n    이 레코드 매개 변수는 [option1 = value1, option2 = value2...]과(와) 같이 지정됩니다.\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Azure AD를 사용하여 Google BigQuery에서 사용 가능한 프로젝트 나열",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google 스프레드시트",
        "Documentation.Caption": "Google 스프레드시트",
        "Documentation.Description": "GoogleSheets에서 데이터 가져오기",
        "Documentation.LongDescription": "GoogleSheets에서 데이터 가져오기"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Azure 스토리지 자격 증명 모음에서 지정된 계정에 있는 컨테이너를 포함하는 탐색 테이블을 반환합니다.",
        "Documentation.LongDescription": "Azure 스토리지 자격 증명 모음에서 계정 URL <code>account</code>에 있는 각 컨테이너에 대한 행을 포함하는 탐색 테이블을 반환합니다. 각 행에는 컨테이너 blob에 대한 링크가 있습니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Azure 스토리지 자격 증명 모음에서 지정된 계정에 있는 컨테이너를 포함하는 탐색 테이블을 반환합니다.",
        "Documentation.LongDescription": "Azure 스토리지 자격 증명 모음에서 계정 URL <code>account</code>에 있는 각 컨테이너에 대한 행을 포함하는 탐색 테이블을 반환합니다. 각 행에는 컨테이너 blob에 대한 링크가 있습니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Hadoop 파일 시스템에서 지정된 폴더에 있는 파일 및 폴더의 속성과 내용을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "Hadoop 파일 시스템에서 폴더 URL <code>url</code>에 있는 각 폴더 및 파일에 대한 행을 포함하는 테이블을 반환합니다. 각 행에는 폴더 또는 파일의 속성과 해당 내용에 대한 링크가 포함됩니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Hadoop 파일 시스템의 지정된 폴더 및 하위 폴더에 있는 파일의 속성과 내용을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "Hadoop 파일 시스템의 폴더 URL <code>url</code> 및 하위 폴더에 있는 각 파일에 대한 행을 포함하는 테이블을 반환합니다. 각 행에는 파일의 속성과 해당 내용에 대한 링크가 포함됩니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Impala 클러스터에서 데이터를 가져옵니다.",
        "Documentation.LongDescription": "Impala 클러스터 <code>server</code>에서 데이터를 가져옵니다. 포트가 지정되지 않은 경우 기본 포트로 21050이 사용됩니다.",
        "Documentation.Examples": [
          {
            "Description": "Impala 클러스터에 테이블을 나열합니다.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Azure Data Explorer(Kusto)에서 데이터를 가져옵니다.",
        "Documentation.DisplayName": "Azure Data Explorer(Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer(Kusto)",
        "Documentation.LongDescription": "Azure Data Explorer(Kusto) 인스턴스에서 데이터를 가져옵니다.",
        "Documentation.Examples": [
          {
            "Description": "Storm Events 정보 테이블을 반환합니다.",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "\"도움말\" 클러스터에 있는 \"Samples\" 데이터베이스의 Storm Events가 포함된 테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "MailChimp 엔드포인트의 데이터가 있는 테이블을 반환합니다.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "MailChimp API에 호출하고 결과 데이터 세트를 테이블로 반환합니다. 모든 결과를 통해 자동으로 호출합니다. JSON 응답의 주 entityName과 루트 엔드포인트가 일치하지 않는 API 엔드포인트의 경우 옵션 entityName 매개 변수를 사용할 수 있습니다.",
        "Documentation.Examples": [
          {
            "Description": "MailChimp API의 목록 엔드포인트에서 데이터 테이블을 가져옵니다.",
            "Code": "MailChimp.Collection(\"목록\")",
            "Result": "목록 데이터가 있는 테이블입니다."
          },
          {
            "Description": "MailChimp API의 캠페인 폴더 엔드포인트에서 데이터 테이블을 가져옵니다.",
            "Code": "MailChimp.Collection(\"캠페인 폴더\", \"폴더\")",
            "Result": "캠페인 폴더 데이터가 있는 테이블입니다."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "MailChimp API 엔드포인트의 원시 응답 결과를 반환합니다.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "MailChimp API에 호출하고 원시 응답을 반환합니다.",
        "Documentation.Examples": [
          {
            "Description": "지정된 캠페인에 대해 보고서/세부 정보 클릭 MailChimp API 엔드포인트에서 원시 데이터를 반환합니다.",
            "Code": "MailChimp.Instance(\"보고서/{campaign_id}/세부 정보 클릭\")",
            "Result": "지정된 캠페인의 원시 세부 정보 클릭 데이터입니다."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "Power BI용 MicroStrategy ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "고급 쿼리 함수를 제공합니다.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "고급 쿼리 함수를 제공합니다.",
        "Documentation.Examples": [
          {
            "Description": "오늘이 2017년 6월 15일이라고 가정할 경우 2017년 5월 1일부터 2017년 6월 15일까지의 요약 데이터를 가져옵니다.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "함수는 2017년 5월 1일부터 2017년 6월 15일까지의 요약 데이터를 반환합니다."
          },
          {
            "Description": "오늘이 2017년 6월 15일이라고 가정할 경우 2017년 4월의 요약 데이터를 가져옵니다.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "함수는 2017년 4월 1일부터 2017년 4월 30일까지의 데이터를 반환합니다."
          },
          {
            "Description": "오늘이 2017년 6월 15일이라고 가정할 경우 2017년 4월부터 현재까지의 요약 데이터를 가져옵니다.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "함수는 2017년 4월 1일부터 2017년 6월 15일까지의 데이터를 반환합니다."
          },
          {
            "Description": "오늘이 2017년 6월 15일이라고 가정할 경우 지난 12월부터 올해 2월까지의 요약 데이터를 가져옵니다. ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "함수는 2016년 12월 1일부터 2017년 2월 28일까지의 데이터를 반환합니다."
          },
          {
            "Description": "오늘이 2017년 6월 15일이라고 가정할 경우 지난 18개월 동안의 마켓플레이스 수수료를 가져옵니다.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "함수는 2015년 12월 1일부터 2017년 6월 15일까지의 데이터를 반환합니다."
          },
          {
            "Description": "오늘이 2017년 6월 15일이라고 가정할 경우 2017년 5월과 6월의 수수료 세부 내역을 가져옵니다.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "함수는 2017년 5월 1일부터 2017년 6월 15일까지의 데이터를 반환합니다."
          },
          {
            "Description": "오늘이 2017년 7월 3일이라고 가정할 경우 2016년 7월의 수수료 세부 내역을 가져옵니다.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "함수는 2016년 7월 1일부터 2016년 7월 31일까지의 데이터를 반환합니다."
          },
          {
            "Description": "오늘이 2017년 7월 13일이라고 가정할 경우 지난 10개월과 이번 달 13일을 합한 기간 동안의 잔고 요약을 가져옵니다.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "함수는 2016년 9월 1일부터 2017년 7월 13일까지의 데이터를 반환합니다."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "ODBC 데이터 원본의 SQL 테이블과 뷰에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "연결 문자열 <code>connectionString</code>에 지정된 ODBC 데이터 소스의 SQL 테이블과 뷰에 대한 테이블을 반환합니다. <code>connectionString</code>은(는) 텍스트이거나 속성 값 쌍의 레코드일 수 있습니다. 속성 값은 텍스트 또는 숫자일 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 제공하여 추가 속성을 지정할 수 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 15초입니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 인증에 사용할 SQL Server 호환 연결 문자열 옵션을 생성할지 여부를 결정하는 논리값(true/false)입니다. 기본값은 true입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "제공된 연결 문자열에서 SQL 테이블 및 뷰를 반환합니다.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "OLE DB 데이터 원본에서 SQL 테이블 및 뷰로 구성된 테이블을 반환합니다.",
        "Documentation.LongDescription": "연결 문자열 <code>connectionString</code>에 지정된 OLE DB 데이터 원본에서 SQL 테이블 및 뷰로 구성된 테이블을 반환합니다. <code>connectionString</code>은(는) 텍스트일 수도 있고 속성 값 쌍 레코드일 수도 있습니다. 속성 값은 텍스트 또는 숫자일 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 제공하여 추가 속성을 지정할 수도 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 인증에 사용할 SQL Server 호환 연결 문자열 옵션을 생성할지 여부를 결정하는 논리값(true/false)입니다. 기본값은 true입니다.</li>\r\n</ul>\r\n\r\n    레코드 매개 변수는 [option1 = value1, option2 = value2...] 또는 [Query = \"select ...\"]와 같이 지정됩니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Oracle Database의 SQL 테이블과 뷰에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>server</code> 서버에 있는 Oracle Database의 SQL 테이블과 뷰에 대한 테이블을 반환합니다. 포트에는 콜론으로 구분된 서버가 선택적으로 지정될 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n</ul>\r\n\r\n    예를 들어, 레코드 매개 변수는 [option1 = value1, option2 = value2...] 또는 [Query = \"select ...\"] 형식으로 지정됩니다.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "PDF 파일에 있는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>pdf</code>에서 테이블을 반환합니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 제공하여 추가 속성을 지정할 수 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>Implementation</code> : 테이블을 식별할 때 사용할 알고리즘의 버전입니다. 이전 버전은 이전 쿼리가 알고리즘 업데이트로 인해 손상되는 것을 방지하기 위해 이전 버전과의 호환성을 위해서만 사용할 수 있습니다. 최신 버전은 항상 최상의 결과를 제공해야 합니다. 유효한 값은 &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot; 또는 null입니다.</li>\r\n<li><code>StartPage</code> : 검사할 페이지 범위에서 첫 번째 페이지를 지정합니다. 기본값은 1입니다.</li>\r\n<li><code>EndPage</code> : 검사할 페이지 범위에서 마지막 페이지를 지정합니다. 기본값은 문서의 마지막 페이지입니다.</li>\r\n<li><code>MultiPageTables</code> : 연속한 페이지의 유사한 테이블을 단일 테이블로 자동으로 결합할지 여부를 제어합니다. 기본값은 True입니다.</li>\r\n<li><code>EnforceBorderLines</code> : 테두리 선을 항상 셀 경계로 적용할지(True일 경우) 또는 셀 경계를 결정하기 위한 많은 힌트 중 하나로 사용할지(False일 경우)를 제어합니다. 기본값은 False입니다.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "데이터 액세스",
        "Documentation.Examples": [
          {
            "Description": "sample.pdf에 포함된 테이블을 반환합니다.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Planview Projectplace 계정의 URL을 입력합니다.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "관련 Planview Projectplace 데이터가 포함된 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "걖뎝呂쾖Python script",
        "Documentation.Description": "俺춝괕쾖Executes Python script and returns data frames",
        "Documentation.Examples": {
          "Description": "俺춝괕쾖Executes Python script and returns data frames",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "리흐呂괕R script",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "각 행이 입력 레코드의 필드 이름 및 값이 되는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>Name</code> 및 <code>Value</code> 열과 <code>record</code>의 각 필드에 대한 행을 하나씩 포함하는 테이블을 반환합니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "레코드에서 테이블을 반환합니다.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "SAP HANA 데이터베이스에서 패키지를 반환합니다.",
        "Documentation.LongDescription": "SAP HANA 데이터베이스 <code>server</code>에서 다차원 패키지 테이블을 반환합니다. 선택적 레코드 매개 변수 <code>options</code>이(가) 다음 옵션을 제어하기 위해 지정될 수 있습니다.\r\n    <ul>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>Distribution</code> : 연결 문자열에서 &quot;Distribution&quot; 속성 값을 설정하는 SapHanaDistribution입니다. 문을 라우팅하면 문을 실행하기 전에 배포된 시스템의 올바른 서버 노드를 평가할 수 있습니다. 기본값은 SapHanaDistribution.All입니다.</li>\r\n<li><code>Implementation</code> : 사용할 SAP HANA 커넥터 구현을 지정합니다.</li>\r\n<li><code>EnableColumnBinding</code> : 데이터를 가져올 때 SAP HANA 결과 집합의 열에 변수를 바인딩합니다. 약간 더 높은 메모리 사용률을 희생시키면서 잠재적으로 성능을 향상시킬 수 있습니다. 기본값은 false입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 15초입니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "SharePoint 사이트의 콘텐츠를 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "지정된 SharePoint 사이트 <code>url</code>에 있는 각 폴더 및 문서에 대해 행을 하나씩 포함하는 테이블을 반환합니다. 각 행에는 폴더 또는 파일의 속성과 해당 내용에 대한 링크가 포함됩니다. <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>ApiVersion</code> : 이 사이트에 사용할 SharePoint API 버전을 지정하는 숫자(14 또는 15) 또는 텍스트 &quot;Auto&quot;입니다. 지정하지 않으면 API 버전 14가 사용됩니다. Auto를 지정하면 가능한 경우 서버 버전이 자동으로 검색되고 그렇지 않으면 버전이 14로 기본 설정됩니다. 영어 외의 언어로 되어 있는 SharePoint 사이트의 경우 버전 15 이상이 필요합니다.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "SharePoint 사이트의 문서를 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "지정된 SharePoint 사이트 <code>url</code> 및 하위 폴더에 있는 각 문서에 대해 행을 하나씩 포함하는 테이블을 반환합니다. 각 행에는 폴더 또는 파일의 속성과 해당 내용에 대한 링크가 포함됩니다. <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>ApiVersion</code> : 이 사이트에 사용할 SharePoint API 버전을 지정하는 숫자(14 또는 15) 또는 텍스트 &quot;Auto&quot;입니다. 지정하지 않으면 API 버전 14가 사용됩니다. Auto를 지정하면 가능한 경우 서버 버전이 자동으로 검색되고 그렇지 않으면 버전이 14로 기본 설정됩니다. 영어 외의 언어로 되어 있는 SharePoint 사이트의 경우 버전 15 이상이 필요합니다.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "SharePoint 목록의 내용을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "지정된 SharePoint 목록 <code>url</code>에 있는 각 목록 항목에 대해 행을 하나씩 포함하는 테이블을 반환합니다. 각 행에는 목록의 속성이 포함됩니다. <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>ApiVersion</code> : 이 사이트에 사용할 SharePoint API 버전을 지정하는 숫자(14 또는 15) 또는 텍스트 &quot;Auto&quot;입니다. 지정하지 않으면 API 버전 14가 사용됩니다. Auto를 지정하면 가능한 경우 서버 버전이 자동으로 검색되고 그렇지 않으면 버전이 14로 기본 설정됩니다. 영어 외의 언어로 되어 있는 SharePoint 사이트의 경우 버전 15 이상이 필요합니다.</li>\r\n<li><code>Implementation</code> : 선택적 항목. 사용할 SharePoint 커넥터 버전을 지정합니다. 허용되는 값은 &quot;2.0&quot; 또는 null입니다. 값이 &quot;2.0&quot;이면 SharePoint 커넥터의 2.0 구현이 사용됩니다. 값이 null이면 SharePoint 커넥터의 원래 구현이 사용됩니다.</li>\r\n<li><code>ViewMode</code> : 선택적 항목. 이 옵션은 구현 2.0에만 유효합니다. 허용되는 값은 &quot;모두&quot; 및 &quot;기본값&quot;입니다. 값을 지정하지 않으면 값이 &quot;All&quot;로 설정됩니다. &quot;모두&quot;를 지정하면 보기에 모든 사용자 생성 및 시스템 정의 열이 포함됩니다. &quot;기본값&quot;이 지정되면 보기는 사용자가 설정에서 기본값으로 설정한 보기에서 온라인으로 목록을 볼 때 사용자가 보는 것과 일치합니다. 사용자가 기본 보기를 편집하여 사용자 생성 열 또는 시스템 정의 열을 추가 또는 제거하거나 새 보기를 생성하고 기본값으로 설정하면 이러한 변경 내용이 커넥터를 통해 전파됩니다.</li>\r\n<li><code>DisableAppendNoteColumns</code> : 커넥터가 메모 열에 별도의 엔드포인트를 사용하지 못하도록 합니다.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "SODA 2.0 API에 따른 형식으로 지정한 URL에 있는 콘텐츠에서 테이블을 반환합니다.",
        "Documentation.LongDescription": "SODA 2.0 API에 따른 형식으로 지정한 URL <code>url</code>에 있는 콘텐츠에서 테이블을 반환합니다. URL이 .csv 확장명으로 끝나는 유효한 SODA 규격 원본을 가리켜야 합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "이 함수는 SparkPost API v1에서 제공하는 \"Lists\" 끝점을 호출하는 데 사용할 수 있습니다. 이 함수를 사용하여 SparkPost API를 호출할 때는 SparkPost API에는 엄격한 API 속도 제한이 있음을 염두에 두어야 합니다. SparkPost 서버에서 429 상태 코드가 반환되는 경우 속도 제한에 도달하여 추가 호출을 수행하려면 잠시 기다려야 합니다.",
        "Documentation.Examples": [
          {
            "Description": "SparkPost API v1 \"Lists\" 엔드포인트 중 하나의 데이터로 채워진 단일 열이 있는 테이블을 반환합니다(자세한 내용은 SparkPost 설명서 참조).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "사용자가 지정한 일수 동안 집계된 데이터와 함께 SparkPost 커넥터를 통해 노출되는 기본 제공 테이블을 검색합니다. 이러한 테이블을 새로 고치거나 이 커넥터로 SparkPost API를 호출하는 경우 SparkPost API에는 엄격한 API 속도 제한이 있음을 염두에 둡니다. SparkPost 서버에서 429 상태 코드가 반환되는 경우 속도 제한에 도달하여 추가 호출을 수행하려면 잠시 기다려야 합니다. Number of days 매개 변수 값을 선택할 때는 API에는 6개월 분량의 데이터만 저장된다는 점에 유의합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "SQL Server의 데이터베이스를 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "지정된 SQL Server <code>server</code>의 데이터베이스로 구성된 테이블을 반환합니다. 선택적 레코드 매개 변수 <code>options</code>이(가) 다음 옵션을 제어하기 위해 지정될 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : 생성된 SQL 쿼리에 &quot; maxdop” 쿼리 절의 값을 설정하는 숫자입니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n<li><code>MultiSubnetFailover</code> : 연결 문자열에 &quot;MultiSubnetFailover&quot; 속성 값을 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n<li><code>UnsafeTypeConversions</code> : True인 경우 실패할 수 있는 형식 변환을 폴딩하고 전체 쿼리가 실패하는 논리 값(true/false)입니다. 일반 용도로는 권장되지 않습니다.</li>\r\n<li><code>ContextInfo</code> : 각 명령을 실행하기 전에 CONTEXT_INFO를 설정하는 데 사용되는 이진 값입니다.</li>\r\n<li><code>OmitSRID</code> : True인 경우 기하 도형 및 지리 유형에서 Well-Known Text를 생성할 때 SRID를 생략합니다.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : true인 경우 동일한 서버의 데이터베이스에서 쿼리 폴딩을 허용하는 논리적(true/false) 값입니다. 기본값은 false입니다.</li>\r\n</ul>\r\n\r\n    예를 들어, 레코드 매개 변수는 [option1 = value1, option2 = value2...] 형식으로 지정됩니다.\r\n    <br>\r\n    서버에서 실행하는 데 SQL 쿼리 설정을 지원하지 않습니다. 대신 SQL 쿼리를 실행하는 데 <code>Sql.Database</code>를 사용해야 합니다.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "API 호출 수를 제한하는 옵션과 함께 Stripe API를 호출합니다.",
        "Documentation.LongDescription": "추가 매개 변수로 전달된 선택적 레코드 <code>query</code>와 API 요청 수에 대한 제한으로 선택적 <code>pageLimit</code>를 포함하여 https://api.stripe.com/v1/<code>method</code>에서 Stripe API를 호출합니다. 최근 데이터가 먼저 반환됩니다. <code>pageLimit</code>가 지정되지 않은 경우 모든 데이터가 반환됩니다. Stripe Version 2015-10-16이 사용됩니다.",
        "Documentation.Examples": [
          {
            "Description": "모든 요금 데이터 반환",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "현재 Stripe 계정에 대한 모든 요금 데이터를 포함하는 테이블"
          },
          {
            "Description": "요금 데이터의 한 페이지 반환",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "현재 Stripe 계정에 대한 최근 요금 데이터를 포함하는 테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "계산하는 동안 테이블을 메모리에 버퍼링하여 외부 변경으로부터 격리합니다.",
        "Documentation.LongDescription": "테이블을 메모리에 버퍼링하여 평가하는 동안 외부 변경 사항으로부터 격리합니다.\r\n    버퍼링이 단순합니다. 스칼라 셀 값을 강제로 평가하지만 스칼라가 아닌 값(레코드, 목록, 테이블 등)은 있는 그대로 둡니다.\r\n    <br>\r\n    <br>\r\n    이 기능을 사용하면 쿼리가 더 빨리 실행될 수도 있고 그렇지 않을 수도 있습니다. 경우에 따라 모든 데이터를 읽고\r\n     메모리에 저장하는 추가 비용과 버퍼링이 다운스트림 폴딩을 방지한다는 사실로 인해 쿼리 실행이 더 느려질 수 있습니다. 데이터를 버퍼링할 필요는 없지만\r\n      다운스트림 접기를 방지하려면 대신 <code>Table.StopFolding</code>을 사용하세요.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "모든 다운스트림 작업이 더 이상 SQL Server를 쿼리할 수 없도록 SQL 테이블의 모든 행을 메모리에 로드합니다.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "테이블 목록을 병합한 결과 테이블을 반환합니다.",
        "Documentation.LongDescription": "테이블 <code>tables</code>의 목록을 병합한 결과에 해당하는 테이블을 반환합니다. 결과로 만들어진 테이블에는 <code>columns</code> 또는 입력 유형의 공용 구조체(<code>columns</code>이(가) 지정되지 않은 경우)로 정의되는 행 유형 구조가 생성됩니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "세 테이블을 모두 병합합니다.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "구조가 서로 다른 세 테이블을 병합합니다.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "두 테이블과 프로젝트를 지정된 형식으로 병합합니다.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "열 머리글을 첫 번째 값 행으로 수준을 내립니다.",
        "Documentation.LongDescription": "열 머리글(예: 열 이름)을 첫 번째 값 행으로 수준을 내립니다. 기본 열 이름은 \"Column1\", \"Column2\" 등입니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에 있는 첫 번째 값 행의 수준을 내립니다.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "테이블에서 중복 행을 제거합니다.",
        "Documentation.LongDescription": "테이블에서 중복 행을 제거합니다.\r\n    선택적 매개 변수인 <code>equationCriteria</code>에서 중복을 테스트할 테이블의 열을 지정합니다. <code>equationCriteria</code>에서 지정하지 않으면 모든 열을 테스트합니다.<br>\r\n    <br>\r\n    Power Query가 때로 특정 작업을 백엔드 데이터 원본(\"폴딩\"이라고도 함)에 오프로드하기도 하고, 꼭 필요하지 않은 \r\n    작업을 건너뛰어 쿼리를 최적화하기도 하기에 일반적으로 어떤 특정한 중복이 보존될 거라는 보장은 없습니다.\r\n    예를 들어 고유한 열 값 집합이 있는 첫 번째 행은 유지되고, 테이블 더 아래쪽에 있는 행은 제거된다고 가정할 수 없습니다.\r\n    중복 제거가 예상대로 작동하도록 하려면 먼저 <code>Table.Buffer</code>를 사용하여 테이블을 버퍼링하세요.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 중복 행을 제거합니다.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "<code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code> 테이블의 [b] 열에서 중복 행을 제거합니다.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "열 목록과 지정된 값에서 테이블을 만듭니다.",
        "Documentation.LongDescription": "열 이름 및 값을 사용하여 <code>lists</code> 목록에서 중첩 목록을 포함하는 <code>columns</code> 형식의 테이블을 만듭니다.\r\n    일부 열에 다른 열보다 많은 값이 있는 경우 해당 열이 Null을 허용하지 않으면 누락된 값이 기본값인 'Null'로 채워집니다.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "목록에서 고객 이름 목록의 테이블을 반환합니다. 고객 목록 항목의 각 값은 행 값이 되고, 각 목록은 열이 됩니다.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "지정된 열 목록과 열 이름 목록에서 테이블을 만듭니다.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "행당 다른 열 수로 된 테이블을 만듭니다. 누락된 행 값은 null입니다.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "목록의 각 항목에 지정된 분할 함수를 적용하여 목록을 테이블로 변환합니다.",
        "Documentation.LongDescription": "목록의 각 항목에 선택적 분할 함수<code>splitter</code>을(를) 적용하여 목록 <code>list</code>을(를) 테이블로 변환합니다. 기본적으로 목록은 쉼표로 분할된 텍스트 값 목록으로 간주됩니다. 선택적 <code>columns</code>은(는) 열 수, 열 목록 또는 TableType일 수 있습니다. 선택적으로 <code>default</code> 및 <code>extraValues</code>을(를) 지정할 수도 있습니다.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "기본 분할자를 사용하여 목록에서 테이블을 만듭니다.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "사용자 지정 분할자를 사용하여 목록에서 테이블을 만듭니다.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Record.FieldValues 분할자를 사용하여 목록에서 테이블을 만듭니다.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "레코드 목록을 테이블로 변환합니다.",
        "Documentation.LongDescription": "레코드 목록 <code>records</code>을(를) 테이블로 변환합니다.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "레코드 필드 이름을 열 이름으로 사용하여 레코드에서 테이블을 만듭니다.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "형식이 지정된 열이 있는 레코드에서 테이블을 만들고 숫자 열을 선택합니다.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "행 값 및 선택적인 열 목록으로 테이블을 만듭니다.",
        "Documentation.LongDescription": "<code>rows</code> 목록에서 해당 목록의 각 요소가 단일 행의 열 값을 포함하는 내부 목록인 테이블을 만듭니다. <code>columns</code>에 대해 열 이름 목록(옵션), 테이블 형식 또는 다수의 열이 제공될 수 있습니다.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "값 {1, 2}를 갖는 열 [CustomerID], 값 {\"Bob\", \"Jim\"}을 갖는 열 [Name] 및 값 {\"123-4567\", \"987-6543\"}을 갖는 열 [Phone]이 포함된 테이블을 반환합니다.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "값 {1, 2}를 갖는 열 [CustomerID], 값 {\"Bob\", \"Jim\"}을 갖는 열 [Name] 및 값 {\"123-4567\", \"987-6543\"}을 갖는 열 [Phone]이 포함된 테이블을 반환합니다. 여기서 [CustomerID]는 숫자 형식이고, [Name] 및 [Phone]은 텍스트 형식입니다.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "지정된 값에서 하나의 열이 포함된 테이블을 만듭니다.",
        "Documentation.LongDescription": "지정된 값 또는 값 목록 <code>value</code>을(를) 포함하는 하나의 열이 있는 테이블을 만듭니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : 목록 또는 스칼라 값에서 테이블을 생성할 때 사용되는 열 이름입니다.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "값 1에서 테이블을 만듭니다.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "목록에서 테이블을 만듭니다.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "사용자 지정 열 이름을 사용하여 값 1에서 테이블을 만듭니다.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "테이블이 분할되는 방식에 대한 정보를 반환합니다.",
        "Documentation.LongDescription": "테이블이 분할되는 방식에 대한 정보를 반환합니다. 각 열이 원래 테이블의 파티션 열이고 각 행이 원래 테이블의 파티션에 해당하는 테이블이 반환됩니다.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "테이블 열의 프로필을 반환합니다.",
        "Documentation.LongDescription": "<p><code>table</code>에서 열에 대한 프로필을 반환합니다.</p>\r\n<p>적용 가능한 경우 각 열에 대해 다음 정보가 반환됩니다.\r\n<ul>\r\n  <li>최소</li>\r\n  <li>최대</li>\r\n  <li>평균</li>\r\n  <li>표준 편차</li>\r\n  <li>카운트</li>\r\n  <li>null 카운트</li>\r\n  <li>고유 카운트</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "값의 첫 번째 행을 새로운 열 머리글(즉, 열 이름)로 승격합니다.",
        "Documentation.LongDescription": "값의 첫 번째 행을 새로운 열 머리글(즉, 열 이름)로 승격합니다. 기본적으로 텍스트 또는 숫자 값만 머리글로 승격되어야 합니다. 올바른 옵션:\r\n    <div>\r\n      <code>PromoteAllScalars</code> : <code>true</code>로 설정할 경우 <code>Culture</code>(지정된 값 도는 현재 문서 로캘)를 사용하여 첫 번째 행의 모든 스칼라 값이 머리글로 승격됩니다.\r\n    텍스트로 변환할 수 없는 값의 경우 기본 열 이름이 사용됩니다.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code> : 해당 데이터의 컬처를 지정하는 컬처 이름입니다.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에 있는 값의 첫 번째 행을 승격합니다.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "테이블의 첫 번째 행에 있는 모든 스칼라를 머리글로 승격하세요.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "건너뛴 첫 번째 개수 행이 포함된 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블에서 지정한 첫 번째 개수의 행 <code>countOrCondition</code>이(가) 포함되지 않은 테이블을 반환합니다.\r\n    제거된 행 수는 선택적 매개 변수 <code>countOrCondition</code>에 따라 달라집니다. \r\n    <ul>\r\n    <li> <code>countOrCondition</code>이(가) 제거된 경우 첫 번째 행만 건너뜁니다. </li>\r\n    <li> <code>countOrCondition</code>이(가) 숫자인 경우 해당 개수의 행(맨 위부터 시작)을 제거합니다. </li>\r\n    <li> <code>countOrCondition</code>이(가) 조건인 경우 행이 조건을 충족하지 않을 때까지 해당 조건을 충족하는 행을 제거합니다.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 첫 번째 행을 제거합니다.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "테이블의 처음 두 개 행을 제거합니다.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "테이블에서 [CustomerID] <=2인 첫 번째 행을 제거합니다.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "마지막 N개 행이 제거된 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블에서 지정한 마지막 <code>countOrCondition</code>개 행이 포함되지 않은 테이블을 반환합니다.\r\n        제거된 행 수는 선택적 매개 변수 <code>countOrCondition</code>에 따라 달라집니다.\r\n    <ul>\r\n    <li> <code>countOrCondition</code>이(가) 제거된 경우 마지막 행만 건너뜁니다. </li>\r\n    <li> <code>countOrCondition</code>이(가) 숫자인 경우 해당 개수의 행(맨 아래부터 시작)을 제거합니다. </li>\r\n    <li> <code>countOrCondition</code>이(가) 조건인 경우 행이 조건을 충족하지 않을 때까지 해당 조건을 충족하는 행을 제거합니다.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 마지막 행을 제거합니다.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "테이블에서 [CustomerID] > 2인 마지막 행을 제거합니다.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "적어도 하나의 셀에 오류가 있어 입력 테이블에서 제거된 행이 포함된 테이블을 반환합니다. 열 목록이 지정된 경우 지정한 열의 셀에서만 오류를 검사합니다.",
        "Documentation.LongDescription": "적어도 하나의 셀에 오류가 있어 입력 테이블에서 제거된 행이 포함된 테이블을 반환합니다. 열 목록이 지정된 경우 지정한 열의 셀에서만 오류를 검사합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "첫 번째 행에서 오류 값을 제거합니다.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "행이 역순으로 포함된 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 입력의 행이 역순으로 포함된 테이블을 반환합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 행을 반대로 바꿉니다.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "지정한 테이블의 열 설명(예: 스키마)을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<p><code>table</code> 열을 설명하는 테이블을 반환합니다.</p>\r\n<p>테이블의 각 행은 <code>table</code> 열의 속성을 설명합니다.</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>열 이름</b></td>\r\n    <td><b>설명</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>열 이름입니다.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td><code>table</code>에서 열의 0 기준 위치입니다.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>열 형식의 이름입니다.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>열 형식의 종류입니다.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>열에 <code>null</code> 값을 포함할 수 있는지 여부를 나타냅니다.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td><code>NumericPrecision</code> 및 <code>NumericScale</code> 필드의 숫자 base(예: base-2, base-10)입니다.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td><code>NumericPrecisionBase</code>가 지정한 base에서 숫자 열의 정밀도입니다. 이 형식의 값이 표현할 수 있는 최대 자릿수입니다(소수 자리 포함).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td><code>NumericPrecisionBase</code>가 지정한 base에서 숫자 열의 소수 자릿수입니다. 이러한 형식의 값에서 소수부의 자릿수를 의미합니다. <code>0</code> 값은 소수 자리가 없는 고정 크기를 나타냅니다. <code>null</code> 값은 알 수 없는 크기를 나타냅니다(부동이거나 정의되지 않은 경우도 있음).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>날짜 또는 시간 값의 초 부분에서 지원되는 최대 소수 자릿수입니다.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td><code>text</code> 열에 허용된 최대 문자 수이거나 <code>binary</code> 열에 허용된 최대 바이트 수입니다.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>이 열의 길이가 달라질 수 있는지(최대 <code>MaxLength</code>) 또는 고정 크기인지를 나타냅니다.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>원본 네이티브 형식 시스템에서 열 형식의 이름입니다(예: SQL Server에 대한 <code>nvarchar</code>).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>원본의 네이티브 식 언어에서 이 열 값에 대한 기본 식입니다(예: SQL Server에 대한 <code>42</code> 또는 <code>newid()</code>).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>열의 설명입니다.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "적어도 하나의 셀에 오류가 있는 입력 테이블의 행만 포함된 테이블을 반환합니다. 열 목록이 지정된 경우 지정한 열의 셀에서만 오류를 검사합니다.",
        "Documentation.LongDescription": "적어도 하나의 셀에 오류가 있는 입력 테이블의 행만 포함된 테이블을 반환합니다. 열 목록이 지정된 경우 지정한 열의 셀에서만 오류를 검사합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "행에 오류가 있는 고객의 이름을 선택합니다.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "건너뛴 첫 번째 개수 행이 포함된 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블에서 지정한 첫 번째 개수의 행 <code>countOrCondition</code>이(가) 포함되지 않은 테이블을 반환합니다.\r\n    건너뛰는 행 수는 선택적 매개 변수 <code>countOrCondition</code>에 따라 달라집니다.\r\n    <ul>\r\n    <li> <code>countOrCondition</code>이(가) 생략된 경우 첫 번째 행만 건너뜁니다. </li>\r\n    <li> <code>countOrCondition</code>이(가) 숫자인 경우 해당 개수의 행(맨 위부터 시작)을 건너뜁니다. </li>\r\n    <li> <code>countOrCondition</code>이(가) 조건인 경우 행이 조건을 충족하지 않을 때까지 해당 조건을 충족하는 행을 건너뜁니다.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 첫 번째 행을 건너뜁니다.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "테이블의 처음 두 개 행을 건너뜁니다.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "테이블에서 [Price] > 25인 첫 번째 행을 건너뜁니다.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "데이터의 원래 소스에 대해 다운스트림 작업이 실행되지 않도록 합니다.",
        "Documentation.LongDescription": "다운스트림 작업이 <code>table</code>에 있는 데이터의 원래 소스에 대해 실행되는 것을 방지합니다.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "다운스트림 작업이 SQL 서버에서 쿼리로 실행되지 않도록 하는 방식으로 SQL 테이블에서 데이터를 가져옵니다.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "열을 행으로 만들고 행을 열로 만듭니다.",
        "Documentation.LongDescription": "열을 행으로 만들고 행을 열로 만듭니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "이름-값 쌍의 테이블 행을 열로 만듭니다.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "테이블 집합 간의 관계를 가져옵니다.",
        "Documentation.LongDescription": "테이블 집합 간의 관계를 가져옵니다. <code>tables</code> 집합의 구조는 탐색 테이블의 구조와 유사한 것으로 간주됩니다. <code>dataColumn</code>에 의해 정의된 열은 실제 데이터 테이블을 포함합니다.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Teradata 데이터베이스의 SQL 테이블과 뷰에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>server</code> 서버에 있는 Teradata 데이터베이스의 SQL 테이블과 뷰에 대한 테이블을 반환합니다. 포트에는 콜론으로 구분된 서버가 선택적으로 지정될 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n</ul>\r\n\r\n    예를 들어, 레코드 매개 변수는 [option1 = value1, option2 = value2...] 또는 [Query = \"select ...\"] 형식으로 지정됩니다.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "검색할 Twilio 기록 데이터의 개월 수를 입력하세요.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "관련 Twilio 데이터가 있는 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "지정한 테이블 유형의 열 설명(예: 스키마)을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<p><code>tableType</code> 열을 설명하는 테이블을 반환합니다.</p>\r\n<p>결과 테이블의 설명은 <code>Table.Schema</code>에 대한 문서를 참조하세요.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services 피드",
        "Documentation.DisplayName": "Azure DevOps Services 피드",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Azure DevOps에서 제공하는 OData 피드의 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Viva Insights 데이터에 연결",
        "Documentation.LongDescription": "Workplace Analytics에서 주간 메트릭 및 특성 데이터를 가져옵니다.",
        "Documentation.Examples": [
          {
            "Description": "파티션에서 측정된 각 직원에 대해 표시되는 특성 및 주별 메트릭을 포함하는 표를 반환합니다.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dcdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "해당 구성 구조로 나누어진 HTML 문서 콘텐츠 및 태그 제거 후의 전체 문서와 해당 텍스트 표현을 반환합니다.",
        "Documentation.LongDescription": "해당 구성 구조로 나누어진 HTML 문서 콘텐츠 및 태그 제거 후의 전체 문서와 해당 텍스트 표현을 반환합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "주요 Webtrends 메트릭이 있는 테이블을 반환합니다.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Webtrends KeyMetrics 엔드포인트를 호출하고 모든 데이터를 테이블로 반환합니다.",
        "Documentation.Examples": [
          {
            "Description": "최근 30일 동안의 테넌트 98765에 대한 주요 메트릭 테이블을 가져옵니다.",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "주요 메트릭 테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Webtrends 계정에 연결된 프로필 ID를 입력하세요.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "관련 Webtrends 데이터가 있는 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Viva Insights 데이터에 연결",
        "Documentation.LongDescription": "Workplace Analytics에서 주간 메트릭 및 특성 데이터를 가져옵니다.",
        "Documentation.Examples": [
          {
            "Description": "파티션에서 측정된 각 직원에 대해 표시되는 특성 및 주별 메트릭을 포함하는 표를 반환합니다.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dcdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "XML 문서의 콘텐츠를 계층 테이블로 반환합니다.",
        "Documentation.LongDescription": "XML 문서의 콘텐츠를 계층 테이블로 반환합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "XML 문서의 콘텐츠를 플랫 테이블의 중첩 컬렉션으로 반환합니다.",
        "Documentation.LongDescription": "XML 문서의 콘텐츠를 플랫 테이블의 중첩 컬렉션으로 반환합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "로컬 xml 파일의 내용을 검색합니다.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Zendesk 계정의 URL을 입력하세요.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "관련 Zendesk 데이터가 있는 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "ADO.NET 데이터 원본에 대한 스키마 컬렉션을 반환합니다.",
        "Documentation.LongDescription": "공급자 이름 <code>providerName</code> 및 연결 문자열 <code>connectionString</code>과(와) 함께 ADO.NET 데이터 원본에 대해 스키마 컬렉션을 반환합니다. <code>connectionString</code>은(는) 텍스트이거나 속성 값 쌍의 레코드일 수 있습니다. 속성 값은 텍스트 또는 숫자일 수 있습니다. 선택적 레코드 매개 변수인 <code>options</code>을(를) 제공하여 추가 속성을 지정할 수도 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 인증에 사용할 SQL Server 호환 연결 문자열 옵션을 생성할지 여부를 결정하는 논리값(true/false)입니다. 기본값은 true입니다.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift(베타)",
        "Documentation.Description": "Amazon Redshift 데이터베이스에서 데이터를 가져옵니다.",
        "Documentation.LongDescription": "데이터베이스 <code>database</code>의 Amazon Redshift 클러스터 <code>server</code>에 있는 테이블을 나열하는 테이블을 반환합니다. 다음 옵션을 제어하기 위해 선택적 레코드 매개 변수인 <code>options</code>를 지정할 수 있습니다.:\r\n<ul>\r\n<li><code>공급자 이름</code>: 연결에 대한 공급자 이름으로 사용할 텍스트 값입니다. Microsoft 인증을 사용할 때 사용됩니다.</li>\r\n<li><code>배치 사이즈</code>: 서버에 대한 단일 호출에서 가져온 행 수입니다.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Analysis Services 데이터베이스에서 다차원 큐브 또는 테이블 형식 모델의 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>server</code> 서버의 Analysis Services 데이터베이스 <code>database</code>에서 다차원 큐브 또는 테이블 형식 모델의 테이블을 반환합니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 MDX 쿼리입니다.</li>\r\n<li><code>TypedMeasureColumns</code> : 다차원 또는 테이블 형식 모델에 지정된 형식이 추가된 측정 열의 형식에 사용됨을 나타내는 논리 값입니다. false로 설정하면 모든 측정 열에 대해 형식 number가 사용됩니다. 이 옵션의 기본값은 false입니다.</li>\r\n<li><code>Culture</code> : 데이터의 문화권을 지정하는 문화권 이름입니다. 이는 &#39;Locale Identifier&#39; 연결 문자열 속성에 해당합니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>SubQueries</code> : 연결 문자열에서 &quot;SubQueries&quot; 속성 값을 설정하는 숫자(0, 1 또는 2)입니다. 이 숫자는 subselect 또는 subcute에 대한 계산 멤버의 동작의 제어합니다(기본값은 2임).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "지정된 Spark 클러스터에 있는 테이블을 나열하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>protocol</code>을 사용하여 Spark 클러스터 <code>host</code>에 있는 테이블을 나열하는 테이블을 반환합니다. 올바른 프로토콜은 다음과 같습니다.\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "지정된 Spark 클러스터에 있는 테이블을 나열하는 테이블을 반환합니다.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "조직 및 프로젝트 이름을 입력합니다.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server(Boards만)",
        "Documentation.LongDescription": "Azure DevOps에서 제공하는 Analytics Views의 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "HDInsight Interactive Query에서 데이터 가져오기",
        "Documentation.LongDescription": "\r\nHDInsight Interactive Query <code>server</code>를 사용하여 <code>database</code>에 지정된 HDInsight Interactive Query에서 테이블 목록을 반환합니다. 포트 번호는 필요한 경우 콜론으로 구분하여 서버와 함께 지정할 수도 있습니다. 다음 옵션을 제어하도록 선택적 매개 변수 <code>options</code>를 지정할 수도 있습니다.\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 지속 시간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n        <li><code>CommandTimeout</code>: 서버 측 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 지속 시간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n</ul>\r\n<code>options</code> 매개 변수는 [option1 = value1, option2 = value2...]와 같이 지정됩니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "데이터 형식을 포함하여 Common Data Model의 엔터티 특성에 매핑된 열이 포함된 테이블을 반환합니다.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "데이터 형식을 포함하여 Common Data Model의 엔터티 특성에 매핑된 열이 포함된 테이블을 반환합니다. 매핑되지 않은 경우 엔터티 정의의 열이 추가되고, 매핑되지 않은 열은 제거됩니다.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "큐브에 매개 변수를 적용한 후 큐브를 반환합니다.",
        "Documentation.LongDescription": "<code>parameter</code>과(와) <code>arguments</code>을(를) <code>cube</code>에 적용한 후 큐브를 반환합니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "지정된 열에 매핑된 특성을 축소하여 큐브에 대한 필터 컨텍스트의 차원 세분성을 변경합니다.",
        "Documentation.LongDescription": "지정된 열 <code>columnNames</code>에 매핑된 특성을 축소하여 <code>cube</code>에 대한 필터 컨텍스트의 차원 세분성을 변경합니다. 큐브의 테이블 형식 뷰에서도 열이 제거됩니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Cube.Dimensions에서 반환된 차원 집합을 바꿉니다.",
        "Documentation.LongDescription": "<code>Cube.Dimensions</code>에서 반환된 차원 집합을 대체합니다.\r\n     예를 들어, 이 함수를 사용하여 차원 속성에 ID 열을 추가하여 데이터 원본을 그룹화할 수 있습니다. 표시된 값이 아닌 ID입니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "큐브 함수 목록을 적용합니다.",
        "Documentation.LongDescription": "<code>cube</code>에 있는 큐브 함수 목록 <code>transforms</code>을(를) 적용합니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "DB2 데이터베이스에서 사용 가능한 SQL 테이블과 뷰에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "이름이 <code>database</code>인 데이터베이스 인스턴스의 <code>server</code> 서버에 있는 DB2 데이터베이스에서 사용 가능한 SQL 테이블과 뷰에 대한 테이블을 반환합니다. 포트에는 콜론으로 구분된 서버가 선택적으로 지정될 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n<li><code>Implementation</code> : 사용할 내부 데이터베이스 공급자 구현을 지정합니다. 유효한 값은 &quot;IBM&quot; 및 &quot;Microsoft&quot; 입니다.</li>\r\n<li><code>BinaryCodePage</code> : DB2 FOR BIT 이진 데이터를 문자열로 디코딩할 CCSID(코딩된 문자 집합 식별자) 번호입니다. Implementation = “Microsoft”에 적용됩니다. 변환(기본값)을 사용하지 않도록 설정하려면 0으로 설정합니다. 데이터베이스 인코딩을 기반으로 변환하려면 1로 설정합니다. 애플리케이션 인코딩으로 변환하려면 다른 CCSID 번호를 설정합니다.</li>\r\n<li><code>PackageCollection</code> : SQL 문을 처리하는 데 필요한 공유 패키지를 사용할 수 있도록 패키지 컬렉션의 문자열 값(기본값: &quot; NULLID&quot;)을 지정합니다. Implementation = &quot; Microsoft&quot;에 적용됩니다.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Db2 Connect 게이트웨이를 통해 연결을 설정하고 있는지 여부를 지정합니다. 구현 = &quot;Microsoft&quot;에 적용됩니다.</li>\r\n</ul>\r\n\r\n    예를 들어 레코드 매개 변수는 [option1 = value1, option2 = value2...] 또는 [Query = \"select ...\"] 형식으로 지정됩니다.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Data.World에서 데이터 세트를 검색합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Azure 스토리지 자격 증명 모음에서 지정된 컨테이너에 있는 blob의 속성 및 내용을 포함하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "Azure 스토리지 자격 증명 모음에서 컨테이너 URL <code>account</code>에 있는 각 blob 파일에 대한 행을 포함하는 테이블을 반환합니다. 각 행에는 파일의 속성과 해당 내용에 대한 링크가 있습니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "제공된 HTML에 대해 지정된 CSS 선택기를 실행한 결과가 포함된 테이블을 반환합니다.",
        "Documentation.LongDescription": "제공된 <code>html</code>에 대해 지정한 CSS 선택기를 실행한 결과가 포함된 테이블을 반환합니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 제공하여 추가 속성을 지정할 수도 있습니다. 레코드에는 다음과 같은 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "데이터 액세스",
        "Documentation.Examples": [
          {
            "Description": "예제 html 텍스트 값에서 테이블을 반환합니다.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "예제 html 텍스트 값에서 모든 href를 추출합니다.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">테스트</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Informix 데이터베이스에서 사용할 수 있는 SQL 테이블 및 보기에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "이름이 <code>database</code>인 데이터베이스 인스턴스의 <code>server</code> 서버에 있는 Informix 데이터베이스에서 사용 가능한 SQL 테이블과 뷰에 대한 테이블을 반환합니다. 포트에는 콜론으로 구분된 서버가 선택적으로 지정될 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n</ul>\r\n\r\n    예를 들어, 레코드 매개 변수는 [option1 = value1, option2 = value2...] 또는 [Query = \"select ...\"] 형식으로 지정됩니다.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "잠재 고객 세부 정보가 있는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>url</code>/rest/v1/leads.json에서 Marketo REST API 엔드포인트를 호출합니다. 목록 <code>leadIds</code>의 모든 잠재 고객이 반환됩니다.",
        "Documentation.Examples": [
          {
            "Description": "세 잠재 고객에 대한 세부 정보를 가져옵니다.",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "제공된 잠재 고객에 대한 세부 정보가 있는 테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "사용자 계정과 연결된 Marketo REST API 엔드포인트의 URL을 입력합니다.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "관련 Marketo 데이터가 있는 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "MySQL 데이터베이스에서 사용 가능한 SQL 테이블, 뷰 및 저장 스칼라 함수에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "이름이 <code>database</code>인 데이터베이스 인스턴스의 <code>server</code> 서버에 있는 MySQL 데이터베이스에서 사용 가능한 SQL 테이블, 뷰 및 저장 스칼라 함수에 대한 테이블을 반환합니다. 포트에는 콜론으로 구분된 서버가 선택적으로 지정될 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>Encoding</code> : 서버에 전송하는 모든 쿼리를 인코딩하는 데 사용되는 문자 집합을 지정하는 TextEncoding 값(기본값: null)입니다.</li>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>TreatTinyAsBoolean</code> : 서버에서 tinyint 열을 논리값으로 강제 적용할지 여부를 결정하는 논리(true/false)입니다. 기본값은 true입니다.</li>\r\n<li><code>OldGuids</code> : char(36) 열(false인 경우)을 GUID로 처리할지, binary(16) 열(true인 경우)을 GUID로 처리할지를 설정하는 논리(true/false)입니다. 기본값은 false입니다.</li>\r\n<li><code>ReturnSingleDatabase</code> : 모든 데이터베이스의 모든 테이블을 반환할지(false일 경우) 또는 지정된 데이터베이스의 테이블 및 뷰를 반환할지(true일 경우)를 설정하는 논리(true/false)입니다. 기본값은 false입니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n</ul>\r\n\r\n    예를 들어, 레코드 매개 변수는 [option1 = value1, option2 = value2...] 또는 [Query = \"select ...\"] 형식으로 지정됩니다.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "IBM Netezza 데이터베이스에서 데이터를 가져옵니다.",
        "Documentation.LongDescription": "\r\n서버 <code>server</code>의 Netezza Server 데이터베이스 <code>database</code>에서 Netezza 테이블, 뷰 및 저장 프로시저로 구성된 테이블을 반환합니다. 포트는 필요한 경우 콜론으로 구분하여 서버와 함께 지정할 수도 있습니다. 다음 옵션을 제어하도록 선택적 레코드 매개 변수 <code>options</code>를 지정할 수도 있습니다.\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: 반환된 값에 대한 탐색 속성을 생성할지 여부를 설정하는 논리값(true/false)입니다(기본값은 true임).</li>\r\n        <li><code>HierarchicalNavigation</code>: 해당 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리값(true/false)입니다(기본값은 false임).</li>\r\n        <li><code>ConnectionTimeout</code>: 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 지속 시간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n        <li><code>CommandTimeout</code>: 서버 측 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 지속 시간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>NormalizeDatabaseName</code>: 데이터베이스 이름을 대문자로 일반화할지 또는 글자 그대로 해석할지를 설정하는 논리값(true/false)입니다(기본값은 true임).</li>\r\n</ul>\r\n레코드 매개 변수는 [option1 = value1, option2 = value2...]와 같이 지정됩니다.",
        "Documentation.Examples": [
          {
            "Description": "IBM Netezza 프로젝트의 테이블을 나열합니다.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "ODBC 데이터 원본에서 원시 쿼리를 실행한 결과를 반환합니다.",
        "Documentation.LongDescription": "ODBC를 사용하여 연결 문자열 <code>connectionString</code>과(와) 함께 <code>query</code>을(를) 실행한 결과를 반환합니다. <code>connectionString</code>은(는) 텍스트이거나 속성 값 쌍의 레코드일 수 있습니다. 속성 값은 텍스트 또는 숫자일 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 제공하여 추가 속성을 지정할 수 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 15초입니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 인증에 사용할 SQL Server 호환 연결 문자열 옵션을 생성할지 여부를 결정하는 논리값(true/false)입니다. 기본값은 true입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "제공된 연결 문자열에 대해 간단한 쿼리를 실행한 결과를 반환합니다.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "OLE DB 데이터 원본에서 원시 쿼리를 실행한 결과를 반환합니다.",
        "Documentation.LongDescription": "OLE DB를 사용하여 연결 문자열 <code>connectionString</code>과(와) 함께 <code>query</code>을(를) 실행한 결과를 반환합니다. <code>connectionString</code>은(는) 텍스트이거나 속성 값 쌍의 레코드일 수 있습니다. 속성 값은 텍스트 또는 숫자일 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 제공하여 추가 속성을 지정할 수 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 인증에 사용할 SQL Server 호환 연결 문자열 옵션을 생성할지 여부를 결정하는 논리값(true/false)입니다. 기본값은 true입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "PostgreSQL 데이터베이스에서 사용 가능한 SQL 테이블과 뷰에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "이름이 <code>database</code>인 데이터베이스 인스턴스의 <code>server</code> 서버에 있는 PostgreSQL 데이터베이스에서 사용 가능한 SQL 테이블과 뷰에 대한 테이블을 반환합니다. 포트에는 콜론으로 구분된 서버가 선택적으로 지정될 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n</ul>\r\n\r\n    예를 들어, 레코드 매개 변수는 [option1 = value1, option2 = value2...] 또는 [Query = \"select ...\"] 형식으로 지정됩니다.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Snowflake 컴퓨팅 웨어하우스에서 데이터를 가져옵니다.",
        "Documentation.LongDescription": "<code>server</code>에 있는 Snowflake Computing <code>warehouse</code>의 테이블을 나열하는 테이블을 반환합니다. 다음 옵션을 제어하기 위해 선택적 레코드 매개 변수인 <code>options</code>를 지정할 수 있습니다.\r\n<ul>\r\n<li><code>Role</code>: 연결에 대한 역할 이름으로 사용할 텍스트 값입니다.</li>\r\n<li><code>CreateNavigationProperties</code>: 반환되는 값에 탐색 속성을 생성할지 여부를 설정하는 논리 값(true/false)입니다(기본값: true).</li>\r\n<li><code>ConnectionTimeout</code>: Snowflake로부터의 네트워크 응답을 기다리는 시간(초)입니다.</li>\r\n<li><code>CommandTimeout</code>: 쿼리가 실행되기를 기다리는 시간(초)입니다.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Snowflake 웨어하우스의 테이블을 나열합니다.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "지정된 Spark 클러스터에 있는 테이블을 나열하는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>protocol</code>을 사용하여 Spark 클러스터 <code>host</code>에 있는 테이블을 나열하는 테이블을 반환합니다. 올바른 프로토콜은 다음과 같습니다.\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Azure Spark 인스턴스의 테이블을 나열합니다.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "SQL Server 데이터베이스의 SQL 테이블, 뷰 및 저장 함수에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>server</code> 서버에 있는 SQL Server 데이터베이스 <code>database</code>의 SQL 테이블, 뷰 및 저장 함수에 대한 테이블을 반환합니다. 포트에는 콜론 또는 쉼표로 구분된 서버가 선택적으로 지정될 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : 생성된 SQL 쿼리에 &quot; maxdop” 쿼리 절의 값을 설정하는 숫자입니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n<li><code>MultiSubnetFailover</code> : 연결 문자열에 &quot;MultiSubnetFailover&quot; 속성 값을 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n<li><code>UnsafeTypeConversions</code> : True인 경우 실패할 수 있는 형식 변환을 폴딩하고 전체 쿼리가 실패하는 논리 값(true/false)입니다. 일반 용도로는 권장되지 않습니다.</li>\r\n<li><code>ContextInfo</code> : 각 명령을 실행하기 전에 CONTEXT_INFO를 설정하는 데 사용되는 이진 값입니다.</li>\r\n<li><code>OmitSRID</code> : True인 경우 기하 도형 및 지리 유형에서 Well-Known Text를 생성할 때 SRID를 생략합니다.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : true인 경우 동일한 서버의 데이터베이스에서 쿼리 폴딩을 허용하는 논리적(true/false) 값입니다. 기본값은 false입니다.</li>\r\n</ul>\r\n\r\n    예를 들어, 레코드 매개 변수는 [option1 = value1, option2 = value2...] 또는 [Query = \"select ...\"] 형식으로 지정됩니다.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Sybase 데이터베이스에서 사용 가능한 SQL 테이블과 뷰에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "이름이 <code>database</code>인 데이터베이스 인스턴스의 <code>server</code> 서버에 있는 Sybase 데이터베이스에서 사용 가능한 SQL 테이블과 뷰에 대한 테이블을 반환합니다. 포트에는 콜론으로 구분된 서버가 선택적으로 지정될 수 있습니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 true임).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 탐색 속성의 이름을 만드는 데 사용되는 함수입니다.</li>\r\n<li><code>Query</code> : 데이터를 검색하는 데 사용되는 원시 SQL 쿼리입니다. 쿼리를 통해 결과 집합이 여러 개 생성되면 첫 번째 결과 집합만 반환됩니다.</li>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>ConnectionTimeout</code> : 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n</ul>\r\n\r\n    예를 들어, 레코드 매개 변수는 [option1 = value1, option2 = value2...] 또는 [Query = \"select ...\"] 형식으로 지정됩니다.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "명시적 위치 값을 사용하여 열을 추가합니다.",
        "Documentation.LongDescription": "<code>table</code>에 명시적 위치 값을 사용하여 이름이 <code>newColumnName</code>인 열을 추가합니다.\r\n    선택적 값 <code>initialValue</code>은(는) 초기 인덱스 값을 지정합니다. 선택적 값 <code>increment</code>은(는) 각 인덱스 값이 증가하는 양을 지정합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "테이블에 이름이 \"Index\"인 인덱스 열을 추가합니다.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "테이블에 값 10부터 시작하고 5씩 증가하는 \"index\"라는 인덱스 열을 추가합니다.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "테이블의 목록 열이 지정된 경우 해당 목록의 각 값에 대해 복사본 행을 만듭니다.",
        "Documentation.LongDescription": "<code>table</code>이(가) 지정된 경우(<code>column</code>은(는) 값 목록) 목록을 각 값에 대한 행으로 분할합니다. 다른 열의 값은 새로 만들어진 각 행에 복제됩니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "테이블의 목록 열 [Name]을 분할합니다.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "이전 셀의 값을 해당 열의 아래쪽에 있는 Null 값 셀로 전파합니다.",
        "Documentation.LongDescription": "지정된 <code>table</code>에서 이전 셀의 값이 지정된 <code>columns</code>의 아래쪽에 있는 Null 값 셀로 전파된 테이블을 반환합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [Place] 열의 Null 값이 해당 열 위의 값으로 채워진 테이블을 반환합니다.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "셀의 값을 해당 열의 위쪽에 있는 Null 값 셀로 전파합니다.",
        "Documentation.LongDescription": "지정된 <code>table</code>에서 다음 셀의 값이 지정된 <code>columns</code>의 위쪽에 있는 Null 값 셀로 전파된 테이블을 반환합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [Column2] 열의 Null 값이 해당 열 아래의 값으로 채워진 테이블을 반환합니다.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "테이블에서 지정된 텍스트를 포함하는 모든 행을 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블에서 텍스트 <code>text</code>을(를) 포함하는 행을 반환합니다. 텍스트를 찾을 수 없으면 빈 테이블이 반환됩니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 \"Bob\"를 포함하는 행을 찾습니다.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "지정된 개수에 따라 처음 몇 개의 행을 반환합니다.",
        "Documentation.LongDescription": "<code>countOrCondition</code> 값에 따라 <code>table</code> 테이블의 첫 행을 반환합니다.\r\n    <ul>\r\n    <li> <code>countOrCondition</code>이(가) 숫자인 경우 맨 위에서부터 해당 개수만큼의 행이 반환됩니다. </li>\r\n    <li> <code>countOrCondition</code>이(가) 조건인 경우 행이 조건을 충족하지 않을 때까지 해당 조건을 충족하는 행이 반환됩니다.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 처음 두 개 행을 찾습니다.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "테이블에서 [a] > 0인 처음 몇 개의 행을 찾습니다.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "일련의 분할된 테이블을 조합한 결과 테이블을 반환합니다.",
        "Documentation.LongDescription": "일련의 분할된 테이블 <code>partitions</code>을(를) 결합한 결과로 생성되는 테이블을 반환합니다. <code>partitionColumn</code>은(는) 추가할 열의 이름입니다. 열 형식은 기본적으로 <code>모두</code>로 설정되지만 <code>partitionColumnType</code>이(가) 지정할 수도 있습니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "목록 <code>{number}</code>에서 항목 형식을 확인합니다.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "지정된 개수에 따라 마지막 몇 개의 행을 반환합니다.",
        "Documentation.LongDescription": "<code>countOrCondition</code> 값에 따라 <code>table</code> 테이블의 마지막 행을 반환합니다.\r\n    <ul>\r\n    <li> <code>countOrCondition</code>이(가) 숫자인 경우 (끝 - <code>countOrCondition</code>) 위치에서부터 해당 개수만큼의 행이 반환됩니다. </li>\r\n    <li> <code>countOrCondition</code>이(가) 조건인 경우 행이 조건을 충족하지 않을 때까지 해당 조건을 충족하는 행이 위치의 오름차순으로 반환됩니다.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 마지막 두 개 행을 찾습니다.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "테이블에서 [a] > 0인 마지막 몇 개의 행을 찾습니다.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "모든 열에 지정된 텍스트가 접두사로 추가된 테이블을 반환합니다.",
        "Documentation.LongDescription": "제공된 <code>table</code>의 모든 열 이름에 <code>prefix</code><code>.ColumnName</code> 형식으로 지정된 텍스트 <code>prefix</code> 및 마침표가 접두사로 추가된 테이블을 반환합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 열에 \"MyTable\"을 접두사로 추가합니다.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "지정한 오프셋부터 시작하여 행을 반환합니다.",
        "Documentation.LongDescription": "지정한 <code>offset</code>부터 시작하여 <code>table</code>의 행을 반환합니다. 선택적 매개 변수 <code>count</code>은(는) 반환할 행 수를 지정합니다. 기본적으로 오프셋 뒤의 모든 행이 반환됩니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "오프셋 1부터 시작하여 테이블의 모든 행을 반환합니다.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "오프셋 1부터 시작하여 테이블의 행 하나를 반환합니다.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "지정한 열을 제거합니다.",
        "Documentation.LongDescription": "제공된 <code>columns</code>에서 지정한 <code>table</code>을(를) 제거합니다.\r\n지정한 열이 없는 경우 <code>missingField</code> 선택적 매개 변수가 대안 동작(예: <code>MissingField.UseNull</code> 또는 <code>MissingField.Ignore</code>)을 지정하는 경우를 제외하고 오류가 발생합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [Phone] 열을 제거합니다.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "테이블에서 존재하지 않는 열을 제거해 보세요.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "테이블에서 지정한 행의 모든 발생을 제거합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블에서 지정한 <code>rows</code>의 모든 발생을 제거합니다.\r\n    선택적 매개 변수 <code>equationCriteria</code>을(를) 지정하여 테이블 행 간의 비교를 제어할 수 있습니다.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code> 테이블에서 [a = 1]인 행을 모두 제거합니다.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "지정한 개수의 행을 제거합니다.",
        "Documentation.LongDescription": "지정한 <code>offset</code>부터 시작하여, <code>table</code>의 시작에서 <code>count</code>개의 행을 제거합니다. <code>count</code> 매개 변수가 제공되지 않은 경우 기본 개수 1개가 사용됩니다. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 첫 번째 행을 제거합니다.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "테이블에서 위치 1에 있는 행을 제거합니다.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "위치 1부터 시작하여 테이블에서 두 개의 행을 제거합니다.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "{old, new} 형식의 이름 바꾸기를 적용합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블의 열에 대해 지정된 이름 바꾸기를 수행합니다. 바꾸기 작업 <code>renames</code>은(는) 이전 열 이름과 새로운 열 이름이 목록에 제공된 두 값의 목록으로 구성됩니다.\r\n열이 없는 경우 선택적 매개 변수 <code>missingField</code>이(가) 대안(예: <code>MissingField.UseNull</code> 또는 <code>MissingField.Ignore</code>)을 지정하지 않으면 예외가 발생합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 열 이름 \"CustomerNum\"을 \"CustomerID\"로 바꿉니다.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "테이블에서 열 이름 \"CustomerNum\"을 \"CustomerID\"로 바꾸고 \"PhoneNum\"을 \"Phone\"으로 바꿉니다.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "테이블에서 열 이름 \"NewCol\"을 \"NewColumn\"으로 바꾸고, 열이 없는 경우 무시합니다.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "지정한 순서대로 열이 포함된 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>columnOrder</code>에 지정된 순서대로 <code>table</code> 입력의 열이 포함된 테이블을 반환합니다. 목록에 지정되지 않은 열은 다시 정렬되지 않습니다.\r\n     열이 없는 경우 선택적 매개 변수 <code>missingField</code>이(가) 대안(예: <code>MissingField.UseNull</code> 또는 <code>MissingField.Ignore</code>)을 지정하지 않으면 예외가 발생합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [Phone] 및 [Name] 열의 순서를 전환합니다.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "테이블에서 [Phone] 및 [Address] 열의 순서를 전환하거나 \"MissingField.Ignore\"를 사용합니다. 열 [Address]가 없으므로 테이블이 변경되지 않습니다.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "테이블의 행을 지정한 횟수만큼 반복합니다.",
        "Documentation.LongDescription": "<code>table</code> 입력의 행이 지정한 대호 <code>count</code>번 반복된 테이블을 반환합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 행을 두 번 반복합니다.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "지정한 열의 오류 값을 해당하는 지정된 값으로 바꿉니다.",
        "Documentation.LongDescription": "지정한 <code>table</code> 열의 오류 값을 <code>errorReplacement</code> 목록의 새 값으로 바꿉니다. 목록의 형식은 {{column1, value1}, …}입니다. 열당 값을 하나씩만 바꿀 수 있으며, 열을 두 번 이상 지정하면 오류가 발생합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "오류 값을 테이블의 텍스트 \"world\"로 바꿉니다.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "A 열 및 B 열의 오류 값을 테이블에 있는 텍스트 \"hello\" 및 \"world\"로 각각 바꿉니다.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "지정된 테이블의 키를 바꿉니다.",
        "Documentation.LongDescription": "지정된 테이블의 키를 바꿉니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "테이블의 기존 키를 바꿉니다.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "지정한 모든 행을 제공된 행으로 바꿉니다.",
        "Documentation.LongDescription": "<code>table</code>에서 지정한 모든 행을 제공된 행으로 바꿉니다. 바꿀 행과 대체 행은 <code>replacements</code>에서 {old, new} 형식으로 지정됩니다.\r\n    선택적 <code>equationCriteria</code> 매개 변수를 지정하여 테이블 행 간의 비교를 제어할 수 있습니다.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [a = 1, b = 2] 및 [a = 2, b = 3] 행을 [a = -1, b = -2], [a = -2, b = -3]으로 바꿉니다.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "지정한 열만 포함된 테이블을 반환합니다.",
        "Documentation.LongDescription": "지정한 <code>columns</code>만 포함된 <code>table</code>을(를) 반환합니다.\r\n    <ul>\r\n       <li><code>table</code>: 제공된 테이블입니다.</li>\r\n       <li><code>columns</code>: 반환할 <code>table</code> 테이블의 열 목록입니다. 반환된 테이블의 열은 <code>columns</code>에 나열된 순서대로 표시됩니다.</li>\r\n       <li><code>missingField</code>: <i>(옵션)</i> 열이 없는 경우 수행할 작업입니다. 예: <code>MissingField.UseNull</code> 또는 <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "[Name] 열만 포함합니다.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "[CustomerID] 및 [Name] 열만 포함합니다.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "포함된 열이 종료되지 않는 경우 기본 결과는 오류입니다.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "포함된 열이 종료되지 않는 경우 <code>MissingField.UseNull</code> 옵션은 값이 null인 열을 만듭니다.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "조건 함수를 충족하는 행을 선택합니다.",
        "Documentation.LongDescription": "<code>condition</code> 선택과 일치하는 <code>table</code>의 행 테이블을 반환합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [CustomerID] 열의 값이 2보다 큰 행을 선택합니다.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "테이블에서 이름에 \"B\"가 포함되지 않은 행을 선택합니다.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "하나 이상의 열 이름과 비교 기준을 사용하여 테이블을 정렬합니다.",
        "Documentation.LongDescription": "하나 이상의 열 이름 목록과 선택적 <code>comparisonCriteria</code>을(를) { { col1, comparisonCriteria }, {col2} } 형식으로 사용하여 <code>table</code>을(를) 정렬합니다.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "\"OrderID\" 열을 기준으로 테이블을 정렬합니다.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "\"OrderID\" 열을 기준으로 테이블을 내림차순으로 정렬합니다.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "\"CustomerID\" 열을 기준으로 테이블을 정렬한 다음 \"CustomerID\"를 포함하여 \"OrderID\" 열을 기준으로 내림차순으로 정렬합니다.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "지정된 함수를 사용하여 열 이름을 변환합니다.",
        "Documentation.LongDescription": "지정된 <code>nameGenerator</code> 함수를 사용하여 열 이름을 변환합니다. 올바른 옵션:\r\n    <div>\r\n      <code>MaxLength</code>는 새 열 이름의 최대 길이를 지정합니다. 지정된 함수의 결과에 포함된 열 이름이 더 긴 경우 긴 이름이 잘립니다.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code>는 새 열 이름을 생성하는 동안 비교를 제어하는 데 사용됩니다. 비교자를 사용하여 대/소문자 비구분 비교 또는 컬처 및 로캘 인식 비교를 제공할 수 있습니다.\r\n    </div>\r\n    <div>\r\n      수식 언어에서는 다음과 같은 기본 제공 비교자를 사용할 수 있습니다.\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: 정확한 서수 비교를 수행하는 데 사용됨</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: 정확한 대/소문자 비구분 서수 비교를 수행하는 데 사용됨</li>\r\n      <li> <code>Comparer.FromCulture</code>: 컬처 인식 비교를 수행하는 데 사용됨</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "열 이름에서 <code>#(tab)</code> 문자를 제거하세요.",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "열 이름을 변환하여 6자 길이의 대/소문자 비구분 이름을 생성하세요.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "특정 문화권을 사용하여 { column, type } 형식의 형식 변환을 적용합니다.",
        "Documentation.LongDescription": "<code>culture</code> 선택적 매개 변수에 지정된 문화권(예: \"en-US\")을 기준으로 <code>typeTransformations</code> 매개 변수({ column name, type name} 형식)에 지정된 열에 변환 작업을 적용하여 <code>table</code> 입력에서 테이블을 반환합니다.\r\n    열이 없는 경우 예외가 발생합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 테이블에서 [a] 열의 숫자 값을 텍스트 값으로 변환합니다.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "하나 이상의 열 값을 변환합니다.",
        "Documentation.LongDescription": "<code>table</code>에 나열된 각 열의 작업을 적용하여 <code>transformOperations</code>을(를) 변환합니다(여기서 형식은 { column name, transformation } 또는 { column name, transformation, new column type }입니다).\r\n    <code>defaultTransformation</code>이(가) 지정되는 경우 <code>transformOperations</code>에 나열되지 않은 모든 열에 적용됩니다.\r\n    <code>transformOperations</code>에 나열된 열이 존재하지 않는 경우 선택적 매개 변수 <code>missingField</code>이(가) 대안(예: <code>MissingField.UseNull</code> 또는 <code>MissingField.Ignore</code>)을 지정하지 않는 한 예외가 발생합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[A] 열의 텍스트 값은 숫자 값으로 변환하고 [B] 열의 숫자 값은 텍스트 값으로 변환합니다.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "누락된 [X] 열의 숫자 값을 텍스트 값으로 변환하고 존재하지 않는 열은 무시합니다.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "누락된 [X] 열의 숫자 값을 텍스트 값으로 변환하고, 존재하지 않는 열은 기본값인 null로 설정합니다.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "[B] 열의 숫자 값을 증가시켜 텍스트 값으로 변환하고 다른 모든 열을 숫자로 변환합니다.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "쿼리 및 작업 작동에 대해 사용자 정의 처리기로 테이블을 만들거나 확장합니다.",
        "Documentation.LongDescription": "<p>작업이 보기에 적용되면 작업의 기본 동작 대신 <code>handlers</code>에 지정된 함수를 사용하는 <code>table</code>의 보기를 반환합니다.</p>\r\n<p><code>table</code>이(가) 제공되는 경우 모든 처리기 기능은 선택 사항입니다. <code>table</code>이(가) 제공되지 않으면 <code>GetType</code> 및 <code>GetRows</code> 처리기 함수가 필요합니다. 작업에 대해 처리기 함수가 지정되지 않은 경우 작업의 기본 동작이 대신 <code>table</code>에 적용됩니다(<code>GetExpression</code>의 경우 제외).</p>\r\n<p>처리기 함수는 <code>table</code>에 대해 작업을 적용한 결과와 의미상 동일한 값을 반환해야 합니다(또는 <code>GetExpression</code> 경우의 결과 보기).</p>\r\n<p>처리기 함수에서 오류가 발생하면 작업의 기본 동작이 보기에 적용됩니다.</p>\r\n<p><code>Table.View</code>는 접기를 데이터 원본에 구현, 즉 M 쿼리를 원본별 쿼리로 변환하는 데 사용될 수 있습니다(예: M 쿼리에서 T-SQL 문을 만들 경우).</p>\r\n<p><code>Table.View</code>에 대한 보다 완벽한 설명을 보려면 게시된 Power Query 사용자 지정 커넥터 문서를 참조하세요.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "형식 또는 행 개수를 결정하기 위해 행에 액세스할 필요가 없는 기본 보기를 만듭니다.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "조직 및 프로젝트 이름을 입력합니다.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps(Boards만)",
        "Documentation.LongDescription": "Azure DevOps에서 제공하는 Analytics Views의 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Vertica에서 데이터를 가져옵니다.",
        "Documentation.LongDescription": "<code>database</code> 매개 변수로 이름이 지정된 데이터베이스에 있는 <code>server</code> 매개 변수로 이름이 지정된 서버에서 사용 가능한 스키마 테이블을 반환합니다.\r\n선택적 레코드 매개 변수인 <code>options</code>를 제공하여 추가 속성을 지정할 수도 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n    <li><code>CommandTimeout </code>: 서버 측 쿼리가 취소되기 전에 실행될 수 있는 시간을 제어하는 기간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Vertica에서 테이블을 나열합니다."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Webtrends의 보고서 콘텐츠가 있는 테이블을 반환합니다.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "지정된 Webtrends 보고 엔드포인트를 호출하고 모든 데이터를 테이블로 반환합니다.",
        "Documentation.Examples": [
          {
            "Description": "최근 30일 동안의 데이터에 대한 Webtrends 방문자 보고서 엔드포인트를 호출합니다.",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "방문자 데이터 테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "지정된 도메인과 동일한 포리스트에 있는 Active Directory 도메인의 목록을 반환하거나, 도메인이 지정되지 않은 경우 현재 컴퓨터의 도메인 목록을 반환합니다.",
        "Documentation.LongDescription": "지정된 도메인과 동일한 포리스트에 있는 Active Directory 도메인의 목록을 반환하거나, 도메인이 지정되지 않은 경우 현재 컴퓨터의 도메인 목록을 반환합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "ADO.NET 데이터 원본에서 원시 쿼리를 실행한 결과를 반환합니다.",
        "Documentation.LongDescription": "ADO.NET 공급자 <code>providerName</code>을(를) 사용하여 연결 문자열 <code>connectionString</code>과(와) 함께 <code>query</code>을(를) 실행한 결과를 반환합니다. <code>connectionString</code>은(는) 텍스트이거나 속성 값 쌍의 레코드일 수 있습니다. 속성 값은 텍스트 또는 숫자일 수 있습니다. 선택적 레코드 매개 변수인 <code>options</code>을(를) 제공하여 추가 속성을 지정할 수도 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>CommandTimeout</code> : 서버 쪽 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 기간입니다. 기본값은 10분입니다.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 인증에 사용할 SQL Server 호환 연결 문자열 옵션을 생성할지 여부를 결정하는 논리값(true/false)입니다. 기본값은 true입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Adobe Analytics의 보고서 모음을 반환합니다.",
        "Documentation.LongDescription": "Adobe Analyics에서 다차원 패키지 테이블을 반환합니다. 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : 스키마 이름으로 그룹화된 테이블을 볼지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n<li><code>MaxRetryCount</code> : 쿼리 결과를 폴링할 때 수행할 재시도 횟수입니다. 기본값은 120입니다.</li>\r\n<li><code>RetryInterval</code> : 재시도 간의 지속 시간입니다. 기본값은 1초입니다.</li>\r\n<li><code>Implementation</code> : Adobe Analytics API 버전을 지정합니다. 유효한 값은 &quot;2.0&quot;입니다. 기본값은 API 버전 1.4를 사용합니다.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "하이브 LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "하이브 LLAP에서 데이터 가져오기",
        "Documentation.LongDescription": "\r\n선택한 <code>protocol</code>을 사용하여 Hive LLAP <code>server</code>의 <code>database</code>에 지정된 Hive LLAP에서 테이블 목록을 반환합니다. 포트 번호는 필요한 경우 콜론으로 구분하여 서버와 함께 지정할 수도 있습니다. Thrift 전송 프로토콜은 값이 \"Standard\", \"HTTP\"인 열거 유형입니다. 다음 옵션을 제어하도록 선택적 <code>options</code> 매개 변수를 지정할 수도 있습니다.\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: 서버에 대한 연결 시도를 포기하기 전에 대기할 시간을 제어하는 지속 시간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n        <li><code>CommandTimeout</code>: 서버 측 쿼리를 취소하기 전에 실행할 수 있는 시간을 제어하는 지속 시간입니다. 기본값은 드라이버에 따라 다릅니다.</li>\r\n</ul>\r\n<code>options</code> 매개 변수는 [option1 = value1, option2 = value2...]와 같이 지정됩니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "오늘이 2017년 6월 15일이라고 가정할 경우 2017년 5월 1일부터 2017년 6월 15일까지의 요약 데이터를 가져옵니다.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "함수는 2017년 5월 1일부터 2017년 6월 15일까지의 요약 데이터를 반환합니다."
          },
          {
            "Description": "오늘이 2017년 6월 15일이라고 가정할 경우 2017년 4월의 요약 데이터를 가져옵니다.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "함수는 2017년 4월 1일부터 2017년 4월 30일까지의 데이터를 반환합니다."
          },
          {
            "Description": "오늘이 2017년 6월 15일이라고 가정할 경우 2017년 4월부터 현재까지의 요약 데이터를 가져옵니다.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "함수는 2017년 4월 1일부터 2017년 6월 15일까지의 데이터를 반환합니다."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "조직 및 프로젝트 이름을 입력합니다.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Azure DevOps에서 제공하는 OData 피드의 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Dataverse 인스턴스(Dynamics 365 및 PowerApps)에 연결합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "지정된 차원 테이블을 큐브의 필터 컨텍스트로 병합하고 지정된 차원 특성 집합을 확장해서 필터 컨텍스트의 차원 세분성을 변경합니다.",
        "Documentation.LongDescription": "지정된 차원 테이블 <code>dimensionSelector</code>을(를) 큐브 <code>cube</code>의 필터 컨텍스트로 병합하고 지정된 차원 특성의 <code>attributeNames</code> 집합을 확장해서 차원 세분성을 변경합니다. 차원 특성은 이름이 <code>newColumnNames</code> 또는 <code>attributeNames</code>(지정되지 않은 경우)인 테이블 형식 뷰에 추가됩니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "각 행의 행 컨텍스트에 적용된 측정값의 결과를 포함하는 큐브에 열을 추가합니다.",
        "Documentation.LongDescription": "각 행의 행 컨텍스트에 적용된 측정값 <code>measureSelector</code>의 결과를 포함하는 <code>cube</code>에 이름이 <code>column</code>인 열을 추가합니다. 측정값 적용은 변경된 차원 세분성 및 조각화의 영향을 받습니다. 측정값은 특정 큐브 작업이 수행된 다음에 조정됩니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central 환경 및 회사를 입력하세요.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "관련 Dynamics 365 Business Central 데이터가 포함된 테이블을 반환합니다. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central 환경 및 회사를 입력하세요.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "관련 Dynamics 365 Business Central 데이터가 포함된 테이블을 반환합니다. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central 환경 및 회사를 입력하세요.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "관련 Dynamics 365 Business Central 데이터가 포함된 테이블을 반환합니다. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central 환경 및 회사를 입력하세요.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "관련 Dynamics 365 Business Central 데이터가 포함된 테이블을 반환합니다. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "현재 Excel 통합 문서의 내용을 반환합니다.",
        "Documentation.LongDescription": "현재 Excel 통합 문서의 내용을 반환합니다. 테이블, 명명된 범위 및 동적 배열을 반환합니다. <code>Excel.Workbook</code>과 달리 시트를 반환하지 않습니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Microsoft Exchange 계정에서 목차를 반환합니다.",
        "Documentation.LongDescription": "Microsoft Exchange 계정 <code>mailboxAddress</code>에서 콘텐츠 테이블을 반환합니다. <code>mailboxAddress</code>이(가) 지정되지 않은 경우 자격 증명의 기본 계정이 사용됩니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "웨어하우스",
        "Documentation.Caption": "웨어하우스",
        "Documentation.Description": "웨어하우스에서 데이터 가져오기",
        "Documentation.LongDescription": "웨어하우스에서 데이터 가져오기"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Google 웹로그 분석 계정을 반환합니다.",
        "Documentation.LongDescription": "현재 자격 증명에서 액세스할 수 있는 Google 웹로그 분석 계정을 반환합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Google BigQuery 데이터베이스에서 데이터를 가져옵니다.",
        "Documentation.LongDescription": "\r\n      Google BigQuery에서 사용 가능한 프로젝트가 나열된 테이블을 반환합니다. 선택적 레코드 매개 변수인 <code>options</code>를 지정하여 다음 옵션을 제어할 수도 있습니다.\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: 서버 연결 시도를 포기하기 전에 대기하는 시간을 제어하는 기간입니다. 기본값은 ODBC Connection Timeout 값입니다.</li>\r\n        <li><code>CommandTimeout</code>: 서버 쪽 쿼리가 취소되기 전에 실행될 수 있는 시간을 제어하는 기간입니다.</li>\r\n        <li><code>BillingProject</code>: 청구 프로젝트 ID입니다. 기본값은 첫 번째로 사용 가능한 프로젝트입니다.</li>\r\n        <li><code>UseStorageApi</code>: 대규모 결과 집합에 BigQuery Storage API를 사용할지 여부를 지정합니다. 기본값은 true(Storage API 사용)입니다. Storage API를 사용하지 않으려면 false로 설정합니다.</li>\r\n      </ul>\r\n    레코드 매개 변수는 [option1 = value1, option2 = value2...]와 같이 지정됩니다.\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Google BigQuery에서 사용 가능한 프로젝트를 나열합니다.",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Lakehouse에서 데이터 가져오기",
        "Documentation.Description": "Lakehouse에서 데이터 가져오기",
        "Documentation.LongDescription": "액세스 권한이 있는 모든 Lakehouse에 연결하고 사용하려는 엔터티를 선택하세요."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "주요 MailChimp 데이터가 있는 테이블을 반환합니다.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "주요 MailChimp 데이터가 있는 테이블을 반환합니다.",
        "Documentation.Examples": [
          {
            "Description": "주요 MailChimp 데이터가 있는 테이블을 반환합니다.",
            "Code": "MailChimp.Tables()",
            "Result": "주요 MailChimp 데이터가 있는 테이블입니다."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "잠재 고객 활동이 있는 테이블을 반환합니다.",
        "Documentation.LongDescription": "<code>url</code>/rest/v1/activities.json에서 Marketo REST API 엔드포인트를 호출합니다. <code>startTime</code> 이후 발생한 목록 <code>activityIds</code>의 모든 활동이 반환됩니다.",
        "Documentation.Examples": [
          {
            "Description": "2015년 11월 1일 이후의 \"웹 페이지 방문\" 활동에 대한 테이블을 가져옵니다.",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "11월 1일 이후의 모든 \"웹 페이지 방문\" 활동에 대한 세부 정보가 있는 테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI 데이터 흐름(레거시)",
        "Documentation.Caption": "Power BI 데이터 흐름에서 데이터 가져오기",
        "Documentation.LongDescription": "액세스 권한이 있는 모든 Power BI 데이터 흐름에 연결하고 사용하려는 엔터티를 선택하세요."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "데이터 마트",
        "Documentation.Caption": "데이터 마트",
        "Documentation.Description": "데이터 마트에서 데이터 가져오기",
        "Documentation.LongDescription": "데이터 마트에서 데이터 가져오기"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "데이터 흐름",
        "Documentation.Caption": "데이터 흐름에서 데이터 가져오기",
        "Documentation.Description": "데이터 흐름에서 데이터 가져오기",
        "Documentation.LongDescription": "액세스 권한이 있는 모든 데이터 흐름에 연결하고 사용하려는 엔터티를 선택하세요."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "QuickBooks Online에서 데이터를 가져옵니다.",
        "Documentation.LongDescription": "\r\n      QuickBooks Online에서 사용 가능한 테이블이 나열된 테이블을 반환합니다. 선택적 레코드 매개 변수인 <code>options</code>를 지정하여 다음 옵션을 제어할 수도 있습니다.\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: 서버 연결 시도를 포기하기 전에 대기하는 시간을 제어하는 기간입니다. 기본값은 ODBC Connection Timeout 값입니다.</li>\r\n        <li><code>CommandTimeout</code>: 서버 쪽 쿼리가 취소되기 전에 실행될 수 있는 시간을 제어하는 기간입니다.</li>\r\n          </ul>\r\n        레코드 매개 변수는 [option1 = value1, option2 = value2...]와 같이 지정됩니다.\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Salesforce 계정에서 개체를 반환합니다.",
        "Documentation.LongDescription": "자격 증명에서 제공된 Salesforce 계정의 개체를 반환합니다. 계정은 제공된 <code>loginUrl</code> 환경을 통해 연결됩니다. 제공된 환경이 없을 경우 계정은 프로덕션에 연결됩니다(https://login.salesforce.com). 선택적 레코드 매개 변수 <code>options</code>은(는) 추가 속성을 지정하기 위해 제공될 수 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 반환된 값에서 탐색 속성을 생성할지 여부를 설정하는 논리(true/false)입니다(기본값은 false임).</li>\r\n<li><code>ApiVersion</code> : 이 쿼리에 사용할 Salesforce API 버전입니다. 지정하지 않으면 API 버전 29.0이 사용됩니다.</li>\r\n<li><code>Timeout</code> : 서버에 대한 요청을 중단하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 원본에 따라 다릅니다.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Salesforce 계정에서 보고서를 반환합니다.",
        "Documentation.LongDescription": "자격 증명에서 제공된 Salesforce 계정의 보고서를 반환합니다. 계정은 제공된 <code>loginUrl</code> 환경을 통해 연결됩니다. 제공된 환경이 없을 경우 계정은 프로덕션에 연결됩니다(https://login.salesforce.com). 선택적 레코드 매개 변수 <code>options</code>은(는) 추가 속성을 지정하기 위해 제공될 수 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>ApiVersion</code> : 이 쿼리에 사용할 Salesforce API 버전입니다. 지정하지 않으면 API 버전 29.0이 사용됩니다.</li>\r\n<li><code>Timeout</code> : 서버에 대한 요청을 중단하기 전에 대기할 시간을 제어하는 기간입니다. 기본값은 원본에 따라 다릅니다.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "SAP Business Warehouse 시스템에서 InfoArea로 그룹화된 InfoCube 및 쿼리를 반환합니다.",
        "Documentation.LongDescription": "시스템 번호 <code>systemNumberOrSystemId</code> 및 클라이언트 ID <code>clientId</code>이(가) 있는 서버 <code>server</code>의 SAP Business Warehouse 인스턴스에서 InfoArea로 그룹화된 쿼리 및 InfoCubes의 테이블을 반환합니다. 선택적 레코드 매개 변수 <code>optionsOrLogonGroup</code>이(가) 다음 옵션을 제어하기 위해 지정될 수 있습니다.\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Smartsheet API의 시트, 보고서, 폴더 및 작업 영역 테이블을 반환합니다.",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Smartsheet API의 사용 가능 시트, 보고서, 폴더 및 작업 영역에 대한 중첩된 테이블을 반환합니다.",
        "Documentation.Examples": [
          {
            "Description": "Smartsheet 계층의 최상위 수준에서 사용할 수 있는 시트, 폴더, 보고서 및 작업 영역을 반환합니다.",
            "Code": "Smartsheet.Tables()",
            "Result": "최상위 Smartsheet 계층의 폴더, 보고서 및 작업 영역 테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "SparkPost API v1의 사용 가능 메트릭 테이블을 반환합니다.",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "이 함수는 SparkPost API v1의 특정 \"Metrics\" 엔드포인트에서 데이터를 검색하는 데 사용할 수 있습니다. 이러한 테이블을 새로 고치거나 이 커넥터로 SparkPost API를 호출하는 경우 SparkPost API에는 엄격한 API 속도 제한이 있음을 염두에 둡니다. SparkPost 서버에서 429 상태 코드가 반환되는 경우 속도 제한에 도달하여 추가 호출을 수행하려면 잠시 기다려야 합니다. Number of days 매개 변수 값을 선택할 때는 API에는 6개월 분량의 데이터만 저장된다는 점에 유의합니다.",
        "Documentation.Examples": [
          {
            "Description": "지난 3일 동안 집계된 모든 campaign_id에 대한 count_sent and count_rejected 배달 메트릭을 검색합니다. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Stripe API를 호출합니다.",
        "Documentation.LongDescription": "추가 매개 변수로 전달된 레코드 <code>additionalParameters</code>와 예상되는 열 이름 <code>ColumnNames</code> 목록을 포함하여 https://api.stripe.com/v1/<code>method</code>에서 Stripe API를 호출합니다. Stripe Version 2015-10-16이 사용됩니다.",
        "Documentation.Examples": [
          {
            "Description": "2015년 11월 1일 이후 만든 이벤트가 있는 테이블을 반환합니다.",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "현재 Stripe 계정에 대해 지정된 이벤트를 포함하는 테이블"
          },
          {
            "Description": "모든 SKU가 있는 테이블을 반환합니다.",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "현재 Stripe 계정에 대한 모든 SKU가 있는 테이블"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "사용 가능한 Stripe 테이블 및 함수가 나열되어 있는 테이블을 반환합니다.",
        "Documentation.LongDescription": "사용 가능한 Stripe 테이블 및 함수가 나열되어 있는 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Synapse Analytics 작업 영역",
        "Documentation.Caption": "Azure Synapse Analytics 작업 영역",
        "Documentation.LongDescription": "Azure Synapse Analytics 작업 영역용 PQ 커넥터",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "지정된 이름의 열을 추가합니다. 값은 각 행이 입력으로 사용되는 지정된 선택 함수를 사용하여 계산됩니다.",
        "Documentation.LongDescription": "테이블 <code>table</code>에 이름이 <code>newColumnName</code>인 열을 추가합니다. 열의 값은 각 행이 입력으로 사용되는 지정된 선택 함수 <code>columnGenerator</code>을(를) 사용하여 계산됩니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "테이블에 각 값이 [Price] 열과 [Shipping] 열의 합계가 되는 \"TotalPrice\"라는 숫자 열을 추가합니다.",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "테이블에 지정된 열의 유사 항목 그룹화 값으로 얻은 대표 값을 사용하여 새 열을 추가합니다.",
        "Documentation.LongDescription": "대표 값 <code>columnName</code>을(를) 사용하여 <code>table</code>에 새 열 <code>newColumnName</code>을(를) 추가합니다. 대표 값은 <code>columnName</code>에서 각 행에 대해 값을 유사하게 일치시켜 얻습니다.\r\n    <p>선택적 <code>options</code> 집합을 포함하여 키 열을 비교하는 방법을 지정할 수도 있습니다. 옵션은 다음과 같습니다.\r\n    <ul>\r\n<li><code>Culture</code> : 문화권 관련 규칙을 기준으로 레코드를 그룹화할 수 있습니다. 유효한 문화권 이름일 수 있습니다. 예를 들어 &quot;ja-jp&quot; 그룹의 문화권 옵션은 일본어 문화권을 기반으로 레코드를 그룹화합니다. 기본값은 &quot;&quot;이며, 고정 영어 문화권을 기준으로 그룹화합니다.</li>\r\n<li><code>IgnoreCase</code> : 대/소문자를 구분하지 않는 키 그룹화를 허용하는 논리 값(true/false)입니다. 예를 들어 true인 경우 &quot;Grapes&quot;는 &quot;grapes&quot;와 함께 그룹화됩니다. 기본값은 true입니다.</li>\r\n<li><code>IgnoreSpace</code> : 그룹을 찾기 위해 텍스트 부분을 결합하는 것을 허용하는 논리 값(true/false)입니다. 예를 들어 true인 경우 &quot;Gra pes&quot;는 &quot;Grapes&quot;와 함께 그룹화됩니다. 기본값은 true입니다.</li>\r\n<li><code>SimilarityColumnName</code> : 입력 값과 해당 입력의 대표 값 간 유사성을 보여 주는 열 이름입니다. 기본값은 Null이며, 이 경우 새 유사성 열이 추가되지 않습니다.</li>\r\n<li><code>Threshold</code> : 두 값을 그룹화할 유사성 점수를 지정하는 0.00에서 1.00 사이의 숫자입니다.\r\n    예를 들어, &quot;포도&quot; 및 &quot;그레이&quot;(&quot;p&quot; 누락)는 이 옵션이 0.90 미만으로 설정된 경우에만 함께 그룹화됩니다.\r\n    임계값 1.00은 정확한 일치만 허용합니다.\r\n    (유사 항목 &quot;정확한 일치&quot;는 대/소문자, 단어 순서 및 구두점과 같은 차이점을 무시할 수 있습니다.)\r\n    기본값은 0.80입니다.</li>\r\n<li><code>TransformationTable</code> : 사용자 지정 값 매핑에 따라 레코드를 그룹화할 수 있는 테이블입니다. &quot;From&quot; 및 &quot;To&quot; 열을 포함해야 합니다. 예를 들어 &quot;From&quot; 열에 &quot;Grapes&quot;가 포함되어 있고 &quot;To&quot; 열에 &quot;Raisins&quot;가 포함된 변환 테이블이 제공되는 경우 &quot;Grapes&quot;가 &quot;Raisins&quot;와 함께 그룹화됩니다. 변환은 변환 테이블에 있는 모든 텍스트에 적용됩니다. 위의 변환 테이블에서 &quot;Grapes are sweet&quot;은 &quot;Raisins are sweet&quot;과도 그룹화됩니다.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "직원 위치에 대한 대표 값을 찾습니다.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "지정된 열에서 테이블 간 조인을 수행하고 조인 결과를 새 열에 생성합니다.",
        "Documentation.LongDescription": "<code>key1</code>(<code>table1</code>의 경우) 및 <code>key2</code>(<code>table2</code>의 경우)로 선택된 키 열의 값이 같은지 여부에 따라 <code>table1</code>의 행과 <code>table2</code>의 행을 조인합니다. 결과는 이름이 <code>newColumnName</code>인 열에 입력됩니다.\r\n이 함수는 조인 결과가 플랫 방식 대신 중첩 방식으로 표시된다는 점을 제외하고 JoinKind가 LeftOuter인 Table.Join과 유사하게 동작합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[saleID]에서 조인된 ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) 테이블의 \"price/stock\"이라는 ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]})에 조인 열을 추가합니다.",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "지정된 테이블 형식에 키를 추가합니다.",
        "Documentation.LongDescription": "<code>table</code>에 키를 추가합니다. 여기서 <code>columns</code>은(는) 키를 정의하는 열 이름 목록이고 <code>isPrimary</code>은(는) 키가 기본인지 여부를 지정합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "단일 열 기본 키를 테이블에 추가합니다.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "하나 이상의 다른 열 순위와 함께 열을 추가합니다.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code>에서 설명하는 하나 이상의 다른 열 순위와 함께 <code>newColumnName</code>이라는 열을 <code>table</code>에 추가합니다.\r\n<code>options</code>의 RankKind 옵션은 고급 사용자가 보다 구체적인 순위 지정 방법을 선택하는 데 사용할 수 있습니다.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "\"Revenue\" 열의 순위를 가장 높은 것에서 가장 낮은 순서로 지정하는 테이블에 \"RevenueRank\"라는 열을 추가합니다.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "테이블 열을 포함 테이블의 여러 열에 집계합니다.",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>]의 테이블을 테이블의 집계 값을 포함하는 여러 열에 집계합니다. <code>aggregations</code>을(를) 사용하여 집계할 테이블, 해당 값을 생성하기 위해 테이블에 적용할 집계 함수, 그리고 만들 집계 열의 이름을 포함하는 열을 지정합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> 테이블에 있는 <code>[t]</code>의 테이블 열을 <code>[t.a]</code>의 합계, <code>[t.b]</code>의 최소값과 최대값 및 <code>[t.a]</code>의 값 개수로 집계합니다.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "초기 오프셋을 유지한 후 다음 행을 교대로 가져오고 건너뜁니다.",
        "Documentation.LongDescription": "초기 오프셋을 유지한 후 다음 행을 교대로 가져오고 건너뜁니다.\r\n    <ul>\r\n       <li><code>table</code>: 입력 테이블입니다.</li>\r\n       <li><code>offset</code>: 반복을 시작하기 전에 유지할 행 수입니다.</li>\r\n       <li><code>skip</code>: 각 반복에서 제거할 행 수입니다.</li>\r\n       <li><code>take</code>: 각 반복에서 유지할 행 수입니다.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 첫 번째 행에서 시작하여 1개의 값을 건너뛴 후 1개의 값을 유지하는 테이블을 반환합니다.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "지정된 결합 함수를 사용하여 지정된 열을 새 열에 결합합니다.",
        "Documentation.LongDescription": "지정된 결합 함수를 사용하여 지정된 열을 새 열에 결합합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "마지막 이름과 이름을 쉼표로 구분하여 새 열로 결합합니다.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "지정한 열을 새 레코드 값 열로 결합합니다. 각각의 레코드에는 결합된 열의 이름 및 값에 해당하는 필드 이름 및 값이 있습니다.",
        "Documentation.LongDescription": "지정된 <code>table</code> 열을 <code>newColumnName</code>(이)라는 새 레코드 값 열에 결합합니다. 각 레코드에는 결합된 열의 이름 및 값에 해당하는 필드 이름 및 값이 포함되어 있습니다. <code>options</code>에 대한 레코드를 지정하는 경우 다음과 같은 옵션이 제공될 수 있습니다. \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: 텍스트로 지정하는 경우 지정된 열 이름을 레코드의 표시 이름으로 처리해야 함을 나타냅니다. 이 이름이 레코드의 열 중 하나일 필요는 없습니다.</li>\r\n     <li> <code>TypeName</code>: 텍스트로 지정하는 경우 로드하는 환경에서 드라이브로 데이터를 로드하는 중에 사용할 수 있는 결과 레코드의 논리 형식 이름을 제공합니다.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "열을 지정된 이름으로 복제합니다. 값과 형식은 원본 열에서 복사됩니다.",
        "Documentation.LongDescription": "테이블 <code>table</code>에 이름이 <code>columnName</code>인 열을 복제합니다. <code>newColumnName</code> 열의 값과 형식은 <code>columnName</code> 열에서 복사됩니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 테이블의 \"copied column\"이라는 열에 \"a\" 열을 복제합니다.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "레코드 열을 각각 값을 포함하는 여러 열로 확장합니다.",
        "Documentation.LongDescription": "입력 <code>table</code>의 레코드 <code>column</code>을(를) 사용하여 레코드의 각 필드에 대한 열을 하나씩 포함하는 테이블을 만듭니다. 선택적으로 <code>newColumnNames</code>을(를) 지정하여 새 테이블의 열 이름이 고유하도록 할 수 있습니다.\r\n    <ul>\r\n        <li><code>table</code>: 확장할 레코드 열이 있는 원래 테이블입니다. </li>\r\n        <li><code>column</code>: 확장할 열입니다.</li>\r\n        <li><code>fieldNames</code>: 테이블의 열로 확장할 필드 목록입니다.</li>\r\n        <li><code>newColumnNames</code>: 새 열에 지정할 열 이름의 목록입니다. 새 열 이름은 새 테이블의 열과 중복될 수 없습니다.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> 테이블의 [a] 열을 \"aa\", \"bb\" 및 \"cc\" 열로 확장합니다.",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "레코드 열이나 테이블 열을 포함 테이블의 여러 열로 확장합니다.",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>]의 테이블을 여러 행 및 열로 확장합니다. <code>columnNames</code>은(는) 내부 테이블에서 확장할 열을 선택하는 데 사용됩니다. 기존 열과 새 열 간의 충돌을 방지하려면 <code>newColumnNames</code>을(를) 지정합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> 테이블의 <code>[a]</code> 열에 있는 테이블 열을 3개의 열 <code>[t.a]</code>, <code>[t.b]</code> 및 <code>[t.c]</code>으로 확장합니다.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "키의 유사 일치를 기준으로 테이블의 행을 그룹화합니다.",
        "Documentation.LongDescription": "지정된 열 <code>key</code>에서 각 행에 대해 값을 유사하게 일치시켜 <code>table</code>의 행을 그룹화합니다.\r\n    각 그룹에 대해 <code>aggregatedColumns</code>(으)로 지정된 집계 열과 함께 키 열 및 해당 값을 포함하는 레코드가 생성됩니다.\r\n    이 함수는 고정된 순서의 행을 반환할 수 없습니다.\r\n    <p>선택적 <code>options</code> 집합을 포함하여 키 열을 비교하는 방법을 지정할 수도 있습니다. 옵션은 다음과 같습니다. \r\n    <ul>\r\n<li><code>Culture</code> : 문화권 관련 규칙을 기준으로 레코드를 그룹화할 수 있습니다. 유효한 문화권 이름일 수 있습니다. 예를 들어 &quot;ja-jp&quot; 그룹의 문화권 옵션은 일본어 문화권을 기반으로 레코드를 그룹화합니다. 기본값은 &quot;&quot;이며, 고정 영어 문화권을 기준으로 그룹화합니다.</li>\r\n<li><code>IgnoreCase</code> : 대/소문자를 구분하지 않는 키 그룹화를 허용하는 논리 값(true/false)입니다. 예를 들어 true인 경우 &quot;Grapes&quot;는 &quot;grapes&quot;와 함께 그룹화됩니다. 기본값은 true입니다.</li>\r\n<li><code>IgnoreSpace</code> : 그룹을 찾기 위해 텍스트 부분을 결합하는 것을 허용하는 논리 값(true/false)입니다. 예를 들어 true인 경우 &quot;Gra pes&quot;는 &quot;Grapes&quot;와 함께 그룹화됩니다. 기본값은 true입니다.</li>\r\n<li><code>SimilarityColumnName</code> : 입력 값과 해당 입력의 대표 값 간 유사성을 보여 주는 열 이름입니다. 기본값은 Null이며, 이 경우 새 유사성 열이 추가되지 않습니다.</li>\r\n<li><code>Threshold</code> : 두 값을 그룹화할 유사성 점수를 지정하는 0.00에서 1.00 사이의 숫자입니다.\r\n    예를 들어, &quot;포도&quot; 및 &quot;그레이&quot;(&quot;p&quot; 누락)는 이 옵션이 0.90 미만으로 설정된 경우에만 함께 그룹화됩니다.\r\n    임계값 1.00은 정확한 일치만 허용합니다.\r\n    (유사 항목 &quot;정확한 일치&quot;는 대/소문자, 단어 순서 및 구두점과 같은 차이점을 무시할 수 있습니다.)\r\n    기본값은 0.80입니다.</li>\r\n<li><code>TransformationTable</code> : 사용자 지정 값 매핑에 따라 레코드를 그룹화할 수 있는 테이블입니다. &quot;From&quot; 및 &quot;To&quot; 열을 포함해야 합니다. 예를 들어 &quot;From&quot; 열에 &quot;Grapes&quot;가 포함되어 있고 &quot;To&quot; 열에 &quot;Raisins&quot;가 포함된 변환 테이블이 제공되는 경우 &quot;Grapes&quot;가 &quot;Raisins&quot;와 함께 그룹화됩니다. 변환은 변환 테이블에 있는 모든 텍스트에 적용됩니다. 위의 변환 테이블에서 &quot;Grapes are sweet&quot;은 &quot;Raisins are sweet&quot;과도 그룹화됩니다.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "각 위치의 직원 수를 포함하는 집계 열 [Count]를 추가하여 테이블을 그룹화합니다(\"each Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "지정된 키를 기준으로 유사하게 일치하는 두 테이블의 행을 조인합니다.",
        "Documentation.LongDescription": "<p><code>key1</code>(<code>table1</code>의 경우) 및 <code>key2</code>(<code>table2</code>의 경우)(으)로 선택된 키 열 값의 유사 일치 여부에 따라 <code>table1</code>의 행과 <code>table2</code>의 행을 조인합니다.</p>\r\n<p>유사 일치는 텍스트의 같음이 아닌 텍스트의 유사성을 기반으로 하는 비교입니다.</p>\r\n<p>기본적으로 내부 조인이 수행되지만 조인 유형을 지정하도록 선택적 <code>joinKind</code>을(를) 포함할 수도 있습니다. 옵션에는 다음이 포함됩니다.\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>키 열을 비교하는 방법을 지정하는 데 <code>joinOptions</code>의 선택적 집합이 포함될 수 있습니다. 옵션에는 다음이 포함됩니다.\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : 유사 항목 일치에 사용할 병렬 스레드 수를 지정하는 1에서 8 사이의 숫자입니다. 기본값은 1입니다.</li>\r\n<li><code>Culture</code> : 문화권 관련 규칙을 기준으로 레코드를 일치시킬 수 있습니다. 유효한 문화권 이름일 수 있습니다. 예를 들어 &quot;ja-jp&quot; 그룹의 문화권 옵션은 일본어 문화권을 기반으로 레코드를 일치시킵니다. 기본값은 &quot;&quot;이며, 고정 영어 문화권을 기준으로 일치시킵니다.</li>\r\n<li><code>IgnoreCase</code> : 대/소문자를 구분하지 않는 키 일치를 허용하는 논리 값(true/false)입니다. 예를 들어 true인 경우 &quot;Grapes&quot;는 &quot;grapes&quot;와 일치하게 됩니다. 기본값은 true입니다.</li>\r\n<li><code>IgnoreSpace</code> : 일치 항목을 찾기 위해 텍스트 부분을 결합하는 것을 허용하는 논리 값(true/false)입니다. 예를 들어 true인 경우 &quot;Gra pes&quot;는 &quot;Grapes&quot;와 일치하게 됩니다. 기본값은 true입니다.</li>\r\n<li><code>NumberOfMatches</code> : 입력 행마다 반환할 수 있는 일치하는 행의 최대 수를 지정하는 정수입니다. 예를 들어 값이 1이면 각 입력 행에 대해 일치하는 행이 최대 하나만 반환됩니다. 이 옵션을 제공하지 않으면 일치하는 모든 행이 반환됩니다.</li>\r\n<li><code>SimilarityColumnName</code> : 입력 값과 해당 입력의 대표 값 간 유사성을 보여 주는 열 이름입니다. 기본값은 Null이며, 이 경우 새 유사성 열이 추가되지 않습니다.</li>\r\n<li><code>Threshold</code> : 두 값이 일치하는 유사성 점수를 지정하는 0.00에서 1.00 사이의 숫자입니다.\r\n    예를 들어, &quot;Grapes&quot; 및 &quot;Graes&quot;(&quot;p&quot; 누락)는 이 옵션이 0.90 미만으로 설정된 경우에만 일치합니다.\r\n    임계값 1.00은 정확한 일치만 허용합니다.\r\n    (모호한 &quot;정확히 일치&quot;는 대/소문자, 단어 순서 및 구두점과 같은 차이점을 무시할 수 있습니다.)\r\n    기본값은 0.80입니다.</li>\r\n<li><code>TransformationTable</code> : 사용자 지정 값 매핑에 따라 레코드를 일치시킬 수 있는 테이블입니다. &quot;From&quot; 및 &quot;To&quot; 열을 포함해야 합니다. 예를 들어 &quot;From&quot; 열에 &quot;Grapes&quot;가 포함되어 있고 &quot;To&quot; 열에 &quot;Raisins&quot;가 포함된 변환 테이블이 제공되는 경우 &quot;Grapes&quot;가 &quot;Raisins&quot;와 일치하게 됩니다. 변환은 변환 테이블에 있는 모든 텍스트에 적용됩니다. 위의 변환 테이블에서 &quot;Grapes are sweet&quot;은 &quot;Raisins are sweet&quot;과도 일치하게 됩니다.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[FirstName]에 따라 두 테이블의 왼쪽 내부 유사 항목 조인",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "지정된 열에서 테이블 간 유사 조인을 수행하고 조인 결과를 새 열에 생성합니다.",
        "Documentation.LongDescription": "<p><code>key1</code>(<code>table1</code>의 경우) 및 <code>key2</code>(<code>table2</code>의 경우)(으)로 선택된 키 열 값의 유사 일치 여부에 따라 <code>table1</code>의 행과 <code>table2</code>의 행을 조인합니다. 결과는 이름이 <code>newColumnName</code>인 열에 반환됩니다.</p>\r\n<p>유사 일치는 텍스트의 같음이 아닌 텍스트의 유사성을 기반으로 하는 비교입니다.</p>\r\n<p>선택적 <code>joinKind</code>은(는) 수행할 조인의 종류를 지정합니다. 기본적으로 <code>joinKind</code>을(를) 지정하지 않으면 왼쪽 우선 외부 조인이 수행됩니다. 옵션에는 다음이 포함됩니다.\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p><code>joinOptions</code>의 선택적 집합을 포함하여 키 열을 비교하는 방법을 지정할 될 수 있습니다. 옵션에는 다음이 포함됩니다.\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : 유사 항목 일치에 사용할 병렬 스레드 수를 지정하는 1에서 8 사이의 숫자입니다. 기본값은 1입니다.</li>\r\n<li><code>Culture</code> : 문화권 관련 규칙을 기준으로 레코드를 일치시킬 수 있습니다. 유효한 문화권 이름일 수 있습니다. 예를 들어 &quot;ja-jp&quot; 그룹의 문화권 옵션은 일본어 문화권을 기반으로 레코드를 일치시킵니다. 기본값은 &quot;&quot;이며, 고정 영어 문화권을 기준으로 일치시킵니다.</li>\r\n<li><code>IgnoreCase</code> : 대/소문자를 구분하지 않는 키 일치를 허용하는 논리 값(true/false)입니다. 예를 들어 true인 경우 &quot;Grapes&quot;는 &quot;grapes&quot;와 일치하게 됩니다. 기본값은 true입니다.</li>\r\n<li><code>IgnoreSpace</code> : 일치 항목을 찾기 위해 텍스트 부분을 결합하는 것을 허용하는 논리 값(true/false)입니다. 예를 들어 true인 경우 &quot;Gra pes&quot;는 &quot;Grapes&quot;와 일치하게 됩니다. 기본값은 true입니다.</li>\r\n<li><code>NumberOfMatches</code> : 입력 행마다 반환할 수 있는 일치하는 행의 최대 수를 지정하는 정수입니다. 예를 들어 값이 1이면 각 입력 행에 대해 일치하는 행이 최대 하나만 반환됩니다. 이 옵션을 제공하지 않으면 일치하는 모든 행이 반환됩니다.</li>\r\n<li><code>SimilarityColumnName</code> : 입력 값과 해당 입력의 대표 값 간 유사성을 보여 주는 열 이름입니다. 기본값은 Null이며, 이 경우 새 유사성 열이 추가되지 않습니다.</li>\r\n<li><code>Threshold</code> : 두 값이 일치하는 유사성 점수를 지정하는 0.00에서 1.00 사이의 숫자입니다.\r\n    예를 들어, &quot;Grapes&quot; 및 &quot;Graes&quot;(&quot;p&quot; 누락)는 이 옵션이 0.90 미만으로 설정된 경우에만 일치합니다.\r\n    임계값 1.00은 정확한 일치만 허용합니다.\r\n    (모호한 &quot;정확히 일치&quot;는 대/소문자, 단어 순서 및 구두점과 같은 차이점을 무시할 수 있습니다.)\r\n    기본값은 0.80입니다.</li>\r\n<li><code>TransformationTable</code> : 사용자 지정 값 매핑에 따라 레코드를 일치시킬 수 있는 테이블입니다. &quot;From&quot; 및 &quot;To&quot; 열을 포함해야 합니다. 예를 들어 &quot;From&quot; 열에 &quot;Grapes&quot;가 포함되어 있고 &quot;To&quot; 열에 &quot;Raisins&quot;가 포함된 변환 테이블이 제공되는 경우 &quot;Grapes&quot;가 &quot;Raisins&quot;와 일치하게 됩니다. 변환은 변환 테이블에 있는 모든 텍스트에 적용됩니다. 위의 변환 테이블에서 &quot;Grapes are sweet&quot;은 &quot;Raisins are sweet&quot;과도 일치하게 됩니다.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[FirstName]에 따라 두 테이블의 왼쪽 내부 유사 항목 조인",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "동일한 키가 있는 테이블의 행을 그룹화합니다.",
        "Documentation.LongDescription": "<code>table</code>에서 정의한 키 열을 기준으로 <code>key</code> 행을 그룹화 합니다. <code>key</code>은(는) 단일 열 이름이거나 열 이름 목록일 수 있습니다.\r\n    각 그룹에 대해 <code>aggregatedColumns</code>(으)로 지정된 집계 열과 함께 키 열 및 해당 값을 포함하는 레코드가 구성됩니다.\r\n    선택적으로 <code>groupKind</code> 및 <code>comparer</code>를 지정할 수 있습니다.<br>\r\n    <br>\r\n    키 열을 기준으로 데이터가 이미 정렬된 경우에는 GroupKind.Local의 <code>groupKind</code>이(가) 제공될 수 있습니다. 지정된 키 값 집합을 사용하는 모든 행이 연속적으로 간주되므로,\r\n    이는 특정한 경우에 그룹화의 성능을 개선할 수 있습니다.<br>\r\n    <br>\r\n    <code>comparer</code>을(를) 전달할 때 서로 다른 키를 동일하게 취급하면 행은 키가 자신의 키와 다른 그룹에 배치될 수 있습니다.<br>\r\n    <br>\r\n    이 함수는 반환하는 행의 순서를 보장하지 않습니다.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "가격의 합계(\"each List.Sum([price])\")를 포함하는 집계 열 [total]을 추가하여 테이블을 그룹화합니다.",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "테이블의 지정된 위치에 행 목록을 삽입합니다.",
        "Documentation.LongDescription": "행 목록 <code>rows</code>이(가) <code>table</code>의 지정된 위치 <code>offset</code>에 삽입된 테이블을 반환합니다. 삽입할 행의 각 열은 테이블의 열 형식과 일치해야 합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 위치 1에 행을 삽입합니다.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "테이블의 위치 1에 행을 삽입합니다.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "지정된 키를 기준으로 일치하는 두 테이블의 행을 조인합니다.",
        "Documentation.LongDescription": "<p><code>key1</code>(<code>table1</code>의 경우) 및 <code>key2</code>(<code>table2</code>의 경우)에서 선택한 키 열의 값이 같은지에 따라 <code>table1</code>의 행을 <code>table2</code>의 행과 조인합니다. </p>\r\n<p>기본적으로 내부 조인이 수행되지만 조인 유형을 지정하기 위해 선택적 <code>joinKind</code>이(가) 포함될 수 있습니다. 옵션은 다음과 같습니다.\r\n     <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>키 열을 비교하는 방법을 지정하기 위해 선택적 <code>keyEqualityComparers</code> 세트가 포함될 수 있습니다. 이 매개 변수는 현재 내부용으로만 사용됩니다.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "단일 키 열을 사용하여 두 테이블을 조인합니다.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "여러 키 열을 사용하여 열 이름이 충돌하는 두 테이블을 조인합니다.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "지정된 조건을 사용하여 가장 큰 행을 반환합니다.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code>이(가) 지정된 경우 <code>table</code>의 가장 큰 행을 반환합니다.\r\n    행이 정렬된 후에 <code>countOrCondition</code> 매개 변수를 지정하여 결과를 추가적으로 필터링해야 합니다. 정렬 알고리즘은 고정된 정렬 결과를 생성할 수 없습니다. <code>countOrCondition</code> 매개 변수는 여러 형식을 사용할 수 있습니다.\r\n    <ul>\r\n        <li> 숫자가 지정된 경우 최대 <code>countOrCondition</code>개의 항목이 오름차순으로 포함된 목록이 반환됩니다. </li>\r\n        <li> 조건이 지정된 경우에는 처음부터 시작해서 해당 조건을 충족하는 항목의 목록이 반환됩니다. 한 항목에서 조건이 충족되지 않으면 이후 항목은 더 이상 고려되지 않습니다. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [a] > 0 조건을 사용하여 [a] 열의 값이 가장 큰 행을 찾습니다. 행은 필터가 적용되기 전에 정렬됩니다.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "테이블에서 [b] > 0 조건을 사용하여 [a] 열의 값이 가장 큰 행을 찾습니다. 행은 필터가 적용되기 전에 정렬됩니다.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "지정된 조건을 사용하여 가장 작은 행을 반환합니다.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code>이(가) 지정된 경우 <code>table</code>의 가장 작은 행을 반환합니다. 행이 정렬된 후에 <code>countOrCondition</code> 매개 변수를 지정하여 결과를 추가적으로 필터링해야 합니다. 정렬 알고리즘은 고정된 정렬 결과를 생성할 수 없습니다. <code>countOrCondition</code> 매개 변수는 여러 형식을 사용할 수 있습니다.\r\n    <ul>\r\n        <li> 숫자가 지정된 경우 최대 <code>countOrCondition</code>개의 항목이 오름차순으로 포함된 목록이 반환됩니다. </li>\r\n        <li> 조건이 지정된 경우에는 처음부터 시작해서 해당 조건을 충족하는 항목의 목록이 반환됩니다. 한 항목에서 조건이 충족되지 않으면 이후 항목은 더 이상 고려되지 않습니다. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [a] < 3 조건을 사용하여 [a] 열의 값이 가장 작은 행을 찾습니다. 행은 필터가 적용되기 전에 정렬됩니다.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "테이블에서 [a] < 0 조건을 사용하여 [b] 열의 값이 가장 작은 행을 찾습니다. 행은 필터가 적용되기 전에 정렬됩니다.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "지정된 열에서 테이블 간 조인을 수행하고 조인 결과를 새 열에 생성합니다.",
        "Documentation.LongDescription": "<p><code>key1</code>(<code>table1</code>의 경우) 및 <code>key2</code>(<code>table2</code>의 경우)(으)로 선택된 키 열의 값이 같은지 여부에 따라 <code>table1</code>의 행과 <code>table2</code>의 행을 조인합니다. 결과는 이름이 <code>newColumnName</code>인 열에 입력됩니다.</p>\r\n<p>선택적 <code>joinKind</code>은(는) 수행할 조인의 종류를 지정합니다. 기본적으로 <code>joinKind</code>을(를) 지정하지 않으면 왼쪽 우선 외부 조인이 수행됩니다.</p>\r\n<p>키 열을 비교하는 방법을 지정하는 데 <code>keyEqualityComparers</code>의 선택적 집합이 포함될 수 있습니다. 이 기능은 현재 내부에서만 사용하도록 제공됩니다.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "단일 키 열을 사용하여 두 테이블을 조인합니다.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "특성-값 쌍을 나타내는 열 쌍이 지정된 경우 특성 열의 데이터를 열 머리글로 회전합니다.",
        "Documentation.LongDescription": "특성-값 쌍을 나타내는 열 쌍이 지정된 경우 특성 열의 데이터를 열 머리글로 회전합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> 테이블의 특성 열에 있는 \"a\", \"b\" 및 \"c\" 값을 고유한 열로 피벗합니다.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "<code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> 테이블의 특성 열에 있는 \"a\", \"b\" 및 \"c\" 값을 고유한 열로 피벗합니다. \"x\" 키의 \"c\" 특성에는 서로 연결된 여러 값이 있으므로 충돌을 해결하려면 List.Max 함수를 사용합니다.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "지정한 범위의 행을 제공된 행으로 바꿉니다.",
        "Documentation.LongDescription": "<code>offset</code> 뒤부터 시작하여 <code>table</code> 입력에서 지정한 개수의 행 <code>count</code>을(를) 지정한 <code>rows</code>(으)로 바꿉니다. <code>rows</code> 매개 변수는 레코드 목록입니다.\r\n    <ul>\r\n       <li><code>table</code>: 바꾸기를 수행할 테이블입니다.</li>\r\n       <li><code>offset</code>: 바꾸기 전에 건너뛸 행 수입니다.</li>\r\n       <li><code>count</code>: 바꿀 행 수입니다.</li>\r\n       <li><code>rows</code>: <code>table</code>에서 <code>offset</code>(으)로 지정된 위치에 삽입할 행 레코드 목록입니다.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 위치 1부터 시작하여 3개의 행을 바꿉니다.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "지정한 열에서 한 값을 다른 값으로 바꿉니다.",
        "Documentation.LongDescription": "지정한 <code>table</code> 열에서 <code>oldValue</code>을(를) <code>newValue</code>(으)로 바꿉니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "B열의 \"goodbye\" 텍스트를 \"world\"로 바꾸고 전체 값만 일치시킵니다.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "값의 일부와 일치하는 텍스트 \"ur\"을 열 B의 \"또는\"으로 바꿉니다.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "미국 직원의 이름을 익명화합니다.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "미국 직원의 모든 열을 익명화합니다.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "지정한 분할자 함수를 사용하여 지정한 열을 추가 열 집합으로 분할합니다.",
        "Documentation.LongDescription": "지정한 분할자 함수를 사용하여 지정한 열을 추가 열 집합으로 분할합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "\"i\" 위치에서 [Name] 열을 두 개의 열로 분할합니다.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "테이블의 열 집합을 특성-값 쌍으로 변환합니다.",
        "Documentation.LongDescription": "각 행에 포함된 값의 다른 부분과 결합하여 테이블의 열 집합을 특성-값 쌍으로 변환합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> 테이블의 \"a\", \"b\" 및 \"c\" 열을 특성-값 쌍으로 피벗 해제합니다.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "지정한 집합 이외의 모든 열을 특성-값 쌍으로 변환합니다.",
        "Documentation.LongDescription": "지정한 집합 이외의 모든 열을 각 행의 나머지 값으로 결합된 특성-값 쌍으로 변환합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "지정한 집합 이외의 모든 열을 각 행의 나머지 값으로 결합된 특성-값 쌍으로 변환합니다.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams 개인 분석",
        "Documentation.LongDescription": "<p>Teams Analytics 커넥터를 사용하면 Teams의 사용 현황에 관한 인사이트를 얻을 수 있습니다. Teams에서의 개인적인 활동뿐 아니라 자신이 속해 있는 Teams의 활동에 대한 데이터를 사용할 수 있습니다. </p>\r\n<p>이전 90일 동안의 데이터를 사용할 수 있습니다. </p>\r\n<p> 사용 가능한 데이터 형식에 대한 자세한 내용은 다음 도움말 문서를 참조하세요. </p>\r\n<ul>\r\n<li><b>Teams 사용 현황: </b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Teams 사용자 활동: </b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "조직 및 프로젝트 이름을 입력합니다.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Azure DevOps에서 제공하는 OData 피드의 테이블을 반환합니다."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "이진 값을 읽는 이진 형식을 반환합니다.",
        "Documentation.LongDescription": "이진 값을 읽는 이진 형식을 반환합니다. <code>length</code>을(를) 지정한 경우 이진 값에는 해당 바이트만큼이 포함됩니다. <code>length</code>을(를) 지정하지 않은 경우에는 이진 값에 나머지 바이트가 포함됩니다. <code>length</code>은(는) 숫자로 지정하거나, 이진 데이터 앞에 오는 길이의 이진 형식으로 지정할 수 있습니다.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "주어진 두 값이 같은지 확인한 후 결과를 논리값으로 반환합니다.",
        "Documentation.LongDescription": "제공된 <code>comparer</code>을(를) 사용하여 주어진 두 값 <code>x</code> 및 <code>y</code>에 대한 동등성 검사를 기반으로 <code>논리</code> 값을 반환합니다.\r\n       <div>\r\n         <code>comparer</code>은(는) 비교를 제어하는 데 사용되는 <code>Comparer</code>입니다.\r\n         비교자는 두 개의 인수를 받아들이고 첫 번째 값이 두 번째 값보다 작은지, 같은지, 큰지에 따라 -1, 0 또는 1을 반환하는 함수입니다.\r\n         비교자는 대소문자를 구분하지 않거나 문화권 및 로캘 인식 비교를 제공하는 데 사용할 수 있습니다.\r\n       </div>\r\n       <div>\r\n         다음 기본 제공 비교자는 수식 언어에서 사용할 수 있습니다.\r\n       </div>\r\n       <ul>\r\n         <li><code>Comparer.Ordinal</code>: 정확한 서수 비교를 수행하는 데 사용</li>\r\n         <li><code>Comparer.OrdinalIgnoreCase</code>: 대소문자를 구분하지 않는 정확한 서수 비교를 수행하는 데 사용</li>\r\n         <li> <code>Comparer.FromCulture</code>: 문화권 인식 비교를 수행하는 데 사용</li>\r\n       </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "\"en-US\" 로캘을 사용하여 \"1\"과 \"A\"를 비교한 후 값이 같은지 여부를 확인합니다.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "현지 표준 시간대의 현재 날짜 및 시간을 반환합니다. 이 값은 고정되므로 이후 호출에서도 변경되지 않습니다.",
        "Documentation.LongDescription": "시스템의 현재 날짜 및 시간으로 설정된 <code>datetime</code> 값을 반환합니다. 이 값은 고정되므로 식을 실행할 때마다 다른 값을 반환할 수 있는 DateTime.LocalNow와 달리 이후 호출에서도 변경되지 않습니다.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "현지 표준 시간대의 현재 날짜 및 시간을 반환합니다.",
        "Documentation.LongDescription": "시스템의 현재 날짜 및 시간으로 설정된 <code>datetime</code> 값을 반환합니다.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "현지 표준 시간대의 현재 날짜 및 시간을 반환합니다. 이 값은 고정되므로 이후 호출에서도 변경되지 않습니다.",
        "Documentation.LongDescription": "시스템의 현재 날짜 및 시간으로 설정된 <code>datetime</code> 값을 반환합니다. 반환되는 값에는 현지 표준 시간대를 나타내는 표준 시간대 정보가 포함됩니다. 이 값은 고정되므로 식을 실행할 때마다 다른 값을 반환할 수 있는 DateTimeZone.LocalNow와 달리 이후 호출에서도 변경되지 않습니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "UTC(GMT 표준 시간대)의 현재 날짜 및 시간을 반환합니다. 이 값은 고정되므로 이후 호출에서도 변경되지 않습니다.",
        "Documentation.LongDescription": "UTC(GMT 표준 시간대)의 현재 날짜 및 시간을 반환합니다. 이 값은 고정되므로 이후 호출에서도 변경되지 않습니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "현지 표준 시간대의 현재 날짜 및 시간을 반환합니다.",
        "Documentation.LongDescription": "시스템의 현재 날짜 및 시간으로 설정된 <code>datetimezone</code> 값을 반환합니다.\r\n    반환되는 값에는 현지 표준 시간대를 나타내는 표준 시간대 정보가 포함됩니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "UTC(GMT 표준 시간대)의 현재 날짜 및 시간을 반환합니다.",
        "Documentation.LongDescription": "UTC(GMT 표준 시간대)의 현재 날짜 및 시간을 반환합니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "UTC의 현재 날짜 및 시간을 가져옵니다.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "현재 실행 중인 평가에 대해 불투명한 식별자를 반환합니다.",
        "Documentation.LongDescription": "현재 실행 중인 평가에 대해 불투명한 식별자를 반환합니다.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "들어오는 요청과 나가는 요청의 상관 관계를 지정하는 불투명 식별자를 반환합니다.",
        "Documentation.LongDescription": "들어오는 요청과 나가는 요청의 상관 관계를 지정하는 불투명 식별자를 반환합니다.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "추적이 사용하도록 설정되어 있는 경우 추적 항목을 쓰고 값을 반환합니다.",
        "Documentation.LongDescription": "추적이 사용하도록 설정되어 있는 경우 <code>message</code> 추적을 쓰고 <code>value</code>을(를) 반환합니다. 선택적 매개 변수 <code>delayed</code>이(가) 메시지가 추적될 때까지 <code>value</code>의 평가를 지연할지 여부를 지정합니다. <code>traceLevel</code>에는 다음 값 중 하나가 지정될 수 있습니다.\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Text.From 함수를 호출하기 전에 메시지를 추적하고 결과를 반환합니다.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "현재 호스트에 대한 기본 ID 공급자입니다.",
        "Documentation.LongDescription": "현재 호스트에 대한 기본 ID 공급자입니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "목록의 항목에서 요약 값을 누적합니다.",
        "Documentation.LongDescription": "<code>accumulator</code>을(를) 사용하여 <code>list</code> 목록의 항목에서 요약 값을 누적합니다.\r\n    선택적 시드 매개 변수 <code>seed</code>을(를) 설정할 수 있습니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "((state, current) => state + current를 사용하여 {1, 2, 3, 4, 5} 목록의 항목에서 요약 값을 누적합니다.",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "지정된 초기 값, 개수 및 증분 기간 값을 사용하여 datetimezone 값의 목록을 생성합니다.",
        "Documentation.LongDescription": "<code>start</code>에 시작하고 크기가 <code>count</code>인 <code>datetimezone</code> 값의 목록을 반환합니다. 지정된 증분 <code>step</code>은(는) 각 값에 더해지는 <code>duration</code> 값입니다.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "정월 초하루 5분 전(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0))에 시작하여 1분씩 증가하는(#duration(0, 0, 1, 0)) 10개의 값을 포함하는 목록을 만듭니다.",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "지정된 초기 값, 개수 및 증분 기간 값을 사용하여 datetime 값의 목록을 생성합니다.",
        "Documentation.LongDescription": "<code>start</code>에 시작하고 크기가 <code>count</code>인 <code>datetime</code> 값의 목록을 반환합니다. 지정된 증분 <code>step</code>은(는) 각 값에 더해지는 <code>duration</code> 값입니다.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "정월 초하루 5분 전(#datetime(2011, 12, 31, 23, 55, 0))에 시작하여 1분씩 증가하는(#duration(0, 0, 1, 0)) 10개의 값을 포함하는 목록을 만듭니다.",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "지정된 초기 값, 개수 및 증분 기간 값을 사용하여 date 값의 목록을 생성합니다.",
        "Documentation.LongDescription": "<code>start</code>에 시작하고 크기가 <code>count</code>인 <code>date</code> 값의 목록을 반환합니다. 지정된 증분 <code>step</code>은(는) 각 값에 더해지는 <code>duration</code> 값입니다.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "섣달 그믐날(#date(2011, 12, 31))에 시작하여 1일씩 증가하는(#duration(1, 0, 0, 0)) 5개의 값을 포함하는 목록을 만듭니다.",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "지정된 초기 값, 개수 및 증분 기간 값을 사용하여 duration 값의 목록을 생성합니다.",
        "Documentation.LongDescription": "<code>start</code>에 시작하여 지정된 <code>duration</code> <code>step</code>씩 증가하는 <code>count</code> <code>duration</code> 값의 목록을 반환합니다.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "1시간으로 시작하여 한 시간씩 증가하는 5개의 값을 포함하는 목록을 만듭니다.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "값 목록을 생성합니다.",
        "Documentation.LongDescription": "제공된 함수를 사용하여 값 목록을 생성합니다. <code>initial</code> 함수는 시작 후보 값을 생성한 다음 <code>condition</code>에 대해 테스트합니다.\r\n    후보 값이 승인되면 결과 목록의 일부로 반환되고 새로 승인된 값을 <code>next</code>(으)로 전달하여 다음 후보 값이 생성됩니다.\r\n    후보 값이 <code>condition</code>에 일치하지 못하면 목록 생성 프로세스가 중지됩니다.\r\n    결과 목록의 항목을 변환하는 선택적 매개 변수(<code>selector</code>)도 제공할 수 있습니다.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "10시에서 시작하여 반복적으로 1씩 감소하고 각 항목이 0보다 큰지 확인하여 목록을 만듭니다.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "x는 값이고 y는 목록인 x 및 y를 포함하는 레코드 목록을 생성합니다. x는 10 미만이어야 하고 목록 y의 항목 수를 나타냅니다. 목록이 생성되면 x 값만 반환합니다.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "목록의 지정된 인덱스 위치에 값을 삽입합니다.",
        "Documentation.LongDescription": "<code>values</code>의 값을 <code>list</code>의 <code>index</code> 위치에 삽입하여 생성된 새 목록을 반환합니다. 목록의 첫 번째 위치는 인덱스 0입니다.\r\n      <ul>\r\n        <li><code>list</code>: 값을 삽입할 대상 목록입니다.</li>\r\n        <li><code>index</code>: 대상 목록(<code>list</code>)에서 값을 삽입할 위치의 인덱스입니다. 목록의 첫 번째 위치는 인덱스 0입니다.</li>\r\n        <li><code>values</code>: <code>list</code>에 삽입할 값 목록입니다.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "목록({3, 4})을 대상 목록({1, 2, 5})의 인덱스 2 위치에 삽입합니다.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "중첩된 목록이 있는 목록({1, {1.1, 1.2}})을 대상 목록({2, 3, 4})의 인덱스 0 위치에 삽입합니다.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "지정된 위치에서 시작하여 지정된 개수만큼의 값을 대체 값으로 바꿉니다.",
        "Documentation.LongDescription": "<code>list</code>의 <code>count</code> 값을 지정된 위치 <code>index</code>부터 목록 <code>replaceWith</code>(으)로 바꿉니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 7, 8, 9, 5} 목록의 {7, 8, 9}를 {3, 4}로 바꿉니다.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "목록에서 지정된 값을 검색하여 바꿉니다.",
        "Documentation.LongDescription": "값 목록 <code>list</code>에서 <code>oldValue</code> 값을 검색하여 찾은 각 값을 대체 값 <code>newValue</code>(으)로 바꿉니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{\"a\", \"B\", \"a\", \"a\"} 목록의 모든 \"a\" 값을 \"A\"로 바꿉니다.",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "지정된 초기 값, 개수 및 증분 기간 값을 사용하여 time 값의 목록을 생성합니다.",
        "Documentation.LongDescription": "<code>start</code>에 시작하고 크기가 <code>count</code>인 <code>time</code> 값의 목록을 반환합니다. 지정된 증분 <code>step</code>은(는) 각 값에 더해지는 <code>duration</code> 값입니다.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "정오(#time(12, 0, 0))에 시작하여 1시간씩 증가하는(#duration(0, 1, 0, 0)) 4개의 값을 포함하는 목록을 만듭니다.",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "지정된 함수를 사용하여 입력 목록에서 변환된 요소로 구성된 목록을 반환합니다.",
        "Documentation.LongDescription": "입력 목록에서 요소가 투영된 목록을 반환합니다.<br>\r\n    <br>\r\n    <code>collectionTransform</code> 함수는 각 요소를 중간 목록으로 변환하고 <code>resultTransform</code> 함수는 최종 결과를 구성하기 위해 원래 요소와 중간 목록의 항목을 수신합니다.<br>\r\n    <br>\r\n    <code>collectionTransform</code> 함수에는 서명 <code>(x as any) as list => ...</code>가 있고 여기서 <code>x</code>는 <code>list</code>의 요소입니다.\r\n    <code>resultTransform</code> 함수는 결과의 모양을 투영하고 서명 <code>(x as any, y as any) as any => ...</code>를 포함합니다. 여기서 <code>x</code>는 <code>list</code>의 요소이고 <code>y</code>는 <code>x</code>를 <code>collectionTransform</code>에 전달하여 생성된 목록의 요소입니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "사람과 그들의 애완동물 목록을 평면화합니다.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "난수를 반환합니다.",
        "Documentation.LongDescription": "0과 1 사이의 난수를 반환합니다.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "난수를 가져옵니다.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "이 기능은 내부용입니다.",
        "Documentation.LongDescription": "이 기능은 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "레코드에 필드를 추가합니다.",
        "Documentation.LongDescription": "지정된 필드 이름 <code>fieldName</code> 및 값 <code>value</code>으(로) 레코드 <code>record</code>에 필드를 추가합니다.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "레코드에 Address 필드를 추가합니다.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "지정된 입력 내의 텍스트를 바꿉니다.",
        "Documentation.LongDescription": "원래 <code>text</code>의 <code>old</code> 텍스트를 <code>new</code> 텍스트로 바꿉니다. 이 치환 함수는 <code>List.ReplaceValue</code> 및 <code>Table.ReplaceValue</code>에 사용할 수 있습니다.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "문자열 \"hEllo world\"에서 텍스트 \"hE\"를 \"He\"로 바꿉니다.",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "지정된 입력 내의 값을 바꿉니다.",
        "Documentation.LongDescription": "원래 <code>value</code>의 <code>old</code> 값을 <code>new</code> 값으로 바꿉니다. 이 치환 함수는 <code>List.ReplaceValue</code> 및 <code>Table.ReplaceValue</code>에 사용할 수 있습니다.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "값 11을 값 10으로 바꿉니다.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Smartsheet API의 JSON 결과를 반환합니다.",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "지정한 엔드포인트에서 Smartsheet 2.0 REST API를 호출하고 JSON 레코드로 결과를 반환합니다.",
        "Documentation.Examples": [
          {
            "Description": "추가 인수가 있는 Smartsheet API 엔드포인트가 지정된 시트에서 데이터를 가져옵니다.",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Smartsheet API에서 반환된 시트 정보가 있는 테이블"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "인수를 분할하지 않고 단일 요소 목록으로 반환하는 함수를 반환합니다.",
        "Documentation.LongDescription": "인수를 분할하지 않고 단일 요소 목록으로 반환하는 함수를 반환합니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "공백에서 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.LongDescription": "공백에서 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "공백 문자로 입력을 분할하고 다른 문자처럼 따옴표를 처리합니다.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "그룹 수와 지정된 열에 따라 테이블을 테이블 목록으로 분할합니다.",
        "Documentation.LongDescription": "<code>column</code>의 값과 <code>hash</code> 함수에 따라 <code>table</code>을(를) <code>groups</code>개의 테이블을 포함하는 목록으로 분할합니다.\r\n    <code>hash</code> 함수는 행에 대한 해시 값을 가져오기 위해 <code>column</code> 행의 값에 적용됩니다. 해시 값 모듈 <code>groups</code>은(는) 반환되는 테이블 중 해당 행이 배치되는 테이블을 확인합니다.\r\n    <ul>\r\n       <li><code>table</code>: 분할할 테이블입니다.</li>\r\n       <li><code>column</code>: 반환되는 테이블 중 해당 행이 배치되는 테이블을 확인하기 위해 해시할 열입니다.</li>\r\n       <li><code>groups</code>: 입력 테이블을 분할할 테이블 수입니다.</li>\r\n       <li><code>hash</code>: 해시 값을 가져오기 위해 적용되는 함수입니다.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 테이블을 [a] 열에 따라 두 테이블로 분할합니다. 이때 열의 값을 해시 함수로 사용합니다.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "지정한 <code>startDelimiter</code>과(와) <code>endDelimiter</code> 사이의 <code>text</code> 부분을 반환합니다.\r\n    선택적 숫자 <code>startIndex</code>은(는) 고려해야 하는 <code>startDelimiter</code>을(를) 나타냅니다.\r\n    선택적 목록 <code>startIndex</code>은(는) 고려해야 하는 <code>startDelimiter</code>과(와) 인덱싱을 입력의 처음부터 실행해야 하는지, 아니면 끝부터 실행해야 하는지를 나타냅니다.\r\n    <code>endIndex</code>은(는) 인덱싱이 <code>startIndex</code>을(를) 기준으로 실행된다는 점을 제외하고 비슷합니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "(첫 번째) 여는 괄호와 이후에 오는 (첫 번째) 닫는 괄호 사이의 \"111 (222) 333 (444)\" 부분을 가져옵니다.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "두 번째 여는 괄호와 이후에 오는 첫 번째 닫는 괄호 사이의 \"111 (222) 333 (444)\" 부분을 가져옵니다.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "끝에서 두 번째 여는 괄호와 이후에 오는 두 번째 닫는 괄호 사이의 \"111 (222) 333 (444)\" 부분을 가져옵니다.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "다른 텍스트 값의 지정된 위치에 텍스트 값을 삽입합니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>의 위치 <code>offset</code>에 텍스트 값 <code>newText</code>을(를) 삽입한 결과를 반환합니다. 시작 위치는 숫자 0입니다.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "\"ABD\"의 \"B\"와 \"D\" 사이에 \"C\"를 삽입합니다.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "새로운 임의 GUID(Globally Unique Identifier)를 반환합니다.",
        "Documentation.LongDescription": "새로운 임의 GUID(Globally Unique Identifier)를 반환합니다.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "텍스트에서 지정된 하위 문자열이 있으면 모두 바꿉니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>에서 모든 텍스트 값 <code>old</code>을(를) 텍스트 값 <code>new</code>(으)로 바꾼 결과를 반환합니다. 이 함수는 대/소문자를 구분합니다.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "문장에서 모든 \"the\"를 \"a\"로 바꿉니다.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "특정 범위의 문자를 제거하고 지정된 위치에 새 값을 삽입합니다.",
        "Documentation.LongDescription": "위치 <code>offset</code>에서 시작하여 텍스트 값 <code>text</code>에서 여러 문자 <code>count</code>을(를) 제거한 다음 <code>text</code>의 같은 위치에 텍스트 값 <code>newText</code>을(를) 삽입한 결과를 반환합니다.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "텍스트 값 \"ABGF\"의 위치 2에 있는 단일 문자를 새 텍스트 값 \"CDE\"로 바꿉니다.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "지정된 테이블 형식에 키를 추가합니다.",
        "Documentation.LongDescription": "지정된 테이블 형식에 키를 추가합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "조건에 따라 허용되는 ID 목록을 반환합니다.",
        "Documentation.LongDescription": "<p>지정한 <code>identityProvider</code>을(를) 사용하여 <code>condition</code>을(를) ID 목록으로 변환합니다. 이 경우 <code>condition</code>은(는) ID 공급자가 <code>identityProvider</code>인 모든 권한 부여 컨텍스트에서 <code>true</code>를 반환합니다. <code>condition</code>이(가) 사용자 또는 그룹 ID 이외의 특성을 참조하여 의사결정을 내리는 경우처럼 <code>condition</code>을(를) ID 목록으로 변환할 수 없으면 오류가 발생합니다.</p>\r\n    <p>ID 목록이 ID를 나타내는 이유는 <code>condition</code>에 나타나고 목록에 대해 정규화(예: 그룹 확장)가 수행되지 않기 때문입니다.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "이 기능은 내부용입니다.",
        "Documentation.LongDescription": "이 기능은 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "제공된 압축 형식을 사용하여 이진 값의 압축을 풉니다.",
        "Documentation.LongDescription": "제공된 압축 형식을 사용하여 이진 값을 압축합니다. 이 호출을 수행하면 입력 항목의 압축된 복사본이 생성됩니다. 압축 형식은 다음과 같습니다.\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "이진 값을 압축합니다.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "제공된 압축 유형을 사용해서 이진 값의 압축을 풉니다.",
        "Documentation.LongDescription": "제공된 압축 유형을 사용해서 이진 값의 압축을 풉니다.  이 호출을 수행하면 입력 항목의 압축이 풀립니다. 압축 유형은 다음과 같습니다.\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "이진 값의 압축을 풉니다.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "오프셋에서 시작하는 이진 값의 하위 집합을 반환합니다.",
        "Documentation.LongDescription": "오프셋 <code>binary</code>에서 시작하는 이진 값의 하위 집합을 반환합니다. 선택적 매개 변수 <code>offset</code>은(는) 하위 집합의 최대 길이를 설정합니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "오프셋 6에서 시작하는 이진 값의 하위 집합을 반환합니다.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "이진 값의 오프셋 6에서 길이 2의 하위 집합을 반환합니다.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "지정한 페이지 크기를 사용하여 지정한 이진 값을 이진 값 목록으로 분할합니다.",
        "Documentation.LongDescription": "<code>binary</code>을(를) 이진 값 목록으로 분할합니다. 이때 출력 목록의 첫 번째 요소는 원본 이진 값의 첫 <code>pageSize</code>바이트를 포함하는 이진 값이고\r\n    출력 목록의 다음 요소는 원본 이진 값의 다음 <code>pageSize</code>바이트를 포함하는 이진 값이며, 같은 방식으로 이어집니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "쿼리 및 작업 작동에 대해 사용자 정의 처리기로 이진 파일을 만들거나 확장합니다.",
        "Documentation.LongDescription": "<p>작업이 보기에 적용되면 작업의 기본 동작 대신 <code>handlers</code>에 지정된 함수를 사용하는 <code>binary</code>의 보기를 반환합니다.</p>\r\n<p><code>binary</code>이(가) 제공되는 경우 모든 처리기 기능은 선택 사항입니다. <code>binary</code>이(가) 제공되지 않으면 <code>GetStream</code> 처리기 함수가 필요합니다. 작업에 대해 처리기 함수가 지정되지 않은 경우 작업의 기본 동작이 대신 <code>binary</code>에 적용됩니다(<code>GetExpression</code>의 경우 제외).</p>\r\n<p>처리기 함수는 <code>binary</code>에 대해 작업을 적용한 결과와 의미상 동일한 값을 반환해야 합니다(또는 <code>GetExpression</code> 경우의 결과 보기).</p>\r\n<p>처리기 함수에서 오류가 발생하면 작업의 기본 동작이 보기에 적용됩니다.</p>\r\n<p><code>Binary.View</code>는 접기를 데이터 원본에 구현, 즉 M 쿼리를 원본별 작업으로 변환하는 데 사용될 수 있습니다(예: 파일의 섹션을 다운로드하는 경우).</p>\r\n<p><code>Binary.View</code>에 대한 보다 완벽한 설명을 보려면 게시된 Power Query 사용자 지정 커넥터 문서를 참조하세요.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "길이를 결정하기 위해 데이터에 액세스할 필요가 없는 기본 보기를 만듭니다.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "함수에 지정된 바이트 순서로 이진 형식을 반환합니다.",
        "Documentation.LongDescription": "<code>binaryFormat</code>에 지정된 바이트 순서로 이진 형식을 반환합니다. 기본 바이트 순서는 <code>ByteOrder.BigEndian</code>입니다.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "이미 읽은 값에 따라 다음 이진 형식을 선택하는 이진 형식을 반환합니다.",
        "Documentation.LongDescription": "이미 읽은 값에 따라 다음 이진 형식을 선택하는 이진 형식을 반환합니다. 이 함수로 생성되는 이진 형식 값은 다음과 같은 단계로 사용됩니다.<ul>\r\n<li><code>binaryFormat</code> 매개 변수로 지정된 이진 형식을 사용하여 값을 읽습니다.</li>\r\n<li>이 값을 <code>chooseFunction</code> 매개 변수로 지정된 선택 함수에 전달합니다.</li>\r\n<li>선택 함수가 값을 검사하고 두 번째 이진 형식을 반환합니다.</li>\r\n<li>두 번째 이진 형식을 사용하여 두 번째 값을 읽습니다.</li>\r\n<li>조합 함수가 지정된 경우 첫 번째 값과 두 번째 값을 조합 함수에 전달하고 결과 값을 반환합니다.</li>\r\n<li>조합 함수가 지정되지 않은 경우에는 두 번째 값을 반환합니다.</li>\r\n<li>두 번째 값을 반환합니다.</li>\r\n</ul>선택적 <code>type</code> 매개 변수는 선택 함수에 의해 반환되는 이진 형식의 유형을 나타냅니다. <code>type any</code>, <code>type list</code> 또는 <code>type binary</code>를 지정할 수 있으며, <code>type</code> 매개 변수를 지정하지 않으면 <code>type any</code>가 사용됩니다. <code>type list</code> 또는 <code>type binary</code>를 사용할 경우에는 시스템이 버퍼링된 값 대신 스트리밍 <code>binary</code> 또는 <code>list</code> 값을 반환할 수 있습니다. 이 경우 형식을 읽는 데 필요한 메모리 양이 줄어들 수 있습니다.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "첫 번째 바이트로 요소 수가 결정되는 바이트 목록을 읽습니다.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "첫 번째 바이트로 요소 수가 결정되는 바이트 목록을 읽고 읽은 첫 번째 바이트를 유지합니다.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "스트리밍 목록을 사용하여 첫 번째 바이트로 요소 수가 결정되는 바이트 목록을 읽습니다.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "항목 그룹을 읽는 이진 형식을 반환합니다.",
        "Documentation.LongDescription": "매개 변수는 다음과 같습니다.\r\n<ul>\r\n<li><code>binaryFormat</code> 매개 변수는 키 값의 이진 형식을 지정합니다.</li>\r\n<li><code>group</code> 매개 변수는 알려진 항목의 그룹에 대한 정보를 제공합니다.</li>\r\n<li>선택적 <code>extra</code> 매개 변수는 예기치 않은 키 다음의 값으로 이진 형식 값을 반환하는 함수를 지정하는 데 사용할 수 있습니다. <code>extra</code> 매개 변수가 지정되지 않은 경우 예기치 않은 키 값이 있으면 오류가 발생합니다.</li>\r\n</ul>\r\n<code>group</code> 매개 변수는 항목 정의의 목록을 지정합니다. 각 항목 정의는 다음과 같이 3~5개의 값을 포함하는 목록입니다.\r\n<ul>\r\n<li>키 값. 항목에 해당하는 키의 값입니다. 키 값은 항목 집합 내에서 고유해야 합니다.</li>\r\n<li>항목 형식. 항목의 값에 해당하는 이진 형식입니다. 항목 형식을 사용하여 각 항목에 서로 다른 형식을 지정할 수 있습니다. </li>\r\n<li>항목 발생. 항목이 그룹에 나타나야 하는 횟수에 해당하는 <code>BinaryOccurrence.Type</code> 값입니다. 필수 항목이 나타나지 않으면 오류가 발생합니다. 중복 필수 또는 선택적 항목은 예기치 않은 키 값처럼 처리됩니다.</li>\r\n<li>기본 항목 값(옵션). 기본 항목 값이 항목 정의 목록에 있고 Null이 아닌 경우 기본값 대신 기본 항목 값이 사용됩니다. 반복 또는 선택적 항목의 기본값은 Null이며, 반복 값의 기본값은 빈 목록 { }입니다.</li>\r\n<li>항목 값 변환(옵션). 항목 값 변환 함수가 항목 정의 목록에 있고 Null이 아닌 경우 항목 값이 반환되기 전에 이 함수가 호출되어 항목 값을 변환합니다. 변환 함수는 입력에 항목이 나타나는 경우에만 호출됩니다(기본값으로는 호출되지 않음). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "아래에서는 키 값이 단일 바이트이고, 그룹의 예상 항목 수가 4개이며, 모든 항목에서 키 다음에 데이터 바이트가 있다고 가정합니다. 항목은 입력에 다음과 같이 나타납니다.\r\n<ul>\r\n<li>키 1은 필수이며 값 11과 함께 나타납니다.</li>\r\n<li>키 2는 값 22와 함께 반복적으로 두 번 나타나므로 결과 값이 { 22, 22 }가 됩니다.</li>\r\n<li>키 3은 선택적으로, 나타나지 않으므로 결과 값이 Null이 됩니다.</li>\r\n<li>키 4는 반복적이지만 나타나지 않으므로 결과 값이 { }가 됩니다.</li>\r\n<li>키 5는 그룹의 일부가 아니지만 값 55와 함께 한 번 나타납니다. 추가 함수는 키 값 5를 사용하여 호출되며 해당 값(BinaryFormat.Byte)에 해당하는 형식을 반환합니다. 값 55는 읽은 후 삭제됩니다.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "다음 예에서는 항목 값 변환과 기본 항목 값을 보여 줍니다. 키 1의 반복 항목은 List.Sum을 사용하여 읽은 값 목록의 합계를 계산합니다. 키 2의 선택적 항목에는 Null 대신 기본값 123이 사용됩니다.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "읽을 수 있는 데이터의 양을 제한하는 이진 형식을 반환합니다.",
        "Documentation.LongDescription": "읽을 수 있는 데이터의 양을 제한하는 이진 형식을 반환합니다. <code>BinaryFormat.List</code> 및 <code>BinaryFormat.Binary</code>는 모두 데이터를 끝까지 읽는 데 사용할 수 있습니다. <code>BinaryFormat.Length</code>는 읽는 바이트의 수를 제한하는 데 사용할 수 있습니다. <code>binaryFormat</code> 매개 변수는 제한할 이진 형식을 지정합니다. <code>length</code> 매개 변수는 읽을 바이트 수를 지정합니다. <code>length</code> 매개 변수는 숫자 값이거나, 읽을 값 앞에 오는 길이 값의 형식을 지정하는 이진 형식 값일 수 있습니다.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "바이트 목록을 읽을 때 읽을 바이트 수를 2로 제한합니다.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "바이트 목록을 읽을 때 읽을 바이트 수를 목록 앞에 오는 바이트 값으로 제한합니다.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "다른 이진 형식으로 읽은 값을 변환하는 이진 형식을 반환합니다.",
        "Documentation.LongDescription": "다른 이진 형식으로 읽은 값을 변환하는 이진 형식을 반환합니다. <code>binaryFormat</code> 매개 변수는 값을 읽는 데 사용되는 이진 형식을 지정합니다. <code>function</code>은(는) 읽은 값에 대해 호출되어 변환된 값을 반환합니다.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "바이트를 읽고 해당 바이트에 1을 더합니다.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "서수 규칙을 사용하여 값을 비교하는 비교자 함수를 반환합니다.",
        "Documentation.LongDescription": "서수 규칙을 사용하여 제공된 값 <code>x</code> 및 <code>y</code>을(를) 비교하는 비교자 함수를 반환합니다.<br>\r\n       <br>\r\n       비교자 함수는 두 개의 인수를 받아들이고 첫 번째 값이 두 번째 값보다 작은지, 같은지, 큰지에 따라 -1, 0 또는 1을 반환합니다.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "서수 규칙을 사용하여 \"encyclopædia\"와 \"encyclopaedia\"가 같은지 확인합니다. 이 두 값이 같은지 확인할 때 <code>Comparer.FromCulture(\"en-US\")</code>를 사용합니다. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "서수 규칙을 사용하여 값을 비교하는 대/소문자 비구분 비교자 함수를 반환합니다.",
        "Documentation.LongDescription": "제공된 값 <code>x</code> 및 <code>y</code>을(를) 비교하기 위해 서수 규칙을 사용하는 대소문자를 구분하지 않는 비교자 함수를 반환합니다.<br>\r\n         <br>\r\n         비교자 함수는 두 개의 인수를 받아들이고 첫 번째 값이 두 번째 값보다 작은지, 같은지, 큰지에 따라 -1, 0 또는 1을 반환합니다.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "대/소문자 비구분 서수 규칙을 사용하여 \"Abc\"와 \"abc\"를 비교합니다. <code>Comparer.Ordinal</code>을 사용하는 경우 \"Abc\"가 \"abc\"보다 작습니다. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "차원 특성의 속성을 반환합니다.",
        "Documentation.LongDescription": "차원 특성 <code>attribute</code>의 속성 <code>propertyName</code>을(를) 반환합니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "측정값(셀 속성)의 속성을 반환합니다.",
        "Documentation.LongDescription": "측정값 <code>measure</code>의 속성 <code>propertyName</code>을(를) 반환합니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL 쿼리 원본",
        "Documentation.LongDescription": "SQL 쿼리를 실행하기 위한 Databricks 데이터 원본 정의"
      },
      "ReturnType": "Databricks SQL 쿼리",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL 쿼리 원본",
        "Documentation.LongDescription": "SQL 쿼리를 실행하기 위한 Databricks 데이터 원본 정의"
      },
      "ReturnType": "Databricks SQL 쿼리",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "날짜에 지정된 일 수를 더합니다.",
        "Documentation.LongDescription": "<code>datetime</code> 값 <code>dateTime</code>에 <code>numberOfDays</code>일을 더해 얻은 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 결과를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 일 수를 더할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>numberOfDays</code>: 더할 일 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "날짜 2011년 5월 14일을 나타내는 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값에 5일을 더합니다.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "날짜에 지정된 개월 수를 더합니다.",
        "Documentation.LongDescription": "<code>datetime</code> 값 <code>dateTime</code>에 <code>numberOfMonths</code>개월을 더해 얻은 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 결과를 반환합니다.\r\n      <ul>\r\n        <li><code>dateTime</code>: 개월 수를 더할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n        <li><code>numberOfMonths</code>: 더할 개월 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "날짜 2011년 5월 14일을 나타내는 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값에 5개월을 더합니다.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "2011년 5월 14일 오전 08:15:22의 날짜 및 시간을 나타내는 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값에 18개월을 더합니다.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "날짜에 지정된 분기 수를 더합니다.",
        "Documentation.LongDescription": "<code>datetime</code> 값 <code>dateTime</code>에 <code>numberOfQuarters</code>분기를 더해 얻은 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 결과를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 분기 수를 더할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>numberOfQuarters</code>: 더할 분기 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "날짜 2011년 5월 14일을 나타내는 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값에 1분기를 더합니다.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "날짜에 지정된 주 수를 더합니다.",
        "Documentation.LongDescription": "<code>datetime</code> 값 <code>dateTime</code>에 <code>numberOfWeeks</code>주를 더해 얻은 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 결과를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 주 수를 더할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>numberOfWeeks</code>: 더할 주 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "날짜 2011년 5월 14일을 나타내는 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값에 2주를 더합니다.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "날짜에 지정된 연 수를 더합니다.",
        "Documentation.LongDescription": "<code>datetime</code> 값 <code>dateTime</code>에 <code>numberOfYears</code>년을 더해 얻은 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 결과를 반환합니다.\r\n      <ul>\r\n        <li><code>dateTime</code>: 연 수를 더할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n        <li><code>numberOfYears</code>: 더할 연 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "날짜 2011년 5월 14일을 나타내는 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값에 4년을 더합니다.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "2011년 5월 14일 오전 08:15:22의 날짜 및 시간을 나타내는 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값에 10년을 더합니다.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 며칠 이내에 속하는지 여부를 나타냅니다. 현재 날짜에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 며칠 이내에 속하는지 여부를 나타냅니다. 현재 날짜에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>days</code>: 일수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 일이 향후 2일 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 몇 개월 이내에 속하는지 여부를 나타냅니다. 현재 월에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 몇 개월 이내에 속하는지 여부를 나타냅니다. 현재 월에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>months</code>: 개월 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 월이 향후 2개월 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 몇 분기 이내에 속하는지 여부를 나타냅니다. 현재 분기에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 몇 분기 이내에 속하는지 여부를 나타냅니다. 현재 분기에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>quarters</code>: 분기 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 분기가 향후 2분기 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 주 이내에 속하는지 여부를 나타냅니다. 현재 주에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 몇 주 이내에 속하는지 여부를 나타냅니다. 현재 주에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>weeks</code>: 주 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 주가 향후 2주 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 몇 년 이내에 속하는지 여부를 나타냅니다. 현재 연도에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 몇 년 이내에 속하는지 여부를 나타냅니다. 현재 연도에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>years</code>: 년도 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 년도가 향후 2년 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 며칠 이내에 속하는지 여부를 나타냅니다. 현재 날짜에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 며칠 이내에 속하는지 여부를 나타냅니다. 현재 날짜에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>days</code>: 일수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 일이 이전 2일 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 몇 개월 이내에 속하는지 여부를 나타냅니다. 현재 월에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 몇 개월 이내에 속하는지 여부를 나타냅니다. 현재 월에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>months</code>: 개월 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 월이 이전 2개월 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 몇 분기 이내에 속하는지 여부를 나타냅니다. 현재 분기에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 몇 분기 이내에 속하는지 여부를 나타냅니다. 현재 분기에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>quarters</code>: 분기 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 분기가 이전 2분기 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 몇 주 이내에 속하는지 여부를 나타냅니다. 현재 주에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 몇 주 이내에 속하는지 여부를 나타냅니다. 현재 주에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>weeks</code>: 주 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 주가 이전 2주 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 몇 년 이내에 속하는지 여부를 나타냅니다. 현재 연도에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 몇 년 이내에 속하는지 여부를 나타냅니다. 현재 연도에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>years</code>: 년도 수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 년도가 이전 2년 이내에 있는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "날짜/시간 값에 표준 시간대 정보를 추가합니다.",
        "Documentation.LongDescription": "<code>dateTime</code> 값에 표준 시간대 정보를 추가합니다. 표준 시간대 정보에는 UTC 시간에서 원하는 오프셋을 지정하는 <code>timezoneHours</code>이(가) 포함되며 택적으로 <code>timezoneMinutes</code>이(가) 포함됩니다.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "표준 시간대를 UTC+7:30(UTC 이후 7시간 30분)으로 설정합니다.",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 다음 몇 시간 이내에 속하는지 여부를 나타냅니다. 현재 시간에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 몇 시간 이내에 속하는지 여부를 나타냅니다. 현재 시간에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>hours</code>: 몇 시간인지 나타내는 수.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 시간이 향후 2시간 이내에 있는지 여부를 확인합니다.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 다음 몇 분 이내에 속하는지 여부를 나타냅니다. 현재 분에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 몇 분 이내에 속하는지 여부를 나타냅니다. 현재 분에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>minutes</code>: 몇 분인지 나타내는 수.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 분이 향후 2분 이내에 있는지 여부를 확인합니다.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 다음 몇 초 이내에 속하는지 여부를 나타냅니다. 현재 초에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 몇 초 이내에 속하는지 여부를 나타냅니다. 현재 초에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>seconds</code>: 몇 초인지 나타내는 수.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 초가 향후 2초 이내에 있는지 여부를 확인합니다.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 다음 주에 속하는지 여부를 나타냅니다. 현재 주에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 몇 시간 이내에 속하는지 여부를 나타냅니다. 현재 시간에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>hours</code>: 몇 시간인지 나타내는 수.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 시간이 이전 2시간 이내에 있는지 여부를 확인합니다.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 이전 몇 분 이내에 속하는지 여부를 나타냅니다. 현재 분에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 몇 분 이내에 속하는지 여부를 나타냅니다. 현재 분에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>minutes</code>: 몇 분인지 나타내는 수.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 분이 이전 2분 이내에 있는지 여부를 확인합니다.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 이전 몇 초 이내에 속하는지 여부를 나타냅니다. 현재 초에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 몇 초 이내에 속하는지 여부를 나타냅니다. 현재 초에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      <li><code>seconds</code>: 몇 초인지 나타내는 수.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 초가 이전 2초 이내에 있는지 여부를 확인합니다.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "값의 표준 시간대를 변경합니다.",
        "Documentation.LongDescription": "datetimezone 값 <code>dateTimeZone</code>의 표준 시간대 정보를 <code>timezoneHours</code> 및 선택적 <code>timezoneMinutes</code>에 의해 제공되는 새 표준 시간대 정보로 변경합니다.\r\n    <code>dateTimeZone</code>에 표준 시간대 구성 요소가 없으면 예외가 발생합니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30)의 표준 시간대 정보를 8시간으로 변경합니다.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30)의 표준 시간대 정보를 -30분으로 변경합니다.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "포함된 매시업의 값에 이름으로 액세스합니다.",
        "Documentation.LongDescription": "포함된 매시업의 값에 이름으로 액세스합니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "단일 목록 인수를 사용하는 함수 위에 특정 매개 변수 서명으로 함수를 만듭니다.",
        "Documentation.LongDescription": "단항 함수 <code>function</code>을(를) 사용하고, 해당 인수에서 목록을 생성하여 <code>function</code>에 전달하는 <code>functionType</code> 유형의 새 함수를 만듭니다.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "해당 인수를 모두 더하며 인수가 두 개인 함수로 List.Sum을 변환합니다.",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "목록을 사용하는 함수를 인수가 두 개인 함수로 변환합니다.",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "지정된 함수를 호출합니다.",
        "Documentation.LongDescription": "지정된 인수 목록을 사용하여 지정된 함수를 호출하고 결과를 반환합니다.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "하나의 인수 [A=1,B=2]를 사용하여 Record.FieldNames를 호출합니다.",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "지정된 기간이 지난 후 지정된 함수를 호출합니다.",
        "Documentation.LongDescription": "<code>delay</code> 기간이 지난 후 <code>function</code>을(를) 호출한 결과를 반환합니다.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "이 기능은 내부용입니다.",
        "Documentation.LongDescription": "이 기능은 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "벡터 함수 위에 스칼라 함수를 만들어 다중 호출을 일괄 처리합니다.",
        "Documentation.LongDescription": "<p>단일 인수 행과 <code>vectorFunction</code>을(를) 함께 호출하고 단일 출력을 반환하는 <code>scalarFunctionType</code> 유형의 스칼라 함수를 반환합니다. 또한 Table.AddColumn에서처럼 입력 테이블의 각 행에 대해 스칼라 함수가 반복해서 적용되는 경우 대신 모든 입력에 대해 <code>vectorFunction</code>이(가) 한 번만 적용됩니다.</p>\r\n<p><code>vectorFunction</code>은(는) 해당 열이 이름이 일치하고 <code>scalarFunctionType</code>의 매개 변수를 배치하는 테이블에 전달됩니다. 이 테이블의 각 행에는 스칼라 함수의 1회 호출에 대한 인수와 함께 <code>scalarFunctionType</code>의 매개 변수에 해당하는 열이 포함되어 있습니다.</p>\r\n<p><code>vectorFunction</code>은(는) 입력 테이블과 길이가 동일한 목록을 반환해야 하며, 각 위치에 있는 해당 테이블의 항목은 동일한 위치의 입력 행에서 스칼라 함수를 평가한 결과와 같아야 합니다.</p>\r\n<p>입력 테이블은 스트리밍해야 하므로 <code>vectorFunction</code>은(는) 입력이 들어올 때 해당 출력을 스트리밍하여 한 번에 하나의 입력 청크와만 작동해야 합니다. 특히, <code>vectorFunction</code>은(는) 입력 테이블을 두 번 이상 열거해서는 안 됩니다.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "파트에서 지리적 지점을 나타내는 레코드를 만듭니다.",
        "Documentation.LongDescription": "경도, 위도 그리고 표고(Z) 및 측정값(M)(있는 경우) 등 해당 구성 파트에서 지리적 지점을 나타내는 레코드를 만듭니다. 선택적 SRID(공간 참조 식별자)는 기본값(4326)과 다른 경우에 지정할 수 있습니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "파트에서 기하학적 지점을 나타내는 레코드를 만듭니다.",
        "Documentation.LongDescription": "X 좌표, Y 좌표 그리고 Z 좌표 및 측정값(M)(있는 경우) 등 해당 구성 파트에서 기하학적 지점을 나타내는 레코드를 만듭니다. 선택적 SRID(공간 참조 식별자)는 기본값(0)과 다른 경우에 지정할 수 있습니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "ID를 만듭니다.",
        "Documentation.LongDescription": "ID를 만듭니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "ID가 ID 컬렉션에 속해 있는지 여부를 결정합니다.",
        "Documentation.LongDescription": "ID가 ID 컬렉션에 속해 있는지 여부를 결정합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "목록의 모든 홀수 오프셋 요소로 구성된 목록을 반환합니다.",
        "Documentation.LongDescription": "목록의 모든 홀수 오프셋 요소로 구성된 목록을 반환합니다. <code>list</code> 목록에서 가져올 값과 건너뛸 값은 매개 변수에 따라 결정됩니다.\r\n    <ul>\r\n    <li><code>count</code>: 매번 건너뛸 값의 수를 지정합니다.</li>\r\n    <li><code>repeatInterval</code>: 건너뛰는 값 사이에서 추가할 값의 수를 나타내는 선택적 반복 간격입니다.</li>\r\n    <li><code>offset</code>: 초기 오프셋에서 값을 건너뛰기 시작할 위치를 나타내는 선택적 오프셋 매개 변수입니다.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1..10}에서 첫 번째 숫자를 건너뛴 목록을 만듭니다.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "{1..10}에서 하나 걸러 하나씩 숫자를 건너뛴 목록을 만듭니다.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "{1..10}에서 1부터 시작하여 하나 걸러 하나씩 숫자를 건너뛴 목록을 만듭니다.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "{1..10}에서 1부터 시작하여 교대로 한 개의 값을 건너뛴 후 두 개의 값을 가져오는 목록을 만듭니다.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "목록에 값이 포함되어 있는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 <code>value</code> 값이 포함되어 있는지 여부를 나타냅니다.\r\n    목록에 값이 있으면 true를 반환하고, 그렇지 않으면 false를 반환합니다. 선택적 수식 조건 값인 <code>equationCriteria</code>을(를) 지정하여 같음 테스트를 제어할 수 있습니다. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} 목록에 3이 포함되어 있는지 확인합니다.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 4, 5} 목록에 6이 포함되어 있는지 확인합니다.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "목록에 다른 목록의 모든 값이 포함되어 있는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 다른 목록 <code>values</code>의 모든 값이 포함되어 있는지 여부를 나타냅니다.\r\n    목록에 값이 있으면 true를 반환하고, 그렇지 않으면 false를 반환합니다. 선택적 수식 조건 값인 <code>equationCriteria</code>을(를) 지정하여 같음 테스트를 제어할 수 있습니다. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} 목록에 3과 4가 포함되어 있는지 확인합니다.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 4, 5} 목록에 5와 6이 포함되어 있는지 확인합니다.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "목록에 다른 목록의 값이 하나라도 포함되어 있는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 다른 목록 <code>values</code>의 값이 하나라도 포함되어 있는지 여부를 나타냅니다.\r\n        목록에 값이 있으면 true를 반환하고, 그렇지 않으면 false를 반환합니다. 선택적 수식 조건 값인 <code>equationCriteria</code>을(를) 지정하여 같음 테스트를 제어할 수 있습니다. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} 목록에 3 또는 9가 포함되어 있는지 확인합니다.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 4, 5} 목록에 6 또는 7이 포함되어 있는지 확인합니다.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "두 숫자 목록 간의 공 분산을 반환합니다.",
        "Documentation.LongDescription": "두 목록 <code>numberList1</code>과(와) <code>numberList2</code> 간의 공 분산을 반환합니다. <code>numberList1</code>과(와) <code>numberList2</code>에 동일한 수의 <code>number</code> 값이 포함되어 있어야 합니다.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "두 목록 간의 공 분산을 계산합니다.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "지정된 두 목록의 차이를 반환합니다.",
        "Documentation.LongDescription": "<code>list1</code> 목록의 항목 중 <code>list2</code> 목록에 나타나지 않는 항목을 반환합니다. 중복 값은 지원되지 않습니다.\r\n    선택적 수식 조건 값인 <code>equationCriteria</code>을(를) 지정하여 같음 테스트를 제어할 수 있습니다. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} 목록의 항목 중 {4, 5, 3} 목록에 나타나지 않는 항목을 찾습니다.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "{1, 2} 목록의 항목 중 {1, 2, 3} 목록에 나타나지 않는 항목을 찾습니다.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "지정된 텍스트가 포함된 값(레코드 필드 포함)의 목록을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에서 <code>text</code> 값이 포함된 값으로 구성된 목록을 반환합니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{\"a\", \"b\", \"ab\"} 목록에서 \"a\"와 일치하는 텍스트 값을 찾습니다. ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "반환할 항목 수나 한정 조건을 지정하여 목록의 처음 몇 개 항목으로 구성된 집합을 반환합니다.",
        "Documentation.LongDescription": " <ul>\r\n  <li>항목 수가 지정된 경우 해당 개수까지의 항목이 반환됩니다. </li>\r\n  <li>조건이 지정된 경우 처음부터 시작해서 해당 조건을 충족하는 모든 항목이 반환됩니다. 한 항목에서 조건이 충족되지 않으면 이후 항목은 더 이상 고려되지 않습니다. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{3, 4, 5, -1, 7, 8, 2} 목록에서 0보다 큰 초기 값을 찾습니다.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "목록의 모든 값이 조건 함수를 충족하는 경우 true를 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 모든 값이 조건 함수 <code>condition</code>을(를) 충족하면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{11, 12, 13} 목록의 모든 값이 10보다 큰지 여부를 확인합니다.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3} 목록의 모든 값이 10보다 큰지 여부를 확인합니다.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "목록에 조건 함수를 충족하는 값이 하나라도 있는 경우 true를 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 조건 함수 <code>condition</code>을(를) 충족하는 값이 하나라도 있으면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{9, 10, 11} 목록에 10보다 큰 값이 하나라도 있는지 확인합니다.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3} 목록에 10보다 큰 값이 하나라도 있는지 확인합니다.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "목록의 최대값을 반환합니다. 반환할 값의 수나 필터링 조건을 지정해야 합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 최대값을 반환합니다.\r\n    행을 정렬한 후에 선택적 매개 변수를 지정하여 결과를 추가적으로 필터링할 수 있습니다. 선택적 매개 변수 <code>countOrCondition</code>은(는) 반환할 값의 수나 필터링 조건을 지정합니다. 선택적 매개 변수 <code>comparisonCriteria</code>은(는) 목록의 값을 비교할 방법을 지정합니다.\r\n <ul>\r\n        <li> <code>list</code>: 값 목록입니다.</li>\r\n        <li> <code>countOrCondition</code>: 숫자가 지정된 경우 최대 <code>countOrCondition</code>개의 항목이 오름차순으로 포함된 목록이 반환됩니다. 조건이 지정된 경우에는 처음부터 시작해서 해당 조건을 충족하는 항목의 목록이 반환됩니다. 한 항목에서 조건이 충족되지 않으면 이후 항목은 더 이상 고려되지 않습니다.</li>\r\n<li><code>comparisonCriteria</code>: <i>[옵션]</i> 선택적 <code>comparisonCriteria</code> 값을 지정하여 목록의 항목을 비교할 방법을 결정할 수 있습니다. 이 매개 변수가 Null이면 기본 비교자가 사용됩니다.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "목록의 최소값을 반환합니다. 반환할 값의 수나 필터링 조건을 지정할 수 있습니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 최소값을 반환합니다.\r\n    <code>countOrCondition</code> 매개 변수는 반환할 값의 수나 필터링 조건을 지정합니다. 선택적 매개 변수 <code>comparisonCriteria</code>은(는) 목록의 값을 비교할 방법을 지정합니다.\r\n <ul>\r\n        <li> <code>list</code>: 값 목록입니다.</li>\r\n        <li> <code>countOrCondition</code>: 숫자가 지정된 경우 최대 <code>countOrCondition</code>개의 항목이 오름차순으로 포함된 목록이 반환됩니다. 조건이 지정된 경우에는 처음부터 시작해서 해당 조건을 충족하는 항목의 목록이 반환됩니다. 한 항목에서 조건이 충족되지 않으면 이후 항목은 더 이상 고려되지 않습니다. 이 매개 변수가 Null이면 목록에서 가장 작은 단일 값이 반환됩니다.</li>\r\n<li><code>comparisonCriteria</code>: <i>[옵션]</i> 선택적 <code>comparisonCriteria</code> 값을 지정하여 목록의 항목을 비교할 방법을 결정할 수 있습니다. 이 매개 변수가 Null이면 기본 비교자가 사용됩니다.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>{3, 4, 5, -1, 7, 8, 2}</code> 목록에서 가장 작은 5개의 값을 찾습니다.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "지정된 초기 값, 개수 및 선택적 증분 값을 사용하여 숫자의 목록을 반환합니다.",
        "Documentation.LongDescription": "지정된 초기 값, 개수 및 선택적 증분 값을 사용하여 숫자의 목록을 반환합니다. 기본 증분 값은 1입니다.\r\n<ul>\r\n   <li><code>start</code>: 목록의 초기 값입니다.</li>\r\n   <li><code>count</code>: 만들 값의 수입니다.</li>\r\n   <li><code>increment</code>: <i>[옵션]</i> 증분 단위 값입니다. 생략할 경우 값이 1씩 증가합니다.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "1에서 시작하여 연속 10개의 숫자가 포함된 목록을 생성합니다.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "1에서 시작하여 각 후속 숫자마다 2씩 증가하는 10개의 숫자가 포함된 목록을 생성합니다.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "지정된 확률에 해당하는 하나 이상의 샘플 백분위수를 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 샘플 백분위수를 하나 이상 반환합니다. <code>percentiles</code> 값이 0.0에서 1.0 사이의 숫자이면 백분위수로 처리되고 결과는\r\n    그 확률에 해당하는 단일 값입니다. <code>percentiles</code> 값이 0.0과 1.0 사이의 숫자로 구성된 목록이면 결과는 입력 확률에 해당하는\r\n    백분위수 목록이 됩니다. 고급 사용자는 <code>options</code>의 PercentileMode 옵션을 사용하여 더 구체적인 보간법을 선택할 수 있지만 대부분의 경우에는 권장되지 않습니다.\r\n    사전 정의된 기호 <code>PercentileMode.ExcelInc</code> 및 <code>PercentileMode.ExcelExc</code>는 Excel 함수\r\n <code>PERCENTILE.INC</code> 및 <code>PERCENTILE.EXC</code>에서 사용하는 보간법과 일치합니다. 기본 동작은 <code>PercentileMode.ExcelInc</code>와 일치합니다. 기호\r\n    <code>PercentileMode.SqlCont</code> 및 <code>PercentileMode.SqlDisc</code>는 각각 <code>PERCENTILE_CONT</code> 및\r\n    <code>PERCENTILE_DISC</code>에 대한 SQL Server 동작과 일치합니다.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>{5, 3, 1, 7, 9}</code> 목록의 첫 번째 사분위수를 찾습니다.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Excel의 <code>PERCENTILE.EXC</code>와 일치하는 보간법을 사용하여 <code> {5, 3, 1, 7, 9} </code> 목록의 첫 번째 사분위수를 찾습니다.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "목록에 있는 값의 오프셋을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에서 <code>value</code> 값이 나타나는 오프셋을 반환합니다. 해당 값이 나타나지 않으면 -1을 반환합니다.\r\n    선택적 발생 매개 변수 <code>occurrence</code>을(를) 지정할 수 있습니다.\r\n<ul>\r\n   <li><code>occurrence</code>: 보고할 발생 항목의 최대 개수입니다.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} 목록에서 3 값이 나타나는 위치를 찾습니다.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "목록에 있는 값의 첫 번째 오프셋을 반환합니다.",
        "Documentation.LongDescription": "<code>values</code> 목록에서 첫 번째로 나타나는 값의 <code>list</code> 목록 내 오프셋을 반환합니다. 찾을 수 없으면 -1을 반환합니다.\r\n    선택적 발생 매개 변수 <code>occurrence</code>을(를) 지정할 수 있습니다.\r\n<ul>\r\n   <li><code>occurrence</code>: 반환될 수 있는 발생 항목의 최대 개수입니다.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} 목록에서 2 또는 3 값이 나타나는 첫 번째 위치를 찾습니다.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "오프셋에서 시작하는 목록 하위 집합을 반환합니다.",
        "Documentation.LongDescription": "오프셋 <code>list</code>에서 시작하는 목록 하위 집합을 반환합니다. 선택적 매개 변수 <code>offset</code>은(는) 하위 집합의 최대 항목 수를 설정합니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "숫자 1부터 10지 포함된 목록에서 오프셋 6부터 시작하는 하위 집합을 찾습니다.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "숫자 1부터 10까지 포함된 목록에서 오프셋 6부터 시작하고 길이가 2인 하위 집합을 찾습니다.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "목록1에서 목록에 있는 항목을 제거합니다.",
        "Documentation.LongDescription": "<code>list1</code>에서 <code>list2</code>에 나타나는 모든 특정 값을 제거합니다. <code>list2</code>의 값이 <code>list1</code>에 없으면 원래 목록이 반환됩니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 2, 5, 5} 목록에서 {2, 4, 6} 목록의 항목을 제거합니다.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "입력 값과 일치하는 모든 값을 제거합니다.",
        "Documentation.LongDescription": "<code>list1</code> 목록에서 <code>list2</code>에 나타나는 모든 특정 값을 제거합니다. <code>list2</code>의 값이 <code>list1</code>에 없으면 원래 목록이 반환됩니다.\r\n    선택적 수식 조건 값인 <code>equationCriteria</code>을(를) 지정하여 같음 테스트를 제어할 수 있습니다. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5, 5}에서 {1, 5}를 제외한 목록을 만듭니다.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "지정된 위치에서 시작하여 지정된 개수만큼의 값을 제거합니다.",
        "Documentation.LongDescription": "<code>list</code>에서 지정된 위치 <code>index</code>부터 <code>count</code>개의 값을 제거합니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, -6, -2, -1, 5} 목록에서 인덱스 4부터 3개의 값을 제거합니다.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "원래 목록을 일정 횟수 반복한 목록을 반환합니다.",
        "Documentation.LongDescription": "원래 목록 <code>list</code>을(를) <code>count</code>번 반복한 목록을 반환합니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2}가 3번 반복된 목록을 만듭니다.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "{ old, new }의 각 바꾸기를 적용합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 대해 지정된 바꾸기를 수행합니다. 바꾸기 작업 <code>replacements</code>은(는) 두 개의 값으로 된 목록으로 구성되며, 각 목록에서 이전 값과 새 값이 제공됩니다.\r\n    선택적 수식 조건 값인 <code>equationCriteria</code>을(를) 지정하여 같음 테스트를 제어할 수 있습니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5}에서 값 5를 -5로 바꾸고 값 1은 -1로 바꾼 목록을 만듭니다.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "조건과 일치하는 값의 목록을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에서 선택 조건 <code>selection</code>과(와) 일치하는 값의 목록을 반환합니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, -3, 4, 9, -2} 목록에서 0보다 큰 값을 찾습니다.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "지정한 페이지 크기를 사용하여 지정한 목록을 목록의 목록으로 분할합니다.",
        "Documentation.LongDescription": "출력 목록의 첫 번째 요소가 원본 목록의 처음 <code>pageSize</code>개 요소가 포함된 목록, 출력 목록의 그 다음 요소가 원본 목록의\r\n    다음 <code>pageSize</code>개 요소가 포함된 목록과 같은 목록의 목록으로 <code>list</code>을(를) 분할합니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "이 목록에서 계산된 새 값 목록을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 변환 함수 <code>transform</code>을(를) 적용하여 새 값 목록을 반환합니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} 목록의 각 값에 1을 더합니다.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "두 숫자의 나누기에 대한 아크탄젠트를 반환합니다.",
        "Documentation.LongDescription": "두 숫자 <code>y</code> 및 <code>x</code>의 나누기에 대한 아크탄젠트를 반환합니다. 나누기는 <code>y</code>/<code>x</code>(으)로 작성합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "두 입력 간의 비트 \"And\" 연산을 수행한 결과를 반환합니다.",
        "Documentation.LongDescription": "<code>number1</code>과(와) <code>number2</code> 간의 비트 \"And\" 연산을 수행한 결과를 반환합니다.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "두 입력 간의 비트 \"Or\" 연산을 수행한 결과를 반환합니다.",
        "Documentation.LongDescription": "<code>number1</code>과(와) <code>number2</code> 간의 비트 \"Or\" 연산을 수행한 결과를 반환합니다.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "비트 집합을 왼쪽으로 이동합니다.",
        "Documentation.LongDescription": "<code>number1</code>에 대해 지정된 비트 수 <code>number2</code>만큼 왼쪽으로 비트 시프트를 수행한 결과를 반환합니다.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "비트 집합을 오른쪽으로 이동합니다.",
        "Documentation.LongDescription": "<code>number1</code>에 대해 지정된 비트 수 <code>number2</code>만큼 오른쪽으로 비트 시프트를 수행한 결과를 반환합니다.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "두 입력 간의 비트 \"XOR\"(배타적 OR) 연산을 수행한 결과를 반환합니다.",
        "Documentation.LongDescription": "<code>number1</code>과(와) <code>number2</code> 간의 비트 \"XOR\"(배타적 OR) 연산을 수행한 결과를 반환합니다.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "고유 조합의 수를 반환합니다.",
        "Documentation.LongDescription": "항목 목록 <code>setSize</code>에서 지정된 조합 크기 <code>combinationSize</code>과(와) 일치하는 고유 조합의 수를 반환합니다.\r\n<ul>\r\n    <li><code>setSize</code>: 목록의 항목 수입니다.</li>\r\n    <li><code>combinationSize</code>: 각 조합의 항목 수입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "각 조합이 그룹 3일 때 총 5개 항목에서 조합 수를 확인합니다.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "두 숫자를 나눈 후 결과의 정수 부분을 반환합니다.",
        "Documentation.LongDescription": "숫자 <code>number1</code>을(를) 다른 숫자 <code>number2</code>(으)로 나눈 결과의 정수 부분을 반환합니다.\r\n    <code>number1</code> 또는 <code>number2</code>이(가) Null인 경우 <code>Number.IntegerDivide</code>는 Null을 반환합니다.\r\n      <ul>\r\n        <li><code>number1</code>: 피제수입니다.</li>\r\n        <li><code>number2</code>: 제수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "6을 4로 나눕니다.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "8.3을 3으로 나눕니다.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "두 숫자에 대해 정수 나누기를 수행하고 나머지를 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>을(를) <code>divisor</code>(으)로 정수 나누기를 수행한 결과의 나머지를 반환합니다.\r\n    <code>number</code> 또는 <code>divisor</code>이(가) Null인 경우 <code>Number.Mod</code>는 Null을 반환합니다.\r\n      <ul>\r\n        <li><code>number</code>: 피제수입니다.</li>\r\n        <li><code>divisor</code>: 제수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "5를 3으로 나눈 나머지를 구합니다.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "순열 수를 반환합니다.",
        "Documentation.LongDescription": "지정된 순열 크기 <code>permutationSize</code>(으)로 항목 수 <code>setSize</code>개에서 생성할 수 있는 순열의 수를 반환합니다.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "3개 그룹의 총 5개 항목에서 순열의 수를 확인합니다.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "숫자를 지정된 지수로 거듭제곱합니다.",
        "Documentation.LongDescription": "<code>number</code>을(를) <code>power</code>제곱한 결과를 반환합니다.\r\n    <code>number</code> 또는 <code>power</code>이(가) Null인 경우 <code>Number.Power</code>는 Null을 반환합니다.\r\n      <ul>\r\n        <li><code>number</code>: 밑입니다.</li>\r\n        <li><code>power</code>: 지수입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "5의 3제곱을 구합니다.",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "두 수 사이의 난수를 반환합니다.",
        "Documentation.LongDescription": "<code>bottom</code>과(와) <code>top</code> 사이의 난수를 반환합니다.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "1과 5 사이의 난수를 가져옵니다.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "레코드에 있는 지정된 필드의 값을 반환합니다.",
        "Documentation.LongDescription": "<code>record</code>에 있는 지정된 <code>field</code>의 값을 반환합니다. 필드를 찾을 수 없는 경우에는 예외가 발생합니다.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "레코드에 있는 필드 \"CustomerID\"의 값을 확인합니다.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "레코드에 있는 지정된 필드의 값을 반환하거나, 필드를 찾을 수 없는 경우 기본값을 반환합니다.",
        "Documentation.LongDescription": "레코드 <code>record</code>에 있는 지정된 필드 <code>field</code>의 값을 반환합니다. 필드를 찾을 수 없는 경우에는 선택적 <code>defaultValue</code>이(가) 반환됩니다.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "레코드에 있는 필드 \"Phone\"의 값을 확인하거나, 필드가 없는 경우 null을 반환합니다.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "레코드에 있는 필드 \"Phone\"의 값을 확인하거나, 필드가 없는 경우 기본값을 반환합니다.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "지정된 필드 값 목록 및 필드 집합을 포함하는 레코드를 반환합니다.",
        "Documentation.LongDescription": "지정된 필드 값의 <code>list</code> 및 필드 집합을 포함하는 레코드를 반환합니다. 텍스트 값의 목록이나 레코드 형식으로 <code>fields</code>을(를) 지정할 수 있습니다. 필드가 고유하지 않으면 오류가 발생합니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "필드 값 목록 및 필드 이름 목록에서 레코드를 작성합니다.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "필드 값 목록 및 레코드 형식에서 레코드를 작성합니다.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "레코드에 지정된 필드가 있는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "논리값(true 또는 false)을 반환하여 <code>record</code> 레코드의 <code>fields</code>에 필드가 지정되어 있는지 여부를 나타냅니다.\r\n    목록을 사용하여 여러 필드 값을 지정할 수 있습니다.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "레코드에 필드 \"CustomerID\"가 있는지 여부를 확인합니다.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "레코드에 필드 \"CustomerID\" 및 \"Address\"가 있는지 여부를 확인합니다.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "입력 레코드에서 지정된 필드를 제거합니다.",
        "Documentation.LongDescription": "입력 <code>record</code>의 목록 <code>fields</code>에 지정된 모든 필드를 제거하는 레코드를 반환합니다. 지정된 필드가 없으면 예외가 발생합니다.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "레코드에서 필드 \"Price\"를 제거합니다.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "레코드에서 필드 \"Price\" 및 \"Item\"을 제거합니다.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "{ old, new } 형식의 목록에서 이름 바꾸기를 적용합니다.",
        "Documentation.LongDescription": "입력 <code>record</code>의 필드를 목록 <code>renames</code>에 지정된 새 필드 이름으로 바꾼 후 레코드를 반환합니다. 여러 개의 이름을 바꾸려면 중첩된 목록({ {old1, new1}, {old2, new2} }을 사용합니다.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "레코드에서 필드 \"UnitPrice\"의 이름을 \"Price\"로 바꿉니다.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "레코드에서 필드 \"UnitPrice\"의 이름을 \"Price\"로 바꾸고 \"OrderNum\"의 이름을 \"OrderID\"로 바꿉니다.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "지정된 필드를 새 순서로 다시 정렬합니다.",
        "Documentation.LongDescription": "<code>record</code>의 필드를 목록 <code>fieldOrder</code>에 지정된 필드 순서대로 다시 정렬한 후 레코드를 반환합니다. 필드 값은 유지되며 <code>fieldOrder</code>에 나열되지 않은 필드는 원래 위치에 유지됩니다.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "레코드의 일부 필드 순서를 바꿉니다.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "지정된 필드만 포함하는 레코드를 반환합니다.",
        "Documentation.LongDescription": "입력 <code>record</code>의 목록 <code>fields</code>에 지정된 필드만 포함하는 레코드를 반환합니다.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "레코드의 필드 \"Item\" 및 \"Price\"를 선택합니다.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "지정된 변환을 적용한 후 레코드를 반환합니다.",
        "Documentation.LongDescription": "목록 <code>transformOperations</code>에 지정된 변환을 <code>record</code>에 적용한 후 레코드를 반환합니다.\r\n    한 번에 하나 이상의 필드가 변환될 수 있습니다. \r\n      <div>단일 필드가 변환되는 경우 <code>transformOperations</code>은(는) 두 개의 항목이 있는 목록이어야 합니다. <code>transformOperations</code>의 첫 번째 항목은 필드 이름을 지정하고 <code>transformOperations</code>의 두 번째 항목은 변환에 사용할 함수를 지정합니다. 예: <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>여러 필드가 변환되는 경우 <code>transformOperations</code>은(는) 목록의 목록이어야 합니다. 이때 각 내부 목록은 필드 이름 및 변환 작업의 쌍입니다. 예: <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"Price\" 필드를 숫자로 변환합니다.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "\"OrderID\" 및 \"Price\" 필드를 숫자로 변환합니다.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "문자 종류 간의 전환에 따라 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다. {0} 및 {1} 매개 변수는 문자 목록일 수도 있고, 문자를 받고 true/false를 반환하는 함수일 수도 있습니다.",
        "Documentation.LongDescription": "문자 종류 간의 전환에 따라 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다. <code>before</code> 및 <code>after</code> 매개 변수는 문자 목록일 수도 있고, 문자를 받고 true/false를 반환하는 함수일 수도 있습니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "대문자 또는 소문자 뒤에 숫자가 올 때마다 입력을 분할합니다.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "제공된 SQL 쿼리를 M 코드로 변환합니다. 이 함수는 내부 전용입니다.",
        "Documentation.LongDescription": "제공된 <code>sql</code> 쿼리를 <code>environment</code>에 의해 정의된 사용 가능한 식별자와 함께 M 코드로 변환합니다. 이 기능은 내부 전용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "테이블의 지정된 데이터 열을 목록으로 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블에서 <code>column</code>(으)로 지정된 데이터 열을 목록으로 반환합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [Name] 열의 값을 반환합니다.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "지정된 형식과 일치하는 열의 이름이 포함된 목록을 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블에서 <code>listOfTypes</code>에 지정된 형식과 일치하는 열의 이름이 포함된 목록을 반환합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 Number.Type 형식의 열 이름을 반환합니다.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "지정된 레코드가 테이블에 행으로 나타나는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 레코드 <code>row</code>이(가) <code>table</code>에 행으로 나타나는지 여부를 나타냅니다.\r\n    선택적 매개 변수 <code>equationCriteria</code>을(를) 지정하여 테이블 행 간의 비교를 제어할 수 있습니다.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "테이블에 행이 포함되어 있는지 여부를 확인합니다.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "테이블에 행이 포함되어 있는지 여부를 확인합니다.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "[Name] 열만 비교하여 테이블에 행이 포함되어 있는지 여부를 확인합니다.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "지정된 모든 레코드가 테이블에 행으로 나타나는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "레코드 목록 <code>rows</code>에서 지정된 모든 레코드가 <code>table</code>에 행으로 나타나는지 여부를 나타냅니다.\r\n    선택적 매개 변수 <code>equationCriteria</code>을(를) 지정하여 테이블 행 간의 비교를 제어할 수 있습니다.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "테이블에 [CustomerID] 열만 비교하여 모든 행이 포함되어 있는지 여부를 확인합니다.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "테이블에 모든 행이 포함되어 있는지 여부를 확인합니다.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "지정된 레코드가 하나라도 테이블에 행으로 나타나는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "레코드 목록 <code>rows</code>에서 지정된 레코드가 하나라도 <code>table</code>에 행으로 나타나는지 여부를 나타냅니다.\r\n    선택적 매개 변수 <code>equationCriteria</code>을(를) 지정하여 테이블 행 간의 비교를 제어할 수 있습니다.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 테이블에 <code>[a = 1, b = 2]</code> 또는 <code>[a = 3, b = 5]</code> 행이 포함되어 있는지 여부를 확인합니다.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 테이블에 <code>[a = 1, b = 3]</code> 또는 <code>[a = 3, b = 5]</code> 행이 포함되어 있는지 여부를 확인합니다.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "[a] 열만 비교하여 <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> 테이블에 <code>[a = 1, b = 3]</code> 또는 <code>[a = 3, b = 5]</code> 행이 포함되어 있는지 여부를 확인합니다.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "테이블에 지정된 열이 포함되어 있는지를 나타냅니다.",
        "Documentation.LongDescription": "<code>table</code>에 지정된 <code>columns</code> 열이 포함되어 있는지를 나타냅니다. 테이블에 열이 포함되어 있으면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에 [Name] 열이 있는지 여부를 확인합니다.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "테이블에 [Name] 및 [PhoneNumber] 열이 있는지 여부를 확인합니다.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "테이블의 모든 행이 지정된 조건을 충족하는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "<code>table</code>의 모든 행이 지정된 <code>condition</code>과(와) 일치하는지 여부를 나타냅니다. 모든 행이 일치하면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [a] 열의 행 값이 모두 짝수인지 여부를 확인합니다.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 테이블에서 모든 행 값이 [a = 1, b = 2]인지 여부를 확인합니다.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "테이블에 지정된 조건을 충족하는 행이 하나라도 있는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "<code>table</code>에 지정된 <code>condition</code>과(와) 일치하는 행이 하나라도 있는지 여부를 나타냅니다. 일치하는 행이 있으면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8]})</code> 테이블의 [a] 열에 값이 짝수인 행이 하나라도 있는지 여부를 확인합니다.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 테이블에서 값이 [a = 1, b = 2]인 행이 하나라도 있는지 여부를 확인합니다.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "지정된 조건을 사용하여 가장 큰 행이나 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code>이(가) 지정된 경우 <code>table</code>의 가장 큰 행을 반환합니다. 테이블이 비어 있으면 선택적 <code>default</code> 값이 반환됩니다. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8]})</code> 테이블에서 [a] 열의 값이 가장 큰 행을 찾습니다.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "<code>({})</code> 테이블에서 [a] 열의 값이 가장 큰 행을 찾습니다. 테이블이 비어 있으면 -1을 반환합니다.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "지정된 조건을 사용하여 가장 작은 행이나 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code>이(가) 지정된 경우 <code>table</code>의 가장 작은 행을 반환합니다. 테이블이 비어 있으면 선택적 <code>default</code> 값이 반환됩니다.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "테이블에서 [a] 열의 값이 가장 작은 행을 찾습니다.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "테이블에서 [a] 열의 값이 가장 작은 행을 찾습니다. 테이블이 비어 있으면 -1을 반환합니다.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "테이블 내의 행 위치를 반환합니다.",
        "Documentation.LongDescription": "지정된 <code>table</code>에서 <code>row</code>이(가) 처음 발생하는 행 위치를 반환합니다. 찾을 수 없으면 -1을 반환합니다.\r\n    <ul>\r\n       <li><code>table</code>: 입력 테이블입니다.</li>\r\n       <li><code>row</code>: 테이블에서 위치를 찾을 행입니다.</li>\r\n       <li><code>occurrence</code>: <i>[옵션]</i> 반환할 행의 발생 위치를 지정합니다.</li>\r\n       <li><code>equationCriteria</code>: <i>[옵션]</i> 테이블 행 간의 비교를 제어합니다.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 테이블에서 [a = 2, b = 4]의 첫 번째 발생 위치를 찾습니다.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 테이블에서 [a = 2, b = 4]의 두 번째 발생 위치를 찾습니다.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 테이블에서 [a = 2, b = 4]의 모든 발생 위치를 찾습니다.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "테이블 내에서 지정된 행이 있는 위치를 반환합니다.",
        "Documentation.LongDescription": "<code>table</code>에서 <code>rows</code> 목록이 처음 발생하는 행 위치를 반환합니다. 찾을 수 없으면 -1을 반환합니다.\r\n    <ul>\r\n    <li><code>table</code>: 입력 테이블입니다.</li>\r\n       <li><code>rows</code>: 테이블에서 위치를 찾을 행 목록입니다.</li>\r\n       <li><code>occurrence</code>: <i>[옵션]</i> 반환할 행의 발생 위치를 지정합니다.</li>\r\n       <li><code>equationCriteria</code>: <i>[옵션]</i> 테이블 행 간의 비교를 제어합니다.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 테이블에서 [a = 2, b = 4] 또는 [a = 6, b = 8]의 첫 번째 발생 위치를 찾습니다.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code> 테이블에서 [a = 2, b = 4] 또는 [a = 6, b = 8]의 모든 발생 위치를 찾습니다.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "이 기능은 내부용입니다.",
        "Documentation.LongDescription": "이 기능은 내부용입니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "지정한 페이지 크기를 사용하여 지정한 테이블을 테이블의 목록으로 분할합니다.",
        "Documentation.LongDescription": "목록의 첫 번째 요소가 원본 테이블의 처음 <code>pageSize</code>개 행이 포함된 테이블, 목록의 그 다음 요소가 원본 테이블의\r\n    다음 <code>pageSize</code>개 요소가 행이 포함된 테이블과 같은 테이블의 목록으로 <code>table</code>을(를) 분할합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "5개의 레코드로 구성된 테이블을 각각 레코드가 2개씩인 테이블로 분할합니다.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "지정된 첫 번째 개수 행과 나머지 행이 포함된 목록을 반환합니다.",
        "Documentation.LongDescription": "두 개의 테이블, 즉 <code>table</code>(<code>count</code>(으)로 지정)의 첫 N행과 나머지 <code>table</code> 행이 포함된 테이블을 포함하는 목록을 반환합니다.\r\n\r\n결과 목록의 테이블이 정확히 한 번 순서대로 열거된 경우, 함수는 <code>table</code>을(를) 한 번만 열거합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 첫 두 행과 테이블의 나머지 행을 반환합니다.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "지정한 변환 함수를 사용하여 테이블의 행을 변환합니다.",
        "Documentation.LongDescription": "<code>transform</code>의 각 행에 <code>table</code> 작업을 적용하여 <code>목록</code> 만듭니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "테이블의 행을 숫자 목록으로 변환합니다.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "숫자 테이블의 행을 텍스트 레코드로 변환합니다.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "이 기능은 내부용입니다.",
        "Documentation.LongDescription": "이 기능은 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "지정한 <code>delimiter</code> 이후의 <code>text</code> 부분을 반환합니다.\r\n    선택적 숫자 <code>index</code>은(는) 고려해야 하는 <code>delimiter</code>을(를) 나타냅니다.\r\n    선택적 목록 <code>index</code>은(는) 고려해야 하는 <code>delimiter</code>과(와) 인덱싱을 입력의 처음부터 실행해야 하는지, 아니면 끝부터 실행해야 하는지를 나타냅니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "(첫 번째) 하이픈 이후의 \"111-222-333\" 부분을 가져옵니다.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "두 번째 하이픈 이후의 \"111-222-333\" 부분을 가져옵니다.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "끝에서 두 번째 하이픈 이후의 \"111-222-333\" 부분을 가져옵니다.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "지정한 위치에 있는 문자를 반환합니다.",
        "Documentation.LongDescription": "<code>index</code> 위치에 있는 텍스트 값 <code>text</code>의 문자를 반환합니다. 텍스트의 첫 번째 문자는 위치 0에 있습니다.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" 문자열에서 위치 4에 있는 문자를 찾습니다.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "지정한 <code>delimiter</code> 이전의 <code>text</code> 부분을 반환합니다.\r\n    선택적 숫자 <code>index</code>은(는) 고려해야 하는 <code>delimiter</code>을(를) 나타냅니다.\r\n    선택적 목록 <code>index</code>은(는) 고려해야 하는 <code>delimiter</code>과(와) 인덱싱을 입력의 처음부터 실행해야 하는지, 아니면 끝부터 실행해야 하는지를 나타냅니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "(첫 번째) 하이픈 이전의 \"111-222-333\" 부분을 가져옵니다.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "두 번째 하이픈 이전의 \"111-222-333\" 부분을 가져옵니다.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "끝에서 두 번째 하이픈 이전의 \"111-222-333\" 부분을 가져옵니다.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "텍스트에 부분 문자열이 포함되어 있는지 여부를 반환합니다.",
        "Documentation.LongDescription": "<code>text</code>이(가) 값 <code>substring</code>을(를) 포함하는지 여부를 감지합니다. 값을 찾으면 true를 반환합니다. 이 함수는 와일드카드나 정규식을 지원하지 않습니다.\r\n      <br>\r\n      <br>\r\n      선택적 인수 <code>comparer</code>을(를) 사용하여 대소문자를 구분하지 않거나 문화권 및 로케일 인식 비교를 지정할 수 있습니다.\r\n      수식 언어에서 다음 기본 제공 비교기를 사용할 수 있습니다.\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 대소문자를 구분하는 순서 비교를 수행하는 데 사용됩니다</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 대소문자를 구분하지 않는 서수 비교를 수행하는 데 사용됩니다</li>\r\n        <li> <code>Comparer.FromCulture</code>: 문화 인식 비교를 수행하는 데 사용됩니다</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Hello World\" 텍스트에 \"Hello\"가 포함되어 있는지 여부를 찾습니다.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "\"Hello World\" 텍스트에 \"hello\"가 포함되어 있는지 여부를 찾습니다.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "대소문자를 구분하지 않는 비교자를 사용하여 \"Hello World\" 텍스트에 \"hello\"가 포함되어 있는지 확인합니다.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "텍스트의 마지막 문자를 반환합니다.",
        "Documentation.LongDescription": "<code>text</code> 값 <code>text</code>의 마지막 <code>count</code>자인 <code>text</code> 값을 반환합니다.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" 텍스트의 마지막 5자를 가져옵니다.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "텍스트가 지정한 값으로 끝나는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 텍스트(<code>text</code>)가 지정된 값(<code>substring</code>)으로 끝나는지 여부를 나타냅니다. 표시는 대/소문자를 구분합니다.\r\n\r\n      <div>\r\n        <code>comparer</code>은(는) 비교를 제어하는 데 사용되는 <code>Comparer</code>입니다. 비교자를 사용하여 대/소문자 비구분 비교 또는 문화권 및 로캘 인식 비교를 제공할 수 있습니다.\r\n      </div>\r\n      <div>\r\n        수식 언어에서는 다음과 같은 기본 제공 비교자를 사용할 수 있습니다.\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 정확한 서수 비교를 수행하는 데 사용됨</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 정확한 대/소문자 비구분 서수 비교를 수행하는 데 사용됨</li>\r\n        <li> <code>Comparer.FromCulture</code>: 문화권 인식 비교를 수행하는 데 사용됨</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\"가 \"world\"로 끝나는지 확인합니다.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "\"Hello, World\"가 \"World\"로 끝나는지 확인합니다.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "서식 문자열 및 인수를 사용하여 서식 있는 텍스트를 반환합니다.",
        "Documentation.LongDescription": "목록 또는 레코드의 <code>arguments</code>을(를) 서식 문자열 <code>formatString</code>에 적용하여 만든 서식 있는 텍스트를 반환합니다. 선택적 <code>culture</code>(예: \"en-US\")이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "숫자 목록의 서식을 지정합니다.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "레코드의 여러 데이터 형식의 서식을 미국(영어) 문화권에 따라 지정하세요.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "하위 문자열을 특정 길이까지 반환합니다.",
        "Documentation.LongDescription": "오프셋 <code>start</code>에서 <code>count</code>자를 반환하거나 <code>text</code>의 끝까지 반환합니다.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "인덱스 6부터 시작하여 5자까지 \"Hello World\" 텍스트의 부분 문자열을 찾습니다.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "인덱스 6부터 시작하여 끝까지 \"Hello World\" 텍스트의 부분 문자열을 찾습니다.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "지정된 텍스트의 끝에 패딩하여 지정한 길이의 텍스트를 반환합니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>의 끝에 공백을 삽입하여 <code>count</code> 길이까지 패딩된 <code>text</code> 값을 반환합니다.\r\n    선택적 문자 <code>character</code>을(를) 사용하여 패딩에 사용할 문자를 지정할 수 있습니다. 기본 패딩 문자는 공백입니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "10자 길이가 되도록 텍스트 값의 끝에 패딩합니다.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "10자 길이가 되도록 텍스트 값의 끝에 \"|\"로 패딩합니다.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "지정된 텍스트의 시작에 패딩하여 지정한 길이의 텍스트를 반환합니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>의 시작에 공백을 삽입하여 <code>count</code> 길이까지 패딩된 <code>text</code> 값을 반환합니다.\r\n    선택적 문자 <code>character</code>을(를) 사용하여 패딩에 사용할 문자를 지정할 수 있습니다. 기본 패딩 문자는 공백입니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "10자 길이가 되도록 텍스트 값의 시작에 패딩합니다.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "10자 길이가 되도록 텍스트 값의 시작에 \"|\"로 패딩합니다.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "값의 첫 번째 위치를 반환합니다(찾을 수 없는 경우 -1 반환).",
        "Documentation.LongDescription": "<code>text</code>에 있는 <code>substring</code> 텍스트 값의 지정된 발생 위치를 반환합니다.\r\n    선택적 매개 변수 <code>occurrence</code>을(를) 사용하여 반환할 발생 위치를 지정할 수 있습니다(기본값은 첫 발생 위치).\r\n    <code>substring</code>을(를) 찾을 수 없는 경우 -1을 반환합니다.\r\n\r\n      <div>\r\n        <code>comparer</code>은(는) 비교를 제어하는 데 사용되는 <code>Comparer</code>입니다. 비교자를 사용하여 대/소문자 비구분 비교 또는 문화권 및 로캘 인식 비교를 제공할 수 있습니다.\r\n      </div>\r\n      <div>\r\n        수식 언어에서는 다음과 같은 기본 제공 비교자를 사용할 수 있습니다.\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 정확한 서수 비교를 수행하는 데 사용됨</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 정확한 대/소문자 비구분 서수 비교를 수행하는 데 사용됨</li>\r\n        <li> <code>Comparer.FromCulture</code>: 문화권 인식 비교를 수행하는 데 사용됨</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World! Hello, World!\" 텍스트에서 \"World\"의 첫 번째 발생 위치를 가져옵니다.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "\"Hello, World! Hello, World!\"에서 \"World\"의 마지막 발생 위치를 가져옵니다.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "나열된 문자의 텍스트 값에서 첫 번째 위치를 반환합니다(찾을 수 없는 경우 -1 반환).",
        "Documentation.LongDescription": "<code>text</code>에서 찾은 목록 <code>characters</code>에서 문자의 첫 번째 위치를 반환합니다.\n    선택적 매개 변수 <code>occurrence</code>을(를) 사용하여 반환할 발생 위치를 지정할 수 있습니다.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World!\"라는 텍스트에서 \"W\" 또는 \"H\"가 처음 등장하는 위치를 찾습니다.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "\"Hello, World!\"라는 텍스트에서 \"W\" 또는 \"H\"의 위치를 모두 찾습니다.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "오프셋에 있는 부분 문자열을 반환합니다.",
        "Documentation.LongDescription": "오프셋 <code>offset</code>에서 찾은 <code>text</code> 텍스트의 부분 문자열을 반환합니다.\r\n    선택적 매개 변수 <code>count</code>을(를) 포함하여 반환할 문자 수를 지정할 수 있습니다. 충분한 문자가 없는 경우 오류를 발생시킵니다.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "인덱스 6부터 시작하여 \"Hello World\" 텍스트의 부분 문자열을 찾습니다.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "인덱스 6부터 시작하여 5자를 포함하는 \"Hello World Hello\" 텍스트의 부분 문자열을 찾습니다.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "입력 텍스트 값에서 지정된 문자 또는 문자 목록의 모든 발생을 제거합니다.",
        "Documentation.LongDescription": "<code>removeChars</code>의 모든 문자를 제거한 상태로 텍스트 값 <code>text</code>의 복사본을 반환합니다.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "텍스트 값에서 , 및 ; 문자를 제거합니다.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "지정된 오프셋부터 시작하여 정해진 개수의 문자를 제거합니다.",
        "Documentation.LongDescription": "<code>offset</code> 위치의 모든 문자가 제거된 텍스트 값 <code>text</code>의 복사본을 반환합니다.\r\n    선택적 매개 변수 <code>count</code>을(를) 사용하여 제거할 문자 수를 지정할 수 있습니다. <code>count</code>의 기본값은 1입니다. 위치 값은 0부터 시작합니다.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "텍스트 값 \"ABEFC\"의 위치 2에서 문자 1개를 제거합니다.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "텍스트 값 \"ABEFC\"의 위치 2에서 시작하여 문자 2를 제거합니다.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "입력 텍스트를 지정된 횟수만큼 반복하여 만든 텍스트 값을 반환합니다.",
        "Documentation.LongDescription": "입력 텍스트 <code>text</code>을(를) <code>count</code>번 반복하여 만든 텍스트 값을 반환합니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "텍스트 \"a\"를 5번 반복합니다.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "텍스트 \"helloworld\"를 3번 반복합니다.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "입력 텍스트 값에서 지정된 문자 또는 문자 목록의 모든 발생을 선택합니다.",
        "Documentation.LongDescription": "<code>selectChars</code>의 일부 문자를 제거하지 않은 상태로 텍스트 값 <code>text</code>의 복사본을 반환합니다.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "텍스트 값에서 'a'부터 'z' 사이에 있는 모든 문자를 선택합니다.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "지정된 구분 기호를 사용하여 텍스트를 텍스트 값 목록으로 분할합니다.",
        "Documentation.LongDescription": "지정된 구분 기호 <code>separator</code>을(를) 기준으로 텍스트 값 <code>text</code>을(를) 분할하여 만든 텍스트 값 목록을 반환합니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "텍스트 값 \"Name|Address|PhoneNumber\"를 \"|\"로 구분하여 목록을 만듭니다.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "구문 기호에 있는 모든 문자를 기준으로 분할된 텍스트 값 목록을 반환합니다.",
        "Documentation.LongDescription": "지정된 구분 기호 <code>separators</code>에 있는 모든 문자를 기준으로 텍스트 값 <code>text</code>을(를) 분할하여 만든 텍스트 값 목록을 반환합니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "텍스트 값 \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\"에서 목록을 만듭니다.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "텍스트 시작을 반환합니다.",
        "Documentation.LongDescription": "<code>text</code>의 처음 <code>count</code>개 문자를 텍스트 값으로 반환합니다.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\"의 처음 5개 문자를 가져옵니다.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "텍스트가 지정된 값으로 시작되는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "<code>text</code> 텍스트 값이 <code>substring</code> 텍스트 값으로 시작하면 true를 반환합니다.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> 검색할 <code>text</code> 값</li>\r\n        <li><code>substring</code>: <i></i> <code>substring</code>에서 검색할 하위 문자열인 <code>text</code> 값</li>\r\n        <li><code>comparer</code>: <i>[Optional]</i> 비교를 제어하는 데 사용되는 <code>Comparer</code>입니다. 예를 들면 <code>Comparer.OrdinalIgnoreCase</code>를 사용하여 대/소문자를 구분하지 않는 검색을 수행할 수 있습니다.</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code>은(는) 비교를 제어하는 데 사용되는 <code>Comparer</code>입니다. 비교자를 사용하여 대/소문자 비구분 비교 또는 문화권 및 로캘 인식 비교를 제공할 수 있습니다.\r\n      </div>\r\n      <div>\r\n        수식 언어에서는 다음과 같은 기본 제공 비교자를 사용할 수 있습니다.\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 정확한 서수 비교를 수행하는 데 사용됨</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 정확한 대/소문자 비구분 서수 비교를 수행하는 데 사용됨</li>\r\n        <li> <code>Comparer.FromCulture</code>: 문화권 인식 비교를 수행하는 데 사용됨</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "텍스트 \"Hello, World\"가 텍스트 \"hello\"로 시작되는지 확인합니다.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "텍스트 \"Hello, World\"가 텍스트 \"Hello\"로 시작되는지 확인합니다.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "특정 매개 변수 및 반환 형식 제약 조건을 가진 함수를 나타내는 형식을 반환합니다.",
        "Documentation.LongDescription": "<code>ReturnType</code> 및 <code>Parameters</code>의 레코드인 <code>signature</code> 및 함수를 호출하는 데 필요한 최소 인수 개수인 <code>min</code>에서 <code>함수 형식</code>을 만듭니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "X라는 숫자 매개 변수를 사용하고 숫자를 반환하는 함수의 형식을 만듭니다.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "필드에 대한 특정 형식 제약 조건을 가진 레코드를 나타내는 형식을 반환합니다.",
        "Documentation.LongDescription": "필드에 대한 특정 형식 제약 조건을 가진 레코드를 나타내는 형식을 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "테이블 형식을 동적으로 생성합니다.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "첫 번째 유형의 값이 항상 두 번째 유형과 호환되는지 여부를 판별합니다.",
        "Documentation.LongDescription": "<code>type1</code> 값이 항상 <code>type2</code>와(과) 호환되는지 여부를 결정합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "유형 숫자 의 값이 항상 유형 any로 처리될 수 있는지 확인합니다.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "any 유형의 값이 항상 유형 번호로 처리될 수 있는지 확인합니다.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "형식의 패싯을 바꿉니다.",
        "Documentation.LongDescription": "<code>type</code> 패싯을 <code>facets</code> 레코드에 포함된 패싯으로 바꿉니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "모든 키를 지정된 키 목록으로 바꾼 새 테이블 형식을 반환합니다.",
        "Documentation.LongDescription": "모든 키를 지정된 키 목록으로 바꾼 새 테이블 형식을 반환합니다.<br>\r\n    <br>\r\n    각 키는 다음 형식의 레코드를 사용하여 정의됩니다.\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: 키를 정의하는 열 이름 목록\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: 키가 테이블의 기본 키이면 <code>true</code>, 그렇지 않으면 <code>false</code>를 반환\r\n      </li>\r\n    </ul>\r\n    지정된 키 목록의 유효성을 검사하여 기본 키가 하나 이상 정의되어 있지 않고 모든 키 열 이름이 테이블 유형에 존재하는지 확인합니다.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "테이블 형식의 키 정보를 대체합니다.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "테이블 형식에 이전에 정의된 키 정보를 지웁니다.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "테이블의 열 형식을 반환합니다.",
        "Documentation.LongDescription": "테이블 형식 <code>tableType</code>에서 열 <code>column</code>의 형식을 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "입력 기본 URI와 상대 URI의 조합인 절대 URI를 반환합니다.",
        "Documentation.LongDescription": "입력 <code>baseUri</code>과(와) <code>relativeUri</code>의 조합인 절대 URI를 반환합니다.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "두 값의 합계를 반환합니다.",
        "Documentation.LongDescription": "<code>value1</code>과(와) <code>value2</code>의 합계를 반환합니다. 선택적으로 <code>precision</code> 매개 변수를 지정할 수 있습니다. 기본적으로 <code>Precision.Double</code>이 사용됩니다.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "지정된 유형과 호환되는 경우 값을 반환합니다.",
        "Documentation.LongDescription": "지정된 유형과 호환되는 경우 값을 반환합니다. 이것은 Number.Type과 같은 식별자 유형 참조를 허용할 수 있다는 점을 제외하고 M의 \"as\" 연산자와 동일합니다.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "숫자를 숫자로 캐스팅합니다.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "텍스트 값을 숫자로 변환하려고 합니다.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "첫 번째 값이 두 번째 값보다 작은지, 같은지, 큰지에 따라 -1, 0 또는 1을 반환합니다.",
        "Documentation.LongDescription": "첫 번째 값이 두 번째 값보다 작은지, 같은지, 큰지에 따라 -1, 0 또는 1을 반환합니다.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "첫 번째 값을 두 번째 값으로 나눈 결과를 반환합니다.",
        "Documentation.LongDescription": "<code>value1</code>을(를) <code>value2</code>(으)로 나눈 결과를 반환합니다. 선택적으로 <code>precision</code> 매개 변수를 지정할 수 있습니다. 기본적으로 <code>Precision.Double</code>이 사용됩니다.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "두 값이 같은지 여부를 반환합니다.",
        "Documentation.LongDescription": "값 <code>value1</code>이(가) 값 <code>value2</code>과(와) 같으면 true를 반환하고, 그렇지 않으면 false를 반환합니다.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "값이 지정된 유형과 호환되는지 여부를 판별합니다.",
        "Documentation.LongDescription": "값이 지정된 유형과 호환되는지 여부를 판별합니다. 이것은 Number.Type과 같은 식별자 유형 참조를 허용할 수 있다는 점을 제외하고 M의 \"is\" 연산자와 동일합니다.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "숫자가 유형 숫자와 호환되는지 확인하는 두 가지 방법을 비교하세요.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "두 값의 곱을 반환합니다.",
        "Documentation.LongDescription": "<code>value1</code>을(를) <code>value2</code>(으)로 곱한 값을 반환합니다. 선택적으로 <code>precision</code> 매개 변수를 지정할 수 있습니다. 기본적으로 <code>Precision.Double</code>이 사용됩니다.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "대상에 대해 쿼리를 평가합니다.",
        "Documentation.LongDescription": "<p><code>parameters</code>에 지정된 매개 변수 및 <code>options</code>에 지정된 옵션을 사용하여 <code>target</code>에 대해 <code>query</code>을(를) 평가합니다.</p>\r\n<p>쿼리의 출력은 <code>target</code>에서 정의됩니다.</p>\r\n<p><code>target</code>에서는 <code>query</code>에서 설명한 작업에 대해 컨텍스트를 제공합니다.</p>\r\n<p><code>query</code>에서는 <code>target</code>에 대해 실행할 쿼리를 설명합니다. <code>query</code>은(는) <code>target</code>과(와) 관련된 방식으로 표현됩니다(예: T-SQL 문).</p>\r\n<p>선택적 <code>parameters</code> 값에는 <code>query</code>에서 예상된 매개 변수 값을 공급하는 데 적합한 목록 또는 레코드가 포함되어 있을 수 있습니다.</p>\r\n<p>선택적 <code>options</code> 레코드에는 <code>query</code>에 대한 <code>target</code>의 평가 동작에 영향을 주는 옵션이 포함되어 있을 수 있습니다. 이러한 옵션은 <code>target</code>과(와) 관련이 있습니다.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "두 값이 같은지 여부를 반환합니다.",
        "Documentation.LongDescription": "인수 '<code>value1</code>', '<code>value2</code>' 중 하나라도 null이면 null을 반환하고, 그렇지 않으면 Value.Equals와 동일한 값을 반환합니다.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "입력의 메타데이터 정보를 바꿉니다.",
        "Documentation.LongDescription": "입력의 메타데이터 정보를 바꿉니다.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "값의 형식을 바꿉니다.",
        "Documentation.LongDescription": "<code>value</code>의 형식을 제공된 <code>type</code>(으)로 바꿉니다.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "레코드의 기본 유형을 보다 구체적인 유형으로 바꿉니다.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "두 값의 차이를 반환합니다.",
        "Documentation.LongDescription": "<code>value1</code>과(와) <code>value2</code>의 차이를 반환합니다. 선택적으로 <code>precision</code> 매개 변수를 지정할 수 있습니다. 기본적으로 <code>Precision.Double</code>이 사용됩니다.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "실행 시 HTTP 요청을 수행한 결과를 이진값으로 반환할 작업을 만듭니다.",
        "Documentation.LongDescription": "실행 시 HTTP를 이진 값으로 사용하여 <code>url</code>에 대해 <code>method</code> 요청을 수행한 결과를 반환하는 작업을 생성합니다.\r\n    다음을 지정하기 위해 선택적 레코드 매개 변수 <code>options</code>이(가) 제공될 수 있습니다. 추가 속성. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>Query</code> : 이스케이프에 신경 쓰지 않고 프로그래밍 방식으로 URL에 쿼리 매개 변수를 추가합니다.</li>\r\n<li><code>ApiKeyName</code> : 대상 사이트에 API 키 개념이 적용되어 있으면 이 매개 변수를 사용하여 URL에서 사용해야 하는 키 매개 변수의 이름(값 아님)을 지정할 수 있습니다. 실제 키 값은 자격 증명에 제공됩니다.</li>\r\n<li><code>Headers</code> : 이 값을 레코드로 지정하면 HTTP 요청에 추가 헤더가 제공됩니다.</li>\r\n<li><code>Timeout</code> : 이 값을 기간으로 지정하면 HTTP 요청의 제한 시간이 변경됩니다. 기본값은 100초입니다.</li>\r\n<li><code>ExcludedFromCacheKey</code> : 이 값을 목록으로 지정하면 이러한 HTTP 헤더 키가 데이터 캐싱을 위한 계산에 포함되지 않습니다.</li>\r\n<li><code>IsRetry</code> : 이 논리 값을 true로 지정하면 데이터를 가져올 때 캐시의 기존 응답이 무시됩니다.</li>\r\n<li><code>ManualStatusHandling</code> : 이 값을 목록으로 지정하면 응답에 이러한 상태 코드 중 하나가 포함된 기본 제공 HTTP 요청을 처리할 수 없습니다.</li>\r\n<li><code>RelativePath</code> : 이 값을 텍스트로 지정하면 요청하기 전에 기본 URL에 값이 추가됩니다.</li>\r\n<li><code>Content</code> : 이 값을 지정하면 해당 내용이 HTTP 요청의 본문이 됩니다.</li>\r\n</ul>\r\n\r\n     <br>\r\n    이 기능은 대부분의 컨텍스트에서 비활성화되어 있습니다. 대신 Web.Contents 또는 Web.Headers를 사용해 보세요.\r\n     ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Bing에 대해 GET 요청을 수행합니다.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "등록에 연결된 Azure 엔터프라이즈 REST API 끝점의 URL을 입력합니다.",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "호출의 이진 결과를 Azure 엔터프라이즈 API에 대해 제공된 URL에 반환합니다.",
        "Documentation.Examples": [
          {
            "Description": "AzureEnterprise.Contents 함수를 사용하여 특정 보고서의 결과를 반환합니다.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "테이블"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Azure 스토리지 자격 증명 모음에서 지정한 Blob의 내용을 반환합니다.",
        "Documentation.LongDescription": "Azure 스토리지 자격 증명 모음에서 계정 URL <code>url</code>에 있는 Blob의 콘텐츠를 반환합니다. 다음 옵션을 제어하기 위해 <code>options</code>이(가) 지정될 수 있습니다.\r\n    <ul>\r\n<li><code>BlockSize</code> : 데이터 소비자에서 대기하기 전 읽을 바이트 수입니다. 기본값은 4MB입니다.</li>\r\n<li><code>RequestSize</code> : 서버에 대한 단일 HTTP 요청에서 읽으려는 바이트 수입니다. 기본값은 4MB입니다.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 옵션은 메모리 사용률 비용으로 동시에 수행되는 요청 수를 지정하여 더 빠른 데이터 다운로드를 지원합니다. 필요한 메모리는 (ConcurrentRequest * RequestSize)입니다. 기본값은 16입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Azure Data Lake Storage 파일 시스템에서 지정된 파일의 콘텐츠를 반환합니다.",
        "Documentation.LongDescription": "Azure Data Lake Storage 파일 시스템에서 URL <code>url</code>에 있는 파일의 콘텐츠를 반환합니다. 다음 옵션을 제어하기 위해 <code>options</code>이(가) 지정될 수 있습니다.\r\n    <ul>\r\n<li><code>BlockSize</code> : 데이터 소비자에서 대기하기 전 읽을 바이트 수입니다. 기본값은 4MB입니다.</li>\r\n<li><code>RequestSize</code> : 서버에 대한 단일 HTTP 요청에서 읽으려는 바이트 수입니다. 기본값은 4MB입니다.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 옵션은 메모리 사용률 비용으로 동시에 수행되는 요청 수를 지정하여 더 빠른 데이터 다운로드를 지원합니다. 필요한 메모리는 (ConcurrentRequest * RequestSize)입니다. 기본값은 16입니다.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "이진 파일의 대략적인 길이를 반환합니다.",
        "Documentation.LongDescription": "<code>binary</code>의 대략적인 길이를 반환하거나 데이터 소스가 대략적인 길이를 지원하지 않는 경우 오류를 반환합니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "이진 값의 대략적인 길이를 가져옵니다.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "이진 값을 메모리에 버퍼링합니다.",
        "Documentation.LongDescription": "이진 값을 메모리에 버퍼링합니다. 이 호출의 결과는 안정적 이진 값입니다. 즉, 바이트의 길이와 순서가 결정적입니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "안정적 버전의 이진 값을 만듭니다.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "이진 값 목록을 단일 이진 값으로 결합합니다.",
        "Documentation.LongDescription": "이진 값 목록을 단일 이진 값으로 결합합니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "지정된 값에서 binary를 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>binary</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Binary.From</code>은 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) <code>binary</code>이면 <code>value</code>이(가) 반환됩니다. 다음 형식의 값을 <code>binary</code> 값으로 변환할 수 있습니다.\r\n      <ul>\r\n        <li><code>text</code>: 텍스트 표현에서 <code>binary</code> 값으로 변환할 수 있습니다. 자세한 내용은 <code>Binary.FromText</code>를 참조하세요.</li>\r\n      </ul>\r\n<code>value</code>이(가) 기타 형식이면 오류가 반환됩니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1011\"</code>의 <code>binary</code> 값을 가져옵니다.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "숫자 목록을 이진 값으로 변환합니다.",
        "Documentation.LongDescription": "숫자 목록을 이진 값으로 변환합니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "데이터를 텍스트에서 이진 값으로 디코딩합니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>을(를) 이진 값(<code>number</code> 목록)으로 변환한 결과를 반환합니다. <code>encoding</code>을(를) 지정하여 텍스트 값에 인코딩이 사용됨을 나타낼 수도 있습니다.\r\n      <code>encoding</code>에 사용할 수 있는 <code>BinaryEncoding</code> 값은 다음과 같습니다.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 인코딩</li>\r\n        <li><code>BinaryEncoding.Hex</code>: 16진수 인코딩</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "\"1011\"을 이진 값으로 디코딩합니다.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "16진수 인코딩을 사용하여 \"1011\"을 이진 값으로 디코딩합니다.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "이진 스트림 읽고 스트림의 콘텐츠 형식 및 형식 정보를 확인하려고 합니다.",
        "Documentation.LongDescription": "유추된 MIME 형식이 포함된 Content.Type 필드가 있는 레코드를 반환합니다.\r\n    유추된 콘텐츠 형식이 text/*이고 인코딩 코드 페이지가 검색되는 경우 스트림의 인코딩이 포함된 Content.Encoding 필드가 추가로 반환됩니다.\r\n    유추된 콘텐츠 형식이 text/csv이고 형식에 구분 기호가 사용되면 사용 가능한 구분 기호를 분석하기 위한 테이블이 포함된 Csv.PotentialDelimiter 필드가 추가로 반환됩니다.\r\n    유추된 콘텐츠 형식이 text/csv이고 가변 폭 형식이면 사용 가능한 고정 폭 열 위치를 분석하기 위한 목록이 포함된 Csv.PotentialPositions 필드가 추가로 반환됩니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "문자 수를 반환합니다.",
        "Documentation.LongDescription": "문자 수를 반환합니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "이진 값을 숫자 목록으로 변환합니다.",
        "Documentation.LongDescription": "이진 값을 숫자 목록으로 변환합니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "이진 데이터를 텍스트 형식으로 인코딩합니다.",
        "Documentation.LongDescription": "숫자의 이진 목록 <code>binary</code>을(를) 텍스트 값으로 변환한 결과를 반환합니다. 선택적으로 <code>encoding</code>을(를) 지정하여 생성된 텍스트 값에 인코딩이 사용됨을 나타낼 수도 있습니다.\r\n      <code>encoding</code>에 사용할 수 있는 <code>BinaryEncoding</code> 값은 다음과 같습니다.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 인코딩</li>\r\n        <li><code>BinaryEncoding.Hex</code>: 16진수 인코딩</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Binary.View를 통해 뷰에 정의된 처리기에서 throw될 때 대체를 트리거하지 않는 수정된 오류 레코드를 만듭니다.",
        "Documentation.LongDescription": "Binary.View를 통해 뷰에 정의된 핸들러에서 throw될 때 대체를 트리거하지 않는 <code>errorRecord</code>의 수정된 오류 레코드를 만듭니다.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Binary.View를 통해 보기에 정의된 핸들러가 가로챌 수 있는 함수를 만듭니다.",
        "Documentation.LongDescription": "<p><code>Binary.View</code>를 통해 만든 보기에서 처리할 수 있는 <code>function</code>을(를) 토대로 보기 함수를 만듭니다.</p>\r\n<p><code>Binary.View</code>의 <code>OnInvoke</code> 처리기를 사용하면 보기 함수에 대한 처리기를 정의할 수 있습니다.</p>\r\n<p>기본 제공 작업용 처리기와 마찬가지로, <code>OnInvoke</code> 처리기를 지정하지 않는 경우나 보기 함수를 처리하지 않는 경우 <code>function</code>이(가) 보기 위에 적용됩니다.</p>\r\n<p><code>Binary.View</code> 및 사용자 지정 보기 함수에 대한 자세한 설명을 확인하려면 게시된 Power Query 사용자 지정 커넥터 설명서를 참조하세요.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "7비트 가변 길이 인코딩을 사용하여 인코딩된 부호 있는 64비트 정수를 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "7비트 가변 길이 인코딩을 사용하여 인코딩된 부호 있는 64비트 정수를 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "7비트 가변 길이 인코딩을 사용하여 인코딩된 부호 없는 64비트 정수를 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "7비트 가변 길이 인코딩을 사용하여 인코딩된 부호 없는 64비트 정수를 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "부호 없는 8비트 정수를 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "부호 없는 8비트 정수를 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": ".NET 16바이트 10진수 값을 읽는 이진 형식입니다.",
        "Documentation.LongDescription": ".NET 16바이트 10진수 값을 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "8바이트 IEEE 배정밀도 부동 소수점 값을 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "8바이트 IEEE 배정밀도 부동 소수점 값을 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "일련의 항목을 읽고 목록을 반환하는 이진 형식을 반환합니다.",
        "Documentation.LongDescription": "일련의 항목을 읽고 <code>list</code>를 반환하는 이진 형식을 반환합니다. <code>binaryFormat</code> 매개 변수는 각 항목의 이진 형식을 지정합니다. 다음 세 가지 방법으로 읽을 항목 수를 결정할 수 있습니다. <ul><li><code>countOrCondition</code>이(가) 지정되지 않은 경우 항목이 더 이상 없을 때까지 이진 형식을 읽습니다.</li><li><code>countOrCondition</code>이(가) 숫자인 경우 해당 수만큼의 이진 형식을 읽습니다.</li><li><code>countOrCondition</code>이(가) 함수인 경우 읽을 각 항목에 대해 해당 함수를 호출합니다. 이 함수가 true를 반환하면 항목 읽기가 계속되고 false를 반환하면 항목 읽기가 중지됩니다. 마지막 항목은 목록에 포함됩니다.</li><li><code>countOrCondition</code>이(가) 이진 형식인 경우 목록 앞에 항목 수가 와야 하며, 해당 개수를 읽는 데는 지정된 형식이 사용됩니다.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "데이터 끝까지 바이트를 읽습니다.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "2바이트를 읽습니다.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "바이트 값이 2보다 크거나 같을 때까지 바이트를 읽습니다.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "0바이트를 읽고 Null을 반환하는 이진 형식입니다.",
        "Documentation.LongDescription": "0바이트를 읽고 Null을 반환하는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "레코드를 읽는 이진 형식을 반환합니다.",
        "Documentation.LongDescription": "레코드를 읽는 이진 형식을 반환합니다. <code>record</code> 매개 변수는 레코드의 형식을 지정합니다. 레코드의 각 필드마다 다른 이진 형식이 사용될 수 있습니다. 필드에 이진 형식 값이 아닌 값이 포함되어 있는 경우 해당 필드의 데이터는 읽지 않으며 해당 필드 값은 결과에 그대로 표시됩니다.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "16비트 정수 하나와 32비트 정수 하나를 포함하는 레코드를 읽습니다.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "부호 있는 16비트 정수를 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "부호 있는 16비트 정수를 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "부호 있는 32비트 정수를 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "부호 있는 32비트 정수를 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "부호 있는 64비트 정수를 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "부호 있는 64비트 정수를 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "4바이트 IEEE 단정밀도 부동 소수점 값을 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "4바이트 IEEE 단정밀도 부동 소수점 값을 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "텍스트 값을 읽는 이진 형식을 반환합니다.",
        "Documentation.LongDescription": "텍스트 값을 읽는 이진 형식을 반환합니다. <code>length</code>은(는) 디코딩할 바이트 수를 지정하거나, 텍스트 앞에 오는 길이의 이진 형식을 지정합니다. 선택적 <code>encoding</code> 값은 텍스트의 인코딩을 지정합니다. <code>encoding</code>을(를) 지정하지 않은 경우 인코딩은 유니코드 바이트 순서 표시에 따라 결정됩니다. 바이트 순서 표시가 없는 경우에는 <code>TextEncoding.Utf8</code>을 사용합니다.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "2바이트를 ASCII 텍스트로 디코딩합니다.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "바이트의 텍스트 길이가 텍스트 앞에 바이트로 나타나는 ASCII 텍스트를 디코딩합니다.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "부호 없는 16비트 정수를 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "부호 없는 16비트 정수를 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "부호 없는 32비트 정수를 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "부호 없는 32비트 정수를 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "부호 없는 64비트 정수를 읽는 이진 형식입니다.",
        "Documentation.LongDescription": "부호 없는 64비트 정수를 읽는 이진 형식입니다.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "지정된 값에서 8비트 정수를 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 8비트 정수 <code>number</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Byte.From</code>에서 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) 소수 부분 없이 8비트 정수 범위 내의 <code>number</code>이면 <code>value</code>이(가) 반환됩니다. 소수 부분이 있으면 지정된 반올림 모드로 숫자가 반올림됩니다. 기본 반올림 모드는 <code>RoundingMode.ToEven</code>입니다. <code>value</code>이(가) 다른 형식이면 <code>Number.FromText</code>를 사용하여 먼저 <code>number</code>로 변환합니다. 사용할 수 있는 반올림 모드는 <code>Number.Round</code>를 참조하세요. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code>의 8비트 정수 <code>number</code> 값을 가져옵니다.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code>를 사용하여 <code>\"4.5\"</code>의 8비트 정수 <code>number</code> 값을 가져옵니다.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "숫자를 텍스트 문자로 변환합니다.",
        "Documentation.LongDescription": "숫자에 해당하는 문자를 반환합니다.<br>\r\n    <br>\r\n    제공된 <code>number</code>은(는) 21비트 유니코드 코드 포인트여야 합니다.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "숫자를 해당하는 문자 값으로 변환합니다.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "문자를 숫자로 변환한 후 다시 변환합니다.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "\"웃는 얼굴\" 스마일 기호의 16진수 코드 포인트를 해당하는 UTF-16 서로게이트 쌍으로 변환합니다.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "문자를 숫자 값으로 변환합니다.",
        "Documentation.LongDescription": "<code>character</code>에 해당하는 숫자를 반환합니다.<br>\r\n    <br>\r\n    결과는 제공된 문자 또는 서로게이트 쌍으로 표시되는 21비트 유니코드 코드 포인트가 됩니다.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "문자를 해당하는 숫자 값으로 변환합니다.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "\"웃는 얼굴\" 스마일 기호의 UTF-16 서로게이트 쌍을 해당하는 16진수 코드 포인트로 변환합니다.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "지정된 구분 기호를 사용하여 텍스트 목록을 결합하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 구분 기호를 사용하여 텍스트 값 목록을 단일 텍스트 값으로 결합하는 함수를 반환합니다.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "세미콜론 구분 기호를 사용하여 텍스트 값 목록을 결합합니다.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "쉼표 구분 기호와 CSV 스타일 따옴표를 사용하여 두 열의 텍스트를 결합합니다.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "구분 기호 시퀀스를 사용하여 텍스트 목록을 결합하는 함수를 반환합니다.",
        "Documentation.LongDescription": "구분 기호 시퀀스를 사용하여 텍스트 값 목록을 단일 텍스트 값으로 결합하는 함수를 반환합니다.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "구분 기호 시퀀스를 사용하여 텍스트 값 목록을 결합합니다.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "지정된 길이를 사용하여 텍스트 목록을 결합하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 길이를 사용하여 텍스트 값 목록을 단일 텍스트 값으로 결합하는 함수를 반환합니다.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "각 입력 값에서 지정된 문자 수를 추출하여 텍스트 값 목록을 결합합니다.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "먼저 결과를 템플릿 텍스트로 미리 채운 후 지정된 문자 수를 추출하여 텍스트 값 목록을 결합합니다.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "지정된 출력 위치를 사용하여 텍스트 목록을 결합하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 출력 위치를 사용하여 텍스트 값 목록을 단일 텍스트 값으로 결합하는 함수를 반환합니다.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "텍스트 값 목록을 지정된 위치의 출력에 배치하여 결합합니다.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "지정된 위치와 길이를 사용하여 텍스트 목록을 결합하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 출력 위치와 길이를 사용하여 텍스트 값 목록을 단일 텍스트 값으로 결합하는 함수를 반환합니다. null 길이는 전체 텍스트 값을 포함해야 함을 나타냅니다.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "지정된 출력 위치와 길이를 사용하여 텍스트 값 목록을 결합합니다.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "지정된 문화권 및 대/소문자 구분을 기반으로 비교자 함수를 반환합니다.",
        "Documentation.LongDescription": "비교를 수행하기 위해 <code>culture</code> 및 <code>ignoreCase</code>에 의해 지정된 대소문자 구분을 사용하는 비교 함수를 반환합니다.<br>\r\n       <br>\r\n       비교자 함수는 두 개의 인수를 받아들이고 첫 번째 값이 두 번째 값보다 작은지, 같은지, 큰지에 따라 -1, 0 또는 1을 반환합니다.<br>\r\n       <br>\r\n       <code>ignoreCase</code>의 기본값은 false입니다. <code>culture</code>은 .NET Framework에서 지원하는 로캘 중 하나여야 합니다(예: \"en-US\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "\"en-US\" 로캘을 사용하여 \"a\"와 \"A\"를 비교한 후 값이 같은지 여부를 확인합니다.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "대/소문자 구분을 무시한 상태로 \"en-US\" 로캘을 사용하여 \"a\"와 \"A\"를 비교한 후 값이 같은지 여부를 확인합니다.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "구성원 속성 값에서 고유한 구성원 식별자를 반환합니다.",
        "Documentation.LongDescription": "구성원 속성 값에서 고유한 구성원 식별자를 반환합니다. <code>attribute</code>. 모든 다른 값에 대한 null을 반환합니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "속성의 키를 반환합니다.",
        "Documentation.LongDescription": "속성 <code>property</code>의 키를 반환합니다.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "지정된 값에서 통화 값을 반환합니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>currency</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Currency.From</code>에서 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) 통화 범위 내의 <code>number</code>이면 <code>value</code>의 소수부가 4자릿수로 반올림되어 반환됩니다. 지정된 <code>value</code>이(가) 기타 형식이면 <code>Number.FromText</code>를 사용하여 먼저 <code>number</code>로 변환합니다. 유효한 통화 범위는 <code>-922,337,203,685,477.5808</code>에서 <code>922,337,203,685,477.5807</code> 사이입니다. 사용할 수 있는 반올림 모드는 <code>Number.Round</code>를 참조하세요. 기본값은 <code>RoundingMode.ToEven</code>입니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1.23455\"</code>의 <code>currency</code> 값을 가져옵니다.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "<code>RoundingMode.Down</code>을 사용하여 <code>\"1.23455\"</code>의 <code>currency</code> 값을 가져옵니다.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "일 구성 요소를 반환합니다.",
        "Documentation.LongDescription": "<code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값의 일 구성 요소를 반환합니다.\r\n      <ul>\r\n        <li><code>dateTime</code>: 일 구성 요소를 추출할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 5월 14일 오후 05:00:00의 날짜 및 시간을 나타내는 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값의 일 구성 요소를 가져옵니다.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "제공된 값의 요일을 나타내는 숫자(0~6)를 반환합니다.",
        "Documentation.LongDescription": "제공된 <code>dateTime</code>의 요일을 나타내는 숫자(0~6)를 반환합니다.\r\n  <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n        <li><code>firstDayOfWeek</code>: 첫 번째 요일로 간주해야 하는 날을 나타내는 <code>Day</code> 값입니다. 허용되는 값은 Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday 또는 Day.Saturday입니다. 지정하지 않을 경우 문화권에 따른 기본값이 사용됩니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "일요일을 첫 번째 요일로 간주하여 요일을 2011년 2월 21일 월요일로 표시합니다.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "월요일을 첫 번째 요일로 간주하여 요일을 2011년 2월 21일 월요일로 표시합니다.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "주의 요일 이름을 반환합니다.",
        "Documentation.LongDescription": "제공된 <code>date</code>에 대한 요일 이름을 반환합니다. 선택적 <code>culture</code>(예: \"en-US\")이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "주의 요일 이름을 가져옵니다.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "연간 일을 나타내는 1에서 366 사이의 숫자를 반환합니다.",
        "Documentation.LongDescription": "지정된 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값 <code>dateTime</code>의 연간 일을 나타내는 숫자를 반환합니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 3월 1일이 해당 연도의 몇 번째 날에 속하는지 확인합니다.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "월간 일 수를 나타내는 28에서 31 사이의 숫자를 반환합니다.",
        "Documentation.LongDescription": "<code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값 <code>dateTime</code>의 월간 일 수를 반환합니다.\r\n <ul>\r\n        <li><code>dateTime</code>: 월간 일 수를 반환할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2011, 12, 01)></code>으로 표현된 12월의 일 수입니다.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "하루의 끝을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>(으)로 표현되는 하루의 끝을 반환합니다. 표준 시간대 정보는 유지됩니다.\r\n      <ul>\r\n        <li><code>dateTime</code>: 하루의 끝을 계산할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 5월 14일 오후 05:00:00에 대한 일의 끝을 가져옵니다.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "2011년 5월 17일 오후 05:00:00 -7:00에 대한 일의 끝을 가져옵니다.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "월의 끝을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>이(가) 포함된 월의 끝을 반환합니다.\r\n      <ul>\r\n        <li><code>dateTime</code>: 월의 끝을 계산할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 5월 14일에 대한 월의 끝을 가져옵니다.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "2011년 5월 17일 오후 05:00:00 -7:00에 대한 월의 끝을 가져옵니다.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "분기의 끝을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>이(가) 포함된 분기의 끝을 반환합니다. 표준 시간대 정보는 유지됩니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 분기의 끝을 계산할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 10월 10일 오전 8:00가 포함된 분기의 끝을 확인합니다.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "주의 끝을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>이(가) 포함된 주의 끝을 반환합니다.\r\n    이 함수는 선택 사항인 <code>Day</code>, <code>firstDayOfWeek</code>을(를) 사용하여 이 상대적 계산에 첫 번째 요일로 설정합니다. 기본값은 <code>Day.Sunday</code>입니다.\r\n      <ul>\r\n        <li><code>dateTime</code>: 주의 마지막 요일을 계산할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[선택 사항]</i> 주의 첫 번째 요일을 나타내는 <code>Day.Type</code> 값입니다. 가능한 값은 <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code>및 <code>Day.Saturday.</code>이고, 기본값은 <code>Day.Sunday</code>입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 5월 14일에 대한 주의 끝을 가져옵니다.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "일요일이 주의 첫 번째 요일일 경우 2011년 5월 17일 오후 05:00:00 -7:00에 대한 주의 끝을 가져옵니다.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "연도의 끝을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>이(가) 포함된 연도의 끝을 반환합니다(소수 자리 초 포함). 표준 시간대 정보는 유지됩니다.\r\n      <ul>\r\n        <li><code>dateTime</code>: 연도의 끝을 계산할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 5월 14일 오후 05:00:00에 대한 연도의 끝을 가져옵니다.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "2011년 5월 17일 오후 05:00:00 -7:00에 대한 연도의 끝을 가져옵니다.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "지정된 값에서 date를 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>date</code> 값을 반환합니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.\r\n지정된 <code>value</code>이(가) <code>null</code>이면 <code>Date.From</code>은 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) <code>date</code>이면 <code>value</code>이(가) 반환됩니다. 다음 형식의 값을 <code>date</code> 값으로 변환할 수 있습니다.\r\n      <ul>\r\n        <li><code>text</code>: 텍스트 표현에서 <code>date</code> 값으로 변환할 수 있습니다. 자세한 내용은 <code>Date.FromText</code>를 참조하세요.</li>\r\n        <li><code>datetime</code>: <code>value</code>의 날짜 구성 요소로 변환할 수 있습니다.</li>\r\n        <li><code>datetimezone</code>: <code>value</code>에 해당하는 현지 날짜/시간의 날짜 구성 요소로 변환할 수 있습니다.</li>\r\n        <li><code>number</code>: <code>value</code>(으)로 표현되는 OLE 자동화 날짜에 해당하는 날짜/시간의 날짜 구성 요소로 변환할 수 있습니다.</li>\r\n      </ul>\r\n<code>value</code>이(가) 기타 형식이면 오류가 반환됩니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>43910</code>을 <code>date</code> 값으로 변환합니다.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "<code>#datetime(1899, 12, 30, 06, 45, 12)</code>을 <code>date</code> 값으로 변환합니다.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "로컬, 유니버설 및 사용자 지정 날짜 형식에서 날짜를 만듭니다.",
        "Documentation.LongDescription": "텍스트 표현 <code>text</code>의 <code>date</code> 값을 만듭니다. 추가 속성을 지정하기 위해 선택적 <code>record</code> 매개 변수 <code>options</code>이(가) 제공될 수 있습니다. <code>record</code>에는 다음 필드가 포함될 수 있습니다.\r\n<ul>\r\n   <li><code>Format</code>: 사용할 형식을 나타내는 <code>text</code> 값입니다. 자세한 내용은 https://go.microsoft.com/fwlink/?linkid=2180104 및 https://go.microsoft.com/fwlink/?linkid=2180105를 참조하세요. 이 필드를 생략하거나 <code>null</code>을 제공하면 최선을 다해 날짜를 구문 분석하게 됩니다.</li>\r\n   <li><code>Culture</code> : <code>Format</code>이 Null이 아니면 <code>Culture</code>가 일부 형식 지정자를 제어합니다. 예를 들어, <code>“en-US”</code>에서 <code>“MMM”</code>은(는) <code>“Jan”, “Feb”, “Mar”, ...</code>이지만, <code>“ru-RU”</code>에서 <code>“MMM”</code>은(는) <code>“янв”, “фев”, “мар”, ...</code>입니다. <code>Format</code>이 <code>null</code>인 경우, <code>Culture</code>는 사용할 기본 형식을 제어합니다. <code>Culture</code>가 <code>null</code>이거나 생략된 경우, <code>Culture.Current</code>가 사용됩니다.</li>\r\n</ul>\r\n레거시 워크플로를 지원하기 위해, <code>options</code>도 텍스트 값이 될 수 있습니다. 이는 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>과(와) 동일한 동작을 갖습니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31\"</code>을 <code>date</code> 값으로 변환합니다.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "사용자 지정 형식 및 독일어 문화권을 사용하여 변환합니다.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "회교식 달력에서 1400의 시작 부분에 해당하는 양력의 날짜를 찾습니다.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "이 날짜가 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 날짜에 속하는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 날짜에 속하는지 여부를 나타냅니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간이 현재 날짜에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "이 날짜가 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 월에 속하는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 월에 속하는지 여부를 나타냅니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간이 현재 월에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "이 날짜가 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 분기에 속하는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 분기에 속하는지 여부를 나타냅니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간이 현재 분기에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "이 날짜가 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 주에 속하는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 주에 속하는지 여부를 나타냅니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간이 현재 주에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "이 날짜가 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 연도에 속하는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 연도에 속하는지 여부를 나타냅니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간이 현재 연도에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 날짜에 속하는지 여부를 나타냅니다. 현재 날짜에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 날짜에 속하는지 여부를 나타냅니다. 현재 날짜에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 날짜가 다음 날짜에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 월에 속하는지 여부를 나타냅니다. 현재 월에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 월에 속하는지 여부를 나타냅니다. 현재 월에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 월이 다음 월에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 분기에 속하는지 여부를 나타냅니다. 현재 분기에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 분기에 속하는지 여부를 나타냅니다. 현재 분기에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 분기가 다음 분기에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 주에 속하는지 여부를 나타냅니다. 현재 주에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 주에 속하는지 여부를 나타냅니다. 현재 주에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 주가 다음 주에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 다음 연도에 속하는지 여부를 나타냅니다. 현재 연도에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 연도에 속하는지 여부를 나타냅니다. 현재 연도에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 연도가 다음 연도에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 날짜에 속하는지 여부를 나타냅니다. 현재 날짜에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 날짜에 속하는지 여부를 나타냅니다. 현재 날짜에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 날짜가 이전 날짜에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 월에 속하는지 여부를 나타냅니다. 현재 월에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 월에 속하는지 여부를 나타냅니다. 현재 월에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 월이 이전 월에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 분기에 속하는지 여부를 나타냅니다. 현재 분기에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 분기에 속하는지 여부를 나타냅니다. 현재 분기에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 분기가 이전 분기에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 주에 속하는지 여부를 나타냅니다. 현재 주에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 주에 속하는지 여부를 나타냅니다. 현재 주에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 주가 이전 주에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜가 이전 연도에 속하는지 여부를 나타냅니다. 현재 연도에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 연도에 속하는지 여부를 나타냅니다. 현재 연도에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 연도가 이전 연도에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "이 날짜가 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 연도에 속하고 현재 날짜 또는 그 이전인지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간에 따라 결정되는 현재 연도에 속하고 현재 날짜 또는 그 이전인지 여부를 나타냅니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간이 연간 누계에 속하는지 여부를 확인합니다.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "이 날짜가 윤년에 속하는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 윤년에 속하는지 여부를 나타냅니다.\r\n <ul>\r\n        <li><code>dateTime</code>: 평가할 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2012, 01, 01)</code>가 나타내는 2012년이 윤년인지 여부를 확인합니다.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "월 구성 요소를 반환합니다.",
        "Documentation.LongDescription": "지정된 <code>datetime</code> 값 <code>dateTime</code>의 월 구성 요소를 반환합니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36)의 월을 확인합니다.",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "월 이름 구성 요소를 반환합니다.",
        "Documentation.LongDescription": "제공된 <code>date</code>에 대한 월 구성 요소 이름을 반환합니다. 선택적 <code>culture</code>(예: \"en-US\")이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "월 이름을 가져옵니다.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "날짜가 속하는 연도의 분기를 나타내는 숫자를 반환합니다.",
        "Documentation.LongDescription": "날짜 <code>dateTime</code>이(가) 속하는 연도의 분기를 나타내는 1에서 4 사이의 숫자를 반환합니다. <code>dateTime</code>은(는) <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값일 수 있습니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "날짜 #date(2011, 12, 31)가 속하는 연도의 분기를 확인합니다.",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "하루의 시작을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>(으)로 표현되는 일의 시작을 반환합니다.\r\n    <code>dateTime</code>은(는) <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값이어야 합니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 10월 10일 오전 8:00가 포함된 하루의 시작을 확인합니다.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "월의 시작을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>이(가) 포함된 월의 시작을 반환합니다.\r\n    <code>dateTime</code>은(는) <code>date</code> 또는 <code>datetime</code> 값이어야 합니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 10월 10일 오전 8:10:32가 포함된 월의 시작을 확인합니다.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "분기의 시작을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>이(가) 포함된 분기의 시작을 반환합니다.\r\n      <code>dateTime</code>은(는) <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값이어야 합니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 10월 10일 오전 8:00가 포함된 분기의 시작을 확인합니다.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "주의 시작을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>이(가) 포함된 주의 시작을 반환합니다.\r\n      <code>dateTime</code>은(는) <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값이어야 합니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 10월 11일 화요일 주의 시작을 확인하세요.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "월요일을 주의 시작으로 사용하여 2011년 10월 11일 화요일 주의 시작을 찾습니다.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "연도의 시작을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>이(가) 포함된 연도의 시작을 반환합니다.\r\n      <code>dateTime</code>은(는) <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값이어야 합니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 10월 10일 오전 8:10:32가 포함된 연도의 시작을 확인합니다.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "date 값의 일부를 포함하는 레코드를 반환합니다.",
        "Documentation.LongDescription": "지정된 date 값 <code>date</code>의 일부를 포함하는 레코드를 반환합니다.\r\n <ul>\r\n        <li><code>date</code>: 일부분의 레코드를 계산할 <code>date</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2011, 12, 31)</code> 값을 date 값의 일부를 포함하는 레코드로 변환합니다.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "date 값의 텍스트 표현을 반환합니다.",
        "Documentation.LongDescription": "<code>date</code>의 텍스트 표현을 반환합니다. 추가 속성을 지정하기 위해 선택적 <code>record</code> 매개 변수 <code>options</code>이(가) 제공될 수 있습니다. <code>culture</code>은(는) 레거시 워크플로에만 사용됩니다. <code>record</code>에는 다음 필드가 포함될 수 있습니다.\r\n<ul>\r\n   <li><code>Format</code>:사용할 형식을 나타내는 <code>text</code> 값입니다. 자세한 내용은 https://go.microsoft.com/fwlink/?linkid=2180104 및 https://go.microsoft.com/fwlink/?linkid=2180105를 참조하세요. 이 필드를 생략하거나 <code>null</code>을 제공하면 <code>Culture</code>에서 정의한 기본값을 사용하여 날짜 형식이 지정됩니다.</li>\r\n   <li><code>Culture</code>: <code>Format</code>이 Null이 아니면 <code>Culture</code>가 일부 형식 지정자를 제어합니다. 예를 들어, <code>“en-US”</code>에서 <code>“MMM”</code>은(는) <code>“Jan”, “Feb”, “Mar”, ...</code>이지만, <code>“ru-RU”</code>에서 <code>“MMM”</code>은(는) <code>“янв”, “фев”, “мар”, ...</code>입니다. <code>Format</code>이 <code>null</code>인 경우, <code>Culture</code>는 사용할 기본 형식을 제어합니다. <code>Culture</code>가 <code>null</code>이거나 생략된 경우, <code>Culture.Current</code>가 사용됩니다.</li>\r\n</ul>\r\n레거시 워크플로를 지원하기 위해, <code>options</code> 및 <code>culture</code>도 텍스트 값이 될 수 있습니다. 이는 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>과(와) 동일한 동작을 갖습니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2010, 12, 31)</code>을 <code>text</code> 값으로 변환합니다. <i>결과 출력은 현재 문화권에 따라 다를 수 있습니다.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "사용자 지정 형식 및 독일어 문화권을 사용하여 변환합니다.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "양력에서 2000년 1월 1일에 해당하는 회교실 달력의 연도를 찾습니다.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "이 날짜가 속하는 월의 주를 나타내는 1에서 6 사이의 숫자를 반환합니다.",
        "Documentation.LongDescription": "날짜 <code>dateTime</code>이(가) 속하는 월의 주를 나타내는 1에서 6 사이의 숫자를 반환합니다.\r\n <ul>\r\n        <li><code>dateTime</code>: 월간 주를 확인할 <code>datetime</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 3월 15일이 3월의 몇 번째 주에 속하는지 확인합니다.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "이 날짜가 속하는 연간 주를 나타내는 1에서 54 사이의 숫자를 반환합니다.",
        "Documentation.LongDescription": "날짜 <code>dateTime</code>이(가) 속하는 연도의 주를 나타내는 1에서 54 사이의 숫자를 반환합니다.\r\n <ul>\r\n        <li><code>dateTime</code>: week-of-the-year를 확인하는 <code>datetime</code> 값입니다.</li>\r\n        <li><code>firstDayOfWeek</code>: 새로운 한 주의 시작으로 고려할 일을 나타내는 선택적 <code>Day.Type</code> 값입니다(예: <code>Day.Sunday</code>). 지정하지 않을 경우 문화권에 종속된 기본값이 사용됩니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 3월 27일이 해당 연도의 몇 번째 주에 속하는지 확인합니다.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "월요일을 주의 시작으로 사용해 2011년 3월 27일이 해당 연도의 몇 번째 주에 속하는지 확인합니다.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "연도 구성 요소를 반환합니다.",
        "Documentation.LongDescription": "지정된 <code>datetime</code> 값 <code>dateTime</code>의 연도 구성 요소를 반환합니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36)의 연도를 확인합니다.",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "지정된 date, datetime 또는 datetimezone 값의 날짜 구성 요소를 반환합니다.",
        "Documentation.LongDescription": "지정된 <code>date</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값의 날짜 구성 요소 <code>dateTime</code>을(를) 반환합니다.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2010, 12, 31, 11, 56, 02)의 날짜 값을 확인합니다.",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "지정된 값에서 datetime을 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>datetime</code> 값을 반환합니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.\r\n지정된 <code>value</code>이(가) <code>null</code>이면 <code>DateTime.From</code>은 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) <code>datetime</code>이면 <code>value</code>이(가) 반환됩니다. 다음 형식의 값을 <code>datetime</code> 값으로 변환할 수 있습니다.\r\n      <ul>\r\n        <li><code>text</code>: 텍스트 표현에서 <code>datetime</code> 값으로 변환할 수 있습니다. 자세한 내용은 <code>DateTime.FromText</code>를 참조하세요.</li>\r\n        <li><code>date</code>: 날짜 구성 요소로 <code>value</code>을(를) 사용하고 시간 구성 요소로 <code>12:00:00 AM</code>을 사용하여 <code>datetime</code>으로 변환할 수 있습니다.</li>\r\n        <li><code>datetimezone</code>: <code>value</code>에 해당하는 현지 <code>datetime</code>으로 변환할 수 있습니다.</li>\r\n        <li><code>time</code>: 날짜 구성 요소로 OLE 자동화 날짜 <code>0</code>에 해당하는 날짜를 사용하고 시간 구성 요소로 <code>value</code>을(를) 사용하여 <code>datetime</code>으로 변환할 수 있습니다.</li>\r\n        <li><code>number</code>: <code>value</code>(으)로 표현되는 OLE 자동화 날짜에 해당하는 <code>datetime</code>으로 변환할 수 있습니다. </li>\r\n      </ul>\r\n<code>value</code>이(가) 기타 형식이면 오류가 반환됩니다.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(06, 45, 12)</code>를 <code>datetime</code> 값으로 변환합니다.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "<code>#date(1975, 4, 4)</code>를 <code>datetime</code> 값으로 변환합니다.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "64비트 long 형식의 숫자에서 datetime을 만듭니다.",
        "Documentation.LongDescription": "<code>fileTime</code> 값에서 <code>datetime</code> 값을 만든 후 이를 현지 표준 시간대로 변환합니다. filetime은 UTC(Coordinated Universal Time) 서기 1601년 1월 1일 자정 12시(C.E.) 이후 경과된 시간을 100나노초 간격의 수로 나타내는 Windows 파일 시간 값입니다.\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>129876402529842245</code>를 datetime 값으로 변환합니다.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "현지 및 범용 datetime 형식에서 datetimezone을 만듭니다.",
        "Documentation.LongDescription": "텍스트 표현 <code>text</code>의 <code>datetime</code> 값을 만듭니다. 추가 속성을 지정하기 위해 선택적 <code>record</code> 매개 변수 <code>options</code>이(가) 제공될 수 있습니다. <code>record</code>에는 다음 필드가 포함될 수 있습니다.\r\n<ul>\r\n   <li><code>Format</code>: 사용할 형식을 나타내는 <code>text</code> 값입니다. 자세한 내용은 https://go.microsoft.com/fwlink/?linkid=2180104 및 https://go.microsoft.com/fwlink/?linkid=2180105를 참조하세요. 이 필드를 생략하거나 <code>null</code>을 제공하면 최선을 다해 날짜를 구문 분석하게 됩니다.</li>\r\n   <li><code>Culture</code> : <code>Format</code>이 Null이 아니면 <code>Culture</code>가 일부 형식 지정자를 제어합니다. 예를 들어, <code>“en-US”</code>에서 <code>“MMM”</code>은(는) <code>“Jan”, “Feb”, “Mar”, ...</code>이지만, <code>“ru-RU”</code>에서 <code>“MMM”</code>은(는) <code>“янв”, “фев”, “мар”, ...</code>입니다. <code>Format</code>이 <code>null</code>인 경우, <code>Culture</code>는 사용할 기본 형식을 제어합니다. <code>Culture</code>가 <code>null</code>이거나 생략된 경우, <code>Culture.Current</code>가 사용됩니다.</li>\r\n</ul>\r\n레거시 워크플로를 지원하기 위해, <code>options</code>도 텍스트 값이 될 수 있습니다. 이는 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>과(와) 동일한 동작을 갖습니다.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31T01:30:00\"</code>를 datetime 값으로 변환합니다.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "<code>\"2010-12-31T01:30:00.121212\"</code>를 datetime 값으로 변환합니다.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "<code>\"2010-12-31T01:30:00\"</code>를 datetime 값으로 변환합니다.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "<code>\"20101231T013000\"</code>를 datetime 값으로 변환합니다.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "이 날짜/시간이 시스템의 현재 날짜 및 시간을 기준으로 현재 시간에 포함되는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 현재 시간에 포함되는지 여부를 나타냅니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간이 현재 시간에 포함되는지 여부를 확인합니다.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "이 날짜/시간이 시스템의 현재 날짜 및 시간을 기준으로 현재 분에 포함되는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 현재 분에 포함되는지 여부를 나타냅니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간이 현재 분에 포함되는지 여부를 확인합니다.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "이 날짜/시간이 시스템의 현재 날짜 및 시간을 기준으로 현재 초에 포함되는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 현재 초에 포함되는지 여부를 나타냅니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간이 현재 초에 포함되는지 여부를 확인합니다.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 다음 시간에 속하는지 여부를 나타냅니다. 현재 시간에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 시간에 속하는지 여부를 나타냅니다. 현재 시간에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 시간이 다음 시간에 포함되는지 여부를 확인합니다.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 다음 분에 속하는지 여부를 나타냅니다. 현재 분에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 분에 속하는지 여부를 나타냅니다. 현재 분에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 분이 다음 분에 포함되는지 여부를 확인합니다.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 다음 초에 속하는지 여부를 나타냅니다. 현재 초에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 다음 초에 속하는지 여부를 나타냅니다. 현재 초에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이후의 초가 다음 초에 포함되는지 여부를 확인합니다.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 이전 시간에 속하는지 여부를 나타냅니다. 현재 시간에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 시간에 속하는지 여부를 나타냅니다. 현재 시간에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 시간이 이전 시간에 포함되는지 여부를 확인합니다.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 이전 분에 속하는지 여부를 나타냅니다. 현재 분에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 분에 속하는지 여부를 나타냅니다. 현재 분에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 분이 이전 분에 포함되는지 여부를 확인합니다.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "시스템의 현재 날짜 및 시간을 기준으로 이 날짜/시간이 이전 초에 속하는지 여부를 나타냅니다. 현재 초에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>이(가) 시스템의 현재 날짜 및 시간을 기준으로 이전 초에 속하는지 여부를 나타냅니다. 현재 초에 속하는 값을 전달하는 경우 이 함수는 False를 반환합니다.\r\n      <ul>\r\n      <li><code>dateTime</code>: 평가할 <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "현재 시스템 시간 이전의 초가 이전 초에 포함되는지 여부를 확인합니다.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "지정된 datetime 값의 시간 부분을 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>의 시간 부분을 반환합니다.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2010, 12, 31, 11, 56, 02)의 시간 값을 확인합니다.",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "datetime 값의 일부를 포함하는 레코드를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetime 값 <code>dateTime</code>의 일부를 포함하는 레코드를 반환합니다.\r\n <ul>\r\n        <li><code>dateTime</code>: 일부분의 레코드를 계산할 <code>datetime</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetime(2011, 12, 31, 11, 56, 2)</code> 값을 Date 및 Time 값을 포함하는 레코드로 변환합니다.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "datetime 값의 텍스트 표현을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>의 텍스트 표현을 반환합니다. 추가 속성을 지정하기 위해 선택적 <code>record</code> 매개 변수 <code>options</code>이(가) 제공될 수 있습니다. <code>culture</code>은(는) 레거시 워크플로에만 사용됩니다. <code>record</code>에는 다음 필드가 포함될 수 있습니다.\r\n<ul>\r\n   <li><code>Format</code>:사용할 형식을 나타내는 <code>text</code> 값입니다. 자세한 내용은 https://go.microsoft.com/fwlink/?linkid=2180104 및 https://go.microsoft.com/fwlink/?linkid=2180105를 참조하세요. 이 필드를 생략하거나 <code>null</code>을 제공하면 <code>Culture</code>에서 정의한 기본값을 사용하여 날짜 형식이 지정됩니다.</li>\r\n   <li><code>Culture</code>: <code>Format</code>이 Null이 아니면 <code>Culture</code>가 일부 형식 지정자를 제어합니다. 예를 들어, <code>“en-US”</code>에서 <code>“MMM”</code>은(는) <code>“Jan”, “Feb”, “Mar”, ...</code>이지만, <code>“ru-RU”</code>에서 <code>“MMM”</code>은(는) <code>“янв”, “фев”, “мар”, ...</code>입니다. <code>Format</code>이 <code>null</code>인 경우, <code>Culture</code>는 사용할 기본 형식을 제어합니다. <code>Culture</code>가 <code>null</code>이거나 생략된 경우, <code>Culture.Current</code>가 사용됩니다.</li>\r\n</ul>\r\n레거시 워크플로를 지원하기 위해, <code>options</code> 및 <code>culture</code>도 텍스트 값이 될 수 있습니다. 이는 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>과(와) 동일한 동작을 갖습니다.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetime(2010, 12, 31, 01, 30, 25)</code>을 <code>text</code> 값으로 변환합니다. <i>결과 출력은 현재 문화권에 따라 다를 수 있습니다.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "사용자 지정 형식 및 독일어 문화권을 사용하여 변환합니다.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "ISO 8601 패턴을 사용하여 변환합니다.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "지정된 값에서 datetimezone을 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>datetimezone</code> 값을 반환합니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.\r\n지정된 <code>value</code>이(가) <code>null</code>이면 <code>DateTimeZone.From</code>은 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) <code>datetimezone</code>이면 <code>value</code>이(가) 반환됩니다. 다음 형식의 값을 <code>datetimezone</code> 값으로 변환할 수 있습니다.\r\n      <ul>\r\n        <li><code>text</code>: 텍스트 표현에서 <code>datetimezone</code> 값으로 변환할 수 있습니다. 자세한 내용은 <code>DateTimeZone.FromText</code>를 참조하세요.</li>\r\n        <li><code>date</code>: 날짜 구성 요소로 <code>value</code>을(를) 사용하고 시간 구성 요소로 <code>12:00:00 AM</code>을 사용하고 현지 표준 시간대에 해당하는 오프셋을 사용하여 <code>datetimezone</code>으로 변환할 수 있습니다.</li>\r\n        <li><code>datetime</code>: 날짜/시간으로 <code>value</code>을(를) 사용하고 현지 표준 시간대에 해당하는 오프셋을 사용하여 <code>datetimezone</code>으로 변환할 수 있습니다.</li>\r\n        <li><code>time</code>: 날짜 구성 요소로 OLE 자동화 날짜 <code>0</code>에 해당하는 날짜를 사용하고 시간 구성 요소로 <code>value</code>을(를) 사용하고 현지 표준 시간대에 해당하는 오프셋을 사용하여 <code>datetimezone</code>으로 변환할 수 있습니다.</li>\r\n        <li><code>number</code>: <code>value</code>(으)로 표현되는 OLE 자동화 날짜에 해당하는 날짜/시간을 사용하고 현지 표준 시간대에 해당하는 오프셋을 사용하여 <code>datetimezone</code>으로 변환할 수 있습니다.</li>\r\n      </ul>\r\n<code>value</code>이(가) 기타 형식이면 오류가 반환됩니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2020-10-30T01:30:00-08:00\"</code>을 <code>datetimezone</code> 값으로 변환합니다.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "64비트 long 형식의 숫자에서 datetimezone을 만듭니다.",
        "Documentation.LongDescription": "<code>fileTime</code> 값에서 <code>datetimezone</code> 값을 만든 후 이를 현지 표준 시간대로 변환합니다. filetime은 UTC(Coordinated Universal Time) 서기 1601년 1월 1일 자정 12시(C.E.) 이후 경과된 시간을 100나노초 간격의 수로 나타내는 Windows 파일 시간 값입니다.\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>129876402529842245</code>를 datetimezone 값으로 변환합니다.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "로컬, 유니버설 및 사용자 지정 datetimezone 형식에서 datetimezone을 만듭니다.",
        "Documentation.LongDescription": "텍스트 표현 <code>text</code>의 <code>datetimezone</code> 값을 만듭니다. 추가 속성을 지정하기 위해 선택적 <code>record</code> 매개 변수 <code>options</code>이(가) 제공될 수 있습니다. <code>record</code>에는 다음 필드가 포함될 수 있습니다.\r\n<ul>\r\n   <li><code>Format</code>: 사용할 형식을 나타내는 <code>text</code> 값입니다. 자세한 내용은 https://go.microsoft.com/fwlink/?linkid=2180104 및 https://go.microsoft.com/fwlink/?linkid=2180105를 참조하세요. 이 필드를 생략하거나 <code>null</code>을 제공하면 최선을 다해 날짜를 구문 분석하게 됩니다.</li>\r\n   <li><code>Culture</code> : <code>Format</code>이 Null이 아니면 <code>Culture</code>가 일부 형식 지정자를 제어합니다. 예를 들어, <code>“en-US”</code>에서 <code>“MMM”</code>은(는) <code>“Jan”, “Feb”, “Mar”, ...</code>이지만, <code>“ru-RU”</code>에서 <code>“MMM”</code>은(는) <code>“янв”, “фев”, “мар”, ...</code>입니다. <code>Format</code>이 <code>null</code>인 경우, <code>Culture</code>는 사용할 기본 형식을 제어합니다. <code>Culture</code>가 <code>null</code>이거나 생략된 경우, <code>Culture.Current</code>가 사용됩니다.</li>\r\n</ul>\r\n레거시 워크플로를 지원하기 위해, <code>options</code>도 텍스트 값이 될 수 있습니다. 이는 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>과(와) 동일한 동작을 갖습니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31T01:30:00-08:00\"</code>을 <code>datetimezone</code> 값으로 변환합니다.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "사용자 지정 형식 및 독일어 문화권을 사용하여 변환합니다.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "ISO 8601을 사용하여 변환합니다.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "지정된 datetimezone 값에서 표준 시간대 정보를 제거합니다.",
        "Documentation.LongDescription": "<code>dateTimeZone</code>에서 표준 시간대 정보가 제거된 #datetime 값을 반환합니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0) 값에서 표준 시간대 정보를 제거합니다.",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "표준 시간대 구성 요소를 현지 표준 시간대로 변환합니다.",
        "Documentation.LongDescription": "datetimezone 값 <code>dateTimeZone</code>의 표준 시간대 정보를 현지 표준 시간대 정보로 변경합니다.\r\n    <code>dateTimeZone</code>에 표준 시간대 구성 요소가 없으면 현지 표준 시간대 정보가 추가됩니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30)의 표준 시간대 정보를 현지 표준 시간대(PST로 가정)로 변경합니다.",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "datetimezone 값의 일부를 포함하는 레코드를 반환합니다.",
        "Documentation.LongDescription": "지정된 datetimezone 값 <code>dateTimeZone</code>의 일부를 포함하는 레코드를 반환합니다.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: 일부분의 레코드를 계산할 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> 값을 Date, Time 및 Zone 값을 포함하는 레코드로 변환합니다.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "datetimezone 값의 텍스트 표현을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTimeZone</code>의 텍스트 표현을 반환합니다. 추가 속성을 지정하기 위해 선택적 <code>record</code> 매개 변수 <code>options</code>이(가) 제공될 수 있습니다. <code>culture</code>은(는) 레거시 워크플로에만 사용됩니다. <code>record</code>에는 다음 필드가 포함될 수 있습니다.\r\n<ul>\r\n   <li><code>Format</code>:사용할 형식을 나타내는 <code>text</code> 값입니다. 자세한 내용은 https://go.microsoft.com/fwlink/?linkid=2180104 및 https://go.microsoft.com/fwlink/?linkid=2180105를 참조하세요. 이 필드를 생략하거나 <code>null</code>을 제공하면 <code>Culture</code>에서 정의한 기본값을 사용하여 날짜 형식이 지정됩니다.</li>\r\n   <li><code>Culture</code>: <code>Format</code>이 Null이 아니면 <code>Culture</code>가 일부 형식 지정자를 제어합니다. 예를 들어, <code>“en-US”</code>에서 <code>“MMM”</code>은(는) <code>“Jan”, “Feb”, “Mar”, ...</code>이지만, <code>“ru-RU”</code>에서 <code>“MMM”</code>은(는) <code>“янв”, “фев”, “мар”, ...</code>입니다. <code>Format</code>이 <code>null</code>인 경우, <code>Culture</code>는 사용할 기본 형식을 제어합니다. <code>Culture</code>가 <code>null</code>이거나 생략된 경우, <code>Culture.Current</code>가 사용됩니다.</li>\r\n</ul>\r\n레거시 워크플로를 지원하기 위해, <code>options</code> 및 <code>culture</code>도 텍스트 값이 될 수 있습니다. 이는 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>과(와) 동일한 동작을 갖습니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code>을 <code>text</code> 값으로 변환합니다. <i>결과 출력은 현재 문화권에 따라 다를 수 있습니다.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "사용자 지정 형식 및 독일어 문화권을 사용하여 변환합니다.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "ISO 8601 패턴을 사용하여 변환합니다.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "표준 시간대 구성 요소를 UTC 표준 시간대로 변환합니다.",
        "Documentation.LongDescription": "datetime 값 <code>dateTimeZone</code>의 표준 시간대 정보를 UTC(Coordinated Universal Time) 표준 시간대 정보로 변경합니다.\r\n    <code>dateTimeZone</code>에 표준 시간대 구성 요소가 없으면 UTC 표준 시간대 정보가 추가됩니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30)의 표준 시간대 정보를 UTC 표준 시간대로 변경합니다.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "값의 표준 시간대를 변경합니다.",
        "Documentation.LongDescription": "값의 표준 시간대를 변경합니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "값의 표준 시간대를 변경합니다.",
        "Documentation.LongDescription": "값의 표준 시간대를 변경합니다.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "지정된 값에서 10진수를 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 Decimal <code>number</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Decimal.From</code>에서 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) Decimal 범위 내의 <code>number</code>이면 <code>value</code>이(가) 반환되고, 그렇지 않으면 오류가 반환됩니다. <code>value</code>이(가) 기타 형식이면 <code>Number.FromText</code>를 사용하여 먼저 <code>number</code>로 변환합니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4.5\"</code>의 10진수 <code>number</code> 값을 가져옵니다.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Delta Lake 테이블의 내용을 반환합니다.",
        "Documentation.LongDescription": "Delta Lake 테이블의 내용을 반환합니다.",
        "Documentation.Category": "데이터 액세스",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "지정된 값에서 Double을 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 Double <code>number</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Double.From</code>에서 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) Double 범위 내의 <code>number</code>이면 <code>value</code>이(가) 반환되고, 그렇지 않으면 오류가 반환됩니다. <code>value</code>이(가) 다른 형식이면 <code>Number.FromText</code>를 사용하여 먼저 <code>number</code>로 변환합니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code>의 Double <code>number</code> 값을 가져옵니다.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "기간의 일 부분을 반환합니다.",
        "Documentation.LongDescription": "<code>duration</code> 일 부분을 반환합니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "두 날짜 사이의 일 수를 추출합니다.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "지정된 값에서 duration을 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>duration</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Duration.From</code>은 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) <code>duration</code>이면 <code>value</code>이(가) 반환됩니다. 다음 형식의 값을 <code>duration</code> 값으로 변환할 수 있습니다.\r\n      <ul>\r\n        <li><code>text</code>: 텍스트 경과 시간 형식(d.h:m:s)에서 <code>duration</code> 값으로 변환할 수 있습니다. 자세한 내용은 <code>Duration.FromText</code>를 참조하세요.</li>\r\n        <li><code>number</code>: <code>value</code>(으)로 표현된 정수 및 소수 일 수에 해당하는 <code>duration</code>으로 변환할 수 있습니다.</li>\r\n      </ul>\r\n<code>value</code>이(가) 기타 형식이면 오류가 반환됩니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>2.525</code>를 <code>duration</code> 값으로 변환합니다.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "텍스트 경과 시간 형식(d.h:m:s)에서 기간 값을 반환합니다.",
        "Documentation.LongDescription": "지정된 텍스트 <code>text</code>에서 기간 값을 반환합니다. 이 함수는 다음 형식을 구문 분석할 수 있습니다.\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (모든 범위가 포함됨)<br>\r\n        ddd: 날짜 값입니다.<br>\r\n        hh: 0~23의 시간 값입니다.<br>\r\n        mm: 0~59의 분 값입니다.<br>\r\n        ss: 0~59의 초 값입니다.<br>\r\n        ff: 0~9999999의 초 분할 값입니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2.05:55:20\"</code>을 <code>duration</code> 값으로 변환합니다.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "기간의 시간 부분을 반환합니다.",
        "Documentation.LongDescription": "<code>duration</code> 시간 부분을 반환합니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "기간 값에서 시간을 추출합니다.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "기간의 분 부분을 반환합니다.",
        "Documentation.LongDescription": "<code>duration</code> 분 부분을 반환합니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "기간 값에서 분을 추출합니다.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "기간의 초 부분을 반환합니다.",
        "Documentation.LongDescription": "<code>duration</code> 초 부분을 반환합니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "기간 값에서 초를 추출합니다.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "기간의 일부를 포함하는 레코드를 반환합니다.",
        "Documentation.LongDescription": "기간 값 <code>duration</code>의 일부를 포함하는 레코드를 반환합니다. \r\n  <ul>\r\n        <li><code>duration</code>: 레코드를 만드는 데 사용할 <code>duration</code>입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>#duration(2, 5, 55, 20)</code>을 일, 시간, 분 및 초(해당되는 경우) 등의 일부를 포함하는 레코드로 변환합니다.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "\"d.h:m:s\" 형식의 텍스트를 반환합니다.",
        "Documentation.LongDescription": "지정된 기간 값 <code>duration</code>을(를) \"day.hour:mins:sec\" 형태의 텍스트 표현으로 반환합니다.\r\n <ul>\r\n        <li><code>duration</code>: 텍스트 표현을 계산하는 <code>duration</code>입니다.</li>\r\n  <li><code>format</code>: <i>[선택 사항]</i> 더 이상 사용되지 않으며 Null이 아닌 경우 오류가 발생</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>#duration(2, 5, 55, 20)</code>을 텍스트 값으로 변환합니다.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "이 기간이 걸쳐 있는 총 일수를 반환합니다.",
        "Documentation.LongDescription": "<code>duration</code>(으)로 범위가 지정된 총 일 수를 반환합니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "기간 값으로 범위가 지정된 총 일 수를 찾습니다.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "이 기간이 걸쳐 있는 총 시간을 반환합니다.",
        "Documentation.LongDescription": "<code>duration</code>(으)로 범위가 지정된 총 시간을 반환합니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "기간 값으로 범위가 지정된 총 시간을 찾습니다.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "이 기간이 걸쳐 있는 총 분 수를 반환합니다.",
        "Documentation.LongDescription": "<code>duration</code>(으)로 범위가 지정된 총 기간(분)을 반환합니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "기간 값으로 범위가 지정된 총 기간(분)을 찾습니다.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "이 기간이 걸쳐 있는 총 초 수를 반환합니다.",
        "Documentation.LongDescription": "<code>duration</code>(으)로 범위가 지정된 총 기간(초)을 반환합니다.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "기간 값으로 범위가 지정된 총 기간(초)을 찾습니다.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "지정된 이유, 메시지 및 세부 정보에 대한 텍스트 값에서 오류 레코드를 반환합니다.",
        "Documentation.LongDescription": "지정된 이유, 메시지 및 세부 정보에 대한 텍스트 값에서 오류 레코드를 반환합니다.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "이 기능은 내부용입니다.",
        "Documentation.LongDescription": "이 기능은 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "상수 값의 M 소스 코드 표현을 반환합니다.",
        "Documentation.LongDescription": "상수 값의 M 소스 코드 표현을 반환합니다.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "숫자 값의 M 소스 코드 표현을 가져옵니다.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "날짜 값의 M 소스 코드 표현을 가져옵니다.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "텍스트 값의 M 소스 코드 표현을 가져옵니다.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "M 식의 계산 결과를 반환합니다.",
        "Documentation.LongDescription": "<code>environment</code>에 정의된 참조할 수 있는 식별자를 사용하여 M 식 <code>document</code>의 계산 결과를 반환합니다.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "단순한 합계를 계산합니다.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "더 복잡한 합계를 계산합니다.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "식별자를 사용하여 텍스트 값의 연결을 평가합니다.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "식별자의 M 소스 코드 표현을 반환합니다.",
        "Documentation.LongDescription": "식별자 <code>name</code>의 M 소스 코드 표현을 반환합니다.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "식별자의 M 소스 코드 표현을 가져옵니다.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "공백을 포함하는 식별자의 M 소스 코드 표현을 가져옵니다.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "지정된 파일의 내용을 이진 형식으로 반환합니다.",
        "Documentation.LongDescription": "<code>path</code> 파일의 내용을 이진으로 반환합니다. <code>options</code> 매개 변수는 현재 내부 전용입니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "특정 함수가 데이터 원본으로 간주되는지 여부를 반환합니다.",
        "Documentation.LongDescription": "<code>function</code>이(가) 데이터 원본으로 간주되는지 여부를 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "WKT(Well-Known Text) 형식의 지리적 값을 나타내는 텍스트를 구조적 레코드로 변환합니다.",
        "Documentation.LongDescription": "WKT(Well-Known Text) 형식의 지리적 값을 나타내는 텍스트를 구조적 레코드로 변환합니다. WKT는 OGC(Open Geospatial Consortium)에서 정의한 표준 형식이며, SQL Server를 포함한 데이터베이스에서 사용되는 일반적인 직렬화 형식입니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "구조적 지리적 지점 값을 WKT(Well-Known Text) 표현으로 변환합니다.",
        "Documentation.LongDescription": "OGC(Open Geospatial Consortium)에서 정의한 대로 구조적 지리적 지점 값을 WKT(Well-Known Text) 표현으로 변환합니다. SQL Server를 포함한 많은 데이터베이스에서 사용되는 직렬화 형식이기도 합니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "WKT(Well-Known Text) 형식의 기하학적 값을 나타내는 텍스트를 구조적 레코드로 변환합니다.",
        "Documentation.LongDescription": "WKT(Well-Known Text) 형식의 기하학적 값을 나타내는 텍스트를 구조적 레코드로 변환합니다. WKT는 OGC(Open Geospatial Consortium)에서 정의한 표준 형식이며, SQL Server를 포함한 데이터베이스에서 사용되는 일반적인 직렬화 형식입니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "구조적 기하학적 지점 값을 WKT(Well-Known Text) 표현으로 변환합니다.",
        "Documentation.LongDescription": "OGC(Open Geospatial Consortium)에서 정의한 대로 구조적 기하학적 지점 값을 WKT(Well-Known Text) 표현으로 변환합니다. SQL Server를 포함한 많은 데이터베이스에서 사용되는 직렬화 형식이기도 합니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "지정된 값에서 GUID 값을 반환합니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>Guid.Type</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Guid.From</code>이 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) 허용되는 형식인지 확인하기 위한 검사가 수행됩니다. 허용되는 형식은 예제에 나와 있습니다.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "GUID는 32자리 연속 16진수로 제공할 수 있습니다.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID는 하이픈을 사용하여 8-4-4-4-12 블록으로 구분된 32자리 16진수로 제공할 수 있습니다.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID는 하이픈으로 구분하고 대괄호로 묶은 32자리 16진수로 제공할 수 있습니다.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID는 하이픈으로 구분하고 괄호로 묶은 32자리 16진수로 제공할 수 있습니다.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "지정된 값에서 16비트 정수를 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 16비트 정수 <code>number</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Int16.From</code>에서 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) 소수 부분 없이 16비트 정수 범위 내의 <code>number</code>이면 <code>value</code>이(가) 반환됩니다. 소수 부분이 있으면 지정된 반올림 모드로 숫자가 반올림됩니다. 기본 반올림 모드는 <code>RoundingMode.ToEven</code>입니다. <code>value</code>이(가) 기타 형식이면 <code>Number.FromText</code>를 사용하여 먼저 <code>number</code>로 변환합니다. 사용할 수 있는 반올림 모드는 <code>Number.Round</code>를 참조하세요. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code>의 16비트 정수 <code>number</code> 값을 가져옵니다.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code>를 사용하여 <code>\"4.5\"</code>의 16비트 정수 <code>number</code> 값을 가져옵니다.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "지정된 값에서 32비트 정수를 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 32비트 정수 <code>number</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Int32.From</code>에서 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) 소수 부분 없이 32비트 정수 범위 내의 <code>number</code>이면 <code>value</code>이(가) 반환됩니다. 소수 부분이 있으면 숫자는 지정된 반올림 모드로 반올림됩니다. 기본 반올림 모드는 <code>RoundingMode.ToEven</code>입니다. <code>value</code>이(가) 기타 형식이면 <code>Number.FromText</code>를 사용하여 먼저 <code>number</code>로 변환합니다. 사용할 수 있는 반올림 모드는 <code>Number.Round</code>를 참조하세요. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code>의 32비트 정수 <code>number</code> 값을 가져옵니다.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code>를 사용하여 <code>\"4.5\"</code>의 32비트 정수 <code>number</code> 값을 가져옵니다.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "지정된 값에서 64비트 정수를 생성합니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 64비트 정수 <code>number</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Int64.From</code>에서 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) 소수 부분 없이 64비트 정수 범위 내의 <code>number</code>이면 <code>value</code>이(가) 반환됩니다. 소수 부분이 있으면 숫자가 지정된 반올림 모드로 반올림됩니다. 기본 반올림 모드는 <code>RoundingMode.ToEven</code>입니다. <code>value</code>이(가) 기타 형식이면 <code>Number.FromText</code>를 사용하여 먼저 <code>number</code>로 변환합니다. 사용할 수 있는 반올림 모드는 <code>Number.Round</code>를 참조하세요. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "64비트 정수 <code>number</code> 값인 <code>\"4\"</code>를 가져옵니다.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code>를 사용하여 <code>\"4.5\"</code>의 64비트 정수 <code>number</code> 값을 가져옵니다.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "지정된 값에서 부호 있는 8비트 정수를 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 부호 있는 8비트 정수 <code>number</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Int8.From</code>에서 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) 소수 부분 없이 부호 있는 8비트 정수 범위 내의 <code>number</code>이면 <code>value</code>이(가) 반환됩니다. 소수 부분이 있으면 숫자가 지정된 반올림 모드로 반올림됩니다. 기본 반올림 모드는 <code>RoundingMode.ToEven</code>입니다. <code>value</code>이(가) 기타 형식이면 <code>Number.FromText</code>를 사용하여 먼저 <code>number</code>로 변환합니다. 사용할 수 있는 반올림 모드는 <code>Number.Round</code>를 참조하세요. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code>의 부호 있는 8비트 정수 <code>number</code> 값을 가져옵니다.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code>를 사용하여 <code>\"4.5\"</code>의 부호 있는 8비트 정수 <code>number</code> 값을 가져옵니다.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "함수 본문에 대한 AST(요약 구문 트리)를 반환합니다.",
        "Documentation.LongDescription": "<p><i>항목 식</i>으로 정규화된 <code>function</code>의 본문에 대한 AST(요약 구문 트리)를 반환합니다.\r\n<ul>\r\n  <li>함수는 1-인수 람다여야 합니다.</li>\r\n  <li>함수 매개 변수에 대한 모든 참조는 <code>ItemExpression.Item</code>으로 바뀝니다.</li>\r\n  <li>AST는 노드 종류만 포함하도록 단순화됩니다.\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p><code>function</code>의 본문에 대해 항목 식 AST를 반환할 수 없는 경우 오류가 발생합니다.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "<code>each _ <> null</code> 함수의 본문에 대한 AST 반환",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "JSON 문서의 내용을 반환합니다.",
        "Documentation.LongDescription": "JSON 문서의 내용을 반환합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "지정된 값의 JSON 표현을 생성합니다.",
        "Documentation.LongDescription": "<p><code>encoding</code>(으)로 지정된 텍스트 인코딩으로 지정한 값 <code>value</code>의 JSON 표현을 생성합니다. <code>encoding</code>이(가) 생략되면 UTF8이 사용됩니다. 값은 다음과 같이 나타납니다.</p>\r\n <ul>\r\n        <li>Null, 텍스트 및 논리값은 해당 JSON 유형으로 나타납니다.</li>\r\n        <li>숫자는 <code>#infinity</code>, <code>-#infinity</code> 및 <code>#nan</code>이 null로 전환되는 경우를 제외하고 JSON의 숫자로 나타납니다.</li>\r\n        <li>목록은 JSON 배열로 나타납니다.</li>\r\n        <li>레코드는 JSON 개체로 나타납니다.</li>\r\n        <li>테이블은 개체의 배열로 나타납니다.</li>\r\n        <li>날짜, 시간, 날짜/시간, 날짜/시간 영역 및 기간은 ISO-8601 텍스트로 나타납니다.</li>\r\n        <li>이진값은 Base 64로 인코딩된 텍스트로 나타납니다.</li>\r\n        <li>유형 및 함수로 인해 오류가 발생합니다.</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "복합 값을 JSON으로 변환합니다.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "이진 값을 줄 바꿈으로 분할된 텍스트 값의 목록으로 변환합니다. 따옴표 스타일을 지정할 경우 줄 바꿈은 따옴표 내에 나타날 수 있습니다. includeLineSeparators가 true이면 줄 바꿈 문자가 텍스트에 삽입됩니다.",
        "Documentation.LongDescription": "이진 값을 줄 바꿈으로 분할된 텍스트 값의 목록으로 변환합니다. 따옴표 스타일을 지정할 경우 줄 바꿈은 따옴표 내에 나타날 수 있습니다. includeLineSeparators가 true이면 줄 바꿈 문자가 텍스트에 삽입됩니다.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "텍스트 값을 줄 바꿈으로 분할된 텍스트 값 목록으로 변환합니다. includeLineSeparators가 true이면 줄 바꿈 문자가 텍스트에 포함됩니다.",
        "Documentation.LongDescription": "텍스트 값을 줄 바꿈으로 분할된 텍스트 값 목록으로 변환합니다. includeLineSeparators가 true이면 줄 바꿈 문자가 텍스트에 포함됩니다.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (default) 따옴표로 묶는 동작이 필요하지 않습니다.</li>\r\n            <li><code>QuoteStyle.Csv:</code> CSV에 따라 따옴표로 묶습니다. 큰따옴표는 이러한 영역의 경계를 정하는 데 사용되며, 큰따옴표 쌍은 이러한 영역 내에서 단일 큰따옴표를 나타내는 데 사용됩니다. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "지정된 인코딩과 lineSeparator를 사용하여 텍스트 목록을 이진 값으로 변환합니다. 지정된 lineSeparator는 각 줄의 끝에 추가됩니다. lineSeparator가 지정되지 않은 경우에는 캐리지 리턴 및 줄 바꿈 문자가 사용됩니다.",
        "Documentation.LongDescription": "지정된 인코딩과 lineSeparator를 사용하여 텍스트 목록을 이진 값으로 변환합니다. 지정된 lineSeparator는 각 줄의 끝에 추가됩니다. lineSeparator가 지정되지 않은 경우에는 캐리지 리턴 및 줄 바꿈 문자가 사용됩니다.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "텍스트 목록을 단일 텍스트로 변환합니다. 지정된 lineSeparator는 각 줄의 끝에 추가됩니다. lineSeparator가 지정되지 않은 경우에는 캐리지 리턴 및 줄 바꿈 문자가 사용됩니다.",
        "Documentation.LongDescription": "텍스트 목록을 단일 텍스트로 변환합니다. 지정된 lineSeparator는 각 줄의 끝에 추가됩니다. lineSeparator가 지정되지 않은 경우에는 캐리지 리턴 및 줄 바꿈 문자가 사용됩니다.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "모든 식이 true일 경우 true를 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 모든 식이 true일 경우 true를 반환합니다.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{true, true, 2 > 0} 목록의 모든 식이 true인지 여부를 확인합니다.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "{true, true, 2 < 0} 목록의 모든 식이 true인지 여부를 확인합니다.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "식이 하나라도 true일 경우 true를 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 식이 하나라도 true일 경우 true를 반환합니다.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{true, false, 2 > 0} 목록에 true인 식이 하나라도 있는지 여부를 확인합니다.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "{2 = 0, false, 2 < 0} 목록에 true인 식이 하나라도 있는지 여부를 확인합니다.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "값의 평균을 반환합니다. number, date, datetime, datetimezone 및 duration 값에 사용할 수 있습니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 있는 항목의 평균 값을 반환합니다. 결과의 데이터 형식은 목록에 있는 값의 데이터 형식과 동일합니다. number, date, time, datetime, datetimezone 및 duration 값에만 사용할 수 있습니다.\r\n    목록이 비어 있으면 Null이 반환됩니다.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "숫자 목록 <code>{3, 4, 6}</code>의 평균을 구합니다.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "날짜 값 2011년 1월 1일, 2011년 1월 2일 및 2011년 1월 3일의 평균을 구합니다.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "목록을 버퍼링합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록을 메모리에 버퍼링합니다. 이 호출의 결과는 안정적 목록입니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1..10} 목록의 안정적 복사본을 만듭니다.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "여러 목록을 결합하여 단일 목록을 반환합니다.",
        "Documentation.LongDescription": "목록의 목록 <code>lists</code>을(를) 인수로 받아 모든 목록을 새 단일 목록으로 병합합니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "간단한 두 개의 목록 {1, 2}와 {3, 4}를 결합합니다.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "두 개의 목록 {1, 2}와 {3, {4, 5}}를 결합합니다. 이 중 하나에는 중첩된 목록이 포함되어 있습니다.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "목록의 항목 수를 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 항목 수를 반환합니다.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} 목록의 값 수를 확인합니다.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "중복 값이 제거된 값 목록을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code>의 모든 값을 중복 값은 제거한 채로 포함하는 목록을 반환합니다. 목록이 비어 있으면 결과는 빈 목록이 됩니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 1, 2, 3, 3, 3} 목록에서 중복 항목을 제거합니다.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "목록의 첫 번째 값을 반환하거나, 목록이 비어 있는 경우 지정된 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 첫 번째 항목을 반환하거나, 목록이 비어 있는 경우 선택적으로 지정된 기본값 <code>defaultValue</code>을(를) 반환합니다.\r\n    목록이 비어 있고 기본값이 지정되어 있지 않은 경우 이 함수는 <code>null</code>을 반환합니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} 목록의 첫 번째 값을 찾습니다.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "{} 목록의 첫 번째 값을 찾습니다. 목록이 비어 있으면 -1을 반환합니다.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "입력에 있는 목록 값의 교집합을 반환합니다.",
        "Documentation.LongDescription": "입력 목록 <code>lists</code>에 있는 목록 값의 교집합을 반환합니다. 선택적 매개 변수 <code>equationCriteria</code>을(를) 지정할 수 있습니다.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "목록 {1..5}, {2..6}, {3..7}의 교집합을 찾습니다.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "목록에 중복 항목이 있는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 중복 항목이 있는지 여부를 나타내는 논리 값을 반환합니다. 목록이 고유하면 <code>true</code>이고, 중복 값이 있으면 <code>false</code>입니다. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} 목록이 고유한지, 즉 중복 항목이 없는지 확인합니다.",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 3} 목록이 고유한지, 즉 중복 항목이 없는지 확인합니다.",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "목록이 비어 있으면 true를 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 값이 포함되어 있지 않으면(길이 0) <code>true</code>를 반환합니다. 목록에 값이 포함되어 있으면(길이 > 0) <code>false</code>를 반환합니다.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "{} 목록이 비어 있는지 확인합니다.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "{1, 2} 목록이 비어 있는지 확인합니다.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "목록의 마지막 값을 반환하거나, 목록이 비어 있는 경우 지정된 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 마지막 항목을 반환하거나, 목록이 비어 있는 경우 선택적으로 지정된 기본값 <code>defaultValue</code>을(를) 반환합니다.\r\n    목록이 비어 있고 기본값이 지정되어 있지 않은 경우 이 함수는 <code>null</code>을 반환합니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} 목록의 마지막 값을 찾습니다.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "{} 목록의 마지막 값을 찾습니다. 목록이 비어 있으면 -1입니다.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "목록의 마지막 값을 반환합니다. 선택적으로 반환할 값의 수나 한정 조건을 지정할 수 있습니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 마지막 항목을 반환합니다. 목록이 비어 있으면 예외가 발생합니다.\r\n 이 함수는 선택적 매개 변수인 <code>countOrCondition</code>을(를) 사용하여 여러 항목 수집 또는 항목 필터링을 지원합니다. <code>countOrCondition</code>은(는) 다음 세 가지 방법으로 지정할 수 있습니다.\r\n <ul>\r\n  <li>항목 수가 지정된 경우 해당 개수까지의 항목이 반환됩니다. </li>\r\n  <li>조건이 지정된 경우 목록의 끝에서 시작해서 해당 조건을 충족하는 모든 항목이 반환됩니다. 한 항목에서 조건이 충족되지 않으면 이후 항목은 더 이상 고려되지 않습니다. </li>\r\n  <li>이 매개 변수가 Null이면 목록의 마지막 항목이 반환됩니다.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{3, 4, 5, -1, 7, 8, 2} 목록의 마지막 값을 찾습니다.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "{3, 4, 5, -1, 7, 8, 2} 목록에서 0보다 큰 마지막 값을 찾습니다.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "최대값을 반환하거나, 빈 목록의 경우 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 최대 항목을 반환하거나, 목록이 비어 있는 경우 선택적으로 지정된 기본값 <code>default</code>을(를) 반환합니다.\r\n    선택적 comparisonCriteria 값 <code>comparisonCriteria</code>을(를) 지정하여 목록의 항목을 비교할 방법을 결정할 수 있습니다. 이 매개 변수가 Null이면 기본 비교자가 사용됩니다.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "{1, 4, 7, 3, -2, 5} 목록의 최대값을 찾습니다.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "{} 목록의 최대값을 찾습니다. 목록이 비어 있으면 -1을 반환합니다. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "목록의 중앙값을 반환합니다.",
        "Documentation.LongDescription": "목록 <code>list</code>의 중앙 항목을 반환합니다. 이 함수는 목록에 <code>null</code>이 아닌 값이 없으면 <code>null</code>을 반환합니다.\r\n    항목 수가 짝수이면 함수는 목록이 날짜/시간, 기간, 숫자 또는 시간으로만 구성되어 있는 경우를 제외하고 두 개의\r\n 중앙 항목 중 더 작은 항목을 선택하며, 이 경우 두 항목의 평균이 반환됩니다.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>{5, 3, 1, 7, 9}</code> 목록의 중앙값을 찾습니다.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "최소값을 반환하거나, 빈 목록의 경우 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 최소 항목을 반환하거나, 목록이 비어 있는 경우 선택적으로 지정된 기본값 <code>default</code>을(를) 반환합니다.\r\n    선택적 comparisonCriteria 값 <code>comparisonCriteria</code>을(를) 지정하여 목록의 항목을 비교할 방법을 결정할 수 있습니다. 이 매개 변수가 Null이면 기본 비교자가 사용됩니다.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "{1, 4, 7, 3, -2, 5} 목록의 최소값을 찾습니다.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "{} 목록의 최소값을 찾습니다. 목록이 비어 있으면 -1을 반환합니다. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "목록에서 가장 자주 나타나는 값을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에서 가장 자주 나타나는 항목을 반환합니다. 목록이 비어 있으면 예외가 발생합니다. 동일한 최대 빈도를 갖는 여러 항목이 나타날 경우 마지막 항목이 선택됩니다.\r\n    선택적 <code>comparisonCriteria</code> 값 <code>equationCriteria</code>을(를) 지정하여 같음 테스트를 제어할 수 있습니다. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "<code>{\"A\", 1, 2, 3, 3, 4, 5}</code> 목록에서 가장 자주 나타나는 항목을 찾습니다.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "<code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> 목록에서 가장 자주 나타나는 항목을 찾습니다.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "목록에서 가장 자주 나타나는 값의 목록을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에서 가장 자주 나타나는 항목을 반환합니다. 목록이 비어 있으면 예외가 발생합니다. 동일한 최대 빈도를 갖는 여러 항목이 나타날 경우 마지막 항목이 선택됩니다.\r\n    선택적 <code>comparisonCriteria</code> 값 <code>equationCriteria</code>을(를) 지정하여 같음 테스트를 제어할 수 있습니다. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "<code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> 목록에서 가장 자주 나타나는 항목을 찾습니다.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "목록에 있는 Null이 아닌 항목의 수를 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 있는 Null이 아닌 항목의 수를 반환합니다.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "입력에 대한 오프셋의 목록을 반환합니다.",
        "Documentation.LongDescription": "입력 목록 <code>list</code>에 대한 오프셋의 목록을 반환합니다.\r\n    List.Transform을 사용하여 목록을 변경할 경우 위치 목록을 사용하여 해당 위치에 대한 변환 액세스 권한을 부여할 수 있습니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, null, 5} 목록에 있는 값의 오프셋을 확인합니다.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "목록에 있는 숫자의 곱을 반환합니다.",
        "Documentation.LongDescription": "<code>numbersList</code> 목록에 있는 Null이 아닌 숫자의 곱을 반환합니다. 목록에 Null이 아닌 값이 없으면 Null을 반환합니다.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "<code>{1, 2, 3, 3, 4, 5, 5}</code> 목록에 있는 숫자의 곱을 확인합니다.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "난수 목록을 반환합니다.",
        "Documentation.LongDescription": "생성할 값 수와 선택적 초기값을 지정하여 0 및 1 사이의 난수 목록을 반환합니다.\r\n<ul>\r\n   <li><code>count</code>: 생성할 난수의 수입니다.</li>\r\n   <li><code>seed</code>: <i>[옵션]</i> 난수 생성기를 시드하는 데 사용되는 숫자 값입니다. 생략할 경우 이 함수를 호출할 때마다 고유한 난수 목록이 생성됩니다. 숫자로 초기값을 지정하면 이 함수를 호출할 때마다 동일한 난수 목록이 생성됩니다.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "3개의 난수가 포함된 목록을 만듭니다.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "시드 값을 지정하여 3개의 난수가 포함된 목록을 만듭니다.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "목록의 처음부터 지정된 수만큼의 요소를 건너뛴 목록을 반환합니다.",
        "Documentation.LongDescription": "목록 <code>list</code>의 첫 번째 요소를 제거하는 목록을 반환합니다. <code>list</code>이(가) 빈 목록인 경우 빈 목록이 반환됩니다.\r\n이 함수는 선택적 매개 변수 <code>countOrCondition</code>을(를) 사용하여 아래 나열된 여러 값 제거를 지원합니다.\r\n <ul>\r\n <li>숫자를 지정하면 해당 수만큼 항목이 제거됩니다. </li>\r\n <li>조건이 지정되면 <code>list</code>의 시작에서 연속적으로 일치하는 항목이 제거됩니다.</li>\r\n <li>이 매개 변수가 null이면 기본 동작이 관찰됩니다. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5}에서 처음 3개의 숫자를 제외한 목록을 만듭니다.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "{5, 4, 2, 6, 1}에서 3보다 작은 숫자로 시작되는 목록을 만듭니다.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "목록의 끝부터 지정된 수만큼의 요소를 제거한 목록을 반환합니다.",
        "Documentation.LongDescription": "목록 <code>list</code>의 끝에서 마지막 <code>countOrCondition</code>개 요소를 제거하는 목록을 반환합니다. <code>list</code>이(가) <code>countOrCondition</code> 요소보다 작은 경우 빈 목록이 반환됩니다.\r\n <ul>\r\n <li>숫자를 지정하면 해당 수만큼 항목이 제거됩니다. </li>\r\n <li>조건이 지정되면 <code>list</code>의 끝에서 연속적으로 일치하는 항목이 제거됩니다.</li>\r\n <li>이 매개 변수가 null이면 하나의 항목만 제거됩니다. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5}에서 마지막 3개의 숫자를 제외한 목록을 만듭니다.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "{5, 4, 2, 6, 4}에서 3보다 작은 숫자로 끝나는 목록을 만듭니다.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "지정된 목록에서 모든 \"null\" 값을 제거합니다.",
        "Documentation.LongDescription": "<code>list</code>에서 모든 \"null\" 값을 제거합니다. 목록에 'null' 값이 없으면 원래 목록이 반환됩니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, null, 4, 5, null, 6} 목록에서 \"null\" 값을 제거합니다.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "목록에 있는 값의 순서를 반대로 바꿉니다.",
        "Documentation.LongDescription": "<code>list</code> 목록의 값이 역순으로 포함된 목록을 반환합니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1..10}의 값이 역순으로 포함된 목록을 만듭니다.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "목록 길이가 1인 경우 단일 목록 항목을 반환하고, 그렇지 않은 경우 예외를 발생시킵니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 항목이 하나만 있는 경우 해당 항목을 반환합니다.\r\n    목록에 항목이 둘 이상 있거나 목록이 비어 있으면 이 함수는 예외를 발생시킵니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1} 목록의 단일 값을 찾습니다.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "{1, 2, 3} 목록의 단일 값을 찾습니다.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "목록 길이가 1인 경우 단일 목록 항목을 반환하고, 빈 목록의 경우 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 항목이 하나만 있는 경우 해당 항목을 반환합니다.\r\n    목록이 비어 있고 선택적 <code>default</code>이(가) 지정되어 있지 않은 경우 이 함수는 Null을 반환합니다. 목록에 항목이 둘 이상 있으면 이 함수는 오류를 반환합니다.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1} 목록의 단일 값을 찾습니다.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "{} 목록의 단일 값을 찾습니다.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "{} 목록의 단일 값을 찾습니다. 목록이 비어 있으면 -1을 반환합니다.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "목록의 처음부터 지정된 수만큼의 요소를 건너뛴 목록을 반환합니다.",
        "Documentation.LongDescription": "목록 <code>list</code>의 첫 번째 요소를 건너뛰는 목록을 반환합니다. <code>list</code>이(가) 빈 목록인 경우 빈 목록이 반환됩니다.\r\n이 함수는 선택적 매개 변수 <code>countOrCondition</code>을(를) 사용하여 아래 나열된 여러 값 건너뛰기를 지원합니다.\r\n <ul>\r\n <li>숫자를 지정하면 해당 수만큼 항목을 건너뜁니다. </li>\r\n <li>조건이 지정되면 <code>list</code>의 시작에서 연속적으로 일치하는 항목을 건너뜁니다.</li>\r\n <li>이 매개 변수가 null이면 기본 동작이 관찰됩니다. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5}에서 처음 3개의 숫자를 제외한 목록을 만듭니다.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "{5, 4, 2, 6, 1}에서 3보다 작은 숫자로 시작되는 목록을 만듭니다.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "지정된 조건에 따라 데이터 목록을 정렬합니다.",
        "Documentation.LongDescription": "지정된 선택적 기준에 따라 데이터 목록 <code>list</code>을(를) 정렬합니다.\r\n    선택적 매개 변수 <code>comparisonCriteria</code>를 비교 기준으로 지정할 수 있습니다. 이 작업은 다음 값을 사용할 수 있습니다.\r\n      <ul>\r\n      <li> 순서를 제어하기 위해 비교 기준은 순서 열거형 값일 수 있습니다(<code>Order.Descending</code>, <code>Order.Ascending</code>).</li>\r\n     <li> 정렬에 사용할 키를 계산하려면 인수 1개의 함수를 사용할 수 있습니다. </li>\r\n     <li> 키와 제어 순서를 모두 선택하기 위해 비교 기준은 키와 순서를 포함하는 목록일 수 있습니다(<code>{each 1 / _, Order.Descending}</code>).</li>\r\n    <li> 비교를 완전히 제어하기 위해 2개의 인수로 구성된 함수를 사용할 수 있습니다. 이 함수는 목록에서 두 항목(순서에 관계없이 두 항목)을 전달합니다. 함수는 다음 값 중 하나를 반환해야 합니다.\r\n     <ul>\r\n         <li> <code>-1</code>: 첫 번째 항목이 두 번째 항목보다 작습니다.</li>\r\n      <li> <code>0</code>: 항목이 동일합니다.</li>\r\n      <li> <code>1</code>: 첫 번째 항목 두 번째 항목보다 큽니다.</li>\r\n      </ul>\r\n      Value.Compare는 이 논리를 위임하는 데 사용할 수 있는 메서드입니다. </li>\r\n      </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "{2, 3, 1} 목록을 정렬합니다.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "{2, 3, 1} 목록을 내림차순으로 정렬합니다.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Value.Compare 메서드를 사용하여 {2, 3, 1} 목록을 내림차순으로 정렬합니다.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "샘플을 기준으로 한 예상 표준 편차를 반환합니다.",
        "Documentation.LongDescription": "<code>numbersList</code> 목록의 값에 대해 샘플을 기준으로 한 예상 표준 편차를 반환합니다.\r\n    <code>numbersList</code>이(가) 숫자 목록일 경우 숫자가 반환됩니다.\r\n    목록이 비어 있거나 목록의 항목이 <code>number</code> 형식이 아닌 경우에는 예외가 발생합니다.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "숫자 1부터 5까지의 표준 편차를 구합니다.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "목록에 있는 항목의 합을 반환합니다.",
        "Documentation.LongDescription": "<code>list</code> 목록에 있는 Null이 아닌 값의 합을 반환합니다. 목록에 Null이 아닌 값이 없으면 Null을 반환합니다.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "<code>{1, 2, 3}</code> 목록에 있는 숫자의 합을 확인합니다.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "입력에 있는 목록 값의 합집합을 반환합니다.",
        "Documentation.LongDescription": "목록의 목록 <code>lists</code>을(를) 인수로 받아 개별 목록에 있는 항목의 합집합을 구한 다음 출력 목록에 이를 반환합니다. 결과로 반환되는 목록에는 모든 입력 목록의 모든 항목이 포함됩니다.\r\n    이 작업은 일반적인 모음 의미 체계(Bag semantics)를 유지하므로 중복 값은 합집합의 일부로 일치됩니다.\r\n    선택적 수식 조건 값인 <code>equationCriteria</code>을(를) 지정하여 같음 테스트를 제어할 수 있습니다. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "목록 {1..5}, {2..6}, {3..7}의 합집합을 만듭니다.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "여러 목록의 동일한 위치에 있는 항목을 결합하여 목록의 목록을 반환합니다.",
        "Documentation.LongDescription": "목록의 목록 <code>lists</code>을(를) 가져오고 동일한 위치의 항목을 결합한 목록의 목록을 반환합니다.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "두 개의 일반 목록 {1, 2} 및 {3, 4}을(를) 압축합니다.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "서로 다른 길이의 두 일반 목록 {1, 2} 및 {3}을(를) 압축합니다.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "지정된 값에서 logical을 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>logical</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Logical.From</code>은 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) <code>logical</code>이면 <code>value</code>이(가) 반환됩니다. 다음 형식의 값을 <code>logical</code> 값으로 변환할 수 있습니다.\r\n      <ul>\r\n        <li><code>text</code>: 텍스트 값(<code>“true”</code> 또는 <code>“false”</code>)에서 <code>logical</code> 값으로 변환할 수 있습니다. 자세한 내용은 <code>Logical.FromText</code>를 참조하세요.</li>\r\n        <li><code>number</code>: <code>value</code>이(가) <code>0</code>과 같으면 <code>false</code>로 변환되고, 그렇지 않으면 <code>true</code>로 변환됩니다.</li>\r\n      </ul>\r\n<code>value</code>이(가) 기타 형식이면 오류가 반환됩니다.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "<code>2</code>를 <code>logical</code> 값으로 변환합니다.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "텍스트 값 \"true\" 및 \"false\"에서 logical 값을 만듭니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>(\"true\" 또는 \"false\")에서 logical 값을 만듭니다. <code>text</code>에 다른 문자열이 포함되어 있으면 예외가 발생합니다. 텍스트 값 <code>text</code>은(는) 대/소문자를 구분하지 않습니다.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "텍스트 문자열 \"true\"에서 logical 값을 만듭니다.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "텍스트 문자열 \"a\"에서 logical 값을 만듭니다.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "지정된 논리값에 따라 텍스트 \"true\" 또는 \"false\"를 반환합니다.",
        "Documentation.LongDescription": "논리값 <code>logicalValue</code>(<code>true</code> 또는 <code>false</code>)에서 텍스트 값을 만듭니다. <code>logicalValue</code>이(가) 논리값이 아니면 예외가 발생합니다.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "논리값 <code>true</code>에서 텍스트 값을 만듭니다.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "숫자의 절대값을 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 절대값을 반환합니다. <code>number</code>이(가) null인 경우 <code>Number.Abs</code>는 null을 반환합니다.\r\n    <ul>\r\n        <li><code>number</code>: 절대값을 계산할 <code>number</code>입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "-3의 절대값입니다.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "숫자의 아크코사인을 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 아크코사인을 반환합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "숫자의 아크사인을 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 아크사인을 반환합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "숫자의 아크탄젠트를 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 아크탄젠트를 반환합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "각 비트가 입력의 반대인 바이트를 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>에 대해 비트 \"Not\" 연산을 수행한 결과를 반환합니다.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "숫자의 코사인을 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 코사인을 반환합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "각도 0의 코사인을 구합니다.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "숫자의 쌍곡 코사인을 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 쌍곡 코사인을 반환합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "e를 지정된 지수로 거듭제곱합니다.",
        "Documentation.LongDescription": "e를 <code>number</code>제곱한 결과(지수 함수)를 반환합니다.\r\n      <ul>\r\n        <li><code>number</code>: 지수 함수를 계산할 <code>number</code>입니다. <code>number</code>이(가) Null인 경우 <code>Number.Exp</code>는 Null을 반환합니다. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "e를 3제곱합니다.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "숫자의 계승값을 반환합니다.",
        "Documentation.LongDescription": "숫자 <code>number</code>의 계승값을 반환합니다.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "10의 계승값을 구합니다.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "지정된 값에서 number를 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>number</code> 값을 반환합니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.\r\n지정된 <code>value</code>이(가) <code>null</code>이면 <code>Number.From</code>은 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) <code>number</code>이면 <code>value</code>이(가) 반환됩니다. 다음 형식의 값을 <code>number</code> 값으로 변환할 수 있습니다.\r\n      <ul>\r\n        <li><code>text</code>: 텍스트 표현에서 <code>number</code> 값으로 변환할 수 있습니다. “15”, “3,423.10”, “5.0E-10” 같은 일반 텍스트 형식이 처리됩니다. 자세한 내용은 <code>Number.FromText</code>를 참조하세요.</li>\r\n        <li><code>logical</code>: <code>true</code>의 경우 1로 변환되고, <code>false</code>의 경우 0으로 변환됩니다.</li>\r\n        <li><code>datetime</code>: OLE 자동화 날짜에 해당하는 값이 포함된 배정밀도 부동 소수점 숫자로 변환할 수 있습니다.</li>\r\n        <li><code>datetimezone</code>: 현지 날짜 및 시간 <code>value</code>의 OLE 자동화 날짜에 해당하는 값이 포함된 배정밀도 부동 소수점 숫자로 변환할 수 있습니다.</li>\r\n        <li><code>date</code>: OLE 자동화 날짜에 해당하는 값이 포함된 배정밀도 부동 소수점 숫자로 변환할 수 있습니다.</li>\r\n        <li><code>time</code>: 소수 일 수로 표현됩니다.</li>\r\n        <li><code>duration</code>: 정수 및 소수 일 수로 표현됩니다.</li>\r\n      </ul>\r\n<code>value</code>이(가) 기타 형식이면 오류가 반환됩니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code>의 <code>number</code> 값을 가져옵니다.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>#datetime(2020, 3, 20, 6, 0, 0)</code>의 <code>number</code> 값을 가져옵니다.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "<code>\"12.3%\"</code>의 <code>number</code> 값을 가져옵니다.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "일반 텍스트 형식(\"15\", \"3,423.10\", \"5.0E-10\")에서 number를 만듭니다.",
        "Documentation.LongDescription": "지정된 텍스트 값 <code>text</code>에서 <code>number</code> 값을 반환합니다.\r\n <ul>\r\n  <li><code>text</code>: number 값의 텍스트 표현입니다. 이 표현은 일반 number 형식(예: \"15\", \"3,423.10\" 또는 \"5.0E-10\")이어야 합니다.</li>\r\n  <li><code>culture</code>: <code>text</code>이(가) 해석되는 선택적 문화권(예: \"en-US\")입니다.</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code>의 number 값을 가져옵니다.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>\"5.0e-10\"</code>의 number 값을 가져옵니다.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "값이 짝수인지 여부를 나타냅니다.",
        "Documentation.LongDescription": "값 <code>number</code>이(가) 짝수인지 여부를 나타냅니다. 짝수이면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "625가 짝수인지 확인합니다.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "82가 짝수인지 확인합니다.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "값이 NaN(Not a number)인지 여부를 나타냅니다.",
        "Documentation.LongDescription": "값이 NaN(Not a number)인지 여부를 나타냅니다. <code>number</code>이(가) <code>Number.IsNaN</code>이면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "0을 0으로 나눈 결과가 NaN인지 확인합니다.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "1을 0으로 나눈 결과가 NaN인지 확인합니다.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "값이 홀수인지 여부를 나타냅니다.",
        "Documentation.LongDescription": "값이 홀수인지 여부를 나타냅니다. <code>number</code>이(가) 홀수이면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "625가 홀수인지 확인합니다.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "82가 홀수인지 확인합니다.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "숫자의 자연 로그를 반환합니다.",
        "Documentation.LongDescription": "숫자 <code>number</code>의 자연 로그를 반환합니다. <code>number</code>이(가) null인 경우 <code>Number.Ln</code>은 null을 반환합니다.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "15의 자연 로그를 가져옵니다.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "지정된 밑(기본값 e)에 대한 숫자의 로그를 반환합니다.",
        "Documentation.LongDescription": "지정된 <code>base</code>을(를) 밑으로 하는 숫자 <code>number</code>의 로그를 반환합니다. <code>base</code>을(를) 지정하지 않은 경우 기본값은 Number.E입니다.\r\n    <code>number</code>이(가) Null인 경우 <code>Number.Log</code>는 Null을 반환합니다.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "2의 상용 로그를 가져옵니다.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "밑이 e인 2의 로그를 가져옵니다.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "숫자의 상용 로그를 반환합니다.",
        "Documentation.LongDescription": "숫자 <code>number</code>의 상용 로그를 반환합니다. <code>number</code>이(가) Null인 경우 <code>Number.Log10</code>은 Null을 반환합니다.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "2의 상용 로그를 가져옵니다.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "반올림된 숫자를 반환합니다. 자릿수와 반올림 모드를 지정할 수 있습니다.",
        "Documentation.LongDescription": "<code>number</code>을(를) 가장 가까운 숫자로 반올림한 결과를 반환합니다. <code>number</code>이(가) Null이면 <code>Number.Round</code>는 Null을 반환합니다.<br>\r\n      <br>\r\n      기본적으로, <code>number</code>은(는) 가장 가까운 정수로 반올림되고 연결은 가장 가까운 짝수로 반올림하여 끊어집니다(<code>RoundingMode.ToEven</code> 사용, “은행원 반올림”이라고도 함).<br>\r\n      <br>\r\n      그러나 이러한 기본값은 다음 선택적 매개 변수를 통해 재정의할 수 있습니다.\r\n      <ul>\r\n        <li><code>digits</code>: <code>number</code>이(가) 지정된 10진수 수로 반올림되도록 합니다.</li>\r\n        <li><code>roundingMode</code>: <code>number</code>이(가) 두 개의 잠재적인 반올림된 값 사이의 중간점에 있는 경우 기본 연결 끊기 동작을 재정의합니다\r\n      (가능한 값은 <code>RoundingMode.Type</code> 참조).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1.234를 가장 가까운 정수로 반올림합니다.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "1.56을 가장 가까운 정수로 반올림합니다.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "1.2345를 소수점 이하 두 자리로 반올림합니다.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "1.2345를 소수점 이하 세 자리로 올림합니다.",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "1.2345를 소수점 이하 세 자리로 내림합니다.",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "양수는 올림하고 음수는 내림한 결과를 반환합니다. 자릿수를 지정할 수 있습니다.",
        "Documentation.LongDescription": "<code>number</code>을(를) 숫자의 부호에 따라 반올림한 결과를 반환합니다. 이 함수는 양수는 올림하고 음수는 내림합니다.\r\n    <code>digits</code>이(가) 지정된 경우 <code>number</code>을(를) <code>digits</code>자리로 반올림됩니다.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "숫자 -1.2를 0에서 멀어지도록 반올림합니다.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "숫자 1.2를 0에서 멀어지도록 반올림합니다.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "숫자 -1.234를 소수점 이하 두 자리로 반올림합니다.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "이전의 가장 큰 정수를 반환합니다. 자릿수를 지정할 수 있습니다.",
        "Documentation.LongDescription": "<code>number</code>을(를) 이전 가장 높은 정수로 내림한 결과를 반환합니다. <code>number</code>이(가) null이면 이 함수는 null을 반환합니다.\r\n\r\n     <code>digits</code>이(가) 제공되면 <code>number</code>은(는) 지정된 소수 자릿수로 반올림됩니다.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1.234를 정수로 내림합니다.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "1.999를 정수로 내림합니다.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "1.999를 소수점 이하 두 자리로 내림합니다.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "양수는 내림하고 음수는 올림한 결과를 반환합니다. 자릿수를 지정할 수 있습니다.",
        "Documentation.LongDescription": "<code>number</code>을(를) 숫자의 부호에 따라 반올림한 결과를 반환합니다. 이 함수는 양수는 내림하고 음수는 올림합니다.\r\n<code>digits</code>이(가) 지정된 경우 <code>number</code>은(는) <code>digits</code>자리로 반올림됩니다.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "숫자 -1.2를 0에 가까워지도록 반올림합니다.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "숫자 1.2를 0에 가까워지도록 반올림합니다.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "숫자 -1.234를 소수점 이하 두 자리로 반올림합니다.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "다음의 가장 큰 정수를 반환합니다. 자릿수를 지정할 수 있습니다.",
        "Documentation.LongDescription": "<code>number</code>을(를) 다음으로 높은 정수로 반올림한 결과를 반환합니다. <code>number</code>이(가) Null이면 이 함수는 Null을 반환합니다.\r\n     <code>digits</code>이(가) 제공되면 <code>number</code>은(는) 지정된 소수 자릿수로 반올림됩니다.\r\n",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1.234를 정수로 반올림합니다.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "1.999를 정수로 반올림합니다.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "1.234를 소수점 이하 두 자리로 반올림합니다.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "숫자가 양수이면 1을, 음수이면 -1을, 0이면 0을 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>이(가) 양수이면 1을, 음수이면 -1을, 0이면 0을 반환합니다.\r\n    <code>number</code>이(가) Null인 경우 <code>Number.Sign</code>은 Null을 반환합니다.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "182의 부호를 확인합니다.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "-182의 부호를 확인합니다.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "0의 부호를 확인합니다.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "숫자의 사인을 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 사인을 반환합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "각도 0의 사인을 구합니다.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "숫자의 쌍곡 사인을 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 쌍곡 사인을 반환합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "숫자의 제곱근을 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 제곱근을 반환합니다.\r\n    <code>number</code>이(가) Null인 경우 <code>Number.Sqrt</code>는 Null을 반환합니다. 음수 값인 경우에는 <code>Number.NaN</code>(Not a number)이 반환됩니다.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "625의 제곱근을 구합니다.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "85의 제곱근을 구합니다.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "숫자의 탄젠트를 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 탄젠트를 반환합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "각도 1의 탄젠트를 구합니다.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "숫자의 쌍곡 탄젠트를 반환합니다.",
        "Documentation.LongDescription": "<code>number</code>의 쌍곡 탄젠트를 반환합니다.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "지정된 숫자를 텍스트로 변환합니다.",
        "Documentation.LongDescription": "숫자 값 <code>number</code>을(를) <code>format</code>에서 지정한 형식에 따라 텍스트 값으로 변환합니다.<br>\r\n    <br>\r\n    이 형식은 숫자를 변환하는 방법을 나타내는 텍스트 값입니다. 지원되는 형식 값에 대한 자세한 내용을 보려면 https://go.microsoft.com/fwlink/?linkid=2241210 및 https://go.microsoft.com/fwlink/?linkid=2240884에서 확인하세요.<br>\r\n    <br>\r\n    선택적 <code>culture</code>(예: \"en-US\")를 제공하여 <code>format</code>의 문화권 종속 동작을 제어할 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "형식을 지정하지 않고 숫자를 텍스트로 변환합니다.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "숫자를 지수 형식으로 변환합니다.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "소수점 이하 한 자리만 있는 백분율 형식으로 숫자를 변환합니다.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "OData Service에서 제공하는 OData 피드에 대한 테이블을 반환합니다.",
        "Documentation.LongDescription": "URI <code>serviceUri</code>, 헤더 <code>headers</code>에서 OData Service가 제공한 OData 피드에 대한 테이블을 반환합니다. 동시 연결을 사용할지 여부를 지정하는 부울 값이나 선택적 레코드 매개 변수 <code>options</code>을(를) 지정하여 다음 옵션을 제어할 수 있습니다.\r\n    <ul>\r\n    <li><code>Query</code>: 이스케이프에 대한 걱정 없이 URL에 쿼리 매개 변수를 프로그래밍 방식으로 추가합니다. </li>\r\n    <li> <code>Headers</code> : 이 값을 레코드로 지정하면 HTTP 요청에 추가 헤더가 제공됩니다.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: 이 값을 목록으로 지정하면 이러한 HTTP 헤더 키가 데이터 캐싱을 위한 계산 과정에서 제외됩니다.</li>\r\n    <li> <code>ApiKeyName</code> : 대상 사이트에 API 키 개념이 있는 경우 이 매개 변수를 사용하여 URL에 사용해야 하는 키 매개 변수의 이름(값이 아님)을 지정할 수 있습니다. 실제 키 값은 자격 증명에서 제공됩니다.</li>\r\n    <li> <code>Timeout</code> : 이 값을 기간으로 지정하면 HTTP 요청의 시간 제한이 변경됩니다. 기본값은 600초입니다.</li>\r\n    <li> <code>EnableBatch</code> : MaxUriLength가 초과될 경우 OData $batch 요청의 생성을 허용할지 여부를 설정하는 논리값(true/false)입니다(기본값은 false).</li>\r\n    <li> <code>MaxUriLength</code> : OData 서비스로 보내도록 허용되는 URI의 최대 길이를 나타내는 숫자입니다. 이 값이 초과되고 EnableBatch가 true이면 OData $batch 엔드포인트에 대해 요청이 생성되고, 그렇지 않으면 실패하게 됩니다(기본값은 2048).</li>\r\n    <li> <code>Concurrent</code> : 논리값(true/false)을 true로 설정하면 서비스에 대한 요청이 동시에 생성되고, false로 설정하면 요청이 순차적으로 생성됩니다. 지정하지 않은 경우 서비스의 AsynchronousRequestsSupported 주석에 의해 값이 결정됩니다. 서비스에서 AsynchronousRequestsSupported가 지원되는지 여부를 지정하지 않은 경우 요청이 순차적으로 생성됩니다.</li>\r\n    <li> <code>ODataVersion</code> : 이 OData Service에 대해 사용할 OData 프로토콜 버전을 지정하는 숫자(3 또는 4)입니다. 지정하지 않은 경우 모든 지원되는 버전이 요청됩니다. 서비스 버전은 서비스에서 반환되는 OData-Version 헤더에 의해 결정됩니다.</li>\r\n    <li> <code>FunctionOverloads</code> : 논리값(true/false)을 true로 설정하면 함수 가져오기 오버로드가 탐색기에서 개별 항목으로 나열되고, false로 설정하면 함수 가져오기 오버로드가 탐색기에서 하나의 Union 함수로 나열됩니다. V3의 기본값은 false이고, V4의 기본값은 true입니다.</li>\r\n    <li> <code>MoreColumns</code> : 논리값(true/false)을 true로 설정하면 개방형 형식 및 다형 형식이 포함된 각각의 엔터티 피드에 \"기타 열\"이라는 열이 추가됩니다. 여기에는 기본 형식에서 선언되지 않은 필드가 포함됩니다. false로 설정하면 이 필드가 나타나지 않습니다. 기본값은 false입니다.</li>\r\n    <li> <code>IncludeAnnotations</code> : \"*\"를 와일드카드로 사용하여 포함할 정규화된 용어 이름 또는 패턴의 쉼표로 구분된 목록입니다. 기본적으로 주석은 포함되지 않습니다.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : \"*\"를 와일드카드로 사용하여 메타데이터 문서 요청에 포함할 정규화된 용어 이름 또는 패턴의 쉼표로 구분된 목록입니다. 기본적으로 IncludeAnnotations와 동일한 주석이 포함됩니다.</li>\r\n    <li> <code>OmitValues</code> : OData 서비스가 응답에 특정 값을 쓰지 못하도록 합니다. 서비스에서 승인되는 경우 이러한 값을 생략된 필드에서 유추합니다. 옵션에는 다음이 포함됩니다.\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : OData 서비스가 Null 값을 생략하도록 허용합니다.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : 사용할 OData 커넥터의 구현을 지정합니다. 유효한 값은 \"2.0\" 또는 Null입니다.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "TripPin OData 서비스에 연결합니다.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "ODBC 드라이버에 대한 SQL 기능을 유추한 결과를 반환합니다.",
        "Documentation.LongDescription": "ODBC를 사용하여 연결 문자열 <code>connectionString</code>(으)로 SQL 기능을 유추한 결과를 반환합니다. <code>connectionString</code>은(는) 속성 값 쌍의 레코드 또는 텍스트일 수 있습니다. 속성 값은 텍스트나 숫자일 수 있습니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "연결 문자열에 대해 유추된 SQL 기능을 반환합니다.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Parquet 문서의 내용을 테이블로 반환합니다.",
        "Documentation.LongDescription": "Parquet 문서의 내용을 테이블로 반환합니다. 다음 옵션이 포함됩니다.\n    <ul>\n    <li> <code>TypeMapping</code>: 파일을 읽고 쓸 때 기본 형식 매핑을 제어하는 텍스트 값입니다. 기본값은 null이며 원래 형식에 최대한 충실도를 유지하려고 합니다. \"Sql\" 값은 SQL Server와 가장 잘 호환되는 결과를 생성합니다.</li>\n    </ul>",
        "Documentation.Category": "데이터 액세스",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "이 기능은 내부용입니다.",
        "Documentation.LongDescription": "이 기능은 내부용입니다.",
        "Documentation.Category": "데이터 액세스",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "지정된 값에서 백분율 값을 반환합니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>percentage</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>인 경우 <code>Percentage.From</code>은 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) 뒤에 백분율 기호가 있는 <code>text</code>인 경우 변환된 십진수가 반환됩니다. 그렇지 않은 경우 값은 <code>Number.From</code>을 사용하여 <code>number</code>로 변환됩니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"12.3%\"</code>의 <code>percentage</code> 값을 가져옵니다.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "RData 파일에서 데이터 프레임의 레코드를 반환합니다.",
        "Documentation.LongDescription": "RData 파일에서 데이터 프레임의 레코드를 반환합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "지정된 목록의 레코드를 결합합니다.",
        "Documentation.LongDescription": "지정된 <code>records</code>의 레코드를 결합합니다. <code>records</code>에 레코드가 아닌 값이 포함된 경우 오류가 반환됩니다.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "레코드에서 결합된 레코드를 만듭니다.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "레코드의 필드 수를 반환합니다.",
        "Documentation.LongDescription": "레코드 <code>record</code>의 필드 수를 반환합니다.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "레코드의 필드 수를 확인합니다.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "필드의 이름을 반환합니다.",
        "Documentation.LongDescription": "레코드 <code>record</code>의 필드 이름을 텍스트로 반환합니다.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "레코드의 필드 이름을 확인합니다.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "필드 값의 목록을 반환합니다.",
        "Documentation.LongDescription": "레코드 <code>record</code>에 있는 필드 값의 목록을 반환합니다.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "레코드의 필드 값을 확인합니다.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "{[Name = name, Value = value]} 형식의 테이블에서 레코드를 만듭니다.",
        "Documentation.LongDescription": "필드 이름 및 값 이름 <code>{[Name = name, Value = value]}</code>를 포함하는 <code>table</code> 레코드의 테이블에서 레코드를 반환합니다. 필드 이름이 고유하지 않으면 예외가 발생합니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}) 형식의 테이블에서 레코드를 만듭니다.",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "입력 레코드의 필드 값을 포함하는 값 목록을 반환합니다.",
        "Documentation.LongDescription": "입력 <code>record</code>의 필드 값을 포함하는 값 목록을 반환합니다.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "레코드에서 필드 값을 추출합니다.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "행 식 내의 열에 대한 액세스를 나타내는 AST(요약 구문 트리)를 반환합니다.",
        "Documentation.LongDescription": "행 식 내 행의 열 <code>columnName</code>에 대한 액세스를 나타내는 AST(요약 구문 트리)를 반환합니다.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "\"CustomerName\" 열의 액세스를 나타내는 AST를 만듭니다.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "함수 본문에 대한 AST(요약 구문 트리)를 반환합니다.",
        "Documentation.LongDescription": "<p><i>행 식</i>으로 정규화된 <code>function</code>의 본문에 대한 AST(요약 구문 트리)를 반환합니다.\r\n<ul>\r\n  <li>함수는 1-인수 람다여야 합니다.</li>\r\n  <li>함수 매개 변수에 대한 모든 참조는 <code>RowExpression.Row</code>로 바뀝니다.</li>\r\n  <li>열에 대한 모든 참조는 <code>RowExpression.Column(<i>columnName</i>)</code>으로 바뀝니다.</li>\r\n  <li>AST는 노드 종류만 포함하도록 단순화됩니다.\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p><code>function</code>의 본문에 대해 행 식 AST를 반환할 수 없는 경우 오류가 발생합니다.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "<code>each [CustomerID] = \"ALFKI\"</code> 함수의 본문에 대한 AST 반환",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "지정된 값에서 Single을 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 Single <code>number</code> 값을 반환합니다. 지정된 <code>value</code>이(가) <code>null</code>이면 <code>Single.From</code>에서 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) Single 범위 내의 <code>number</code>이면 <code>value</code>이(가) 반환되고, 그렇지 않으면 오류가 반환됩니다. <code>value</code>이(가) 기타 형식이면 <code>Number.FromText</code>를 사용하여 먼저 <code>number</code>로 변환합니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1.5\"</code>의 Single <code>number</code> 값을 가져옵니다.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Smartsheet 인덱스 엔드포인트의 데이터 테이블을 반환합니다.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "지정된 엔드포인트에서 Smartsheet 2.0 REST API를 호출하고 테이블에 반환된 데이터 요소를 변환합니다.",
        "Documentation.Examples": [
          {
            "Description": "Smartsheet API의 사용자 정보 테이블을 가져옵니다.",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Smartsheet API에서 반환된 대로 사용자 정보가 있는 테이블"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "지정된 구분 기호에서 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 구분 기호에서 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "따옴표와 따옴표로 묶인 구분 기호를 무시하고 입력의 시작 부분부터 시작하여 쉼표 또는 세미콜론으로 입력을 분할합니다.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "따옴표와 따옴표로 묶인 구분 기호를 무시하고 입력 끝에서 시작하여 쉼표 또는 세미콜론으로 입력을 분할합니다.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "지정된 구분 기호에 따라 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 구분 기호에 따라 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "따옴표로 묶인 쉼표를 무시하고 입력을 쉼표로 나눕니다.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "지정된 각 구분 기호에서 순서대로 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 각 구분 기호에서 순서대로 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "입력의 시작 부분부터 시작하여 입력을 쉼표로 나눈 다음 세미콜론으로 나눕니다.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "입력을 쉼표로 나눈 다음 세미콜론으로 분할하고 따옴표를 다른 문자처럼 처리하고 입력 끝에서 시작합니다.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "지정된 각 길이에 따라 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 각 길이에 따라 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "입력의 시작 부분부터 시작하여 입력을 처음 두 문자로 나누고 다음 세 문자로 나눕니다.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "입력의 끝에서 시작하여 입력을 처음 세 글자로 나누고 다음 두 글자로 나눕니다.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "지정된 각 위치에서 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 각 위치에서 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "입력의 시작 부분부터 시작하여 지정된 위치에서 입력을 분할합니다.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "입력의 끝에서 시작하여 지정된 위치에서 입력을 분할합니다.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "지정된 오프셋 및 길이에 따라 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 오프셋 및 길이에 따라 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다. null 길이는 나머지 입력을 모두 포함해야 했음을 나타냅니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "입력의 시작 부분에서 시작하여 지정된 위치 및 길이 쌍으로 입력을 분할합니다. 이 예의 범위는 겹칩니다.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "입력 끝에서 시작하여 지정된 위치 및 길이 쌍으로 입력을 분할합니다.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "입력을 고정 길이 우편 번호와 가변 길이 도시 이름으로 분할합니다.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "지정된 길이 다음에서 반복적으로 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.LongDescription": "지정된 길이 다음에서 반복적으로 텍스트를 텍스트 목록으로 분할하는 함수를 반환합니다.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "입력의 시작 부분에서 시작하여 입력을 3개의 문자 청크로 반복적으로 분할합니다.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "입력의 끝에서 시작하여 반복적으로 입력을 3개의 문자 청크로 분할합니다.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "테이블의 대략적 행 개수를 반환합니다.",
        "Documentation.LongDescription": "<code>table</code>의 대략적인 행 수를 반환하거나 데이터 소스가 근사치를 지원하지 않는 경우 오류를 반환합니다.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "열에 대한 카디널리티 추정치로 사용할 수 있는 큰 테이블에서 도시 및 주의 고유한 조합 수를 추정합니다. 카디널리티 추정치는 SQL Server와 같은 다양한 데이터 원본이 종종 HyperLogLog라는 알고리즘을 사용하여 이 특정 근사치를 지원하도록 충분히 중요합니다.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "테이블의 열 수를 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블의 열 수를 반환합니다.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "테이블의 열 수를 확인합니다.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "열 이름을 목록으로 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블의 열 이름을 텍스트 목록으로 반환합니다.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 열 이름을 확인합니다.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "첫 번째 행이나 지정된 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>table</code>의 첫 번째 행을 반환하거나, 테이블이 비어 있는 경우 선택적 기본값인 <code>default</code>을(를) 반환합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 첫 번째 행을 찾습니다.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "<code>({})</code> 테이블의 첫 번째 행을 찾거나, 테이블이 비어 있는 경우 [a = 0, b = 0]을 반환합니다.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "표에서 첫 번째 행의 첫 번째 열 또는 지정한 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>table</code> 표에서 첫 번째 행의 첫 번째 열 또는 지정한 기본값을 반환합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "테이블에 중복되지 않은 고유 행만 포함되어 있는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "<code>table</code>에 중복되지 않은 고유 행만 포함되어 있는지 여부를 나타냅니다. 행이 고유하면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.\r\n    선택적 매개 변수 <code>comparisonCriteria</code>은(는) 중복 여부를 테스트할 테이블의 열을 지정합니다. <code>comparisonCriteria</code>을(를) 지정하지 않으면 모든 열이 테스트됩니다.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "테이블이 고유한지 여부를 확인합니다.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "테이블이 열에서 고유한지 여부를 확인합니다.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "테이블에 행이 포함되어 있는지 여부를 나타냅니다.",
        "Documentation.LongDescription": "<code>table</code>에 행이 포함되어 있는지 여부를 나타냅니다. 행이 없으면(테이블이 비어 있는 경우) <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "테이블이 비어 있는지 여부를 확인합니다.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "<code>({})</code> 테이블이 비어 있는지 여부를 확인합니다.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "지정된 테이블의 키를 반환합니다.",
        "Documentation.LongDescription": "지정된 테이블의 키를 반환합니다.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "테이블의 키 목록을 가져옵니다.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "마지막 행이나 지정된 기본값을 반환합니다.",
        "Documentation.LongDescription": "<code>table</code>의 마지막 행을 반환하거나, 테이블이 비어 있는 경우 선택적 기본값인 <code>default</code>을(를) 반환합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 마지막 행을 찾습니다.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "<code>({})</code> 테이블의 마지막 행을 찾거나, 테이블이 비어 있는 경우 [a = 0, b = 0]을 반환합니다.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "테이블의 행 수를 반환합니다.",
        "Documentation.LongDescription": "<code>table</code>의 행 수를 반환합니다.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "테이블의 행 수를 찾습니다.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "테이블의 행 하나를 반환합니다.",
        "Documentation.LongDescription": "단일 <code>table</code> 행의 행 하나를 반환합니다. <code>table</code>에 행이 둘 이상 있으면 예외가 발생합니다.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "테이블의 단일 행을 반환합니다.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "테이블에서 중첩된 열 값 목록의 목록을 만듭니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블에서 중첩된 목록의 목록을 만듭니다. 각 목록 항목은 열 값이 포함된 내부 열입니다.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "테이블의 열 값 목록을 만듭니다.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "테이블의 값 행에 각각 지정한 결합 함수를 적용하여 테이블을 목록으로 변환합니다.",
        "Documentation.LongDescription": "테이블의 값 행에 각각 지정한 결합 함수를 적용하여 테이블을 목록으로 변환합니다.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "각 행의 텍스트를 쉼표로 결합합니다.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "테이블을 레코드 목록으로 변환합니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블을 레코드 목록으로 변환합니다.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "테이블을 레코드 목록으로 변환합니다.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "테이블에서 중첩된 행 값 목록의 목록을 만듭니다.",
        "Documentation.LongDescription": "<code>table</code> 테이블에서 중첩된 목록의 목록을 만듭니다. 각 목록 항목은 행 값이 포함된 내부 열입니다.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "테이블의 행 값 목록을 만듭니다.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Table.View를 통해 뷰에 정의된 핸들러에서 throw될 때 대체를 트리거하지 않는 수정된 오류 레코드를 만듭니다.",
        "Documentation.LongDescription": "Table.View를 통해 뷰에 정의된 핸들러에서 throw될 때 대체를 트리거하지 않는 <code>errorRecord</code>의 수정된 오류 레코드를 만듭니다.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Table.View를 통해 보기에 정의된 핸들러가 가로챌 수 있는 함수를 만듭니다.",
        "Documentation.LongDescription": "<p><code>Table.View</code>를 통해 만든 보기에서 처리할 수 있는 <code>function</code>을(를) 토대로 보기 함수를 만듭니다.</p>\r\n<p><code>Table.View</code>의 <code>OnInvoke</code> 처리기를 사용하면 보기 함수에 대한 처리기를 정의할 수 있습니다.</p>\r\n<p>기본 제공 작업용 처리기와 마찬가지로, <code>OnInvoke</code> 처리기를 지정하지 않는 경우나 보기 함수를 처리하지 않는 경우 <code>function</code>이(가) 보기 위에 적용됩니다.</p>\r\n<p><code>Table.View</code> 및 사용자 지정 보기 함수에 대한 자세한 설명을 확인하려면 게시된 Power Query 사용자 지정 커넥터 설명서를 참조하세요.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "제어 문자가 모두 제거된 텍스트 값을 반환합니다.",
        "Documentation.LongDescription": "<code>text</code>의 제어 문자가 모두 제거된 텍스트 값을 반환합니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "텍스트 값에서 줄 바꿈 및 다른 제어 문자를 제거합니다.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "텍스트 값 목록을 하나의 텍스트 값으로 연결합니다.",
        "Documentation.LongDescription": "텍스트 값 목록(<code>texts</code>)을 단일 텍스트 값으로 결합한 결과를 반환합니다. <code>texts</code>에 있는 모든 <code>null</code> 값은 무시됩니다.\r\n    최종 결합된 텍스트에 사용되는 선택적 <code>separator</code>은(는) 지정할 수 있습니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "텍스트 값 \"Seattle\"과 \"WA\"를 결합합니다.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "\"Seattle\"과 \"WA\" 텍스트 값을 쉼표와 공백으로 구분하여 결합합니다.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "\"Seattle\", <code>null</code>, \"WA\" 값을 쉼표와 공백으로 구분하여 결합합니다(<code>null</code>은 무시됩니다).",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "지정된 값에서 텍스트 값을 만듭니다.",
        "Documentation.LongDescription": "<code>value</code>의 텍스트 표현을 반환합니다. <code>value</code>은(는) <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> 또는 <code>binary</code> 값일 수 있습니다.\r\n    지정된 값이 null이면 <code>Text.From</code>에서 null을 반환합니다. 선택적 <code>culture</code>(예: \"en-US\")이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "숫자 3에서 텍스트 값을 만듭니다.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "데이터를 이진 형식에서 텍스트로 디코딩합니다.",
        "Documentation.LongDescription": "<code>encoding</code> 형식을 사용하여 <code>binary</code> 데이터를 이진 값에서 텍스트 값으로 디코딩합니다.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "텍스트로 인코딩된 숫자의 세분화된 숫자 형식(Int64.Type, Double.Type 등)을 유추합니다.",
        "Documentation.LongDescription": "<code>text</code>의 세부적인 숫자 형식(Int64.Type, Double.Type 등)을 유추합니다. <code>text</code>이(가) 숫자가 아닌 경우 오류가 발생합니다. 선택적 <code>culture</code>(예: \"en-US\")이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "문자 수를 반환합니다.",
        "Documentation.LongDescription": "<code>text</code> 텍스트의 문자 수를 반환합니다.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "\"Hello World\" 텍스트의 문자 수를 찾습니다.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "모든 문자를 소문자로 변환합니다.",
        "Documentation.LongDescription": "<code>text</code>의 모든 문자를 소문자로 변환한 결과를 반환합니다. 선택적 <code>culture</code>(예: \"en-US\")이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"AbCd\"의 소문자 버전을 가져옵니다.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "각 단어의 첫 글자를 대문자로 표시합니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>에서 각 단어의 첫 글자만 대문자로 표시한 결과를 반환합니다. 다른 모든 글자는 소문자로 반환됩니다. 선택적 <code>culture</code>(예: \"en-US\")이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "간단한 문장에 <code>Text.Proper</code>를 사용합니다.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "제공한 <code>text</code>을(를) 반전시킵니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "텍스트 \"123\"을 반전시킵니다.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "텍스트를 이진 형식으로 인코딩합니다.",
        "Documentation.LongDescription": "지정된 텍스트 값 <code>text</code>을(를) 지정된 <code>encoding</code>을(를) 사용하여 이진 값으로 인코딩합니다.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "지정된 텍스트 값에서 문자 값 목록을 반환합니다.",
        "Documentation.LongDescription": "지정된 텍스트 값 <code>text</code>에서 문자 값 목록을 반환합니다.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "텍스트 \"Hello World\"에서 문자 값 목록을 만듭니다.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "선행 및 후행 공백을 모두 제거합니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>에서 선행 및 후행 공백을 모두 제거한 결과를 반환합니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \"에서 선행 및 후행 공백을 제거합니다.",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "후행 공백을 모두 제거합니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>에서 후행 공백을 모두 제거한 결과를 반환합니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \"에서 후행 공백을 제거합니다.",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "선행 공백을 모두 제거합니다.",
        "Documentation.LongDescription": "텍스트 값 <code>text</code>에서 선행 공백을 모두 제거한 결과를 반환합니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \"에서 선행 공백을 제거합니다.",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "모든 문자를 대문자로 변환합니다.",
        "Documentation.LongDescription": "<code>text</code>의 모든 문자를 대문자로 변환한 결과를 반환합니다. 선택적 <code>culture</code>(예: \"en-US\")이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"aBcD\"의 대문자 버전을 가져옵니다.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "시간의 끝을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>(으)로 표현되는 시간의 끝을 반환합니다(소수 자리 초 포함). 표준 시간대 정보는 유지됩니다.\r\n      <ul>\r\n        <li><code>dateTime</code>: 시간의 끝을 계산할 <code>time</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 5월 14일 오후 05:00:00의 시간 끝을 가져옵니다.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "2011년 5월 17일 오후 05:00:00 -7:00의 시간 끝을 가져옵니다.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "지정된 값에서 시간을 만듭니다.",
        "Documentation.LongDescription": "지정된 <code>value</code>에서 <code>time</code> 값을 반환합니다. 선택적 <code>culture</code>(예: “en-US”)이(가) 제공될 수도 있습니다.\r\n지정된 <code>value</code>이(가) <code>null</code>이면 <code>Time.From</code>이 <code>null</code>을 반환합니다. 지정된 <code>value</code>이(가) <code>time</code>이면 <code>value</code>이(가) 반환됩니다. 다음 형식의 값은 <code>time</code> 값으로 변환할 수 있습니다.\r\n      <ul>\r\n        <li><code>text</code>: 텍스트 표현의 <code>time</code> 값. 자세한 내용은 <code>Time.FromText</code>를 참조하세요.</li>\r\n        <li><code>datetime</code>: <code>value</code>의 시간 구성 요소.</li>\r\n        <li><code>datetimezone</code>: <code>value</code>의 현지 날짜/시간에 해당하는 값의 시간 구성 요소.</li>\r\n        <li><code>number</code>: <code>value</code>(으)로 표현되는 소수 일 수에 해당하는 <code>time</code>. <code>value</code>이(가) 음수이거나 1보다 크거나 같으면 오류가 반환됩니다.</li>\r\n      </ul>\r\n<code>value</code>이(가) 기타 형식이면 오류가 반환됩니다.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>0.7575</code>를 <code>time</code> 값으로 변환합니다.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "<code>#datetime(1899, 12, 30, 06, 45, 12)</code>을 <code>time</code> 값으로 변환합니다.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "현지 및 범용 및 사용자 지정 Time 형식에서 Time을 만듭니다.",
        "Documentation.LongDescription": "텍스트 표현 <code>text</code>의 <code>time</code> 값을 만듭니다. 추가 속성을 지정하기 위해 선택적 <code>record</code> 매개 변수 <code>options</code>이(가) 제공될 수 있습니다. <code>record</code>에는 다음 필드가 포함될 수 있습니다.\r\n<ul>\r\n   <li><code>Format</code>: 사용할 형식을 나타내는 <code>text</code> 값입니다. 자세한 내용은 https://go.microsoft.com/fwlink/?linkid=2180104 및 https://go.microsoft.com/fwlink/?linkid=2180105를 참조하세요. 이 필드를 생략하거나 <code>null</code>을 제공하면 최선을 다해 날짜를 구문 분석하게 됩니다.</li>\r\n   <li><code>Culture</code>: <code>Format</code>이 Null이 아니면 <code>Culture</code>가 일부 형식 지정자를 제어합니다. 예를 들어, <code>“en-US”</code>에서 <code>\"tt\"</code>은(는) <code>\"AM\" or \"PM\"</code>이지만, <code>\"ar-EG\"</code>에서 <code>\"tt\"</code>은(는) <code>\"ص\" or \"م\"</code>입니다. <code>Format</code>이 <code>null</code>인 경우, <code>Culture</code>는 사용할 기본 형식을 제어합니다. <code>Culture</code>가 <code>null</code>이거나 생략된 경우, <code>Culture.Current</code>가 사용됩니다.</li>\r\n</ul>\r\n레거시 워크플로를 지원하기 위해, <code>options</code>도 텍스트 값이 될 수 있습니다. 이는 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>과(와) 동일한 동작을 갖습니다.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>\"10:12:31am\"</code>을 Time 값으로 변환합니다.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "<code>\"1012\"</code>를 시간 값으로 변환합니다.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "<code>\"10\"</code>을 시간 값으로 변환합니다.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "시간 구성 요소를 반환합니다.",
        "Documentation.LongDescription": "제공된 <code>time</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값 <code>dateTime</code>의 시간 구성 요소를 반환합니다.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36)에서 시간을 찾습니다.",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "분 구성 요소를 반환합니다.",
        "Documentation.LongDescription": "제공된 <code>time</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값 <code>dateTime</code>의 분 구성 요소를 반환합니다.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36)에서 분을 찾습니다.",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "초 구성 요소를 반환합니다.",
        "Documentation.LongDescription": "제공된 <code>time</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값 <code>dateTime</code>의 초 구성 요소를 반환합니다.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "날짜/시간 값에서 초 값을 찾습니다.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "시간의 시작을 반환합니다.",
        "Documentation.LongDescription": "<code>dateTime</code>(으)로 표현되는 시간의 시작을 반환합니다.\r\n    <code>dateTime</code>은(는) <code>time</code>, <code>datetime</code> 또는 <code>datetimezone</code> 값이어야 합니다.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011년 10월 10일 오전 8:10:32가 포함된 시간의 시작을 확인합니다.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Time 값의 부분을 포함하는 레코드를 반환합니다.",
        "Documentation.LongDescription": "지정된 Time 값 <code>time</code>의 부분을 포함하는 레코드를 반환합니다.\r\n <ul>\r\n        <li><code>time</code>: 해당 부분의 레코드가 계산될 <code>time</code> 값입니다.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(11, 56, 2)</code> 값을 Time 값을 포함하는 레코드로 변환합니다.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "time 값의 텍스트 표현을 반환합니다.",
        "Documentation.LongDescription": "<code>time</code>의 텍스트 표현을 반환합니다. 추가 속성을 지정하기 위해 선택적 <code>record</code> 매개 변수 <code>options</code>이(가) 제공될 수 있습니다. <code>culture</code>은(는) 레거시 워크플로에만 사용됩니다. <code>record</code>에는 다음 필드가 포함될 수 있습니다.\r\n<ul>\r\n   <li><code>Format</code>: 사용할 형식을 나타내는 <code>text</code> 값입니다. 자세한 내용은 https://go.microsoft.com/fwlink/?linkid=2180104 및 https://go.microsoft.com/fwlink/?linkid=2180105를 참조하세요. 이 필드를 생략하거나 <code>null</code>을 제공하면 <code>Culture</code>에서 정의한 기본값을 사용하여 날짜 형식이 지정됩니다.</li>\r\n   <li><code>Culture</code>: <code>Format</code>이 null이 아니면 <code>Culture</code>가 일부 형식 지정자를 제어합니다. 예를 들어, <code>“en-US”</code>에서 <code>\"tt\"</code>은(는) <code>\"AM\" or \"PM\"</code>이지만, <code>\"ar-EG\"</code>에서 <code>\"tt\"</code>은(는) <code>\"ص\" or \"م\"</code>입니다. <code>Format</code>이 <code>null</code>인 경우, <code>Culture</code>는 사용할 기본 형식을 제어합니다. <code>Culture</code>가 <code>null</code>이거나 생략된 경우, <code>Culture.Current</code>가 사용됩니다.</li>\r\n</ul>\r\n레거시 워크플로를 지원하기 위해, <code>options</code> 및 <code>culture</code>도 텍스트 값이 될 수 있습니다. 이는 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>과(와) 동일한 동작을 갖습니다.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(01, 30, 25)</code>을 <code>text</code> 값으로 변환합니다. <i>결과 출력은 현재 문화권에 따라 다를 수 있습니다.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "사용자 지정 형식 및 독일어 문화권을 사용하여 변환합니다.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "표준 시간 형식을 사용하여 변환합니다.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "지정한 레코드 형식의 닫힌 버전을 반환합니다(이미 닫혀 있는 경우에는 동일한 형식).",
        "Documentation.LongDescription": "지정한 <code>레코드</code> <code>type</code>의 닫힌 버전을 반환합니다(이미 닫혀 있는 경우에는 동일한 형식).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>type [ A = number,…]</code>의 닫힌 버전을 만듭니다.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "형식의 패싯을 반환합니다.",
        "Documentation.LongDescription": "<code>type</code> 패싯을 포함하는 레코드를 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "필드 값이 함수 형식의 매개 변수 이름으로 설정되어 있고 값이 해당하는 형식으로 설정되어 있는 레코드를 반환합니다.",
        "Documentation.LongDescription": "필드 값이 <code>type</code>의 매개 변수 이름으로 설정되어 있고 값이 해당하는 형식으로 설정되어 있는 레코드를 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>(x as number, y as text)</code> 함수에 대한 매개 변수 형식을 확인합니다.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "함수 형식을 호출하는 데 필요한 최소 매개 변수 개수를 나타내는 숫자를 반환합니다.",
        "Documentation.LongDescription": "함수의 입력 <code>type</code>을(를) 호출하는 데 필요한 최소 매개 변수 개수를 나타내는 숫자를 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>(x as number, optional y as text)</code> 함수에 대한 필수 매개 변수 개수를 확인합니다.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "함수 형식별로 반환되는 형식을 반환합니다.",
        "Documentation.LongDescription": "함수 <code>type</code>별로 반환되는 형식을 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>() as any)</code>의 반환 형식을 확인합니다.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "형식이 nullable 형식이면 true를 반환하고, 그렇지 않으면 false를 반환합니다.",
        "Documentation.LongDescription": "형식이 <code>nullable</code> 형식이면 <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>숫자</code>가 nullable 형식인지 확인합니다.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "<code>nullable 형식 숫자</code>가 nullable 형식인지 확인합니다.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "레코드 형식이 열려 있는지 여부를 반환합니다.",
        "Documentation.LongDescription": "레코드 <code>type</code>이(가) 열려 있는지 여부를 나타내는 <code>논리값</code>을 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>type [ A = number, ...]</code> 레코드가 열려 있는지 확인합니다.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "목록 형식에서 항목 형식을 반환합니다.",
        "Documentation.LongDescription": "목록 <code>type</code>에서 항목 형식을 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "목록 <code>{number}</code>에서 항목 형식을 확인합니다.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "형식에서 null을 허용하지 않는 형식을 반환합니다.",
        "Documentation.LongDescription": "<code>type</code>에서 <code>null을 허용하지 않는</code> 형식을 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>nullable 형식 숫자</code>의 null을 허용하지 않는 형식을 반환합니다.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "지정한 레코드 형식의 열린 버전을 반환합니다(이미 열려 있는 경우에는 동일한 형식).",
        "Documentation.LongDescription": "지정한 <code>레코드</code> <code>type</code>의 열린 버전을 반환합니다(이미 열려 있는 경우에는 동일한 형식).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>type [ A = number]</code>의 열린 버전을 만듭니다.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "반환되는 레코드 형식의 각 필드에 해당하는 이름 및 값이 지정되어 있으며 레코드 형식의 필드에 대해 설명하는 레코드를 반환합니다.",
        "Documentation.LongDescription": "레코드 <code>type</code>의 필드에 대해 설명하는 레코드를 반환합니다. 반환되는 레코드 형식의 각 필드에는 해당하는 이름 및 값이 레코드 <code>[ Type = type, Optional = logical ]</code>의 형식으로 지정되어 있습니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "레코드 <code>[ A = number, optional B = any]</code>의 이름 및 값을 확인합니다.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "지정된 테이블 형식에 대한 키 목록(비어 있을 수 있음)을 반환합니다.",
        "Documentation.LongDescription": "지정된 테이블 형식에 대한 키 목록(비어 있을 수 있음)을 반환합니다.<br>\r\n    <br>\r\n    각 키는 다음 형식의 레코드를 사용하여 정의됩니다.\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: 키를 정의하는 열 이름 목록\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: 키가 테이블의 기본 키이면 <code>true</code>, 그렇지 않으면 <code>false</code>를 반환\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "테이블 형식에 대한 키 정보를 반환합니다.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "테이블 형식의 행 형식을 반환합니다.",
        "Documentation.LongDescription": "지정된 테이블 형식의 행 형식을 반환합니다. 결과는 항상 레코드 형식입니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "단순 테이블에 대한 행 형식 정보를 반환합니다.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "형식 목록의 합집합을 반환합니다.",
        "Documentation.LongDescription": "<code>types</code> 형식의 합집합을 반환합니다.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "레코드를 URI 쿼리 문자열로 어셈블합니다.",
        "Documentation.LongDescription": "<code>query</code> 레코드를 URI 쿼리 문자열로 어셈블하고, 필요에 따라 문자를 이스케이프합니다.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "특수 문자를 포함한 쿼리 문자열을 인코딩합니다.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "RFC 3986에 따라 특수 문자를 인코딩합니다.",
        "Documentation.LongDescription": "RFC 3986 규칙에 따라 <code>data</code> 입력의 특수 문자를 인코딩합니다.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "\"+money$\"의 특수 문자를 인코딩합니다.",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "입력 절대 URI의 각 부분을 레코드로 반환합니다.",
        "Documentation.LongDescription": "입력 <code>absoluteUri</code>의 각 부분을 Scheme, Host, Port, Path, Query, Fragment, UserName 및 Password와 같은 값을 포함하는 레코드로 반환합니다.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "절대 URI \"www.adventure-works.com\"의 각 부분을 찾습니다.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "백분율로 인코딩된 문자열을 디코딩합니다.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Analytics 서비스의 URL을 입력합니다.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "DevOps Analytics 서비스 URL에서 이진 값으로 다운로드한 콘텐츠를 반환합니다. 이 함수는 조직마다 각기 다른 자격 증명을 사용합니다."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Analytics 서비스의 URL을 입력합니다.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Azure DevOps Analytics 서비스 URL에서 이진 값으로 다운로드한 콘텐츠를 반환합니다. 이 함수는 액세스할 수 있는 모든 조직에 전역 자격 증명을 사용합니다."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "대체 쿼리 계획을 나타냅니다.",
        "Documentation.LongDescription": "Value.Expression(Value.Optimize(...))를 통해 얻은 쿼리 계획 식 내에서 대체 쿼리 계획을 나타냅니다. 다른 용도로는 사용할 수 없습니다.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "값의 식을 나타내는 AST(요약 구문 트리)를 반환합니다.",
        "Documentation.LongDescription": "값의 식을 나타내는 AST(요약 구문 트리)를 반환합니다.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "텍스트 표현에서 강력한 형식의 값을 만듭니다.",
        "Documentation.LongDescription": "텍스트 표현 <code>text</code>에서 값을 디코딩하여 적절한 형식의 값으로 해석합니다.\r\n    <code>Value.FromText</code>는 텍스트 값을 받아 숫자, 논리 값, null 값, datetime 값 또는 텍스트 값을 반환합니다. 빈 텍스트 값은 null 값으로 해석됩니다.\r\n    선택적 <code>culture</code>(예: \"en-US\")이(가) 제공될 수도 있습니다.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "입력의 메타데이터를 포함하는 레코드를 반환합니다.",
        "Documentation.LongDescription": "입력의 메타데이터를 포함하는 레코드를 반환합니다.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "값에 최적화된 식을 반환하도록 Value.Expression에 알립니다.",
        "Documentation.LongDescription": "Value.Expression 내에서 사용될 때 <code>value</code>이(가) 최적화할 수 있는 쿼리를 나타내는 경우 이 함수는 최적화된 식을 반환해야 함을 나타냅니다. 그렇지 않으면 아무런 효과 없이 <code>value</code>이(가) 전달됩니다.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "입력에서 메타데이터를 제거합니다.",
        "Documentation.LongDescription": "입력에서 메타데이터를 제거합니다.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "지정된 값의 형식을 반환합니다.",
        "Documentation.LongDescription": "지정된 값의 형식을 반환합니다.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "이 기능은 내부용입니다.",
        "Documentation.LongDescription": "이 기능은 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "이 기능은 내부용입니다.",
        "Documentation.LongDescription": "이 기능은 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "이 함수는 내부용입니다.",
        "Documentation.LongDescription": "이 함수는 내부용입니다.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "웹 브라우저에서 볼 때 지정된 URL에 대한 HTML을 반환합니다.",
        "Documentation.LongDescription": "지정한 <code>url</code>에 대한 HTML을 웹 브라우저에 표시되는 대로 반환합니다. 선택적 레코드 매개 변수인 <code>options</code>을(를) 사용하여 추가 속성을 지정할 수도 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: 대상 사이트에 API 키 개념이 있는 경우 이 매개 변수를 사용하여 URL에서 사용할 키 매개 변수의 이름(값이 아님)을 지정할 수 있습니다. 실제 키 값은 자격 증명에 제공됩니다.</li>\r\n        <li><code>WaitFor</code>: 페이지가 로드(항상 완료)될 때까지 기다리는 것 외에 HTML을 다운로드하기 전에 기다릴 조건을 지정합니다. Timeout 및/또는 Selector 필드가 포함된 레코드일 수 있습니다. Timeout만 지정하는 경우 함수는 HTML을 다운로드하기 전에 지정된 시간 동안 기다립니다. Selector와 Timeout을 모두 지정한 상태에서 페이지에서 Selector가 존재하기 전에 Timeout이 경과되면 오류가 발생합니다. Selector를 Timeout 없이 지정하는 경우 Timeout 기본값인 30초가 적용됩니다.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "데이터 액세스",
        "Documentation.Examples": [
          {
            "Description": "https://microsoft.com에 대한 HTML을 반환합니다.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "CSS 선택기가 종료될 때까지 기다린 후 https://microsoft.com에 대한 HTML을 반환합니다.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "10초 동안 기다린 후 https://microsoft.com에 대한 HTML을 반환합니다.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "CSS 선택기가 종료될 때까지 10초 동안 기다린 후 https://microsoft.com에 대한 HTML을 반환합니다.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "URL에서 다운로드된 콘텐츠를 이진 형식으로 반환합니다.",
        "Documentation.LongDescription": "<code>url</code>에서 다운로드한 콘텐츠를 이진으로 반환합니다. 추가 속성을 지정하기 위해 선택적 레코드 매개 변수 <code>options</code>을(를) 제공할 수 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n   <ul>\r\n<li><code>Query</code> : 이스케이프에 신경 쓰지 않고 프로그래밍 방식으로 URL에 쿼리 매개 변수를 추가합니다.</li>\r\n<li><code>ApiKeyName</code> : 대상 사이트에 API 키 개념이 적용되어 있으면 이 매개 변수를 사용하여 URL에서 사용해야 하는 키 매개 변수의 이름(값 아님)을 지정할 수 있습니다. 실제 키 값은 자격 증명에 제공됩니다.</li>\r\n<li><code>Headers</code> : 이 값을 레코드로 지정하면 HTTP 요청에 추가 헤더가 제공됩니다.</li>\r\n<li><code>Timeout</code> : 이 값을 기간으로 지정하면 HTTP 요청의 제한 시간이 변경됩니다. 기본값은 100초입니다.</li>\r\n<li><code>ExcludedFromCacheKey</code> : 이 값을 목록으로 지정하면 이러한 HTTP 헤더 키가 데이터 캐싱을 위한 계산에 포함되지 않습니다.</li>\r\n<li><code>IsRetry</code> : 이 논리 값을 true로 지정하면 데이터를 가져올 때 캐시의 기존 응답이 무시됩니다.</li>\r\n<li><code>ManualStatusHandling</code> : 이 값을 목록으로 지정하면 응답에 이러한 상태 코드 중 하나가 포함된 기본 제공 HTTP 요청을 처리할 수 없습니다.</li>\r\n<li><code>RelativePath</code> : 이 값을 텍스트로 지정하면 요청하기 전에 기본 URL에 값이 추가됩니다.</li>\r\n<li><code>Content</code> : 이 값을 지정하면 옵션 값을 POST의 내용으로 사용하여 GET에서 POST로의 웹 요청이 변경됩니다.</li>\r\n</ul>\r\n\r\n HTTP 요청은 GET(콘텐츠가 지정되지 않은 경우) 또는 POST(콘텐츠가 있는 경우)로 이루어집니다. POST 요청은 익명으로만 이루어질 수 있습니다.\r\n    <br>\r\n    HTTP 응답의 헤더는 이진 결과의 메타데이터로 사용할 수 있습니다. 사용자 지정 데이터 커넥터 컨텍스트 외부에서는 보안상의 이유로 응답 헤더의 하위 집합만 사용할 수 있습니다.\r\n   ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "RelativePath 및 쿼리 옵션을 사용하여 <code>\"https://bing.com/search?q=Power+Query\"</code>의 콘텐츠를 검색합니다. 이러한 옵션을 사용하여 정적 기본 URL을 동적으로 쿼리할 수 있습니다.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "URL에 대해 POST를 수행하고 바이너리 JSON 페이로드를 전달하고 응답을 JSON으로 구문 분석합니다.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "인증 키를 쿼리 문자열의 일부로 받아들이는 보안 URL에 연결합니다. 보안 위험이 있는 M에서 비밀 키를 하드 코딩하는 대신,\r\n    M에서 이름(값 아님)을 지정하고, 웹 API 인증을 선택하고, 웹 API 자격 증명의 일부로 키 값을 입력하여 키를 안전하게 제공할 수 있습니다.\r\n    이러한 방식으로 사용될 경우, 다음 예제는 <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>에 대한 요청을 생성합니다.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "URL에서 다운로드한 HTTP 헤더를 레코드 값으로 반환합니다.",
        "Documentation.LongDescription": "<code>url</code>에서 다운로드한 헤더를 레코드로 반환합니다. 추가 속성을 지정하기 위해 선택적 레코드 매개 변수 <code>options</code>을(를) 제공할 수 있습니다. 레코드에는 다음 필드가 포함될 수 있습니다.\r\n    <ul>\r\n<li><code>Query</code> : 이스케이프에 신경 쓰지 않고 프로그래밍 방식으로 URL에 쿼리 매개 변수를 추가합니다.</li>\r\n<li><code>ApiKeyName</code> : 대상 사이트에 API 키 개념이 적용되어 있으면 이 매개 변수를 사용하여 URL에서 사용해야 하는 키 매개 변수의 이름(값 아님)을 지정할 수 있습니다. 실제 키 값은 자격 증명에 제공됩니다.</li>\r\n<li><code>Headers</code> : 이 값을 레코드로 지정하면 HTTP 요청에 추가 헤더가 제공됩니다.</li>\r\n<li><code>Timeout</code> : 이 값을 기간으로 지정하면 HTTP 요청의 제한 시간이 변경됩니다. 기본값은 100초입니다.</li>\r\n<li><code>ExcludedFromCacheKey</code> : 이 값을 목록으로 지정하면 이러한 HTTP 헤더 키가 데이터 캐싱을 위한 계산에 포함되지 않습니다.</li>\r\n<li><code>IsRetry</code> : 이 논리 값을 true로 지정하면 데이터를 가져올 때 캐시의 기존 응답이 무시됩니다.</li>\r\n<li><code>ManualStatusHandling</code> : 이 값을 목록으로 지정하면 응답에 이러한 상태 코드 중 하나가 포함된 기본 제공 HTTP 요청을 처리할 수 없습니다.</li>\r\n<li><code>RelativePath</code> : 이 값을 텍스트로 지정하면 요청하기 전에 기본 URL에 값이 추가됩니다.</li>\r\n</ul>\r\n\r\n   HEAD 메서드를 사용하여 HTTP 요청이 이루어집니다. 사용자 지정 데이터 커넥터 컨텍스트 외부에서는 응답 헤더의 하위 집합만 사용할 수 있습니다(보안상의 이유로).\r\n   ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "상대 경로 및 쿼리 옵션을 사용하여 <code>\"https://bing.com/search?q=Power+Query\"</code>에 대한 HTTP 헤더를 검색합니다.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "ACE(액세스 제어 항목) 조건을 평가하는 기준이 되는 권한 부여 컨텍스트입니다.",
        "Documentation.LongDescription": "ACE(액세스 제어 항목) 조건을 평가하는 기준이 되는 권한 부여 컨텍스트입니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "ACE(액세스 제어 항목) 테이블입니다.",
        "Documentation.LongDescription": "권한 부여 규칙을 나타내는 ACE(액세스 제어 항목)으로 구성된 순서가 지정된 테이블입니다. 각각의 행은 현재 권한 부여 컨텍스트에 대해 순서대로 평가되며 <code>Condition</code> 식이 True를 반환하는 첫 번째에 따라 적용되는 규칙이 결정됩니다. <code>Action</code> 열은 규칙이 적용되는 작업의 종류를 나타냅니다. <code>AccessControlKind</code> 열은 작업에 대해 액세스를 허용해야 할지, 아니면 거부해야 할지를 결정합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "액세스 제어 종류를 지정합니다.",
        "Documentation.LongDescription": "액세스 제어 종류를 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "모든 값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "모든 이진 값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 이진 값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "이진 인코딩 형식을 지정합니다.",
        "Documentation.LongDescription": "이진 인코딩 형식을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "항목이 그룹에 나타나야 하는 횟수를 지정합니다.",
        "Documentation.LongDescription": "항목이 그룹에 나타나야 하는 횟수를 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "수행할 버퍼링 유형을 설명합니다.",
        "Documentation.LongDescription": "수행할 버퍼링 유형을 설명합니다.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "모든 바이트를 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 바이트를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "바이트 순서를 지정합니다.",
        "Documentation.LongDescription": "바이트 순서를 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "모든 문자를 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 문자를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "압축 형식을 지정합니다.",
        "Documentation.LongDescription": "압축 형식을 지정합니다.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "CSV 문서에서 따옴표의 중요성을 지정합니다.",
        "Documentation.LongDescription": "CSV 문서에서 따옴표의 중요성을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "통화 값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "통화 값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "모든 날짜 값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 날짜 값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "연결된 표준 시간대가 없는 모든 날짜 및 시간 값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "연결된 표준 시간대가 없는 모든 날짜 및 시간 값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "표준 시간대를 기준으로 한 모든 날짜 및 시간 값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "표준 시간대를 기준으로 한 모든 날짜 및 시간 값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "요일을 지정합니다.",
        "Documentation.LongDescription": "요일을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "고정 소수점 10진수를 나타내는 형식입니다.",
        "Documentation.LongDescription": "고정 소수점 10진수를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "배정밀도 부동 소수점 수를 나타내는 형식입니다.",
        "Documentation.LongDescription": "배정밀도 부동 소수점 수를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "모든 기간 값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 기간 값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "예상보다 많은 열이 포함된 행에서 추가 값에 대해 필요한 동작을 지정합니다.",
        "Documentation.LongDescription": "예상보다 많은 열이 포함된 행에서 추가 값에 대해 필요한 동작을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "모든 함수를 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 함수를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "그룹화 종류를 지정합니다.",
        "Documentation.LongDescription": "동일한 키 값을 사용하여 여러 로컬 그룹을 생성할 수 있지만 지정된 키 값에 대해 하나의 전역 그룹만 생성됩니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "GUID 값을 나타내는 유형입니다.",
        "Documentation.LongDescription": "GUID 값을 나타내는 유형입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "ID는 사용자, 그룹, 디바이스 또는 기타 식별 가능한 항목을 나타냅니다.",
        "Documentation.LongDescription": "ID는 사용자, 그룹, 디바이스 또는 기타 식별 가능한 항목을 나타냅니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "ID를 만들고 비교하는 범위를 정의합니다.",
        "Documentation.LongDescription": "ID를 만들고 비교하는 범위를 정의합니다.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "부호 있는 16비트 정수를 나타내는 형식입니다.",
        "Documentation.LongDescription": "부호 있는 16비트 정수를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "부호 있는 32비트 정수를 나타내는 형식입니다.",
        "Documentation.LongDescription": "부호 있는 32비트 정수를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "부호 있는 64비트 정수를 나타내는 형식입니다.",
        "Documentation.LongDescription": "부호 있는 64비트 정수를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "부호 있는 8비트 정수를 나타내는 형식입니다.",
        "Documentation.LongDescription": "부호 있는 8비트 정수를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "조인 연산에 사용할 JOIN 알고리즘을 지정합니다.",
        "Documentation.LongDescription": "조인 연산에 사용할 JOIN 알고리즘을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "조인 연산 종류를 지정합니다.",
        "Documentation.LongDescription": "조인 연산 종류를 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "조인의 왼쪽 또는 오른쪽 테이블을 지정합니다.",
        "Documentation.LongDescription": "조인의 왼쪽 또는 오른쪽 테이블을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "이 데이터 원본에 사용된 SQL 언어에서 지원하는 제한 절의 형식을 설명합니다.",
        "Documentation.LongDescription": "이 데이터 원본에 사용된 SQL 언어에서 지원하는 제한 절의 형식을 설명합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "모든 목록을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 목록을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "모든 논리값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 논리값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "예상보다 적은 열이 포함된 행에서 누락된 값에 대해 필요한 작업을 지정합니다.",
        "Documentation.LongDescription": "예상보다 적은 열이 포함된 행에서 누락된 값에 대해 필요한 작업을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Null을 나타내는 형식입니다.",
        "Documentation.LongDescription": "Null을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "모든 숫자를 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 숫자를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "OData Service가 생략할 수 있는 값의 종류를 지정합니다.",
        "Documentation.LongDescription": "OData Service가 생략할 수 있는 값의 종류를 지정합니다.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "시퀀스에서 요소의 발생을 지정합니다.",
        "Documentation.LongDescription": "시퀀스에서 요소의 발생을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "정렬 방향을 지정합니다.",
        "Documentation.LongDescription": "정렬 방향을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "텍스트 암호를 나타내는 유형입니다.",
        "Documentation.LongDescription": "텍스트 암호를 나타내는 유형입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "백분율 값을 나타내는 유형입니다.",
        "Documentation.LongDescription": "백분율 값을 나타내는 유형입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "백분위수 모드 유형을 지정합니다.",
        "Documentation.LongDescription": "백분위수 모드 유형을 지정합니다.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "비교 정밀도를 지정합니다.",
        "Documentation.LongDescription": "비교 정밀도를 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "따옴표 스타일을 지정합니다.",
        "Documentation.LongDescription": "따옴표 스타일을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "순위 유형을 지정합니다.",
        "Documentation.LongDescription": "순위 유형을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "모든 레코드를 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 레코드를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "인덱싱을 입력의 처음부터 실행해야 하는지, 아니면 끝부터 실행해야 하는지를 나타냅니다.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "반올림할 수 있는 동률 숫자가 있는 경우 반올림 방향을 지정합니다.",
        "Documentation.LongDescription": "반올림할 수 있는 동률 숫자가 있는 경우 반올림 방향을 지정합니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "SAP Business Warehouse 실행 모드 옵션에 대한 유효한 옵션입니다.",
        "Documentation.LongDescription": "SAP Business Warehouse 실행 모드 옵션에 대한 유효한 옵션입니다.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "SAP HANA 배포 옵션에 대해 유효한 옵션입니다.",
        "Documentation.LongDescription": "SAP HANA 배포 옵션에 대해 유효한 옵션입니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "SAP HANA 범위 입력 매개 변수에 대한 범위 연산자입니다.",
        "Documentation.LongDescription": "SAP HANA 범위 입력 매개 변수에 대한 범위 연산자입니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "단정밀도 부동 소수점 수를 나타내는 형식입니다.",
        "Documentation.LongDescription": "단정밀도 부동 소수점 수를 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Spark 인스턴스에 연결할 때 사용하는 프로토콜입니다.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "모든 테이블을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 테이블을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "모든 텍스트 값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 텍스트 값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "텍스트 인코딩 형식을 지정합니다.",
        "Documentation.LongDescription": "텍스트 인코딩 형식을 지정합니다.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "모든 시간 값을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 시간 값을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "추적 수준을 지정합니다.",
        "Documentation.LongDescription": "추적 수준을 지정합니다.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "모든 형식을 나타내는 형식입니다.",
        "Documentation.LongDescription": "모든 형식을 나타내는 형식입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "텍스트 URI를 나타내는 유형입니다.",
        "Documentation.LongDescription": "텍스트 URI를 나타내는 유형입니다.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "HTTP 메서드를 지정합니다.",
        "Documentation.LongDescription": "HTTP 메서드를 지정합니다.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
