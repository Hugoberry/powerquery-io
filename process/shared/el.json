{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Επιστρέφει μια δομική αναπαράσταση μιας βάσης δεδομένων της Access.",
        "Documentation.LongDescription": "Επιστρέφει μια δομική αναπαράσταση μιας βάσης δεδομένων της Access, <code>database</code>. Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να καθοριστεί για τον έλεγχο των παρακάτω επιλογών:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n</ul>\r\n\r\n    Για παράδειγμα, η παράμετρος εγγραφής καθορίζεται ως [option1 = value1, option2 = value2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Επιστρέφει τις βάσεις δεδομένων των Υπηρεσιών ανάλυσης σε έναν συγκεκριμένο κεντρικό υπολογιστή.",
        "Documentation.LongDescription": "Επιστρέφει βάσεις δεδομένων σε μια παρουσία των Υπηρεσιών ανάλυσης, <code>server</code>. Μπορεί να παρασχεθεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Μια λογική τιμή που υποδεικνύει αν οι τύποι που καθορίζονται στο πολυδιάστατο μοντέλο ή το μοντέλο σε μορφή πίνακα θα χρησιμοποιηθούν για τους τύπους των προστιθέμενων στηλών μετρήσεων. Όταν οριστεί σε false, θα χρησιμοποιείται ο τύπος &quot;number&quot; για όλες τις στήλες μετρήσεων. Η προεπιλεγμένη τιμή για αυτήν την επιλογή είναι false.</li>\r\n<li><code>Culture</code> : Ένα όνομα κουλτούρας που καθορίζει την κουλτούρα για τα δεδομένα. Αυτό αντιστοιχεί στην ιδιότητα συμβολοσειράς σύνδεσης &quot;Αναγνωριστικό τοπικών ρυθμίσεων&quot;.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή, προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>SubQueries</code> : Ένας αριθμός (0, 1 ή 2) που ορίζει την τιμή της ιδιότητας &quot;SubQueries&quot; στη συμβολοσειρά σύνδεσης. Αυτή ελέγχει τη συμπεριφορά των υπολογισμένων μελών σε δευτερεύουσες επιλογές ή δευτερεύοντες κύβους. (Η προεπιλεγμένη τιμή είναι 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Κύβοι AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Εισαγωγή/DirectQuery δεδομένων κύβου από ένα AtScale.",
        "Documentation.LongDescription": "\r\nΕπιστρέφει δεδομένα κύβου από το AtScale στον διακομιστή <code>server</code>. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: Μια λογική τιμή που υποδεικνύει αν οι τύποι που καθορίζονται στο πολυδιάστατο μοντέλο ή το μοντέλο σε μορφή πίνακα θα χρησιμοποιούνται για τους τύπους των προστιθέμενων στηλών μετρήσεων. Όταν οριστεί σε false, ο τύπος number θα χρησιμοποιείται για όλες τις στήλες μετρήσεων. Η προεπιλεγμένη τιμή για αυτή την επιλογή είναι false.</li>\r\n        <li><code>CommandTimeout</code>: Μια διάρκεια (σε δευτερόλεπτα) που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή, προτού ακυρωθεί. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης. </li>\r\n        <li><code>ConnectionTimeout</code>: Μια διάρκεια (σε δευτερόλεπτα) που ελέγχει το χρονικό διάστημα αναμονής πριν από την εγκατάλειψη μιας προσπάθειας δημιουργίας σύνδεσης με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης. </li>\r\n\r\n</ul>\r\nΗ παράμετρος εγγραφής καθορίζεται ως [option1 = value1, option2 = value2...].",
        "Documentation.Examples": {
          "Description": "Παραθέστε τα δεδομένα κύβου σε έναν κύβο AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Εισάγει δεδομένα από το Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Εισάγει δεδομένα από την παρουσία Azure Data Explorer (Kusto) που διαθέτετε",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα πληροφοριών συμβάντων Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Ένας πίνακας με συμβάντα Storm από τη βάση δεδομένων \"Δείγματα\" στο σύμπλεγμα \"Βοήθεια\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL της υπηρεσίας ανάλυσης Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents ",
        "Documentation.Name": "VSTS.AccountContents ",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα που έχουν ληφθεί από τη διεύθυνση URL της υπηρεσίας ανάλυσης Azure DevOps ως δυαδική τιμή. Αυτή η συνάρτηση χρησιμοποιεί διαφορετικά διαπιστευτήρια για διαφορετικούς οργανισμούς."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Τροφοδοσία υπηρεσιών Azure DevOps",
        "Documentation.DisplayName": "Τροφοδοσία υπηρεσιών Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα τροφοδοσιών OData που παρέχονται από το Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL του τελικού σημείου του Azure Enterprise REST API που σχετίζεται με την εγγραφή σας",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα αναφορών και μηνών διαθέσιμων από το Azure Enterprise API",
        "Documentation.Name": "Εισαγωγή δεδομένων από το Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Χρήση της συνάρτησης AzureEnterprise.Tables και περιήγηση σε μια συγκεκριμένη τιμή για τη λήψη των αποτελεσμάτων.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Περιεχόμενα",
            "Result": "Πίνακας"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Δείτε https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli για δείγματα ερωτημάτων εκκίνησης.",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέψτε έναν πίνακα με αποτελέσματα ερωτημάτων για \"πόρους\" ερωτήματος χρήστη",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Εμφανίζει τους πίνακες σε μια παρουσία του Azure Spark.",
        "Documentation.LongDescription": "Εμφανίζει τους πίνακες σε μια παρουσία του Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Εμφανίζει τους πίνακες σε μια παρουσία του Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει τα κοντέινερ που βρέθηκαν στον καθορισμένο λογαριασμό από ένα θάλαμο χώρου αποθήκευσης του Azure.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει μια γραμμή για κάθε κοντέινερ που βρέθηκε στη διεύθυνση URL λογαριασμού, <code>account</code>, από έναν θάλαμο χώρου αποθήκευσης Azure. Κάθε γραμμή περιέχει μια σύνδεση στα αντικείμενα blob του κοντέινερ. Μπορεί να καθοριστεί <code>options</code> για έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>BlockSize</code> : Ο αριθμός των byte για ανάγνωση πριν από την αναμονή στον καταναλωτή δεδομένων. Η προεπιλεγμένη τιμή είναι 4 MB.</li>\r\n<li><code>RequestSize</code> : Ο αριθμός των byte των οποίων θα επιχειρείται ανάγνωση σε μια μεμονωμένη αίτηση HTTP στον διακομιστή. Η προεπιλεγμένη τιμή είναι 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Η επιλογή ConcurrentRequests υποστηρίζει ταχύτερη λήψη δεδομένων με καθορισμό του αριθμού των αιτήσεων που θα πραγματοποιηθούν παράλληλα, εις βάρος της χρήσης της μνήμης. Η απαιτούμενη μνήμη είναι (ConcurrentRequest * RequestSize). Η προεπιλεγμένη τιμή είναι 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει τα έγγραφα που βρέθηκαν στο καθορισμένο κοντέινερ και στους υποφακέλους του από το Azure Data Lake Storage.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει τα έγγραφα που βρέθηκαν στο καθορισμένο κοντέινερ και στους υποφακέλους του στη διεύθυνση URL του λογαριασμού, <code>endpoint</code>, από ένα σύστημα αρχείων Azure Data Lake Storage. Μπορεί να καθοριστεί <code>options</code> για έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>BlockSize</code> : Ο αριθμός των byte για ανάγνωση πριν από την αναμονή στον καταναλωτή δεδομένων. Η προεπιλεγμένη τιμή είναι 4 MB.</li>\r\n<li><code>RequestSize</code> : Ο αριθμός των byte των οποίων θα επιχειρείται ανάγνωση σε μια μεμονωμένη αίτηση HTTP στον διακομιστή. Η προεπιλεγμένη τιμή είναι 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Η επιλογή ConcurrentRequests υποστηρίζει ταχύτερη λήψη δεδομένων με καθορισμό του αριθμού των αιτήσεων που θα πραγματοποιηθούν παράλληλα, εις βάρος της χρήσης της μνήμης. Η απαιτούμενη μνήμη είναι (ConcurrentRequest * RequestSize). Η προεπιλεγμένη τιμή είναι 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ελέγχει αν τα αρχεία επιστρέφονται σε μια προβολή καταλόγου με μορφή δέντρου ή σε μια επίπεδη λίστα. Η προεπιλεγμένη τιμή είναι false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει τους πίνακες που βρέθηκαν στον καθορισμένο λογαριασμό από έναν θάλαμο χώρου αποθήκευσης του Azure.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει μια γραμμή για κάθε πίνακα που βρέθηκε στη διεύθυνση URL του λογαριασμού, <code>account</code>, από έναν θάλαμο αποθήκευσης Azure. Κάθε γραμμή περιέχει μια σύνδεση προς τον πίνακα Azure. Μπορεί να παρασχεθεί μια προαιρετική παράμετρος εγγραφής, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>Timeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της αίτησης στον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από την προέλευση.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight στο AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Αυτή η λειτουργία δεν είναι διαθέσιμη, επειδή απαιτεί .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (παλαιού τύπου)",
        "Documentation.Caption": "Common Data Service (παλαιού τύπου)",
        "Documentation.LongDescription": "Συνδεθείτε στην παρουσία του Common Data Service (Dynamics 365 και PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα του εγγράφου CSV ως πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα του εγγράφου CSV ως πίνακα.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> μπορεί να είναι null, ο αριθμός των στηλών, μια λίστα ονομάτων στηλών, ένας τύπος πίνακα ή μια εγγραφή επιλογών.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> μπορεί να είναι ένας μεμονωμένος χαρακτήρας, μια λίστα χαρακτήρων ή η τιμή <code>\"\"</code>, η οποία υποδεικνύει ότι οι γραμμές πρέπει να χωρίζονται κατά διαδοχικούς χαρακτήρες κενού διαστήματος. Προκαθορισμένο: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Ανατρέξτε στο <code>ExtraValues.Type</code> για τις υποστηριζόμενες τιμές του <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> καθορίζει τον τύπο κωδικοποίησης κειμένου.\r\n      </li>\r\n    </ul>\r\n\r\n    Εάν έχει καθοριστεί μια εγγραφή για <code>columns</code> (και <code>delimiter</code>, <code>extraValues</code>, και <code>encoding</code> είναι null), ενδέχεται να παρέχονται τα ακόλουθα πεδία εγγραφής:\r\n    <ul>\r\n      <li>\r\n        <code>Οριοθέτης</code>: Ο οριοθέτης στήλης. Προκαθορισμένο: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Στήλες</code>: Μπορεί να είναι null, ο αριθμός των στηλών, μια λίστα ονομάτων στηλών ή ένας τύπος πίνακα. Εάν ο αριθμός των στηλών είναι μικρότερος από τον αριθμό που βρίσκεται στην είσοδο, οι πρόσθετες στήλες θα αγνοηθούν. Εάν ο αριθμός των στηλών είναι μεγαλύτερος από τον αριθμό που βρέθηκε στην είσοδο, οι πρόσθετες στήλες θα είναι μηδενικές. Όταν δεν καθορίζεται, ο αριθμός των στηλών θα καθοριστεί από αυτό που βρίσκεται στην είσοδο.\r\n      </li>\r\n      <li>\r\n        <code>Κωδικοποίηση</code>: Η κωδικοποίηση κειμένου του αρχείου. Προκαθορισμένο: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Καθορίζει τον τρόπο χειρισμού των εισαγωγικών.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (default): Οι προσφορές σε ένα πεδίο είναι σημαντικές μόνο αμέσως μετά τον οριοθέτη.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Οι προσφορές σε ένα πεδίο είναι πάντα σημαντικές, ανεξάρτητα από το πού εμφανίζονται.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Καθορίζει τον τρόπο χειρισμού των ανακοινωμένων αλλαγών γραμμής.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (default): Οι αλλαγές γραμμής που αναφέρονται σε εισαγωγικά αντιμετωπίζονται ως μέρος των δεδομένων και όχι ως το τέλος της τρέχουσας γραμμής.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Όλες οι αλλαγές γραμμής αντιμετωπίζονται ως το τέλος της τρέχουσας γραμμής, ακόμη και όταν εμφανίζονται μέσα σε μια τιμή σε εισαγωγικά.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Επεξεργασία κειμένου CSV με κεφαλίδες στηλών",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των διαθέσιμων διαστάσεων.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των διαθέσιμων διαστάσεων εντός του <code>cube</code>. Κάθε διάσταση είναι ένας πίνακας που περιέχει ένα σύνολο χαρακτηριστικών διάστασης και κάθε χαρακτηριστικό διάστασης αναπαρίσταται ως στήλη στον πίνακα διάστασης. Οι διαστάσεις μπορούν να αναπτυχθούν στον κύβο με χρήση της Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Επιστρέφει ένα ένθετο δέντρο πινάκων που αντιπροσωπεύει την ιεραρχία φακέλων εμφάνισης των αντικειμένων (για παράδειγμα, διαστάσεις και μετρήσεις).",
        "Documentation.LongDescription": "Επιστρέφει ένα ένθετο δέντρο πινάκων που αντιπροσωπεύει την ιεραρχία φακέλων εμφάνισης των αντικειμένων (για παράδειγμα, διαστάσεις και μετρήσεις) που είναι διαθέσιμα για χρήση στο <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των διαθέσιμων ιδιοτήτων μέτρησης που αναπτύσσονται στον κύβο.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των διαθέσιμων ιδιοτήτων για διαστάσεις που αναπτύσσονται στον κύβο.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των διαθέσιμων μετρήσεων.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των διαθέσιμων μετρήσεων εντός του <code>cube</code>. \r\n    Κάθε μέτρηση αναπαρίσταται ως συνάρτηση. Οι μετρήσεις μπορούν να εφαρμοστούν στον κύβο με χρήση της Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των παραμέτρων που μπορούν να εφαρμοστούν στον κύβο.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των παραμέτρων που μπορούν να εφαρμοστούν στο <code>cube</code>. Κάθε παράμετρος είναι μια συνάρτηση που μπορεί να κληθεί για τη λήψη <code>cube</code> με την παράμετρο και τα ορίσματά της εφαρμοσμένα.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των διαθέσιμων ιδιοτήτων για διαστάσεις που αναπτύσσονται στον κύβο.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει το σύνολο των διαθέσιμων ιδιοτήτων για διαστάσεις που αναπτύσσονται στον κύβο.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL του λογαριασμού σας Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει μια γραμμή για κάθε φάκελο και αρχείο που βρέθηκε στη διεύθυνση <code>url</code> από το Azure Data Lake Storage Gen1. Κάθε γραμμή περιέχει ιδιότητες του φακέλου ή του αρχείου και μια σύνδεση προς το περιεχόμενό του."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Καταχωρήστε τη διεύθυνση URL του λογαριασμού σας Azure Data Lake Storage.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει μια γραμμή για κάθε αρχείο που βρέθηκε στη διεύθυνση <code>url</code> από το Azure Data Lake Storage Gen1. Κάθε γραμμή περιέχει ιδιότητες του αρχείου και μια σύνδεση προς το περιεχόμενό του."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Γαλάζιος Κόσμος DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL ενός λογαριασμού Azure Cosmos DB.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με τις βάσεις δεδομένων Azure Cosmos DB στη διεύθυνση <code>url</code>. Αν έχει καθοριστεί το στοιχείο <code>database</code>, θα επιστραφεί ένας πίνακας συλλογών. Επιπλέον, αν το πεδίο <code>Query</code> έχει καθοριστεί στην εγγραφή <code>options</code>, επιστρέφονται τα αποτελέσματα του ερωτήματος που εκτελείται είτε στην καθορισμένη βάση δεδομένων ή/και στη συλλογή."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL του τελικού σημείου υπηρεσίας OData Dynamics 365 Business Central (εσωτερικής εγκατάστασης).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (εσωτερικής εγκατάστασης)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (εσωτερικής εγκατάστασης)",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Dynamics 365 Business Central (εσωτερικής εγκατάστασης). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL του τελικού σημείου της υπηρεσίας OData Dynamics NAV.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Επιστρέφει τους κύβους σε μια παρουσία Essbase με ομαδοποίηση κατά διακομιστή Essbase.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με κύβους με ομαδοποίηση κατά διακομιστή Essbase από μια παρουσία Essbase στον διακομιστή APS <code>url</code>. Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να καθοριστεί για έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα του βιβλίου εργασίας του Excel.",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα του βιβλίου εργασίας του Excel..\r\n    <ul>\r\n     <li> <code>useHeaders</code> μπορεί να είναι null, μια λογική τιμή (true/false) που υποδεικνύει εάν η πρώτη σειρά κάθε επιστρεφόμενου πίνακα πρέπει να αντιμετωπίζεται ως κεφαλίδα ή ως εγγραφή επιλογών. Προεπιλογή: false.</li>\r\n     <li> <code>delayTypes</code> μπορεί να είναι null ή μια λογική τιμή (true/false) που υποδεικνύει εάν οι στήλες κάθε επιστρεφόμενου πίνακα δεν πρέπει να πληκτρολογηθούν. Προεπιλογή: false.</li>\r\n    </ul>\r\n\r\n    Αν μια εγγραφή έχει καθοριστεί για <code>useHeaders</code> (και <code>delayTypes</code> είναι null), ενδέχεται να παρέχονται τα ακόλουθα πεδία εγγραφής:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Μπορεί να είναι null ή μια λογική τιμή (true/false) που υποδεικνύει εάν η πρώτη γραμμή κάθε επιστρεφόμενου πίνακα πρέπει να αντιμετωπίζεται ως κεφαλίδα. Προεπιλογή: false.</li>\r\n     <li> <code>DelayTypes</code>: Μπορεί να είναι null ή μια λογική τιμή (true/false) που υποδεικνύει εάν οι στήλες κάθε επιστρεφόμενου πίνακα δεν πρέπει να πληκτρολογηθούν. Προεπιλογή: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: Μπορεί να είναι null ή λογική (true/false) τιμή που υποδεικνύει εάν η περιοχή ενός φύλλου εργασίας που περιέχει δεδομένα πρέπει να συναχθεί με την ανάγνωση του ίδιου του φύλλου εργασίας, αντί να διαβάζετε τα μεταδεδομένα διαστάσεων από το αρχείο. Αυτό μπορεί να είναι χρήσιμο σε περιπτώσεις όπου τα μεταδεδομένα διαστάσεων είναι λανθασμένα. Σημειώστε ότι αυτή η επιλογή υποστηρίζεται μόνο για αρχεία Open XML Excel και όχι για αρχεία Excel παλαιού τύπου. Προεπιλογή: ψευδής.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Επιστροφή των περιεχομένων του Φύλλου1 από ένα βιβλίο εργασίας του Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει τις ιδιότητες και τα περιεχόμενα των αρχείων και φακέλων που βρέθηκαν στον καθορισμένο φάκελο.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει μια σειρά για κάθε φάκελο και αρχείο που βρίσκονται στο φάκελο <code>path</code>. Κάθε σειρά περιέχει ιδιότητες του φακέλου ή του αρχείου και έναν σύνδεσμο προς το περιεχόμενό του. Η <code>options</code> παράμετρος προορίζεται προς το παρόν μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει τις ιδιότητες και τα περιεχόμενα των αρχείων που βρέθηκαν στον καθορισμένο φάκελο και τους υποφακέλους του.",
        "Documentation.LongDescription": "Επιστρέφει ένα πίνακα που περιέχει μια γραμμή για κάθε αρχείο που βρίσκεται στο φάκελο <code>path</code> και όλους τους υποφακέλους του. Κάθε σειρά περιέχει ιδιότητες του αρχείου και έναν σύνδεσμο προς το περιεχόμενό του. Η <code>options</code> παράμετρος προορίζεται προς το παρόν μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Εισαγωγή δεδομένων από μια βάση δεδομένων Google BigQuery με χρήση του Azure AD",
        "Documentation.LongDescription": "\r\n      Εμφανίζει έναν πίνακα με τα διαθέσιμα έργα στο Google BigQuery χρησιμοποιώντας το Azure AD για <code>Αναγνωριστικό έργου χρέωσης</code> . Μια προαιρετική παράμετρος εγγραφής, <code>επιλογές</code>, μπορεί να καθοριστεί για τον έλεγχο των παρακάτω επιλογών:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Μια διάρκεια που ελέγχει πόσος χρόνος αναμονής πριν εγκαταλείψετε μια προσπάθεια σύνδεσης με τον διακομιστή. Η προεπιλεγμένη τιμή είναι η τιμή λήξης χρονικού ορίου σύνδεσης ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Μια διάρκεια που ελέγχει πόσο χρόνο επιτρέπεται να εκτελείται το ερώτημα από την πλευρά του διακομιστή προτού ακυρωθεί.</li>\r\n        <li><code>UseStorageApi</code>: Καθορίζει εάν θα χρησιμοποιηθεί το BigQuery Storage API για μεγάλα σύνολα αποτελεσμάτων. Η προεπιλεγμένη τιμή είναι αληθής για τη χρήση του Storage API. Ορίστε σε false για να μην χρησιμοποιείται το Storage API</li>\r\n        <li><code>AudienceUri</code>: Αυτό είναι το URI κοινού που μπορεί να χρησιμοποιήσει το πρόγραμμα οδήγησης ODBC για τις αιτήσεις του για ανταλλαγή διακριτικών. Αυτό το πεδίο πρέπει να είναι πλήρως πιστοποιημένο URI (δηλαδή //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread) όπου το pool_id είναι ένα παγκοσμίως μοναδικό όνομα για τον προσδιορισμό του συνόλου εργατικού δυναμικού.</li>\r\n      </ul>\r\n    Η παράμετρος εγγραφής καθορίζεται ως [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Παράθεση των διαθέσιμων έργων στο Google BigQuery με χρήση του Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Υπολογιστικά φύλλα Google",
        "Documentation.Caption": "Υπολογιστικά φύλλα Google",
        "Documentation.Description": "Εισάγει δεδομένα από το GoogleSheets",
        "Documentation.LongDescription": "Εισάγει δεδομένα από το GoogleSheets"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει τα κοντέινερ που βρέθηκαν στον καθορισμένο λογαριασμό από ένα θάλαμο χώρου αποθήκευσης του Azure.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει μια γραμμή για κάθε κοντέινερ που βρέθηκε στη διεύθυνση URL λογαριασμού <code>account</code> από ένα θάλαμο χώρου αποθήκευσης του Azure. Κάθε γραμμή περιέχει μια σύνδεση στα αντικείμενα blob του κοντέινερ.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει τα κοντέινερ που βρέθηκαν στον καθορισμένο λογαριασμό από ένα θάλαμο χώρου αποθήκευσης του Azure.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα περιήγησης που περιέχει μια γραμμή για κάθε κοντέινερ που βρέθηκε στη διεύθυνση URL λογαριασμού <code>account</code> από ένα θάλαμο χώρου αποθήκευσης του Azure. Κάθε γραμμή περιέχει μια σύνδεση στα αντικείμενα blob του κοντέινερ.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει τις ιδιότητες και τα περιεχόμενα των αρχείων και φακέλων που βρέθηκαν στον καθορισμένο φάκελο από ένα σύστημα αρχείων Hadoop.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει μια γραμμή για κάθε φάκελο και αρχείο που βρέθηκαν στη διεύθυνση URL, <code>url</code>, από ένα σύστημα αρχείων Hadoop. Κάθε γραμμή περιέχει ιδιότητες του φακέλου ή του αρχείου και μια σύνδεση στο περιεχόμενό του.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει τις ιδιότητες και τα περιεχόμενα των αρχείων και φακέλων που βρέθηκαν στον καθορισμένο φάκελο και τους υποφακέλους από ένα σύστημα αρχείων Hadoop.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει μια γραμμή για κάθε φάκελο και αρχείο που βρέθηκαν στη διεύθυνση URL, <code>url</code>, και τους υποφακέλους από ένα σύστημα αρχείων Hadoop. Κάθε γραμμή περιέχει ιδιότητες του αρχείου και μια σύνδεση στο περιεχόμενό του.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Εισάγει δεδομένα από ένα σύμπλεγμα Impala",
        "Documentation.LongDescription": "Εισάγει δεδομένα από ένα σύμπλεγμα Impala <code>server</code>. Αν δεν έχει καθοριστεί πύλη, θα χρησιμοποιηθεί η προεπιλεγμένη πύλη 21050.",
        "Documentation.Examples": [
          {
            "Description": "Καταχωρεί τους πίνακες σε ένα σύμπλεγμα Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Εισάγει δεδομένα από το Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Εισάγει δεδομένα από την παρουσία Azure Data Explorer (Kusto) που διαθέτετε",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα πληροφοριών συμβάντων Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Ένας πίνακας με συμβάντα Storm από τη βάση δεδομένων \"Δείγματα\" στο σύμπλεγμα \"Βοήθεια\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Επιστρέφει έναν πίνακα με δεδομένα από ένα τελικό σημείο MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Πραγματοποιεί μια κλήση προς το MailChimp API και επιστρέφει το σύνολο δεδομένων που προκύπτει ως πίνακα. Ανατρέχει αυτόματα σε όλες τις σελίδες αποτελεσμάτων. Είναι δυνατή η χρήση της προαιρετικής παραμέτρου entityName για τελικά σημεία API όπου το τελικό σημείο ρίζας και το κύριο entityName στην απόκριση JSON δεν συμφωνούν.",
        "Documentation.Examples": [
          {
            "Description": "Έλκει έναν πίνακα δεδομένων από το τελικό σημείο lists του MailChimp API.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Ένας πίνακας με δεδομένα λιστών."
          },
          {
            "Description": "Έλκει έναν πίνακα δεδομένων από το τελικό σημείο campaign-folders του MailChimp API.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Ένας πίνακας με δεδομένα campaign-folders."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Επιστρέφει ανεπεξέργαστα αποτελέσματα απόκρισης από ένα τελικό σημείο MailChimp API.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Πραγματοποιεί μια κλήση στο MailChimp API και επιστρέφει την ανεπεξέργαστη απόκριση.",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει ανεπεξέργαστα δεδομένα από το τελικό σημείο MailChimp API reports/click-details για μια συγκεκριμένη εκστρατεία.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Ανεπεξέργαστα δεδομένα λεπτομερειών κλικ από τη δεδομένη εκστρατεία."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Παροχή συναρτήσεων σύνθετων ερωτημάτων.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Παροχή συναρτήσεων σύνθετων ερωτημάτων.",
        "Documentation.Examples": [
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 15-6-2017, λάβετε συνόψεις δεδομένων μεταξύ 1-5-2017 και 15-6-2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Η συνάρτηση θα επιστρέψει συνόψεις δεδομένων μεταξύ 1-5-2017 και 15-6-2017"
          },
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 15-6-2017, λάβετε συνόψεις δεδομένων για τον Απρίλιο του 2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Η συνάρτηση θα επιστρέψει δεδομένα μεταξύ 1-4-2017 και 30-4-2017"
          },
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 15-6-2017, λάβετε συνόψεις δεδομένων από τον Απρίλιο του 2017 έως τώρα.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Η συνάρτηση θα επιστρέψει δεδομένα μεταξύ 1-4-2017 και 15-6-2017"
          },
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 15-6-2017, λάβετε συνόψεις δεδομένων από τον προηγούμενο Δεκέμβριο έως αυτόν τον Φεβρουάριο ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Η συνάρτηση θα επιστρέψει δεδομένα μεταξύ 1-12-2016 και 28-2-2017"
          },
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 15-6-2017, λάβετε τις χρεώσεις marketplace για τους τελευταίους 18 μήνες",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Η συνάρτηση θα επιστρέψει δεδομένα μεταξύ 1-12-2015 και 15-6-2017"
          },
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 15-6-2017, λάβετε λεπτομέρειες χρεώσεων για τον Ιούνιο του 2017 και τον Μάιο του 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Η συνάρτηση θα επιστρέψει δεδομένα μεταξύ 1-5-2017 και 15-6-2017"
          },
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 3-7-2017, λάβετε λεπτομέρειες χρεώσεων για τον Ιούλιο του 2016",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Η συνάρτηση θα επιστρέψει δεδομένα μεταξύ 1-7-2016 και 31-7-2016"
          },
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 13-7-2017, λάβετε συνόψεις υπολοίπου για τους προηγούμενους 10 μήνες συν 13 ημέρες από αυτόν το μήνα",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Η συνάρτηση θα επιστρέψει δεδομένα μεταξύ 1-9-2016 και 13-7-2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Πληροφορίες κατανάλωσης Microsoft Azure",
        "Documentation.Description": "Πληροφορίες κατανάλωσης Microsoft Azure",
        "Documentation.DisplayName": "Πληροφορίες κατανάλωσης Microsoft Azure",
        "Documentation.LongDescription": "Πληροφορίες κατανάλωσης Microsoft Azure",
        "Documentation.Name": "Πληροφορίες κατανάλωσης Microsoft Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL από την προέλευση δεδομένων ODBC. ",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL από την προέλευση δεδομένων ODBC που καθορίζεται από τη συμβολοσειρά σύνδεσης <code>connectionString</code>. Η συμβολοσειρά <code>connectionString</code> μπορεί να είναι κείμενο ή μια εγγραφή ζευγών τιμών ιδιοτήτων. Οι τιμές ιδιοτήτων μπορούν να είναι κείμενο ή αριθμός. Μπορεί να καταχωρηθεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή είναι 15 δευτερόλεπτα.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Μια λογική τιμή (true/false) που καθορίζει αν θα παράγονται επιλογές συμβολοσειράς σύνδεσης συμβατές με SQL Server για τον έλεγχο ταυτότητας των Windows. Η προεπιλεγμένη τιμή είναι true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει τους πίνακες και τις προβολές SQL από την παρεχόμενη συμβολοσειρά σύνδεσης.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με προβολές και πίνακες SQL από την προέλευση δεδομένων OLE DB.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με προβολές και πίνακες SQL από την προέλευση δεδομένων OLE DB που καθορίζεται από τη συμβολοσειρά σύνδεσης <code>connectionString</code>. Το <code>connectionString</code> μπορεί να είναι κείμενο ή μια εγγραφή ζευγών τιμών ιδιοτήτων. Οι τιμές ιδιοτήτων μπορεί να είναι είτε κείμενο είτε αριθμός. Μπορεί να καταχωρηθεί μια προαιρετική παράμετρος εγγραφής, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι true).</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Μια λογική τιμή (true/false) που καθορίζει αν θα παράγονται επιλογές συμβολοσειράς σύνδεσης συμβατές με SQL Server για τον έλεγχο ταυτότητας των Windows. Η προεπιλεγμένη τιμή είναι true.</li>\r\n</ul>\r\n\r\n    Για παράδειγμα, η παράμετρος εγγραφής καθορίζεται ως [option1 = value1, option2 = value2...] ή [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL από τη βάση δεδομένων Oracle.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL από τη βάση δεδομένων Oracle στο διακομιστή <code>server</code>. Η θύρα μπορεί να καθοριστεί προαιρετικά με το διακομιστή, διαχωρισμένο με άνω και κάτω τελεία. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n</ul>\r\n\r\n    Η παράμετρος εγγραφής καθορίζεται, για παράδειγμα, ως [option1 = value1, option2 = value2...] ή [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Επιστρέφει τους πίνακες που βρέθηκαν σε ένα αρχείο PDF.",
        "Documentation.LongDescription": "Επιστρέφει τυχόν πίνακες που βρίσκονται στο <code>pdf</code>. Μπορεί να παρασχεθεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>Implementation</code> : Η έκδοση του αλγορίθμου που θα χρησιμοποιηθεί κατά τον προσδιορισμό πινάκων. Οι παλιές εκδόσεις είναι διαθέσιμες μόνο για λόγους συμβατότητας με προηγούμενες εκδόσεις, προκειμένου τα παλιά ερωτήματα να μην καταστρέφονται από ενημερώσεις αλγορίθμων. Η νεότερη έκδοση θα πρέπει να δίνει πάντα τα καλύτερα αποτελέσματα. Οι έγκυρες τιμές είναι &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot; ή null.</li>\r\n<li><code>StartPage</code> : Καθορίζει την πρώτη σελίδα στην περιοχή σελίδων προς εξέταση. Προεπιλογή: 1.</li>\r\n<li><code>EndPage</code> : Καθορίζει την τελευταία σελίδα στην περιοχή σελίδων προς εξέταση. Προεπιλογή: η τελευταία σελίδα του εγγράφου.</li>\r\n<li><code>MultiPageTables</code> : Ελέγχει αν παρόμοιοι πίνακες σε διαδοχικές σελίδες θα συνδυάζονται αυτόματα σε έναν πίνακα. Προεπιλογή: true.</li>\r\n<li><code>EnforceBorderLines</code> : Ελέγχει αν οι γραμμές περιγράμματος επιβάλλονται πάντα ως όρια κελιού (όταν είναι true) ή χρησιμοποιούνται απλώς ως μία ένδειξη ανάμεσα σε πολλές για τον καθορισμό των ορίων κελιού (όταν είναι false). Προεπιλογή: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Πρόσβαση σε δεδομένα",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει τους πίνακες που περιέχονται στο sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL του λογαριασμού σας Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þŷτћõή śςŗїφт",
        "Documentation.Description": "Єжėсůŧёŝ Рÿţħόή şćřіρţ ªⁿď ŗеţûгŉş ðαťά ƒгαмêš",
        "Documentation.Examples": {
          "Description": "Єжėсůŧёŝ Рÿţħόή şćřіρţ ªⁿď ŗеţûгŉş ðαťά ƒгαмêš",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Ґ §ĉгĩφţ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Επιστρέφει έναν πίνακα όπου κάθε γραμμή του είναι ένα όνομα πεδίου και τιμή από την εγγραφή εισόδου.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει τις στήλες <code>Name</code> και <code>Value</code> με μια γραμμή για κάθε πεδίο στο <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργεί έναν πίνακα από την εγγραφή [A = 1, B = 2, C = 3].",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Επιστρέφει τα πακέτα σε μια βάση δεδομένων HANA SAP.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα πολυδιάστατων πακέτων από τη βάση δεδομένων SAP HANA <code>server</code>. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>Distribution</code> : Ένα στοιχείο SapHanaDistribution που ορίζει την τιμή της ιδιότητας &quot;Διανομή&quot; στη συμβολοσειρά σύνδεσης. Η δρομολόγηση πρότασης είναι η μέθοδος αξιολόγησης του σωστού κόμβου διακομιστή ενός κατανεμημένου συστήματος πριν από την εκτέλεση της πρότασης. Η προεπιλεγμένη τιμή είναι SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Καθορίζει την υλοποίηση της σύνδεσης SAP HANA που θα χρησιμοποιηθεί.</li>\r\n<li><code>EnableColumnBinding</code> : Συνδέει μεταβλητές στις στήλες ενός συνόλου αποτελεσμάτων SAP HANA κατά την ανάκτηση δεδομένων. Ενδέχεται να βελτιώσει τις επιδόσεις με το κόστος ελαφρώς υψηλότερης χρήσης μνήμης. Η προεπιλεγμένη τιμή είναι ψευδής.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή είναι 15 δευτερόλεπτα.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει περιεχόμενο από μια τοποθεσία του SharePoint.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει μια γραμμή για κάθε φάκελο και έγγραφο που βρέθηκε στην καθορισμένη τοποθεσία του SharePoint <code>url</code>. Κάθε γραμμή περιέχει ιδιότητες του φακέλου ή του αρχείου και μια σύνδεση προς το περιεχόμενό του. Το <code>options</code> μπορεί να καθοριστεί για τον έλεγχο των παρακάτω επιλογών:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Ένας αριθμός (14 ή 15) ή το κείμενο &quot;Auto&quot; που καθορίζει την έκδοση SharePoint API για χρήση για αυτήν την τοποθεσία. Όταν δεν καθορίζεται, χρησιμοποιείται η έκδοση API 14. Όταν καθορίζεται η επιλογή &quot;Auto&quot;, η έκδοση του διακομιστή θα εντοπίζεται αυτόματα, αν είναι δυνατό, διαφορετικά η προεπιλεγμένη έκδοση θα είναι η 14. Για τις τοποθεσίες SharePoint που δεν είναι στα Αγγλικά απαιτείται τουλάχιστον η έκδοση 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει έγγραφα από μια τοποθεσία του SharePoint.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει μια γραμμή για κάθε έγγραφο που βρέθηκε στην καθορισμένη τοποθεσία του SharePoint <code>url</code> και τους υποφακέλους. Κάθε γραμμή περιέχει ιδιότητες του φακέλου ή του αρχείου και μια σύνδεση προς το περιεχόμενό του. Το <code>options</code> μπορεί να καθοριστεί για τον έλεγχο των παρακάτω επιλογών:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Ένας αριθμός (14 ή 15) ή το κείμενο &quot;Auto&quot; που καθορίζει την έκδοση SharePoint API για χρήση για αυτήν την τοποθεσία. Όταν δεν καθορίζεται, χρησιμοποιείται η έκδοση API 14. Όταν καθορίζεται η επιλογή &quot;Auto&quot;, η έκδοση του διακομιστή θα εντοπίζεται αυτόματα, αν είναι δυνατό, διαφορετικά η προεπιλεγμένη έκδοση θα είναι η 14. Για τις τοποθεσίες SharePoint που δεν είναι στα Αγγλικά απαιτείται τουλάχιστον η έκδοση 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει περιεχόμενο από μια λίστα του SharePoint.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει μια γραμμή για κάθε στοιχείο λίστας που βρέθηκε στην καθορισμένη λίστα του SharePoint <code>url</code>. Κάθε γραμμή περιέχει ιδιότητες της λίστας. Το <code>options</code> μπορεί να καθοριστεί για τον έλεγχο των παρακάτω επιλογών:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Ένας αριθμός (14 ή 15) ή το κείμενο &quot;Auto&quot; που καθορίζει την έκδοση SharePoint API για χρήση για αυτήν την τοποθεσία. Όταν δεν καθορίζεται, χρησιμοποιείται η έκδοση API 14. Όταν καθορίζεται η επιλογή &quot;Auto&quot;, η έκδοση του διακομιστή θα εντοπίζεται αυτόματα, αν είναι δυνατό, διαφορετικά η προεπιλεγμένη έκδοση θα είναι η 14. Για τις τοποθεσίες SharePoint που δεν είναι στα Αγγλικά απαιτείται τουλάχιστον η έκδοση 15.</li>\r\n<li><code>Implementation</code> : Προαιρετική. Καθορίζει ποια έκδοση της σύνδεσης SharePoint θα χρησιμοποιηθεί. Οι αποδεκτές τιμές είναι &quot;2.0&quot; ή null. Εάν η τιμή είναι &quot;2.0&quot;, χρησιμοποιείται η υλοποίηση 2.0 της σύνδεσης SharePoint. Εάν η τιμή είναι null, χρησιμοποιείται η αρχική υλοποίηση της σύνδεσης SharePoint.</li>\r\n<li><code>ViewMode</code> : Προαιρετική. Αυτή η επιλογή είναι έγκυρη μόνο για υλοποίηση 2.0. Οι αποδεκτές τιμές είναι &quot;Όλα&quot; και &quot;Προεπιλογή&quot;. Εάν δεν έχει καθοριστεί τιμή, η τιμή ορίζεται σε &quot;Όλα&quot;. Όταν καθορίζεται η επιλογή &quot;Όλα&quot;, η προβολή περιλαμβάνει όλες τις στήλες που έχουν δημιουργηθεί από τον χρήστη και έχουν οριστεί από το σύστημα. Όταν καθορίζεται η επιλογή &quot;Προεπιλογή&quot;, η προβολή θα συμφωνεί με αυτά που βλέπει ο χρήστης όταν κοιτά τη λίστα online σε οποιαδήποτε προβολή αυτού του χρήστη έχει οριστεί ως προεπιλογή στις ρυθμίσεις του. Εάν ο χρήστης επεξεργαστεί την προεπιλεγμένη προβολή του για να προσθέσει ή να καταργήσει στήλες που έχουν δημιουργηθεί από τον χρήστη ή έχουν οριστεί από το σύστημα ή δημιουργώντας μια νέα προβολή και ορίζοντας την ως προεπιλεγμένη, αυτές οι αλλαγές θα μεταδοθούν μέσω της σύνδεσης.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Εμποδίζει τη σύνδεση από τη χρήση ενός ξεχωριστού τελικού σημείου για στήλες σημειώσεων.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Επιστρέφει έναν πίνακα από τα περιεχόμενα στην καθορισμένη διεύθυνση URL μορφοποιημένα σύμφωνα με το API SODA 2.0.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα από τα περιεχόμενα στην καθορισμένη διεύθυνση URL <code>url</code> μορφοποιημένα σύμφωνα με το API SODA 2.0. Η διεύθυνση URL πρέπει να παραπέμπει σε έγκυρη προέλευση συμβατή με SODA η οποία λήγει σε επέκταση .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Αυτή η λειτουργία μπορεί να χρησιμοποιηθεί για να καλέσετε οποιαδήποτε από τα τελικά σημεία \"Λίστες\" που παρέχονται από το SparkPost API v1. Όταν κάνετε κλήσεις στο SparkPost API χρησιμοποιώντας αυτή τη συνάρτηση, να θυμάστε ότι το SparkPost API έχει ένα αυστηρό όριο ρυθμού API. Αν ο διακομιστής του SparkPost επιστρέφει έναν κωδικό κατάστασης 429, έχετε συμπληρώσει το όριο ρυθμού και θα πρέπει να περιμένετε λίγα λεπτά πριν κάνετε άλλες κλήσεις.",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα με μία μόνο στήλη συμπληρωμένη με δεδομένα από ένα από τα τελικά σημεία \"Λίστες\" του SparkPost API v1 (δείτε την τεκμηρίωση του SparkPost για λεπτομέρειες).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Ανακτήστε τους ενσωματωμένους πίνακες που εμφανίζονται από το λογισμικό σύνδεσης SparkPost με δεδομένα που έχουν συγκεντρωθεί σε ένα χρονικό διάστημα που καθορίζεται από τον χρήστη. Όταν ανανεώνετε αυτούς τους πίνακες ή κάνετε κλήσεις στο SparkPost API χρησιμοποιώντας αυτό το λογισμικό σύνδεσης, να θυμάστε ότι το SparkPost API έχει αυστηρό όριο ρυθμού API. Αν ο διακομιστής του SparkPost επιστρέφει έναν κωδικό κατάστασης 429, έχετε συμπληρώσει το όριο ρυθμού και θα πρέπει να περιμένετε λίγα λεπτά πριν κάνετε άλλες κλήσεις. Κατά την επιλογή μιας τιμής για την παράμετρο Number of days, λάβετε υπόψη ότι το API αποθηκεύει μόνο 6 μήνες δεδομένων."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με τις βάσεις δεδομένων σε έναν SQL Server.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα βάσεων δεδομένων στον καθορισμένο SQL Server, <code>server</code>. Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να καθοριστεί για τον έλεγχο των παρακάτω επιλογών:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Ένας αριθμός που ορίζει την τιμή του όρου ερωτήματος &quot;maxdop&quot; στο ερώτημα SQL που δημιουργείται.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n<li><code>MultiSubnetFailover</code> : Μια λογική τιμή (true/false) που ορίζει την τιμή της ιδιότητας &quot;MultiSubnetFailover&quot; στη συμβολοσειρά σύνδεσης (η προεπιλογή είναι false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Μια λογική τιμή (true/false) η οποία, αν είναι true, επιχειρεί αναδίπλωση των μετατροπών τύπου, οι οποίες θα μπορούσαν να αποτύχουν και να προκαλέσουν αποτυχία ολόκληρου του ερωτήματος. Δεν συνιστάται για γενική χρήση.</li>\r\n<li><code>ContextInfo</code> : Μια δυαδική τιμή που χρησιμοποιείται για τον ορισμό του CONTEXT_INFO πριν από την εκτέλεση κάθε εντολής.</li>\r\n<li><code>OmitSRID</code> : Μια λογική τιμή (true/false) η οποία, αν είναι true, παραλείπει το SRID κατά την παραγωγή Well-Known Text από τύπους γεωμετρίας και γεωγραφίας.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Μια λογική τιμή (true/false) που, εάν είναι true, επιτρέπει την αναδίπλωση ερωτημάτων σε βάσεις δεδομένων στον ίδιο διακομιστή. Η προεπιλεγμένη τιμή είναι false.</li>\r\n</ul>\r\n\r\n    Η παράμετρος εγγραφής καθορίζεται, για παράδειγμα, ως [option1 = value1, option2 = value2...].\r\n    <br>\r\n    Δεν υποστηρίζει τον ορισμό ενός ερωτήματος SQL για εκτέλεση στο διακομιστή. Θα πρέπει να χρησιμοποιηθεί η επιλογή <code>Sql.Database</code> για την εκτέλεση ενός ερωτήματος SQL.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Κάνει μια κλήση στο API Stripe, με την επιλογή περιορισμού του αριθμού κλήσεων API που γίνονται.",
        "Documentation.LongDescription": "Κάνει μια κλήση στο API Stripe στο https://api.stripe.com/v1/<code>method</code>, με την προαιρετική εγγραφή <code>query</code> να διαβιβάζεται ως πρόσθετοι παράμετροι και το προαιρετικό <code>pageLimit</code> ως όριο στον αριθμό αιτήσεων API. Τα πιο πρόσφατα δεδομένα επιστρέφονται πρώτα. Αν δεν καθοριστεί <code>pageLimit</code>, επιστρέφονται όλα τα δεδομένα. Χρησιμοποιείται η έκδοση Stripe 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει όλα τα δεδομένα χρεώσεων",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Ένας πίνακας με όλα τα δεδομένα χρεώσεων για τον τρέχοντα λογαριασμό Stripe"
          },
          {
            "Description": "Επιστρέφει μια σελίδα με δεδομένα χρεώσεων",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Ένας πίνακας με τα πιο πρόσφατα δεδομένα χρεώσεων για τον τρέχοντα λογαριασμό Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Αποθηκεύει προσωρινά έναν πίνακα στη μνήμη, απομονώνοντάς τον από εξωτερικές αλλαγές κατά τη διάρκεια της αξιολόγησης.",
        "Documentation.LongDescription": "Απομονώνει έναν πίνακα στη μνήμη, απομονώνοντάς τον από εξωτερικές αλλαγές κατά την αξιολόγηση.\r\n    Η προσωρινή αποθήκευση είναι ρηχή. Επιβάλλει την αξιολόγηση οποιωνδήποτε βαθμωτών τιμών κελιών, αλλά αφήνει τις μη βαθμωτές τιμές (εγγραφές, λίστες, πίνακες κ.λπ.) ως έχουν.\r\n    <br>\r\n    <br>\r\n    Σημειώστε ότι η χρήση αυτής της συνάρτησης μπορεί να κάνει τα ερωτήματά σας να εκτελούνται πιο γρήγορα ή όχι. Σε ορισμένες περιπτώσεις, μπορεί να κάνει τα ερωτήματά σας να εκτελούνται πιο αργά λόγω του πρόσθετου\r\n    κόστους ανάγνωσης όλων των δεδομένων και αποθήκευσης στη μνήμη, καθώς και του γεγονότος ότι η αποθήκευση στην προσωρινή μνήμη αποτρέπει την αναδίπλωση προς τα κάτω. Αν τα δεδομένα δεν χρειάζεται να\r\n    αποθηκευτούν στην προσωρινή μνήμη, αλλά θέλετε απλώς να αποτρέψετε την κατάντη αναδίπλωση, χρησιμοποιήστε το <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Φορτώστε όλες τις γραμμές ενός πίνακα SQL στη μνήμη, έτσι ώστε τυχόν λειτουργίες της καθοδικής ροής να μην μπορούν πλέον να εκτελέσουν ερωτήματα στο διακομιστή SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που είναι το αποτέλεσμα της συγχώνευσης μιας λίστας πινάκων.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που είναι το αποτέλεσμα της συγχώνευσης μιας λίστας πινάκων, <code>tables</code>. Ο πίνακας που προκύπτει θα έχει δομή τύπων γραμμών που ορίζεται από το <code>columns</code> ή από μια ένωση των τύπων εισόδου, αν το <code>columns</code> δεν έχει καθοριστεί.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Συγχωνεύει τους τρεις πίνακες.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Συγχωνεύστε τρεις πίνακες με διαφορετική δομή.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Συγχωνεύστε δύο πίνακες και προβάλετε στον δεδομένο τύπο.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Υποβιβάζει τις κεφαλίδες στηλών στην πρώτη γραμμή τιμών.",
        "Documentation.LongDescription": "Υποβιβάζει τις κεφαλίδες στηλών (δηλαδή τα ονόματα των στηλών) στην πρώτη γραμμή τιμών. Τα προεπιλεγμένα ονόματα στηλών είναι \"Στήλη1\", \"Στήλη2\" και ούτω καθεξής.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Υποβιβάζει την πρώτη γραμμή τιμών του πίνακα.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Καταργεί τις διπλότυπες γραμμές από τον πίνακα.",
        "Documentation.LongDescription": "Καταργεί τις διπλότυπες σειρές από τον πίνακα.\r\n    Μια προαιρετική παράμετρος, <code>equationCriteria</code>, καθορίζει ποιες στήλες του πίνακα ελέγχονται για διπλασιασμό. Εάν δεν έχει καθοριστεί το <code>equationCriteria</code>, ελέγχονται όλες οι στήλες.<br>\r\n    <br>\r\n    Επειδή το Power Query μερικές φορές εκφορτώνει ορισμένες λειτουργίες σε πηγές δεδομένων υποστήριξης (γνωστές ως \"αναδίπλωση\"), και, επίσης, μερικές φορές βελτιστοποιεί ερωτήματα \r\n    παρακάμπτοντας λειτουργίες που δεν είναι αυστηρά απαραίτητες, γενικά δεν υπάρχει καμία εγγύηση για το συγκεκριμένο αντίγραφο θα διατηρηθεί.\r\n    Για παράδειγμα, δεν μπορείτε να υποθέσετε ότι το πρώτο αντίγραφο θα διατηρηθεί. Η σειρά με ένα μοναδικό σύνολο τιμών στηλών θα παραμείνει και οι σειρές πιο κάτω στον πίνακα θα αφαιρεθούν.\r\n    Εάν θέλετε η διπλότυπη κατάργηση να συμπεριφέρεται προβλέψιμα, αποθηκεύστε πρώτα τον πίνακα χρησιμοποιώντας το <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Καταργεί όλες τις διπλότυπες γραμμές από τον πίνακα.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Καταργήστε όλες τις διπλότυπες γραμμές από τη στήλη [b] του πίνακα <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Δημιουργεί έναν πίνακα από μια λίστα στηλών και καθορισμένων τιμών.",
        "Documentation.LongDescription": "Δημιουργεί έναν πίνακα τύπου <code>columns</code> από μια λίστα <code>lists</code> που περιέχει ένθετες λίστες με τα ονόματα και τις τιμές των στηλών.\r\n    Εάν ορισμένες στήλες έχουν περισσότερες τιμές από άλλες, οι τιμές που λείπουν θα συμπληρωθούν με την προεπιλεγμένη τιμή \"null\", εάν οι στήλες επιδέχονται την τιμή null.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα από μια λίστα ονομάτων πελατών σε μια λίστα. Κάθε τιμή στο στοιχείο λίστας πελατών μετατρέπεται σε μια τιμή γραμμής και κάθε λίστα μετατρέπεται σε στήλη.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Δημιουργήστε έναν πίνακα από μια δεδομένη λίστα στηλών και από μια λίστα ονομάτων στηλών.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Δημιουργεί έναν πίνακα με διαφορετικό αριθμό στηλών ανά γραμμή. Η τιμή γραμμής που λείπει είναι null.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Μετατρέπει μια λίστα σε πίνακα εφαρμόζοντας την καθορισμένη συνάρτηση διαίρεσης σε κάθε στοιχείο της λίστας.",
        "Documentation.LongDescription": "Μετατρέπει μια λίστα, <code>list</code> σε πίνακα εφαρμόζοντας την προαιρετική συνάρτηση διαίρεσης, <code>splitter</code>, σε κάθε στοιχείο της λίστας. Από προεπιλογή, η λίστα θεωρείται ως λίστα τιμών κειμένου που διαιρείται από κόμματα. Η προαιρετική <code>columns</code> μπορεί να είναι ο αριθμός των στηλών, μια λίστα στηλών ή μια TableType. Μπορούν επίσης να καθοριστούν οι προαιρετικές <code>default</code> και <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε έναν πίνακα από μια λίστα χρησιμοποιώντας τον προεπιλεγμένο διαχωριστή.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Δημιουργήστε έναν πίνακα από μια λίστα χρησιμοποιώντας έναν προσαρμοσμένο διαχωριστή.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Δημιουργήστε έναν πίνακα από τη λίστα χρησιμοποιώντας τον διαχωριστή Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Μετατρέπει μια εγγραφών σε πίνακα.",
        "Documentation.LongDescription": "Μετατρέπει την <code>records</code>, μια λίστα εγγραφών, σε πίνακα.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε έναν πίνακα από εγγραφές, χρησιμοποιώντας ονόματα πεδίων εγγραφών ως ονόματα στηλών.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Δημιουργήστε έναν πίνακα από εγγραφές με πληκτρολογημένες στήλες και επιλέξτε τις στήλες αριθμών.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Δημιουργεί έναν πίνακα από μια λίστα με τιμές σειρών και προαιρετικές στήλες",
        "Documentation.LongDescription": "Δημιουργεί έναν πίνακα από τη λίστα <code>rows</code> όπου κάθε στοιχείο της λίστας είναι μια εσωτερική λίστα που περιέχει τις τιμές στηλών για μία σειρά. Μια προαιρετική λίστα ονομάτων στηλών, ένας τύπος πίνακα ή ένας αριθμός στηλών μπορούν να δοθούν για το <code>columns</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα με τη στήλη [CustomerID] και τιμές {1, 2}, με τη στήλη [Name] και τιμές {\"Bob\", \"Jim\"} και τη στήλη [Phone] με τιμές {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Επιστρέφει έναν πίνακα με τη στήλη [CustomerID] και τιμές {1, 2}, έναν πίνακα [Name] με τιμές {\"Bob\", \"Jim\"} και τη στήλη [Phone] με τιμές {\"123-4567\", \"987-6543\"}, όπου το [CustomerID] είναι τύπος αριθμού και τα [Name] και [Phone] είναι τύποι κειμένου.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Δημιουργεί έναν πίνακα με μια στήλη από τις παρεχόμενες τιμές.",
        "Documentation.LongDescription": "Δημιουργεί έναν πίνακα με μια στήλη που περιέχει την παρεχόμενη τιμή ή λίστα τιμών, <code>value</code>. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής, <code>options</code>, για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : Το όνομα στήλης που χρησιμοποιείται κατά τη δημιουργία ενός πίνακα από μια λίστα ή μια ανυσματική τιμή.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε έναν πίνακα από την τιμή 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Δημιουργεί έναν πίνακα από τη λίστα.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Δημιουργία πίνακα από την τιμή 1 με ένα προσαρμοσμένο όνομα στήλης.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Επιστρέφει πληροφορίες σχετικά με τον τρόπο διαμερισμού ενός πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει πληροφορίες σχετικά με τον τρόπο διαμερισμού ενός πίνακα.  Επιστρέφεται ένας πίνακας όπου κάθε στήλη είναι μια στήλη διαμερίσματος στον αρχικό πίνακα και κάθε γραμμή αντιστοιχεί με ένα διαμέρισμα στον αρχικό πίνακα.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Επιστρέφει ένα προφίλ των στηλών ενός πίνακα.",
        "Documentation.LongDescription": "<p>Επιστρέφει ένα προφίλ για τις στήλες στο <code>table</code>.</p>\r\n<p>Επιστρέφονται οι ακόλουθες πληροφορίες για κάθε στήλη (όπου ισχύουν):\r\n<ul>\r\n  <li>ελάχιστο</li>\r\n  <li>μέγιστο</li>\r\n  <li>μέσος όρος</li>\r\n  <li>τυπική απόκλιση</li>\r\n  <li>πλήθος</li>\r\n  <li>πλήθος null</li>\r\n  <li>διακριτό πλήθος</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Προβιβάζει την πρώτη γραμμή τιμών σε νέες κεφαλίδες στηλών (δηλαδή ονόματα στηλών).",
        "Documentation.LongDescription": "Προβιβάζει την πρώτη γραμμή τιμών σε νέες κεφαλίδες στηλών (δηλαδή ονόματα στηλών). Από προεπιλογή, μόνο οι τιμές κειμένου ή αριθμών προβιβάζονται σε κεφαλίδες. Έγκυρες επιλογές:\r\n    <div>\r\n      <code>PromoteAllScalars</code> : Εάν έχει οριστεί σε <code>true</code>, τότε όλες οι ανυσματικές τιμές στην πρώτη γραμμή προβιβάζονται σε κεφαλίδες χρησιμοποιώντας τη συνάρτηση <code>Culture</code>, εάν καθορίζεται (ή τις τοπικές ρυθμίσεις του τρέχοντος εγγράφου).\r\n    Για τις τιμές που δεν μπορούν να μετατραπούν σε κείμενο, θα χρησιμοποιηθεί ένα προεπιλεγμένο όνομα στήλης.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code> : Ένα όνομα κουλτούρας που καθορίζει την κουλτούρα για τα δεδομένα.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Προβιβάζει την πρώτη γραμμή τιμών του πίνακα.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Προβιβασμός όλων των ανυσματικών τιμών στην πρώτη γραμμή του πίνακα σε κεφαλίδες.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Επιστρέφει έναν πίνακα από όπου έχουν παραλειφθεί οι γραμμές πρώτης μέτρησης.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που δεν περιέχει τον πρώτο καθορισμένο αριθμό γραμμών, <code>countOrCondition</code>, του πίνακα <code>table</code>.\r\n    Ο αριθμός των γραμμών που καταργούνται εξαρτάται από την προαιρετική παράμετρο <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Εάν παραλειφθεί η <code>countOrCondition</code>, καταργείται μόνο η πρώτη γραμμή. </li>\r\n    <li> Εάν η <code>countOrCondition</code> είναι αριθμός, θα καταργηθούν τόσες γραμμές (αρχίζοντας από επάνω). </li>\r\n    <li> Εάν η <code>countOrCondition</code> είναι συνθήκη, οι γραμμές που ικανοποιούν τη συνθήκη θα καταργηθούν έως ότου κάποια γραμμή δεν ικανοποιεί τη συνθήκη.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Καταργεί την πρώτη γραμμή του πίνακα.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Καταργεί τις πρώτες δύο γραμμές του πίνακα.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Καταργεί τις πρώτες γραμμές όπου [CustomerID] <=2 του πίνακα.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με καταργημένες τις τελευταίες Ν γραμμές.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που δεν περιέχει τις τελευταίες <code>countOrCondition</code> γραμμές του πίνακα <code>table</code>.\r\n        Ο αριθμός των γραμμών που καταργούνται εξαρτάται από την προαιρετική παράμετρο <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Εάν παραλειφθεί η <code>countOrCondition</code>, καταργείται μόνο η τελευταία γραμμή. </li>\r\n    <li> Εάν η <code>countOrCondition</code> είναι αριθμός, θα καταργηθούν τόσες γραμμές (αρχίζοντας από κάτω). </li>\r\n    <li> Εάν η <code>countOrCondition</code> είναι συνθήκη, οι γραμμές που ικανοποιούν τη συνθήκη θα καταργηθούν έως ότου κάποια γραμμή δεν ικανοποιεί τη συνθήκη.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Καταργεί την τελευταία γραμμή του πίνακα.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Καταργεί τις τελευταίες γραμμές όπου [CustomerID] > 2 του πίνακα.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με τις γραμμές που καταργήθηκαν από τον πίνακα εισόδου και περιείχαν ένα σφάλμα σε τουλάχιστον ένα από τα κελιά. Εάν καθορίζεται μια λίστα στηλών, μόνο τα κελιά στις καθορισμένες στήλες ελέγχονται για σφάλματα.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με τις γραμμές που καταργήθηκαν από τον πίνακα εισόδου και περιείχαν ένα σφάλμα σε τουλάχιστον ένα από τα κελιά. Εάν καθορίζεται μια λίστα στηλών, μόνο τα κελιά στις καθορισμένες στήλες ελέγχονται για σφάλματα.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Καταργεί την τιμή σφάλματος από την πρώτη σειρά.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με τις γραμμές σε αντίστροφή σειρά.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με τις γραμμές από την είσοδο <code>table</code> σε αντίστροφη σειρά.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Αντιστρέφει τις γραμμές του πίνακα.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει μια περιγραφή των στηλών (δηλαδή το σχήμα) του καθορισμένου πίνακα.",
        "Documentation.LongDescription": "<p>Επιστρέφει έναν πίνακα που περιγράφει τις στήλες του<code>table</code>.</p>\r\n<p>Κάθε γραμμή στον πίνακα περιγράφει τις ιδιότητες μιας στήλης του <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Column Name</b></td>\r\n    <td><b>Description</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Το όνομα της στήλης.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>Η θέση με βάση το 0 της στήλης στο<code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Το όνομα του τύπου της στήλης.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Το είδος του τύπου της στήλης.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Αν η στήλη μπορεί να περιέχει τιμές <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Η αριθμητική βάση (π.χ. δυαδικό, δεκαδικό) των πεδίων <code>NumericPrecision</code> και <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Η ακρίβεια μιας αριθμητικής στήλης στη βάση που καθορίζεται από το <code>NumericPrecisionBase</code>. Αυτός είναι ο μέγιστος αριθμός ψηφίων που μπορούν να αναπαρασταθούν από μια τιμή αυτού του τύπου (συμπεριλαμβανομένων κλασματικών ψηφίων).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Η κλίμακα μιας αριθμητικής στήλης στη βάση που καθορίζεται από το <code>NumericPrecisionBase</code>. Αυτός είναι ο αριθμός των ψηφίων στο κλασματικό τμήμα μιας τιμής αυτού του τύπου. Η τιμή <code>0</code> υποδεικνύει μια σταθερή κλίμακα χωρίς κλασματικά ψηφία. Η τιμή <code>null</code> υποδεικνύει ότι η κλίμακα δεν είναι γνωστή (είτε επειδή είναι κινητή είτε επειδή δεν έχει οριστεί).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Ο μέγιστος αριθμός κλασματικών ψηφίων που υποστηρίζεται στο δεύτερο τμήμα μιας τιμής ημερομηνίας ή ώρας.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Ο μέγιστος αριθμός χαρακτήρων που επιτρέπεται σε μια στήλη <code>text</code> ή ο μέγιστος αριθμός byte που επιτρέπεται σε μια στήλη <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Υποδεικνύει αν αυτή η στήλη μπορεί να έχει μεταβλητό μήκος (έως <code>MaxLength</code>) ή αν έχει σταθερό μέγεθος</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Το όνομα του τύπου της στήλης στο σύστημα εγγενούς τύπου της προέλευσης (π.χ. <code>nvarchar</code> για SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Η προεπιλεγμένη παράσταση για μια τιμή αυτής της στήλης στην εγγενή γλώσσα παράστασης της προέλευσης (π.χ. <code>42</code> ή <code>newid()</code> για SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Η περιγραφή της στήλης.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με μόνο εκείνες τις γραμμές του πίνακα εισόδου που περιείχαν ένα σφάλμα σε τουλάχιστον ένα από τα κελιά. Εάν καθορίζεται μια λίστα στηλών, μόνο τα κελιά στις καθορισμένες στήλες ελέγχονται για σφάλματα.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με μόνο εκείνες τις γραμμές του πίνακα εισόδου που περιείχαν ένα σφάλμα σε τουλάχιστον ένα από τα κελιά. Εάν καθορίζεται μια λίστα στηλών, μόνο τα κελιά στις καθορισμένες στήλες ελέγχονται για σφάλματα.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Επιλέγει ονόματα πελατών με σφάλματα στις αντίστοιχες σειρές.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Επιστρέφει έναν πίνακα από όπου έχουν παραλειφθεί οι γραμμές πρώτης μέτρησης.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που δεν περιέχει τον καθορισμένο αριθμό πρώτων γραμμών, <code>countOrCondition</code>, του πίνακα <code>table</code>.\r\n    Ο αριθμός των γραμμών που παραλείπονται εξαρτάται από την προαιρετική παράμετρο <code>countOrCondition</code>. \r\n    <ul>\r\n    <li> Εάν παραλειφθεί η <code>countOrCondition</code>, παραλείπεται μόνο η πρώτη γραμμή. </li>\r\n    <li> Εάν η <code>countOrCondition</code> είναι αριθμός, θα παραλειφθούν τόσες γραμμές (αρχίζοντας από επάνω). </li>\r\n    <li> Εάν η <code>countOrCondition</code> είναι συνθήκη, οι γραμμές που ικανοποιούν τη συνθήκη θα παραλείπονται έως ότου κάποια γραμμή δεν ικανοποιεί τη συνθήκη.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Παραλείπει την πρώτη γραμμή του πίνακα.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Παραλείπει τις πρώτες δύο γραμμές του πίνακα.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Παραλείπει τις πρώτες γραμμές όπου [Price] > 25 του πίνακα.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Εμποδίζει την εκτέλεση τυχόν μεταγενέστερων λειτουργιών στην αρχική προέλευση των δεδομένων.",
        "Documentation.LongDescription": "Εμποδίζει την εκτέλεση τυχόν μεταγενέστερων λειτουργιών στην αρχική προέλευση των δεδομένων στο <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Πραγματοποιεί λήψη δεδομένων από έναν πίνακα SQL με τρόπο που αποτρέπει την εκτέλεση τυχόν μεταγενέστερων λειτουργιών ως ερώτημα στον SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Μετατρέπει στήλες σε γραμμές και γραμμές σε στήλες.",
        "Documentation.LongDescription": "Μετατρέπει στήλες σε γραμμές και γραμμές σε στήλες.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε τις γραμμές του πίνακα των ζευγών ονόματος-τιμής σε στήλες.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Λαμβάνει τις σχέσεις μεταξύ ενός συνόλου πινάκων.",
        "Documentation.LongDescription": "Λαμβάνει τις σχέσεις μεταξύ ενός συνόλου πινάκων. Θεωρείται ότι το σύνολο <code>tables</code> έχει δομή όμοια με αυτήν ενός πίνακα πλοήγησης. Η στήλη που καθορίζεται από το στοιχείο <code>dataColumn</code> περιέχει τους πραγματικούς πίνακες δεδομένων.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL από τη βάση δεδομένων Teradata.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL από τη βάση δεδομένων Teradata στο διακομιστή <code>server</code>. Η θύρα μπορεί να καθοριστεί προαιρετικά με το διακομιστή, διαχωρισμένο με άνω και κάτω τελεία. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n</ul>\r\n\r\n    Η παράμετρος εγγραφής καθορίζεται, για παράδειγμα, ως [option1 = value1, option2 = value2...] ή [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Καταχωρήστε τον αριθμό των μηνών δεδομένων ιστορικού του Twilio προς ανάκτηση.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει μια περιγραφή των στηλών (δηλαδή το σχήμα) του καθορισμένου τύπου πίνακα.",
        "Documentation.LongDescription": "<p>Επιστρέφει έναν πίνακα που περιγράφει τις στήλες του <code>tableType</code>.</p>\r\n<p>Ανατρέξτε στην τεκμηρίωση για το <code>Table.Schema</code> για μια περιγραφή του πίνακα που προκύπτει.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Τροφοδοσία υπηρεσιών Azure DevOps",
        "Documentation.DisplayName": "Τροφοδοσία υπηρεσιών Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα τροφοδοσιών OData που παρέχονται από το Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Σύνδεση στα δεδομένα πληροφοριών Viva",
        "Documentation.LongDescription": "Εισαγάγετε εβδομαδιαία μετρικά και δεδομένα χαρακτηριστικών από το Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα με ορατά χαρακτηριστικά και εβδομαδιαία μετρικά για κάθε μετρημένο εργαζόμενο στο διαμέρισμα.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα του εγγράφου HTML κατακερματισμένα στα δομικά στοιχεία του, καθώς και μια αναπαράσταση του πλήρους εγγράφου και του κειμένου του μετά την κατάργηση των ετικετών.",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα του εγγράφου HTML κατακερματισμένα στα δομικά στοιχεία του, καθώς και μια αναπαράσταση του πλήρους εγγράφου και του κειμένου του μετά την κατάργηση των ετικετών.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Επιστρέφει έναν πίνακα με βασικά μετρικά Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Πραγματοποιεί μια κλήση στο τελικό σημείο KeyMetrics του Webtrends και επιστρέφει όλα τα δεδομένα ως πίνακα.",
        "Documentation.Examples": [
          {
            "Description": "Έλκει έναν πίνακα βασικών μετρικών για το μισθωτή 98765 τις τελευταίες 30 ημέρες",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Ένας πίνακας βασικών μετρικών"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε το αναγνωριστικό προφίλ που σχετίζεται με το λογαριασμό σας Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Σύνδεση στα δεδομένα πληροφοριών Viva",
        "Documentation.LongDescription": "Εισαγάγετε εβδομαδιαία μετρικά και δεδομένα χαρακτηριστικών από το Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα με ορατά χαρακτηριστικά και εβδομαδιαία μετρικά για κάθε μετρημένο εργαζόμενο στο διαμέρισμα.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα του εγγράφου XML ως ιεραρχικό πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα του εγγράφου XML ως ιεραρχικό πίνακα.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα του εγγράφου XML ως ένθετη συλλογή πινάκων που έχουν μετατραπεί σε επίπεδη μορφή.",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα του εγγράφου XML ως ένθετη συλλογή πινάκων που έχουν μετατραπεί σε επίπεδη μορφή.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Ανάκτηση των περιεχομένων ενός τοπικού αρχείου XML.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL του λογαριασμού σας Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Zendesk."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Επιστρέφει τη συλλογή σχημάτων για μια προέλευση δεδομένων ADO.NET.",
        "Documentation.LongDescription": "Επιστρέφει τη συλλογή σχημάτων για την προέλευση δεδομένων ADO.NET με όνομα υπηρεσίας παροχής <code>providerName</code> και συμβολοσειρά σύνδεσης <code>connectionString</code>. Το <code>connectionString</code> μπορεί να είναι κείμενο ή εγγραφή ζευγών τιμών ιδιοτήτων. Οι τιμές ιδιοτήτων μπορούν να είναι κείμενο ή αριθμός. Μπορεί να καταχωρηθεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Μια λογική τιμή (true/false) που καθορίζει αν θα παράγονται επιλογές συμβολοσειράς σύνδεσης συμβατές με SQL Server για τον έλεγχο ταυτότητας των Windows. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Εισαγάγετε δεδομένα από μια βάση δεδομένων Amazon Redshift.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που παραθέτει τους πίνακες στο σύμπλεγμα Amazon Redshift <code>server</code> στη βάση δεδομένων <code>database</code>.  Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να καθοριστεί για τον έλεγχο των ακόλουθων επιλογών:\r\n<ul>\r\n<li><code>Όνομα Πάροχου</code>: Μια τιμή κειμένου που θα χρησιμοποιηθεί ως όνομα υπηρεσίας παροχής για τη σύνδεση. Αυτό χρησιμοποιείται κατά τη χρήση του Microsoft Authentication.</li>\r\n<li><code>Μέγεθος Δέσμης</code>: Ο αριθμός των γραμμών που λήφθηκαν με μία μόνο κλήση στον διακομιστή.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Επιστρέφει έναν πίνακα πολυδιάστατων κύβων ή μοντέλων σε μορφή πίνακα από τη βάση δεδομένων των υπηρεσιών ανάλυσης.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα πολυδιάστατων κύβων ή μοντέλων σε μορφή πίνακα από τη βάση δεδομένων των Υπηρεσιών ανάλυσης <code>database</code> στο διακομιστή <code>server</code>. Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να καθοριστεί για τον έλεγχο των παρακάτω επιλογών:\r\n    <ul>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα MDX που χρησιμοποιείται για την ανάκτηση δεδομένων.</li>\r\n<li><code>TypedMeasureColumns</code> : Μια λογική τιμή που υποδεικνύει αν οι τύποι που καθορίζονται στο πολυδιάστατο μοντέλο ή το μοντέλο σε μορφή πίνακα θα χρησιμοποιηθούν για τους τύπους των προστιθέμενων στηλών μετρήσεων. Όταν οριστεί σε false, θα χρησιμοποιείται ο τύπος &quot;number&quot; για όλες τις στήλες μετρήσεων. Η προεπιλεγμένη τιμή για αυτήν την επιλογή είναι false.</li>\r\n<li><code>Culture</code> : Ένα όνομα κουλτούρας που καθορίζει την κουλτούρα για τα δεδομένα. Αυτό αντιστοιχεί στην ιδιότητα συμβολοσειράς σύνδεσης &quot;Αναγνωριστικό τοπικών ρυθμίσεων&quot;.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή, προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>SubQueries</code> : Ένας αριθμός (0, 1 ή 2) που ορίζει την τιμή της ιδιότητας &quot;SubQueries&quot; στη συμβολοσειρά σύνδεσης. Αυτή ελέγχει τη συμπεριφορά των υπολογισμένων μελών σε δευτερεύουσες επιλογές ή δευτερεύοντες κύβους. (Η προεπιλεγμένη τιμή είναι 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που εμφανίζει τους πίνακες στο καθορισμένο σύμπλεγμα Spark.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που εμφανίζει τους πίνακες στο σύμπλεγμα Spark <code>host</code> χρησιμοποιώντας το <code>protocol</code>.  Τα έγκυρα πρωτόκολλα είναι:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα που εμφανίζει τους πίνακες στο καθορισμένο σύμπλεγμα Spark.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε ονόματα οργανισμού και έργου.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (Μόνο πίνακες)",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με προβολές ανάλυσης που παρέχονται από το Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Εισαγωγή δεδομένων από HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nΕπιστρέφει μια λίστα πινάκων από το HDInsight Interactive Query που καθορίζεται από τη βάση δεδομένων <code>database</code> στον διακομιστή <code>server</code> του HDInsight Interactive Query. Ένας αριθμός θύρας μπορεί να καθοριστεί προαιρετικά με τον διακομιστή, διαχωρισμένος με άνω και κάτω τελεία. Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Μια διάρκεια που ελέγχει τον χρόνο αναμονής πριν από την εγκατάλειψη της προσπάθειας δημιουργίας σύνδεσης με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n        <li><code>CommandTimeout</code>: Μια διάρκεια που ελέγχει το χρονικό διάστημα κατά το οποίο επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή πριν από την ακύρωσή του. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n</ul>\r\nΗ παράμετρος <code>options</code> καθορίζεται ως [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με στήλες που έχουν αντιστοιχιστεί στα χαρακτηριστικά μιας οντότητας στο κοινό μοντέλο δεδομένων, συμπεριλαμβανομένων των τύπων δεδομένων.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με στήλες που έχουν αντιστοιχιστεί στα χαρακτηριστικά μιας οντότητας στο κοινό μοντέλο δεδομένων, συμπεριλαμβανομένων των τύπων δεδομένων. Οι στήλες από τον ορισμό οντότητας θα προστεθούν, αν δεν έχουν αντιστοιχιστεί, και οι στήλες που δεν έχουν αντιστοιχιστεί θα καταργηθούν.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Επιστρέφει έναν κύβο, αφού εφαρμοστεί παράμετρος σε αυτόν.",
        "Documentation.LongDescription": "Επιστρέφει έναν κύβο, αφού εφαρμοστεί <code>parameter</code> με <code>arguments</code> σε <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Αλλάζει τις υποδιαιρέσεις διάστασης του περιβάλλοντος φίλτρου για τον κύβο συμπτύσσοντας τα χαρακτηριστικά που αντιστοιχίστηκαν στις καθορισμένες στήλες.",
        "Documentation.LongDescription": "Αλλάζει τις υποδιαιρέσεις διάστασης του περιβάλλοντος φίλτρου για το <code>cube</code> συμπτύσσοντας τα χαρακτηριστικά που αντιστοιχίστηκαν στις καθορισμένες στήλες <code>columnNames</code>. Οι στήλες καταργούνται επίσης από την προβολή πίνακα του κύβου.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Αντικαθιστά το σύνολο των διαστάσεων που επιστρέφονται από το Cube.Dimensions.",
        "Documentation.LongDescription": "Αντικαθιστά το σύνολο των διαστάσεων που επιστρέφονται από <code>Cube.Dimensions</code>\r\n    Για παράδειγμα, αυτή η συνάρτηση μπορεί να χρησιμοποιηθεί για την προσθήκη μιας στήλης αναγνωριστικού σε ένα χαρακτηριστικό διάστασης έτσι ώστε η προέλευση δεδομένων να μπορεί να ομαδοποιήσει το αναγνωριστικό αντί για την εμφανιζόμενη τιμή.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Εφαρμόζει μια λίστα συναρτήσεων κύβου.",
        "Documentation.LongDescription": "Εφαρμόζει τις συναρτήσεις κύβου λίστας, <code>transforms</code>, στο <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL που είναι διαθέσιμα σε βάση δεδομένων Db2.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL που είναι διαθέσιμα σε μια βάση δεδομένων Db2 στον διακομιστή <code>server</code>, στην παρουσία βάσης δεδομένων με όνομα <code>database</code>. Η θύρα μπορεί να καθοριστεί προαιρετικά με τον διακομιστή, διαχωρισμένη με άνω και κάτω τελεία. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n<li><code>Implementation</code> : Καθορίζει την εσωτερική υλοποίηση υπηρεσίας παροχής βάσης δεδομένων που θα χρησιμοποιηθεί. Οι έγκυρες τιμές είναι: &quot;IBM&quot; και &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Ένας αριθμός για την αποκωδικοποίηση δυαδικών δεδομένων Db2 FOR BIT σε συμβολοσειρές χαρακτήρων από το CCSID (Αναγνωριστικό συνόλου κωδικοποιημένων χαρακτήρων). Ισχύει για Implementation = &quot;Microsoft&quot;. Ορίστε την τιμή σε 0 για απενεργοποίηση της μετατροπής (προεπιλογή). Ορίστε την τιμή σε 1 για μετατροπή βάσει κωδικοποίησης βάσης δεδομένων. Ορίστε άλλον αριθμό CCSID για μετατροπή σε κωδικοποίηση εφαρμογής.</li>\r\n<li><code>PackageCollection</code> : Καθορίζει μια τιμή συμβολοσειράς για τη συλλογή πακέτων (η προεπιλογή είναι &quot;NULLID&quot;) για την ενεργοποίηση της χρήσης κοινόχρηστων πακέτων που απαιτούνται για την επεξεργασία προτάσεων SQL. Ισχύει για Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Καθορίζει εάν η σύνδεση γίνεται μέσω μιας πύλης σύνδεσης Db2. Ισχύει για Implementation = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Η παράμετρος εγγραφής καθορίζεται, για παράδειγμα, ως [option1 = value1, option2 = value2...] ή [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Ανακτά ένα σύνολο δεδομένων από το Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει τις ιδιότητες και τα περιεχόμενα των blob που βρέθηκαν στο καθορισμένο κοντέινερ από ένα θάλαμο χώρου αποθήκευσης του Azure.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει μια γραμμή για κάθε αρχείο blob που βρέθηκε στη διεύθυνση URL λογαριασμού <code>account</code> από ένα θάλαμο χώρου αποθήκευσης του Azure. Κάθε γραμμή περιέχει ιδιότητες του αρχείου και μια σύνδεση στο περιεχόμενό του.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που περιέχει τα αποτελέσματα της εκτέλεσης των καθορισμένων επιλογέων CSS έναντι του παρεχόμενου HTML.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που περιέχει τα αποτελέσματα της εκτέλεσης των καθορισμένων επιλογέων CSS στο παρεχόμενο <code>html</code>. Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να παρασχεθεί για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Πρόσβαση σε δεδομένα",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα από ένα δείγμα τιμής κειμένου html.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Εξάγει όλα τα στοιχεία href από ένα δείγμα τιμής κειμένου html.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL που είναι διαθέσιμα σε μια βάση δεδομένων Informix.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL που είναι διαθέσιμα σε μια βάση δεδομένων Informix στο διακομιστή <code>server</code> στην παρουσία βάσης δεδομένων με όνομα <code>database</code>. Η θύρα μπορεί να καθοριστεί προαιρετικά με το διακομιστή, διαχωρισμένο με άνω και κάτω τελεία. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n</ul>\r\n\r\n    Η παράμετρος εγγραφής καθορίζεται, για παράδειγμα, ως [option1 = value1, option2 = value2...] ή ως [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με στοιχεία του υποψήφιου πελάτη.",
        "Documentation.LongDescription": "Κάνει κλήση στο τελικό σημείο API REST Marketo στο <code>url</code>/rest/v1/leads.json. Επιστρέφονται όλοι οι υποψήφιοι πελάτες στη λίστα <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Έλκει τα στοιχεία τριών υποψήφιων πελατών",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Ένας πίνακας με στοιχεία για τους υποψήφιους πελάτες που παρασχέθηκαν"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Καταχωρήστε τη διεύθυνση URL του τελικού σημείου API Marketo REST που σχετίζεται με το λογαριασμό σας.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με πίνακες, προβολές και αποθηκευμένες ανυσματικές συναρτήσεις SQL που είναι διαθέσιμα σε βάση δεδομένων MySQL.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με πίνακες, προβολές και αποθηκευμένες ανυσματικές συναρτήσεις SQL που διατίθενται σε μια βάση δεδομένων MySQL στο διακομιστή <code>server</code> στην παρουσία βάσης δεδομένων με όνομα <code>database</code>. Η θύρα μπορεί να καθοριστεί προαιρετικά με το διακομιστή, διαχωρισμένο με άνω και κάτω τελεία. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής, <code>options</code>, για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>Encoding</code> : Μια τιμή TextEncoding που καθορίζει το σύνολο χαρακτήρων που χρησιμοποιείται για την κωδικοποίηση όλων των ερωτημάτων που αποστέλλονται στον διακομιστή (η προεπιλογή είναι null).</li>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Μια λογική τιμή (true/false) που καθορίζει αν θα επιβάλλονται οι στήλες tinyint στο διακομιστή ως λογικές τιμές. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>OldGuids</code> : Μια λογική τιμή (true/false) που ορίζει εάν οι στήλες char(36) (αν έχει τιμή false) ή οι στήλες binary(16) (αν έχει τιμή true) θα αντιμετωπίζονται ως GUID. Η προεπιλεγμένη τιμή είναι false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Μια λογική τιμή (true/false) που ορίζει αν θα επιστρέφονται όλοι οι πίνακες όλων των βάσεων δεδομένων (αν έχει τιμή false) ή θα επιστρέφονται οι πίνακες και οι προβολές της καθορισμένης βάσης δεδομένων (αν έχει τιμή true). Η προεπιλεγμένη τιμή είναι false.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n</ul>\r\n\r\n    Η παράμετρος εγγραφής καθορίζεται, για παράδειγμα, ως [option1 = value1, option2 = value2...] ή [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Εισαγάγετε δεδομένα από μια βάση δεδομένων IBM Netezza.",
        "Documentation.LongDescription": "\r\nΕπιστρέφει έναν πίνακα με πίνακες, προβολές και αποθηκευμένες συναρτήσεις Netezza από τη βάση δεδομένων διακομιστή Netezza <code>database</code> στον διακομιστή <code>server</code>. Η θύρα μπορεί να καθοριστεί προαιρετικά με τον διακομιστή, διαχωρισμένη με άνω κάτω τελεία. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής, <code>options</code>, για τον έλεγχο των ακόλουθων επιλογών:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις επιστρεφόμενες τιμές (η προεπιλογή είναι true)</li>\r\n        <li><code>HierarchicalNavigation</code>: Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false)</li>\r\n        <li><code>ConnectionTimeout</code>: Μια διάρκεια που ελέγχει τον χρόνο αναμονής πριν από την εγκατάλειψη μιας προσπάθειας δημιουργίας σύνδεσης με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n        <li><code>CommandTimeout</code>: Μια διάρκεια που ελέγχει το χρονικό διάστημα κατά το οποίο επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή πριν από την ακύρωσή του. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>NormalizeDatabaseName</code>: Μια λογική τιμή (true/false) που ορίζει αν θα κανονικοποιείται το όνομα βάσης δεδομένων σε κεφαλαία ή αν θα ερμηνεύεται κυριολεκτικά (η προεπιλογή είναι true).</li>\r\n</ul>\r\nΗ τιμή της παραμέτρου καθορίζεται ως [option1 = value1, option2 = value2...].",
        "Documentation.Examples": [
          {
            "Description": "Εμφανίστε τους πίνακες σε ένα έργο IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα εκτέλεσης εγγενούς ερωτήματος σε μια προέλευση δεδομένων ODBC.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της εκτέλεσης του <code>query</code> με τη συμβολοσειρά σύνδεσης <code>connectionString</code> με χρήση ODBC. Η συμβολοσειρά <code>connectionString</code> μπορεί να είναι κείμενο ή εγγραφή ζευγών τιμών ιδιοτήτων. Οι τιμές ιδιοτήτων μπορούν να είναι κείμενο ή αριθμός. Μπορεί να καταχωρηθεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή είναι 15 δευτερόλεπτα.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Μια λογική τιμή (true/false) που καθορίζει αν θα παράγονται επιλογές συμβολοσειράς σύνδεσης συμβατές με SQL Server για τον έλεγχο ταυτότητας των Windows. Η προεπιλεγμένη τιμή είναι true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει το αποτέλεσμα εκτέλεσης ενός απλού ερωτήματος έναντι της παρεχόμενης συμβολοσειράς σύνδεσης.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα εκτέλεσης εγγενούς ερωτήματος σε μια προέλευση δεδομένων OLE DB.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της εκτέλεσης του <code>query</code> με τη συμβολοσειρά σύνδεσης <code>connectionString</code> με χρήση OLE DB. Η συμβολοσειρά <code>connectionString</code> μπορεί να είναι κείμενο ή εγγραφή ζευγών τιμών ιδιοτήτων. Οι τιμές ιδιοτήτων μπορεί να είναι είτε κείμενο είτε αριθμός. Μπορεί να καταχωρηθεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Μια λογική τιμή (true/false) που καθορίζει αν θα παράγονται επιλογές συμβολοσειράς σύνδεσης συμβατές με SQL Server για τον έλεγχο ταυτότητας των Windows. Η προεπιλεγμένη τιμή είναι true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Επιστρέφει έναν πίνακα πινάκων και προβολών SQL που είναι διαθέσιμα σε βάση δεδομένων PostgreSQL.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL που είναι διαθέσιμα σε μια βάση δεδομένων PostgreSQL στο διακομιστή <code>server</code>, στην παρουσία βάσης δεδομένων με όνομα <code>database</code>. Η θύρα μπορεί να καθοριστεί προαιρετικά με το διακομιστή, διαχωρισμένο με άνω και κάτω τελεία. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n</ul>\r\n\r\n    Η παράμετρος εγγραφής καθορίζεται, για παράδειγμα, ως [option1 = value1, option2 = value2...] ή [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Εισαγάγετε δεδομένα από μια αποθήκη Snowflake Computing.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα όπου παρατίθενται οι πίνακες στην αποθήκη Snowflake Computing <code>warehouse</code> που βρίσκεται στον διακομιστή <code>server</code>. Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να καθοριστεί για τον έλεγχο των παρακάτω επιλογών:\r\n<ul>\r\n<li><code>Role</code>: Μια τιμή κειμένου που θα χρησιμοποιηθεί ως όνομα του ρόλου για τη σύνδεση.</li>\r\n<li><code>CreateNavigationProperties</code>: Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις επιστρεφόμενες τιμές (η προεπιλογή είναι true).</li>\r\n<li><code>ConnectionTimeout</code>: Ο αριθμός των δευτερολέπτων αναμονής για αποκρίσεις δικτύου από το Snowflake.</li>\r\n<li><code>CommandTimeout</code>: Ο αριθμός των δευτερολέπτων αναμονής για εκτέλεση ενός ερωτήματος.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Εμφανίστε τους πίνακες σε μια αποθήκη Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που εμφανίζει τους πίνακες στο καθορισμένο σύμπλεγμα Spark.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που εμφανίζει τους πίνακες στο σύμπλεγμα Spark <code>host</code> χρησιμοποιώντας το <code>protocol</code>.  Τα έγκυρα πρωτόκολλα είναι:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Εμφανίζει τους πίνακες σε μια παρουσία του Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με πίνακες, προβολές και αποθηκευμένες συναρτήσεις SQL από τη βάση δεδομένων SQL Server.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με πίνακες, προβολές και αποθηκευμένες συναρτήσεις SQL από τη βάση δεδομένων SQL Server <code>database</code> στο διακομιστή <code>server</code>. Η θύρα μπορεί να καθοριστεί προαιρετικά με το διακομιστή, διαχωρισμένο με άνω και κάτω τελεία ή με κόμμα. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Ένας αριθμός που ορίζει την τιμή του όρου ερωτήματος &quot;maxdop&quot; στο ερώτημα SQL που δημιουργείται.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n<li><code>MultiSubnetFailover</code> : Μια λογική τιμή (true/false) που ορίζει την τιμή της ιδιότητας &quot;MultiSubnetFailover&quot; στη συμβολοσειρά σύνδεσης (η προεπιλογή είναι false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Μια λογική τιμή (true/false) η οποία, αν είναι true, επιχειρεί αναδίπλωση των μετατροπών τύπου, οι οποίες θα μπορούσαν να αποτύχουν και να προκαλέσουν αποτυχία ολόκληρου του ερωτήματος. Δεν συνιστάται για γενική χρήση.</li>\r\n<li><code>ContextInfo</code> : Μια δυαδική τιμή που χρησιμοποιείται για τον ορισμό του CONTEXT_INFO πριν από την εκτέλεση κάθε εντολής.</li>\r\n<li><code>OmitSRID</code> : Μια λογική τιμή (true/false) η οποία, αν είναι true, παραλείπει το SRID κατά την παραγωγή Well-Known Text από τύπους γεωμετρίας και γεωγραφίας.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Μια λογική τιμή (true/false) που, εάν είναι true, επιτρέπει την αναδίπλωση ερωτημάτων σε βάσεις δεδομένων στον ίδιο διακομιστή. Η προεπιλεγμένη τιμή είναι false.</li>\r\n</ul>\r\n\r\n    Η παράμετρος εγγραφής καθορίζεται, για παράδειγμα, ως [option1 = value1, option2 = value2...] ή [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Επιστρέφει έναν πίνακα πινάκων και προβολών SQL που είναι διαθέσιμα σε βάση δεδομένων Sybase.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με πίνακες και προβολές SQL που είναι διαθέσιμα σε μια βάση δεδομένων Sybase στο διακομιστή <code>server</code>, στην παρουσία βάσης δεδομένων με όνομα <code>database</code>. Η θύρα μπορεί να καθοριστεί προαιρετικά με το διακομιστή, διαχωρισμένο με άνω και κάτω τελεία. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Μια συνάρτηση που χρησιμοποιείται για τη δημιουργία ονομάτων για ιδιότητες περιήγησης.</li>\r\n<li><code>Query</code> : Ένα εγγενές ερώτημα SQL που χρησιμοποιείται για την ανάκτηση δεδομένων. Αν το ερώτημα παραγάγει πολλά σύνολα αποτελεσμάτων, θα επιστραφεί μόνο το πρώτο.</li>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>ConnectionTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της προσπάθειας να γίνει σύνδεση με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n</ul>\r\n\r\n    Η παράμετρος εγγραφής καθορίζεται, για παράδειγμα, ως [option1 = value1, option2 = value2...] ή [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Προσαρτά μια στήλη με ρητές τιμές θέσης.",
        "Documentation.LongDescription": "Προσαρτά μια στήλη με το όνομα <code>newColumnName</code> στο <code>table</code> με ρητές τιμές θέσης.\r\n    Μια προαιρετική τιμή, <code>initialValue</code>, η τιμή του αρχικού δείκτη. Μια προαιρετική τιμή, <code>increment</code>, που καθορίζει την επαύξηση κάθε τιμής δείκτη.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Προσθέτει μια στήλη δείκτη με το όνομα \"Index\" στον πίνακα.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Προσθέτει μια στήλη δείκτη με το όνομα \"index\", ξεκινώντας από την τιμή 10 και επαυξάνοντας κατά 5, στον πίνακα.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Με βάση μια στήλη λιστών σε έναν πίνακα, δημιουργήστε ένα αντίγραφο μιας γραμμής για κάθε τιμή της λίστας.",
        "Documentation.LongDescription": "Με βάση το <code>table</code>, όπου <code>column</code> είναι μια λίστα τιμών, διαιρεί τη λίστα σε μια γραμμή για κάθε τιμή. Οι τιμές στις άλλες στήλες αναπαράγονται σε κάθε νέα γραμμή που δημιουργείται.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Διαιρεί τη στήλη λίστας [Name] στον πίνακα.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Μεταδίδει την τιμή του προηγούμενου κελιού στα κελιά με τιμές που δεν είναι null παρακάτω στη στήλη.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα από την καθορισμένη <code>table</code> όπου η τιμή του προηγούμενου κελιού μεταδίδεται παρακάτω στα κελιά με τιμές που είναι null στην καθορισμένη <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα με τις τιμές null της στήλης [Place] συμπληρωμένες με την τιμή επάνω από αυτές από τον πίνακα.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Μεταδίδει την τιμή ενός κελιού στα κελιά με τιμές που είναι null παραπάνω στη στήλη.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα από την καθορισμένη <code>table</code> όπου η τιμή του επόμενου κελιού μεταδίδεται παραπάνω στα κελιά με τιμές που είναι null στην καθορισμένη <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα με τις τιμές null της στήλης [Column2] συμπληρωμένες με την τιμή κάτω από αυτές από τον πίνακα.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Επιστρέφει όλες τις γραμμές του πίνακα που περιέχουν το κείμενο που δίνεται.",
        "Documentation.LongDescription": "Επιστρέφει όλες τις γραμμές του πίνακα <code>table</code> που περιέχουν το κείμενο <code>text</code>. Εάν το κείμενο δεν βρεθεί, επιστρέφεται ένας κενός πίνακας.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τις γραμμές του πίνακα που περιέχουν το \"Bob\".",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Επιστρέφει το πρώτο πλήθος γραμμών που καθορίστηκε.",
        "Documentation.LongDescription": "Επιστρέφει τις πρώτες γραμμές του πίνακα <code>table</code>, ανάλογα με την τιμή του <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Εάν το <code>countOrCondition</code> είναι αριθμός, θα επιστραφούν τόσες γραμμές (αρχίζοντας από επάνω). </li>\r\n    <li> Εάν το <code>countOrCondition</code> είναι συνθήκη, οι γραμμές που ικανοποιούν τη συνθήκη θα επιστρέφονται έως ότου κάποια γραμμή δεν ικανοποιεί τη συνθήκη.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τις πρώτες δύο γραμμές του πίνακα.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Βρίσκει τις πρώτες γραμμές όπου [a] > 0 στον πίνακα.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που είναι το αποτέλεσμα του συνδυασμού ενός συνόλου πινάκων με διαμέριση.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα ο οποίος είναι το αποτέλεσμα του συνδυασμού ενός συνόλου πινάκων με διαμέριση, <code>partitions</code>. <code>partitionColumn</code> είναι το όνομα της στήλης για προσθήκη. Ο προεπιλεγμένος τύπος στήλης είναι <code>any</code>, αλλά μπορεί να καθοριστεί από το στοιχείο <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Εύρεση τύπου στοιχείου από τη λίστα <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Επιστρέφει τον τελευταίο καθορισμένο αριθμό γραμμών.",
        "Documentation.LongDescription": "Επιστρέφει τις τελευταίες γραμμές από τον πίνακα <code>table</code>, ανάλογα με την τιμή του <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Εάν το <code>countOrCondition</code> είναι αριθμός, θα επιστραφούν τόσες γραμμές αρχίζοντας από τη θέση (τέλος - <code>countOrCondition</code>). </li>\r\n    <li> Εάν το <code>countOrCondition</code> είναι συνθήκη, οι γραμμές που ικανοποιούν τη συνθήκη θα επιστρέφονται σε αύξουσα θέση έως ότου κάποια γραμμή δεν ικανοποιεί τη συνθήκη.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τις τελευταίες δύο γραμμές του πίνακα.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Βρίσκει τις τελευταίες γραμμές, όπου [a] > 0 στον πίνακα.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Επιστρέφει έναν πίνακα στον οποίο όλες οι στήλες έχουν πρόθεμα το παρεχόμενο κείμενο.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα όπου όλα τα ονόματα στηλών που παρέχονται από το <code>table</code> έχουν πρόθεμα το παρεχόμενο κείμενο, <code>prefix</code>, συν μια τελεία, στη μορφή <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Προσθέτει το πρόθεμα \"MyTable\" στις στήλες του πίνακα.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Επιστρέφει τις γραμμές που ξεκινούν από την καθορισμένη απόκλιση.",
        "Documentation.LongDescription": "Επιστρέφει τις γραμμές από τον <code>table</code> που ξεκινούν από την καθορισμένη απόκλιση <code>offset</code>. Μια προαιρετική παράμετρος, <code>count</code>, καθορίζει πόσες γραμμές θα επιστραφούν. Από προεπιλογή, επιστρέφονται όλες οι γραμμές μετά την απόκλιση.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει όλες τις γραμμές που ξεκινούν από την απόκλιση 1 στον πίνακα.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Επιστρέφει τη μία γραμμή που ξεκινά από την απόκλιση 1 στον πίνακα.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Καταργεί τις καθορισμένες στήλες.",
        "Documentation.LongDescription": "Καταργεί την καθορισμένη <code>columns</code> από την παρεχόμενη <code>table</code>.\r\n    Εάν η προκαθορισμένη στήλη δεν υπάρχει, παρουσιάζεται σφάλμα εκτός αν η προαιρετική παράμετρος <code>missingField</code> καθορίζει μια εναλλακτική συμπεριφορά (για παράδειγμα, <code>MissingField.UseNull</code> ή <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Καταργεί τη στήλη [Phone] από τον πίνακα.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Προσπαθήστε να καταργήσετε μια στήλη που δεν υπάρχει από τον πίνακα.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Καταργεί όλες τις εμφανίσεις των καθορισμένων γραμμών από τον πίνακα.",
        "Documentation.LongDescription": "Καταργεί όλες τις εμφανίσεις των καθορισμένων <code>rows</code> από τον <code>table</code>.\r\n    Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>equationCriteria</code> για τον έλεγχο της σύγκρισης μεταξύ των γραμμών του πίνακα.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε όλες τις γραμμές όπου [a = 1] από τον πίνακα <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Καταργεί τον καθορισμένο αριθμό γραμμών.",
        "Documentation.LongDescription": "Καταργεί τις <code>count</code> γραμμές που ξεκινούν από <code>table</code>, ξεκινώντας από το <code>offset</code> που καθορίστηκε. Σε περίπτωση που δεν παρέχεται η παράμετρος <code>count</code>, χρησιμοποιείται το προεπιλεγμένο πλήθος 1. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Καταργεί την πρώτη γραμμή του πίνακα.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Καταργεί τη γραμμή στη θέση 1 του πίνακα.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Καταργεί δύο γραμμές ξεκινώντας από τη θέση 1 του πίνακα.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Εφαρμόζει μετονομασίες στη μορφή {old, new}.",
        "Documentation.LongDescription": "Εκτελεί τις δεδομένες μετονομασίες στις στήλες του πίνακα <code>table</code>. Η λειτουργία αντικατάστασης <code>renames</code> αποτελείται από μια λίστα δύο τιμών, το παλιό όνομα στήλης και το νέο όνομα στήλης, τα οποία παρέχονται σε λίστα.\r\n    Εάν η στήλη δεν υπάρχει, παρουσιάζεται εξαίρεση εκτός αν η προαιρετική παράμετρος <code>missingField</code> καθορίζει μια εναλλακτική (για παράδειγμα, <code>MissingField.UseNull</code> ή <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Αντικαθιστά το όνομα στήλης \"CustomerNum\" με \"CustomerID\" στον πίνακα.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Αντικαθιστά το όνομα στήλης \"CustomerNum\" με \"CustomerID\" και \"PhoneNum\" με \"Phone\" στον πίνακα.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Αντικαθιστά το όνομα στήλης \"NewCol\" με \"NewColumn\" στον πίνακα και παραβλέψτε την, αν η στήλη δεν υπάρχει.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με νέες στήλες στην καθορισμένη σειρά.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα από την είσοδο <code>table</code>, με τις στήλες με τη σειρά που καθορίζονται από το <code>columnOrder</code>. Οι στήλες που δεν έχουν καθοριστεί στη λίστα δεν θα αναδιαταχθούν.\r\n     Εάν η στήλη δεν υπάρχει, παρουσιάζεται εξαίρεση εκτός αν η προαιρετική παράμετρος <code>missingField</code> καθορίζει μια εναλλακτική (για παράδειγμα, <code>MissingField.UseNull</code> ή <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Εναλλάσσει τη σειρά των στηλών [Phone] και [Name] στον πίνακα.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Εναλλάσσει τη σειρά των στηλών [Phone] και [Address] ή χρησιμοποιήστε το \"MissingField.Ignore\" στον πίνακα. Δεν αλλάζει τον πίνακα, επειδή η στήλη [Address] δεν υπάρχει.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Επαναλαμβάνει τις γραμμές των πινάκων κατά έναν καθορισμένο αριθμό φορών.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με τις γραμμές από την είσοδο <code>table</code> επαναλαμβανόμενες κατά τις καθορισμένες <code>count</code> φορές.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Επαναλαμβάνει τις γραμμές του πίνακα δύο φορές.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Αντικαθιστά τις τιμές σφαλμάτων στις καθορισμένες στήλες με την αντίστοιχη τιμή που καθορίζεται.",
        "Documentation.LongDescription": "Αντικαθιστά τις τιμές σφαλμάτων στις καθορισμένες στήλες του στοιχείου <code>table</code> με τις νέες τιμές στη λίστα <code>errorReplacement</code>. Η μορφή της λίστας είναι {{column1, value1}, …}. Μόνο μία τιμή αντικατάστασης επιτρέπεται ανά στήλη. Αν καθορίσετε τη στήλη περισσότερες από μία φορά, θα παρουσιαστεί σφάλμα.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Αντικαθιστά την τιμή σφάλματος με το κείμενο \"world\" στον πίνακα.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Αντικαθιστά την τιμή σφάλματος στη στήλη A με το κείμενο \"hello\" και στη στήλη B με το κείμενο \"world\" στον πίνακα.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Αντικαθιστά τα κλειδιά του καθορισμένου πίνακα.",
        "Documentation.LongDescription": "Αντικαθιστά τα κλειδιά του καθορισμένου πίνακα.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε τα υπάρχοντα κλειδιά ενός πίνακα.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Αντικαθιστά όλες τις καθορισμένες γραμμές με τις παρεχόμενες γραμμές.",
        "Documentation.LongDescription": "Αντικαθιστά όλες τις καθορισμένες γραμμές του <code>table</code> με τις παρεχόμενες γραμμές. Οι γραμμές για αντικατάσταση και οι αντικαταστάσεις καθορίζονται στην <code>replacements</code>, χρησιμοποιώντας τη μορφή {old, new}.\r\n    Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>equationCriteria</code> για τον έλεγχο της σύγκρισης μεταξύ των γραμμών του πίνακα.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Αντικαθιστά τις γραμμές [a = 1, b = 2] και [a = 2, b = 3] με [a = -1, b = -2],[a = -2, b = -3] στον πίνακα.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με μόνο τις καθορισμένες στήλες.",
        "Documentation.LongDescription": "Επιστρέφει το <code>table</code> μόνο με το καθορισμένο <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: Ο παρεχόμενος πίνακας.</li>\r\n       <li><code>columns</code>: Η λίστα στηλών από τον πίνακα <code>table</code> να επιστραφεί. Οι στήλες στον πίνακα που επιστρέφεται είναι με τη σειρά που παρατίθενται στο <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Optional)</i> Τι πρέπει να κάνετε εάν η στήλη δεν υπάρχει.  Παράδειγμα: <code>MissingField.UseNull</code> ή <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Συμπερίληψη μόνο της στήλης [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Συμπερίληψη μόνο των στηλών [CustomerID] και [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Αν η στήλη που περιλαμβάνεται δεν υπάρχει, το προεπιλεγμένο αποτέλεσμα είναι σφάλμα.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Αν η στήλη που περιλαμβάνεται δεν υπάρχει, η επιλογή <code>MissingField.UseNull</code> δημιουργεί μια στήλη τιμών null.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Επιλέγει τις γραμμές που ικανοποιούν τη συνάρτηση συνθήκης.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα γραμμών από τη λίστα <code>table</code>, οι οποίες ικανοποιούν την επιλογή <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Επιλέγει τις σειρές στον πίνακα, στις οποίες οι τιμές στη στήλη [CustomerID] είναι μεγαλύτερες του 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Επιλέγει τις σειρές στον πίνακα, στις οποίες τα ονόματα δεν περιλαμβάνουν το γράμμα \"B\".",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Ταξινομεί τον πίνακα χρησιμοποιώντας ένα ή περισσότερα ονόματα στηλών και κριτήρια σύγκρισης.",
        "Documentation.LongDescription": "Ταξινομεί τον <code>table</code> χρησιμοποιώντας τη λίστα ενός ή περισσοτέρων ονομάτων στηλών και προαιρετικά την <code>comparisonCriteria</code> στη μορφή { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ταξινομεί τον πίνακα στη στήλη \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Ταξινομεί τον πίνακα στη στήλη \"OrderID\" με φθίνουσα σειρά.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Ταξινομεί τον πίνακα στη στήλη \"CustomerID\" και έπειτα \"OrderID\", με το \"CustomerID\" σε αύξουσα σειρά.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Μετασχηματίζει τα ονόματα στηλών χρησιμοποιώντας τη δεδομένη συνάρτηση.",
        "Documentation.LongDescription": "Μετασχηματίζει τα ονόματα των στηλών χρησιμοποιώντας τη δεδομένη συνάρτηση <code>nameGenerator</code>. Έγκυρες επιλογές:\r\n    <div>\r\n      <code>MaxLength</code> καθορίζει το μέγιστο μήκος νέων ονομάτων στηλών. Εάν η δεδομένη συνάρτηση έχει ως αποτέλεσμα μεγαλύτερο όνομα στήλης, το μεγάλο όνομα θα περικοπεί.\r\n    </div>\r\n    <div>\r\n       <code>Comparer</code> χρησιμοποιείται για τον έλεγχο της σύγκρισης κατά τη δημιουργία νέων ονομάτων στηλών. Οι συγκρίσεις μπορούν να χρησιμοποιηθούν για την παροχή συγκρίσεων χωρίς διάκριση πεζών-κεφαλαίων ή κουλτούρας και τοπικών ρυθμίσεων.\r\n    </div>\r\n    <div>\r\n      Τα παρακάτω ενσωματωμένα προγράμματα σύγκρισης είναι διαθέσιμα στη γλώσσα τύπων:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>:  Χρησιμοποιείται για την εκτέλεση ακριβούς τακτικού δείκτη σύγκρισης</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: Χρησιμοποιείται για την εκτέλεση μιας ακριβούς σύγκρισης χωρίς διάκριση πεζών-κεφαλαίων</li>\r\n      <li><code>Comparer.FromCulture</code>: Χρησιμοποιείται για την εκτέλεση σύγκρισης με επίγνωση κουλτούρας</li>\r\n    </ul>\r    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε το χαρακτήρα <code>#(tab)</code> από τα ονόματα στηλών",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Μετασχηματίζει τα ονόματα στηλών για τη δημιουργία ονομάτων χωρίς διάκριση πεζών-κεφαλαίων με μήκος 6.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Εφαρμόζει μετασχηματισμούς τύπου της μορφής { column, type } χρησιμοποιώντας μια συγκεκριμένη κουλτούρα.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα από την είσοδο <code>table</code> εφαρμόζοντας τη λειτουργία μετασχηματισμού στις στήλες που καθορίζονται στην παράμετρο <code>typeTransformations</code> (όπου η μορφή είναι { column name, type name}), χρησιμοποιώντας την καθορισμένη κουλτούρα της παραμέτρου <code>culture</code> (για παράδειγμα, \"en-US\").\r\n    Αν η στήλη δεν υπάρχει, παρουσιάζεται εξαίρεση.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Μετασχηματίστε τις αριθμητικές τιμές της στήλης [a] σε τιμές κειμένου από τον πίνακα <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Μετασχηματίζει τις τιμές μίας ή περισσότερων στηλών.",
        "Documentation.LongDescription": "Μετασχηματίζει <code>table</code> εφαρμόζοντας κάθε λειτουργία στήλης που αναφέρεται στο <code>transformOperations</code> (όπου η μορφή είναι { column name, transformation } ή { column name, transformation, new column type }).\r\n Εάν καθοριστεί μια <code>defaultTransformation</code>, θα εφαρμοστεί σε όλες τις στήλες που δεν αναφέρονται στο <code>transformOperations</code>.\r\n Εάν μια στήλη που αναφέρεται στο <code>transformOperations</code> δεν υπάρχει, δημιουργείται μια εξαίρεση, εκτός εάν η προαιρετική παράμετρος <code>missingField</code> καθορίζει μια εναλλακτική (για παράδειγμα, <code>MissingField.UseNull</code> ή <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε τις τιμές κειμένου στη στήλη [A] σε τιμές αριθμού και τις τιμές αριθμού στη στήλη [B] σε τιμές κειμένου.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Μετατρέψτε τις αριθμητικές τιμές στη στήλη [X] που λείπει σε τιμές κειμένου, αγνοώντας τις στήλες που δεν υπάρχουν.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Μετατρέψτε τις αριθμητικές τιμές στη στήλη [X] που λείπει σε τιμές κειμένου, με προεπιλογή null σε στήλες που δεν υπάρχουν.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Αυξήστε τις αριθμητικές τιμές στη στήλη [B] και μετατρέψτε τις σε τιμές κειμένου και μετατρέψτε όλες τις άλλες στήλες σε αριθμούς.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Δημιουργεί ή επεκτείνει έναν πίνακα με δείκτες χειρισμού καθορισμένους από το χρήστη για λειτουργίες ερωτήματος και ενέργειας.",
        "Documentation.LongDescription": "<p>Επιστρέφει μια προβολή του <code>table</code> όπου οι συναρτήσεις που καθορίζονται στο <code>handlers</code> χρησιμοποιούνται αντί της προεπιλεγμένης συμπεριφοράς μιας λειτουργίας όταν η λειτουργία εφαρμόζεται στην προβολή.</p>\r\n<p>Αν <code>table</code> παρέχεται, όλες οι λειτουργίες χειριστή είναι προαιρετικές. Αν <code>table</code> δεν παρέχεται, απαιτούνται οι λειτουργίες χειριστή <code>GetType</code> και <code>GetRows</code>. Αν μια συνάρτηση χειριστή δεν έχει καθοριστεί για μια λειτουργία, η προεπιλεγμένη συμπεριφορά της λειτουργίας εφαρμόζεται στο <code>table</code> (εκτός από την περίπτωση του <code>GetExpression</code>).</p>\r\n<p>Οι συναρτήσεις του Handler πρέπει να επιστρέψουν ένα τιμή που είναι σημασιολογικά ισοδύναμη με το αποτέλεσμα της εφαρμογής της λειτουργίας έναντι του <code>table</code> (ή της προκύπτουσας προβολής στην περίπτωση του <code>GetExpression</code>).</p>\r\n<p>Αν μια συνάρτηση χειριστή εμφανίσει σφάλμα, η προεπιλεγμένη συμπεριφορά της λειτουργίας εφαρμόζεται στην προβολή.</p>\r\n<p><code>Table.View</code> μπορεί να χρησιμοποιηθεί για την εφαρμογή αναδίπλωσης σε μια πηγή δεδομένων – η μετάφραση των ερωτημάτων M σε ερωτήματα για συγκεκριμένη πηγή (για παράδειγμα, για να δημιουργήσετε δηλώσεις T-SQL από ερωτήματα M).</p>\r\n<p>Ανατρέξτε στη δημοσιευμένη τεκμηρίωση προσαρμοσμένης σύνδεσης Power Query για μια πιο ολοκληρωμένη περιγραφή του <code>Table.View</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια βασική προβολή που δεν απαιτεί πρόσβαση στις γραμμές για τον προσδιορισμό του τύπου ή του πλήθους γραμμών.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε ονόματα οργανισμού και έργου.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (Μόνο πίνακες)",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με προβολές ανάλυσης που παρέχονται από το Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Εισαγωγή δεδομένων από Vertica",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με τα σχήματα που είναι διαθέσιμα στο διακομιστή που καθορίζεται από την παράμετρο <code>server</code> στη βάση δεδομένων που καθορίζεται από την παράμετρο <code>database</code>.\r\nΜια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να καταχωρηθεί για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: Μια διάρκεια που ελέγχει το χρονικό διάστημα αναμονής πριν από την εγκατάλειψη μιας προσπάθειας δημιουργίας σύνδεσης με το διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n    <li><code>CommandTimeout </code>: Μια διάρκεια που ελέγχει το επιτρεπόμενο χρονικό διάστημα εκτέλεσης του ερωτήματος από την πλευρά του διακομιστή πριν από την ακύρωσή του. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Παράθεση των πινάκων στο Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Επιστρέφει έναν πίνακα με περιεχόμενο αναφοράς από το Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Πραγματοποιεί μια κλήση στο δεδομένο τελικό σημείο αναφορών Webtrends και επιστρέφει όλα τα δεδομένα ως πίνακα.",
        "Documentation.Examples": [
          {
            "Description": "Πραγματοποιεί μια κλήση στο τελικό σημείο αναφοράς επισκεπτών Webtrends για δεδομένα στις τελευταίες 30 ημέρες",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Ένας πίνακας με δεδομένα επισκεπτών"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Επιστρέφει μια λίστα τομέων της υπηρεσίας καταλόγου Active Directory που ανήκουν στο ίδιο δάσος με τον καθορισμένο τομέα ή στον τομέα του τρέχοντος υπολογιστή εάν δεν έχει καθοριστεί κάποιος.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τομέων της υπηρεσίας καταλόγου Active Directory που ανήκουν στο ίδιο δάσος με τον καθορισμένο τομέα ή στον τομέα του τρέχοντος υπολογιστή εάν δεν έχει καθοριστεί κάποιος.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα εκτέλεσης ενός τοπικού ερωτήματος σε μια προέλευση δεδομένων ADO.NET.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα εκτέλεσης του <code>query</code> με τη συμβολοσειρά σύνδεσης <code>connectionString</code> χρησιμοποιώντας την υπηρεσία παροχής ADO.NET <code>providerName</code>. Το <code>connectionString</code> μπορεί να είναι κείμενο ή εγγραφή ζευγών τιμών ιδιοτήτων. Οι τιμές ιδιοτήτων μπορούν να είναι είτε κείμενο είτε αριθμός. Μπορεί να καταχωρηθεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού αυτό ακυρωθεί. Η προεπιλεγμένη τιμή είναι δέκα λεπτά.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Μια λογική τιμή (true/false) που καθορίζει αν θα παράγονται επιλογές συμβολοσειράς σύνδεσης συμβατές με SQL Server για τον έλεγχο ταυτότητας των Windows. Η προεπιλεγμένη τιμή είναι true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Επιστρέφει τις οικογένειες αναφορών στο Adobe Analytics.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα πολυδιάστατων πακέτων από το Adobe Analytics. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής, <code>options</code>, για τον έλεγχο των ακόλουθων επιλογών:\r\n <ul>\r\n<li><code>HierarchicalNavigation</code> : Μια λογική τιμή (true/false) που ορίζει αν οι πίνακες θα προβάλλονται ομαδοποιημένοι κατά τα ονόματα σχήματος (η προεπιλογή είναι false).</li>\r\n<li><code>MaxRetryCount</code> : Ο αριθμός των επαναλήψεων εκτέλεσης κατά την ανίχνευση για το αποτέλεσμα του ερωτήματος. Η προεπιλεγμένη τιμή είναι 120.</li>\r\n<li><code>RetryInterval</code> : Το χρονικό διάστημα μεταξύ των προσπαθειών επανάληψης. Η προεπιλεγμένη τιμή είναι 1 δευτερόλεπτο.</li>\r\n<li><code>Implementation</code> : Καθορίζει την έκδοση API του Adobe Analytics. Οι έγκυρες τιμές είναι: &quot;2.0&quot;. Η προεπιλογή χρησιμοποιεί API έκδοση 1.4.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Εισαγωγή δεδομένων από ένα Hive LLAP",
        "Documentation.LongDescription": "\r\nΕπιστρέφει μια λίστα πινάκων από το Hive LLAP που καθορίζεται από τη βάση δεδομένων <code>database</code> στον διακομιστή <code>server</code> του Hive LLAP χρησιμοποιώντας το επιλεγμένο πρωτόκολλο <code>protocol</code>. Ένας αριθμός θύρας μπορεί να καθοριστεί προαιρετικά με τον διακομιστή, διαχωρισμένος με άνω και κάτω τελεία. Το πρωτόκολλο μεταφοράς Thrift είναι τύπος απαρίθμησης με τιμές Standard, HTTP. Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>options</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Μια διάρκεια που ελέγχει τον χρόνο αναμονής πριν από την εγκατάλειψη της προσπάθειας δημιουργίας σύνδεσης με τον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n        <li><code>CommandTimeout</code>: Μια διάρκεια που ελέγχει το χρονικό διάστημα κατά το οποίο επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή πριν από την ακύρωσή του. Η προεπιλεγμένη τιμή εξαρτάται από το πρόγραμμα οδήγησης.</li>\r\n</ul>\r\nΗ παράμετρος <code>options</code> καθορίζεται ως [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 15-6-2017, λάβετε συνόψεις δεδομένων μεταξύ 1-5-2017 και 15-6-2017",
            "Code": "Αφήστε\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      στο\r\n          αποτέλεσμα",
            "Result": "Η συνάρτηση θα επιστρέψει συνόψεις δεδομένων μεταξύ 1-5-2017 και 15-6-2017"
          },
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 15-6-2017, λάβετε συνόψεις δεδομένων για τον Απρίλιο του 2017.",
            "Code": "Αφήστε\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      στο\r\n          αποτέλεσμα",
            "Result": "Η συνάρτηση θα επιστρέψει δεδομένα μεταξύ 1-4-2017 και 30-4-2017"
          },
          {
            "Description": "Υποθέτοντας ότι σήμερα είναι 15-6-2017, λάβετε συνόψεις δεδομένων από τον Απρίλιο του 2017 έως τώρα.",
            "Code": "Αφήστε\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      στο\r\n          αποτέλεσμα",
            "Result": "Η συνάρτηση θα επιστρέψει δεδομένα μεταξύ 1-4-2017 και 15-6-2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Διαχείριση κόστους Azure",
        "Documentation.Description": "Διαχείριση κόστους Azure",
        "Documentation.DisplayName": "Διαχείριση κόστους Azure",
        "Documentation.LongDescription": "Διαχείριση κόστους Azure",
        "Documentation.Name": "Διαχείριση κόστους Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε ονόματα οργανισμού και έργου.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Υπηρεσίες Azure DevOps",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα τροφοδοσιών OData που παρέχονται από το Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Συνδεθείτε στην παρουσία σας Dataverse (Dynamics 365 και PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Συγχωνεύει τον καθορισμένο πίνακα διαστάσεων στο περιβάλλον φίλτρου του κύβου και αλλάζει τις υποδιαιρέσεις των διαστάσεων του περιβάλλοντος φίλτρου επεκτείνοντας το καθορισμένο σύνολο των χαρακτηριστικών διάστασης.",
        "Documentation.LongDescription": "Συγχωνεύει τον καθορισμένο πίνακα διαστάσεων, <code>dimensionSelector</code>, στο περιβάλλον φίλτρου του κύβου, <code>cube</code>, και αλλάζει τις υποδιαιρέσεις των διαστάσεων του περιβάλλοντος φίλτρου επεκτείνοντας το καθορισμένο σύνολο, <code>attributeNames</code>, των χαρακτηριστικών διάστασης. Τα χαρακτηριστικά διάστασης προστίθενται στην προβολή πίνακα με στήλες που ονομάζονται <code>newColumnNames</code> ή <code>attributeNames</code> εάν δεν έχει καθοριστεί.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Προσθέτει μια στήλη στον κύβο η οποία περιέχει τα αποτελέσματα της μέτρησης που εφαρμόστηκε στο περιβάλλον γραμμής κάθε γραμμής.",
        "Documentation.LongDescription": "Προσθέτει μια στήλη με το όνομα <code>column</code> στο <code>cube</code> στον κύβο η οποία περιέχει τα αποτελέσματα της μέτρησης <code>measureSelector</code> που εφαρμόστηκε στο περιβάλλον γραμμής κάθε γραμμής. Η εφαρμογή μέτρησης επηρεάζεται από τις αλλαγές στις υποδιαιρέσεις και την ανάλυση της διάστασης. Οι τιμές μέτρησης θα ρυθμιστούν μετά την εκτέλεση ορισμένων λειτουργιών κύβου.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε το περιβάλλον και την εταιρεία σας Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε το περιβάλλον και την εταιρεία σας Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε το περιβάλλον και την εταιρεία σας Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε το περιβάλλον και την εταιρεία σας Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με σχετικά δεδομένα Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα του τρέχοντος βιβλίου εργασίας του Excel.",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα του τρέχοντος βιβλίου εργασίας του Excel. Επιστρέφει πίνακες, εύρη με όνομα και δυναμικούς πίνακες. Σε αντίθεση με το <code>Excel.Workbook</code>, δεν επιστρέφει φύλλα.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Επιστρέφει έναν πίνακα περιεχομένων από έναν λογαριασμό Microsoft Exchange.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα περιεχομένων από το λογαριασμό Microsoft Exchange <code>mailboxAddress</code>. Αν δεν έχει καθοριστεί <code>mailboxAddress</code>, χρησιμοποιείται ο προεπιλεγμένος λογαριασμός για τα διαπιστευτήρια.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Αποθήκη",
        "Documentation.Caption": "Αποθήκη",
        "Documentation.Description": "Εισάγει δεδομένα από την Αποθήκη",
        "Documentation.LongDescription": "Εισάγει δεδομένα από την Αποθήκη"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Επιστρέφει τους λογαριασμούς του Google Analytics.",
        "Documentation.LongDescription": "Επιστρέφει τους λογαριασμούς του Google Analytics που είναι προσβάσιμοι από το τρέχον διαπιστευτήριο.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Εισαγάγετε δεδομένα από βάση δεδομένων Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Επιστρέφει έναν πίνακα με τα διαθέσιμα έργα στο Google BigQuery. Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να καθοριστεί για τον έλεγχο των παρακάτω επιλογών:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Μια διάρκεια που ελέγχει πόσος χρόνος αναμονής πριν εγκαταλείψετε μια προσπάθεια σύνδεσης με τον διακομιστή. Η προεπιλεγμένη τιμή είναι η τιμή λήξης χρονικού ορίου σύνδεσης ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Μια διάρκεια που ελέγχει πόσο χρόνο επιτρέπεται να εκτελείται το ερώτημα από την πλευρά του διακομιστή προτού ακυρωθεί.</li>\r\n        <li><code>BillingProject</code>:Αναγνωριστικό έργου χρέωσης. Η προεπιλεγμένη τιμή είναι το πρώτο διαθέσιμο έργο.</li>\r\n        <li><code>UseStorageApi</code>: Καθορίζει εάν θα χρησιμοποιηθεί το BigQuery Storage API για μεγάλα σύνολα αποτελεσμάτων. Η προεπιλεγμένη τιμή είναι αληθής για τη χρήση του Storage API. Ορίστε σε false για να μην χρησιμοποιείται το Storage API</li>\r\n      </ul>\r\n    Η παράμετρος εγγραφής καθορίζεται ως [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Παράθεση των διαθέσιμων έργων στο Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Εισαγωγή δεδομένων από ένα Lakehouse",
        "Documentation.Description": "Εισαγωγή δεδομένων από ένα Lakehouse",
        "Documentation.LongDescription": "Συνδεθείτε σε όλα τα Lakehouses στα οποία έχετε πρόσβαση και επιλέξτε τις οντότητες που θέλετε να χρησιμοποιήσετε"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Επιστρέφει έναν πίνακα με βασικά δεδομένα MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με βασικά δεδομένα MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα με βασικά δεδομένα MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Ένας πίνακας με βασικά δεδομένα MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Επιστρέφει έναν πίνακα με δραστηριότητες υποψήφιου πελάτη.",
        "Documentation.LongDescription": "Κάνει κλήση στο τελικό σημείο API REST Marketo στο <code>url</code>/rest/v1/activities.json. Επιστρέφονται όλες οι δραστηριότητες στη λίστα <code>activityIds</code> που προέκυψαν από το <code>startTime</code> και έπειτα.",
        "Documentation.Examples": [
          {
            "Description": "Έλκει έναν πίνακα δραστηριοτήτων \"Επίσκεψη ιστοσελίδας\" από την 1η Νοεμβρίου 2015 και έπειτα",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Ένας πίνακας με λεπτομέρειες όλων των δραστηριοτήτων \"Επίσκεψη ιστοσελίδας\" από την 1η Νοεμβρίου και έπειτα"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Ροές δεδομένων Power BI (παλαιού τύπου)",
        "Documentation.Caption": "Εισαγωγή δεδομένων από ροή δεδομένων Power BI",
        "Documentation.LongDescription": "Συνδεθείτε σε όλες τις ροές δεδομένων του Power BI στις οποίες έχετε πρόσβαση και επιλέξτε τις οντότητες που θέλετε να χρησιμοποιήσετε."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Αποθήκες δεδομένων",
        "Documentation.Caption": "Αποθήκες δεδομένων",
        "Documentation.Description": "Εισάγει δεδομένα από βάσεις δεδομένων",
        "Documentation.LongDescription": "Εισάγει δεδομένα από βάσεις δεδομένων"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Ροές δεδομένων",
        "Documentation.Caption": "Εισαγωγή δεδομένων από ροή δεδομένων",
        "Documentation.Description": "Εισαγωγή δεδομένων από ροή δεδομένων",
        "Documentation.LongDescription": "Συνδεθείτε σε όλες τις ροές δεδομένων στις οποίες έχετε πρόσβαση και επιλέξτε τις οντότητες που θέλετε να χρησιμοποιήσετε"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Εισαγάγετε δεδομένα από το QuickBooks Online.",
        "Documentation.LongDescription": "\r\n      Επιστρέφει έναν πίνακα όπου παρατίθενται οι διαθέσιμοι πίνακες στο QuickBooks Online. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής, <code>options</code>, για τον έλεγχο των ακόλουθων επιλογών:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Διάρκεια που ελέγχει το χρονικό διάστημα αναμονής πριν από την εγκατάλειψη της προσπάθειας δημιουργίας σύνδεσης στον διακομιστή.</li>\r\n        <li><code>CommandTimeout</code>: Διάρκεια που ελέγχει το χρονικό διάστημα για το οποίο επιτρέπεται η εκτέλεση του ερωτήματος από την πλευρά του διακομιστή προτού ακυρωθεί.</li>\r\n          </ul>\r\n        Η παράμετρος εγγραφής καθορίζεται με τη μορφή [option1 = value1, option2 = value2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Επιστρέφει τα αντικείμενα από το λογαριασμό Salesforce.",
        "Documentation.LongDescription": "Επιστρέφει τα αντικείμενα στο λογαριασμό Salesforce που παρασχέθηκε στα διαπιστευτήρια. Ο λογαριασμός θα συνδεθεί μέσω του παρεχόμενου περιβάλλοντος <code>loginUrl</code>. Εάν δεν παρέχεται κάποιο περιβάλλον, τότε ο λογαριασμός θα συνδεθεί στην παραγωγή (https://login.salesforce.com). Μπορεί να παρασχεθεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Μια λογική τιμή (true/false) που ορίζει αν θα δημιουργούνται ιδιότητες περιήγησης στις τιμές που επιστρέφονται (η προεπιλογή είναι false).</li>\r\n<li><code>ApiVersion</code> : Η έκδοση του Salesforce API για χρήση για αυτό το ερώτημα. Όταν δεν καθορίζεται, χρησιμοποιείται η έκδοση API 29.0.</li>\r\n<li><code>Timeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της αίτησης στον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από την προέλευση.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Επιστρέφει τις αναφορές από το λογαριασμό Salesforce.",
        "Documentation.LongDescription": "Επιστρέφει τις αναφορές στο λογαριασμό Salesforce που παρασχέθηκε στα διαπιστευτήρια. Ο λογαριασμός θα συνδεθεί μέσω του παρεχόμενου περιβάλλοντος <code>loginUrl</code>. Εάν δεν παρέχεται κάποιο περιβάλλον, τότε ο λογαριασμός θα συνδεθεί στην παραγωγή (https://login.salesforce.com). Μπορεί να παρασχεθεί μια προαιρετική παράμετρος εγγραφής <code>options</code> για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Η έκδοση του Salesforce API για χρήση για αυτό το ερώτημα. Όταν δεν καθορίζεται, χρησιμοποιείται η έκδοση API 29.0.</li>\r\n<li><code>Timeout</code> : Μια διάρκεια που ελέγχει για πόσο χρονικό διάστημα θα γίνει αναμονή πριν από την εγκατάλειψη της αίτησης στον διακομιστή. Η προεπιλεγμένη τιμή εξαρτάται από την προέλευση.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Επιστρέφει τα InfoCube και τα ερωτήματα σε ένα σύστημα SAP Business Warehouse ομαδοποιημένα κατά InfoArea.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με InfoCube και ερωτήματα ομαδοποιημένα κατά InfoArea από μια παρουσία SAP Business Warehouse στο διακομιστή <code>server</code> με αριθμό συστήματος <code>systemNumberOrSystemId</code> και αναγνωριστικό προγράμματος-πελάτη <code>clientId</code>. Μπορεί να καθοριστεί μια προαιρετική παράμετρος εγγραφής <code>optionsOrLogonGroup</code> για τον έλεγχο των ακόλουθων επιλογών:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Επιστρέφει έναν πίνακα φύλλων, αναφορών, φακέλων και χώρων εργασίας από το Smartsheet API",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Επιστρέφει έναν ένθετο πίνακα με τα διαθέσιμα φύλλα, αναφορές, φακέλους και χώρους εργασίας από το Smartsheet API.",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει φύλλα, φακέλους, αναφορές και χώρους εργασίας που είναι διαθέσιμα στο ανώτερο επίπεδο της ιεραρχίας Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Ένας πίνακας με φακέλους, αναφορές και χώρους εργασίας από το ανώτερο επίπεδο της ιεραρχίας Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Επιστρέφει έναν πίνακα διαθέσιμων μετρικών από το SparkPost API v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Αυτή η λειτουργία μπορεί να χρησιμοποιηθεί για την ανάκτηση δεδομένων από ένα συγκεκριμένο τελικό σημείο \"Μετρικά\" από το SparkPost API v1. Όταν ανανεώνετε αυτούς τους πίνακες ή κάνετε κλήσεις στο SparkPost API χρησιμοποιώντας αυτό το λογισμικό σύνδεσης, να θυμάστε ότι το SparkPost API έχει αυστηρό όριο ρυθμού API. Αν ο διακομιστής του SparkPost επιστρέφει έναν κωδικό κατάστασης 429, έχετε συμπληρώσει το όριο ρυθμού και θα πρέπει να περιμένετε λίγα λεπτά πριν κάνετε άλλες κλήσεις. Κατά την επιλογή μιας τιμής για την παράμετρο Number of days, λάβετε υπόψη ότι το API αποθηκεύει μόνο 6 μήνες δεδομένων.",
        "Documentation.Examples": [
          {
            "Description": "Ανακτά τα μετρικά παράδοσης count_sent και count_rejected για όλα τα campaign_ids που συγκεντρώθηκαν τις τελευταίες τρεις ημέρες. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "πίνακας"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Κάνει μια κλήση στο API Stripe.",
        "Documentation.LongDescription": "Κάνει μια κλήση στο API Stripe στο https://api.stripe.com/v1/<code>method</code>, με την εγγραφή <code>additionalParameters</code> να διαβιβάζεται ως πρόσθετοι παράμετροι και τη λίστα <code>ColumnNames</code> των αναμενόμενων ονομάτων στηλών. Χρησιμοποιείται η έκδοση Stripe 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει έναν πίνακα με συμβάντα που δημιουργήθηκαν μετά την 1η Νοεμβρίου 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Ένας πίνακας με τα καθορισμένα συμβάντα για τον τρέχοντα λογαριασμό Stripe"
          },
          {
            "Description": "Επιστρέφει έναν πίνακα με όλα τα SKU",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Ένας πίνακας με όλα τα SKU για τον τρέχοντα λογαριασμό Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Επιστρέφει έναν πίνακα που αναφέρει τους διαθέσιμους πίνακες και συναρτήσεις Stripe.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα που αναφέρει τους διαθέσιμους πίνακες και συναρτήσεις Stripe."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "χώρος εργασίας ανάλυσης Azure Synapse",
        "Documentation.Caption": "χώρος εργασίας ανάλυσης Azure Synapse",
        "Documentation.LongDescription": "Σύνδεση PQ για χώρο εργασίας ανάλυσης Azure Synapse",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Προσθέτει μια στήλη με το καθορισμένο όνομα. Η τιμή υπολογίζεται με τη χρήση της καθορισμένης συνάρτησης επιλογής με κάθε γραμμή να λαμβάνεται ως είσοδος.",
        "Documentation.LongDescription": "Προσθέτει μια στήλη με το όνομα <code>newColumnName</code> στον πίνακα <code>table</code>. Οι τιμές για τη στήλη υπολογίζονται με τη χρήση της καθορισμένης συνάρτησης επιλογής <code>columnGenerator</code> με κάθε γραμμή να λαμβάνεται ως είσοδος.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Προσθέστε μια στήλη αριθμών με το όνομα \"TotalPrice\" στον πίνακα, με κάθε τιμή να είναι το άθροισμα των στηλών [Price] και [Shipping].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Προσθέτει μια νέα στήλη με αντιπροσωπευτικές τιμές που λαμβάνονται από τιμές ασαφούς ομαδοποίησης της καθορισμένης στήλης στον πίνακα.",
        "Documentation.LongDescription": "Προσθέτει μια νέα στήλη <code>newColumnName</code> σε <code>table</code> με αντιπροσωπευτικές τιμές <code>columnName</code>. Οι αντιπρόσωποι λαμβάνονται με την ασαφή συμφωνία τιμών σε <code>columnName</code>, για κάθε γραμμή.\r\n    <p>Ένα προαιρετικό σύνολο <code>options</code> μπορεί να συμπεριληφθεί για να καθοριστεί ο τρόπος σύγκρισης των στηλών κλειδιού. Οι επιλογές περιλαμβάνουν: \r\n    <ul>\r\n<li><code>Culture</code> : Επιτρέπει την ομαδοποίηση εγγραφών με βάση συγκεκριμένους κανόνες κουλτούρας. Μπορεί να είναι οποιοδήποτε έγκυρο όνομα κουλτούρας. Για παράδειγμα, η επιλογή κουλτούρας &quot;ja-JP&quot; ομαδοποιεί εγγραφές βάσει της ιαπωνικής κουλτούρας. Η προεπιλεγμένη τιμή είναι &quot;&quot;, με την οποία οι ομάδες βασίζονται στην αμετάβλητη αγγλική κουλτούρα.</li>\r\n<li><code>IgnoreCase</code> : Μια λογική τιμή (true/false) που επιτρέπει την ομαδοποίηση κλειδιών χωρίς διάκριση πεζών-κεφαλαίων. Για παράδειγμα, όταν είναι true, η λέξη &quot;Σταφύλια&quot; ομαδοποιείται με τη λέξη &quot;σταφύλια&quot;. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>IgnoreSpace</code> : Μια λογική τιμή (true/false) που επιτρέπει τον συνδυασμό τμημάτων κειμένου με σκοπό την εύρεση ομάδων. Για παράδειγμα, όταν είναι true, οι λέξεις &quot;Στα φύλια&quot; ομαδοποιούνται με τη λέξη &quot;Σταφύλια&quot;. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>SimilarityColumnName</code> : Ένα όνομα για τη στήλη που εμφανίζει την ομοιότητα μεταξύ μιας τιμής εισόδου και της αντιπροσωπευτικής τιμής για αυτή την είσοδο. Η προεπιλεγμένη τιμή είναι null, στην οποία περίπτωση δεν θα προστεθεί νέα στήλη για ομοιότητες.</li>\r\n<li><code>Threshold</code> : Ένας αριθμός μεταξύ 0,00 και 1,00 που καθορίζει τη βαθμολογία ομοιότητας στην οποία θα ομαδοποιηθούν δύο τιμές.\r\n    Για παράδειγμα, το &quot;Grapes&quot; και το &quot;Graes&quot; (λείπει το &quot;p&quot;) ομαδοποιούνται μόνο αν αυτή η επιλογή έχει οριστεί σε λιγότερο από 0,90.\r\n    Ένα όριο 1,00 επιτρέπει μόνο ακριβείς αντιστοιχίσεις.\r\n    (Σημειώστε ότι ένα ασαφές &quot;ακριβές ταίριασμα&quot; μπορεί να αγνοήσει διαφορές όπως το περίβλημα, η σειρά λέξεων και τα σημεία στίξης.)\r\n    Η προεπιλεγμένη τιμή είναι 0,80.</li>\r\n<li><code>TransformationTable</code> : Ένας πίνακας που επιτρέπει την ομαδοποίηση εγγραφών βάσει προσαρμοσμένων αντιστοιχίσεων τιμών. Θα πρέπει να περιέχει στήλες &quot;από&quot; και &quot;προς&quot;. Για παράδειγμα, Η λέξη &quot;Σταφύλια&quot; ομαδοποιείται με τη λέξη &quot;Σταφίδες&quot; αν έχει παρασχεθεί πίνακας μετασχηματισμού με τη λέξη &quot;Σταφύλια&quot; στη στήλη &quot;από&quot; και τη λέξη &quot;Σταφίδες&quot; στη στήλη &quot;προς&quot;. Λάβετε υπόψη ότι ο μετασχηματισμός θα εφαρμοστεί σε όλες τις εμφανίσεις του κειμένου στον πίνακα μετασχηματισμού. Με τον παραπάνω πίνακα μετασχηματισμού, η φράση &quot;θέλω σταφύλια&quot; θα ομαδοποιηθεί επίσης με τη φράση &quot;θέλω σταφίδες&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Εύρεση αντιπροσωπευτικών τιμών για την τοποθεσία των υπαλλήλων.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Πραγματοποιεί μια ένωση μεταξύ πινάκων στις παρεχόμενες στήλες και παράγει το αποτέλεσμα της ένωσης σε μια νέα στήλη.",
        "Documentation.LongDescription": "Ενώνει τις γραμμές του <code>table1</code> με τις γραμμές του <code>table2</code> με βάση την ισότητα των τιμών των στηλών κλειδιού που επιλέγονται από το <code>key1</code> (για το <code>table1</code>) και το <code>key2</code> (για το <code>table2</code>). Τα αποτελέσματα καταχωρούνται στη στήλη με το όνομα <code>newColumnName</code>.\r\nΑυτή η συνάρτηση συμπεριφέρεται παρόμοια με την Table.Join με JoinKind ή LeftOuter με τη διαφορά ότι τα αποτελέσματα της ένωσης παρουσιάζονται σε ένθετη και όχι σε επίπεδη μορφή.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Προσθέστε μια στήλη ένωσης στο ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) με το όνομα \"price/stock\" από τον πίνακα ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) με ένωση στο [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Προσθέτει ένα κλειδί σε έναν πίνακα.",
        "Documentation.LongDescription": "Προσθέτει ένα κλειδί στο <code>table</code>, όπου <code>columns</code> είναι η λίστα ονομάτων στηλών που ορίζουν το κλειδί και <code>isPrimary</code> καθορίζει εάν το κλειδί είναι πρωτεύον.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Προσθέστε ένα πρωτεύον κλειδί μίας στήλης σε έναν πίνακα.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Προσαρτά μια στήλη με την κατάταξη μίας ή περισσότερων άλλων στηλών.",
        "Documentation.LongDescription": "Προσαρτά μια στήλη με όνομα <code>newColumnName</code> στην <code>table</code> με την κατάταξη μίας ή περισσότερων στηλών που περιγράφονται από <code>comparisonCriteria</code>.\r\nΗ επιλογή RankKind στο <code>options</code> μπορεί να χρησιμοποιηθεί από προχωρημένους χρήστες για την επιλογή μιας πιο συγκεκριμένης μεθόδου κατάταξης.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Προσθέστε μια στήλη με το όνομα \"RevenueRank\" στον πίνακα που κατατάσσει τη στήλη \"Έσοδα\" από την υψηλότερη προς τη χαμηλότερη.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Συγκεντρώνει μια στήλη πινάκων σε πολλαπλές στήλες στον πίνακα που τις περιέχει.",
        "Documentation.LongDescription": "Συγκεντρώνει πίνακες του <code>table</code>[<code>column</code>] σε πολλαπλές στήλες που περιέχουν συγκεντρωτικές τιμές για τους πίνακες. Η <code>aggregations</code> χρησιμοποιείται για να καθορίσει τους πίνακες για συγκέντρωση, τις συναρτήσεις συγκέντρωσης που θα εφαρμοστούν στους πίνακες για να δημιουργήσουν τις τιμές τους και τα ονόματα των συγκεντρωτικών στηλών που θα δημιουργηθούν.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Συγκεντρώστε στήλες πίνακα στην <code>[t]</code> στον πίνακα <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> με το άθροισμα στην <code>[t.a]</code>, το μέγιστο και το ελάχιστο στην <code>[t.b]</code> και το πλήθος των τιμών στην <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Διατηρεί την αρχική απόκλιση και στη συνέχεια κάνει εναλλαγή μεταξύ λήψης και παράλειψης των παρακάτω γραμμών.",
        "Documentation.LongDescription": "Διατηρεί την αρχική απόκλιση και στη συνέχεια κάνει εναλλαγή μεταξύ λήψης και παράλειψης των παρακάτω γραμμών.\r\n    <ul>\r\n       <li><code>table</code>: Ο πίνακας εισόδου.</li>\r\n       <li><code>offset</code>: Ο αριθμός των γραμμών που θα διατηρηθούν πριν από την έναρξη των επαναλήψεων.</li>\r\n       <li><code>skip</code>: Ο αριθμός των γραμμών που θα καταργούνται σε κάθε επανάληψη.</li>\r\n       <li><code>take</code>: Ο αριθμός των γραμμών που διατηρούνται σε κάθε επανάληψη.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργεί έναν πίνακα από τον πίνακα ο οποίος, ξεκινώντας από την πρώτη γραμμή, παραλείπει 1 τιμή και έπειτα διατηρεί 1 τιμή.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Συνδυάζει τις καθορισμένες στήλες σε μια νέα στήλη χρησιμοποιώντας την καθορισμένη συνάρτηση συνδυασμού.",
        "Documentation.LongDescription": "Συνδυάζει τις καθορισμένες στήλες σε μια νέα στήλη χρησιμοποιώντας την καθορισμένη συνάρτηση συνδυασμού.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Συνδυάστε το επώνυμο και τα ονόματα σε μια νέα στήλη, διαχωρισμένα με κόμμα.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Συνδυάζει τις καθορισμένες στήλες σε μια νέα στήλη τιμών εγγραφής όπου κάθε εγγραφή έχει ονόματα πεδίων και τιμές που αντιστοιχούν στα ονόματα στηλών και τις τιμές των στηλών που είχαν συνδυαστεί.",
        "Documentation.LongDescription": "Συνδυάζει τις καθορισμένες στήλες <code>table</code> σε μια νέα στήλη με τιμές εγγραφών με όνομα <code>newColumnName</code> όπου κάθε εγγραφή έχει ονόματα πεδίων και τιμές που αντιστοιχούν στα ονόματα και στις τιμές των στηλών που έχουν συνδυαστεί. Αν έχει καθοριστεί μια εγγραφή για <code>options</code>, μπορούν να παρασχεθούν οι ακόλουθες επιλογές: \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: Όταν καθορίζεται ως κείμενο, υποδεικνύει ότι το όνομα της στήλης που παρασχέθηκε θα πρέπει να αντιμετωπίζεται ως το εμφανιζόμενο όνομα της εγγραφής. Δεν χρειάζεται να είναι μία από τις στήλες στην ίδια την εγγραφή. </li>\r\n     <li> <code>TypeName</code>: Όταν καθορίζεται ως κείμενο, παρέχει ένα λογικό όνομα τύπου για την εγγραφή που προκύπτει, η οποία μπορεί να χρησιμοποιηθεί κατά τη φόρτωση δεδομένων για την υποστήριξη της συμπεριφοράς από το περιβάλλον φόρτωσης.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Αναπαράγει μια στήλη με το καθορισμένο όνομα. Οι τιμές και ο τύπος αντιγράφονται από τη στήλη προέλευσης.",
        "Documentation.LongDescription": "Αναπαράξτε τη στήλη με το όνομα <code>columnName</code> στον πίνακα <code>table</code>. Οι τιμές και ο τύπος για τη στήλη <code>newColumnName</code> αντιγράφονται από τη στήλη <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Αναπαράξτε τη στήλη \"a\" σε μια στήλη με το όνομα \"copied column\" στον πίνακα <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Αναπτύσσει μια στήλη εγγραφών σε στήλες με κάθε μία από τις τιμές.",
        "Documentation.LongDescription": "Με δεδομένη την <code>column</code> των εγγραφών στη <code>table</code> εισόδου, δημιουργεί έναν πίνακα με μια στήλη για κάθε πεδίο στην εγγραφή. Προαιρετικά, μπορεί να καθοριστεί η <code>newColumnNames</code> για να εξασφαλίσει μοναδικά ονόματα για τις στήλες στο νέο πίνακα.\r\n    <ul>\r\n        <li><code>table</code>: Ο αρχικός πίνακας με τη στήλη εγγραφών για ανάπτυξη. </li>\r\n        <li><code>column</code>: Η στήλη για ανάπτυξη.</li>\r\n        <li><code>fieldNames</code>: Η λίστα με τα πεδία για ανάπτυξη σε στήλες στον πίνακα.</li>\r\n        <li><code>newColumnNames</code>: Η λίστα με τα ονόματα των στηλών που θα δοθούν στις νέες στήλες. Τα νέα ονόματα στηλών δεν είναι δυνατό να είναι διπλότυπα οποιασδήποτε στήλης στο νέο πίνακα.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Αναπτύξτε τη στήλη [a] του πίνακα <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> σε 3 στήλες \"aa\", \"bb\" και \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Αναπτύσσει μια στήλη εγγραφών ή μια στήλη πινάκων σε πολλαπλές στήλες στον πίνακα που τις περιέχει.",
        "Documentation.LongDescription": "Αναπτύσσει πίνακες του <code>table</code>[<code>column</code>] σε πολλαπλές γραμμές και στήλες. Η <code>columnNames</code> χρησιμοποιείται για την επιλογή των στηλών για ανάπτυξη από τον εσωτερικό πίνακα. Καθορίστε την <code>newColumnNames</code> για να αποφύγετε διενέξεις μεταξύ υπαρχουσών στηλών και νέων στηλών.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Αναπτύξτε στήλες πίνακα στη στήλη <code>[a]</code> του πίνακα <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> σε 3 στήλες <code>[t.a]</code>, <code>[t.b]</code> και <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Ομαδοποιεί τις γραμμές στον πίνακα με βάση την ασαφή συμφωνία κλειδιών.",
        "Documentation.LongDescription": "Ομαδοποιεί τις γραμμές <code>table</code> με την ασαφή συμφωνία τιμών στην καθοριζόμενη στήλη, <code>key</code>, για κάθε γραμμή.\r\n    Για κάθε ομάδα, κατασκευάζεται μια εγγραφή που περιέχει τις στήλες κλειδιών (και τις τιμές τους) μαζί με τυχόν συγκεντρωτικές στήλες που έχουν καθοριστεί από <code>aggregatedColumns</code>.\r\n    Αυτή η συνάρτηση δεν μπορεί να εγγυηθεί την επιστροφή μιας σταθερής σειράς γραμμών.\r\n    <p>Ένα προαιρετικό σύνολο <code>options</code> μπορεί να συμπεριληφθεί για να καθοριστεί ο τρόπος σύγκρισης των στηλών κλειδιού. Οι επιλογές περιλαμβάνουν: \r\n    <ul>\r\n<li><code>Culture</code> : Επιτρέπει την ομαδοποίηση εγγραφών με βάση συγκεκριμένους κανόνες κουλτούρας. Μπορεί να είναι οποιοδήποτε έγκυρο όνομα κουλτούρας. Για παράδειγμα, η επιλογή κουλτούρας &quot;ja-JP&quot; ομαδοποιεί εγγραφές βάσει της ιαπωνικής κουλτούρας. Η προεπιλεγμένη τιμή είναι &quot;&quot;, με την οποία οι ομάδες βασίζονται στην αμετάβλητη αγγλική κουλτούρα.</li>\r\n<li><code>IgnoreCase</code> : Μια λογική τιμή (true/false) που επιτρέπει την ομαδοποίηση κλειδιών χωρίς διάκριση πεζών-κεφαλαίων. Για παράδειγμα, όταν είναι true, η λέξη &quot;Σταφύλια&quot; ομαδοποιείται με τη λέξη &quot;σταφύλια&quot;. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>IgnoreSpace</code> : Μια λογική τιμή (true/false) που επιτρέπει τον συνδυασμό τμημάτων κειμένου με σκοπό την εύρεση ομάδων. Για παράδειγμα, όταν είναι true, οι λέξεις &quot;Στα φύλια&quot; ομαδοποιούνται με τη λέξη &quot;Σταφύλια&quot;. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>SimilarityColumnName</code> : Ένα όνομα για τη στήλη που εμφανίζει την ομοιότητα μεταξύ μιας τιμής εισόδου και της αντιπροσωπευτικής τιμής για αυτή την είσοδο. Η προεπιλεγμένη τιμή είναι null, στην οποία περίπτωση δεν θα προστεθεί νέα στήλη για ομοιότητες.</li>\r\n<li><code>Threshold</code> : Ένας αριθμός μεταξύ 0,00 και 1,00 που καθορίζει τη βαθμολογία ομοιότητας στην οποία θα ομαδοποιηθούν δύο τιμές.\r\n    Για παράδειγμα, το &quot;Grapes&quot; και το &quot;Graes&quot; (λείπει το &quot;p&quot;) ομαδοποιούνται μόνο αν αυτή η επιλογή έχει οριστεί σε λιγότερο από 0,90.\r\n    Ένα όριο 1,00 επιτρέπει μόνο ακριβείς αντιστοιχίσεις.\r\n    (Σημειώστε ότι ένα ασαφές &quot;ακριβές ταίριασμα&quot; μπορεί να αγνοήσει διαφορές όπως το περίβλημα, η σειρά λέξεων και τα σημεία στίξης.)\r\n    Η προεπιλεγμένη τιμή είναι 0,80.</li>\r\n<li><code>TransformationTable</code> : Ένας πίνακας που επιτρέπει την ομαδοποίηση εγγραφών βάσει προσαρμοσμένων αντιστοιχίσεων τιμών. Θα πρέπει να περιέχει στήλες &quot;από&quot; και &quot;προς&quot;. Για παράδειγμα, Η λέξη &quot;Σταφύλια&quot; ομαδοποιείται με τη λέξη &quot;Σταφίδες&quot; αν έχει παρασχεθεί πίνακας μετασχηματισμού με τη λέξη &quot;Σταφύλια&quot; στη στήλη &quot;από&quot; και τη λέξη &quot;Σταφίδες&quot; στη στήλη &quot;προς&quot;. Λάβετε υπόψη ότι ο μετασχηματισμός θα εφαρμοστεί σε όλες τις εμφανίσεις του κειμένου στον πίνακα μετασχηματισμού. Με τον παραπάνω πίνακα μετασχηματισμού, η φράση &quot;θέλω σταφύλια&quot; θα ομαδοποιηθεί επίσης με τη φράση &quot;θέλω σταφίδες&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ομαδοποιήστε τον πίνακα, προσθέτοντας μια συγκεντρωτική στήλη [Count] η οποία περιέχει τον αριθμό των υπαλλήλων σε κάθε τοποθεσία (\"each Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Ενώνει τις γραμμές των δύο πινάκων ασαφούς συμφωνίας με βάση τα δεδομένα κλειδιά.",
        "Documentation.LongDescription": "<p>Συνδέει τις γραμμές του <code>table1</code> με τις γραμμές του <code>table2</code> με βάση τη σύγκριση ασαφούς συμφωνίας των τιμών των στηλών κλειδιού που επιλέγονται κατά <code>key1</code> (για το <code>table1</code>) και κατά <code>key2</code> (για το <code>table2</code>).</p>\r\n<p>Η ασαφής συμφωνία είναι μια σύγκριση με βάση τη ομοιότητα του κειμένου αντί για την ισότητα του κειμένου.</p>\r\n<p>Από προεπιλογή, εκτελείται εσωτερικός σύνδεσμος, ωστόσο μπορεί να συμπεριληφθεί μια προαιρετική επιλογή <code>joinKind</code>, για να καθορίσει τον τύπο του συνδέσμου. Στις επιλογές περιλαμβάνονται οι εξής:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Μπορεί να συμπεριληφθεί ένα προαιρετικό σύνολο <code>joinOptions</code> το οποίο θα καθορίζει τον τρόπο σύγκρισης των στηλών κλειδιού. Στις επιλογές περιλαμβάνονται:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Ένας αριθμός μεταξύ 1 και 8 ο οποίος καθορίζει τον αριθμό των παράλληλων νημάτων που θα χρησιμοποιηθούν για ασαφή συμφωνία. Η προεπιλεγμένη τιμή είναι 1.</li>\r\n<li><code>Culture</code> : Επιτρέπει την αντιστοίχιση εγγραφών με βάση συγκεκριμένους κανόνες κουλτούρας. Μπορεί να είναι οποιοδήποτε έγκυρο όνομα κουλτούρας. Για παράδειγμα, η επιλογή κουλτούρας του &quot;ja-JP&quot; αντιστοιχίζει τις εγγραφές με βάση την ιαπωνική κουλτούρα. Η προεπιλεγμένη τιμή είναι &quot;&quot;, με την οποία γίνεται αντιστοίχιση με βάση την αμετάβλητη αγγλική κουλτούρα.</li>\r\n<li><code>IgnoreCase</code> : Μια λογική τιμή (true/false) που επιτρέπει την αντιστοίχιση κλειδιών χωρίς διάκριση πεζών-κεφαλαίων. Για παράδειγμα, όταν είναι true, η λέξη &quot;Σταφύλια&quot; αντιστοιχίζεται με τη λέξη &quot;σταφύλια&quot;. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>IgnoreSpace</code> : Μια λογική τιμή (true/false) που επιτρέπει τον συνδυασμό τμημάτων κειμένου με σκοπό την εύρεση αντιστοιχιών. Για παράδειγμα, όταν είναι true, οι λέξεις &quot;Στα φύλια&quot; αντιστοιχίζονται με τη λέξη &quot;Σταφύλια&quot;. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>NumberOfMatches</code> : Ένας ακέραιος αριθμός που καθορίζει τον μέγιστο αριθμό αντιστοιχισμένων γραμμών που μπορούν να επιστραφούν για κάθε γραμμή εισόδου. Για παράδειγμα, η τιμή 1 θα επιστρέψει έως μία αντιστοιχισμένη γραμμή για κάθε γραμμή εισόδου. Αν δεν παρασχεθεί αυτή η επιλογή, επιστρέφονται όλες οι αντιστοιχισμένες γραμμές.</li>\r\n<li><code>SimilarityColumnName</code> : Ένα όνομα για τη στήλη που εμφανίζει την ομοιότητα μεταξύ μιας τιμής εισόδου και της αντιπροσωπευτικής τιμής για αυτή την είσοδο. Η προεπιλεγμένη τιμή είναι null, στην οποία περίπτωση δεν θα προστεθεί νέα στήλη για ομοιότητες.</li>\r\n<li><code>Threshold</code> : Ένας αριθμός μεταξύ 0,00 και 1,00 που καθορίζει τη βαθμολογία ομοιότητας με την οποία θα αντιστοιχιστούν δύο τιμές.\r\n    Για παράδειγμα, το &quot;Grapes&quot; και το &quot;Graes&quot; (λείπει το &quot;p&quot;) συμφωνούν μόνο αν αυτή η επιλογή έχει οριστεί σε λιγότερο από 0,90.\r\n    Ένα όριο 1,00 επιτρέπει μόνο ακριβείς αντιστοιχίσεις.\r\n (Σημειώστε ότι ένα ασαφές &quot;ακριβές ταίριασμα&quot; μπορεί να αγνοήσει διαφορές όπως το περίβλημα, η σειρά λέξεων και τα σημεία στίξης.)\r\n    Η προεπιλεγμένη τιμή είναι 0,80.</li>\r\n<li><code>TransformationTable</code> : Ένας πίνακας που επιτρέπει την αντιστοίχιση εγγραφών βάσει προσαρμοσμένων αντιστοιχίσεων τιμών. Θα πρέπει να περιέχει στήλες &quot;από&quot; και &quot;προς&quot;. Για παράδειγμα, Η λέξη &quot;Σταφύλια&quot; αντιστοιχίζεται με τη λέξη &quot;Σταφίδες&quot; αν έχει παρασχεθεί πίνακας μετασχηματισμού με τη λέξη &quot;Σταφύλια&quot; στη στήλη &quot;από&quot; και τη λέξη &quot;Σταφίδες&quot; στη στήλη &quot;προς&quot;. Λάβετε υπόψη ότι ο μετασχηματισμός θα εφαρμοστεί σε όλες τις εμφανίσεις του κειμένου στον πίνακα μετασχηματισμού. Με τον παραπάνω πίνακα μετασχηματισμού, η φράση &quot;θέλω σταφύλια&quot; θα αντιστοιχιστεί επίσης με τη φράση &quot;θέλω σταφίδες&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Αριστερός εσωτερικός ασαφής σύνδεσμος δύο πινάκων με βάση το [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Πραγματοποιεί μια ασαφή σύνδεση μεταξύ πινάκων στις παρεχόμενες στήλες και παράγει το αποτέλεσμα της σύνδεσης σε μια νέα στήλη.",
        "Documentation.LongDescription": "<p>Συνδέει τις γραμμές του <code>table1</code> με τις γραμμές του <code>table2</code> με βάση ασαφή συμφωνία των τιμών των στηλών κλειδιού που επιλέγονται κατά <code>key1</code> (για <code>table1</code>) και κατά <code>key2</code> (για <code>table2</code>). Τα αποτελέσματα επιστρέφονται σε μια νέα στήλη που ονομάζεται <code>newColumnName</code>.</p>\r\n<p>Η ασαφής συμφωνία είναι μια σύγκριση με βάση τη ομοιότητα του κειμένου αντί για την ισότητα του κειμένου.</p>\r\n<p>Η προαιρετική επιλογή <code>joinKind</code> καθορίζει το είδος του συνδέσμου που θα πραγματοποιηθεί. Από προεπιλογή, ένας αριστερός εξωτερικός σύνδεσμος πραγματοποιείται, αν δεν καθορίζεται <code>joinKind</code>. Στις επιλογές περιλαμβάνονται:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Μπορεί να συμπεριληφθεί ένα προαιρετικό σύνολο <code>joinOptions</code> για τον καθορισμό του τρόπου σύγκρισης των στηλών κλειδιού. Στις επιλογές περιλαμβάνονται:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Ένας αριθμός μεταξύ 1 και 8 ο οποίος καθορίζει τον αριθμό των παράλληλων νημάτων που θα χρησιμοποιηθούν για ασαφή συμφωνία. Η προεπιλεγμένη τιμή είναι 1.</li>\r\n<li><code>Culture</code> : Επιτρέπει την αντιστοίχιση εγγραφών με βάση συγκεκριμένους κανόνες κουλτούρας. Μπορεί να είναι οποιοδήποτε έγκυρο όνομα κουλτούρας. Για παράδειγμα, η επιλογή κουλτούρας του &quot;ja-JP&quot; αντιστοιχίζει τις εγγραφές με βάση την ιαπωνική κουλτούρα. Η προεπιλεγμένη τιμή είναι &quot;&quot;, με την οποία γίνεται αντιστοίχιση με βάση την αμετάβλητη αγγλική κουλτούρα.</li>\r\n<li><code>IgnoreCase</code> : Μια λογική τιμή (true/false) που επιτρέπει την αντιστοίχιση κλειδιών χωρίς διάκριση πεζών-κεφαλαίων. Για παράδειγμα, όταν είναι true, η λέξη &quot;Σταφύλια&quot; αντιστοιχίζεται με τη λέξη &quot;σταφύλια&quot;. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>IgnoreSpace</code> : Μια λογική τιμή (true/false) που επιτρέπει τον συνδυασμό τμημάτων κειμένου με σκοπό την εύρεση αντιστοιχιών. Για παράδειγμα, όταν είναι true, οι λέξεις &quot;Στα φύλια&quot; αντιστοιχίζονται με τη λέξη &quot;Σταφύλια&quot;. Η προεπιλεγμένη τιμή είναι true.</li>\r\n<li><code>NumberOfMatches</code> : Ένας ακέραιος αριθμός που καθορίζει τον μέγιστο αριθμό αντιστοιχισμένων γραμμών που μπορούν να επιστραφούν για κάθε γραμμή εισόδου. Για παράδειγμα, η τιμή 1 θα επιστρέψει έως μία αντιστοιχισμένη γραμμή για κάθε γραμμή εισόδου. Αν δεν παρασχεθεί αυτή η επιλογή, επιστρέφονται όλες οι αντιστοιχισμένες γραμμές.</li>\r\n<li><code>SimilarityColumnName</code> : Ένα όνομα για τη στήλη που εμφανίζει την ομοιότητα μεταξύ μιας τιμής εισόδου και της αντιπροσωπευτικής τιμής για αυτή την είσοδο. Η προεπιλεγμένη τιμή είναι null, στην οποία περίπτωση δεν θα προστεθεί νέα στήλη για ομοιότητες.</li>\r\n<li><code>Threshold</code> : Ένας αριθμός μεταξύ 0,00 και 1,00 που καθορίζει τη βαθμολογία ομοιότητας με την οποία θα αντιστοιχιστούν δύο τιμές.\r\n    Για παράδειγμα, το &quot;Grapes&quot; και το &quot;Graes&quot; (λείπει το &quot;p&quot;) συμφωνούν μόνο αν αυτή η επιλογή έχει οριστεί σε λιγότερο από 0,90.\r\n    Ένα όριο 1,00 επιτρέπει μόνο ακριβείς αντιστοιχίσεις.\r\n (Σημειώστε ότι ένα ασαφές &quot;ακριβές ταίριασμα&quot; μπορεί να αγνοήσει διαφορές όπως το περίβλημα, η σειρά λέξεων και τα σημεία στίξης.)\r\n    Η προεπιλεγμένη τιμή είναι 0,80.</li>\r\n<li><code>TransformationTable</code> : Ένας πίνακας που επιτρέπει την αντιστοίχιση εγγραφών βάσει προσαρμοσμένων αντιστοιχίσεων τιμών. Θα πρέπει να περιέχει στήλες &quot;από&quot; και &quot;προς&quot;. Για παράδειγμα, Η λέξη &quot;Σταφύλια&quot; αντιστοιχίζεται με τη λέξη &quot;Σταφίδες&quot; αν έχει παρασχεθεί πίνακας μετασχηματισμού με τη λέξη &quot;Σταφύλια&quot; στη στήλη &quot;από&quot; και τη λέξη &quot;Σταφίδες&quot; στη στήλη &quot;προς&quot;. Λάβετε υπόψη ότι ο μετασχηματισμός θα εφαρμοστεί σε όλες τις εμφανίσεις του κειμένου στον πίνακα μετασχηματισμού. Με τον παραπάνω πίνακα μετασχηματισμού, η φράση &quot;θέλω σταφύλια&quot; θα αντιστοιχιστεί επίσης με τη φράση &quot;θέλω σταφίδες&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Αριστερός εσωτερικός ασαφής σύνδεσμος δύο πινάκων με βάση το [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Ομαδοποιεί τις γραμμές του πίνακα που έχουν το ίδιο κλειδί.",
        "Documentation.LongDescription": "Ομαδοποιεί τις γραμμές του <code>table</code> με βάση τις στήλες κλειδιού που ορίζονται από το <code>key</code>. Το <code>key</code> μπορεί να είναι ένα μεμονωμένο όνομα στήλης ή μια λίστα με ονόματα στηλών.\r\n Για κάθε ομάδα, δημιουργείται ένα αρχείο καταγραφής που περιέχει τις στήλες κλειδιού (και τις τιμές τους), καθώς και τυχόν συγκεντρωτικές στήλες που καθορίζονται από το <code>aggregatedColumns</code>.\r\n Προαιρετικά, τα <code>groupKind</code> και <code>comparer</code> μπορούν επίσης να προσδιοριστούν.<br>\r\n    <br>\r\n    Εάν τα δεδομένα έχουν ήδη ταξινομηθεί με βάση τις στήλες κλειδιού, τότε μπορεί να παρασχεθεί ένα <code>groupKind</code> του GroupKind.Local. Αυτό μπορεί να βελτιώσει τις επιδόσεις της ομαδοποίησης σε ορισμένες περιπτώσεις,\r\n αφού όλες οι γραμμές με δεδομένο σύνολο βασικών τιμών θεωρούνται συνεχόμενες.<br>\r\n    <br>\r\n    Όταν περνά ένα <code>comparer</code>, λάβετε υπόψη ότι εάν θεωρήσει τα διαφορετικά κλειδιά ως ίσα, μπορεί να τοποθετηθεί μια γραμμή σε μια ομάδα της οποίας τα κλειδιά διαφέρουν από τα δικά της.<br>\r\n    <br>\r\n    Αυτή η συνάρτηση δεν εγγυάται την ταξινόμηση των γραμμών που επιστρέφει.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ομαδοποιεί τον πίνακα προσθέτοντας μια συγκεντρωτική στήλη [total] η οποία περιέχει το άθροισμα των τιμών (\"κάθε List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Εισαγάγει μια λίστα γραμμών στον πίνακα στην καθορισμένη θέση.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα με τη λίστα των σειρών, <code>rows</code>, που έχει εισαχθεί στο <code>table</code> στη δεδομένη θέση, <code>offset</code>. Κάθε στήλη στη γραμμή προς εισαγωγή πρέπει να ταιριάζει με τους τύπους στηλών του πίνακα.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Εισάγει τη γραμμή στον πίνακα, στη θέση 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Εισάγει δύο γραμμές στον πίνακα στη θέση 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Ενώνει τις γραμμές των δύο πινάκων που συμφωνούν από με βάση τα δεδομένα κλειδιά.",
        "Documentation.LongDescription": "<p>Συνενώνει τις σειρές του <code>table1</code> με τις σειρές του <code>table2</code> με βάση την ισότητα των τιμών των βασικών στηλών που επιλέγονται από <code>key1</code> (για <code>table1</code>) και <code>key2</code> (για <code>table2</code>).</p>\r\n<p>Από προεπιλογή, εκτελείται μια εσωτερική ένωση, ωστόσο μπορεί να συμπεριληφθεί ένα προαιρετικό <code>joinKind</code> για να καθοριστεί ο τύπος σύνδεσης. Οι επιλογές περιλαμβάνουν:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Μπορεί να συμπεριληφθεί ένα προαιρετικό σύνολο <code>keyEqualityComparers</code> για να καθορίσετε τον τρόπο σύγκρισης των βασικών στηλών. Αυτή η παράμετρος προορίζεται προς το παρόν μόνο για εσωτερική χρήση.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ενώστε δύο πίνακες χρησιμοποιώντας μια στήλη με ένα κλειδί.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Συνδέστε δύο πίνακες που έχουν ονόματα στηλών σε διένεξη, χρησιμοποιώντας πολλές στήλες κλειδιών.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Επιστρέφει τις μεγαλύτερες γραμμές χρησιμοποιώντας τα δεδομένα κριτήρια.",
        "Documentation.LongDescription": "Επιστρέφει τις μεγαλύτερες γραμμές του <code>table</code> χρησιμοποιώντας τη δεδομένη <code>comparisonCriteria</code>.\r\n    Μετά την ταξινόμηση των γραμμών, πρέπει να καθοριστεί η παράμετρος <code>countOrCondition</code> για περαιτέρω φιλτράρισμα του αποτελέσματος. Έχετε υπόψη ότι ο αλγόριθμος ταξινόμησης δεν μπορεί να εγγυηθεί ένα σταθερό ταξινομημένο αποτέλεσμα. Η παράμετρος <code>countOrCondition</code> μπορεί να λάβει πολλές μορφές:\r\n    <ul>\r\n        <li> Εάν καθοριστεί αριθμός, επιστρέφεται μια λίστα με έως <code>countOrCondition</code> στοιχεία σε αύξουσα σειρά. </li>\r\n        <li> Εάν καθοριστεί συνθήκη, επιστρέφεται μια λίστα με τα στοιχεία που ικανοποιούν αρχικά τη συνθήκη. Από τη στιγμή που ένα στοιχείο δεν ικανοποιεί τη συνθήκη, δεν εξετάζονται περαιτέρω στοιχεία. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τη γραμμή με τη μεγαλύτερη τιμή στη στήλη [a] με τη συνθήκη [a] > 0, στον πίνακα. Οι γραμμές ταξινομούνται πριν από την εφαρμογή του φίλτρου.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Βρίσκει τη γραμμή με τη μεγαλύτερη τιμή στη στήλη [a] με τη συνθήκη [b] > 0, στον πίνακα. Οι γραμμές ταξινομούνται πριν από την εφαρμογή του φίλτρου.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Επιστρέφει τις μικρότερες γραμμές χρησιμοποιώντας τα δεδομένα κριτήρια.",
        "Documentation.LongDescription": "Επιστρέφει τις μικρότερες γραμμές του <code>table</code> χρησιμοποιώντας τη δεδομένη <code>comparisonCriteria</code>. Μετά την ταξινόμηση των γραμμών, πρέπει να καθοριστεί η παράμετρος <code>countOrCondition</code> για περαιτέρω φιλτράρισμα του αποτελέσματος. Έχετε υπόψη ότι ο αλγόριθμος ταξινόμησης δεν μπορεί να εγγυηθεί ένα σταθερό ταξινομημένο αποτέλεσμα. Η παράμετρος <code>countOrCondition</code> μπορεί να λάβει πολλές μορφές:\r\n    <ul>\r\n        <li> Εάν καθοριστεί αριθμός, επιστρέφεται μια λίστα με έως <code>countOrCondition</code> στοιχεία σε αύξουσα σειρά. </li>\r\n        <li> Εάν καθοριστεί συνθήκη, επιστρέφεται μια λίστα με τα στοιχεία που ικανοποιούν αρχικά τη συνθήκη. Από τη στιγμή που ένα στοιχείο δεν ικανοποιεί τη συνθήκη, δεν εξετάζονται περαιτέρω στοιχεία. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τη γραμμή με τη μικρότερη τιμή στη στήλη [a] με τη συνθήκη [a] < 3, στον πίνακα. Οι γραμμές ταξινομούνται πριν από την εφαρμογή του φίλτρου.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Βρίσκει τη γραμμή με τη μικρότερη τιμή στη στήλη [a] με τη συνθήκη [b] < 0, στον πίνακα. Οι γραμμές ταξινομούνται πριν από την εφαρμογή του φίλτρου.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Πραγματοποιεί μια ένωση μεταξύ πινάκων στις παρεχόμενες στήλες και παράγει το αποτέλεσμα της ένωσης σε μια νέα στήλη.",
        "Documentation.LongDescription": "<p>Συνδέει τις γραμμές του <code>table1</code> με τις γραμμές του <code>table2</code> με βάση την ισότητα των τιμών των στηλών κλειδιού που επιλέγονται από το <code>key1</code> (για το <code>table1</code>) και το <code>key2</code> (για το <code>table2</code>). Τα αποτελέσματα καταχωρούνται στη στήλη με το όνομα <code>newColumnName</code>.</p>\r\n<p>Η προαιρετική τιμή <code>joinKind</code> καθορίζει το είδος συνδέσμου που πρέπει να εκτελεστεί. Από προεπιλογή, αν δεν καθοριστεί <code>joinKind</code>, εκτελείται αριστερός εξωτερικός σύνδεσμος.</p>\r\n<p>Μπορεί να συμπεριληφθεί ένα προαιρετικό σύνολο <code>keyEqualityComparers</code> το οποίο θα καθορίζει τον τρόπο σύγκρισης των στηλών κλειδιού. Αυτή η δυνατότητα προορίζεται προς το παρόν μόνο για εσωτερική χρήση.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ενώστε δύο πίνακες χρησιμοποιώντας μια στήλη με ένα κλειδί.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Με δεδομένο ένα ζεύγος στηλών που αντιπροσωπεύει ζεύγη χαρακτηριστικού-τιμής, περιστρέφει τα δεδομένα της στήλης χαρακτηριστικών σε επικεφαλίδες στηλών.",
        "Documentation.LongDescription": "Με δεδομένο ένα ζεύγος στηλών που αντιπροσωπεύει ζεύγη χαρακτηριστικού-τιμής, περιστρέφει τα δεδομένα της στήλης χαρακτηριστικών σε επικεφαλίδες στηλών.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε τις τιμές \"a\", \"b\" και \"c\" στη στήλη χαρακτηριστικών του πίνακα <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> και συγκεντρώστε τις στη δική τους στήλη.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Λάβετε τις τιμές \"a\", \"b\" και \"c\" στη στήλη χαρακτηριστικών του πίνακα <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> και συγκεντρώστε τις στη δική τους στήλη.  Το χαρακτηριστικό \"c\" για το κλειδί \"x\" έχει πολλές τιμές συσχετισμένες με αυτό, επομένως χρησιμοποιήστε τη συνάρτηση List.Max για να επιλύσετε τη διένεξη.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Αντικαθιστά την καθορισμένη περιοχή γραμμών με τις παρεχόμενες γραμμές.",
        "Documentation.LongDescription": "Αντικαθιστά έναν καθορισμένο αριθμό γραμμών, <code>count</code>, στην είσοδο <code>table</code> με το καθορισμένο <code>rows</code>, αρχίζοντας μετά το <code>offset</code>. Η παράμετρος <code>rows</code> είναι μια λίστα εγγραφών.\r\n    <ul>\r\n       <li><code>table</code>: Ο πίνακας όπου γίνεται η αντικατάσταση.</li>\r\n       <li><code>offset</code>: Ο αριθμός των γραμμών που θα παραλειφθούν πριν από την αντικατάσταση.</li>\r\n       <li><code>count</code>: Ο αριθμός των γραμμών για αντικατάσταση.</li>\r\n       <li><code>rows</code>: Η λίστα των εγγραφών γραμμών για εισαγωγή στον <code>table</code> στη θέση που καθορίζεται από το <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ξεκινώντας από τη θέση 1, αντικαθιστά 3 γραμμές.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Αντικαθιστά μία τιμή στις καθορισμένες στήλες με μία άλλη.",
        "Documentation.LongDescription": "Αντικαθιστά την <code>oldValue</code> με <code>newValue</code> στις καθορισμένες στήλες του <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε το κείμενο \"goodbye\" με \"world\" στη στήλη B, αντιστοιχίζοντας μόνο ολόκληρη την τιμή.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Αντικαταστήστε το κείμενο \"ur\" με \"or\" στη στήλη B, αντιστοιχίζοντας οποιοδήποτε τμήμα της τιμής.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Ανωνυμοποίηση των ονομάτων των υπαλλήλων των Η.Π.Α.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Ανωνυμοποίηση όλων των στηλών των υπαλλήλων των Η.Π.Α.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Διαιρεί τις καθορισμένες στήλες σε ένα σύνολο πρόσθετων στηλών χρησιμοποιώντας την καθορισμένη συνάρτηση διαίρεσης στηλών.",
        "Documentation.LongDescription": "Διαιρεί τις καθορισμένες στήλες σε ένα σύνολο πρόσθετων στηλών χρησιμοποιώντας την καθορισμένη συνάρτηση διαίρεσης στηλών.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Διαιρεί τη στήλη [Name] στη θέση του \"i\" σε δύο στήλες",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Μεταφράζει ένα σύνολο στηλών σε πίνακα με ζεύγη χαρακτηριστικού-τιμής.",
        "Documentation.LongDescription": "Μεταφράζει ένα σύνολο στηλών σε πίνακα με ζεύγη χαρακτηριστικού-τιμής, συνδυασμένα με τις υπόλοιπες τιμές κάθε γραμμής.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε τις στήλες \"a\", \"b\" και \"c\" του πίνακα <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> και αναλύστε τις σε ζεύγη χαρακτηριστικού-τιμής.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Μεταφράζει όλες τις στήλες που δεν είναι καθορισμένα σύνολα σε ζεύγη χαρακτηριστικού-τιμής.",
        "Documentation.LongDescription": "Μεταφράζει όλες τις στήλες που δεν είναι καθορισμένα σύνολα σε ζεύγη χαρακτηριστικού-τιμής, σε συνδυασμό με τις υπόλοιπες στήλες σε κάθε γραμμή.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Μεταφράζει όλες τις στήλες που δεν είναι καθορισμένα σύνολα σε ζεύγη χαρακτηριστικού-τιμής, σε συνδυασμό με τις υπόλοιπες στήλες σε κάθε γραμμή.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Προσωπική ανάλυση Microsoft Teams",
        "Documentation.LongDescription": "<p>Η σύνδεση Ανάλυσης Teams σάς δίνει τη δυνατότητα να λαμβάνετε δεδομενικές πληροφορίες σχετικά με την από μέρους σας χρήση του Teams. Τα δεδομένα είναι διαθέσιμα τόσο για την προσωπική σας δραστηριότητα στο Teams όσο και για τη δραστηριότητα σε Teams στα οποία είστε μέλος.</p>\r\n<p>Τα δεδομένα είναι διαθέσιμα για τις προηγούμενες 90 ημέρες. </p>\r\n<p> Για λεπτομέρειες σχετικά με τους τύπους διαθέσιμων δεδομένων, ανατρέξτε στην ακόλουθη τεκμηρίωση βοήθειας: </p>\r\n<ul>\r\n<li><b>Χρήση Teams:</b> https://docs.microsoft.com/el-gr/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Δραστηριότητα χρήστη Teams:</b> https://docs.microsoft.com/el-gr/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε ονόματα οργανισμού και έργου.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Υπηρεσίες Azure DevOps",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα τροφοδοσιών OData που παρέχονται από το Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Επιστρέφει μια δυαδική μορφή που διαβάζει μια δυαδική τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια δυαδική μορφή που διαβάζει μια δυαδική τιμή. Εάν οριστεί <code>length</code>, η δυαδική τιμή θα περιέχει τόσα byte. Εάν δεν έχει καθοριστεί <code>length</code>, η δυαδική τιμή θα περιέχει τα υπόλοιπα byte. Το <code>length</code> μπορεί να καθοριστεί είτε ως αριθμός, είτε ως δυαδική μορφή του μήκους που προηγείται των δυαδικών δεδομένων.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Επιστρέφει μια λογική τιμή βάσει του ελέγχου ισότητας που γίνεται στις δύο τιμές που έχουν καταχωρηθεί.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>λογική</code> με βάση τον έλεγχο ισότητας στις δύο δεδομένες τιμές <code>x</code> και <code>y</code>, χρησιμοποιώντας το παρεχόμενο  <code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> είναι μια <code>Σύγκριση</code> που χρησιμοποιείται για τον έλεγχο της σύγκρισης..\r\n        Η Σύγκριση είναι μια συνάρτηση που δέχεται δύο ορίσματα και επιστρέφει -1, 0 ή 1 με βάση το αν η πρώτη τιμή είναι μικρότερη, ίση ή μεγαλύτερη από τη δεύτερη.\r\n        Οι Συγκρίσεις μπορούν να χρησιμοποιηθούν για την παροχή συγκρίσεων χωρίς διάκριση πεζών-κεφαλαίων ή συγκρίσεων πολιτισμού και τοπικών δεδομένων.\r\n      </div>\r\n      <div>\r\n        Οι παρακάτω ενσωματωμένες συγκρίσεις είναι διαθέσιμοι στη γλώσσα τύπου:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Χρησιμοποιείται για την εκτέλεση ακριβούς τακτικής σύγκρισης</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Χρησιμοποιείται για την εκτέλεση μιας ακριβούς τακτικής σύγκρισης χωρίς διάκριση πεζών-κεφαλαίων</li>\r\n        <li> <code>Comparer.FromCulture</code>: Χρησιμοποιείται για την εκτέλεση μιας σύγκρισης με επίγνωση του πολιτισμού</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Συγκρίνετε το \"1\" και το \"A\" χρησιμοποιώντας τις τοπικές ρυθμίσεις \"en-US\" για να προσδιορίσετε αν οι τιμές είναι ίσες.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Επιστρέφει την τρέχουσα ημερομηνία και ώρα στην τοπική ζώνη ώρας. Αυτή η τιμή είναι σταθερή και δεν θα αλλάξει με τις διαδοχικές κλήσεις.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>datetime</code> που έχει οριστεί στην τρέχουσα ημερομηνία και ώρα του συστήματος. Αυτή η τιμή είναι σταθερή και δεν θα αλλάξει με τις διαδοχικές κλήσεις, σε αντίθεση με την DateTime.LocalNow, η οποία ενδέχεται να επιστρέφει διαφορετικές τιμές κατά τη διάρκεια εκτέλεσης μιας παράστασης.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Επιστρέφει την τρέχουσα ημερομηνία και ώρα στην τοπική ζώνη ώρας.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>datetime</code> που έχει οριστεί στην τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Επιστρέφει την τρέχουσα ημερομηνία και ώρα στην τοπική ζώνη ώρας. Αυτή η τιμή είναι σταθερή και δεν θα αλλάξει με τις διαδοχικές κλήσεις.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>datetime</code> που έχει οριστεί στην τρέχουσα ημερομηνία και ώρα του συστήματος. Η τιμή που επιστρέφεται περιέχει πληροφορίες ζώνης ώρας που αντιπροσωπεύουν την τοπική ζώνη ώρας. Αυτή η τιμή είναι σταθερή και δεν θα αλλάξει με τις διαδοχικές κλήσεις, σε αντίθεση με την DateTimeZone.LocalNow, η οποία ενδέχεται να επιστρέφει διαφορετικές τιμές κατά τη διάρκεια εκτέλεσης μιας παράστασης.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Επιστρέφει την τρέχουσα ημερομηνία και ώρα σε μορφή UTC (η ζώνη ώρας GMT). Αυτή η τιμή είναι σταθερή και δεν θα αλλάξει με τις διαδοχικές κλήσεις.",
        "Documentation.LongDescription": "Επιστρέφει την τρέχουσα ημερομηνία και ώρα σε μορφή UTC (η ζώνη ώρας GMT). Αυτή η τιμή είναι σταθερή και δεν θα αλλάξει με τις διαδοχικές κλήσεις.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Επιστρέφει την τρέχουσα ημερομηνία και ώρα στην τοπική ζώνη ώρας.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>datetimezone</code> που έχει οριστεί στην τρέχουσα ημερομηνία και ώρα του συστήματος. \r\n    Η τιμή που επιστρέφεται περιέχει πληροφορίες ζώνης ώρας που αντιπροσωπεύουν την τοπική ζώνη ώρας.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Επιστρέφει την τρέχουσα ημερομηνία και ώρα σε μορφή UTC (η ζώνη ώρας GMT).",
        "Documentation.LongDescription": "Επιστρέφει την τρέχουσα ημερομηνία και ώρα σε μορφή UTC (η ζώνη ώρας GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τρέχουσα ημερομηνία και ώρα σε μορφή UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Επιστρέφει ένα αδιαφανές αναγνωριστικό για την τρέχουσα αξιολόγηση που εκτελείται.",
        "Documentation.LongDescription": "Επιστρέφει ένα αδιαφανές αναγνωριστικό για την τρέχουσα αξιολόγηση που εκτελείται.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Επιστρέφει ένα αδιαφανές αναγνωριστικό για να συσχετίσει τις εισερχόμενες αιτήσεις με τις εξερχόμενες.",
        "Documentation.LongDescription": "Επιστρέφει ένα αδιαφανές αναγνωριστικό για να συσχετίσει τις εισερχόμενες αιτήσεις με τις εξερχόμενες.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Εγγράφει μια καταχώρηση ανίχνευσης, αν είναι ενεργοποιημένη η ανίχνευση, και επιστρέφει την τιμή.",
        "Documentation.LongDescription": "Εγγράφει μια ανίχνευση <code>message</code>, αν είναι ενεργοποιημένη η ανίχνευση, και επιστρέφει <code>value</code>. Μια προαιρετική παράμετρος <code>delayed</code> καθορίζει αν θα καθυστερήσει η αξιολόγηση του <code>value</code> μέχρι να ανιχνευτεί το μήνυμα. Το <code>traceLevel</code> μπορεί να πάρει μία από τις παρακάτω τιμές:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Ανίχνευση του μηνύματος πριν από την κλήση την συνάρτησης Text.From και επιστροφή του αποτελέσματος.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Η προεπιλεγμένη υπηρεσία παροχής ταυτότητας για τον τρέχοντα κεντρικό υπολογιστή.",
        "Documentation.LongDescription": "Η προεπιλεγμένη υπηρεσία παροχής ταυτότητας για τον τρέχοντα κεντρικό υπολογιστή.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Συσσωρεύει μια τιμή σύνοψης από τα στοιχεία της λίστας.",
        "Documentation.LongDescription": "Συσσωρεύει μια τιμή σύνοψης από τα στοιχεία της λίστας <code>list</code>, χρησιμοποιώντας <code>accumulator</code>.\r\n    Μια προαιρετική παράμετρος φύτρου, <code>seed</code>, μπορεί να οριστεί.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Συσσωρεύει την τιμή σύνοψης από τα στοιχεία της λίστας {1, 2, 3, 4, 5} χρησιμοποιώντας ((state, current) => state + current ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Δημιουργεί μια λίστα τιμών datetimezone με βάση μια αρχική τιμή, το πλήθος και την επαυξητική τιμή διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τιμών <code>datetimezone</code> μεγέθους <code>count</code>, που αρχίζουν από το <code>start</code>. Η προσαύξηση που δίνεται, <code>step</code>, είναι μια τιμή <code>duration</code> που προστίθεται σε κάθε τιμή.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα με 10 τιμές που ξεκινούν 5 λεπτά πριν από την Πρωτοχρονιά (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) και προσαυξάνονται κατά 1 λεπτό (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Δημιουργεί μια λίστα τιμών datetime με βάση μια αρχική τιμή, το πλήθος και την επαυξητική τιμή διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τιμών <code>datetime</code> μεγέθους <code>count</code>, που αρχίζουν από το <code>start</code>. Η προσαύξηση που δίνεται, <code>step</code>, είναι μια τιμή <code>duration</code> που προστίθεται σε κάθε τιμή.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα με 10 τιμές που ξεκινούν 5 λεπτά πριν από την Πρωτοχρονιά (#datetime(2011, 12, 31, 23, 55, 0)) και προσαυξάνονται κατά 1 λεπτό (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Δημιουργεί μια λίστα τιμών date με βάση μια αρχική τιμή, το πλήθος και την επαυξητική τιμή διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τιμών <code>date</code> μεγέθους <code>count</code>, που αρχίζουν από το <code>start</code>. Η προσαύξηση που δίνεται, <code>step</code>, είναι μια τιμή <code>duration</code> που προστίθεται σε κάθε τιμή.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα 5 τιμών που ξεκινούν πριν από την Πρωτοχρονιά (#date(2011, 12, 31)) και προσαυξάνονται κατά 1 ημέρα (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Δημιουργεί μια λίστα τιμών διάρκειας με βάση μια αρχική τιμή, το πλήθος και τηv επαυξητική τιμή διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τιμών <code>count</code> <code>duration</code>, η οποία ξεκινά από το <code>start</code> και προσαυξάνεται με τη <code>duration</code> <code>step</code> που δόθηκε.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα 5 τιμών που ξεκινούν από 1 ώρα και προσαυξάνονται κατά μία ώρα.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Δημιουργεί μια λίστα τιμών.",
        "Documentation.LongDescription": "Δημιουργεί μια λίστα τιμών χρησιμοποιώντας τις παρεχόμενες συναρτήσεις. Η συνάρτηση <code>initial</code> δημιουργεί μια αρχική υποψήφια τιμή, η οποία στη συνέχεια ελέγχεται έναντι του<code>condition</code>.\r\n    Αν η υποψήφια τιμή εγκριθεί, τότε επιστρέφεται ως μέρος της λίστας που προκύπτει και η επόμενη υποψήφια τιμή δημιουργείται μεταβιβάζοντας την πρόσφατα εγκεκριμένη τιμή στο <code>next</code>.\r\n    Μόλις μια υποψήφια τιμή δεν ταιριάζει με <code>condition</code>, η διαδικασία δημιουργίας λίστας σταματά.\r\n    Μια προαιρετική παράμετρος, <code>selector</code>, μπορεί επίσης να παρέχεται για το μετασχηματισμό των στοιχείων στη λίστα που προκύπτει.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα ξεκινώντας από δέκα, μειώνοντας επανειλημμένα κατά ένα και εξασφαλίζοντας ότι κάθε στοιχείο είναι μεγαλύτερο από μηδέν.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Δημιουργήστε μια λίστα με εγγραφές που περιέχουν x και y, όπου x είναι μια τιμή και y μια λίστα. Το x θα πρέπει να είναι μικρότερο του 10 και να αντιπροσωπεύει τον αριθμό των στοιχείων στη λίστα y. Μετά τη δημιουργία της λίστας, επιστρέψτε μόνο τις τιμές x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Εισαγάγει τιμές στη λίστα στο ευρετήριο στον δείκτη που δόθηκε.",
        "Documentation.LongDescription": "Επιστρέφει μια νέα λίστα που παράγεται με την εισαγωγή των τιμών της <code>values</code> στην <code>list</code> στη θέση <code>index</code>. Η πρώτη θέση στη λίστα είναι στον δείκτη 0.\r\n      <ul>\r\n        <li><code>list</code>: Η λίστα προορισμού όπου πρόκειται να εισαχθούν οι τιμές.</li>\r\n        <li><code>index</code>: Ο δείκτης της λίστας προορισμού (<code>list</code>) όπου πρόκειται να εισαχθούν οι τιμές. Η πρώτη θέση στη λίστα είναι στον δείκτη 0.</li>\r\n        <li><code>values</code>: Η λίστα των τιμών που πρόκειται να εισαχθούν στη λίστα <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Εισαγάγετε τη λίστα ({3, 4}) στη λίστα προορισμού ({1, 2, 5}) στον δείκτη 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Εισαγάγετε μια λίστα με μια ένθετη λίστα ({1, {1.1, 1.2}}) σε μια λίστα προορισμού ({2, 3, 4}) στον δείκτη 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Αντικαθιστά το πλήθος των τιμών που ξεκινούν από την καθορισμένη θέση με τις τιμές αντικατάστασης.",
        "Documentation.LongDescription": "Αντικαθιστά <code>count</code> τιμές από τη λίστα <code>list</code> με τη λίστα <code>replaceWith</code>, ξεκινώντας από την καθορισμένη θέση, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε τις τιμές {7, 8, 9} στη λίστα {1, 2, 7, 8, 9, 5} με τις τιμές {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Αναζητά την καθορισμένη τιμή σε μια λίστα και την αντικαθιστά.",
        "Documentation.LongDescription": "Αναζητά μια λίστα τιμών, <code>list</code>, για την τιμή <code>oldValue</code> και αντικαθιστά κάθε εμφάνιση με το κείμενο αντικατάστασης <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε όλες τις τιμές \"a\" στη λίστα {\"a\", \"B\", \"a\", \"a\"} με την τιμή \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Δημιουργεί μια λίστα τιμών time με βάση μια αρχική τιμή, το πλήθος και την επαυξητική τιμή διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τιμών <code>time</code> μεγέθους <code>count</code>, που αρχίζουν από το <code>start</code>. Η προσαύξηση που δίνεται, <code>step</code>, είναι μια τιμή <code>duration</code> που προστίθεται σε κάθε τιμή.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα με 4 τιμές που ξεκινούν από το μεσημέρι noon (#time(12, 0, 0)) και προσαυξάνονται κατά 1 ώρα (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Επιστρέφει μια λίστα τα στοιχεία της οποίας μετασχηματίζονται από τη λίστα εισόδου με τη χρήση των καθορισμένων συναρτήσεων.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα της οποίας τα στοιχεία προβάλλονται από τη λίστα εισόδου..<br>\r\n    <br>\r\n    Η συνάρτηση <code>collectionTransform</code> μετατρέπει κάθε στοιχείο σε ενδιάμεση λίστα και η συνάρτηση <code>resultTransform</code> λαμβάνει το αρχικό στοιχείο καθώς και ένα στοιχείο από την ενδιάμεση λίστα, προκειμένου να δημιουργηθεί το τελικό αποτέλεσμα.<br>\r\n    <br>\r\n    Η συνάρτηση <code>collectionTransform</code> έχει την υπογραφή <code>(x ως οποιαδήποτε) ως λίστα => ...</code>, όπου <code>x</code> είναι ένα στοιχείο στο <code>list</code>.\r\n    Η συνάρτηση <code>resultTransform</code> προβάλλει το σχήμα του αποτελέσματος και έχει την υπογραφή <code>(x όπως οποιαδήποτε, y όπως οποιαδήποτε) όπως οποιαδήποτε => ...</code>, όπου <code>x</code> είναι ένα στοιχείο στο <code>list</code> και <code>y</code> είναι ένα στοιχείο από τη λίστα που δημιουργείται με τη μεταβίβαση <code>x</code> σε <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Ισοπέδωση μιας λίστας ατόμων και των κατοικίδιων ζώων τους.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Επιστρέφει έναν τυχαίο αριθμό.",
        "Documentation.LongDescription": "Επιστρέφει έναν τυχαίο αριθμό ανάμεσα στο 0 και το 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε έναν τυχαίο αριθμό.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Προσθέτει ένα πεδίο σε μια εγγραφή.",
        "Documentation.LongDescription": "Προσθέτει ένα πεδίο σε μια εγγραφή <code>record</code>, αφού δοθεί το όνομα πεδίου <code>fieldName</code> και η τιμή <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Προσθέτει το πεδίο \"Address\" στην εγγραφή.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Αντικαθιστά το κείμενο με την παρεχόμενη είσοδο.",
        "Documentation.LongDescription": "Αντικαθιστά το κείμενο <code>old</code> στην αρχική <code>text</code> με το κείμενο <code>new</code>. Αυτή η συνάρτηση αντικατάστασης μπορεί να χρησιμοποιηθεί στις <code>List.ReplaceValue</code> και <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε το κείμενο \"hE\" με το \"He\" στη συμβολοσειρά \"hEllo world\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Αντικαθιστά τιμές με την παρεχόμενη είσοδο.",
        "Documentation.LongDescription": "Αντικαθιστά την τιμή <code>old</code> στην αρχική <code>value</code> με την τιμή <code>new</code>. Αυτή η συνάρτηση αντικατάστασης μπορεί να χρησιμοποιηθεί στις <code>List.ReplaceValue</code> και <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε την τιμή 11 με την τιμή 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Επιστρέφει ένα αποτέλεσμα JSON από το Smartsheet API",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Πραγματοποιεί μια κλήση στο Smartsheet 2.0 REST API στο καθορισμένο τελικό σημείο και επιστρέφει τα αποτελέσματα ως εγγραφή JSON.",
        "Documentation.Examples": [
          {
            "Description": "Έλκει δεδομένα από το τελικό σημείο φύλλων Smartsheet API με πρόσθετα καθορισμένα ορίσματα",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Ένας πίνακας με πληροφορίες φύλλων όπως επιστρέφονται από το Smartsheet API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που δεν διαιρεί, επιστρέφοντας το όρισμά της ως λίστα ενός στοιχείου.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που δεν διαιρεί, επιστρέφοντας το όρισμά της ως λίστα ενός στοιχείου.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου στο κενό διάστημα.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου στο κενό διάστημα.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Διαχωρίστε την εισαγωγή κατά χαρακτήρες κενού διαστήματος, αντιμετωπίζοντας τα εισαγωγικά όπως οποιονδήποτε άλλο χαρακτήρα.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Διαμερίζει τον πίνακα σε μια λίστα πινάκων με βάση τον αριθμό των καθορισμένων ομάδων και στηλών.",
        "Documentation.LongDescription": "Διαμερίζει τον <code>table</code> σε μια λίστα <code>groups</code> πινάκων, με βάση την τιμή της <code>column</code> και μιας συνάρτησης <code>hash</code>.\r\n    Η συνάρτηση <code>hash</code> εφαρμόζεται στην τιμή της γραμμής <code>column</code> για να λάβει μια τιμή κατακερματισμού για τη γραμμή. Το υπόλοιπο της τιμής κατακερματισμού <code>groups</code> προσδιορίζει σε ποιον από τους επιστρεφόμενους πίνακες θα τοποθετηθεί η γραμμή.\r\n    <ul>\r\n       <li><code>table</code>: Ο πίνακας για διαμέριση.</li>\r\n       <li><code>column</code>: Η στήλη κατακερματισμού για προσδιορισμό του επιστρεφόμενου πίνακα στον οποίο βρίσκεται η γραμμή.</li>\r\n       <li><code>groups</code>: Ο αριθμός των πινάκων στους οποίους θα διαμεριστεί ο πίνακας εισόδου.</li>\r\n       <li><code>hash</code>: Η συνάρτηση που εφαρμόζεται για να ληφθεί μια τιμή κατακερματισμού.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Διαμερίστε τον πίνακα <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> σε 2 πίνακες στη στήλη [a], χρησιμοποιώντας την τιμή των στηλών ως συνάρτηση κατακερματισμού.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Επιστρέφει το τμήμα του <code>text</code> ανάμεσα στα καθορισμένα <code>startDelimiter</code> και <code>endDelimiter</code>.\r\n    Ένα προαιρετικό αριθμητικό <code>startIndex</code> υποδεικνύει ποια εμφάνιση του <code>startDelimiter</code> θα πρέπει να ληφθεί υπόψη.\r\n    Μια προαιρετική λίστα <code>startIndex</code> υποδεικνύει ποια εμφάνιση του <code>startDelimiter</code> θα πρέπει να ληφθεί υπόψη, καθώς και αν η δημιουργία ευρετηρίου θα πρέπει να γίνει από την αρχή ή το τέλος των δεδομένων εισαγωγής.\r\n    Το <code>endIndex</code> είναι παρόμοιο, με εξαίρεση το γεγονός ότι η δημιουργία ευρετηρίου γίνεται σε σχέση με το <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Να γίνει λήψη του τμήματος του \"111 (222) 333 (444)\" ανάμεσα στην (πρώτη) ανοιχτή παρένθεση και την (πρώτη) κλειστή παρένθεση που την ακολουθεί.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Να γίνει λήψη του τμήματος του \"111 (222) 333 (444)\" ανάμεσα στη δεύτερη ανοιχτή παρένθεση και την πρώτη κλειστή παρένθεση που την ακολουθεί.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Να γίνει λήψη του τμήματος του \"111 (222) 333 (444)\" ανάμεσα στη δεύτερη ανοιχτή παρένθεση από το τέλος και τη δεύτερη κλειστή παρένθεση που την ακολουθεί.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Εισάγει μία τιμή κειμένου σε μια άλλη σε μια δεδομένη θέση.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της εισαγωγής της τιμής <code>newText</code> στην τιμή κειμένου <code>text</code> στη θέση <code>offset</code>. Η θέση ξεκινά από τον αριθμό 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Εισαγάγετε \"C\" μεταξύ του \"B\" και του \"D\" στο \"ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Επιστρέφει ένα νέο, τυχαίο καθολικά μοναδικό αναγνωριστικό (GUID).",
        "Documentation.LongDescription": "Επιστρέφει ένα νέο, τυχαίο καθολικά μοναδικό αναγνωριστικό (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Αντικαθιστά όλες τις εμφανίσεις της παρεχόμενης συμβολοσειράς στο κείμενο.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της αντικατάστασης όλων των εμφανίσεων της τιμής κειμένου <code>old</code> στην τιμή κειμένου <code>text</code> με την τιμή κειμένου <code>new</code>. Αυτή η συνάρτηση κάνει διάκριση πεζών-κεφαλαίων.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε κάθε εμφάνιση του \"the\" σε μια πρόταση με το \"a\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Καταργεί ένα εύρος χαρακτήρων και εισάγει μια νέα τιμή σε μια καθορισμένη θέση.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της κατάργησης ενός αριθμού χαρακτήρων, <code>count</code>, από την τιμή κειμένου <code>text</code> ξεκινώντας από τη θέση <code>offset</code> και εισαγάγοντας στη συνέχεια την τιμή κειμένου <code>newText</code> στην ίδια θέση του <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε έναν χαρακτήρα στη θέση 2 της τιμής κειμένου \"ABGF\" με τη νέα τιμή κειμένου \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Προσθέτει ένα κλειδί στον παρεχόμενο τύπο πίνακα.",
        "Documentation.LongDescription": "Προσθέτει ένα κλειδί στον παρεχόμενο τύπο πίνακα.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Επιστρέφει μια λίστα ταυτοτήτων που θα δεχτεί η συνθήκη.",
        "Documentation.LongDescription": "<p>Χρησιμοποιώντας το καθορισμένο στοιχείο <code>identityProvider</code>, μετατρέπει τη συνθήκη <code>condition</code> στη λίστα ταυτοτήτων για την οποία η συνθήκη <code>condition</code> θα επέστρεφε <code>true</code> σε όλα τα περιβάλλοντα εξουσιοδότησης με το <code>identityProvider</code> ως υπηρεσία παροχής ταυτότητας. Εμφανίζεται σφάλμα, αν δεν είναι δυνατή η μετατροπή της συνθήκης <code>condition</code> σε μια λίστα ταυτοτήτων, για παράδειγμα, αν η συνθήκη <code>condition</code> χρησιμοποιεί άλλα χαρακτηριστικά εκτός από ταυτότητες χρήστη ή ομάδας για τη λήψη απόφασης.</p>\r\n    <p>Λάβετε υπόψη ότι η λίστα ταυτοτήτων αντιπροσωπεύει τις ταυτότητες όπως εμφανίζονται στη συνθήκη <code>condition</code> και δεν εφαρμόζεται σε αυτές κανονικοποίηση (όπως επέκταση ομάδας).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Συμπιέζει μια δυαδική τιμή χρησιμοποιώντας τον δεδομένο τύπο συμπίεσης.",
        "Documentation.LongDescription": "Συμπιέζει μια δυαδική τιμή χρησιμοποιώντας τον δεδομένο τύπο συμπίεσης. Το αποτέλεσμα αυτής της κλήσης είναι ένα συμπιεσμένο αντίγραφο των δεδομένων εισόδου. Οι τύποι συμπίεσης είναι:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Συμπιέζει τη δυαδική τιμή.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Αποσυμπιέζει μια δυαδική τιμή χρησιμοποιώντας τον τύπο συμπίεσης που δόθηκε.",
        "Documentation.LongDescription": "Αποσυμπιέζει μια δυαδική τιμή χρησιμοποιώντας τον τύπο συμπίεσης που δόθηκε. Το αποτέλεσμα αυτής της κλήσης είναι ένα αποσυμπιεσμένο αντίγραφο των δεδομένων εισόδου. Οι τύποι συμπίεσης περιλαμβάνουν:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Αποσυμπιέζει τη δυαδική τιμή.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Επιστρέφει ένα υποσύνολο της δυαδικής τιμής αρχίζοντας από μετατόπιση.",
        "Documentation.LongDescription": "Επιστρέφει ένα υποσύνολο της δυαδικής τιμής αρχίζοντας από μετατόπιση <code>binary</code>. Μια προαιρετική παράμετρος <code>offset</code> ορίζει το μέγιστο μήκος του υποσυνόλου.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει ένα υποσύνολο της δυαδικής τιμής ξεκινώντας από μετατόπιση 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Επιστρέφει ένα υποσύνολο μήκους 2 από μετατόπιση 6 της δυαδικής τιμής.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Διαιρεί το καθορισμένο δυαδικό δεδομένο σε μια λίστα δυαδικών δεδομένων χρησιμοποιώντας το καθορισμένο μέγεθος σελίδας.",
        "Documentation.LongDescription": "Διαιρεί <code>binary</code> σε μια λίστα δυαδικών δεδομένων όπου το πρώτο στοιχείο της λίστας εξόδου είναι ένα δυαδικό δεδομένο που περιέχει τα πρώτα <code>pageSize</code> byte από\r\n    δυαδικό δεδομένο προέλευσης, το επόμενο στοιχείο της λίστας εξόδου είναι ένα δυαδικό δεδομένο που περιέχει τα επόμενη <code>pageSize</code> byte από το δυαδικό αρχείο προέλευσης και ούτω καθεξής.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Δημιουργεί ή επεκτείνει ένα δυαδικό με δείκτες χειρισμού που ορίζονται από το χρήστη για λειτουργίες ερωτημάτων και ενεργειών.",
        "Documentation.LongDescription": "<p>Επιστρέφει μια προβολή του <code>binary</code> όπου χρησιμοποιούνται οι συναρτήσεις που καθορίζονται στο <code>handlers</code> αντί της προεπιλεγμένης συμπεριφοράς μιας λειτουργίας όταν η λειτουργία εφαρμόζεται στην προβολή.</p>\r\n<p>Εάν παρέχεται το <code>binary</code>, όλες οι συναρτήσεις χειριστή είναι προαιρετικές. Εάν δεν παρέχεται το <code>binary</code>, απαιτείται η λειτουργία χειριστή <code>GetStream</code>. Εάν μια συνάρτηση χειριστή δεν έχει καθοριστεί για μια λειτουργία, η προεπιλεγμένη συμπεριφορά της λειτουργίας εφαρμόζεται στο <code>binary</code> (εκτός από την περίπτωση του <code>GetExpression</code>).</p>\r\n<p>Οι συναρτήσεις χειριστή πρέπει να επιστρέψουν ένα τιμή που είναι σημασιολογικά ισοδύναμη με το αποτέλεσμα της εφαρμογής της συνάρτησης έναντι <code>binary</code> (ή της προκύπτουσας προβολής στην περίπτωση του <code>GetExpression</code>).</p>\r\n<p>Εάν μια συνάρτηση χειριστή εμφανίσει σφάλμα, η προεπιλεγμένη συμπεριφορά της λειτουργίας εφαρμόζεται στην προβολή.</p>\r\n<p><code>Binary.View</code> μπορεί να χρησιμοποιηθεί για την υλοποίηση αναδίπλωσης σε μια πηγή δεδομένων – τη μετάφραση των ερωτημάτων M σε λειτουργίες συγκεκριμένης πηγής (για παράδειγμα, για λήψη μιας ενότητας ενός αρχείου).</p>\r\n<p>Ανατρέξτε στη δημοσιευμένη τεκμηρίωση προσαρμοσμένης σύνδεσης Power Query για μια πιο ολοκληρωμένη περιγραφή του <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια βασική προβολή που δεν απαιτεί πρόσβαση στα δεδομένα προκειμένου να προσδιοριστεί το μήκος.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Επιστρέφει μια δυαδική μορφή με τη σειρά byte που καθορίζεται από μια συνάρτηση.",
        "Documentation.LongDescription": "Επιστρέφει μια δυαδική μορφή με τη σειρά byte που καθορίζεται από το <code>binaryFormat</code>.  Η προεπιλεγμένη σειρά byte είναι <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Επιστρέφει μια δυαδική μορφή που επιλέγει την επόμενη δυαδική μορφή με βάση μια τιμή που έχει ήδη αναγνωστεί.",
        "Documentation.LongDescription": "Επιστρέφει μια δυαδική μορφή που επιλέγει την επόμενη δυαδική μορφή με βάση μια τιμή που έχει ήδη αναγνωστεί.  Η τιμή της δυαδικής μορφής που παράγεται από αυτήν τη συνάρτηση λειτουργεί σε στάδια:<ul>\r\n<li>Η δυαδική μορφή που καθορίστηκε από την παράμετρο <code>binaryFormat</code> χρησιμοποιείται για να διαβάσει μια τιμή.</li>\r\n<li>Η τιμή μεταβιβάζεται στη συνάρτηση επιλογής που καθορίστηκε από την παράμετρο <code>chooseFunction</code>.</li>\r\n<li>Η συνάρτηση επιλογής ελέγχει την τιμή και επιστρέφει μια δεύτερη δυαδική μορφή.</li>\r\n<li>Η δεύτερη δυαδική μορφή χρησιμοποιείται για να διαβάσει μια δεύτερη τιμή.</li>\r\n<li>Εάν έχει καθοριστεί συνάρτηση συνδυασμού, τότε η πρώτη και η δεύτερη τιμή μεταβιβάζονται στη συνάρτηση συνδυασμού και επιστρέφεται η παραγόμενη τιμή.</li>\r\n<li>Εάν δεν έχει καθοριστεί συνάρτηση συνδυασμού, επιστρέφεται η δεύτερη τιμή.</li>\r\n<li>Επιστρέφεται η δεύτερη τιμή.</li>\r\n</ul>Η προαιρετική παράμετρος <code>type</code> υποδεικνύει τον τύπο της δυαδικής μορφής που θα επιστραφεί από τη συνάρτηση επιλογής.  Είναι δυνατό να καθοριστεί <code>type any</code>, <code>type list</code> ή <code>type binary</code>.  Εάν δεν έχει καθοριστεί η παράμετρος <code>type</code>, τότε χρησιμοποιείται η <code>type any</code>.   Εάν χρησιμοποιείται <code>type list</code> ή <code>type binary</code>, τότε το σύστημα ενδέχεται να είναι σε θέση να επιστρέψει μια τιμή ροής <code>binary</code> ή <code>list</code> αντί για μια τιμή από το buffer, η οποία μπορεί να μειώσει την ποσότητα μνήμης που χρειάζεται για την ανάγνωση της μορφής.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Ανάγνωση μιας λίστας από byte όπου ο αριθμός των στοιχείων προσδιορίζεται από το πρώτο byte.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Ανάγνωση μιας λίστας από byte όπου ο αριθμός των στοιχείων προσδιορίζεται από το πρώτο byte και διατήρηση του πρώτου byte που διαβάστηκε.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Ανάγνωση μιας λίστας από byte όπου ο αριθμός των στοιχείων προσδιορίζεται από το πρώτο byte με τη χρήση μιας λίστας ροής.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Επιστρέφει μια δυαδική μορφή που διαβάζει μια ομάδα στοιχείων.",
        "Documentation.LongDescription": "Οι παράμετροι είναι οι εξής:\r\n<ul>\r\n<li>Η παράμετρος <code>binaryFormat</code> καθορίζει τη δυαδική μορφή της τιμής κλειδιού.</li>\r\n<li>Η παράμετρος <code>group</code> παρέχει πληροφορίες σχετικά με την ομάδα των γνωστών στοιχείων.</li>\r\n<li>Η προαιρετική παράμετρος <code>extra</code> μπορεί να χρησιμοποιηθεί για τον καθορισμό μιας συνάρτησης που θα επιστρέψει μια τιμή δυαδικής μορφής για την τιμή που ακολουθεί οποιοδήποτε μη αναμενόμενο κλειδί.  Αν η παράμετρος <code>extra</code> δεν καθοριστεί, τότε παρουσιάζεται σφάλμα αν υπάρχουν μη αναμενόμενες τιμές κλειδιού.</li>\r\n</ul>\r\nΗ παράμετρος <code>group</code> καθορίζει μια λίστα ορισμών στοιχείων.  Κάθε ορισμός στοιχείου είναι μια λίστα, η οποία περιέχει 3-5 τιμές, ως εξής:\r\n<ul>\r\n<li>Τιμή κλειδιού.  Η τιμή του κλειδιού που αντιστοιχεί στο στοιχείο.  Πρέπει να είναι μοναδική στο σύνολο των στοιχείων.</li>\r\n<li>Μορφή στοιχείου.  Η δυαδική μορφή που αντιστοιχεί στην τιμή του στοιχείου.  Δίνει τη δυνατότητα σε κάθε στοιχείο να έχει διαφορετική μορφή. </li>\r\n<li>Εμφάνιση στοιχείου.  Η τιμή <code>BinaryOccurrence.Type</code>, δηλαδή πόσες φορές αναμένεται να εμφανιστεί το στοιχείο στην ομάδα.   Τα απαιτούμενα στοιχεία που δεν είναι παρόντα προκαλούν σφάλμα.  Τα απαιτούμενα ή προαιρετικά διπλότυπα στοιχεία θεωρούνται μη αναμενόμενες τιμές κλειδιού.</li>\r\n<li>Προεπιλεγμένη τιμή στοιχείου (προαιρετικά).  Αν η προεπιλεγμένη τιμή στοιχείου εμφανίζεται στη λίστα ορισμού στοιχείου και δεν είναι null, τότε θα χρησιμοποιηθεί αυτή αντί για την προεπιλεγμένη.  Η προεπιλογή για επαναλαμβανόμενα ή προαιρετικά στοιχεία είναι null και η προεπιλογή για επαναλαμβανόμενες τιμές είναι μια κενή λίστα { }.</li>\r\n<li>Μετασχηματισμός τιμής στοιχείου (προαιρετικά).   Αν η συνάρτηση μετασχηματισμού τιμής στοιχείου εμφανίζεται στη λίστα ορισμού στοιχείου και δεν είναι null, τότε θα κληθεί για να μετασχηματίσει την τιμή στοιχείου, προτού επιστραφεί.  Η συνάρτηση μετασχηματισμού καλείται, μόνο αν το στοιχείο εμφανίζεται στην είσοδο (δεν θα κληθεί ποτέ με την προεπιλεγμένη τιμή). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Τα παρακάτω υποθέτουν τιμή κλειδιού ενός byte, με 4 αναμενόμενα στοιχεία στην ομάδα, τα οποία έχουν όλα ένα byte δεδομένων μετά από το κλειδί.  Τα στοιχεία εμφανίζονται στην είσοδο ως εξής:\r\n<ul>\r\n<li>Το Κλειδί 1 απαιτείται και εμφανίζεται με την τιμή 11.</li>\r\n<li>Το Κλειδί 2 επαναλαμβάνεται, εμφανίζεται δύο φορές με την τιμή 22 και έχει ως αποτέλεσμα την τιμή { 22, 22 }.</li>\r\n<li>Το Κλειδί 3 είναι προαιρετικό, δεν εμφανίζεται και έχει ως αποτέλεσμα την τιμή null.</li>\r\n<li>Το Κλειδί 4 επαναλαμβάνεται, δεν εμφανίζεται και έχει ως αποτέλεσμα την τιμή { }.</li>\r\n<li>Το Κλειδί 5 δεν αποτελεί μέρος της ομάδας, αλλά εμφανίζεται μία φορά με την τιμή 55.  Η επιπλέον συνάρτηση καλείται με την τιμή κλειδιού 5 και επιστρέφει τη μορφή που αντιστοιχεί σε αυτή την τιμή (BinaryFormat.Byte).  Η τιμή 55 διαβάζεται και απορρίπτεται.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Το παρακάτω παράδειγμα παρουσιάζει τον μετασχηματισμό τιμής στοιχείου και την προεπιλεγμένη τιμή στοιχείου.   Το επαναλαμβανόμενο στοιχείο με το κλειδί 1 αθροίζει τη λίστα των τιμών που διαβάστηκαν με χρήση της List.Sum.  Το προαιρετικό στοιχείο με το κλειδί 2 έχει την προεπιλεγμένη τιμή 123 αντί για τη null.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Επιστρέφει μια δυαδική μορφή που περιορίζει την ποσότητα των δεδομένων που μπορούν να αναγνωστούν.",
        "Documentation.LongDescription": "Επιστρέφει μια δυαδική μορφή που περιορίζει τον όγκο των δεδομένων που μπορούν να διαβαστούν. Τόσο το <code>BinaryFormat.List</code> και το <code>BinaryFormat.Binary</code> μπορούν να χρησιμοποιηθούν για ανάγνωση μέχρι το τέλος των δεδομένων. Το <code>BinaryFormat.Length</code> μπορεί να χρησιμοποιηθεί για τον περιορισμό του αριθμού των byte που διαβάζονται. Η παράμετρος <code>binaryFormat</code> καθορίζει τη δυαδική μορφή που θα περιοριστεί.  Η παράμετρος <code>length</code> καθορίζει τον αριθμό των byte προς ανάγνωση. Η παράμετρος <code>length</code> μπορεί να είναι είτε μια αριθμητική τιμή είτε μια τιμή δυαδικής μορφής που καθορίζει τη μορφή της τιμής μήκους που εμφανίζεται και προηγείται της τιμής που διαβάζεται.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Περιορίστε τον αριθμό των byte που διαβάζονται σε 2 κατά την ανάγνωση μιας λίστας byte.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Περιορισμός του αριθμού των byte που διαβάζονται κατά την ανάγνωση μιας λίστας byte στην τιμή byte που προηγείται της λίστας.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Επιστρέφει μια δυαδική μορφή που θα μετασχηματίσει τις τιμές που διαβάζονται από μια άλλη δυαδική μορφή.",
        "Documentation.LongDescription": "Επιστρέφει μια δυαδική μορφή που θα μετασχηματίσει τις τιμές που διαβάζονται από μια άλλη δυαδική μορφή.  Η παράμετρος <code>binaryFormat</code> καθορίζει τη δυαδική μορφή που θα χρησιμοποιηθεί για να διαβάσει την τιμή.  Η <code>function</code> καλείται με την τιμή που διαβάστηκε και επιστρέφει τη μετασχηματισμένη τιμή.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Ανάγνωση ενός byte και πρόσθεση ενός σε αυτό.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση σύγκρισης που χρησιμοποιεί τακτικούς κανόνες για τη σύγκριση τιμών.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση σύγκρισης που χρησιμοποιεί Κανόνες Τακτικής για να συγκρίνει τις παρεχόμενες τιμές <code>x</code> και <code>y</code>.<br>\r\n      <br>\r\n      Μια συνάρτηση σύγκρισης δέχεται δύο ορίσματα και επιστρέφει -1, 0 ή 1 με βάση το αν η πρώτη τιμή είναι μικρότερη, ίση ή μεγαλύτερη από τη δεύτερη.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Χρησιμοποιώντας τακτικούς κανόνες, συγκρίνετε αν τα \"encyclopædia\" και \"encyclopaedia\" είναι ισοδύναμα. Σημειώστε ότι είναι ισοδύναμα με τη χρήση <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση σύγκρισης χωρίς διάκριση πεζών-κεφαλαίων η οποία χρησιμοποιεί τακτικούς κανόνες για τη σύγκριση τιμών.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση σύγκρισης χωρίς διάκριση πεζών-κεφαλαίων η οποία χρησιμοποιεί Κανόνες Τακτικής για να συγκρίνει τις παρεχόμενες τιμές <code>x</code>και <code>y</code>.<br>\r\n        <br>\r\n        Μια συνάρτηση σύγκρισης δέχεται δύο ορίσματα και επιστρέφει -1, 0 ή 1 με βάση το αν η πρώτη τιμή είναι μικρότερη, ίση ή μεγαλύτερη από τη δεύτερη.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Συγκρίνετε τις τιμές \"Abc\" και \"abc\" χρησιμοποιώντας τακτικούς κανόνες χωρίς διάκριση πεζών-κεφαλαίων. Λάβετε υπόψη ότι η τιμή \"Abc\" είναι μικρότερη από την τιμή \"abc\" με χρήση της συνάρτησης <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Επιστρέφει μια ιδιότητα ενός χαρακτηριστικού διάστασης.",
        "Documentation.LongDescription": "Επιστρέφει την ιδιότητα <code>propertyName</code> του χαρακτηριστικού διάστασης <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Επιστρέφει μια ιδιότητα μιας μέτρησης (ιδιότητα κελιού).",
        "Documentation.LongDescription": "Επιστρέφει την ιδιότητα <code>propertyName</code> της μέτρησης <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Προέλευση ερωτήματος SQL Databricks",
        "Documentation.LongDescription": "Ορισμός προέλευσης δεδομένων Databricks για την εκτέλεση ερωτημάτων SQL"
      },
      "ReturnType": "Ερώτημα SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Προέλευση ερωτήματος SQL Databricks",
        "Documentation.LongDescription": "Ορισμός προέλευσης δεδομένων Databricks για την εκτέλεση ερωτημάτων SQL"
      },
      "ReturnType": "Ερώτημα SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Προσθέτει τις καθορισμένες ημέρες στην ημερομηνία.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> μετά την πρόσθεση <code>numberOfDays</code> ημερών στην τιμή <code>dateTime</code> της <code>datetime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Η τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> στην οποία προστίθενται ημέρες.</li>\r\n      <li><code>numberOfDays</code>: Ο αριθμός των ημερών που θα προστεθούν.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσθέτει 5 ημέρες στην <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> αναπαριστώντας την ημερομηνία 14/5/2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Προσθέτει τους καθορισμένους μήνες στην ημερομηνία.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> μετά την πρόσθεση <code>numberOfMonths</code> μηνών στην τιμή <code>dateTime</code> της <code>datetime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Η τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> στην οποία προστίθενται μήνες.</li>\r\n        <li><code>numberOfMonths</code>: Ο αριθμός των μηνών που θα προστεθούν.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσθέτει 5 μήνες στην <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> αναπαριστώντας την ημερομηνία 14/5/2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Προσθέτει 18 μήνες στην <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> αναπαριστώντας την ημερομηνία και ώρα 14/5/2011 08:15:22 π.μ.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Προσθέτει τα καθορισμένα τρίμηνα στην ημερομηνία.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> μετά την πρόσθεση <code>numberOfQuarters</code> τριμήνων στην τιμή <code>dateTime</code> της <code>datetime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Η τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> στην οποία προστίθενται τρίμηνα.</li>\r\n      <li><code>numberOfQuarters</code>: Ο αριθμός των τριμήνων που θα προστεθούν.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσθέτει 1 τρίμηνο στην <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> αναπαριστώντας την ημερομηνία 14/5/2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Προσθέτει τις καθορισμένες εβδομάδες στην ημερομηνία.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> μετά την πρόσθεση <code>numberOfWeeks</code> εβδομάδων στην τιμή <code>dateTime</code> της <code>datetime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Η τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> στην οποία προστίθενται εβδομάδες.</li>\r\n      <li><code>numberOfWeeks</code>: Ο αριθμός των εβδομάδων που θα προστεθούν.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσθέτει 2 εβδομάδες στην <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> αναπαριστώντας την ημερομηνία 14/5/2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Προσθέτει τα καθορισμένα έτη στην ημερομηνία.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> μετά την πρόσθεση <code>numberOfYears</code> σε μια τιμή <code>dateTime</code> της <code>datetime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Η τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> στην οποία προστίθενται έτη.</li>\r\n        <li><code>numberOfYears</code>: Ο αριθμός των ετών που θα προστεθούν.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσθέτει 4 έτη στην <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> αναπαριστώντας την ημερομηνία 14/5/2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Προσθέτει 10 έτη στην <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> αναπαριστώντας την ημερομηνία και ώρα 14/5/2011 08:15:22 π.μ.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των επόμενων ημερών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ημέρας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των επόμενων ημερών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ημέρας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>days</code>: Το πλήθος ημερών.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η ημέρα μετά την τρέχουσα ώρα συστήματος είναι εντός των επόμενων δύο ημερών.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των επόμενων μηνών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος μήνα.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των επόμενων μηνών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος μήνα.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>months</code>: Το πλήθος μηνών.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν ο μήνας μετά την τρέχουσα ώρα συστήματος είναι εντός των επόμενων δύο μηνών.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των επόμενων τριμήνων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος τριμήνου.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των επόμενων τριμήνων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος τριμήνου.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>quarters</code>: Το πλήθος τριμήνων.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν το τρίμηνο μετά την τρέχουσα ώρα συστήματος είναι εντός των επόμενων δύο τριμήνων.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των επόμενων εβδομάδων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας εβδομάδας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των επόμενων εβδομάδων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας εβδομάδας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>weeks</code>: Το πλήθος εβδομάδων.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η εβδομάδα μετά την τρέχουσα ώρα συστήματος είναι εντός των επόμενων δύο εβδομάδων.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των επόμενων ετών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος έτους.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των επόμενων ετών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος έτους.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>years</code>: Το πλήθος ετών.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν το έτος μετά την τρέχουσα ώρα συστήματος είναι εντός των επόμενων δύο ετών.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των προηγούμενων ημερών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ημέρας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των προηγούμενων ημερών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ημέρας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>days</code>: Το πλήθος ημερών.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η ημέρα πριν από την τρέχουσα ώρα συστήματος είναι εντός των προηγούμενων δύο ημερών.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των προηγούμενων μηνών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος μήνα.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των προηγούμενων μηνών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος μήνα.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>months</code>: Το πλήθος μηνών.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν ο μήνας πριν από την τρέχουσα ώρα συστήματος είναι εντός των προηγούμενων δύο μηνών.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των προηγούμενων τριμήνων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος τριμήνου.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των προηγούμενων τριμήνων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος τριμήνου.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>quarters</code>: Το πλήθος τριμήνων.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν το τρίμηνο πριν από την τρέχουσα ώρα συστήματος είναι εντός των προηγούμενων δύο τριμήνων.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των προηγούμενων εβδομάδων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας εβδομάδας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των προηγούμενων εβδομάδων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας εβδομάδας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>weeks</code>: Το πλήθος εβδομάδων.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η εβδομάδα πριν από την τρέχουσα ώρα συστήματος είναι εντός των προηγούμενων δύο εβδομάδων.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια των προηγούμενων ετών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος έτους.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των προηγούμενων ετών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος έτους.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      <li><code>years</code>: Το πλήθος ετών.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν το έτος πριν από την τρέχουσα ώρα συστήματος είναι εντός των προηγούμενων δύο ετών.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Προσθέτει πληροφορίες ζώνης ώρας στην τιμή ημερομηνίας/ώρας.",
        "Documentation.LongDescription": "Προσθέτει πληροφορίες ζώνης ώρας στην τιμή <code>dateTime</code>. Οι πληροφορίες ζώνης ώρας περιλαμβάνουν <code>timezoneHours</code> και προαιρετικά <code>timezoneMinutes</code>, οι οποίες καθορίζουν την επιθυμητή μετατόπιση από την ώρα UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ορίστε τη ζώνη ώρας σε UTC+7:30 (7 ώρες και 30 λεπτά μετά την UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια των επόμενων ωρών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ώρας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των επόμενων ωρών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ώρας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      <li><code>hours</code>: Το πλήθος ωρών.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν η ώρα μετά την τρέχουσα ώρα συστήματος είναι εντός των επόμενων δύο ωρών.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια των επόμενων λεπτών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος λεπτού.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των επόμενων λεπτών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος λεπτού.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      <li><code>minutes</code>: Το πλήθος λεπτών.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν το λεπτό μετά την τρέχουσα ώρα συστήματος είναι εντός των επόμενων δύο λεπτών.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια των επόμενων δευτερολέπτων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος δευτερολέπτου.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των επόμενων δευτερολέπτων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος δευτερολέπτου.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      <li><code>seconds</code>: Το πλήθος δευτερολέπτων.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν το δευτερόλεπτο μετά την τρέχουσα ώρα συστήματος είναι εντός των επόμενων δύο δευτερολέπτων.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια των προηγούμενων ωρών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ώρας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των προηγούμενων ωρών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ώρας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      <li><code>hours</code>: Το πλήθος ωρών.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν η ώρα πριν από την τρέχουσα ώρα συστήματος είναι εντός των προηγούμενων δύο ωρών.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια των προηγούμενων λεπτών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος λεπτού.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των προηγούμενων λεπτών, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος λεπτού.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      <li><code>minutes</code>: Το πλήθος λεπτών.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν το λεπτό πριν από την τρέχουσα ώρα συστήματος είναι εντός των προηγούμενων δύο λεπτών.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια των προηγούμενων δευτερολέπτων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος δευτερολέπτου.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια των προηγούμενων δευτερολέπτων, όπως προσδιορίζονται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος δευτερολέπτου.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      <li><code>seconds</code>: Το πλήθος δευτερολέπτων.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν το δευτερόλεπτο πριν από την τρέχουσα ώρα συστήματος είναι εντός των προηγούμενων δύο δευτερολέπτων.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Αλλάζει τη ζώνη ώρας της τιμής.",
        "Documentation.LongDescription": "Αλλάζει τις πληροφορίες ζώνης ώρας στην τιμή datetimezone <code>dateTimeZone</code> με τις νέες πληροφορίες ζώνης ώρας που παρέχονται από την <code>timezoneHours</code> και προαιρετικά από την <code>timezoneMinutes</code>.\r\n    Εάν η <code>dateTimeZone</code> δεν διαθέτει στοιχείο ζώνης ώρας, παρουσιάζεται εξαίρεση.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Αλλάξτε τις πληροφορίες ζώνης ώρας για την #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) σε 8 ώρες.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Αλλάξτε τις πληροφορίες ζώνης ώρας για την #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) σε -30 λεπτά.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Αποκτά πρόσβαση σε μια τιμή με βάση το όνομα σε μια συνδυαστική εφαρμογή web (mashup).",
        "Documentation.LongDescription": "Αποκτά πρόσβαση σε μια τιμή με βάση το όνομα σε μια συνδυαστική εφαρμογή web (mashup).",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Δημιουργεί μια συνάρτηση με μια συγκεκριμένη υπογραφή παραμέτρου επάνω από μια συνάρτηση που δέχεται ένα όρισμα μίας λίστας",
        "Documentation.LongDescription": "Χρησιμοποιεί μια μοναδιαία συνάρτηση <code>function</code> και δημιουργεί μια νέα συνάρτηση με τον τύπο <code>functionType</code>, ο οποίος κατασκευάζει μια λίστα από τα ορίσματά του και τη διαβιβάζει στο <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέπει το List.Sum σε μια συνάρτηση δύο ορισμάτων της οποίας τα ορίσματα προστίθενται μαζί",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Μετατρέπει μια συνάρτηση που δέχεται μια λίστα σε μια συνάρτηση δύο ορισμάτων",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Καλεί τη συνάρτηση που δόθηκε",
        "Documentation.LongDescription": "Καλεί τη συνάρτηση που δόθηκε χρησιμοποιώντας την καθορισμένη λίστα ορισμάτων και επιστρέφει το αποτέλεσμα.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Καλεί την Record.FieldNames με ένα όρισμα [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Καλεί τη δεδομένη συνάρτηση μετά την παρέλευση της καθορισμένης διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα από την κλήση της <code>function</code> μετά την παρέλευση διάρκειας <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Δημιουργεί μια συνάρτηση ανυσματικής τιμής επάνω σε μια διανυσματική συνάρτηση, που συγκεντρώνει πολλές κλήσεις σε δέσμη.",
        "Documentation.LongDescription": "<p>Επιστρέφει μια συνάρτηση ανυσματικής τιμής τύπου <code>scalarFunctionType</code> που καλεί το <code>vectorFunction</code> με μία μόνο γραμμή ορισμάτων και επιστρέφει τη μοναδική έξοδο. Επιπλέον, όταν η συνάρτηση ανυσματικής τιμής εφαρμόζεται επανειλημμένα για κάθε γραμμή ενός πίνακα εισόδων, όπως για παράδειγμα στο Table.AddColumn, το <code>vectorFunction</code> θα εφαρμόζεται μία φορά για όλες τις εισόδους.</p>\r\n<p>Στο <code>vectorFunction</code> θα μεταβιβαστεί ένας πίνακας οι στήλες του οποίου αντιστοιχούν στο όνομα και τη θέση των παραμέτρων του <code>scalarFunctionType</code>. Κάθε γραμμή αυτού του πίνακα περιέχει τα ορίσματα για μία κλήση στη συνάρτηση ανυσματικής τιμής, με τις στήλες να αντιστοιχούν στις παραμέτρους του <code>scalarFunctionType</code>.</p>\r\n<p>Το <code>vectorFunction</code> πρέπει να επιστρέψει μια λίστα με το ίδιο μήκος με τον πίνακα εισόδου, της οποίας το στοιχείο σε κάθε θέση πρέπει να είναι το ίδιο αποτέλεσμα με την αξιολόγηση της συνάρτησης ανυσματικής τιμής στη γραμμή εισόδου της ίδιας θέσης.</p>\r\n<p>Ο πίνακας εισόδου αναμένεται να εισάγεται μέσω ροής, επομένως το <code>vectorFunction</code> αναμένεται να εξάγει την έξοδο σε ροή καθώς γίνεται εισαγωγή της εισόδου, χρησιμοποιώντας μόνο ένα τμήμα της εισόδου κάθε φορά. Ειδικότερα, το <code>vectorFunction</code> δεν πρέπει να απαριθμήσει τον πίνακα εισόδου του περισσότερες από μία φορές.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Δημιουργεί μια εγγραφή που αναπαριστά ένα γεωγραφικό σημείο από συστατικά μέρη.",
        "Documentation.LongDescription": "Δημιουργεί μια εγγραφή που αναπαριστά ένα γεωγραφικό σημείο από τα συστατικά μέρη του, όπως γεωγραφικό μήκος, γεωγραφικό πλάτος και, αν υπάρχει, ανύψωση (Z) και μέτρηση (M). Ένα προαιρετικό αναγνωριστικό παραπομπής χωρικών δεδομένων (SRID) μπορεί να παρασχεθεί αν διαφέρει από την προεπιλεγμένη τιμή (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Δημιουργεί μια εγγραφή που αναπαριστά ένα γεωμετρικό σημείο από συστατικά μέρη.",
        "Documentation.LongDescription": "Δημιουργεί μια εγγραφή που αναπαριστά ένα γεωγραφικό σημείο από τα συστατικά μέρη του, όπως συντεταγμένη X, συντεταγμένη Y και, αν υπάρχει, συντεταγμένη Z και μέτρηση (M). Ένα προαιρετικό αναγνωριστικό παραπομπής χωρικών δεδομένων (SRID) μπορεί να παρασχεθεί αν διαφέρει από την προεπιλεγμένη τιμή (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Δημιουργεί μια ταυτότητα.",
        "Documentation.LongDescription": "Δημιουργεί μια ταυτότητα.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Καθορίζει αν μια ταυτότητα είναι μέλος μιας συλλογής ταυτοτήτων.",
        "Documentation.LongDescription": "Καθορίζει αν μια ταυτότητα είναι μέλος μιας συλλογής ταυτοτήτων.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Επιστρέφει μια λίστα που αποτελείται από όλα τα περιττά αριθμημένα στοιχεία απόκλισης σε μια λίστα.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα που αποτελείται από όλα τα περιττά αριθμημένα στοιχεία απόκλισης σε μια λίστα. Εναλλάσσεται μεταξύ της λήψης και της παράλειψης τιμών από τη λίστα <code>list</code> ανάλογα με τις παραμέτρους.\r\n    <ul>\r\n    <li><code>count</code>: Καθορίζει τον αριθμό των τιμών που παραλείπονται κάθε φορά.</li>\r\n    <li><code>repeatInterval</code>: Ένα προαιρετικό διάστημα επανάληψης το οποίο υποδεικνύει πόσες τιμές προστίθενται μεταξύ των επαναλαμβανόμενων τιμών.</li>\r\n    <li><code>offset</code>: Μια παράμετρος επιλογής απόκλισης προκειμένου να ξεκινά η παράλειψη τιμών μετά την αρχική απόκλιση.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα από {1..10} που παραλείπει τον πρώτο αριθμό.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Δημιουργήστε μια λίστα από {1..10} που παραλείπει κάθε δεύτερο αριθμό.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Δημιουργήστε μια λίστα από {1..10} που ξεκινά από το 1 και παραλείπει κάθε δεύτερο αριθμό.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Δημιουργήστε μια λίστα από {1..10} που ξεκινά από το 1, παραλείπει μια τιμή, διατηρεί δύο τιμές και ούτω καθεξής.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Υποδεικνύει αν η λίστα περιέχει την τιμή.",
        "Documentation.LongDescription": "Υποδεικνύει αν η λίστα <code>list</code> περιέχει την τιμή <code>value</code>. \r\n    Επιστρέφει true εάν η τιμή βρέθηκε στη λίστα, διαφορετικά false. Μια προαιρετική τιμή κριτηρίων ισότητας, <code>equationCriteria</code>, μπορεί να καθοριστεί για τον έλεγχο ισότητας. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε αν η λίστα {1, 2, 3, 4, 5} περιέχει το 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Βρείτε αν η λίστα {1, 2, 3, 4, 5} περιέχει το 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Υποδεικνύει αν μια λίστα περιλαμβάνει όλες τις τιμές μιας άλλης λίστας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η λίστα <code>list</code> περιλαμβάνει όλες τις τιμές μιας άλλης λίστας, <code>values</code>.\r\n    Επιστρέφει true εάν η τιμή βρέθηκε στη λίστα, διαφορετικά false. Μια προαιρετική τιμή κριτηρίων ισότητας, <code>equationCriteria</code>, μπορεί να καθοριστεί για τον έλεγχο ισότητας. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε αν η λίστα {1, 2, 3, 4, 5} περιέχει το 3 και το 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Βρείτε αν η λίστα {1, 2, 3, 4, 5} περιέχει το 5 και το 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Υποδεικνύει αν μια λίστα περιλαμβάνει οποιαδήποτε από τις τιμές μιας άλλης λίστας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η λίστα <code>list</code> περιλαμβάνει οποιαδήποτε από τις τιμές μιας άλλης λίστας, <code>values</code>.\r\n        Επιστρέφει true εάν βρέθηκε η τιμή στη λίστα, διαφορετικά false. Μια προαιρετική τιμή κριτηρίων ισότητας, <code>equationCriteria</code>, μπορεί να καθοριστεί για τον έλεγχο ισότητας. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε αν η λίστα {1, 2, 3, 4, 5} περιέχει το 3 ή το 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Βρείτε αν η λίστα {1, 2, 3, 4, 5} περιέχει το 6 ή το 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Επιστρέφει τη συνδιακύμανση μεταξύ των δύο λιστών με αριθμούς.",
        "Documentation.LongDescription": "Επιστρέφει τη συνδιακύμανση μεταξύ των δύο λιστών <code>numberList1</code> και <code>numberList2</code>. Οι λίστες <code>numberList1</code> και <code>numberList2</code> πρέπει να περιέχουν τον ίδιο αριθμό τιμών <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Υπολογίζει τη συνδιακύμανση μεταξύ δύο λιστών.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Επιστρέφει τη διαφορά των δύο λιστών που δόθηκαν.",
        "Documentation.LongDescription": "Επιστρέφει τα στοιχεία της λίστας <code>list1</code> που δεν εμφανίζονται στη λίστα <code>list2</code>. Υποστηρίζονται διπλότυπες τιμές.\r\n    Μια προαιρετική τιμή κριτηρίων ισότητας, <code>equationCriteria</code>, μπορεί να καθοριστεί για τον έλεγχο ισότητας. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τα στοιχεία στη λίστα {1, 2, 3, 4, 5} που δεν εμφανίζονται στο {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Βρείτε τα στοιχεία της λίστας {1, 2} που δεν εμφανίζονται στη λίστα {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Επιστρέφει μια λίστα τιμών (συμπεριλαμβανομένων πεδίων εγγραφών) που περιέχουν το καθορισμένο κείμενο.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα των τιμών από τη λίστα <code>list</code> οι οποίες περιείχαν την τιμή <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τις τιμές κειμένου της λίστας {\"a\", \"b\", \"ab\"} που συμφωνούν με \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Επιστρέφει το πρώτο σύνολο στοιχείων της λίστας καθορίζοντας πόσα στοιχεία θα επιστραφούν ή μια κατάλληλη συνθήκη.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Εάν καθοριστεί αριθμός, επιστρέφονται μέχρι τόσα στοιχεία. </li>\r\n  <li>Εάν καθοριστεί συνθήκη, επιστρέφονται όλα τα στοιχεία που ικανοποιούν αρχικά τη συνθήκη. Από τη στιγμή που ένα στοιχείο δεν ικανοποιεί τη συνθήκη, δεν εξετάζονται περαιτέρω στοιχεία. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τις αρχικές τιμές της λίστας {3, 4, 5, -1, 7, 8, 2} που είναι μεγαλύτερες του 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Επιστρέφει την τιμή true εάν η συνάρτηση συνθήκης ικανοποιείται από όλες τις τιμές της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει την τιμή <code>true</code> εάν η συνάρτηση συνθήκης, <code>condition</code>, ικανοποιείται από όλες τις τιμές της λίστας <code>list</code>, διαφορετικά επιστρέφει την τιμή <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν όλες οι τιμές της λίστας {11, 12, 13} είναι μεγαλύτερες του 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Προσδιορίστε αν όλες οι τιμές της λίστας {1, 2, 3} είναι μεγαλύτερες του 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Επιστρέφει την τιμή true εάν η συνάρτηση συνθήκης ικανοποιείται από οποιαδήποτε τιμή.",
        "Documentation.LongDescription": "Επιστρέφει την τιμή <code>true</code> εάν η συνάρτηση συνθήκης, <code>condition</code>, ικανοποιείται από οποιαδήποτε τιμή της λίστας <code>list</code>, διαφορετικά επιστρέφει την τιμή <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε εάν οποιαδήποτε από τις τιμές της λίστας {9, 10, 11} είναι μεγαλύτερη του 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Βρείτε εάν οποιαδήποτε από τις τιμές της λίστας τις αρχικές τιμές της λίστας {1, 2, 3} είναι μεγαλύτερη του 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Επιστρέφει τις μέγιστες τιμές στη λίστα. Πρέπει να καθοριστεί ο αριθμός των τιμών που θα επιστραφούν ή μια συνθήκη φιλτραρίσματος.",
        "Documentation.LongDescription": "Επιστρέφει τις μέγιστες τιμές στη λίστα <code>list</code>.\r\n    Μετά την ταξινόμηση των γραμμών, μπορούν να καθοριστούν προαιρετικές παράμετροι για περαιτέρω φιλτράρισμα του αποτελέσματος. Η προαιρετική παράμετρος <code>countOrCondition</code> καθορίζει τον αριθμό των τιμών που θα επιστραφούν ή μια συνθήκη φιλτραρίσματος. Η προαιρετική παράμετρος <code>comparisonCriteria</code> καθορίζει τον τρόπο σύγκρισης των τιμών στη λίστα.\r\n <ul>\r\n        <li> <code>list</code>: Η λίστα τιμών.</li>\r\n        <li> <code>countOrCondition</code>: Εάν καθοριστεί αριθμός, επιστρέφεται μια λίστα με έως <code>countOrCondition</code> στοιχεία σε αύξουσα σειρά. Εάν καθοριστεί συνθήκη, επιστρέφεται μια λίστα με τα στοιχεία που ικανοποιούν αρχικά τη συνθήκη. Από τη στιγμή που ένα στοιχείο δεν ικανοποιεί τη συνθήκη, δεν εξετάζονται περαιτέρω στοιχεία.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Optional]</i> Μια προαιρετική τιμή <code>comparisonCriteria</code> μπορεί να καθοριστεί προκειμένου να προσδιορίσει τον τρόπο σύγκρισης των στοιχείων της λίστας. Εάν αυτή η παράμετρος είναι null, χρησιμοποιείται η προεπιλεγμένη συνάρτηση σύγκρισης.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Επιστρέφει τις ελάχιστες τιμές στη λίστα. Μπορεί να καθοριστεί ο αριθμός των τιμών που θα επιστραφούν ή μια συνθήκη φιλτραρίσματος.",
        "Documentation.LongDescription": "Επιστρέφει τις ελάχιστες τιμές στη λίστα <code>list</code>. \r\n    Η παράμετρος <code>countOrCondition</code> καθορίζει τον αριθμό των τιμών που θα επιστραφούν ή μια συνθήκη φιλτραρίσματος. Η προαιρετική παράμετρος <code>comparisonCriteria</code> καθορίζει τον τρόπο σύγκρισης των τιμών στη λίστα.\r\n <ul>\r\n        <li> <code>list</code>: Η λίστα τιμών.</li>\r\n        <li> <code>countOrCondition</code>: Εάν καθοριστεί αριθμός, επιστρέφεται μια λίστα με έως <code>countOrCondition</code> στοιχεία σε αύξουσα σειρά. Εάν καθοριστεί συνθήκη, επιστρέφεται μια λίστα με τα στοιχεία που ικανοποιούν αρχικά τη συνθήκη. Από τη στιγμή που ένα στοιχείο δεν ικανοποιεί τη συνθήκη, δεν εξετάζονται περαιτέρω στοιχεία. Εάν αυτή η παράμετρος είναι null, επιστρέφεται η μοναδική μικρότερη τιμή.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Optional]</i> Μια προαιρετική τιμή <code>comparisonCriteria</code> μπορεί να καθοριστεί προκειμένου να προσδιορίσει τον τρόπο σύγκρισης των στοιχείων της λίστας. Εάν αυτή η παράμετρος είναι null, χρησιμοποιείται η προεπιλεγμένη συνάρτηση σύγκρισης.\r \n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τις 5 μικρότερες τιμές στη λίστα <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Επιστρέφει μια λίστα τιμών αριθμών με βάση μια αρχική τιμή, το πλήθος και προαιρετικά τηv επαυξητική τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τιμών αριθμών με βάση μια αρχική τιμή, το πλήθος και προαιρετικά τηv επαυξητική τιμή. Η προεπιλεγμένη τιμή επαύξησης είναι 1.\r\n<ul>\r\n   <li><code>start</code>: Η αρχική τιμή της λίστας.</li>\r\n   <li><code>count</code>: Ο αριθμός των τιμών που θα δημιουργηθούν.</li>\r\n   <li><code>increment</code>: <i>[Προαιρετική]</i> Η τιμή επαύξησης. Εάν παραλειφθεί, οι τιμές αυξάνονται κατά 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα 10 διαδοχικών αριθμών που αρχίζουν από το 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Δημιουργήστε μια λίστα 10 που αρχίζουν από το 1, με βήμα επαύξησης 2 για κάθε επόμενο αριθμό.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Επιστρέφει ένα ή περισσότερα εκατοστημόρια που αντιστοιχούν στις δεδομένες πιθανότητες.",
        "Documentation.LongDescription": "Επιστρέφει ένα ή περισσότερα δείγματα εκατοστημορίων από τη λίστα <code>list</code>. Εάν η τιμή <code>percentiles</code> είναι ένας αριθμός μεταξύ 0,0 και 1,0, θα αντιμετωπιστεί ως εκατοστημόριο και το αποτέλεσμα θα είναι\r\n    μια μεμονωμένη τιμή που αντιστοιχεί σε αυτή την πιθανότητα. Αν η τιμή <code>percentiles</code> είναι μια λίστα αριθμών με τιμές μεταξύ 0,0 και 1,0, το αποτέλεσμα θα είναι μια λίστα εκατοστημορίων\r\n    που αντιστοιχεί στην πιθανότητα εισόδου. Η επιλογή PercentileMode στο <code>options</code> μπορεί να χρησιμοποιηθεί από έμπειρους χρήστες για επιλογή πιο συγκεκριμένης μεθόδου παρεμβολής, αλλά δεν συνιστάται για τις περισσότερες χρήσεις.\r\n    Τα προκαθορισμένα σύμβολα <code>PercentileMode.ExcelInc</code> και <code>PercentileMode.ExcelExc</code> αντιστοιχούν στις μεθόδους παρεμβολής που χρησιμοποιούνται από τις συναρτήσεις του Excel\r\n    <code>PERCENTILE.INC</code> και <code>PERCENTILE.EXC</code>. Η προεπιλεγμένη συμπεριφορά αντιστοιχεί στο <code>PercentileMode.ExcelInc</code>. Τα σύμβολα\r\n    <code>PercentileMode.SqlCont</code> και <code>PercentileMode.SqlDisc</code> αντιστοιχούν στη συμπεριφορά SQL Server για τα <code>PERCENTILE_CONT</code> και\r\n    <code>PERCENTILE_DISC</code>, αντίστοιχα.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το πρώτο τεταρτημόριο της λίστας <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Βρείτε τα τεταρτημόρια της λίστας <code>{5, 3, 1, 7, 9}</code> χρησιμοποιώντας μια μέθοδο παρεμβολής που συμφωνεί με το <code>PERCENTILE.EXC</code> του Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Επιστρέφει τις αποκλίσεις μιας τιμής σε μια λίστα.",
        "Documentation.LongDescription": "Επιστρέφει την απόκλιση με την οποία εμφανίζεται η τιμή <code>value</code> στη λίστα <code>list</code>. Επιστρέφει -1 εάν η τιμή δεν εμφανίζεται.\r\n    Μπορεί να καθοριστεί μια προαιρετική παράμετρος εμφάνισης <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Ο μέγιστος αριθμός εμφανίσεων για αναφορά.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τη θέση στη λίστα {1, 2, 3} όπου εμφανίζεται η τιμή 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Επιστρέφει την πρώτη απόκλιση μιας τιμής σε μια λίστα.",
        "Documentation.LongDescription": "Επιστρέφει την απόκλιση στη λίστα <code>list</code> της πρώτης εμφάνισης μιας τιμής στη λίστα <code>values</code>. Επιστρέφει -1 εάν δεν βρεθεί καμία εμφάνιση.\r\n    Μπορεί να καθοριστεί μια προαιρετική παράμετρος εμφάνισης <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Ο μέγιστος αριθμός εμφανίσεων που μπορεί να επιστραφεί.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την πρώτη θέση στη λίστα {1, 2, 3} όπου εμφανίζεται η τιμή 2 ή η τιμή 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Επιστρέφει ένα υποσύνολο της λίστας αρχίζοντας από μια απόκλιση.",
        "Documentation.LongDescription": "Επιστρέφει ένα υποσύνολο της λίστας αρχίζοντας από την απόκλιση <code>list</code>. Η προαιρετική παράμετρος <code>offset</code> καθορίζει το μέγιστο αριθμό στοιχείων στο υποσύνολο.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το υποσύνολο που αρχίζει στην απόκλιση 6 της λίστας αριθμών 1 έως 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Βρείτε το υποσύνολο με μήκος 2 από την απόκλιση 6, από τη λίστα αριθμών 1 έως 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Καταργεί τα στοιχεία από τη λίστα1 που υπάρχουν στη λίστα.",
        "Documentation.LongDescription": "Καταργεί όλες τις εμφανίσεις των τιμών που δόθηκαν στην <code>list2</code> από την <code>list1</code>. Εάν οι τιμές της <code>list2</code> δεν υπάρχουν στην <code>list1</code>, επιστρέφεται η αρχική λίστα.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε τα στοιχεία της λίστας {2, 4, 6} από τη λίστα {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Καταργεί όλες τις εμφανίσεις των τιμών εισόδου.",
        "Documentation.LongDescription": "Καταργεί όλες τις εμφανίσεις των τιμών που δόθηκαν στην <code>list2</code> από την <code>list1</code>. Εάν οι τιμές της <code>list2</code> δεν υπάρχουν στην <code>list1</code>, επιστρέφεται η αρχική λίστα.\r\n    Μια προαιρετική τιμή κριτηρίων ισότητας, <code>equationCriteria</code>, μπορεί να καθοριστεί για τον έλεγχο ισότητας. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα από τη λίστα {1, 2, 3, 4, 5, 5} χωρίς τα {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Καταργεί το πλήθος των τιμών που ξεκινούν από την καθορισμένη θέση.",
        "Documentation.LongDescription": "Καταργεί <code>count</code> τιμές από τη λίστα <code>list</code> που ξεκινούν από την καθορισμένη θέση, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε 3 τιμές από τη λίστα {1, 2, 3, 4, -6, -2, -1, 5} ξεκινώντας από τον δείκτη 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Επιστρέφει μια λίστα με το πλήθος των επαναλήψεων της αρχικής λίστας.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα με <code>count</code> επαναλήψεις της αρχικής λίστας, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα στην οποία επαναλαμβάνονται 3 φορές τα {1, 2}.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Εφαρμόζει κάθε αντικατάσταση των { old, new }.",
        "Documentation.LongDescription": "Εκτελεί τις δεδομένες αντικαταστάσεις στη λίστα <code>list</code>. Η λειτουργία αντικατάστασης <code>replacements</code> αποτελείται από μια λίστα δύο τιμών, την παλιά τιμή και τη νέα τιμή, οι οποίες παρέχονται σε λίστα.\r\n    Μια προαιρετική τιμή κριτηρίων ισότητας, <code>equationCriteria</code>, μπορεί να καθοριστεί για τον έλεγχο ισότητας.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα από τη λίστα {1, 2, 3, 4, 5} αντικαθιστώντας την τιμή 5 με -5 και την τιμή 1 με -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Επιστρέφει μια λίστα τιμών που ικανοποιούν τη συνθήκη.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα των τιμών από τη λίστα <code>list</code>, οι οποίες ικανοποιούν τη συνθήκη επιλογής <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τις τιμές της λίστας {1, -3, 4, 9, -2} που είναι μεγαλύτερες του 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Διαιρεί την καθορισμένη λίστα σε μια λίστα με λίστες χρησιμοποιώντας το καθορισμένο μέγεθος σελίδας.",
        "Documentation.LongDescription": "Διαιρεί <code>list</code> σε μια λίστα λιστών όπου το πρώτο στοιχείο της λίστας εξόδου είναι μια λίστα που περιέχει τα πρώτα στοιχεία <code>pageSize</code> από\r\n    τη λίστα προέλευσης, το επόμενο στοιχείο της λίστας εξόδου είναι μια λίστα που περιέχει τα επόμενα στοιχεία <code>pageSize</code> από τη λίστα προέλευσης,  και ούτω καθεξής.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Επιστρέφει μια νέα λίστα με τις τιμές που υπολογίζονται από αυτήν τη λίστα.",
        "Documentation.LongDescription": "Επιστρέφει μια νέα λίστα τιμών εφαρμόζοντας τη συνάρτηση μετασχηματισμού <code>transform</code> στη λίστα <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Προσθέστε 1 σε κάθε τιμή της λίστας {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Επιστρέφει το τόξο εφαπτομένης του πηλίκου των δύο αριθμών.",
        "Documentation.LongDescription": "Επιστρέφει το τόξο εφαπτομένης του πηλίκου των δύο αριθμών <code>y</code> και <code>x</code>. Η διαίρεση συντάσσεται ως <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα μιας λειτουργίας bit \"And\" μεταξύ των δύο εισόδων.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα μιας λειτουργίας bit \"And\" μεταξύ του <code>number1</code> και του <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα μιας λειτουργίας bit \"Or\" μεταξύ των δύο εισόδων.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα μιας λειτουργίας bit \"Or\" μεταξύ του <code>number1</code> και του <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Μετακινεί το σύνολο bit προς τα αριστερά.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα μιας μετακίνησης λειτουργίας bit προς τα αριστερά στο <code>number1</code>, κατά τον καθορισμένο αριθμό bit <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Μετακινεί το σύνολο bit προς τα δεξιά.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα μιας μετακίνησης λειτουργίας bit προς τα δεξιά στο <code>number1</code>, κατά τον καθορισμένο αριθμό bit <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα μιας λειτουργίας bit \"XOR\" (Exclusive-OR) μεταξύ των δύο εισόδων.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα μιας λειτουργίας bit \"XOR\" (Exclusive-OR) μεταξύ του <code>number1</code> και του <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Επιστρέφει τον αριθμό των μοναδικών συνδυασμών.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό των μοναδικών συνδυασμών από μια λίστα στοιχείων <code>setSize</code> με καθορισμένο μέγεθος συνδυασμού <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Ο αριθμός των στοιχείων στη λίστα.</li>\r\n    <li><code>combinationSize</code>: Ο αριθμός των στοιχείων σε κάθε συνδυασμό.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τον αριθμό των συνδυασμών από ένα σύνολο 5 στοιχείων όπου κάθε συνδυασμός είναι μια ομάδα των 3.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Διαιρεί δύο αριθμούς και επιστρέφει το ακέραιο μέρος του αποτελέσματος.",
        "Documentation.LongDescription": "Επιστρέφει το ακέραιο μέρος του πηλίκου της διαίρεσης ενός αριθμού, <code>number1</code>, με έναν άλλο αριθμό, <code>number2</code>.\r\n    Εάν το <code>number1</code> ή το <code>number2</code> είναι null, η <code>Number.IntegerDivide</code> επιστρέφει την τιμή null.\r\n      <ul>\r\n        <li><code>number1</code>: Ο διαιρετέος.</li>\r\n        <li><code>number2</code>: Ο διαιρέτης.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Διαιρέστε το 6 με το 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Διαιρέστε το 8,3 με το 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Ακέραιος που διαιρεί δύο αριθμούς και επιστρέφει το υπόλοιπο.",
        "Documentation.LongDescription": "Επιστρέφει το υπόλοιπο της διαίρεσης του ακέραιου αριθμού <code>number</code> διά του <code>divisor</code>.\r\n    Εάν το <code>number</code> ή το <code>divisor</code> είναι null, η <code>Number.Mod</code> επιστρέφει την τιμή null.\r\n      <ul>\r\n        <li><code>number</code>: Ο διαιρετέος.</li>\r\n        <li><code>divisor</code>: Ο διαιρέτης.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το υπόλοιπο της διαίρεσης 5 διά 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Επιστρέφει τον αριθμό των μεταθέσεων.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό των μεταθέσεων που μπορούν να δημιουργηθούν από έναν αριθμό στοιχείων <code>setSize</code>, με καθορισμένο μέγεθος μετάθεσης <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τον αριθμό των μεταθέσεων από ένα σύνολο 5 στοιχείων σε ομάδες των 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Υψώνει έναν αριθμό στη δύναμη που δίνεται.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της ύψωσης του <code>number</code> στη δύναμη του <code>power</code>.\r\n    Εάν το <code>number</code> ή το <code>power</code> είναι null, η <code>Number.Power</code> επιστρέφει την τιμή null.\r\n      <ul>\r\n        <li><code>number</code>: Η βάση.</li>\r\n        <li><code>power</code>: Ο εκθέτης.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την τιμή του 5 υψωμένο στη δύναμη του 3 (5 στον κύβο).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Επιστρέφει έναν τυχαίο αριθμό μεταξύ δύο αριθμών.",
        "Documentation.LongDescription": "Επιστρέφει έναν τυχαίο αριθμό μεταξύ <code>bottom</code> και <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε έναν τυχαίο αριθμό μεταξύ1 και 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Επιστρέφει την τιμή του καθορισμένου πεδίου μιας εγγραφής.",
        "Documentation.LongDescription": "Επιστρέφει την τιμή του καθορισμένου <code>field</code> στην <code>record</code>. Εάν το πεδίο δεν βρεθεί, παρουσιάζεται εξαίρεση.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τη τιμή του πεδίου \"CustomerID\" στην εγγραφή.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Επιστρέφει την τιμή του καθορισμένου πεδίου σε μια εγγραφή ή την προεπιλεγμένη τιμή εάν δεν βρεθεί το πεδίο.",
        "Documentation.LongDescription": "Επιστρέφει την τιμή του καθορισμένου πεδίου <code>field</code> στην εγγραφή <code>record</code>. Εάν το πεδίο δεν βρεθεί, επιστρέφεται η προαιρετική <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει την τιμή του πεδίου \"Phone\" στην εγγραφή ή επιστρέψτε null, αν δεν υπάρχει.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Βρίσκει την τιμή του πεδίου \"Phone\" στην εγγραφή ή επιστρέψτε την προεπιλογή, αν δεν υπάρχει.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Επιστρέφει μια εγγραφή από μια λίστα τιμών πεδίων και ένα σύνολο πεδίων που δίνονται.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή από μια <code>list</code> τιμών πεδίων και ένα σύνολο πεδίων που δίνονται.  Η <code>fields</code> μπορεί να καθορίζεται είτε από μια λίστα τιμών κειμένου είτε από έναν τύπο εγγραφής.  Εάν τα πεδία δεν είναι μοναδικά, εμφανίζεται σφάλμα.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Δομήστε μια εγγραφή από μια λίστα τιμών πεδίων και μια λίστα ονομάτων πεδίων.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Δομήστε μια εγγραφή από μια λίστα τιμών πεδίων και έναν τύπο εγγραφής.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Υποδεικνύει αν η εγγραφή έχει τα καθορισμένα πεδία.",
        "Documentation.LongDescription": "Υποδεικνύει αν η εγγραφή <code>record</code> έχει τα πεδία που καθορίζονται στο <code>fields</code>, επιστρέφοντας μια λογική τιμή (true ή false).\r\n    Μπορούν να καθοριστούν πολλαπλές τιμές πεδίων με τη χρήση μιας λίστας.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Ελέγχει αν η εγγραφή έχει το πεδίο \"CustomerID\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Ελέγχει αν η εγγραφή έχει το πεδίο \"CustomerID\" και \"Address\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Καταργεί τα καθορισμένα πεδία από την εγγραφή εισόδου.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή που καταργεί όλα τα πεδία που καθορίζονται στη λίστα <code>fields</code> από την είσοδο <code>record</code>. Εάν το όνομα που καθορίστηκε δεν υπάρχει, παρουσιάζεται εξαίρεση.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Καταργεί το πεδίο \"Price\" από την εγγραφή.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Καταργεί τα πεδία \"Price\" και \"Item\" από την εγγραφή.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Εφαρμόζει μετονομασίες από μια λίστα στη μορφή { old, new }.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή μετά τη μετονομασία των πεδίων της εισόδου <code>record</code> στα νέα ονόματα πεδίων που καθορίζονται στη λίστα <code>renames</code>. Για πολλαπλές μετονομασίες, μπορεί να χρησιμοποιηθεί μια ένθετη λίστα ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Μετονομάζει το πεδίο \"UnitPrice\" σε \"Price\" από την εγγραφή.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Μετονομάζει τα πεδία \"UnitPrice\" σε \"Price\" και \"OrderNum\" σε \"OrderID\" από την εγγραφή.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Αναδιατάσσει τα καθορισμένα πεδία στη νέα σειρά.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή μετά την αναδιάταξη των πεδίων της <code>record</code> με τη σειρά των πεδίων που καθορίζονται στη λίστα <code>fieldOrder</code>. Οι τιμές των πεδίων διατηρούνται και τα πεδία που δεν υπάρχουν στη λίστα <code>fieldOrder</code> παραμένουν στην αρχική τους θέση.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Αναδιατάσσει κάποια από τα πεδία της εγγραφής.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Επιστρέφει μια εγγραφή που περιέχει μόνο τα καθορισμένα πεδία.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή η οποία περιλαμβάνει μόνο τα πεδία που καθορίζονται στη λίστα <code>fields</code> από την είσοδο <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Επιλέγει τα πεδία \"Item\" και \"Price\" στην εγγραφή.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Επιστρέφει μια εγγραφή μετά την εφαρμογή συγκεκριμένων μετασχηματισμών.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή μετά την εφαρμογή των μετασχηματισμών που καθορίζονται στη λίστα <code>transformOperations</code> σε <code>record</code>.\r\n    Μπορούν να μετασχηματιστούν ένα ή περισσότερα πεδία τη δεδομένη στιγμή.\r\n      <div>Στην περίπτωση μετασχηματισμού ενός αρχείου, η <code>transformOperations</code> αναμένεται να είναι μια λίστα με δύο στοιχεία. Το πρώτο στοιχείο στην <code>transformOperations</code> καθορίζει ένα όνομα πεδίου και το δεύτερο στοιχείο στην <code>transformOperations</code> καθορίζει τη συνάρτηση που θα χρησιμοποιηθεί για τον μετασχηματισμό. Για παράδειγμα, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Στην περίπτωση μετασχηματισμού πολλαπλών στοιχείων, η <code>transformOperations</code> αναμένεται να είναι μια λίστα με λίστες, όπου κάθε εσωτερική λίστα είναι ένα ζεύγος του ονόματος πεδίου και της λειτουργίας μετασχηματισμού. Για παράδειγμα, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέπει το πεδίο \"Price\" σε αριθμό.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Μετατρέπει τα πεδία \"OrderID\" και \"Price\" σε αριθμούς.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σύμφωνα με μια μετάβαση από ένα είδος χαρακτήρα σε άλλο. Οι παράμετροι {0} και {1} μπορεί να είναι είτε μια λίστα χαρακτήρων είτε μια συνάρτηση η οποία λαμβάνει έναν χαρακτήρα και επιστρέφει true/false.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σύμφωνα με μια μετάβαση από ένα είδος χαρακτήρα σε άλλο. Οι παράμετροι <code>before</code> και <code>after</code> μπορεί να είναι είτε μια λίστα χαρακτήρων είτε μια συνάρτηση η οποία λαμβάνει έναν χαρακτήρα και επιστρέφει true/false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Διαχωρίστε την είσοδο κάθε φορά που ένα κεφαλαίο ή πεζό γράμμα ακολουθείται από ένα ψηφίο.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Μετατρέπει το παρεχόμενο ερώτημα SQL σε κώδικα M. Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Μετατρέπει το παρεχόμενο ερώτημα <code>sql</code> σε κώδικα M, με τα διαθέσιμα αναγνωριστικά να ορίζονται από <code>environment</code>. Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Επιστρέφει μια καθορισμένη στήλη δεδομένων από τον πίνακα ως λίστα.",
        "Documentation.LongDescription": "Επιστρέφει τη στήλη δεδομένων που καθορίζεται από την <code>column</code> από τον πίνακα <code>table</code> ως λίστα.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει τις τιμές από τη στήλη [Name] στον πίνακα.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Επιστρέφει μια λίστα με τα ονόματα των στηλών που συμφωνούν με τους καθορισμένους τύπους.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα με τα ονόματα των στηλών από τον πίνακα <code>table</code> που συμφωνούν με τους τύπους που καθορίζονται στο <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει τα ονόματα των στηλών τύπου Number.Type από τον πίνακα.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Υποδεικνύει αν η καθορισμένη εγγραφή εμφανίζεται ως γραμμή στον πίνακα.",
        "Documentation.LongDescription": "Υποδεικνύει αν η καθορισμένη εγγραφή, <code>row</code>, εμφανίζεται ως γραμμή στον <code>table</code>.\r\n    Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>equationCriteria</code> για τον έλεγχο της σύγκρισης μεταξύ των γραμμών του πίνακα.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν ο πίνακας περιέχει τη γραμμή.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Προσδιορίζει αν ο πίνακας περιέχει τη γραμμή.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Προσδιορίζει αν ο πίνακας περιέχει τη γραμμή συγκρίνοντας μόνο τη στήλη [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Υποδεικνύει αν όλες οι καθορισμένες εγγραφές εμφανίζονται ως γραμμές στον πίνακα.",
        "Documentation.LongDescription": "Υποδεικνύει αν όλες οι καθορισμένες εγγραφές στη λίστα εγγραφών <code>rows</code> εμφανίζονται ως γραμμές στον <code>table</code>.\r\n    Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>equationCriteria</code> για τον έλεγχο της σύγκρισης μεταξύ των γραμμών του πίνακα.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν ο πίνακας περιέχει όλες τις γραμμές, συγκρίνοντας μόνο τη στήλη [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Προσδιορίζει αν ο πίνακας περιέχει όλες τις γραμμές.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Υποδεικνύει αν κάποιες από τις καθορισμένες εγγραφές εμφανίζονται ως γραμμές στον πίνακα.",
        "Documentation.LongDescription": "Υποδεικνύει αν κάποιες από τις καθορισμένες εγγραφές στη λίστα εγγραφών <code>rows</code> εμφανίζονται ως γραμμές στον <code>table</code>.\r\n    Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>equationCriteria</code> για τον έλεγχο της σύγκρισης μεταξύ των γραμμών του πίνακα.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν ο πίνακας <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> περιέχει τις γραμμές <code>[a = 1, b = 2]</code> ή <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Προσδιορίστε αν ο πίνακας <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> περιέχει τις γραμμές <code>[a = 1, b = 3]</code> ή <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Προσδιορίστε αν ο πίνακας <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> περιέχει τις γραμμές <code>[a = 1, b = 3]</code> ή <code>[a = 3, b = 5]</code> συγκρίνοντας μόνο τη στήλη [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Υποδεικνύει εάν ο πίνακας περιέχει τις καθορισμένες στήλες.",
        "Documentation.LongDescription": "Υποδεικνύει εάν το <code>table</code> περιέχει τις καθορισμένες στήλες, <code>columns</code>. Επιστρέφει <code>true</code> εάν ο πίνακας περιέχει τις στήλες, <code>false</code> διαφορετικά.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν ο πίνακας έχει τη στήλη [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Βρίσκει αν ο πίνακας έχει τη στήλη [Name] και [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Υποδεικνύει αν όλες οι γραμμές του πίνακα ικανοποιούν τη δεδομένη συνθήκη.",
        "Documentation.LongDescription": "Υποδεικνύει αν όλες οι γραμμές του <code>table</code> ικανοποιούν τη δεδομένη <code>condition</code>. Επιστρέφει <code>true</code> εάν οι γραμμές συμφωνούν, διαφορετικά <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν όλες οι τιμές γραμμής στη στήλη [a] είναι άρτιες στον πίνακα.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Βρείτε εάν όλες οι τιμές γραμμής είναι [a = 1, b = 2], στον πίνακα <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Υποδεικνύει αν οποιαδήποτε από τις γραμμές του πίνακα ικανοποιεί τη δεδομένη συνθήκη.",
        "Documentation.LongDescription": "Υποδεικνύει αν οποιαδήποτε από τις γραμμές του <code>table</code> ικανοποιούν τη δεδομένη <code>condition</code>. Επιστρέφει <code>true</code> εάν συμφωνεί οποιαδήποτε γραμμή, διαφορετικά <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν οποιαδήποτε από τις τιμές γραμμής στη στήλη [a] είναι άρτια στον πίνακα <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Προσδιορίστε αν οποιαδήποτε από τις τιμές γραμμής είναι [a = 1, b = 2], στον πίνακα <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Επιστρέφει τη μεγαλύτερη γραμμή ή την προεπιλεγμένη τιμή χρησιμοποιώντας τα δεδομένα κριτήρια.",
        "Documentation.LongDescription": "Επιστρέφει τη μεγαλύτερη γραμμή στο <code>table</code> χρησιμοποιώντας τη δεδομένη <code>comparisonCriteria</code>. Εάν ο πίνακας είναι κενός, επιστρέφεται η προαιρετική τιμή <code>default</code>. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τη γραμμή με τη μεγαλύτερη τιμή στη στήλη [a] στον πίνακα <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Βρείτε τη γραμμή με τη μεγαλύτερη τιμή στη στήλη [a] στον πίνακα <code>({})</code>. Εάν είναι κενή, επιστρέφεται η τιμή -1.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Επιστρέφει τη μικρότερη γραμμή ή μια προεπιλεγμένη τιμή χρησιμοποιώντας τα δεδομένα κριτήρια.",
        "Documentation.LongDescription": "Επιστρέφει τη μικρότερη γραμμή του <code>table</code> χρησιμοποιώντας τη δεδομένη <code>comparisonCriteria</code>. Εάν ο πίνακας είναι κενός, επιστρέφεται η προαιρετική τιμή <code>default</code>.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τη γραμμή με τη μικρότερη τιμή στη στήλη [a] στον πίνακα.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Βρίσκει τη γραμμή με τη μικρότερη τιμή στη στήλη [a] στον πίνακα. Αν είναι κενή, επιστρέφεται η τιμή -1.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Επιστρέφει τη θέση ή τις θέσεις της γραμμής μέσα στον πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τη θέση γραμμής της πρώτης εμφάνισης της <code>row</code> στην καθορισμένη <code>table</code>. Επιστρέφει -1 εάν δεν βρεθεί καμία εμφάνιση.\r\n    <ul>\r\n       <li><code>table</code>: Ο πίνακας εισόδου.</li>\r\n       <li><code>row</code>: Η γραμμή του πίνακα της οποίας θα βρεθεί η θέση.</li>\r\n       <li><code>occurrence</code>: <i>[Προαιρετική]</i> Καθορίζει ποιες εμφανίσεις της γραμμής θα επιστραφούν.</li>\r\n       <li><code>equationCriteria</code>: <i>[Προαιρετική]</i> Ελέγχει τη σύγκριση μεταξύ των γραμμών του πίνακα.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τη θέση της πρώτης εμφάνισης της [a = 2, b = 4] στον πίνακα <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Βρείτε τη θέση της δεύτερης εμφάνισης της [a = 2, b = 4] στον πίνακα <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Βρείτε τη θέση όλων των εμφανίσεων της [a = 2, b = 4] στον πίνακα <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Επιστρέφει τη θέση ή τις θέσεις της οποιασδήποτε από τις καθορισμένες γραμμές μέσα στον πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τις θέσεις των γραμμών από τη <code>table</code> της πρώτης εμφάνισης της λίστας των <code>rows</code>. Επιστρέφει -1 εάν δεν βρεθεί καμία εμφάνιση.\r\n    <ul>\r\n    <li><code>table</code>: Ο πίνακας εισόδου.</li>\r\n       <li><code>rows</code>:  Η λίστα με τις γραμμές του πίνακα των οποίων θα βρεθούν οι θέσεις.</li>\r\n       <li><code>occurrence</code>: <i>[Προαιρετική]</i> Καθορίζει ποιες εμφανίσεις της γραμμής θα επιστραφούν.</li>\r\n       <li><code>equationCriteria</code>: <i>[Προαιρετική]</i> Ελέγχει τη σύγκριση μεταξύ των γραμμών του πίνακα.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τη θέση της πρώτης εμφάνισης της [a = 2, b = 4] ή της [a = 6, b = 8] στον πίνακα <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Βρείτε τη θέση όλων των εμφανίσεων της [a = 2, b = 4] ή της [a = 6, b = 8] στον πίνακα <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Διαιρεί τον καθορισμένο πίνακα σε μια λίστα με πίνακες χρησιμοποιώντας το καθορισμένο μέγεθος σελίδας.",
        "Documentation.LongDescription": "Διαιρεί <code>table</code> σε μια λίστα πινάκων όπου το πρώτο στοιχείο της λίστας είναι ένας πίνακας που περιέχει τις πρώτες <code>pageSize</code> γραμμές από\r\n    πίνακα προέλευσης, το επόμενο στοιχείο της λίστας είναι ένας πίνακας που περιέχει τις επόμενες γραμμές <code>pageSize</code> από τον πίνακα προέλευσης,  και ούτω καθεξής.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Διαιρέστε έναν πίνακα πέντε εγγραφών σε πίνακες με δύο εγγραφές στον καθένα.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Επιστρέφει μια λίστα που περιέχει τις καθορισμένες πρώτες γραμμές καθώς και τις υπολειπόμενες.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα που περιέχει δύο πίνακες: έναν πίνακα με τις πρώτες N σειρές <code>table</code> (όπως καθορίζεται από το <code>count</code>) και έναν πίνακα που περιέχει τις υπολειπόμενες σειρές <code>table</code>.\r\n\r\nΕάν οι πίνακες της λίστας που προκύπτει απαριθμούνται ακριβώς μία φορά και κατά σειρά, η συνάρτηση θα απαριθμεί το <code>table</code> μόνο μία φορά.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Επιστροφή των πρώτων δύο γραμμών του πίνακα και των υπολειπόμενων γραμμών του πίνακα.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Μετασχηματίζει τις γραμμές του πίνακα χρησιμοποιώντας την καθορισμένη συνάρτηση μετασχηματισμού.",
        "Documentation.LongDescription": "Δημιουργεί μια <code>list</code> εφαρμόζοντας τη λειτουργία <code>transform</code> σε κάθε γραμμή του <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Μετασχηματίστε τις γραμμές ενός πίνακα σε μια λίστα αριθμών.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Μετασχηματίστε τις γραμμές ενός αριθμητικού πίνακα σε εγγραφές κειμένου.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Επιστρέφει το τμήμα του <code>text</code> μετά το καθορισμένο <code>delimiter</code>.\r\n    Ένα προαιρετικό αριθμητικό <code>index</code> υποδεικνύει ποια εμφάνιση του <code>delimiter</code> θα πρέπει να ληφθεί υπόψη.\r\n    Μια προαιρετική λίστα <code>index</code> υποδεικνύει ποια εμφάνιση του <code>delimiter</code> θα πρέπει να ληφθεί υπόψη, καθώς και αν η δημιουργία ευρετηρίου θα πρέπει να γίνει από την αρχή ή το τέλος των δεδομένων εισαγωγής.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Να γίνει λήψη του τμήματος του \"111-222-333\" μετά το (πρώτο) ενωτικό.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Να γίνει λήψη του τμήματος του \"111-222-333\" μετά το δεύτερο ενωτικό.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Να γίνει λήψη του τμήματος του \"111-222-333\" μετά το δεύτερο ενωτικό από το τέλος.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Επιστρέφει τον χαρακτήρα στη συγκεκριμένη θέση.",
        "Documentation.LongDescription": "Επιστρέφει τον χαρακτήρα της τιμής κειμένου, <code>text</code> στη θέση <code>index</code>. Ο πρώτος χαρακτήρας του κειμένου είναι στη θέση 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τον χαρακτήρα στη θέση 4 της συμβολοσειράς \"Hello, World\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Επιστρέφει το τμήμα του <code>text</code> πριν από το καθορισμένο <code>delimiter</code>.\r\n    Ένα προαιρετικό αριθμητικό <code>index</code> υποδεικνύει ποια εμφάνιση του <code>delimiter</code> θα πρέπει να ληφθεί υπόψη.\r\n    Μια προαιρετική λίστα <code>index</code> υποδεικνύει ποια εμφάνιση του <code>delimiter</code> θα πρέπει να ληφθεί υπόψη, καθώς και αν η δημιουργία ευρετηρίου θα πρέπει να γίνει από την αρχή ή το τέλος των δεδομένων εισαγωγής.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Να γίνει λήψη του τμήματος του \"111-222-333\" πριν από το (πρώτο) ενωτικό.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Να γίνει λήψη του τμήματος του \"111-222-333\" πριν από το δεύτερο ενωτικό.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Να γίνει λήψη του τμήματος του \"111-222-333\" πριν από το δεύτερο ενωτικό από το τέλος.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Επιστρέφει αν το κείμενο περιέχει τη δευτερεύουσα συμβολοσειρά.",
        "Documentation.LongDescription": "Εντοπίζει εάν <code>text</code> περιέχει την τιμή <code>substring</code>. Επιστρέφει την τιμή true εάν βρεθεί η τιμή. Αυτή η συνάρτηση δεν υποστηρίζει χαρακτήρες μπαλαντέρ ή κανονικές παραστάσεις.\r\n      <br>\r\n      <br>\r\n      Το προαιρετικό όρισμα <code>comparer</code> μπορεί να χρησιμοποιηθεί για τον καθορισμό συγκρίσεων με διάκριση πεζών-κεφαλαίων ή κουλτούρας και τοπικών ρυθμίσεων.\r\n      Οι ακόλουθες ενσωματωμένες συγκρίσεις είναι διαθέσιμες στη γλώσσα τύπων:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Χρησιμοποιείται για την εκτέλεση τακτικών συγκρίσεων με διάκριση πεζών-κεφαλαίων</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>:  Χρησιμοποιείται για την εκτέλεση τακτικών συγκρίσεων χωρίς διάκριση πεζών-κεφαλαίων</li>\r\n        <li><code>Comparer.FromCulture</code>: Χρησιμοποιείται για την εκτέλεση σύγκρισης με επίγνωση κουλτούρας</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε αν το κείμενο \"Hello World\" περιέχει τη λέξη \"Hello\".",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Βρείτε αν το κείμενο \"Hello World\" περιέχει τη λέξη \"hello\".",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Βρείτε αν το κείμενο \"Hello World\" περιέχει \"hello\", χρησιμοποιώντας σύγκριση χωρίς διάκριση πεζών-κεφαλαίων.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Επιστρέφει τους τελευταίους χαρακτήρες του κειμένου.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>text</code> που είναι οι τελευταίοι <code>count</code> χαρακτήρες της τιμής <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε τους τελευταίους 5 χαρακτήρες του κειμένου \"Hello, World\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Υποδεικνύει αν το κείμενο τελειώνει στην καθορισμένη τιμή.",
        "Documentation.LongDescription": "Υποδεικνύει εάν το παρεχόμενο κείμενο, <code>text</code>, τελειώνει με την καθορισμένη τιμή, <code>substring</code>. Η ένδειξη κάνει διάκριση πεζών-κεφαλαίων.\r\n\r\n      <div>\r\n        <code>comparer</code> είναι <code>Comparer</code> ο οποίος χρησιμοποιείται για τον έλεγχο της σύγκρισης. Οι συγκρίσεις μπορούν να χρησιμοποιηθούν για την παροχή συγκρίσεων χωρίς διάκριση πεζών-κεφαλαίων ή κουλτούρας και τοπικών ρυθμίσεων.\r\n      </div>\r\n      <div>\r\n        Τα παρακάτω ενσωματωμένα προγράμματα σύγκρισης είναι διαθέσιμα στη γλώσσα τύπων:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Χρησιμοποιείται για την εκτέλεση ακριβούς τακτικού δείκτη σύγκρισης</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Χρησιμοποιείται για την εκτέλεση μιας ακριβούς σύγκρισης χωρίς διάκριση πεζών-κεφαλαίων</li>\r\n         <li><code>Comparer.FromCulture</code>: Χρησιμοποιείται για την εκτέλεση σύγκρισης με επίγνωση κουλτούρας</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ελέγξτε αν το \"Hello, World\" τελειώνει σε \"world\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Ελέγξτε αν το \"Hello, World\" τελειώνει σε \"World\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Επιστρέφει μορφοποιημένο κείμενο από μια συμβολοσειρά και ορίσματα μορφοποίησης.",
        "Documentation.LongDescription": "Επιστρέφει μορφοποιημένο κείμενο που δημιουργείται εφαρμόζοντας το <code>arguments</code> από μια λίστα ή εγγραφή σε μια συμβολοσειρά μορφοποίησης <code>formatString</code>. Ενδέχεται επίσης να παρέχεται μια προαιρετική τιμή <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Μορφοποιήστε μια λίστα αριθμών.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Μορφοποιήστε διαφορετικούς τύπους δεδομένων από μια εγγραφή σύμφωνα με την κουλτούρα Ελληνικών Ελλάδας.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Επιστρέφει τη δευτερεύουσα συμβολοσειρά μέχρι ένα συγκεκριμένο μήκος.",
        "Documentation.LongDescription": "Επιστρέφει <code>count</code> χαρακτήρες ή μέχρι το τέλος του στοιχείου <code>text</code>, στη μετατόπιση <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Εντοπίζει τη δευτερεύουσα συμβολοσειρά του κειμένου \"Hello World\", η οποία ξεκινά στη θέση ευρετηρίου 6 και επεκτείνεται για 5 χαρακτήρες.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Εντοπίζει τη δευτερεύουσα συμβολοσειρά του κειμένου \"Hello World\", η οποία ξεκινά στη θέση ευρετηρίου 6 μέχρι το τέλος της.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Επιστρέφει κείμενο συγκεκριμένου μήκους συμπληρώνοντας το τέλος του παρεχόμενου κειμένου.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>text</code> συμπληρωμένη μέχρι το μήκος <code>count</code> εισάγοντας κενά διαστήματα στο τέλος της τιμής κειμένου <code>text</code>.\r\n    Μπορεί να χρησιμοποιηθεί ένας προαιρετικός χαρακτήρας <code>character</code> για τον καθορισμό του χαρακτήρα που χρησιμοποιείται για συμπλήρωση. Ο προεπιλεγμένος χαρακτήρας συμπλήρωσης είναι το διάστημα.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Συμπληρώστε το τέλος μιας τιμής κειμένου ώστε να έχει μήκος 10 χαρακτήρες.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Συμπληρώστε το τέλος μιας τιμής κειμένου με \"|\" ώστε να έχει μήκος 10 χαρακτήρες.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Επιστρέφει κείμενο συγκεκριμένου μήκους συμπληρώνοντας την αρχή του παρεχόμενου κειμένου.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>text</code> συμπληρωμένη μέχρι το μήκος <code>count</code> εισάγοντας κενά διαστήματα στην αρχή της τιμής κειμένου <code>text</code>.\r\n    Μπορεί να χρησιμοποιηθεί ένας προαιρετικός χαρακτήρας <code>character</code> για τον καθορισμό του χαρακτήρα που χρησιμοποιείται για συμπλήρωση. Ο προεπιλεγμένος χαρακτήρας συμπλήρωσης είναι το διάστημα.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Συμπληρώστε την αρχή μιας τιμής κειμένου ώστε να έχει μήκος 10 χαρακτήρες.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Συμπληρώστε την αρχή μιας τιμής κειμένου με \"|\" ώστε να έχει μήκος 10 χαρακτήρες.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Επιστρέφει την πρώτη θέση της τιμής (-1 εάν δεν βρεθεί).",
        "Documentation.LongDescription": "Επιστρέφει τη θέση της καθορισμένης εμφάνισης της τιμής κειμένου <code>substring</code> που βρέθηκε στο <code>text</code>.\r\n    Μπορεί να χρησιμοποιηθεί μια προαιρετική παράμετρος <code>occurrence</code> για τον καθορισμό της θέσης εμφάνισης που θα επιστραφεί (πρώτη εμφάνιση από προεπιλογή).\r\n    Επιστρέφει -1 εάν δεν βρέθηκε <code>substring</code>.\r\n\r\n      <div>\r\n        <code>comparer</code> είναι <code>Comparer</code> που χρησιμοποιείται για τον έλεγχο της σύγκρισης. Οι συγκρίσεις μπορούν να χρησιμοποιηθούν για την παροχή συγκρίσεων χωρίς διάκριση πεζών-κεφαλαίων ή κουλτούρας και τοπικών ρυθμίσεων.\r\n      </div>\r\n      <div>\r\n        Τα παρακάτω ενσωματωμένα προγράμματα σύγκρισης είναι διαθέσιμα στη γλώσσα τύπων:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>:  Χρησιμοποιείται για την εκτέλεση ακριβούς τακτικού δείκτη σύγκρισης</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Χρησιμοποιείται για την εκτέλεση μιας ακριβούς σύγκρισης χωρίς διάκριση πεζών-κεφαλαίων</li>\r\n        <li><code>Comparer.FromCulture</code>: Χρησιμοποιείται για την εκτέλεση σύγκρισης με επίγνωση κουλτούρας</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε τη θέση της πρώτης εμφάνισης του \"World\" στο κείμενο \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Λάβετε τη θέση της τελευταίας εμφάνισης του \"World\" στο κείμενο \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Επιστρέφει την πρώτη θέση της τιμής κειμένου οποιουδήποτε χαρακτήρα στη λίστα (-1 εάν δεν βρεθεί).",
        "Documentation.LongDescription": "Επιστρέφει την πρώτη θέση οποιουδήποτε χαρακτήρα στη λίστα <code>characters</code> που βρίσκεται στο <code>text</code>.\n    Μπορεί να χρησιμοποιηθεί μια προαιρετική παράμετρος <code>occurrence</code> για τον καθορισμό της θέσης εμφάνισης που θα επιστραφεί.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την πρώτη θέση των \"W\" ή \"H\" στο κείμενο \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Βρείτε όλες τις θέσεις \"W\" ή \"H\" στο κείμενο \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Επιστρέφει τη δευτερεύουσα συμβολοσειρά που βρέθηκε στην απόκλιση.",
        "Documentation.LongDescription": "Επιστρέφει τη δευτερεύουσα συμβολοσειρά από το κείμενο <code>text</code> που βρέθηκε στην απόκλιση <code>offset</code>.\r\n    Μπορεί να συμπεριληφθεί μια προαιρετική παράμετρος, <code>count</code>, για τον καθορισμό του αριθμού των χαρακτήρων που θα επιστραφούν. Εμφανίζεται σφάλμα αν οι χαρακτήρες δεν επαρκούν.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τη δευτερεύουσα συμβολοσειρά από το κείμενο \"Hello World\" ξεκινώντας από το δείκτη 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Βρείτε τη δευτερεύουσα συμβολοσειρά από το κείμενο \"Hello World Hello\" ξεκινώντας από το δείκτη 6 και σε εύρος 5 χαρακτήρων.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Καταργεί όλες τις εμφανίσεις του παρεχόμενου χαρακτήρα ή λίστας χαρακτήρων από την τιμή κειμένου εισόδου.",
        "Documentation.LongDescription": "Επιστρέφει ένα αντίγραφο της τιμής κειμένου <code>text</code> έχοντας καταργήσει όλους τους χαρακτήρες από τη <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε τους χαρακτήρες , και ; από την τιμή κειμένου.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Καταργεί ένα πλήθος χαρακτήρων ξεκινώντας από την παρεχόμενη απόκλιση.",
        "Documentation.LongDescription": "Επιστρέφει ένα αντίγραφο της τιμής κειμένου <code>text</code> έχοντας καταργήσει όλους τους χαρακτήρες από τη θέση <code>offset</code>.\r\n    Μπορεί να συμπεριληφθεί μια προαιρετική παράμετρος, <code>count</code>, για τον καθορισμό του αριθμού των χαρακτήρων που θα καταργηθούν. Η προεπιλεγμένη τιμή της παραμέτρου <code>count</code> είναι 1. Οι τιμές θέσης ξεκινούν από το 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε 1 χαρακτήρα από την τιμή κειμένου \"ABEFC\" στη θέση 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Καταργήστε δύο χαρακτήρες από την τιμή κειμένου \"ABEFC\" ξεκινώντας από τη θέση 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Επιστρέφει μια τιμή κειμένου που αποτελείται από το κείμενο εισόδου το οποίο έχει επαναληφθεί έναν καθορισμένο αριθμό φορών.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή κειμένου που αποτελείται από το κείμενο εισόδου <code>text</code> το οποίο έχει επαναληφθεί <code>count</code> φορές.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Επαναλάβετε το κείμενο \"a\" πέντε φορές.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Επαναλάβετε το κείμενο \"helloworld\" τρεις φορές.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Καταργεί όλες τις εμφανίσεις του δεδομένου χαρακτήρα ή λίστας χαρακτήρων από την τιμή κειμένου εισόδου.",
        "Documentation.LongDescription": "Επιστρέφει ένα αντίγραφο της τιμής κειμένου <code>text</code> έχοντας καταργήσει όλους τους χαρακτήρες που δεν περιέχονται στο <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Επιλέξτε όλους τους χαρακτήρες στην περιοχή από \"a\" έως \"z\" από την τιμή κειμένου.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Διαιρεί το κείμενο μιας λίστας τιμών κειμένου με βάση έναν καθορισμένο οριοθέτη.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τιμών κειμένου που προκύπτει από τη διαίρεση μιας τιμής κειμένου <code>text</code> σύμφωνα με τον καθορισμένο οριοθέτη, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα από την οριοθετημένη με \"|\" τιμή κειμένου \"Name|Address|PhoneNumber\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Επιστρέφει μια λίστα τιμών κειμένου, η οποία έχει διαιρεθεί με οποιονδήποτε χαρακτήρα του οριοθέτη.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τιμών κειμένου η οποία προκύπτει από τη διαίρεση μιας τιμής κειμένου <code>text</code> με βάση οποιονδήποτε χαρακτήρα του καθορισμένου οριοθέτη, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα από την τιμή κειμένου \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Επιστρέφει την αρχή του κειμένου.",
        "Documentation.LongDescription": "Επιστρέφει τους πρώτους <code>count</code> χαρακτήρες του <code>text</code> ως τιμή κειμένου.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε τους πρώτους 5 χαρακτήρες του κειμένου \"Hello, World\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Υποδεικνύει αν το κείμενο ξεκινά με την καθορισμένη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει true εάν η τιμή κειμένου <code>text</code> ξεκινά με την τιμή κειμένου <code>substring</code>.\r\n <ul>\r\n <li><code>text</code>: <i></i>A <code>text</code> η οποία θα αναζητηθεί</li>\r\n        <li><code>substring</code>: <i></i>A <code>text</code> τιμή που θα είναι η δευτερεύουσα συμβολοσειρά Έγινε αναζήτηση στο <code>substring</code></li>\r\n <li><code>comparer</code>: <i>[Optional]</i> A <code>Comparer</code> που χρησιμοποιείται για τον έλεγχο της σύγκρισης. Για παράδειγμα, <code>Comparer.OrdinalIgnoreCase</code> μπορεί να χρησιμοποιηθεί για την εκτέλεση αναζητήσεων χωρίς διάκριση πεζών-κεφαλαίων</li>\r\n </ul>\r\n <div>\r\n<code>comparer</code> είναι ένας <code>Comparer</code> ο οποίος χρησιμοποιείται για τον έλεγχο της σύγκρισης. Οι συγκρίσεις μπορούν να χρησιμοποιηθούν για την παροχή συγκρίσεων χωρίς διάκριση πεζών-κεφαλαίων ή κουλτούρας και τοπικών ρυθμίσεων.\r\n </div>\r\n <div>\r\n Τα παρακάτω ενσωματωμένα προγράμματα σύγκρισης είναι διαθέσιμα στη γλώσσα τύπων:\r\n </div>\r\n <ul>\r\n <li><code>Comparer.Ordinal</code>: Χρησιμοποιείται για την εκτέλεση ακριβούς τακτικού δείκτη σύγκρισης</li>\r\n <li><code>Comparer.OrdinalIgnoreCase</code>: Χρησιμοποιείται για την εκτέλεση μιας ακριβούς σύγκρισης χωρίς διάκριση πεζών-κεφαλαίων</li>\r\n <li><code>Comparer.FromCulture</code>: Χρησιμοποιείται για την εκτέλεση σύγκρισης με επίγνωση κουλτούρας</li>\r\n</ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ελέγξτε αν το κείμενο \"Hello, World\" ξεκινά με το κείμενο \"hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Ελέγξτε αν το κείμενο \"Hello, World\" ξεκινά με το κείμενο \"Hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Επιστρέφει έναν τύπο που αντιπροσωπεύει συναρτήσεις με συγκεκριμένους περιορισμούς παραμέτρων και τύπων επιστροφής.",
        "Documentation.LongDescription": "Δημιουργεί ένα στοιχείο <code>function type</code> από το <code>signature</code>, μια εγγραφή του <code>ReturnType</code> και του <code>Parameters</code> και το <code>min</code>, τον ελάχιστο αριθμό ορισμάτων που απαιτούνται για την κλήση της συνάρτησης.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργεί τον τύπο για μια συνάρτηση που λαμβάνει μια παράμετρο αριθμού με όνομα X και επιστρέφει έναν αριθμό.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Επιστρέφει έναν τύπο που αντιπροσωπεύει εγγραφές με συγκεκριμένους περιορισμούς τύπου για τα πεδία.",
        "Documentation.LongDescription": "Επιστρέφει έναν τύπο που αντιπροσωπεύει εγγραφές με συγκεκριμένους περιορισμούς τύπου για τα πεδία.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε δυναμικά έναν τύπο πίνακα.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Καθορίζει αν μια τιμή του πρώτου τύπου είναι πάντα συμβατή με τον δεύτερο τύπο.",
        "Documentation.LongDescription": "Καθορίζει αν μια τιμή του<code>type1</code> είναι πάντα συμβατή με <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Καθορίστε αν μια τιμή του αριθμού τύπου μπορεί πάντα να αντιμετωπιστεί ως τύπος οποιασδήποτε.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Καθορίστε αν μια τιμή τύπου μπορεί να θεωρηθεί πάντα ως αριθμός τύπου.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Αντικαθιστά τις κλάσεις facet ενός τύπου.",
        "Documentation.LongDescription": "Αντικαθιστά τις κλάσεις facet του <code>type</code> με τις κλάσεις facet που περιέχονται στην εγγραφή <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Επιστρέφει έναν νέο τύπο πίνακα όπου όλα τα κλειδιά έχουν αντικατασταθεί με την καθορισμένη λίστα κλειδιών.",
        "Documentation.LongDescription": "Επιστρέφει έναν νέο τύπο πίνακα με όλα τα κλειδιά να αντικαθίστανται από την καθορισμένη λίστα κλειδιών.<br>\r\n    <br>\r\n    Κάθε κλειδί ορίζεται με χρήση μιας εγγραφής στην ακόλουθη μορφή:\r\n    <ul>\r\n      <li>\r\n        <code>Στήλες</code>: μια λίστα με τα ονόματα των στηλών που ορίζουν το κλειδί\r\n      </li>\r\n      <li>\r\n        <code>Πρωτεύον</code>: <code>true</code> αν το κλειδί είναι το πρωτεύον κλειδί του πίνακα. διαφορετικά, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Η καθορισμένη λίστα κλειδιών επικυρώνεται για να διασφαλιστεί ότι δεν έχουν οριστεί περισσότερα από ένα πρωτεύοντα κλειδιά και ότι όλα τα ονόματα στηλών κλειδιών υπάρχουν στον τύπο πίνακα.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε τις πληροφορίες κλειδιού σε έναν τύπο πίνακα.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Απαλοιφή των πληροφοριών κλειδιού που έχουν οριστεί προηγουμένως σε έναν τύπο πίνακα.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Επιστρέφει τον τύπο μιας στήλης σε έναν πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τον τύπο μιας στήλης <code>column</code> σε έναν τύπο πίνακα <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Επιστρέφει ένα απόλυτο URI που είναι ο συνδυασμός του URI βάσης εισόδου και του σχετικού URI.",
        "Documentation.LongDescription": "Επιστρέφει ένα απόλυτο URI που είναι ο συνδυασμός της εισόδου <code>baseUri</code> και του <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Επιστρέφει το άθροισμα των δύο τιμών.",
        "Documentation.LongDescription": "Επιστρέφει το άθροισμα των <code>value1</code> και <code>value2</code>. Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>precision</code>, από προεπιλογή χρησιμοποιείται η <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Επιστρέφει την τιμή αν είναι συμβατή με τον καθορισμένο τύπο.",
        "Documentation.LongDescription": "Επιστρέφει την τιμή αν είναι συμβατή με τον καθορισμένο τύπο. Αυτό ισοδυναμεί με τον τελεστή \"as\" στο M, με την εξαίρεση ότι μπορεί να δεχτεί αναφορές τύπου αναγνωριστικού, όπως Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Μεταδώστε έναν αριθμό σε έναν αριθμό.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Προσπαθήστε να μεταδώσετε μια τιμή κειμένου σε έναν αριθμό.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Επιστρέφει -1, 0 ή 1 με βάση το εάν η πρώτη τιμή είναι μικρότερη από, ίση ή μεγαλύτερη από τη δεύτερη.",
        "Documentation.LongDescription": "Επιστρέφει -1, 0 ή 1 με βάση το εάν η πρώτη τιμή είναι μικρότερη από, ίση ή μεγαλύτερη από τη δεύτερη.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα της διαίρεσης της πρώτης τιμής με τη δεύτερη.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της διαίρεσης <code>value1</code> διά <code>value2</code>. Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>precision</code>, από προεπιλογή χρησιμοποιείται η <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Επιστρέφει αν δύο τιμές είναι ίσες.",
        "Documentation.LongDescription": "Επιστρέφει true εάν η τιμή <code>value1</code> ισούται με την τιμή <code>value2</code>, διαφορετικά false.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Καθορίζει αν μια τιμή είναι συμβατή με τον καθορισμένο τύπο.",
        "Documentation.LongDescription": "Καθορίζει αν μια τιμή είναι συμβατή με τον καθορισμένο τύπο. Αυτό ισοδυναμεί με τον τελεστή \"is\" στο M, με την εξαίρεση ότι μπορεί να δεχθεί αναφορές τύπου αναγνωριστικού, όπως Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Συγκρίνετε δύο τρόπους για να προσδιορίσετε εάν ένας αριθμός είναι συμβατός με τον αριθμό τύπου.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Επιστρέφει το γινόμενο των δύο τιμών.",
        "Documentation.LongDescription": "Επιστρέφει το διανυσματικό γινόμενο του πολλαπλασιασμού <code>value1</code> επί <code>value2</code>. Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>precision</code>, από προεπιλογή χρησιμοποιείται η <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Αξιολογεί ένα ερώτημα σε σχέση με ένα στόχο.",
        "Documentation.LongDescription": "<p>Αξιολογεί το <code>query</code> έναντι του <code>target</code> χρησιμοποιώντας τις παραμέτρους που καθορίζονται στο <code>parameters</code> και τις επιλογές που καθορίζονται στο <code>options</code>.</p>\r\n<p>Η έξοδος του ερωτήματος ορίζεται από το <code>target</code>.</p>\r\n<p><code>target</code> παρέχει το πλαίσιο για την πράξη που περιγράφεται από <code>query</code>.</p>\r\n<p><code>query</code> περιγράφει το ερώτημα που πρέπει να εκτελεστεί έναντι του <code>target</code>. <code>query</code> εκφράζεται με συγκεκριμένο τρόπο για το <code>target</code> (για παράδειγμα, μια δήλωση T-SQL)</p>\r\n<p>Η προαιρετική <code>parameters</code> τιμή μπορεί να περιέχει είτε λίστα είτε εγγραφή ανάλογα με την περίπτωση για να παρέχει τις τιμές παραμέτρων που αναμένονται από το <code>query</code>.</p>\r\n<p>Η προαιρετική <code>options</code> εγγραφή μπορεί να περιέχει επιλογές που επηρεάζουν τη συμπεριφορά αξιολόγησης του <code>query</code> έναντι του <code>target</code>. Αυτές οι επιλογές είναι συγκεκριμένες για το<code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Επιστρέφει αν δύο τιμές είναι ίσες.",
        "Documentation.LongDescription": "Επιστρέφει την τιμή null εάν κάποιο από τα δύο ορίσματα '<code>value1</code>', '<code>value2</code>' είναι null, διαφορετικά ισοδυναμεί με Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Αντικαθιστά τις πληροφορίες μετα-δεδομένων της εισόδου.",
        "Documentation.LongDescription": "Αντικαθιστά τις πληροφορίες μετα-δεδομένων της εισόδου.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Αντικαθιστά τον τύπο της τιμής.",
        "Documentation.LongDescription": "Αντικαθιστά τον τύπο του <code>value</code> με το παρεχόμενο <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Αντικαταστήστε τον προεπιλεγμένο τύπο μιας εγγραφής με έναν πιο συγκεκριμένο τύπο.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Επιστρέφει τη διαφορά των δύο τιμών.",
        "Documentation.LongDescription": "Επιστρέφει τη διαφορά των <code>value1</code> και <code>value2</code>. Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>precision</code>, από προεπιλογή χρησιμοποιείται η <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Δημιουργεί μια ενέργεια η οποία, όταν εκτελεστεί, θα επιστρέψει τα αποτελέσματα εκτέλεσης μιας αίτησης HTTP ως δυαδικής τιμής.",
        "Documentation.LongDescription": "Δημιουργεί μια ενέργεια που, όταν εκτελεστεί, θα επιστρέψει τα αποτελέσματα της εκτέλεσης ενός αιτήματος <code>method</code> έναντι του <code>url</code> χρησιμοποιώντας το HTTP ως δυαδική τιμή.\r\n    Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να παρέχεται για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>Query</code> : Προσθέστε μέσω προγραμματισμού παραμέτρους ερωτήματος στη διεύθυνση URL χωρίς να χρειάζεται να ανησυχείτε για διαφυγή.</li>\r\n<li><code>ApiKeyName</code> : Εάν η τοποθεσία προορισμού έχει μια έννοια ενός κλειδιού API, αυτή η παράμετρος μπορεί να χρησιμοποιηθεί για τον καθορισμό του ονόματος (όχι της τιμής) της παραμέτρου κλειδιού που πρέπει να χρησιμοποιηθεί στη διεύθυνση URL. Η πραγματική τιμή του κλειδιού παρέχεται στο διαπιστευτήριο.</li>\r\n<li><code>Headers</code> : Ο καθορισμός αυτής της τιμής ως εγγραφής θα παράσχει επιπλέον κεφαλίδες σε μια αίτηση HTTP.</li>\r\n<li><code>Timeout</code> : Ο καθορισμός αυτής της τιμής ως διάρκειας θα αλλάξει το χρονικό όριο για μια αίτηση HTTP. Η προεπιλεγμένη τιμή είναι 100 δευτερόλεπτα.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Ο καθορισμός αυτής της τιμής ως λίστας θα εξαιρέσει αυτά τα κλειδιά κεφαλίδας HTTP από το να αποτελούν μέρος του υπολογισμού για την προσωρινή αποθήκευση δεδομένων.</li>\r\n<li><code>IsRetry</code> : Ο καθορισμός αυτής της λογικής τιμής ως true θα παραβλέπει οποιαδήποτε υπάρχουσα απόκριση στο cache κατά τη λήψη δεδομένων.</li>\r\n<li><code>ManualStatusHandling</code> : Ο καθορισμός αυτής της τιμής ως λίστας θα αποτρέψει οποιονδήποτε ενσωματωμένο χειρισμό για αιτήσεις HTTP των οποίων η απόκριση έχει έναν από αυτούς τους κωδικούς κατάστασης.</li>\r\n<li><code>RelativePath</code> : Ο καθορισμός αυτής της τιμής ως κειμένου την προσαρτά στη διεύθυνση URL βάσης πριν από την υποβολή της αίτησης.</li>\r\n<li><code>Content</code> : Ο καθορισμός αυτής της τιμής θα έχει ως αποτέλεσμα τα περιεχόμενά της να αποτελέσουν το σώμα της αίτησης HTTP.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Σημειώστε ότι αυτή η λειτουργία είναι απενεργοποιημένη στα περισσότερα περιβάλλοντα. Εξετάστε το ενδεχόμενο χρήσης Web.Contents ή Web.Headers.\r\n   ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Εκτέλεση αίτησης GET κατά του Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL του τελικού σημείου του Azure Enterprise REST API που σχετίζεται με την εγγραφή σας",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Επιστρέφει τα δυαδικά αποτελέσματα της κλήσης στη διεύθυνση URL που καταχωρήθηκε για το Azure Enterprise API.",
        "Documentation.Examples": [
          {
            "Description": "Χρήση της συνάρτησης AzureEnterprise.Contents για την επιστροφή των αποτελεσμάτων μιας συγκεκριμένης αναφοράς.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            προωθήθηκε",
            "Result": "Πίνακας"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Επιστρέφει το περιεχόμενο του καθορισμένου αντικειμένου blob από έναν θάλαμο χώρου αποθήκευσης του Azure.",
        "Documentation.LongDescription": "Επιστρέφει το περιεχόμενο του αντικειμένου blob στη διεύθυνση URL, <code>url</code>, από έναν θάλαμο χώρου αποθήκευσης Azure. Μπορεί να καθοριστεί <code>options</code> για έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>BlockSize</code> : Ο αριθμός των byte για ανάγνωση πριν από την αναμονή στον καταναλωτή δεδομένων. Η προεπιλεγμένη τιμή είναι 4 MB.</li>\r\n<li><code>RequestSize</code> : Ο αριθμός των byte των οποίων θα επιχειρείται ανάγνωση σε μια μεμονωμένη αίτηση HTTP στον διακομιστή. Η προεπιλεγμένη τιμή είναι 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Η επιλογή ConcurrentRequests υποστηρίζει ταχύτερη λήψη δεδομένων με καθορισμό του αριθμού των αιτήσεων που θα πραγματοποιηθούν παράλληλα, εις βάρος της χρήσης της μνήμης. Η απαιτούμενη μνήμη είναι (ConcurrentRequest * RequestSize). Η προεπιλεγμένη τιμή είναι 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Επιστρέφει το περιεχόμενο του καθορισμένου αρχείου από ένα σύστημα αρχείων Azure Data Lake Storage.",
        "Documentation.LongDescription": "Επιστρέφει το περιεχόμενο του αρχείου στη διεύθυνση URL, <code>url</code>, από ένα σύστημα αρχείων Azure Data Lake Storage. Μπορεί να καθοριστεί <code>options</code> για έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n<li><code>BlockSize</code> : Ο αριθμός των byte για ανάγνωση πριν από την αναμονή στον καταναλωτή δεδομένων. Η προεπιλεγμένη τιμή είναι 4 MB.</li>\r\n<li><code>RequestSize</code> : Ο αριθμός των byte των οποίων θα επιχειρείται ανάγνωση σε μια μεμονωμένη αίτηση HTTP στον διακομιστή. Η προεπιλεγμένη τιμή είναι 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Η επιλογή ConcurrentRequests υποστηρίζει ταχύτερη λήψη δεδομένων με καθορισμό του αριθμού των αιτήσεων που θα πραγματοποιηθούν παράλληλα, εις βάρος της χρήσης της μνήμης. Η απαιτούμενη μνήμη είναι (ConcurrentRequest * RequestSize). Η προεπιλεγμένη τιμή είναι 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Επιστρέφει το κατά προσέγγιση μήκος του δυαδικού.",
        "Documentation.LongDescription": "Επιστρέφει το κατά προσέγγιση μήκος του <code>binary</code>ή ένα σφάλμα εάν η προέλευση δεδομένων δεν υποστηρίζει κατά προσέγγιση μήκος.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε το κατά προσέγγιση μήκος της δυαδικής τιμής.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Αποθηκεύει στο buffer τη δυαδική τιμή της μνήμης.",
        "Documentation.LongDescription": "Αποθηκεύει στο buffer τη δυαδική τιμή της μνήμης.  Το αποτέλεσμα αυτής της κλήσης είναι μια σταθερή δυαδική τιμή, δηλαδή μιας τιμής με ντετερμινιστικό μήκος και σειρά byte.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια σταθερή έκδοση της δυαδικής τιμής.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Συνδυάζει μια λίστα δυαδικών τιμών σε μία δυαδική τιμή.",
        "Documentation.LongDescription": "Συνδυάζει μια λίστα δυαδικών τιμών σε μία δυαδική τιμή.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Δημιουργεί μια δυαδική τιμή από την τιμή που δόθηκε",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>binary</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Binary.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>δυαδικό</code>, επιστρέφεται <code>value</code>. Οι τιμές των ακόλουθων τύπων μπορούν να μετατραπούν σε τιμή <code>binary</code>:\r\n      <ul>\r\n        <li><code>text</code>:: Μια τιμή <code>binary</code> από την αναπαράσταση κειμένου. Ανατρέξτε στο <code>Binary.FromText</code> για λεπτομέρειες.</li>\r\n      </ul>\r\nΑν <code>value</code> είναι οποιουδήποτε άλλου τύπου, επιστρέφεται ένα σφάλμα.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή <code>binary</code> του <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Μετατρέπει μια λίστα αριθμών σε μια δυαδική τιμή.",
        "Documentation.LongDescription": "Μετατρέπει μια λίστα αριθμών σε μια δυαδική τιμή.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Αποκωδικοποιεί δεδομένα από μια μορφή κειμένου σε δυαδική μορφή.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της μετατροπής της τιμής κειμένου <code>text</code> σε δυαδική μορφή (λίστα του <code>number</code>). Μπορεί να καθοριστεί η <code>encoding</code> για να υποδείξει την κωδικοποίηση που χρησιμοποιείται στην τιμή κειμένου.\r\n      Μπορούν να χρησιμοποιηθούν οι ακόλουθες τιμές της <code>BinaryEncoding</code> για την <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Κωδικοποίηση Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Δεκαεξαδική κωδικοποίηση</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Αποκωδικοποίηση του \"1011\" σε δυαδική μορφή.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Αποκωδικοποίηση του \"1011\" σε δυαδική μορφή με δεκαεξαδική κωδικοποίηση.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Διαβάζει τη δυαδική ροή και προσπαθεί να προσδιορίσει τις πληροφορίες τύπου περιεχομένου και μορφής της ροής.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή με το πεδίο Content.Type που περιέχει τον συναγόμενο τύπο MIME. \r\n    Αν ο συναγόμενος τύπος περιεχομένου είναι κείμενο/* και εντοπίζεται μια κωδικοσελίδα κωδικοποίησης, τότε επιστρέφει επιπλέον το πεδίο Content.Encoding που περιέχει την κωδικοποίηση της ροής.\r\n    Αν ο συναγόμενος τύπος περιεχομένου είναι κείμενο/csv και η μορφή είναι οριοθετημένη, επιστρέφει επιπλέον το πεδίο Csv.PotentialDelimiter που περιέχει έναν πίνακα για ανάλυση των πιθανών οριοθετών.\r\n    Αν ο συναγόμενος τύπος περιεχομένου είναι κείμενο/csv και η μορφή είναι σταθερού πλάτους, επιστρέφει επιπλέον το πεδίο Csv.PotentialPositions που περιέχει μια λίστα για ανάλυση των πιθανών θέσεων στηλών σταθερού πλάτους.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Επιστρέφει τον αριθμό των χαρακτήρων.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό των χαρακτήρων.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Μετατρέπει μια δυαδική τιμή σε λίστα αριθμών.",
        "Documentation.LongDescription": "Μετατρέπει μια δυαδική τιμή σε λίστα αριθμών.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Κωδικοποιεί δυαδικά δεδομένα σε μορφή κειμένου.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της μετατροπής μιας δυαδικής λίστας αριθμών <code>binary</code> σε τιμή κειμένου. Προαιρετικά, μπορεί να καθοριστεί η <code>encoding</code> για να υποδείξει την κωδικοποίηση που θα χρησιμοποιηθεί στην παραγόμενη τιμή κειμένου\r\n      Μπορούν να χρησιμοποιηθούν οι ακόλουθες τιμές της <code>BinaryEncoding</code> για την <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Κωδικοποίηση Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Δεκαεξαδική κωδικοποίηση</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Δημιουργεί μια τροποποιημένη εγγραφή σφάλματος η οποία δεν θα ενεργοποιήσει μια εναλλακτική όταν δημιουργηθεί από ένα πρόγραμμα χειρισμού που έχει οριστεί σε μια προβολή (μέσω Binary.View).",
        "Documentation.LongDescription": "Δημιουργεί μια τροποποιημένη εγγραφή σφάλματος από <code>errorRecord</code> η οποία δεν ενεργοποιεί μια εναλλακτική λύση όταν δημιουργείται από ένα πρόγραμμα χειρισμού που ορίζεται σε μια προβολή (μέσω binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Δημιουργεί μια συνάρτηση που μπορεί να αναχαιτιστεί από ένα πρόγραμμα χειρισμού που έχει οριστεί σε μια προβολή (μέσω binary.View).",
        "Documentation.LongDescription": "<p>Δημιουργεί μια συνάρτηση προβολής βάσει το <code>function</code> που μπορεί να χειριστεί μια προβολή που δημιουργήθηκε από το <code>Binary.View</code>.</p>\r\n<p>Ο χειριστής <code>OnInvoke</code> του <code>Binary.View</code> μπορεί να χρησιμοποιηθεί για τον ορισμό ενός προγράμματος χειρισμού για τη συνάρτηση προβολής.</p>\r\n<p>Όπως και με τους χειριστές για ενσωματωμένες λειτουργίες, εάν δεν έχει καθοριστεί κανένας χειριστής <code>OnInvoke</code>, ή εάν δεν χειρίζεται τη συνάρτηση προβολής ή εάν προκύψει σφάλμα από το πρόγραμμα χειρισμού, <code>function</code> εφαρμόζεται στην κορυφή της προβολής.</p>\r\n<p>Ανατρέξτε στη δημοσιευμένη τεκμηρίωση προσαρμοσμένης σύνδεσης Power Query για μια πιο πλήρη περιγραφή των συναρτήσεων <code>Table.View</code> και προσαρμοσμένης προβολής.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 64 bit με πρόσημο που κωδικοποιήθηκε με κωδικοποίηση μεταβλητού μήκους 7 bit.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 64 bit με πρόσημο που κωδικοποιήθηκε με κωδικοποίηση μεταβλητού μήκους 7 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 64 bit χωρίς πρόσημο που κωδικοποιήθηκε με κωδικοποίηση μεταβλητού μήκους 7 bit.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 64 bit χωρίς πρόσημο που κωδικοποιήθηκε με κωδικοποίηση μεταβλητού μήκους 7 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 8 bit χωρίς πρόσημο.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 8 bit χωρίς πρόσημο.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει μια δεκαδική τιμή .NET 16 byte.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει μια δεκαδική τιμή .NET 16 byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει μια τιμή κινητής υποδιαστολής διπλής ακρίβειας IEEE 8 byte.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει μια τιμή κινητής υποδιαστολής διπλής ακρίβειας IEEE 8 byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Επιστρέφει μια δυαδική μορφή που διαβάζει μια ακολουθία στοιχείων και επιστρέφει μια λίστα.",
        "Documentation.LongDescription": "Επιστρέφει μια δυαδική μορφή που διαβάζει μια ακολουθία στοιχείων και επιστρέφει μια <code>list</code>. Η <code>binaryFormat</code> παράμετρος καθορίζει τη δυαδική μορφή κάθε στοιχείου. Υπάρχουν τρεις τρόποι για να προσδιορίσετε τον αριθμό των στοιχείων που διαβάζονται: <ul><li>Εάν το <code>countOrCondition</code> δεν έχει καθοριστεί, τότε η δυαδική μορφή θα διαβάζεται μέχρι να μην υπάρχουν άλλα στοιχεία.</li><li>Εάν το <code>countOrCondition</code> είναι αριθμός, τότε η δυαδική μορφή θα διαβάσει τόσα στοιχεία.</li><li>Εάν το <code>countOrCondition</code> είναι συνάρτηση, τότε αυτή η συνάρτηση θα καλείται για κάθε αντικείμενο που διαβάζεται. Η συνάρτηση επιστρέφει true για να συνεχίσει και false για διακοπή της ανάγνωσης στοιχείων. Το τελικό στοιχείο περιλαμβάνεται στη λίστα.</li><li>Εάν το <code>countOrCondition</code> είναι δυαδική μορφή, τότε ο αριθμός των στοιχείων αναμένεται να προηγείται της λίστας και η καθορισμένη μορφή χρησιμοποιείται για την ανάγνωση της καταμέτρησης.</li> </ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Ανάγνωση byte μέχρι τέλους των δεδομένων.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Ανάγνωση δύο byte.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Ανάγνωση byte έως ότου η τιμή byte να είναι μεγαλύτερη ή ίση του δύο.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει μηδέν byte και επιστρέφει την τιμή null.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει μηδέν byte και επιστρέφει την τιμή null.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Επιστρέφει μια δυαδική μορφή που διαβάζει μια εγγραφή.",
        "Documentation.LongDescription": "Επιστρέφει μια δυαδική μορφή που διαβάζει μια εγγραφή.  Η παράμετρος <code>record</code> καθορίζει τη μορφή αυτής της εγγραφής.  Κάθε πεδίο στην εγγραφή μπορεί να έχει διαφορετική δυαδική μορφή.  Εάν ένα πεδίο περιέχει μια τιμή που δεν είναι τιμή δυαδικής μορφής, δεν διαβάζονται δεδομένα για αυτό το πεδίο και η τιμή πεδίου απηχείται στο αποτέλεσμα.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Ανάγνωση μιας εγγραφής που περιέχει έναν ακέραιο 16 bit και έναν ακέραιο 32 bit.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 16 bit με πρόσημο.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 16 bit με πρόσημο.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 32 bit με πρόσημο.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 32 bit με πρόσημο.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 64 bit με πρόσημο.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 64 bit με πρόσημο.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει μια τιμή κινητής υποδιαστολής απλής ακρίβειας IEEE 4 byte.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει μια τιμή κινητής υποδιαστολής απλής ακρίβειας IEEE 4 byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Επιστρέφει μια δυαδική μορφή που διαβάζει μια τιμή κειμένου.",
        "Documentation.LongDescription": "Επιστρέφει μια δυαδική μορφή που διαβάζει μια τιμή κειμένου. Το <code>length</code> καθορίζει τον αριθμό των byte προς αποκωδικοποίηση ή τη δυαδική μορφή του μήκους που προηγείται του κειμένου. Η προαιρετική τιμή <code>encoding</code> καθορίζει την κωδικοποίηση του κειμένου. Εάν το <code>encoding</code> δεν έχει καθοριστεί, τότε η κωδικοποίηση καθορίζεται από τα σημάδια σειράς byte Unicode. Εάν δεν υπάρχουν σημάδια σειράς byte, τότε χρησιμοποιείται το <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Αποκωδικοποίηση δύο byte ως κείμενο ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Αποκωδικοποίηση κειμένου ASCII όπου το μήκος του κειμένου σε byte εμφανίζεται πριν από το κείμενο σε byte.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 16 bit χωρίς πρόσημο.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 16 bit χωρίς πρόσημο.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 32 bit χωρίς πρόσημο.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 32 bit χωρίς πρόσημο.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 64 bit χωρίς πρόσημο.",
        "Documentation.LongDescription": "Μια δυαδική μορφή που διαβάζει έναν ακέραιο 64 bit χωρίς πρόσημο.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Δημιουργεί έναν ακέραιο 8-bit από τη δεδομένη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια ακέραια τιμή 8-bit <code>number</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Byte.From</code> επιστρέφει <code>null</code>. Εάν το δεδομένο <code>value</code> είναι ένας <code>number</code> εντός του εύρους ενός ακέραιου αριθμού 8-bit χωρίς κλασματικό μέρος, επιστρέφεται <code>value</code>. Εάν έχει κλασματικό τμήμα, τότε ο αριθμός στρογγυλοποιείται με τον καθορισμένο τρόπο στρογγυλοποίησης. Η προεπιλεγμένη λειτουργία στρογγυλοποίησης είναι <code>RoundingMode.ToEven</code>. Αν <code>value</code> είναι οποιουδήποτε άλλου τύπου, θα μετατραπεί πρώτα σε <code>αριθμός</code> χρησιμοποιώντας το <code>Number.FromText</code>. Ανατρέξτε στο <code>Number.Round</code> για τις διαθέσιμες λειτουργίες στρογγυλοποίησης. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή ακέραιου 8 bit <code>number</code> του <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Λάβετε την τιμή ακέραιου 8 bit <code>number</code> του <code>\"4.5\"</code> χρησιμοποιώντας το <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Μετατρέπει έναν αριθμό σε χαρακτήρα κειμένου.",
        "Documentation.LongDescription": "Επιστρέφει τον ισοδύναμο χαρακτήρα του αριθμού.<br>\r\n    <br>\r\n    Η παρεχόμενη <code>number</code> πρέπει να είναι σημείο κώδικα Unicode 21 bit.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή ενός αριθμού στην αντίστοιχη τιμή χαρακτήρα του.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Μετατροπή ενός χαρακτήρα σε αριθμό και αντίστροφα.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Μετατροπή του δεκαεξαδικού σημείου κώδικα για το emoticon \" γελαστό πρόσωπο\" στο αντίστοιχο ζεύγος υποκατάστατου UTF-16.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Μετατρέπει έναν χαρακτήρα σε αριθμητική τιμή.",
        "Documentation.LongDescription": "Επιστρέφει τον αντίστοιχο αριθμό του <code>character</code>.<br>\r\n    <br>\r\n    Το αποτέλεσμα θα είναι το σημείο κώδικα Unicode 21 bit που αντιπροσωπεύεται από το παρεχόμενο ζεύγος χαρακτήρων ή υποκατάστατου.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή ενός χαρακτήρα στην αντίστοιχη αριθμητική τιμή του.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Μετατροπή του ζεύγους υποκατάστατου UTF-16 για το emoticon \" γελαστό πρόσωπο\" στο αντίστοιχο δεκαεξαδικό σημείο κώδικα.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα κειμένου χρησιμοποιώντας τον καθορισμένο οριοθέτη.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα τιμών κειμένου σε μία τιμή κειμένου χρησιμοποιώντας τον καθορισμένο οριοθέτη.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Συνδυάστε μια λίστα τιμών κειμένου χρησιμοποιώντας έναν οριοθέτη ερωτηματικού.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Συνδυάστε το κείμενο δύο στηλών χρησιμοποιώντας έναν οριοθέτη με κόμματα και εισαγωγικά στυλ CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα κειμένου χρησιμοποιώντας μια ακολουθία οριοθέτων.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα τιμών κειμένου σε μία τιμή κειμένου χρησιμοποιώντας μια ακολουθία οριοθέτων.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Συνδυάζει μια λίστα τιμών κειμένου χρησιμοποιώντας μια ακολουθία οριοθέτων.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα κειμένου χρησιμοποιώντας τα καθορισμένα μήκη.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα τιμών κειμένου σε μία τιμή κειμένου χρησιμοποιώντας τα καθορισμένα μήκη.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Συνδυάζει μια λίστα τιμών κειμένου εξάγοντας τους καθορισμένους αριθμούς χαρακτήρων από κάθε τιμή εισόδου.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Συνδυάζει μια λίστα τιμών κειμένου εξάγοντας τους καθορισμένους αριθμούς χαρακτήρων, αφού πρώτα προ συμπληρώσει το αποτέλεσμα με το κείμενο του προτύπου.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα κειμένου χρησιμοποιώντας τις καθορισμένες θέσεις εξόδου.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα τιμών κειμένου σε μία τιμή κειμένου χρησιμοποιώντας τις καθορισμένες θέσεις εξόδου.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Συνδυάζει μια λίστα τιμών κειμένου τοποθετώντας τες στην έξοδο στις καθορισμένες θέσεις.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα κειμένου χρησιμοποιώντας τις καθορισμένες θέσεις και μήκη.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που συνδυάζει μια λίστα τιμών κειμένου σε μία τιμή κειμένου χρησιμοποιώντας τις καθορισμένες θέσεις και μήκη εξόδου. Το μήκος null υποδεικνύει ότι θα πρέπει να συμπεριληφθεί ολόκληρη η τιμή κειμένου.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Συνδυάζει μια λίστα τιμών κειμένου χρησιμοποιώντας τις καθορισμένες θέσεις και μήκη εξόδου.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση σύγκρισης με βάση την καθορισμένη κουλτούρα και την ευαισθησία πεζών-κεφαλαίων.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση σύγκρισης που χρησιμοποιεί το <code>culture</code> και την ευαισθησία πεζών-κεφαλαίων που καθορίζεται από <code>ignoreCase</code> για την εκτέλεση συγκρίσεων..<br>\r\n      <br>\r\n      Μια συνάρτηση σύγκρισης δέχεται δύο ορίσματα και επιστρέφει -1, 0 ή 1 με βάση το αν η πρώτη τιμή είναι μικρότερη, ίση ή μεγαλύτερη από τη δεύτερη.<br>\r\n      <br>\r\n      Η προεπιλεγμένη τιμή για <code>ignoreCase</code> είναι false. Το <code>culture</code> θα πρέπει να είναι μία από τις τοπικές ρυθμίσεις που υποστηρίζονται από το πλαίσιο .NET (για παράδειγμα, \"en-US\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Συγκρίνετε το \"a\" και το \"A\" χρησιμοποιώντας τις τοπικές ρυθμίσεις \"en-US\" για να προσδιορίσετε αν οι τιμές είναι ίσες.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Συγκρίνετε το \"a\" και το \"A\" χρησιμοποιώντας τις τοπικές ρυθμίσεις \"en-US\", παραβλέποντας τη διάκριση πεζών-κεφαλαίων για να προσδιορίσετε αν οι τιμές είναι ίσες.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Επιστρέφει το μοναδικό αναγνωριστικό μέλους από την τιμή ιδιότητας μέλους.",
        "Documentation.LongDescription": "Επιστρέφει το μοναδικό αναγνωριστικό μέλος από μια τιμή ιδιότητας μέλους. <code>attribute</code>. Επιστρέφει τιμή null για κάθε άλλη τιμή.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Επιστρέφει το κλειδί μιας ιδιότητας.",
        "Documentation.LongDescription": "Επιστρέφει το κλειδί της ιδιότητας <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Επιστρέφει μια τιμή νομισματικής μονάδας από τη δεδομένη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>currency</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Currency.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>number</code> εντός του εύρους νομίσματος, κλασματικό μέρος του <code>value</code> στρογγυλοποιείται σε 4 δεκαδικά ψηφία και επιστρέφεται. Αν <code>value</code> είναι οποιουδήποτε άλλου τύπου, θα μετατραπεί πρώτα σε <code>number</code> χρησιμοποιώντας το <code>Number.FromText</code>. Το έγκυρο εύρος για το νόμισμα είναι <code>-922,337,203,685,477,5808</code> έως <code>922,337,203,685,477,5807</code>. Ανατρέξτε στο <code>Number.Round</code> για τις διαθέσιμες λειτουργίες στρογγυλοποίησης. Η προεπιλογή είναι <code>RoundingMode.ToEven</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή <code>currency</code> του <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Λάβετε την τιμή <code>currency</code> του <code>\"1.23455\"</code> χρησιμοποιώντας το <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Επιστρέφει το στοιχείο ημερομηνίας.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο ημέρας της δεδομένης τιμής <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> από την οποία εξάγεται το στοιχείο ημέρας.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε το στοιχείο ημέρας μιας <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> αναπαριστώντας την ημερομηνία και ώρα 14/5/2011 05:00:00 μ.μ.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Επιστρέφει έναν αριθμό (από 0 έως 6) που υποδεικνύει την ημέρα της εβδομάδας από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει έναν αριθμό (από 0 έως 6) που υποδεικνύει την ημέρα της εβδομάδας από το παρεχόμενο στοιχείο <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: Μια τιμή <code>Day</code> που υποδεικνύει ποια ημέρα πρέπει να θεωρείται η πρώτη ημέρα της εβδομάδας. Οι επιτρεπόμενες τιμές είναι Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday ή Day.Saturday. Αν δεν καθορίζεται, χρησιμοποιείται μια προεπιλογή που εξαρτάται από την κουλτούρα.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Υπολογίστε την ημέρα της εβδομάδας που αντιπροσωπεύει η Δευτέρα, 21 Φεβρουαρίου 2011, θεωρώντας την Κυριακή ως πρώτη ημέρα της εβδομάδας.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Υπολογίστε την ημέρα της εβδομάδας που αντιπροσωπεύει η Δευτέρα, 21 Φεβρουαρίου 2011, θεωρώντας τη Δευτέρα ως πρώτη ημέρα της εβδομάδας.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Επιστρέφει το όνομα της ημέρας της εβδομάδας.",
        "Documentation.LongDescription": "Επιστρέφει το όνομα της ημέρας της εβδομάδας για την παρεχόμενη τιμή <code>date</code>. Ενδέχεται επίσης να παρέχεται μια προαιρετική τιμή <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Λήψη του ονόματος της ημέρας της εβδομάδας.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Επιστρέφει έναν αριθμό από 1 έως 366, ο οποίος αντιπροσωπεύει την ημέρα του έτους",
        "Documentation.LongDescription": "Επιστρέφει έναν αριθμό που αντιπροσωπεύει την ημέρα του έτους στην παρεχόμενη τιμή <code>dateTime</code> της <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Η ημέρα του έτους για την 1η Μαρτίου 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Επιστρέφει έναν αριθμό από 28 έως 31, ο οποίος δείχνει τον αριθμό των ημερών του μήνα.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό των ημερών του μήνα στην τιμή <code>dateTime</code> της <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>. \r\n <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για την οποία επιστρέφεται ο αριθμός των ημερών του μήνα.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ο αριθμός των ημερών του μήνα Δεκεμβρίου όπως αντιπροσωπεύεται από την <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Επιστρέφει το τέλος της ημέρας.",
        "Documentation.LongDescription": "Επιστρέφει το τέλος της ημέρας που αντιπροσωπεύεται από <code>dateTime</code>. Οι πληροφορίες ζώνης ώρας διατηρούνται.\r\n      <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> από την οποία υπολογίζεται το τέλος της ημέρας.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε το τέλος της ημέρας για τις 14/5/2011 05:00:00 μ.μ.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Λάβετε το τέλος της ημέρας για τις 17/5/2011 05:00:00 μ.μ. -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Επιστρέφει το τέλος του μήνα.",
        "Documentation.LongDescription": "Επιστρέφει το τέλος του μήνα που περιέχει <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> από την οποία υπολογίζεται το τέλος του μήνα</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε το τέλος του μήνα για τις 14/5/2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Λάβετε το τέλος του μήνα για τις 17/5/2011 05:00:00 μ.μ. -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Επιστρέφει το τέλος του τριμήνου.",
        "Documentation.LongDescription": "Επιστρέφει το τέλος του τριμήνου που περιέχει <code>dateTime</code>. Οι πληροφορίες ζώνης ώρας διατηρούνται.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> από την οποία υπολογίζεται το τέλος του τριμήνου.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το τέλος του τριμήνου για τις 10 Οκτωβρίου 2011, 8:00 π.μ.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Επιστρέφει το τέλος της εβδομάδας.",
        "Documentation.LongDescription": "Επιστρέφει το τέλος της εβδομάδας που περιέχει <code>dateTime</code>.\r\n    Αυτή η συνάρτηση λαμβάνει ένα προαιρετικό <code>Day</code>, <code>firstDayOfWeek</code>, για να οριστεί ως η πρώτη ημέρα της εβδομάδας για αυτόν τον σχετικό υπολογισμό. Η προεπιλεγμένη τιμή είναι <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> από την οποία υπολογίζεται η τελευταία ημέρα της εβδομάδας</li>\r\n        <li><code>firstDayOfWeek</code>:  <i>[Προαιρετικό]</i> Μια τιμή <code>Day.Type</code> που αντιπροσωπεύει την πρώτη ημέρα της εβδομάδας. Πιθανές τιμές είναι <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code> Day.Phursday</code>, <code>Day.Priday</code> και <code>Day.Saturday.</code> . Η προεπιλεγμένη τιμή είναι <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε το τέλος της εβδομάδας για τις 14/5/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Υπολογίστε το τέλος της εβδομάδας για τις 17/5/2011 05:00:00 μ.μ. -7:00, με την Κυριακή (προεπιλογή) να είναι η πρώτη ημέρα της εβδομάδας.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Επιστρέφει το τέλος του έτους.",
        "Documentation.LongDescription": "Επιστρέφει το τέλος του έτους που περιέχει <code>dateTime</code>, συμπεριλαμβανομένων των κλασματικών δευτερολέπτων. Οι πληροφορίες ζώνης ώρας διατηρούνται.\r\n      <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> από την οποία υπολογίζεται το τέλος του έτους.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε το τέλος του έτους για τις 14/5/2011 05:00:00 μ.μ.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Λάβετε το τέλος της ώρας για τις 17/5/2011 05:00:00 μ.μ. -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Δημιουργεί μια ημερομηνία από την τιμή που δόθηκε.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>date</code> από το δεδομένο <code>value</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code>(για παράδειγμα, \"en-US\").\r\nΑν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Date.From</code> επιστρέφει <code>null</code>. Εάν το δεδομένο <code>value</code> είναι <code>date</code>, επιστρέφει <code>value</code>. Οι τιμές των ακόλουθων τύπων μπορούν να μετατραπούν σε τιμή <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: Μια τιμή <code>date</code> από αναπαράσταση κειμένου. Ανατρέξτε στο <code>Date.FromText</code> για λεπτομέρειες.</li>\r\n        <li><code>datetime</code>: Το στοιχείο ημερομηνίας του <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Το στοιχείο ημερομηνίας του τοπικού ισοδύναμου ημερομηνίας ώρας του <code>value</code>.</li>\r\n        <li><code>number</code>: Το στοιχείο ημερομηνίας του ισοδύναμου ημερομηνίας ώρας της Ημερομηνίας Αυτοματισμού OLE που εκφράζεται με <code>value</code>.</li>\r\n      </ul>\r\nΑν <code>value</code> είναι οποιουδήποτε άλλου τύπου, επιστρέφεται ένα σφάλμα.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε το <code>43910</code> σε τιμή <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Μετατρέψτε το <code>#datetime(1899, 12, 30, 06, 45, 12)</code> σε μια τιμή <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Δημιουργεί μια ημερομηνία από τοπικές, καθολικές και προσαρμοσμένες μορφές ημερομηνίας.",
        "Documentation.LongDescription": "Δημιουργεί μια τιμή <code>date</code> από μια αναπαράσταση κειμένου, <code>text</code>. Μπορεί να παρέχεται μια προαιρετική παράμετρος <code>record</code>, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Η <code>record</code> μπορεί να περιέχει τα ακόλουθα πεδία:\r\n<ul>\r\n   <li><code>Format</code>: Μια τιμή <code>text</code> που υποδεικνύει τη μορφή που θα χρησιμοποιηθεί. Για περισσότερες λεπτομέρειες, μεταβείτε στη διεύθυνση https://go.microsoft.com/fwlink/?linkid=2180104 και https://go.microsoft.com/fwlink/?linkid=2180105. Η παράλειψη αυτού του πεδίου ή η παροχή <code>null</code> θα έχει ως αποτέλεσμα την ανάλυση της ημερομηνίας με την καλύτερη δυνατή προσπάθεια.</li>\r\n   <li><code>Culture</code>: Όταν το <code>Format</code> δεν είναι null, το <code>Culture</code> ελέγχει ορισμένους προσδιοριστές μορφής. Για παράδειγμα, στο <code>\"en-US\"</code> <code>\"MMM\"</code> είναι <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ενώ στο <code>\"ru-RU\"</code> <code>\"MMM\"</code> είναι <code>\"янв\", \"фев\", \"мар\", ...</code>. Όταν το <code>Format</code> είναι <code>null</code>, το <code>Culture</code> ελέγχει την προεπιλεγμένη μορφή που θα χρησιμοποιηθεί. Όταν το <code>Culture</code> είναι <code>null</code> ή παραλείπεται, χρησιμοποιείται το <code>Culture.Current</code>.</li>\r\n</ul>\r\nΓια την υποστήριξη ροών εργασίας παλαιού τύπου, το <code>options</code> μπορεί επίσης να μια τιμή κειμένου. Αυτό έχει την ίδια συμπεριφορά σαν <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή <code>\"2010-12-31\"</code> σε τιμή <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Μετατροπή με χρήση προσαρμοσμένης μορφής και της γερμανικής κουλτούρας.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Βρείτε την ημερομηνία στο Γρηγοριανό ημερολόγιο που αντιστοιχεί στην αρχή του 1400 στο ημερολόγιο Χίζρι.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται εντός της τρέχουσας ημέρας, όπως αυτή προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή της datetime <code>dateTime</code> εμφανίζεται εντός της τρέχουσας ημέρας, όπως αυτή προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η τρέχουσα ώρα συστήματος είναι εντός της τρέχουσας ημέρας.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται εντός του τρέχοντος μήνα, όπως αυτός προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή της datetime <code>dateTime</code> εμφανίζεται εντός του τρέχοντος μήνα, όπως αυτός προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η τρέχουσα ώρα συστήματος είναι εντός του τρέχοντος μήνα.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται εντός του τρέχοντος τριμήνου, όπως αυτό προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή της datetime <code>dateTime</code> εμφανίζεται εντός του τρέχοντος τριμήνου, όπως αυτό προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η τρέχουσα ώρα συστήματος είναι εντός του τρέχοντος τριμήνου.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται εντός της τρέχουσας εβδομάδας, όπως αυτή προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή της datetime <code>dateTime</code> εμφανίζεται εντός της τρέχουσας εβδομάδας, όπως αυτή προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η τρέχουσα ώρα συστήματος είναι εντός της τρέχουσας εβδομάδας.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται εντός του τρέχοντος έτους, όπως αυτό προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή της datetime <code>dateTime</code> εμφανίζεται εντός του τρέχοντος έτους, όπως αυτό προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η τρέχουσα ώρα συστήματος είναι εντός του τρέχοντος έτους.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια της επόμενης ημέρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ημέρας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια της επόμενης ημέρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ημέρας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η ημέρα μετά την τρέχουσα ώρα συστήματος είναι εντός της επόμενης ημέρας.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια του επόμενου μήνα, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος μήνα.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του επόμενου μήνα, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος μήνα.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν ο μήνας μετά την τρέχουσα ώρα συστήματος είναι εντός του επόμενου μήνα.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια του επόμενου τριμήνου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος τριμήνου.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του επόμενου τριμήνου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος τριμήνου.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν το τρίμηνο μετά την τρέχουσα ώρα συστήματος είναι εντός του επόμενου τρίμηνου.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια της επόμενης εβδομάδας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας εβδομάδας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια της επόμενης εβδομάδας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας εβδομάδας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η εβδομάδα μετά την τρέχουσα ώρα συστήματος είναι εντός της επόμενης εβδομάδας.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια του επόμενου έτους, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος έτους.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του επόμενου έτους, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος έτους.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν το έτος μετά την τρέχουσα ώρα συστήματος είναι εντός του επόμενου έτους.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια της προηγούμενης ημέρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ημέρας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια της προηγούμενης ημέρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ημέρας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η ημέρα πριν από την τρέχουσα ώρα συστήματος είναι εντός της προηγούμενης ημέρας.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια του προηγούμενου μήνα, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος μήνα.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του προηγούμενου μήνα, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος μήνα.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν ο μήνας πριν από την τρέχουσα ώρα συστήματος είναι εντός του προηγούμενου μήνα.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια του προηγούμενου τριμήνου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος τριμήνου.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του προηγούμενου τριμήνου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος τριμήνου.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν το τρίμηνο πριν από την τρέχουσα ώρα συστήματος είναι εντός του προηγούμενου τριμήνου.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια της προηγούμενης εβδομάδας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας εβδομάδας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια της προηγούμενης εβδομάδας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας εβδομάδας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η εβδομάδα πριν από την τρέχουσα ώρα συστήματος είναι εντός της προηγούμενης εβδομάδας.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στη διάρκεια του προηγούμενου έτους, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος έτους.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του προηγούμενου έτους, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος έτους.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν το έτος πριν από την τρέχουσα ώρα συστήματος είναι εντός του προηγούμενου έτους.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμφανίζεται στο τρέχον έτος και αν συμπίπτει ή είναι προγενέστερη της τρέχουσας ημέρας, όπως αυτή προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στο τρέχον έτος και αν συμπίπτει ή είναι προγενέστερη της τρέχουσας ημέρας, όπως αυτή προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν η τρέχουσα ώρα συστήματος είναι εντός του τρέχοντος έτους μέχρι σήμερα.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Υποδεικνύει αν αυτή η ημερομηνία εμπίπτει σε δίσεκτο έτος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμπίπτει σε δίσεκτο έτος. \r\n <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code> για αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε αν το έτος 2012, όπως αντιπροσωπεύεται από την <code>#date(2012, 01, 01)</code> είναι ένα δίσεκτο έτος.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Επιστρέφει το στοιχείο μήνα.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο μήνα της παρεχόμενης τιμής <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το μήνα στην #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Επιστρέφει το όνομα του στοιχείου μήνα.",
        "Documentation.LongDescription": "Επιστρέφει το όνομα του στοιχείου μήνα για το παρεχόμενο <code>date</code>. Ενδέχεται επίσης να παρέχεται μια προαιρετική τιμή <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Λήψη του ονόματος μήνα.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Επιστρέφει έναν αριθμό που υποδεικνύει σε ποιο τρίμηνο εμπίπτει η ημερομηνία.",
        "Documentation.LongDescription": "Επιστρέφει έναν αριθμό από 1 έως 4 που υποδεικνύει σε ποιο τρίμηνο εμπίπτει η ημερομηνία <code>dateTime</code>. Η τιμή <code>dateTime</code> μπορεί να είναι μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε σε ποιο τρίμηνο του έτους εμπίπτει η ημερομηνία #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Επιστρέφει την αρχή της ημέρας.",
        "Documentation.LongDescription": "Επιστρέφει την αρχή της ημέρας που αντιπροσωπεύεται από <code>dateTime</code>.\r\n    <code>dateTime</code> πρέπει να είναι μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την αρχή της ημέρας για τις 10 Οκτωβρίου 2011, 8:00 π.μ.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Επιστρέφει την αρχή του μήνα.",
        "Documentation.LongDescription": "Επιστρέφει την αρχή του μήνα που περιέχει <code>dateTime</code>.\r\n    <code>dateTime</code> πρέπει να είναι μια τιμή <code>date</code> ή <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την αρχή του μήνα για τις 10 Οκτωβρίου 2011, 8:10:32 π.μ.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Επιστρέφει την αρχή του τριμήνου.",
        "Documentation.LongDescription": "Επιστρέφει την αρχή του τριμήνου που περιέχει <code>dateTime</code>.\r\n     <code>dateTime</code> πρέπει να είναι μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την αρχή του τριμήνου για τις 10 Οκτωβρίου 2011, 8:00 π.μ.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Επιστρέφει την αρχή της εβδομάδας.",
        "Documentation.LongDescription": "Επιστρέφει την αρχή της εβδομάδας που περιέχει <code>dateTime</code>.\r\n    <code>dateTime</code>  πρέπει να είναι μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την αρχή της εβδομάδας για την Τρίτη, 11 Οκτωβρίου 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Βρείτε την αρχή της εβδομάδας για την Τρίτη, 11 Οκτωβρίου 2011, χρησιμοποιώντας τη Δευτέρα ως αρχή της εβδομάδας.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Επιστρέφει την αρχή του έτους.",
        "Documentation.LongDescription": "Επιστρέφει την αρχή του έτους που περιέχει <code>dateTime</code>.\r\n    <code>dateTime</code> πρέπει να είναι μια τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την αρχή του έτους για τις 10 Οκτωβρίου 2011, 8:10:32 π.μ.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Επιστρέφει μια εγγραφή που περιέχει τμήματα της τιμής ημερομηνίας.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή που περιέχει τα τμήματα τιμής της ημερομηνίας <code>date</code> που δόθηκε.\r\n <ul>\r\n        <li><code>date</code>: Μια τιμή της <code>date</code> για την οποία πρόκειται να υπολογιστεί η εγγραφή των μερών της.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε την τιμή <code>#date(2011, 12, 31)</code> σε μια εγγραφή που περιέχει τμήματα από την τιμή ημερομηνίας.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Επιστρέφει μια αναπαράσταση κειμένου της τιμής ημερομηνίας.",
        "Documentation.LongDescription": "Επιστρέφει μια αναπαράσταση κειμένου του <code>date</code>. Μπορεί να παρέχεται μια προαιρετική παράμετρος <code>record</code>, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Το <code>culture</code> χρησιμοποιείται μόνο για παλαιού τύπου ροές εργασίας. Το <code>record</code> μπορεί να περιέχει τα ακόλουθα πεδία:\r\n<ul>\r\n   <li><code>Format</code>: Μια τιμή <code>text</code> που υποδεικνύει τη μορφή που θα χρησιμοποιηθεί. Για περισσότερες λεπτομέρειες, μεταβείτε στη διεύθυνση https://go.microsoft.com/fwlink/?linkid=2180104 και https://go.microsoft.com/fwlink/?linkid=2180105. Η παράλειψη αυτού του πεδίου ή η παροχή <code>null</code> θα έχει ως αποτέλεσμα τη μορφοποίηση της ημερομηνίας χρησιμοποιώντας την προεπιλογή που ορίζεται από το <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Όταν το <code>Format</code> δεν είναι null, το <code>Culture</code> ελέγχει ορισμένους προσδιοριστές μορφής. Για παράδειγμα, στο <code>\"en-US\"</code> <code>\"MMM\"</code> είναι <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ενώ στο <code>\"ru-RU\"</code> <code>\"MMM\"</code> είναι <code>\"янв\", \"фев\", \"мар\", ...</code>. Όταν το <code>Format</code> είναι <code>null</code>, το <code>Culture</code> ελέγχει την προεπιλεγμένη μορφή που θα χρησιμοποιηθεί. Όταν το <code>Culture</code> είναι <code>null</code> ή παραλείπεται, χρησιμοποιείται το <code>Culture.Current</code>.</li>\r\n</ul>\r\nΓια την υποστήριξη ροών εργασίας παλαιού τύπου, το <code>options</code> και το <code>culture</code> μπορεί επίσης να είναι τιμές κειμένου. Αυτό έχει την ίδια συμπεριφορά σαν <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή <code>#date(2010, 12, 31)</code> σε τιμή <code>text</code>. <i>Το αποτέλεσμα μπορεί να διαφέρει ανάλογα με την τρέχουσα κουλτούρα.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Μετατροπή με χρήση προσαρμοσμένης μορφής και της γερμανικής κουλτούρας.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Βρείτε το έτος στο ημερολόγιο Χίζρι που αντιστοιχεί στην 1η Ιανουαρίου 2000 στο Γρηγοριανό ημερολόγιο.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Επιστρέφει έναν αριθμό από 1 έως 6 που υποδεικνύει σε ποια εβδομάδα του μήνα εμπίπτει η ημερομηνία.",
        "Documentation.LongDescription": "Επιστρέφει έναν αριθμό από 1 έως 6 που υποδεικνύει σε ποια εβδομάδα του μήνα εμπίπτει η ημερομηνία <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>datetime</code> για την οποία προσδιορίζεται η εβδομάδα του μήνα.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε σε ποια εβδομάδα του Μαρτίου εμπίπτει η 15η το 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Επιστρέφει έναν αριθμό από 1 έως 54 που υποδεικνύει σε ποια εβδομάδα του έτους εμπίπτει αυτή η ημερομηνία.",
        "Documentation.LongDescription": "Επιστρέφει έναν αριθμό από 1 έως 54 που υποδεικνύει σε ποια εβδομάδα του έτους εμπίπτει η ημερομηνία, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>datetime</code> για την οποία προσδιορίζεται η εβδομάδα του έτους.</li>\r\n        <li><code>firstDayOfWeek</code>: Μια προαιρετική τιμή <code>Day.Type</code> που υποδεικνύει ποια ημέρα θεωρείται η έναρξη μιας νέας εβδομάδας (για παράδειγμα, <code>Day.Sunday</code>). Αν δεν καθορίζεται, χρησιμοποιείται η προεπιλογή βάσει κουλτούρας.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε ποια εβδομάδα του έτους περιέχει την 27η Μαρτίου 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Προσδιορίστε ποια εβδομάδα του έτους περιέχει την 27η Μαρτίου 2011, χρησιμοποιώντας τη Δευτέρα ως αρχή της εβδομάδας.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Επιστρέφει το στοιχείο έτους.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο έτους της παρεχόμενης τιμής <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το έτος στην #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Επιστρέφει το στοιχείο ημερομηνίας της δεδομένης τιμής date, datetime ή datetimezone.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο ημερομηνίας της <code>dateTime</code>, τη δεδομένη τιμή <code>date</code>, <code>datetime</code> ή <code>datetimezone</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την τιμή ημερομηνίας της #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Δημιουργεί μια datetime από την τιμή που δόθηκε.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>datetime</code> από το δεδομένο <code>value</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code>(για παράδειγμα, \"en-US\").\r\nΑν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>DateTime.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>datetime</code>, επιστρέφει <code>value</code>. Οι τιμές των ακόλουθων τύπων μπορούν να μετατραπούν σε τιμή <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: Μια τιμή <code>datetime</code> από αναπαράσταση κειμένου. Ανατρέξτε στο <code>DateTime.FromText</code> για λεπτομέρειες.</li>\r\n        <li><code>date</code>: Ένα <code>datetime</code> με <code>value</code> ως στοιχείο ημερομηνίας και το <code>12 :00:00 π.μ.</code> ως στοιχείο ώρας.</li>\r\n        <li><code>datetimezone</code>: Το τοπικό <code>datetime</code> ισοδύναμο του <code>value</code>.</li>\r\n        <li><code>time</code>: Ένα <code>datetime</code> με το ισοδύναμο ημερομηνίας του OLE Automation Date <code>0</code> ως στοιχείο ημερομηνίας και <code>value</code> ως στοιχείο ώρας.</li>\r\n        <li><code>number</code>: Ένα ισοδύναμο <code>datetime</code> της Ημερομηνίας Αυτοματισμού OLE που εκφράζεται με <code>value</code>. </li>\r\n      </ul>\r\nΑν <code>value</code> είναι οποιουδήποτε άλλου τύπου, επιστρέφεται ένα σφάλμα.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε το <code>#time(06, 45, 12)</code> σε τιμή <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Μετατρέψτε το <code>#date(1975, 4, 4)</code> σε τιμή <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Δημιουργεί μια datetime από έναν αριθμό μήκους 64 bit.",
        "Documentation.LongDescription": "Δημιουργεί μια τιμή <code>datetime</code> από την τιμή <code>fileTime</code> και τη μετατρέπει στην τοπική ζώνη ώρας. Η filetime είναι μια τιμή ώρας αρχείου των Windows που αντιπροσωπεύει τον αριθμό διαστημάτων 100 nanosecond που πέρασαν από τις 12:00 τα μεσάνυχτα, της 1ης Ιανουαρίου 1601 μ.Χ. (Κ.Ε.) Συντονισμένη παγκόσμια ώρα (UTC)\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε το <code>129876402529842245</code> σε τιμή datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Δημιουργεί μια datetimezone από τοπικές και παγκόσμιες μορφές ημερομηνίας/ώρας.",
        "Documentation.LongDescription": "Δημιουργεί μια τιμή <code>datetime</code> από μια αναπαράσταση κειμένου, <code>text</code>. Μπορεί να παρέχεται μια προαιρετική παράμετρος <code>record</code>, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Το <code>record</code> μπορεί να περιέχει τα ακόλουθα πεδία:\r\n<ul>\r\n   <li><code>Format</code>: Μια τιμή <code>text</code> που υποδεικνύει τη μορφή που θα χρησιμοποιηθεί. Για περισσότερες λεπτομέρειες, μεταβείτε στη διεύθυνση https://go.microsoft.com/fwlink/?linkid=2180104 και https://go.microsoft.com/fwlink/?linkid=2180105. Η παράλειψη αυτού του πεδίου ή η παροχή <code>null</code> θα έχει ως αποτέλεσμα την ανάλυση της ημερομηνίας με την καλύτερη δυνατή προσπάθεια.</li>\r\n   <li><code>Culture</code>: Όταν το <code>Format</code> δεν είναι null, το <code>Culture</code> ελέγχει ορισμένους προσδιοριστές μορφής. Για παράδειγμα, στο <code>\"en-US\"</code> <code>\"MMM\"</code> είναι <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ενώ στο <code>\"ru-RU\"</code> <code>\"MMM\"</code> είναι <code>\"янв\", \"фев\", \"мар\", ...</code>. Όταν το <code>Format</code> είναι <code>null</code>, το <code>Culture</code> ελέγχει την προεπιλεγμένη μορφή που θα χρησιμοποιηθεί. Όταν το <code>Culture</code> είναι <code>null</code> ή παραλείπεται, χρησιμοποιείται το <code>Culture.Current</code>.</li>\r\n</ul>\r\nΓια την υποστήριξη ροών εργασίας παλαιού τύπου, το <code>options</code> μπορεί επίσης να μια τιμή κειμένου. Αυτό έχει την ίδια συμπεριφορά σαν <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή <code>\"2010-12-31T01:30:00\"</code> σε τιμή ημερομηνίας/ώρας.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Μετατροπή <code>\"2010-12-31T01:30:00.121212\"</code> σε τιμή ημερομηνίας/ώρας.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Μετατροπή <code>\"2010-12-31T01:30:00\"</code> σε τιμή ημερομηνίας/ώρας.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Μετατροπή <code>\"20101231T013000\"</code> σε τιμή ημερομηνίας/ώρας.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια της τρέχουσας ώρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η συγκεκριμένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια της τρέχουσας ώρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν η τρέχουσα ώρα συστήματος είναι εντός της τρέχουσας ώρας.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια του τρέχοντος λεπτού, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η συγκεκριμένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του τρέχοντος λεπτού, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν η τρέχουσα ώρα συστήματος είναι εντός του τρέχοντος λεπτού.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια του τρέχοντος δευτερολέπτου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.",
        "Documentation.LongDescription": "Υποδεικνύει αν η συγκεκριμένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του τρέχοντος δευτερολέπτου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν η τρέχουσα ώρα συστήματος είναι εντός του τρέχοντος δευτερολέπτου.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια της επόμενης ώρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ώρας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια της επόμενης ώρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ώρας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν η ώρα μετά την τρέχουσα ώρα συστήματος είναι εντός της επόμενης ώρας.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια του επόμενου λεπτού, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος λεπτού.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του επόμενου λεπτού, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος λεπτού.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν το λεπτό μετά την τρέχουσα ώρα συστήματος είναι εντός του επόμενου λεπτού.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια του επόμενου δευτερολέπτου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος δευτερολέπτου.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του επόμενου δευτερολέπτου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος δευτερολέπτου.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν το δευτερόλεπτο μετά την τρέχουσα ώρα συστήματος είναι εντός του επόμενου δευτερολέπτου.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια της προηγούμενης ώρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ώρας.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια της προηγούμενης ώρας, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός της τρέχουσας ώρας.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν η ώρα πριν από την τρέχουσα ώρα συστήματος είναι εντός της προηγούμενης ώρας.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια του προηγούμενου λεπτού, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος λεπτού.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του προηγούμενου λεπτού, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος λεπτού.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν το λεπτό πριν από την τρέχουσα ώρα συστήματος είναι εντός του προηγούμενου λεπτού.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Υποδεικνύει αν αυτή η τιμή datetime εμφανίζεται στη διάρκεια του προηγούμενου δευτερολέπτου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος δευτερολέπτου.",
        "Documentation.LongDescription": "Υποδεικνύει αν η δεδομένη τιμή datetime <code>dateTime</code> εμφανίζεται στη διάρκεια του προηγούμενου δευτερολέπτου, όπως προσδιορίζεται από την τρέχουσα ημερομηνία και ώρα του συστήματος. Λάβετε υπόψη ότι αυτή η συνάρτηση θα επιστρέψει την τιμή false όταν της διαβιβαστεί μια τιμή που εμφανίζεται εντός του τρέχοντος δευτερολέπτου.\r\n      <ul>\r\n      <li><code>dateTime</code>: Μια τιμή <code>datetime</code> ή <code>datetimezone</code> προς αξιολόγηση.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν το δευτερόλεπτο πριν από την τρέχουσα ώρα συστήματος είναι εντός του προηγούμενου δευτερολέπτου.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Επιστρέφει το τμήμα ώρας της δεδομένης τιμής datetime.",
        "Documentation.LongDescription": "Επιστρέφει το τμήμα ώρας της δεδομένης τιμής datetime <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την τιμή ώρας της #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Επιστρέφει μια εγγραφή που περιέχει τα τμήματα της τιμής datetime.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή που περιέχει τα τμήματα της τιμής datetime <code>dateTime</code> που δόθηκε.\r\n <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>datetime</code> για την οποία πρόκειται να υπολογιστεί η εγγραφή των μερών της.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε την τιμή <code>#datetime(2011, 12, 31, 11, 56, 2)</code> σε μια εγγραφή που περιέχει τις τιμές \"Ημερομηνία\" και \"Ώρα\".",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Επιστρέφει μια αναπαράσταση κειμένου της τιμής datetime.",
        "Documentation.LongDescription": "Επιστρέφει μια αναπαράσταση κειμένου του <code>dateTime</code>. Μπορεί να παρέχεται μια προαιρετική παράμετρος <code>record</code>, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Το <code>culture</code> χρησιμοποιείται μόνο για παλαιού τύπου ροές εργασίας. Το <code>record</code> μπορεί να περιέχει τα ακόλουθα πεδία:\r\n<ul>\r\n   <li><code>Format</code>: Μια τιμή <code>text</code> που υποδεικνύει τη μορφή που θα χρησιμοποιηθεί. Για περισσότερες λεπτομέρειες, μεταβείτε στη διεύθυνση https://go.microsoft.com/fwlink/?linkid=2180104 και https://go.microsoft.com/fwlink/?linkid=2180105. Η παράλειψη αυτού του πεδίου ή η παροχή <code>null</code> θα έχει ως αποτέλεσμα τη μορφοποίηση της ημερομηνίας χρησιμοποιώντας την προεπιλογή που ορίζεται από το <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Όταν το <code>Format</code> δεν είναι null, το <code>Culture</code> ελέγχει ορισμένους προσδιοριστές μορφής. Για παράδειγμα, στο <code>\"en-US\"</code> <code>\"MMM\"</code> είναι <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ενώ στο <code>\"ru-RU\"</code> <code>\"MMM\"</code> είναι <code>\"янв\", \"фев\", \"мар\", ...</code>. Όταν το <code>Format</code> είναι <code>null</code>, το <code>Culture</code> ελέγχει την προεπιλεγμένη μορφή που θα χρησιμοποιηθεί. Όταν το <code>Culture</code> είναι <code>null</code> ή παραλείπεται, χρησιμοποιείται το <code>Culture.Current</code>.</li>\r\n</ul>\r\nΓια την υποστήριξη ροών εργασίας παλαιού τύπου, το <code>options</code> και το <code>culture</code> μπορεί επίσης να είναι τιμές κειμένου. Αυτό έχει την ίδια συμπεριφορά σαν <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή <code>#datetime(2010, 12, 31, 01, 30, 25)</code> σε τιμή <code>text</code>. <i>Το αποτέλεσμα μπορεί να διαφέρει ανάλογα με την τρέχουσα κουλτούρα.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Μετατροπή με χρήση προσαρμοσμένης μορφής και της γερμανικής κουλτούρας.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Μετατροπή με χρήση του μοτίβου ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Δημιουργεί μια datetimezone από την τιμή που δόθηκε.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>datetimezone</code> από το δεδομένο <code>value</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code>(για παράδειγμα, \"en-US\").\r\nΕάν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>DateTimeZone.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>datetimezone</code>, επιστρέφεται <code>value</code>. Οι τιμές των ακόλουθων τύπων μπορούν να μετατραπούν σε τιμή <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: Μια τιμή <code>datetimezone</code> από αναπαράσταση κειμένου. Ανατρέξτε στο <code>DateTimeZone.FromText</code> για λεπτομέρειες.</li>\r\n        <li><code>date</code>: Μια <code>datetimezone</code> με <code>value</code> ως στοιχείο ημερομηνίας, <code>12 :00:00 πμ</code> ως το στοιχείο ώρας και η μετατόπιση που αντιστοιχεί στην τοπική ζώνη ώρας.</li>\r\n        <li><code>datetime</code>: Μια <code>datetimezone</code> με <code>value</code> ως το datetime και η μετατόπιση που αντιστοιχεί στην τοπική ζώνη ώρας.</li>\r\n        <li><code>time</code>: Μια <code>datetimezone</code> με ισοδύναμο ημερομηνίας της Ημερομηνίας Αυτοματισμού OLE του <code>0</code> ως στοιχείο ημερομηνίας, <code>value</code> ως στοιχείο ώρας και μετατόπιση που αντιστοιχεί στην τοπική ζώνη ώρας.</li>\r\n        <li><code>number</code>: Ένα <code>datetimezone</code> με το ισοδύναμο ημερομηνίας ώρας. της Ημερομηνίας Αυτοματισμού OLE που εκφράζεται με <code>value</code> και της μετατόπισης που αντιστοιχεί στην τοπική ζώνη ώρας.</li>\r\n      </ul>\r\nΑν <code>value</code> είναι οποιουδήποτε άλλου τύπου, επιστρέφεται ένα σφάλμα.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε το <code>\"2020-10-30T01:30:00-08:00\"</code> σε τιμή <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Δημιουργεί μια datetimezone από έναν αριθμού μήκους 64 bit.",
        "Documentation.LongDescription": "Δημιουργεί μια τιμή <code>datetimezone</code> από την τιμή <code>fileTime</code> και τη μετατρέπει στην τοπική ζώνη ώρας. Η filetime είναι μια τιμή ώρας αρχείου των Windows που αντιπροσωπεύει τον αριθμό διαστημάτων 100 νανοδευτερολέπτων που πέρασαν από τις 12:00 τα μεσάνυχτα της 1ης Ιανουαρίου 1601 μ.Χ. (Κ.Ε.) Συντονισμένη παγκόσμια ώρα (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε το <code>129876402529842245</code> σε τιμή datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Δημιουργεί μια ζώνη ημερομηνίας/ώρας από τοπικές, καθολικές και προσαρμοσμένες μορφές ζώνης ημερομηνίας/ώρας.",
        "Documentation.LongDescription": "Δημιουργεί μια τιμή <code>datetimezone</code> από μια αναπαράσταση κειμένου, <code>text</code>. Μπορεί να παρέχεται μια προαιρετική παράμετρος <code>record</code>, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Το <code>record</code> μπορεί να περιέχει τα ακόλουθα πεδία:\r\n<ul>\r\n   <li><code>Format</code>: Μια τιμή <code>text</code> που υποδεικνύει τη μορφή που θα χρησιμοποιηθεί. Για περισσότερες λεπτομέρειες, μεταβείτε στη διεύθυνση https://go.microsoft.com/fwlink/?linkid=2180104 και https://go.microsoft.com/fwlink/?linkid=2180105. Η παράλειψη αυτού του πεδίου ή η παροχή <code>null</code> θα έχει ως αποτέλεσμα την ανάλυση της ημερομηνίας με την καλύτερη δυνατή προσπάθεια.</li>\r\n   <li><code>Culture</code>: Όταν το <code>Format</code> δεν είναι null, το <code>Culture</code> ελέγχει ορισμένους προσδιοριστές μορφής. Για παράδειγμα, στο <code>\"en-US\"</code> <code>\"MMM\"</code> είναι <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ενώ στο <code>\"ru-RU\"</code> <code>\"MMM\"</code> είναι <code>\"янв\", \"фев\", \"мар\", ...</code>. Όταν το <code>Format</code> είναι <code>null</code>, το <code>Culture</code> ελέγχει την προεπιλεγμένη μορφή που θα χρησιμοποιηθεί. Όταν το <code>Culture</code> είναι <code>null</code> ή παραλείπεται, χρησιμοποιείται το <code>Culture.Current</code>.</li>\r\n</ul>\r\nΓια την υποστήριξη ροών εργασίας παλαιού τύπου, το <code>options</code> μπορεί επίσης να μια τιμή κειμένου. Αυτό έχει την ίδια συμπεριφορά σαν <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή <code>\"2010-12-31T01:30:00-08:00\"</code> σε τιμή <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Μετατροπή με χρήση προσαρμοσμένης μορφής και της γερμανικής κουλτούρας.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Μετατροπή με χρήση ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Καταργεί τις πληροφορίες ζώνης ώρας από την τιμή της datetimezone που δόθηκε.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή #datetime από την <code>dateTimeZone</code> έχοντας καταργήσει τις πληροφορίες ζώνης ώρας.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε τις πληροφορίες ζώνης ώρας από την τιμή #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Μετατρέπει το στοιχείο ζώνης ώρας στην τοπική ζώνη ώρας.",
        "Documentation.LongDescription": "Αλλάζει τις πληροφορίες ζώνης της τιμής datetimezone <code>dateTimeZone</code> με τις πληροφορίες της τοπικής ζώνης ώρας.\r\n    Εάν η <code>dateTimeZone</code> δεν διαθέτει στοιχείο ζώνης ώρας, προστίθενται οι πληροφορίες της τοπικής ζώνης ώρας.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Αλλάξτε τις πληροφορίες ζώνης ώρας για την #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) στην τοπική ζώνη ώρας (έστω PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Επιστρέφει μια εγγραφή που περιέχει τα τμήματα της τιμής datetimezone.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή που περιέχει τα τμήματα της τιμής datetimezone <code>dateTimeZone</code> που δόθηκε.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: Μια τιμή <code>datetimezone</code> για την οποία πρόκειται να υπολογιστεί η εγγραφή των μερών της.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε την τιμή <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> σε μια εγγραφή που περιέχει τις τιμές \"Ημερομηνία\", \"Ώρα\" και \"Ζώνη\".",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Επιστρέφει μια αναπαράσταση κειμένου της τιμής datetimezone.",
        "Documentation.LongDescription": "Επιστρέφει μια αναπαράσταση κειμένου του <code>dateTimeZone</code>. Μπορεί να παρέχεται μια προαιρετική παράμετρος <code>record</code>, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Το <code>culture</code> χρησιμοποιείται μόνο για παλαιού τύπου ροές εργασίας. Το <code>record</code> μπορεί να περιέχει τα ακόλουθα πεδία:\r\n<ul>\r\n   <li><code>Format</code>: Μια τιμή <code>text</code> που υποδεικνύει τη μορφή που θα χρησιμοποιηθεί. Για περισσότερες λεπτομέρειες, μεταβείτε στη διεύθυνση https://go.microsoft.com/fwlink/?linkid=2180104 και https://go.microsoft.com/fwlink/?linkid=2180105. Η παράλειψη αυτού του πεδίου ή η παροχή <code>null</code> θα έχει ως αποτέλεσμα τη μορφοποίηση της ημερομηνίας χρησιμοποιώντας την προεπιλογή που ορίζεται από το <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Όταν το <code>Format</code> δεν είναι null, το <code>Culture</code> ελέγχει ορισμένους προσδιοριστές μορφής. Για παράδειγμα, στο <code>\"en-US\"</code> <code>\"MMM\"</code> είναι <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ενώ στο <code>\"ru-RU\"</code> <code>\"MMM\"</code> είναι <code>\"янв\", \"фев\", \"мар\", ...</code>. Όταν το <code>Format</code> είναι <code>null</code>, το <code>Culture</code> ελέγχει την προεπιλεγμένη μορφή που θα χρησιμοποιηθεί. Όταν το <code>Culture</code> είναι <code>null</code> ή παραλείπεται, χρησιμοποιείται το <code>Culture.Current</code>.</li>\r\n</ul>\r\nΓια την υποστήριξη ροών εργασίας παλαιού τύπου, το <code>options</code> και το <code>culture</code> μπορεί επίσης να είναι τιμές κειμένου. Αυτό έχει την ίδια συμπεριφορά σαν <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> σε τιμή <code>text</code>. <i>Το αποτέλεσμα μπορεί να διαφέρει ανάλογα με την τρέχουσα κουλτούρα.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Μετατροπή με χρήση προσαρμοσμένης μορφής και της γερμανικής κουλτούρας.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Μετατροπή με χρήση του μοτίβου ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Μετατρέπει το στοιχείο ζώνης ώρας στη ζώνη ώρας UTC.",
        "Documentation.LongDescription": "Αλλάζει τις πληροφορίες ζώνης της τιμής datetime <code>dateTimeZone</code> με τις πληροφορίες της ζώνης ώρας UTC ή παγκόσμιας ώρας.\r\n    Εάν η <code>dateTimeZone</code> δεν διαθέτει στοιχείο ζώνης ώρας, προστίθενται οι πληροφορίες της ζώνης ώρας UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Αλλάξτε τις πληροφορίες ζώνης ώρας για την #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) σε ζώνη ώρας UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Αλλάζει τη ζώνη ώρας της τιμής.",
        "Documentation.LongDescription": "Αλλάζει τη ζώνη ώρας της τιμής.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Αλλάζει τη ζώνη ώρας της τιμής.",
        "Documentation.LongDescription": "Αλλάζει τη ζώνη ώρας της τιμής.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Δημιουργεί μια δεκαδική τιμή από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια δεκαδική τιμή <code>number</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Decimal.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>number</code> εντός του εύρους του Δεκαδικού, επιστρέφεται <code>value</code>, διαφορετικά επιστρέφεται ένα σφάλμα. Αν <code>value</code> είναι οποιουδήποτε άλλου τύπου, θα μετατραπεί πρώτα σε <code>αριθμός</code> χρησιμοποιώντας το <code>Number.FromText</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code>(για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή δεκαδικού <code>number</code> του <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα του πίνακα Delta Lake.",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα του πίνακα Delta Lake.",
        "Documentation.Category": "Πρόσβαση σε δεδομένα",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Δημιουργεί διπλή τιμή από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια διπλή τιμή <code>number</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Double.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>number</code> εντός του εύρους Double, επιστρέφεται <code>value</code>, διαφορετικά επιστρέφεται σφάλμα. Αν <code>value</code> είναι οποιουδήποτε άλλου τύπου, θα μετατραπεί πρώτα σε <code>number</code> χρησιμοποιώντας το <code>Number.FromText</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code>(για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε τη διπλή τιμή <code>number</code> του <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Επιστρέφει το τμήμα ημερών μιας διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει το τμήμα ημερών του <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Εξαγάγετε τον αριθμό των ημερών μεταξύ δύο ημερομηνιών.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Δημιουργεί μια διάρκεια από την τιμή που δόθηκε.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>duration</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Duration.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>duration</code>, επιστρέφεται <code>value</code>. Οι τιμές των ακόλουθων τύπων μπορούν να μετατραπούν σε τιμή <code>duration</code>:\r\n      <ul>\r\n        <li><code>text</code>: Μια τιμή <code>duration</code> από φόρμες χρόνου που έχει παρέλθει στο κείμενο (δ:μ:ς). Ανατρέξτε στο <code>Duration.FromText</code> για λεπτομέρειες.</li>\r\n        <li><code>number</code>: Μια <code>duration</code> ισοδύναμη με τον αριθμό των ολόκληρων και των κλασματικών ημερών που εκφράζονται από <code>value</code>.</li>\r\n      </ul>\r\nΑν <code>value</code> είναι οποιουδήποτε άλλου τύπου, επιστρέφεται ένα σφάλμα.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε την <code>2.525</code> σε μια τιμή <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Επιστρέφει μια τιμή διάρκειας από μορφές κειμένου του χρόνου που πέρασε (η.ω:λ:δ).",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή διάρκειας από το καθορισμένο κείμενο <code>text</code>. Οι ακόλουθες μορφές μπορούν να αναλυθούν από αυτήν τη συνάρτηση: \r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Όλες οι περιοχές περιλαμβάνουν την μικρότερη και τη μεγαλύτερη τιμή)<br>\r\n        ddd: Αριθμός ημερών.<br>\r\n        hh: Αριθμός ωρών, μεταξύ 0 και 23.<br>\r\n        mm: Αριθμός λεπτών, μεταξύ 0 και 59.<br>\r\n        ss: Αριθμός δευτερολέπτων, μεταξύ 0 και 59.<br>\r\n        ff: Κλάσμα δευτερολέπτων, μεταξύ 0 και 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε την <code>\"2.05:55:20\"</code> σε μια τιμή <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Επιστρέφει το τμήμα ωρών μιας διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει το τμήμα ωρών του <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Εξαγάγετε τις ώρες από μια τιμή διάρκειας.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Επιστρέφει το τμήμα λεπτών μιας διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει το τμήμα λεπτών του <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Εξαγάγετε τα λεπτά από μια τιμή διάρκειας.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Επιστρέφει το τμήμα δευτερολέπτων μιας διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει το τμήμα δευτερολέπτων του <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Εξαγάγετε τα δευτερόλεπτα από μια τιμή διάρκειας.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Επιστρέφει μια εγγραφή που περιέχει τα τμήματα της διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή που περιέχει τα τμήματα της τιμής διάρκειας, <code>duration</code>. \r\n  <ul>\r\n        <li><code>duration</code>: Μια <code>duration</code> από την οποία δημιουργείται η εγγραφή.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε την παράσταση <code>#duration(2, 5, 55, 20)</code> σε μια εγγραφή με τα μέρη της, όπως οι ώρες, οι ημέρες, τα λεπτά και τα δευτερόλεπτα, εάν υπάρχουν.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Επιστρέφει το κείμενο της μορφής \"η.ω:λ:δ\".",
        "Documentation.LongDescription": "Επιστρέφει μια αναπαράσταση κειμένου στη μορφή day.hour:mins:sec της δεδομένης τιμής διάρκειας, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: Μια διάρκεια <code>duration</code> από την οποία υπολογίζεται η αναπαράσταση κειμένου.</li>\r\n  <li><code>format</code>: <i>[Προαιρετικό]</i> Υπό απόσυρση, θα παρουσιάσει σφάλμα, αν δεν έχει τιμή null</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε την <code>#duration(2, 5, 55, 20)</code> σε τιμή κειμένου.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Επιστρέφει τις συνολικές ημέρες στις οποίες εκτείνεται αυτή η διάρκεια.",
        "Documentation.LongDescription": "Επιστρέφει τις συνολικές ημέρες που εκτείνονται κατά <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τις συνολικές ημέρες που εκτείνονται από μια τιμή διάρκειας.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Επιστρέφει τις συνολικές ώρες στις οποίες εκτείνεται αυτή η διάρκεια.",
        "Documentation.LongDescription": "Επιστρέφει τις συνολικές ώρες που εκτείνονται κατά <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τις συνολικές ώρες που εκτείνονται από μια τιμή διάρκειας.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Επιστρέφει τα συνολικά λεπτά στα οποία εκτείνεται αυτή η διάρκεια.",
        "Documentation.LongDescription": "Επιστρέφει τα συνολικά λεπτά που εκτείνονται κατά <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τα συνολικά λεπτά που εκτείνονται από μια τιμή διάρκειας.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Επιστρέφει τα συνολικά δευτερόλεπτα στα οποία εκτείνεται αυτή η διάρκεια.",
        "Documentation.LongDescription": "Επιστρέφει τα συνολικά δευτερόλεπτα που εκτείνονται κατά <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τα συνολικά δευτερόλεπτα που εκτείνονται από μια τιμή διάρκειας.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Επιστρέφει μια εγγραφή σφάλματος από τις παρεχόμενες τιμές κειμένου για την αιτία, το μήνυμα και τις λεπτομέρειες.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή σφάλματος από τις παρεχόμενες τιμές κειμένου για την αιτία, το μήνυμα και τις λεπτομέρειες.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Επιστρέφει την αναπαράσταση κώδικα προέλευσης M μιας τιμής σταθεράς.",
        "Documentation.LongDescription": "Επιστρέφει την αναπαράσταση κώδικα προέλευσης M μιας τιμής σταθεράς.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την αναπαράσταση κώδικα προέλευσης M μιας αριθμητικής τιμής.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Λάβετε την αναπαράσταση κώδικα προέλευσης M μιας τιμής ημερομηνίας.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Λάβετε την αναπαράσταση κώδικα προέλευσης M μιας τιμής κειμένου.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα της αξιολόγησης μιας παράστασης M.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της αξιολόγησης μιας παράστασης M <code>document</code>, με τα διαθέσιμα αναγνωριστικά στα οποία μπορεί να γίνει αναφορά ορισμένα από <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Αξιολογήστε ένα απλό άθροισμα.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Αξιολογήστε ένα πιο σύνθετο άθροισμα.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Αξιολογήστε τη συνένωση μιας τιμής κειμένου με ένα αναγνωριστικό.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Επιστρέφει την αναπαράσταση κώδικα προέλευσης M ενός αναγνωριστικού.",
        "Documentation.LongDescription": "Επιστρέφει την αναπαράσταση κώδικα προέλευσης M ενός αναγνωριστικού <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την αναπαράσταση κώδικα προέλευσης M ενός αναγνωριστικού.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Λάβετε την αναπαράσταση κώδικα προέλευσης M ενός αναγνωριστικού που περιέχει ένα κενό διάστημα.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα του καθορισμένου αρχείου ως δυαδικά.",
        "Documentation.LongDescription": "Επιστρέφει το περιεχόμενο του αρχείου,<code>path</code>, ως δυαδικό. Η <code>options</code>παράμετρος προορίζεται προς το παρόν μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Προσδιορίζει αν μια συγκεκριμένη συνάρτηση θεωρείται προέλευση δεδομένων ή όχι και επιστρέφει τα αποτελέσματα.",
        "Documentation.LongDescription": "Προσδιορίζει αν το <code>function</code> θεωρείται προέλευση δεδομένων ή όχι και επιστρέφει τα αποτελέσματα.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Μεταφράζει το κείμενο που αναπαριστά μια γεωγραφική τιμή με μορφή Well-Known Text (WKT), σε μια δομημένη εγγραφή.",
        "Documentation.LongDescription": "Μεταφράζει το κείμενο που αναπαριστά μια γεωγραφική τιμή με μορφή Well-Known Text (WKT), σε μια δομημένη εγγραφή. Το WKT είναι μια τυπική μορφή που ορίζεται από το Open Geospatial Consortium (OGC) και είναι η τυπική μορφή σειριοποίησης που χρησιμοποιείται από βάσεις δεδομένων, συμπεριλαμβανομένου του SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Μεταφράζει μια δομημένη τιμή γεωγραφικού σημείου σε μια αναπαράσταση Well-Known Text (WKT).",
        "Documentation.LongDescription": "Μεταφράζει μια δομημένη τιμή γεωγραφικού σημείου σε μια αναπαράσταση Well-Known Text (WKT), όπως αυτή ορίζεται από το Open Geospatial Consortium (OGC), καθώς επίσης τη μορφή σειριοποίησης που χρησιμοποιείται από πολλές βάσεις δεδομένων, συμπεριλαμβανομένου του SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Μεταφράζει το κείμενο που αναπαριστά μια γεωμετρική τιμή με μορφή Well-Known Text (WKT), σε μια δομημένη εγγραφή.",
        "Documentation.LongDescription": "Μεταφράζει το κείμενο που αναπαριστά μια γεωμετρική τιμή με μορφή Well-Known Text (WKT), σε μια δομημένη εγγραφή. Το WKT είναι μια τυπική μορφή που ορίζεται από το Open Geospatial Consortium (OGC) και είναι η τυπική μορφή σειριοποίησης που χρησιμοποιείται από βάσεις δεδομένων, συμπεριλαμβανομένου του SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Μεταφράζει μια δομημένη τιμή γεωμετρικού σημείου σε μια αναπαράσταση Well-Known Text (WKT).",
        "Documentation.LongDescription": "Μεταφράζει μια δομημένη τιμή γεωμετρικού σημείου σε μια αναπαράσταση Well-Known Text (WKT), όπως ορίζεται από το Open Geospatial Consortium (OGC), καθώς επίσης τη μορφή σειριοποίησης που χρησιμοποιείται από πολλές βάσεις δεδομένων, συμπεριλαμβανομένου του SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Επιστρέφει μια τιμή GUID από τη δεδομένη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>Guid.Type</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Guid.From</code> επιστρέφει <code>null</code>. Θα γίνει έλεγχος για να διαπιστωθεί αν το δεδομένο <code>value</code> είναι σε αποδεκτή μορφή. Αποδεκτές μορφές που παρέχονται στα παραδείγματα.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Το GUID μπορεί να παρέχεται ως 32 συνεχόμενα δεκαεξαδικά ψηφία.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Το GUID μπορεί να παρέχεται ως 32 δεκαεξαδικά ψηφία που διαχωρίζονται με ενωτικά σε μπλοκ των 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Το GUID μπορεί να παρέχεται ως 32 δεκαεξαδικά ψηφία που διαχωρίζονται με ενωτικά και περικλείονται σε άγκιστρα.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Το GUID μπορεί να παρέχεται ως 32 δεκαεξαδικά ψηφία που διαχωρίζονται με ενωτικά και περικλείονται σε παρενθέσεις.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Δημιουργεί έναν ακέραιο 16 bit από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια ακέραια τιμή <code>number</code> 16 bit από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Int16.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>number</code> εντός του εύρους ακέραιου αριθμού 16-bit χωρίς κλασματικό τμήμα, επιστρέφεται <code>value</code>. Αν έχει κλασματικό τμήμα, τότε ο αριθμός στρογγυλοποιείται με τον καθορισμένο τρόπο στρογγυλοποίησης. Η προεπιλεγμένη λειτουργία στρογγυλοποίησης είναι <code>RoundingMode.ToEven</code>. Αν <code>value</code> είναι οποιουδήποτε άλλου τύπου, θα μετατραπεί πρώτα σε <code>number</code> χρησιμοποιώντας το <code>Number.FromText</code>. Ανατρέξτε στο <code>Number.Round</code> για τις διαθέσιμες λειτουργίες στρογγυλοποίησης. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code>(για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή ακέραιου 16 bit <code>number</code> του <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Λάβετε την τιμή ακέραιου 16 bit <code>number</code> του <code>\"4.5\"</code> χρησιμοποιώντας το <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Δημιουργεί έναν ακέραιο 32 bit από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή ακέραιου <code>number</code> 32 bit από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Int32.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>number</code> εντός του εύρους ακέραιου αριθμού 32 bit χωρίς κλασματικό τμήμα, επιστρέφεται <code>value</code>. Αν έχει κλασματικό τμήμα, τότε ο αριθμός στρογγυλοποιείται με τον καθορισμένο τρόπο στρογγυλοποίησης. Η προεπιλεγμένη λειτουργία στρογγυλοποίησης είναι <code>RoundingMode.ToEven</code>. Αν <code>value</code> είναι οποιουδήποτε άλλου τύπου, θα μετατραπεί πρώτα σε <code>number</code> χρησιμοποιώντας το <code>Number.FromText</code>. Ανατρέξτε στο <code>Number.Round</code> για τις διαθέσιμες λειτουργίες στρογγυλοποίησης. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code>(για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή ακέραιου 32 bit <code>number</code> του <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Λάβετε την τιμή ακέραιου 32 bit <code>number</code> του <code>\"4.5\"</code> χρησιμοποιώντας το <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Δημιουργεί έναν ακέραιο 64 bit από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια ακέραια τιμή <code>number</code> 64 bit από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Int64.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>number</code> εντός του εύρους ακέραιου αριθμού 64-bit χωρίς κλασματικό τμήμα, επιστρέφεται <code>value</code>. Αν έχει κλασματικό τμήμα, τότε ο αριθμός στρογγυλοποιείται με τον καθορισμένο τρόπο στρογγυλοποίησης. Η προεπιλεγμένη λειτουργία στρογγυλοποίησης είναι <code>RoundingMode.ToEven</code>. Αν <code>value</code> είναι οποιουδήποτε άλλου τύπου, θα μετατραπεί πρώτα σε <code>number</code> χρησιμοποιώντας το <code>Number.FromText</code>. Ανατρέξτε στο <code>Number.Round</code> για τις διαθέσιμες λειτουργίες στρογγυλοποίησης. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή ακέραιου 64 bit <code>number</code> του <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Λάβετε την τιμή ακέραιου 64 bit <code>number</code> του <code>\"4,5\"</code> χρησιμοποιώντας το <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Δημιουργεί έναν υπογεγραμμένο ακέραιο 8 bit από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια υπογεγραμμένη ακέραια τιμή <code>number</code> 8-bit από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Int8.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>number</code> εντός του εύρους υπογεγραμμένου ακέραιου αριθμού 8-bit χωρίς κλασματικό μέρος, επιστρέφεται <code>value</code>. Αν έχει κλασματικό τμήμα, τότε ο αριθμός στρογγυλοποιείται με τον καθορισμένο τρόπο στρογγυλοποίησης. Η προεπιλεγμένη λειτουργία στρογγυλοποίησης είναι <code>RoundingMode.ToEven</code>. Αν <code>value</code> είναι οποιουδήποτε άλλου τύπου, θα μετατραπεί πρώτα σε <code>number</code> χρησιμοποιώντας το <code>Number.FromText</code>. Ανατρέξτε στο <code>Number.Round</code> για τις διαθέσιμες λειτουργίες στρογγυλοποίησης. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή του υπογεγραμμένου ακέραιου 8 bit <code>number</code> του <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Λάβετε την τιμή του υπογεγραμμένου ακέραιου 8 bit <code>number</code> του <code>\"4.5\"</code> χρησιμοποιώντας το <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Επιστρέφει το αφηρημένο δέντρο σύνταξης (AST) για το σώμα μιας συνάρτησης.",
        "Documentation.LongDescription": "<p>Επιστρέφει το δέντρο αφηρημένης σύνταξης (AST) για το σώμα του <code>function</code>, κανονικοποιημένο σε έκφραση <i>στοιχείου</i>:\r\n<ul>\r\n  <li>Η συνάρτηση πρέπει να είναι 1-όρισμα λάμδα.</li>\r\n  <li>Όλες οι αναφορές στην παράμετρο συνάρτησης αντικαθίστανται με <code>ItemExpression.Item</code>.</li>\r\n  <li>Το AST θα απλοποιηθεί ώστε να περιέχει μόνο κόμβους των ειδών:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Παρουσιάζεται σφάλμα εάν μια έκφραση στοιχείου AST δεν μπορεί να επιστραφεί για το σώμα του <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει το AST για το σώμα της συνάρτησης <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Επιστρέφει το περιεχόμενο του εγγράφου JSON.",
        "Documentation.LongDescription": "Επιστρέφει το περιεχόμενο του εγγράφου JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Παράγει την αναπαράσταση JSON μιας δεδομένης τιμής.",
        "Documentation.LongDescription": "<p>Παράγει μια αναπαράσταση JSON μιας δεδομένης τιμής <code>value</code> με κωδικοποίηση κειμένου που καθορίζεται από <code>encoding</code>. Αν η κωδικοποίηση <code>encoding</code> παραλειφθεί, χρησιμοποιείται η κωδικοποίηση UTF-8. Οι τιμές αναπαρίστανται ως εξής:</p>\r\n <ul>\r\n        <li>Οι τιμές null, κειμένου και οι λογικές τιμές αναπαρίστανται ως αντίστοιχοι τύποι JSON</li>\r\n        <li>Οι αριθμοί αναπαρίστανται ως αριθμοί σε JSON, με την εξαίρεση ότι τα <code>#infinity</code>, <code>-#infinity</code> και <code>#nan</code> μετατρέπονται σε null</li>\r\n        <li>Οι λίστες αναπαρίστανται ως πίνακες JSON</li>\r\n        <li>Οι εγγραφές αναπαρίστανται ως αντικείμενα JSON</li>\r\n        <li>Οι πίνακες αναπαρίστανται ως πίνακας αντικείμενων</li>\r\n        <li>Οι ημερομηνίες, οι ώρες, τα datetime, τα datetimezone και οι διάρκειες αναπαρίστανται ως κείμενο ISO-8601</li>\r\n        <li>Οι δυαδικές τιμές αναπαρίστανται ως κείμενο με κωδικοποίηση base 64</li>\r\n        <li>Οι τύποι και οι συναρτήσεις προκαλούν σφάλμα</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέπει μια σύνθετη τιμή σε JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Μετατρέπει μια δυαδική τιμή σε μια λίστα τιμών κειμένου διαιρεμένων με αλλαγές γραμμής.  Αν καθοριστεί στυλ εισαγωγικών, οι αλλαγές γραμμής ενδέχεται να εμφανίζονται μέσα σε εισαγωγικά.  Αν η includeLineSeparators είναι true, οι χαρακτήρες αλλαγής γραμμής συμπεριλαμβάνονται στο κείμενο.",
        "Documentation.LongDescription": "Μετατρέπει μια δυαδική τιμή σε μια λίστα τιμών κειμένου διαιρεμένων με αλλαγές γραμμής.  Αν καθοριστεί στυλ εισαγωγικών, οι αλλαγές γραμμής ενδέχεται να εμφανίζονται μέσα σε εισαγωγικά.  Αν η includeLineSeparators είναι true, οι χαρακτήρες αλλαγής γραμμής συμπεριλαμβάνονται στο κείμενο.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Μετατρέπει μια τιμή κειμένου σε λίστα τιμών κειμένου διαιρεμένων με αλλαγές γραμμής. Αν το includeLineSeparators είναι true, οι χαρακτήρες αλλαγής γραμμής περιλαμβάνονται στο κείμενο.",
        "Documentation.LongDescription": "Μετατρέπει μια τιμή κειμένου σε λίστα τιμών κειμένου διαιρεμένων με αλλαγές γραμμής. Αν το includeLineSeparators είναι true, τότε οι χαρακτήρες αλλαγής γραμμής περιλαμβάνονται στο κείμενο.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (προεπιλογή) Δεν χρειάζεται συμπεριφορά εισαγωγικών.</li>\r\n            <li><code>QuoteStyle.Csv:</code> Τα εισαγωγικά είναι σύμφωνα με το Csv. Για την οριοθέτηση αυτών των περιοχών χρησιμοποιείται ένας χαρακτήρας διπλών εισαγωγικών, ενώ για την υπόδειξη ενός μονού διπλού χαρακτήρα εισαγωγικών σε αυτήν την περιοχή χρησιμοποιείται ένα ζεύγος χαρακτήρων διπλών εισαγωγικών. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Μετατρέπει μια λίστα κειμένου σε μια δυαδική τιμή χρησιμοποιώντας την καθορισμένη κωδικοποίηση και lineSeparator. Η καθορισμένη lineSeparator προσαρτάται στο τέλος κάθε γραμμής.  Εάν δεν καθορίζεται, χρησιμοποιούνται οι χαρακτήρες επαναφοράς και αλλαγής γραμμής.",
        "Documentation.LongDescription": "Μετατρέπει μια λίστα κειμένου σε μια δυαδική τιμή χρησιμοποιώντας την καθορισμένη κωδικοποίηση και lineSeparator. Η καθορισμένη lineSeparator προσαρτάται στο τέλος κάθε γραμμής.  Εάν δεν καθορίζεται, χρησιμοποιούνται οι χαρακτήρες επαναφοράς και αλλαγής γραμμής.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Μετατρέπει μια λίστα κειμένου σε ένα κείμενο.  Η καθορισμένη lineSeparator προσαρτάται σε κάθε γραμμή.  Εάν δεν καθορίζεται, χρησιμοποιούνται οι χαρακτήρες επαναφοράς και αλλαγής γραμμής.",
        "Documentation.LongDescription": "Μετατρέπει μια λίστα κειμένου σε ένα κείμενο.  Η καθορισμένη lineSeparator προσαρτάται σε κάθε γραμμή.  Εάν δεν καθορίζεται, χρησιμοποιούνται οι χαρακτήρες επαναφοράς και αλλαγής γραμμής.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Επιστρέφει true εάν και οι δύο παραστάσεις είναι true.",
        "Documentation.LongDescription": "Επιστρέφει true εάν όλες οι παραστάσεις στη λίστα <code>list</code> είναι true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε εάν όλες οι παραστάσεις στη λίστα {true, true, 2 > 0} είναι true.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Προσδιορίστε εάν όλες οι παραστάσεις στη λίστα {true, true, 2 < 0} είναι true.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Επιστρέφει true εάν οποιαδήποτε από τις παραστάσεις είναι true.",
        "Documentation.LongDescription": "Επιστρέφει true εάν οποιαδήποτε από τις παραστάσεις στη λίστα <code>list</code> είναι true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε εάν οποιαδήποτε από τις παραστάσεις στη λίστα {true, false, 2 > 0} είναι true.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Προσδιορίστε εάν οποιαδήποτε από τις παραστάσεις στη λίστα {2 = 0, false, 2 < 0} είναι true.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Επιστρέφει το μέσο όρο των τιμών. Λειτουργεί με αριθμητικές τιμές, τιμές ημερομηνίας, ημερομηνίας/ώρας, ημερομηνίας/ώρας/ζώνης ώρας και διάρκειας.",
        "Documentation.LongDescription": "Επιστρέφει τη μέση τιμή για τα στοιχεία της λίστας, <code>list</code>. Το αποτέλεσμα παρέχεται στον ίδιο τύπο δεδομένων όπως οι τιμές στη λίστα. Λειτουργεί μόνο με αριθμητικές τιμές, τιμές ημερομηνίας, ώρας, ημερομηνίας/ώρας, ημερομηνίας/ώρας/ζώνης ώρας και διάρκειας.\r\n    Εάν η λίστα είναι κενή, επιστρέφεται η τιμή null.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τον μέσο όρο της λίστας αριθμών, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Βρείτε τον μέσο όρο των τιμών ημερομηνίας, 1 Ιανουαρίου 2011, 2 Ιανουαρίου 2011 και 3 Ιανουαρίου 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Αποθηκεύει μια λίστα στο buffer.",
        "Documentation.LongDescription": "Αποθηκεύει στο buffer τη λίστα <code>list</code> της μνήμης. Το αποτέλεσμα αυτής της κλήσης είναι μια σταθερή λίστα.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε ένα σταθερό αντίγραφο της λίστας {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Επιστρέφει μία λίστα συνδυάζοντας πολλές λίστες.",
        "Documentation.LongDescription": "Λαμβάνει μια λίστα από λίστες, <code>lists</code>, και τις συγχωνεύει σε μία νέα λίστα.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Συνδυάστε τις δύο απλές λίστες {1, 2} και {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Συνδυάστε τις δύο λίστες, {1, 2} και {3, {4, 5}}, μία από τις οποίες περιέχει μια ένθετη λίστα.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Επιστρέφει τον αριθμό των στοιχείων της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό των στοιχείων της λίστας <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τον αριθμό των τιμών της λίστας {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Επιστρέφει μια λίστα τιμών από την οποία έχουν αφαιρεθεί οι διπλότυπες τιμές.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα που οποίος περιέχει όλες τις τιμές της λίστας <code>list</code> από τις οποίες έχουν αφαιρεθεί οι διπλότυπες τιμές. Εάν η λίστα είναι κενή, το αποτέλεσμα είναι μια κενή λίστα.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε τις διπλότυπες τιμές από τη λίστα {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Επιστρέφει την πρώτη τιμή της λίστας ή την καθορισμένη προεπιλογή εάν είναι κενή.",
        "Documentation.LongDescription": "Επιστρέφει το πρώτο στοιχείο της λίστας <code>list</code> ή την προαιρετική προεπιλεγμένη τιμή <code>defaultValue</code>, εάν η λίστα είναι κενή.\r\n    Εάν η λίστα είναι κενή και δεν έχει καθοριστεί προεπιλεγμένη τιμή, η συνάρτηση επιστρέφει την τιμή <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την πρώτη τιμή της λίστας {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Βρείτε την πρώτη τιμή της λίστας {}. Εάν η λίστα είναι κενή, επιστρέφεται η τιμή -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Επιστρέφει την τομή των τιμών λίστας που βρέθηκαν στην είσοδο.",
        "Documentation.LongDescription": "Επιστρέφει την τομή των τιμών λίστας που βρέθηκαν στη λίστα εισόδου <code>lists</code>. Μπορεί να καθοριστεί μια προαιρετική παράμετρος <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την τομή των λιστών {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Υποδεικνύει αν υπάρχουν διπλότυπες τιμές στη λίστα.",
        "Documentation.LongDescription": "Επιστρέφει μια λογική τιμή αν υπάρχουν διπλότυπες τιμές στη λίστα <code>list</code>, την τιμή <code>true</code> αν η λίστα είναι διακριτή και την τιμή <code>false</code> αν υπάρχουν διπλότυπες τιμές. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε αν η λίστα {1, 2, 3} είναι διακριτή (δηλαδή δεν περιέχει διπλότυπες τιμές).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Βρείτε αν η λίστα {1, 2, 3, 3} είναι διακριτή (δηλαδή δεν περιέχει διπλότυπες τιμές).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Επιστρέφει την τιμή true εάν η λίστα είναι κενή.",
        "Documentation.LongDescription": "Επιστρέφει την τιμή <code>true</code> εάν η λίστα, <code>list</code>, δεν περιέχει καμία τιμή (μήκος 0). Εάν η λίστα περιέχει τιμές (μήκος > 0), επιστρέφει την τιμή <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε αν η λίστα {} είναι κενή.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Βρείτε αν η λίστα {1, 2} είναι κενή.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Επιστρέφει την τελευταία τιμή της λίστας ή την καθορισμένη προεπιλογή εάν είναι κενή.",
        "Documentation.LongDescription": "Επιστρέφει το τελευταίο στοιχείο της λίστας <code>list</code> ή την προαιρετική προεπιλεγμένη τιμή <code>defaultValue</code>, εάν η λίστα είναι κενή.\r\n    Εάν η λίστα είναι κενή και δεν έχει καθοριστεί προεπιλεγμένη τιμή, η συνάρτηση επιστρέφει την τιμή <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την τελευταία τιμή της λίστας {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Βρείτε την τελευταία τιμή της λίστας {} ή -1 εάν είναι κενή.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Επιστρέφει την τελευταία τιμή της λίστας.  Μπορείτε να καθορίσετε προαιρετικά πόσες τιμές θα επιστραφούν ή μια κατάλληλη συνθήκη.",
        "Documentation.LongDescription": "Επιστρέφει το τελευταίο στοιχείο της λίστας <code>list</code>. Εάν η λίστα είναι κενή, παρουσιάζεται εξαίρεση.\r\n Η συνάρτηση μπορεί να λάβει μια προαιρετική παράμετρο, <code>countOrCondition</code>, προκειμένου να υποστηρίξει τη συγκέντρωση πολλαπλών στοιχείων ή το φιλτράρισμα στοιχείων. Η <code>countOrCondition</code> μπορεί να καθοριστεί με τρεις τρόπους:\r\n <ul>\r\n  <li>Εάν καθοριστεί αριθμός, επιστρέφονται μέχρι τόσα στοιχεία. </li>\r\n  <li>Εάν καθοριστεί συνθήκη, επιστρέφονται όλα τα στοιχεία που ικανοποιούν αρχικά τη συνθήκη, αρχίζοντας από το τέλος της λίστας. Από τη στιγμή που ένα στοιχείο δεν ικανοποιεί τη συνθήκη, δεν εξετάζονται περαιτέρω στοιχεία. </li>\r\n  <li>Εάν αυτή η παράμετρος είναι null, επιστρέφεται το τελευταίο στοιχείο της λίστας.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την τελευταία τιμή της λίστας {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Βρείτε τις τελευταίες τιμές της λίστας {3, 4, 5, -1, 7, 8, 2} που είναι μεγαλύτερες του 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Επιστρέφει τη μέγιστη τιμή ή την προεπιλεγμένη τιμή εάν η λίστα είναι κενή.",
        "Documentation.LongDescription": "Επιστρέφει το μέγιστο στοιχείο της λίστας <code>list</code> ή την προαιρετική προεπιλεγμένη τιμή <code>default</code>, εάν η λίστα είναι κενή.\r\n    Μπορεί να καθοριστεί μια προαιρετική τιμή comparisonCriteria, <code>comparisonCriteria</code>, για τον προσδιορισμό του τρόπου σύγκρισης των στοιχείων της λίστας. Εάν αυτή η παράμετρος είναι null, χρησιμοποιείται η προεπιλεγμένη συνάρτηση σύγκρισης.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τις μέγιστες τιμές στη λίστα {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Βρείτε τη μέγιστη τιμή της λίστας {} ή να επιστραφεί -1 εάν είναι κενή. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Επιστρέφει τη διάμεση τιμή της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο διαμέσου της λίστας <code>list</code>. Αυτή η συνάρτηση επιστρέφει <code>null</code>, αν η λίστα δεν περιέχει τιμές μη <code>null</code>.\r\n    Αν υπάρχει άρτιος αριθμός στοιχείων, η συνάρτηση επιλέγει το μικρότερο από τα δύο στοιχεία διαμέσου, εκτός αν η λίστα αποτελείται\r\n    εξ ολοκλήρου από τιμές datetime, διάρκειες, αριθμούς ή ώρες, οπότε επιστρέφει τον μέσο όρο των δύο στοιχείων.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το διάμεσο στοιχείο της λίστας <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Επιστρέφει την ελάχιστη τιμή ή την προεπιλεγμένη τιμή εάν η λίστα είναι κενή.",
        "Documentation.LongDescription": "Επιστρέφει το ελάχιστο στοιχείο της λίστας <code>list</code> ή την προαιρετική προεπιλεγμένη τιμή <code>default</code>, εάν η λίστα είναι κενή.\r\n    Μπορεί να καθοριστεί μια προαιρετική τιμή comparisonCriteria, <code>comparisonCriteria</code>, για τον προσδιορισμό του τρόπου σύγκρισης των στοιχείων της λίστας. Εάν αυτή η παράμετρος είναι null, χρησιμοποιείται η προεπιλεγμένη συνάρτηση σύγκρισης.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τις ελάχιστες τιμές στη λίστα {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Βρείτε την ελάχιστη τιμή της λίστας {} ή να επιστραφεί -1 εάν είναι κενή. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Επιστρέφει την πιο συχνή τιμή της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο που εμφανίζεται συχνότερα στη λίστα, <code>list</code>. Εάν η λίστα είναι κενή, παρουσιάζεται εξαίρεση. Εάν εμφανίζονται πολλαπλά στοιχεία με την ίδια μέγιστη συχνότητα, επιλέγεται το τελευταίο. \r\n    Μια προαιρετική τιμή <code>comparisonCriteria</code>, <code>equationCriteria</code>, μπορεί να καθοριστεί για τον έλεγχο ισότητας. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το στοιχείο που εμφανίζεται συχνότερα στη λίστα <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Βρείτε το στοιχείο που εμφανίζεται συχνότερα στη λίστα <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Επιστρέφει μια λίστα με τις συχνότερες τιμές της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο που εμφανίζεται συχνότερα στη λίστα, <code>list</code>. Εάν η λίστα είναι κενή, παρουσιάζεται εξαίρεση. Εάν εμφανίζονται πολλαπλά στοιχεία με την ίδια μέγιστη συχνότητα, επιλέγεται το τελευταίο. \r\n    Μια προαιρετική τιμή <code>comparisonCriteria</code>, <code>equationCriteria</code>, μπορεί να καθοριστεί για τον έλεγχο ισότητας. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τα στοιχεία που εμφανίζονται συχνότερα στη λίστα <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Επιστρέφει τον αριθμό των στοιχείων της λίστας που δεν είναι null.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό των στοιχείων που δεν είναι null στη λίστα <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Επιστρέφει μια λίστα με τις αποκλίσεις για την είσοδο.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα με τις αποκλίσεις για τη λίστα εισόδου <code>list</code>.\r\n    Όταν χρησιμοποιείτε τη List.Transform για να τροποποιήσετε μια λίστα, η λίστα των θέσεων μπορεί να χρησιμοποιηθεί για να δώσει στον μετασχηματισμό πρόσβαση στη θέση.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τις αποκλίσεις των τιμών της λίστας {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Επιστρέφει το γινόμενο των αριθμών της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει το γινόμενο των αριθμών της λίστας, <code>numbersList</code>, που δεν είναι null. Επιστρέφει την τιμή null εάν δεν υπάρχουν τιμές στη λίστα που δεν είναι null.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το γινόμενο των αριθμών της λίστας <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Επιστρέφει μια λίστα τυχαίων αριθμών.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τυχαίων αριθμών ανάμεσα στο 0 και το 1, με βάση τον αριθμό των τιμών που θα δημιουργηθούν και μια προαιρετική τιμή φύτρου.\r\n<ul>\r\n   <li><code>count</code>: Ο αριθμός των τυχαίων τιμών που θα δημιουργηθούν.</li>\r\n   <li><code>seed</code>:  <i>[Προαιρετική]</i> Μια αριθμητική τιμή που χρησιμοποιείται για την τροφοδότηση της δημιουργίας τυχαίων αριθμών. Αν παραλειφθεί, δημιουργείται μια μοναδική λίστα τυχαίων αριθμών κάθε φορά που καλείτε τη συνάρτηση. Αν καθορίσετε την τιμή φύτρου σε έναν αριθμό, κάθε κλήση στη συνάρτηση δημιουργεί την ίδια λίστα τυχαίων αριθμών.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα 3 τυχαίων αριθμών.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Δημιουργήστε μια λίστα 3 τυχαίων αριθμών, καθορίζοντας τιμή φύτρου.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Επιστρέφει μια λίστα που παραλείπει τον καθορισμένο αριθμό στοιχείων από την αρχή της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα που καταργεί το πρώτο στοιχείο της λίστας <code>list</code>. Εάν <code>list</code> είναι μια κενή λίστα, επιστρέφεται μια κενή λίστα.\r\nΑυτή η συνάρτηση λαμβάνει μια προαιρετική παράμετρο, <code>countOrCondition</code>, για να υποστηρίξει την κατάργηση πολλών τιμών, όπως αναφέρεται παρακάτω.\r\n <ul>\r\n <li>Εάν έχει καθοριστεί ένας αριθμός, καταργούνται έως και πολλά στοιχεία. </li>\r\n <li>Εάν καθοριστεί μια συνθήκη, καταργούνται τυχόν διαδοχικά στοιχεία που ταιριάζουν στην αρχή του <code>list</code> .</li>\r\n <li>Εάν αυτή η παράμετρος είναι null, παρατηρείται η προεπιλεγμένη συμπεριφορά. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα από τη λίστα {1, 2, 3, 4, 5} χωρίς τους πρώτους 3 αριθμούς.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Δημιουργήστε μια λίστα από τη λίστα {5, 4, 2, 6, 1} που ξεκινά με αριθμό μικρότερο του 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Επιστρέφει μια λίστα που καταργεί τον καθορισμένο αριθμό στοιχείων από το τέλος της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα που καταργεί τα τελευταία <code>countOrCondition</code> στοιχεία από το τέλος της λίστας <code>list</code>. Εάν <code>list</code> έχει λιγότερα από <code>countOrCondition</code> στοιχεία, επιστρέφεται μια κενή λίστα.\r\n <ul>\r\n <li>Εάν έχει καθοριστεί ένας αριθμός, καταργούνται έως και πολλά στοιχεία. </li>\r\n <li>Εάν καθοριστεί μια συνθήκη, καταργούνται τυχόν διαδοχικά στοιχεία που ταιριάζουν στο τέλος του <code>list</code> .</li>\r\n <li>Εάν αυτή η παράμετρος είναι null, καταργείται μόνο ένα στοιχείο. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα από τη λίστα {1, 2, 3, 4, 5} χωρίς τους τελευταίους 3 αριθμούς.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Δημιουργήστε μια λίστα από τη λίστα {5, 4, 2, 6, 4} που τελειώνει με αριθμό μικρότερο του 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Καταργεί όλες τις τιμές \"null\" από την καθορισμένη λίστα.",
        "Documentation.LongDescription": "Καταργεί όλες τις εμφανίσεις των τιμών \"null\" στην <code>list</code>. Εάν δεν υπάρχουν τιμές \"null\" στη λίστα, επιστρέφεται η αρχική λίστα.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε τις τιμές \"null\" από τη λίστα {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Αντιστρέφει τη σειρά των τιμών στη λίστα.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα με τις τιμές της λίστας <code>list</code> σε αντίστροφη σειρά.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα από τη λίστα {1..10} σε αντίστροφη σειρά.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Επιστρέφει το στοιχείο λίστας ένα για μια λίστα μήκους ένα, διαφορετικά παρουσιάζει μια εξαίρεση.",
        "Documentation.LongDescription": "Εάν υπάρχει μόνο ένα στοιχείο στη λίστα <code>list</code>, επιστρέφει αυτό το στοιχείο.\r\n    Εάν υπάρχουν περισσότερα από ένα στοιχεία στη λίστα ή η λίστα είναι κενή, η συνάρτηση επιστρέφει εξαίρεση.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τη μοναδική τιμή της λίστας {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Βρείτε τη μοναδική τιμή της λίστας {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Επιστρέφει το στοιχείο λίστας ένα για μια λίστα μήκους ένα και την προεπιλεγμένη τιμή για μια κενή λίστα.",
        "Documentation.LongDescription": "Εάν υπάρχει μόνο ένα στοιχείο στη λίστα <code>list</code>, επιστρέφει αυτό το στοιχείο.\r\n    Εάν η λίστα είναι κενή, η συνάρτηση επιστρέφει την τιμή null, εκτός αν έχει καθοριστεί μια προαιρετική <code>default</code>. Εάν υπάρχουν περισσότερα από ένα στοιχεία στη λίστα, η συνάρτηση επιστρέφει σφάλμα.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τη μοναδική τιμή της λίστας {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Βρείτε τη μοναδική τιμή της λίστας {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Βρείτε τη μοναδική τιμή της λίστας {}. Εάν η λίστα είναι κενή, επιστρέφεται η τιμή -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Επιστρέφει μια λίστα που παραλείπει τον καθορισμένο αριθμό στοιχείων από την αρχή της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα που παραλείπει το πρώτο στοιχείο της λίστας <code>list</code>. Εάν <code>list</code> είναι μια κενή λίστα, επιστρέφεται μια κενή λίστα.\r\nΑυτή η συνάρτηση λαμβάνει μια προαιρετική παράμετρο, <code>countOrCondition</code>, για να υποστηρίξει την παράλειψη πολλών τιμών, όπως αναφέρεται παρακάτω.\r\n <ul>\r\n <li>Εάν έχει καθοριστεί ένας αριθμός, παραλείπονται έως και πολλά στοιχεία. </li>\r\n <li>Εάν καθοριστεί μια συνθήκη, παραλείπονται τυχόν διαδοχικά στοιχεία που ταιριάζουν στην αρχή του <code>list</code> .</li>\r\n <li>Εάν αυτή η παράμετρος είναι null, παρατηρείται η προεπιλεγμένη συμπεριφορά. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα από τη λίστα {1, 2, 3, 4, 5} χωρίς τους πρώτους 3 αριθμούς.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Δημιουργήστε μια λίστα από τη λίστα {5, 4, 2, 6, 1} που ξεκινά με αριθμό μικρότερο του 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Ταξινομεί μια λίστα δεδομένων σύμφωνα με τα κριτήρια που καθορίζονται.",
        "Documentation.LongDescription": "Ταξινομεί μια λίστα δεδομένων, <code>list</code>, σύμφωνα με τα προαιρετικά κριτήρια που καθορίζονται.\r\n    Μπορεί να καθοριστεί μια προαιρετική παράμετρος, <code>comparisonCriteria</code>, ως κριτήριο σύγκρισης. Αυτή μπορεί να λάβει τις ακόλουθες τιμές:\r\n    <ul>\r\n    <li> Για τον έλεγχο της σειράς, το κριτήριο σύγκρισης μπορεί να είναι μια τιμή απαρίθμησης Order. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li> \r\n    <li> Για τον υπολογισμό ενός κλειδιού που θα χρησιμοποιηθεί για την ταξινόμηση, μπορεί να χρησιμοποιηθεί μια συνάρτηση 1 ορίσματος. </li> \r\n    <li> Για την επιλογή κλειδιού και τον έλεγχο της σειράς, το κριτήριο σύγκρισης μπορεί να είναι μια λίστα που περιέχει το κλειδί και τη σειρά (<code>{each 1 / _, Order.Descending}</code>). </li> \r\n    <li> Για τον πλήρη έλεγχο της σύγκρισης, μπορεί να χρησιμοποιηθεί μια συνάρτηση 2 ορισμάτων που επιστρέφει τις τιμές -1 ή 0 ανάλογα με τη σχέση μεταξύ αριστερής και δεξιάς εισόδου. Η Value.Compare είναι μια μέθοδος που μπορεί να χρησιμοποιηθεί για την απόδοση αυτής της λογικής. </li> \r\n        <ul>\r\n            <li> <code>-1</code>: Το πρώτο στοιχείο είναι μικρότερο από το δεύτερο στοιχείο.</li>\r\n            <li> <code>0</code>: Tα στοιχεία είναι ίσα.</li>\r\n            <li> <code>1</code>: Το πρώτο στοιχείο είναι μεγαλύτερο από το δεύτερο στοιχείο.</li>\r\n        </ul>\r\n        Η Value.Compare είναι μια μέθοδος που μπορεί να χρησιμοποιηθεί για την ανάθεση αυτής της λογικής. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ταξινομήστε τη λίστα {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Ταξινομήστε τη λίστα {2, 3, 1} σε φθίνουσα σειρά.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Ταξινομήστε τη λίστα {2, 3, 1} σε φθίνουσα σειρά χρησιμοποιώντας τη μέθοδο Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Επιστρέφει μια εκτίμηση της τυπικής απόκλισης με βάση ένα δείγμα.",
        "Documentation.LongDescription": "Επιστρέφει μια εκτίμηση <code>numbersList</code> της τυπικής απόκλισης των τιμών της λίστας με βάση ένα δείγμα.\r\n    Αν το <code>numbersList</code> είναι λίστα αριθμών, επιστρέφεται ένας αριθμός.\r\n    Σε μια κενή λίστα ή σε μια λίστα με στοιχεία που δεν είναι τύπου <code>number</code> παρουσιάζεται εξαίρεση.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την τυπική απόκλιση των αριθμών 1 έως 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Επιστρέφει το άθροισμα όλων των στοιχείων της λίστας.",
        "Documentation.LongDescription": "Επιστρέφει το άθροισμα των αριθμών της λίστας, <code>list</code>, που δεν είναι null.  Επιστρέφει την τιμή null εάν δεν υπάρχουν τιμές στη λίστα που δεν είναι null.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το άθροισμα των αριθμών της λίστας <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Επιστρέφει την ένωση των τιμών λίστας που βρέθηκαν στην είσοδο.",
        "Documentation.LongDescription": "Λαμβάνει μια λίστα με τις λίστες <code>lists</code>, ενώνει τα στοιχεία των επιμέρους λιστών και τα επιστρέφει στη λίστα εξόδου. Ως αποτέλεσμα αυτού, η επιστρεφόμενη λίστα περιέχει όλα τα στοιχεία όλων των λιστών εισόδου.\r\n    Αυτή η λειτουργία διατηρεί παραδοσιακή σημασιολογία θύλακα, επομένως οι διπλότυπες τιμές εκλαμβάνονται ως συμφωνία ως μέρος της ένωσης.\r\n    Μια προαιρετική τιμή κριτηρίων ισότητας, <code>equationCriteria</code>, μπορεί να καθοριστεί για τον έλεγχο ισότητας. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια ένωση των λιστών {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Επιστρέφει μια λίστα με λίστες, συνδυάζοντας στοιχεία στην ίδια θέση σε πολλές λίστες.",
        "Documentation.LongDescription": "Παίρνει μια λίστα με λίστες <code>lists</code> και επιστρέφει μια λίστα με λίστες η οποία συνδυάζει στοιχεία στην ίδια θέση.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Συμπιέζει τις δύο απλές λίστες {1, 2} και {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Συμπιέζει τις δύο απλές λίστες διαφορετικών μεγεθών {1, 2} και {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Δημιουργεί μια λογική τιμή από την τιμή που δόθηκε.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>logical</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Logical.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>logical</code>, επιστρέφεται <code>value</code>. Οι τιμές των ακόλουθων τύπων μπορούν να μετατραπούν σε τιμή <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: Μια τιμή <code>logical</code> από την τιμή κειμένου, είτε <code>\"true\"</code> είτε <code>\"false\"</code>. Ανατρέξτε στο <code>Logical.FromText</code> για λεπτομέρειες.</li>\r\n        <li><code>number</code>: <code>false</code> αν <code>value</code> ισούται με <code>0</code>, <code>true</code> διαφορετικά.</li>\r\n      </ul>\r\nΑν <code>value</code> είναι οποιουδήποτε άλλου τύπου, επιστρέφεται ένα σφάλμα.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε το <code>2</code> σε τιμή <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Δημιουργεί μια λογική τιμή από τις τιμές κειμένου \"true\" και \"false\".",
        "Documentation.LongDescription": "Δημιουργεί μια λογική τιμή από την τιμή κειμένου <code>text</code>, \"true\" ή \"false\". Εάν η λίστα <code>text</code> περιέχει διαφορετική συμβολοσειρά, παρουσιάζεται εξαίρεση. Η τιμή κειμένου <code>text</code> δεν κάνει διάκριση πεζών-κεφαλαίων.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λογική τιμή από τη συμβολοσειρά κειμένου \"true\".",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Δημιουργήστε μια λογική τιμή από τη συμβολοσειρά κειμένου \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Επιστρέφει το κείμενο \"true\" ή \"false\" δοθείσης μιας λογικής τιμής.",
        "Documentation.LongDescription": "Δημιουργεί μια τιμή κειμένου από τη λογική τιμή <code>logicalValue</code>, <code>true</code> ή <code>false</code>. Εάν η <code>logicalValue</code> δεν είναι μια λογική τιμή, παρουσιάζεται εξαίρεση.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια τιμή κειμένου από τη λογική τιμή <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Επιστρέφει την απόλυτη τιμή του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει την απόλυτη τιμή του <code>number</code>. Αν το <code>number</code> είναι null, η συνάρτηση <code>Number.Abs</code> επιστρέφει τιμή null.\r\n    <ul>\r\n        <li><code>number</code>: Μια συνάρτηση <code>number</code> για την οποία θα υπολογιστεί η απόλυτη τιμή.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Η απόλυτη τιμή του -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Επιστρέφει το τόξο συνημιτόνου του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει το τόξο συνημιτόνου του <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Επιστρέφει το τόξο ημιτόνου του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει το τόξο ημιτόνου του <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Επιστρέφει το τόξο εφαπτομένης του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει το τόξο εφαπτομένης του <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Επιστρέφει ένα byte όπου κάθε bit είναι το αντίθετο της εισόδου.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα μιας λειτουργίας bit \"Not\" στο <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Επιστρέφει το συνημίτονο του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει το συνημίτονο του <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το συνημίτονο της γωνίας 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Επιστρέφει το υπερβολικό συνημίτονο του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει το υπερβολικό συνημίτονο του <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Υψώνει το e στη δύναμη που δίνεται.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της ύψωσης του e στη δύναμη του <code>number</code> (εκθετική συνάρτηση).\r\n      <ul>\r\n        <li><code>number</code>: Μια συνάρτηση <code>number</code> για την οποία θα υπολογιστεί η εκθετική συνάρτηση. Αν η <code>number</code> είναι null, η <code>Number.Exp</code> επιστρέφει την τιμή null. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Υψώστε το e στη δύναμη του 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Επιστρέφει το παραγοντικό του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει το παραγοντικό του αριθμού <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το παραγοντικό του 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Δημιουργεί έναν αριθμό από την τιμή που δίνεται.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>number</code> από το δεδομένο <code>value</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code> (για παράδειγμα, \"en-US\").\r\nΑν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Number.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>number</code>, επιστρέφεται <code>value</code>. Οι τιμές των ακόλουθων τύπων μπορούν να μετατραπούν σε τιμή <code>number</code>:\r\n      <ul>\r\n        <li><code>text</code>: Μια τιμή <code>number</code> από αναπαράσταση κειμένου. Χειρίζονται κοινές μορφές κειμένου (\"15\", \"3,423.10\", \"5.0E-10\"). Ανατρέξτε στο <code>Number.FromText</code> για λεπτομέρειες.</li>\r\n        <li><code>logical</code>: 1 για <code>true</code>, 0 για <code>false</code>..</li>\r\n        <li><code>datetime</code>: Ένας αριθμός κινητής υποδιαστολής διπλής ακρίβειας που περιέχει ένα ισοδύναμο ημερομηνίας OLE Automation.</li>\r\n        <li><code>datetimezone</code>: Ένας αριθμός κινητής υποδιαστολής διπλής ακρίβειας που περιέχει μια ημερομηνία αυτοματοποίησης OLE που ισοδυναμεί με την τοπική ημερομηνία και ώρα του <code>value</code>.</li>\r\n        <li><code>date</code>: Ένας αριθμός κινητής υποδιαστολής διπλής ακρίβειας που περιέχει τον αριθμό κινητής υποδιαστολής διπλής ακρίβειας που περιέχει την τοπική ημερομηνία και ώρα. ένα ισοδύναμο ημερομηνίας αυτοματισμού OLE.</li>\r\n        <li><code>time</code>:  Εκφράζεται σε κλασματικές ημέρες.</li>\r\n        <li><code>duration</code>: Εκφράζεται σε ολόκληρες και κλασματικές ημέρες.</li>\r\n      </ul>\r\nΑν <code>value</code> είναι οποιουδήποτε άλλου τύπου, επιστρέφεται ένα σφάλμα.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή <code>number</code> του <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Λάβετε την τιμή <code>number</code> του <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Λάβετε την τιμή <code>number</code> του <code>\"12,3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Δημιουργεί αριθμούς από κοινές μορφές κειμένου (\"15\", \"3.423,10\", \"5,0E-10\").",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>number</code> από τη δεδομένη τιμή κειμένου <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: Η αναπαράσταση κειμένου μιας αριθμητικής τιμής. Η αναπαράσταση πρέπει να είναι σε μια κοινή αριθμητική μορφή - \"15\", \"3.423,10\", \"5,0E-10\".</li>\r\n  <li><code>culture</code>: Μια προαιρετική κουλτούρα που ελέγχει τον τρόπο ερμηνείας του <code>text</code> (για παράδειγμα, en-US).</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την αριθμητική τιμή του <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Λάβετε την αριθμητική τιμή του <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Υποδεικνύει αν η τιμή είναι άρτια.",
        "Documentation.LongDescription": "Υποδεικνύει αν η τιμή, <code>number</code>, είναι άρτια επιστρέφοντας <code>true</code> εάν είναι, διαφορετικά <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Ελέγξτε αν το 625 είναι άρτιος αριθμός.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Ελέγξτε αν το 82 είναι άρτιος αριθμός.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Υποδεικνύει αν η τιμή είναι NaN (δεν είναι αριθμός).",
        "Documentation.LongDescription": "Υποδεικνύει αν η τιμή είναι NaN (δεν είναι αριθμός). Επιστρέφει <code>true</code> εάν το <code>number</code> ισοδυναμεί με την <code>Number.IsNaN</code>, διαφορετικά <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Ελέγξτε αν το 0 διά 0 είναι NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Ελέγξτε αν το 1 διά 0 είναι NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Υποδεικνύει αν η τιμή είναι περιττή.",
        "Documentation.LongDescription": "Υποδεικνύει αν η τιμή είναι περιττή. Επιστρέφει <code>true</code> εάν το <code>number</code> είναι περιττός αριθμός, διαφορετικά <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Ελέγξτε αν το 625 είναι περιττός αριθμός.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Ελέγξτε αν το 82 είναι περιττός αριθμός.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Επιστρέφει τον φυσικό λογάριθμο του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει τον φυσικό λογάριθμο ενός αριθμού, <code>number</code>. Αν το <code>number</code> είναι null, η συνάρτηση <code>Number.Ln</code> επιστρέφει τιμή null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τον φυσικό λογάριθμο του 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Επιστρέφει τον λογάριθμο του αριθμού με την καθορισμένη βάση (προεπιλογή e).",
        "Documentation.LongDescription": "Επιστρέφει τον λογάριθμο ενός αριθμού, <code>number</code>, με την καθορισμένη βάση <code>base</code>. Αν δεν καθοριστεί <code>base</code>, η προεπιλεγμένη τιμή είναι \"Number.E\".\r\n    Αν το <code>number</code> είναι null, το <code>Number.Log</code> επιστρέφει την τιμή null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το λογάριθμο με βάση το 10 του 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Βρείτε το λογάριθμο με βάση το e του 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Επιστρέφει το λογάριθμο με βάση το 10 του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει το λογάριθμο με βάση το 10 ενός αριθμού <code>number</code>. Αν το <code>number</code> είναι null, το <code>Number.Log10</code> επιστρέφει την τιμή null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το λογάριθμο με βάση το 10 του 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Επιστρέφει το στρογγυλοποιημένο αριθμό. Ο αριθμός των ψηφίων και ο τρόπος στρογγυλοποίησης μπορούν να οριστούν.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της στρογγυλοποίησης <code>number</code> στον πλησιέστερο αριθμό. Αν <code>number</code> είναι null, το <code>Number.Round</code> επιστρέφει null.<br>\r\n      <br>\r\n      Από προεπιλογή, <code>number</code> στρογγυλοποιείται στον πλησιέστερο ακέραιο και οι δεσμοί σπάνε με στρογγυλοποίηση στον πλησιέστερο ζυγό αριθμό (χρησιμοποιώντας <code>RoundingMode.ToEven</code>, γνωστό και ως \"στρογγυλοποίηση τραπεζίτη\").<br>\r\n      <br>\r\n      Ωστόσο, αυτές οι προεπιλογές μπορούν να παρακαμφθούν μέσω των παρακάτω προαιρετικών παραμέτρων.\r\n      <ul>\r\n        <li><code>digits</code>: Προκαλεί <code>number</code> στρογγυλοποίηση στον καθορισμένο αριθμό δεκαδικών ψηφίων.</li>\r\n        <li><code>roundingMode</code>: Αντικαθιστά την προεπιλεγμένη συμπεριφορά ρήξης ισοπαλίας όταν <code>number</code> βρίσκεται στο μέσο μεταξύ δύο πιθανών στρογγυλεμένων τιμών\r\n      (ανατρέξτε στο <code> RoundingMode.Type</code> για πιθανές τιμές).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Στρογγυλοποιεί τον αριθμό 1,234 στον πλησιέστερο ακέραιο.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Στρογγυλοποιεί τον αριθμό 1,56 στον πλησιέστερο ακέραιο.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Στρογγυλοποιεί τον αριθμό 1,2345 σε δύο δεκαδικά ψηφία.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Στρογγυλοποιεί τον αριθμό 1,2345 σε τρία δεκαδικά ψηφία (Στρογγυλοποίηση προς τα επάνω).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Στρογγυλοποιεί τον αριθμό 1,2345 σε τρία δεκαδικά ψηφία (Στρογγυλοποίηση προς τα κάτω).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα της στρογγυλοποίησης θετικών αριθμών προς τα επάνω και αρνητικών αριθμών προς τα κάτω. Ο αριθμός των ψηφίων μπορεί να καθοριστεί.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της στρογγυλοποίησης του <code>number</code> με βάση το πρόσημο του αριθμού. Αυτή η συνάρτηση στρογγυλοποιεί τους θετικούς αριθμούς προς τα επάνω και τους αρνητικούς αριθμούς προς τα κάτω.\r\n    Αν καθοριστεί η <code>digits</code>, ο αριθμός <code>number</code> στρογγυλοποιείται σε <code>digits</code> δεκαδικά ψηφία.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Στρογγυλοποιήστε τον αριθμό -1,2 μακριά από το μηδέν.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Στρογγυλοποιήστε τον αριθμό 1,2 μακριά από το μηδέν.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Στρογγυλοποίηση του αριθμού -1,234 σε δύο δεκαδικά ψηφία.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Επιστρέφει τον προηγούμενο μεγαλύτερο αριθμό. Ο αριθμός των ψηφίων μπορεί να καθοριστεί.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της στρογγυλοποίησης <code>number</code> προς τα κάτω στον προηγούμενο υψηλότερο ακέραιο.Αν το <code>number</code> είναι null, αυτή η συνάρτηση επιστρέφει null.\r\n\r\n    Αν το <code>digits</code> παρέχεται, το <code>number</code>στρογγυλοποιείται στον καθορισμένο αριθμό δεκαδικών ψηφίων.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Στρογγυλοποιήστε το 1,234 προς τα κάτω σε ακέραιο αριθμό.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Στρογγυλοποιήστε το 1,999 προς τα κάτω σε ακέραιο αριθμό.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Στρογγυλοποίηση προς τα κάτω του 1,999 με δύο δεκαδικά ψηφία.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα της στρογγυλοποίησης θετικών αριθμών προς τα κάτω και αρνητικών αριθμών προς τα επάνω. Ο αριθμός των ψηφίων μπορεί να καθοριστεί.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της στρογγυλοποίησης του <code>number</code> με βάση το πρόσημο του αριθμού. Αυτή η συνάρτηση στρογγυλοποιεί τους θετικούς αριθμούς προς τα κάτω και τους αρνητικούς αριθμούς προς τα επάνω.\r\n    Αν καθοριστεί η <code>digits</code>, ο αριθμός <code>number</code> στρογγυλοποιείται σε <code>digits</code> δεκαδικά ψηφία.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Στρογγυλοποιήστε τον αριθμό -1,2 προς το μηδέν.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Στρογγυλοποιήστε τον αριθμό 1,2 προς το μηδέν.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Στρογγυλοποίηση του αριθμού -1,234 προς το μηδέν με δύο δεκαδικά ψηφία.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Επιστρέφει τον επόμενο μεγαλύτερο αριθμό. Ο αριθμός των ψηφίων μπορεί να καθοριστεί.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της στρογγυλοποίησης <code>number</code> στον επόμενο υψηλότερο ακέραιο. Εάν το <code>number</code> είναι null, αυτή η συνάρτηση επιστρέφει null.\r\n    Εάν το <code>digits</code> παρέχεται, το <code>number</code> στρογγυλοποιείται στον καθορισμένο αριθμό δεκαδικών ψηφίων.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Στρογγυλοποιήστε το 1,234 προς τα επάνω σε ακέραιο αριθμό.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Στρογγυλοποιήστε το 1,999 προς τα επάνω σε ακέραιο αριθμό.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Στρογγυλοποίηση του 1,234 σε δύο δεκαδικά ψηφία.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Επιστρέφει 1 εάν ο αριθμός είναι θετικός, -1 εάν ο αριθμός είναι αρνητικός και 0 εάν ο αριθμός είναι μηδέν.",
        "Documentation.LongDescription": "Επιστρέφει 1 εάν το <code>number</code> είναι θετικός αριθμός, -1 εάν είναι αρνητικός αριθμός και 0 εάν είναι μηδέν.\r\n    Εάν το <code>number</code> είναι null, η <code>Number.Sign</code> επιστρέφει την τιμή null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίστε το πρόσημο του 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Προσδιορίστε το πρόσημο του -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Προσδιορίστε το πρόσημο του 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Επιστρέφει το ημίτονο του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει το ημίτονο του <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το ημίτονο της γωνίας 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Επιστρέφει το υπερβολικό ημίτονο του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει το υπερβολικό ημίτονο του <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Επιστρέφει την τετραγωνική ρίζα του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει την τετραγωνική ρίζα του <code>number</code>.\r\n    Εάν το <code>number</code> είναι null, η <code>Number.Sqrt</code> επιστρέφει την τιμή null. Εάν είναι αρνητική τιμή, επιστρέφεται η <code>Number.NaN</code> (Δεν είναι αριθμός).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την τετραγωνική ρίζα του 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Βρείτε την τετραγωνική ρίζα του 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Επιστρέφει την εφαπτομένη του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει την εφαπτομένη του <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την εφαπτομένη της γωνίας 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Επιστρέφει την υπερβολική εφαπτομένη του αριθμού.",
        "Documentation.LongDescription": "Επιστρέφει την υπερβολική εφαπτομένη του <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Μετατρέπει τον δεδομένο αριθμό σε κείμενο.",
        "Documentation.LongDescription": "Μετατρέπει την αριθμητική τιμή <code>number</code> σε τιμή κειμένου σύμφωνα με τη μορφή που καθορίζεται από <code>format</code>.<br>\r\n    <br>\r\n    Η μορφή είναι μια τιμή κειμένου που υποδεικνύει τον τρόπο μετατροπής του αριθμού. Για περισσότερες λεπτομέρειες σχετικά με τις υποστηριζόμενες τιμές μορφοποίησης, μεταβείτε στο https://go.microsoft.com/fwlink/?linkid=2241210 και το https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Μπορεί επίσης να παρέχεται μια προαιρετική <code>culture</code> (για παράδειγμα, \"en-US\") για τον έλεγχο της συμπεριφοράς <code>format</code> που εξαρτάται από την κουλτούρα.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή ενός αριθμού σε κείμενο χωρίς καθορισμό μορφής.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Μετατροπή ενός αριθμού σε εκθετική μορφή.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Μετατροπή αριθμού σε μορφή ποσοστού με μία μόνο δεκαδική θέση.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Επιστρέφει έναν πίνακα των τροφοδοσιών δεδομένων OData που παρέχονται από μια υπηρεσία OData.",
        "Documentation.LongDescription": "Επιστρέφει έναν πίνακα ροών OData που προσφέρονται από μια υπηρεσία OData από ένα uri <code>serviceUri</code>, κεφαλίδες <code>headers</code>. Μια δυαδική τιμή που καθορίζει εάν θα χρησιμοποιηθούν ταυτόχρονες συνδέσεις ή μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να καθοριστεί για τον έλεγχο των ακόλουθων επιλογών:\r\n    <ul>\r\n    <li><code>Query</code>: Προσθέστε μέσω προγραμματισμού παραμέτρους ερωτήματος στη διεύθυνση URL χωρίς να χρειάζεται να ανησυχείτε για τη φυγή </li>\r\n    <li> <code>Headers</code> : Ο καθορισμός αυτής της τιμής ως εγγραφή θα παρέχει πρόσθετες κεφαλίδες σε ένα αίτημα HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Καθορισμός αυτής της τιμής. καθώς μια λίστα θα αποκλείσει αυτά τα κλειδιά κεφαλίδας HTTP από το να αποτελούν μέρος του υπολογισμού για την προσωρινή αποθήκευση δεδομένων.</li>\r\n    <li> <code>ApiKeyName</code> : Εάν ο ιστότοπος-στόχος έχει την έννοια κλειδιού API, αυτή η παράμετρος μπορεί να χρησιμοποιηθεί για τον καθορισμό του ονόματος (όχι της τιμής) της παραμέτρου κλειδιού που πρέπει να χρησιμοποιηθεί στη διεύθυνση URL. Η πραγματική τιμή κλειδιού παρέχεται στο διαπιστευτήριο.</li>\r\n    <li> <code>Timeout</code> : Ο καθορισμός αυτής της τιμής ως διάρκειας θα αλλάξει το χρονικό όριο για ένα αίτημα HTTP. Η προεπιλεγμένη τιμή είναι 600 δευτερόλεπτα.</li>\r\n    <li> <code>EnableBatch</code> : Ένα λογικό (true/false) που ορίζει εάν θα επιτρέπεται η δημιουργία ενός αιτήματος OData $batch εάν γίνει υπέρβαση του MaxUriLength (η προεπιλογή είναι false).</li>\r\n    <li> <code>MaxUriLength</code> : Ένας αριθμός που υποδεικνύει το μέγιστο μήκος ενός επιτρεπόμενου uri που αποστέλλεται σε μια υπηρεσία OData. Εάν σημειωθεί υπέρβαση και το EnableBatch είναι αληθές, τότε το αίτημα θα υποβληθεί σε ένα τελικό σημείο $batch OData, διαφορετικά θα αποτύχει (η προεπιλογή είναι 2048).</li>\r\n    <li> <code>Concurrent</code> : Ένα λογικό (true/ false) όταν οριστεί σε true, τα αιτήματα στην υπηρεσία θα γίνονται ταυτόχρονα. Όταν οριστεί σε false, τα αιτήματα θα γίνονται διαδοχικά. Όταν δεν καθορίζεται, η τιμή θα καθοριστεί από τον σχολιασμό AsynchronousRequestsSupported της υπηρεσίας. Εάν η υπηρεσία δεν προσδιορίζει εάν υποστηρίζεται το AsynchronousRequestsSupported, τα αιτήματα θα γίνονται διαδοχικά.</li>\r\n    <li> <code>ODataVersion</code> : Ένας αριθμός (3 ή 4) που καθορίζει την έκδοση του πρωτοκόλλου OData που θα χρησιμοποιηθεί για αυτό το σκοπό. Υπηρεσία OData. Όταν δεν καθορίζεται, θα ζητηθούν όλες οι υποστηριζόμενες εκδόσεις. Η έκδοση της υπηρεσίας θα καθοριστεί από την κεφαλίδα OData-Version που επιστρέφεται από την υπηρεσία.</li>\r\n    <li> <code>FunctionOverloads</code> : Μια λογική (true/false) όταν οριστεί σε true, οι υπερφορτώσεις εισαγωγής συναρτήσεων θα είναι λογικές (true/false) καταχωρούνται στο πρόγραμμα πλοήγησης ως ξεχωριστές καταχωρήσεις, όταν οριστεί σε false, οι υπερφορτώσεις εισαγωγής συναρτήσεων θα παρατίθενται ως μία συνάρτηση ένωσης στο πρόγραμμα πλοήγησης. Προεπιλεγμένη τιμή για το V3: false. Προεπιλεγμένη τιμή για το V4: true.</li>\r\n    <li> <code>MoreColumns</code> : Ένα λογικό (true/false) όταν οριστεί σε true, προσθέτει μια στήλη \"Περισσότερες στήλες\" σε κάθε ροή οντοτήτων που περιέχει ανοιχτούς τύπους και πολυμορφικούς τύπους. Αυτό θα περιέχει τα πεδία που δεν έχουν δηλωθεί στον βασικό τύπο. Όταν είναι false, αυτό το πεδίο δεν υπάρχει. Οι προεπιλογές είναι false.</li>\r\n    <li> <code>IncludeAnnotations</code> : Μια λίστα διαχωρισμένη με κόμματα ονομάτων ή μοτίβων όρων που χαρακτηρίζονται από τον χώρο ονομάτων για να συμπεριληφθούν με το \"*\" ως μπαλαντέρ. Από προεπιλογή, κανένας από τους σχολιασμούς δεν συμπεριλαμβάνεται.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : Μια λίστα διαχωρισμένη με κόμματα ονομάτων όρων ή μοτίβων με ειδική περιοχή ονομάτων που θα συμπεριληφθούν στα αιτήματα εγγράφων μεταδεδομένων, με το \"*\" ως μπαλαντέρ. Από προεπιλογή, περιλαμβάνει τους ίδιους σχολιασμούς με τους IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code> : Επιτρέπει στην υπηρεσία OData να αποφεύγει τη διαγραφή ορισμένων τιμών στις απαντήσεις. Εάν αναγνωριστεί από την υπηρεσία, θα συμπεράνουμε αυτές τις τιμές από τα πεδία που παραλείπονται. Οι επιλογές περιλαμβάνουν:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : Επιτρέπει στην υπηρεσία OData να παραλείψει μηδενικές τιμές.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : Καθορίζει την υλοποίηση της εφαρμογής σύνδεσης OData προς χρήση. Οι έγκυρες τιμές είναι \"2.0\" ή null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Συνδεθείτε στην υπηρεσία TripPin OData.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Επιστρέφει το αποτέλεσμα της προσπάθειας προσδιορισμού δυνατοτήτων SQL για ένα πρόγραμμα οδήγησης ODBC.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της προσπάθειας προσδιορισμού δυνατοτήτων SQL με τη συμβολοσειρά σύνδεσης <code>connectionString</code> με χρήση ODBC. Το <code>connectionString</code> μπορεί να είναι κείμενο ή εγγραφή ζευγών τιμής-ιδιότητας. Οι τιμές ιδιότητας μπορεί να είναι κείμενο ή αριθμός.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Επιστροφή των συναγόμενης δυνατοτήτων SQL για μια συμβολοσειρά σύνδεσης.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα του εγγράφου Parquet ως πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα του εγγράφου Parquet ως πίνακα. Οι επιλογές περιλαμβάνουν:\n    <ul>\n    <li> <code>TypeMapping</code> : Μια τιμή κειμένου που ελέγχει την αντιστοίχιση προεπιλεγμένου τύπου κατά την ανάγνωση και τη σύνταξη αρχείων. Η προεπιλεγμένη τιμή είναι null και προσπαθεί να διατηρήσει όσο το δυνατόν μεγαλύτερη πιστότητα στον αρχικό τύπο. Μια τιμή \"Sql\" θα παράγει αποτελέσματα πιο συμβατά με τον Sql Server.</li>\n    </ul>",
        "Documentation.Category": "Πρόσβαση σε δεδομένα",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Πρόσβαση σε δεδομένα",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Επιστρέφει μια τιμή ποσοστού από τη δεδομένη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>percentage</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Percentage.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>κείμενο</code> με σύμβολο μετά τοις εκατό, τότε ο δεκαδικός αριθμός που έχει μετατραπεί θα επιστραφεί. Διαφορετικά, η τιμή θα μετατραπεί σε <code>number</code> χρησιμοποιώντας το <code>Number.From</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την τιμή <code>percentage</code> του <code>\"12,3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Επιστρέφει μια εγγραφή πλαισίων δεδομένων από το αρχείο RData.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή πλαισίων δεδομένων από το αρχείο RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Συνδυάζει τις εγγραφές της λίστας που δίνεται.",
        "Documentation.LongDescription": "Συνδυάζει τις εγγραφές της <code>records</code> που δίνεται. Εάν η <code>records</code> περιέχει τιμές που δεν υπάρχουν στην εγγραφή, επιστρέφεται σφάλμα.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργεί μια συνδυασμένη εγγραφή από τις εγγραφές.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Επιστρέφει τον αριθμό των πεδίων της εγγραφής.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό των πεδίων της εγγραφής <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τον αριθμό των πεδίων στην εγγραφή.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Επιστρέφει τα ονόματα των πεδίων.",
        "Documentation.LongDescription": "Επιστρέφει τα ονόματα των πεδίων στην εγγραφή <code>record</code> ως κείμενο.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τα ονόματα των πεδίων στην εγγραφή.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Επιστρέφει μια λίστα με τις τιμές πεδίων.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα με τις τιμές πεδίων στην εγγραφή <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τις τιμές πεδίων στην εγγραφή.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Δημιουργεί μια εγγραφή από έναν πίνακα της μορφής {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή από έναν πίνακα εγγραφών <code>table</code> που περιέχει ονόματα πεδίων και ονόματα τιμών <code>{[Name = name, Value = value]}</code>. Εάν τα ονόματα πεδίων δεν είναι μοναδικά, παρουσιάζεται εξαίρεση.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργεί μια εγγραφή από τον πίνακα της μορφής Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Επιστρέφει μια λίστα των τιμών που περιέχει τις τιμές πεδίου της εγγραφής εισόδου.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα των τιμών που περιέχει τις τιμές πεδίου από την είσοδο <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Κάντε εξαγωγή των τιμών πεδίων από μια εγγραφή.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Επιστρέφει ένα αφηρημένο δέντρο σύνταξης (AST) που αντιπροσωπεύει την πρόσβαση σε μια στήλη μέσα σε μια παράσταση γραμμής.",
        "Documentation.LongDescription": "Επιστρέφει ένα αφηρημένο δέντρο σύνταξης (AST) που αντιπροσωπεύει την πρόσβαση στη στήλη <code>columnName</code> της γραμμής μέσα σε μια παράσταση γραμμής.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργεί ένα AST που αναπαριστά την πρόσβαση της στήλης \"CustomerName\".",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Επιστρέφει το αφηρημένο δέντρο σύνταξης (AST) για το σώμα μιας συνάρτησης.",
        "Documentation.LongDescription": "<p>Επιστρέφει το δέντρο αφηρημένης σύνταξης (AST) για το σώμα του <code>function</code>, κανονικοποιημένη σε έκφραση <i>σειράς</i>:\r\n<ul>\r\n  <li>Η συνάρτηση πρέπει να είναι 1-όρισμα λάμδα.</li>\r\n  <li>Όλες οι αναφορές στην παράμετρο συνάρτησης αντικαθίστανται με <code>RowExpression.Row</code>.</li>\r\n  <li>Όλες οι αναφορές σε στήλες αντικαθίστανται με <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>Το AST θα απλοποιηθεί ώστε να περιέχει μόνο κόμβους των ειδών:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Παρουσιάζεται σφάλμα εάν μια παράσταση γραμμής AST δεν μπορεί να επιστραφεί για το σώμα του <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει το AST για το σώμα της συνάρτησης <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Δημιουργεί μια μονή τιμή από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια μοναδική τιμή <code>number</code> από το δεδομένο <code>value</code>. Αν το δεδομένο <code>value</code> είναι <code>null</code>, το <code>Single.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>number</code> εντός του εύρους Single, επιστρέφεται <code>value</code>, διαφορετικά επιστρέφεται ένα σφάλμα. Αν <code>value</code> είναι οποιουδήποτε άλλου τύπου, θα μετατραπεί πρώτα σε <code>αριθμός</code> χρησιμοποιώντας το <code>Number.FromText</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code>(για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε τη μονή τιμή <code>number</code> του <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Επιστρέφει έναν πίνακα με δεδομένα από ένα τελικό σημείο ευρετηρίου Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Πραγματοποιεί μια κλήση στο Smartsheet 2.0 REST API στο καθορισμένο τελικό σημείο και μετασχηματίζει το στοιχείο δεδομένων που επιστρέφεται σε πίνακα.",
        "Documentation.Examples": [
          {
            "Description": "Έλκει έναν πίνακα με πληροφορίες χρηστών από το Smartsheet API",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Ένας πίνακας με πληροφορίες χρηστών όπως επιστρέφονται από το Smartsheet API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου χρησιμοποιώντας οποιονδήποτε από τους καθορισμένους οριοθέτες.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου χρησιμοποιώντας οποιονδήποτε από τους καθορισμένους οριοθέτες.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Διαχωρίστε την είσοδο με κόμμα ή ερωτηματικό, αγνοώντας εισαγωγικά και εισαγωγικά οριοθέτες και ξεκινώντας από την αρχή της εισαγωγής.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Διαχωρίστε την είσοδο με κόμμα ή ερωτηματικό, αγνοώντας εισαγωγικά και εισαγωγικά οριοθέτες και ξεκινώντας από το τέλος της εισαγωγής.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σύμφωνα με τον καθορισμένο οριοθέτη.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σύμφωνα με τον καθορισμένο οριοθέτη.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Διαχωρίστε την εισαγωγή με κόμμα, αγνοώντας τα εισαγωγικά κόμματα.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου χρησιμοποιώντας κάθε καθορισμένο οριοθέτη με τη σειρά.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου χρησιμοποιώντας κάθε καθορισμένο οριοθέτη με τη σειρά.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Διαχωρίστε την είσοδο με κόμμα και μετά ερωτηματικό, ξεκινώντας από την αρχή της εισαγωγής.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Διαχωρίστε την είσοδο με κόμμα και, στη συνέχεια, ερωτηματικό, αντιμετωπίζοντας τα εισαγωγικά όπως κάθε άλλο χαρακτήρα και ξεκινώντας από το τέλος της εισαγωγής.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σύμφωνα με κάθε καθορισμένο μήκος.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σύμφωνα με κάθε καθορισμένο μήκος.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Διαχωρίστε την είσοδο στους δύο πρώτους χαρακτήρες ακολουθούμενους από τους επόμενους τρεις, ξεκινώντας από την αρχή της εισαγωγής.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Διαχωρίστε την είσοδο στους τρεις πρώτους χαρακτήρες ακολουθούμενους από τους επόμενους δύο, ξεκινώντας από το τέλος της εισαγωγής.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σε κάθε καθορισμένη θέση.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σε κάθε καθορισμένη θέση.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Διαχωρίστε την είσοδο στις καθορισμένες θέσεις, ξεκινώντας από την αρχή της εισόδου.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Διαχωρίστε την είσοδο στις καθορισμένες θέσεις, ξεκινώντας από το τέλος της εισόδου.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σύμφωνα με τις καθορισμένες αποκλίσεις και μήκη.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου σύμφωνα με τις καθορισμένες αποκλίσεις και μήκη. Το μήκος null υποδεικνύει ότι θα πρέπει να συμπεριληφθούν όλα τα δεδομένα εισόδου που απομένουν.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Διαχωρίστε την είσοδο με τα καθορισμένα ζεύγη θέσης και μήκους, ξεκινώντας από την αρχή της εισαγωγής. Σημειώστε ότι τα εύρη σε αυτό το παράδειγμα αλληλεπικαλύπτονται.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Διαχωρίστε την είσοδο κατά τα καθορισμένα ζεύγη θέσης και μήκους, ξεκινώντας από το τέλος της εισόδου.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Διαιρέστε τα δεδομένα εισόδου σε ταχυδρομικό κώδικα σταθερού μήκους, ακολουθούμενο από ένα όνομα πόλης μεταβλητού μήκους.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου επαναλαμβανόμενα μετά το καθορισμένο μήκος.",
        "Documentation.LongDescription": "Επιστρέφει μια συνάρτηση που διαιρεί κείμενο σε μια λίστα κειμένου επαναλαμβανόμενα μετά το καθορισμένο μήκος.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Διαχωρίστε επανειλημμένα την είσοδο σε κομμάτια τριών χαρακτήρων, ξεκινώντας από την αρχή της εισαγωγής.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Διαχωρίστε επανειλημμένα την είσοδο σε κομμάτια τριών χαρακτήρων, ξεκινώντας από το τέλος της εισαγωγής.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Επιστρέφει τον κατά προσέγγιση αριθμό γραμμών στον πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τον κατά προσέγγιση αριθμό σειρών στο <code>table</code>, ή ένα σφάλμα αν η πηγή δεδομένων δεν υποστηρίζει την προσέγγιση.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Υπολογίστε τον αριθμό των διακριτών συνδυασμών πόλης και πολιτείας σε έναν μεγάλο πίνακα, ο οποίος μπορεί να χρησιμοποιηθεί ως εκτίμηση της βασικότητας για τις στήλες. Οι εκτιμήσεις πληθώρας είναι αρκετά σημαντικές ώστε διάφορες πηγές δεδομένων (όπως ο SQL Server) να υποστηρίζουν αυτήν τη συγκεκριμένη προσέγγιση, χρησιμοποιώντας συχνά έναν αλγόριθμο που ονομάζεται HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Επιστρέφει τον αριθμό των στηλών του πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό των στηλών του πίνακα <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τον αριθμό των στηλών του πίνακα.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Επιστρέφει τα ονόματα των στηλών ως λίστα.",
        "Documentation.LongDescription": "Επιστρέφει τα ονόματα των στηλών του πίνακα <code>table</code> ως λίστα κειμένου.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τα ονόματα στηλών του πίνακα.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Επιστρέφει την πρώτη γραμμή ή μια καθορισμένη προεπιλεγμένη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει την πρώτη γραμμή του <code>table</code> ή μια προαιρετική προεπιλεγμένη τιμή, <code>default</code>, εάν ο πίνακας είναι κενός.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει την πρώτη γραμμή του πίνακα.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Βρείτε την πρώτη γραμμή του πίνακα <code>({})</code> ή επιστρέψτε [a = 0, b = 0] εάν είναι κενή.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Επιστρέφει την πρώτη στήλη της πρώτης σειράς του πίνακα ή μια καθορισμένη προεπιλεγμένη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει την πρώτη στήλη της πρώτης σειράς του πίνακα <code>table</code> ή μια καθορισμένη προεπιλεγμένη τιμή.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Υποδεικνύει αν ο πίνακας περιέχει μόνο διακριτές γραμμές (όχι διπλότυπα).",
        "Documentation.LongDescription": "Υποδεικνύει αν ο πίνακας <code>table</code> περιέχει μόνο διακριτές γραμμές (όχι διπλότυπα). Επιστρέφει τιμή <code>true</code>, αν οι γραμμές είναι διακριτές, διαφορετικά επιστρέφει τιμή <code>false</code>.\r\n    Μια προαιρετική παράμετρος, <code>comparisonCriteria</code>, καθορίζει ποιες στήλες του πίνακα θα ελεγχθούν για διπλότυπα. Αν δεν καθοριστεί η <code>comparisonCriteria</code>, ελέγχονται όλες οι στήλες.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν ο πίνακας είναι διακριτός.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Προσδιορίζει αν ο πίνακας είναι διακριτός στη στήλη.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Υποδεικνύει αν ο πίνακας περιέχει γραμμές.",
        "Documentation.LongDescription": "Υποδεικνύει αν ο πίνακας <code>table</code> περιέχει γραμμές. Επιστρέφει την τιμή <code>true</code>, αν δεν υπάρχουν γραμμές (δηλαδή ο πίνακας είναι κενός), διαφορετικά επιστρέφει τιμή <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορίζει αν ο πίνακας είναι κενός.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Προσδιορίστε αν ο πίνακας <code>({})</code> είναι κενός.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Επιστρέφει τα κλειδιά του καθορισμένου πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τα κλειδιά του καθορισμένου πίνακα.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Λήψη της λίστας κλειδιών για έναν πίνακα.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Επιστρέφει την τελευταία γραμμή ή μια καθορισμένη προεπιλεγμένη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει την τελευταία γραμμή του <code>table</code> ή μια προαιρετική προεπιλεγμένη τιμή, <code>default</code>, εάν ο πίνακας είναι κενός.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει την τελευταία γραμμή του πίνακα.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Βρείτε την τελευταία γραμμή του πίνακα <code>({})</code> ή επιστρέψτε [a = 0, b = 0] εάν είναι κενή.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Επιστρέφει τον αριθμό των γραμμών του πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό των γραμμών του <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Βρίσκει τον αριθμό των γραμμών του πίνακα.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Επιστρέφει τη μοναδική γραμμή του πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τη μοναδική γραμμή στο <code>table</code> μίας γραμμής. Εάν ο <code>table</code> έχει περισσότερες από μία γραμμές, παρουσιάζεται εξαίρεση.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει τη μεμονωμένη γραμμή στον πίνακα.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Δημιουργεί μια λίστα με ένθετες λίστες τιμών στήλης από έναν πίνακα.",
        "Documentation.LongDescription": "Δημιουργεί μια λίστα με ένθετες λίστες τιμών στήλης τον πίνακα, <code>table</code>.  Κάθε στοιχείο λίστας είναι μια εσωτερική λίστα που περιέχει τις τιμές στήλης.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργεί μια λίστα των τιμών στήλης από τον πίνακα.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Μετατρέπει έναν πίνακα σε λίστα εφαρμόζοντας την καθορισμένη συνάρτηση συνδυασμού σε κάθε γραμμή τιμών του πίνακα.",
        "Documentation.LongDescription": "Μετατρέπει έναν πίνακα σε λίστα εφαρμόζοντας την καθορισμένη συνάρτηση συνδυασμού σε κάθε γραμμή τιμών του πίνακα.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Συνδυάζει το κείμενο κάθε σειράς με κόμμα.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Μετατρέπει έναν πίνακα σε λίστα εγγραφών.",
        "Documentation.LongDescription": "Μετατρέπει έναν πίνακα, <code>table</code>, σε λίστα εγγραφών.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέπει τον πίνακα σε λίστα εγγραφών.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Δημιουργεί μια λίστα με ένθετες λίστες τιμών γραμμής από έναν πίνακα.",
        "Documentation.LongDescription": "Δημιουργεί μια λίστα με ένθετες λίστες τιμών στήλης τον πίνακα, <code>table</code>.  Κάθε στοιχείο λίστας είναι μια εσωτερική λίστα που περιέχει τις τιμές γραμμής.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργεί μια λίστα των τιμών γραμμής από τον πίνακα.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Δημιουργεί μια τροποποιημένη εγγραφή σφάλματος που δεν θα ενεργοποιεί μια εναλλακτική όταν εκτελείται από έναν χειριστή που ορίζεται σε μια προβολή (μέσω Table.View).",
        "Documentation.LongDescription": "Δημιουργεί μια τροποποιημένη εγγραφή σφάλματος από <code>errorRecord</code> την οποία δεν θα ενεργοποιείται μια εναλλακτική όταν εκτελείται από έναν χειριστή που ορίζεται σε μια προβολή (μέσω Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Δημιουργεί μια συνάρτηση που μπορεί να αναχαιτιστεί από ένα δείκτη χειρισμού που ορίζεται σε μια προβολή (μέσω του Table.View).",
        "Documentation.LongDescription": "<p>Δημιουργεί μια συνάρτηση προβολής με βάση το <code>function</code> που μπορεί να χειριστεί σε μια προβολή που δημιουργήθηκε από το <code>Table.View</code>.</p>\r\n<p>Ο χειριστής <code>OnInvoke</code> του <code>Table.View</code> μπορεί να χρησιμοποιηθεί για τον καθορισμό ενός προγράμματος χειρισμού για τη συνάρτηση προβολής.</p>\r\n<p>Όπως και με τους χειριστές για ενσωματωμένες λειτουργίες, εάν δεν έχει καθοριστεί κανένα πρόγραμμα χειρισμού <code>OnInvoke</code>, ή εάν δεν χειρίζεται τη συνάρτηση προβολής ή εάν προκύψει σφάλμα από το πρόγραμμα χειρισμού, <code>function</code> εφαρμόζεται στην κορυφή της προβολής.</p>\r\n<p>Ανατρέξτε στη δημοσιευμένη τεκμηρίωση προσαρμοσμένης σύνδεσης Power Query για μια πιο πλήρη περιγραφή των συναρτήσεων <code>Table.View</code> και προσαρμοσμένης προβολής.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Επιστρέφει την τιμή κειμένου έχοντας καταργήσει όλους τους χαρακτήρες ελέγχου.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή κειμένου έχοντας καταργήσει όλους τους χαρακτήρες ελέγχου του <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Καταργεί τις αλλαγές γραμμών και τους άλλους χαρακτήρες ελέγχου από μια τιμή κειμένου.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Συνενώνει μια λίστα τιμών κειμένου σε μία τιμή κειμένου.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα του συνδυασμού της λίστας τιμών κειμένου, <code>texts</code>σε μία μόνο τιμή κειμένου. Όλες οι τιμές <code>null</code> που υπάρχουν στο <code>texts</code> παραβλέπονται.\r\n    Μπορεί να καθοριστεί ένα προαιρετικό <code>separator</code> που χρησιμοποιείται στο τελικό συνδυασμένο κείμενο.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Συνδυάστε τις τιμές κειμένου \"Seattle\" και \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Συνδυάστε τις τιμές κειμένου \"Seattle\" και \"WA\", διαχωρισμένες με κόμμα και κενό διάστημα.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Συνδυάστε τις τιμές \"Seattle\", <code>null</code> και \"WA\", που διαχωρίζονται με κόμμα και κενό διάστημα. (Σημειώστε ότι το <code>null</code> παραβλέπεται.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Δημιουργεί μια τιμή κειμένου από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει την αναπαράσταση κειμένου της τιμής <code>value</code>. Η τιμή <code>value</code> μπορεί να είναι τιμή <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> ή <code>binary</code>.\r\n    Αν η δεδομένη τιμή είναι null, το <code>Text.From</code> επιστρέφει null. Ενδέχεται επίσης να παρέχεται μια προαιρετική τιμή <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια τιμή κειμένου από τον αριθμό 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Αποκωδικοποιεί δεδομένα από μια δυαδική μορφή σε κείμενο.",
        "Documentation.LongDescription": "Αποκωδικοποιεί δεδομένα, <code>binary</code>, από μια δυαδική τιμή σε τιμή κειμένου, χρησιμοποιώντας τον τύπο <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Συνάγει τον λεπτομερή τύπο αριθμού (Int64.Type, Double.Type και ούτω καθεξής) ενός αριθμού που είναι κωδικοποιημένος στο κείμενο.",
        "Documentation.LongDescription": "Συνάγει τον τύπο υποδιαίρεσης αριθμού (Int64.Type, Double.Type και ούτω καθεξής) <code>text</code>. Προκύπτει σφάλμα εάν <code>text</code> δεν είναι αριθμός. Μπορεί επίσης να παρασχεθεί μια προαιρετική <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Επιστρέφει τον αριθμό των χαρακτήρων.",
        "Documentation.LongDescription": "Επιστρέφει τον αριθμό χαρακτήρων του κειμένου <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε πόσοι χαρακτήρες υπάρχουν στο κείμενο \"Hello, World\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Μετατρέπει όλους τους χαρακτήρες σε πεζούς.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της μετατροπής όλων των χαρακτήρων της τιμής <code>text</code> σε πεζούς. Ενδέχεται επίσης να παρέχεται μια προαιρετική τιμή <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την έκδοση του \"AbCd\" σε πεζούς χαρακτήρες.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Μετατρέπει σε κεφαλαίο το πρώτο γράμμα κάθε λέξης.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της κεφαλαιοποίησης μόνο του πρώτου γράμματος κάθε λέξης της τιμής κειμένου, <code>text</code>. Όλα τα υπόλοιπα γράμματα επιστρέφονται ως πεζά. Ενδέχεται επίσης να παρέχεται μια προαιρετική τιμή <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Χρησιμοποιήστε την <code>Text.Proper</code> σε μια απλή πρόταση.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Αντιστροφή του παρεχόμενου στοιχείου <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Αντιστροφή του κειμένου \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Κωδικοποιεί κείμενο σε δυαδική μορφή.",
        "Documentation.LongDescription": "Κωδικοποιεί την παρεχόμενη τιμή κειμένου, <code>text</code>, σε δυαδική τιμή χρησιμοποιώντας την καθορισμένη <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Επιστρέφει μια λίστα τιμών χαρακτήρων από την παρεχόμενη τιμή κειμένου.",
        "Documentation.LongDescription": "Επιστρέφει μια λίστα τιμών χαρακτήρων από την παρεχόμενη τιμή κειμένου <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργήστε μια λίστα τιμών χαρακτήρων από το κείμενο \"Hello World\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Καταργεί όλα τα αρχικά και τελικά κενά διαστήματα.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της κατάργησης όλων των αρχικών και τελικών κενών διαστημάτων από την τιμή κειμένου <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Καταργεί όλα τα αρχικά και τελικά κενά διαστήματα από το \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Καταργεί όλα τα τελικά κενά διαστήματα.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της κατάργησης όλων των τελικών κενών διαστημάτων από την τιμή κειμένου <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε όλα τα τελικά κενά διαστήματα από το \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Καταργεί όλα τα αρχικά κενά διαστήματα.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της κατάργησης όλων των αρχικών κενών διαστημάτων από την τιμή κειμένου <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Καταργήστε όλα τα αρχικά κενά διαστήματα από το \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Μετατρέπει όλους τους χαρακτήρες σε κεφαλαίους.",
        "Documentation.LongDescription": "Επιστρέφει το αποτέλεσμα της μετατροπής όλων των χαρακτήρων της τιμής <code>text</code> σε κεφαλαίους. Ενδέχεται επίσης να παρέχεται μια προαιρετική τιμή <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε την έκδοση του \"AbCd\" σε κεφαλαία.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Επιστρέφει το τέλος της ώρας.",
        "Documentation.LongDescription": "Επιστρέφει το τέλος της ώρας που αντιπροσωπεύεται από <code>dateTime</code>, συμπεριλαμβανομένων των κλασματικών δευτερολέπτων. Οι πληροφορίες ζώνης ώρας διατηρούνται.\r\n      <ul>\r\n        <li><code>dateTime</code>: Μια τιμή <code>time</code>, <code>datetime</code> ή <code>datetimezone</code> από την οποία υπολογίζεται το τέλος της ώρας.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Λάβετε το τέλος της ώρας για τις 14/5/2011 05:00:00 μ.μ.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Λάβετε το τέλος της ώρας για τις 17/5/2011 05:00:00 PM -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Δημιουργεί μια ώρα από την παρεχόμενη τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια τιμή <code>time</code> από το δεδομένο <code>value</code>. Μπορεί επίσης να παρέχεται ένα προαιρετικό <code>culture</code> (για παράδειγμα, \"en-US\").\r\nΑν το δεδομένο<code>value</code> είναι <code>null</code>, το <code>Time.From</code> επιστρέφει <code>null</code>. Αν το δεδομένο <code>value</code> είναι <code>ώρα</code>, επιστρέφεται <code>value</code>. Οι τιμές των ακόλουθων τύπων μπορούν να μετατραπούν σε τιμή <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: Μια τιμή <code>time</code> από αναπαράσταση κειμένου. Ανατρέξτε στο <code>Time.FromText</code> για λεπτομέρειες.</li>\r\n        <li><code>datetime</code>: Το στοιχείο ώρας του <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Το στοιχείο ώρας του τοπικού ισοδύναμου ημερομηνίας ώρας του <code>value</code>.</li>\r\n        <li><code>number</code>: Ένας <code>time</code> ισοδύναμος με τον αριθμό των κλασματικών ημερών που εκφράζεται με <code>value</code>. Αν <code>value</code> είναι αρνητικό ή μεγαλύτερο ή ίσο με 1, επιστρέφεται ένα σφάλμα.</li>\r\n      </ul>\r\nΑν <code>value</code> είναι οποιουδήποτε άλλου τύπου, επιστρέφεται ένα σφάλμα.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε το <code>0.7575</code> σε μια τιμή <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Μετατρέψτε το <code>#datetime(1899, 12, 30, 06, 45, 12)</code> σε μια τιμή <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Δημιουργεί μια ώρα από τοπικές και καθολικές και προσαρμοσμένες μορφές ώρας.",
        "Documentation.LongDescription": "Δημιουργεί μια τιμή <code>time</code> από μια αναπαράσταση κειμένου, <code>text</code>. Μπορεί να παρέχεται μια προαιρετική παράμετρος <code>record</code>, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Το <code>record</code> μπορεί να περιέχει τα ακόλουθα πεδία:\r\n<ul>\r\n   <li><code>Format</code>: Μια τιμή <code>text</code> που υποδεικνύει τη μορφή που θα χρησιμοποιηθεί. Για περισσότερες λεπτομέρειες, μεταβείτε στη διεύθυνση https://go.microsoft.com/fwlink/?linkid=2180104 και https://go.microsoft.com/fwlink/?linkid=2180105. Η παράλειψη αυτού του πεδίου ή η παροχή του <code>null</code> θα έχει ως αποτέλεσμα την ανάλυση του χρόνου με την καλύτερη δυνατή προσπάθεια.</li>\r\n   <li><code>Culture</code>: Όταν το <code>Format</code> δεν είναι null, το <code>Culture</code> ελέγχει ορισμένους προσδιοριστές μορφής. Για παράδειγμα, στο <code>\"en-US\"</code> <code>\"tt\"</code> είναι <code>\"AM\" ή \"PM\"</code>, ενώ στο <code>\"ar-EG\"</code> <code>\"tt\"</code> είναι <code>\"ص\" ή \"م\"</code>. Όταν το <code>Format</code> είναι <code>null</code>, το <code>Culture</code> ελέγχει την προεπιλεγμένη μορφή που θα χρησιμοποιηθεί. Όταν το <code>Culture</code> είναι <code>null</code> ή παραλείπεται, χρησιμοποιείται το <code>Culture.Current</code>.</li>\r\n</ul>\r\n Για την υποστήριξη ροών εργασίας παλαιού τύπου, το <code>options</code> μπορεί επίσης να μια τιμή κειμένου. Αυτό έχει την ίδια συμπεριφορά σαν <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε την <code>\"10:12:31am\"</code> σε τιμή ώρας.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Μετατρέψτε το <code>\"1012\"</code> σε τιμή ώρας.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Μετατρέψτε το <code>\"10\"</code> σε τιμή ώρας.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Επιστρέφει το στοιχείο ώρας.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο ώρας της παρεχόμενης τιμής <code>time</code>, <code>datetime</code> ή <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την ώρα στην #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Επιστρέφει το στοιχείο λεπτού.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο λεπτού της παρεχόμενης τιμής <code>time</code>, <code>datetime</code> ή <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε το λεπτό στην #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Επιστρέφει το στοιχείο δευτερολέπτου.",
        "Documentation.LongDescription": "Επιστρέφει το στοιχείο δευτερολέπτου της παρεχόμενης τιμής <code>time</code>, <code>datetime</code> ή <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Εύρεση της τιμής δευτερολέπτου σε μια τιμή datetime.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Επιστρέφει την αρχή της ώρας.",
        "Documentation.LongDescription": "Επιστρέφει την αρχή της ώρας που αντιπροσωπεύεται από <code>dateTime</code>.\r\n    <code>dateTime</code> πρέπει να είναι μια τιμή <code>time</code>, <code>datetime</code> ή <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε την αρχή της ώρας για τις 10 Οκτωβρίου 2011, 8:10:32 π.μ.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Επιστρέφει μια εγγραφή που περιέχει τα τμήματα της τιμής Time.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή που περιέχει τα τμήματα της τιμής Time <code>time</code> που δόθηκε.\r\n <ul>\r\n        <li><code>time</code>: Μια τιμή της <code>time</code> για την οποία πρόκειται να υπολογιστεί η εγγραφή των μερών της.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Μετατρέψτε την τιμή <code>#time(11, 56, 2)</code> σε μια εγγραφή που περιέχει τιμές ώρας.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Επιστρέφει μια αναπαράσταση κειμένου της τιμής ώρας.",
        "Documentation.LongDescription": "Επιστρέφει μια αναπαράσταση κειμένου του <code>time</code>. Μπορεί να παρέχεται μια προαιρετική παράμετρος <code>record</code>, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Το <code>culture</code> χρησιμοποιείται μόνο για παλαιού τύπου ροές εργασίας. Το <code>record</code> μπορεί να περιέχει τα ακόλουθα πεδία:\r\n<ul>\r\n   <li><code>Format</code>: Μια τιμή <code>text</code> που υποδεικνύει τη μορφή που θα χρησιμοποιηθεί. Για περισσότερες λεπτομέρειες, μεταβείτε στη διεύθυνση https://go.microsoft.com/fwlink/?linkid=2180104 και https://go.microsoft.com/fwlink/?linkid=2180105. Η παράλειψη αυτού του πεδίου ή η παροχή <code>null</code> θα έχει ως αποτέλεσμα τη μορφοποίηση της ημερομηνίας χρησιμοποιώντας την προεπιλογή που ορίζεται από το <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Όταν το <code>Format</code> δεν είναι null, το <code>Culture</code> ελέγχει ορισμένους προσδιοριστές μορφής. Για παράδειγμα, στο <code>\"en-US\"</code> <code>\"tt\"</code> είναι <code>\"AM\" ή \"PM\"</code>, ενώ στο <code>\"ar-EG\"</code> <code>\"tt\"</code> είναι <code>\"ص\" ή \"م\"</code>. Όταν το <code>Format</code> είναι <code>null</code>, το <code>Culture</code> ελέγχει την προεπιλεγμένη μορφή που θα χρησιμοποιηθεί. Όταν το <code>Culture</code> είναι <code>null</code> ή παραλείπεται, χρησιμοποιείται το <code>Culture.Current</code>.</li>\r\n</ul>\r\nΓια την υποστήριξη ροών εργασίας παλαιού τύπου, τα <code>options</code> και <code>culture</code> μπορεί επίσης να είναι τιμές κειμένου. Αυτό έχει την ίδια συμπεριφορά σαν <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Μετατροπή <code>#time(01, 30, 25)</code> σε μια τιμή <code>text</code>. <i>Το αποτέλεσμα μπορεί να διαφέρει ανάλογα με την τρέχουσα κουλτούρα.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Μετατροπή με χρήση προσαρμοσμένης μορφής και της γερμανικής κουλτούρας.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Μετατροπή με χρήση της τυπικής μορφής ώρας.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Επιστρέφει μια κλειστή έκδοση του τύπου εγγραφής που έχετε εισάγει (ή τον ίδιο τύπο αν είναι ήδη κλειστή).",
        "Documentation.LongDescription": "Επιστρέφει μια κλειστή έκδοση της εγγραφής <code>record</code> <code>type</code> που έχετε εισάγει (ή τον ίδιο τύπο αν είναι ήδη κλειστή).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργία μιας κλειστής έκδοσης του <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Επιστρέφει την κλάση facet ενός τύπου.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή που περιέχει τις κλάσεις facet του <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Επιστρέφει μια εγγραφή με τιμές πεδίων που έχουν οριστεί με τα ονόματα των παραμέτρων ενός τύπου συνάρτησης και τις τιμές αυτών, οι οποίες έχουν οριστεί με τους αντίστοιχους τύπους τους.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή με τιμές πεδίων που έχουν οριστεί με τα ονόματα των παραμέτρων του στοιχείου <code>type</code> και τις τιμές αυτών, οι οποίες έχουν οριστεί με τους αντίστοιχους τύπους τους.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Εύρεση των τύπων παραμέτρων στη συνάρτηση <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Επιστρέφει έναν αριθμό που υποδεικνύει τον ελάχιστο αριθμό παραμέτρων που απαιτούνται για την κλήση του τύπου συνάρτησης.",
        "Documentation.LongDescription": "Επιστρέφει έναν αριθμό που υποδεικνύει τον ελάχιστο αριθμό παραμέτρων που απαιτούνται για την κλήση της εισόδου <code>type</code> της συνάρτησης.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Εύρεση των απαιτούμενων παραμέτρων στη συνάρτηση <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Επιστρέφει έναν τύπο ο οποίος επιστρέφεται από έναν τύπο συνάρτησης.",
        "Documentation.LongDescription": "Επιστρέφει έναν τύπο ο οποίος επιστρέφεται από μια συνάρτηση <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Εύρεση του τύπου επιστροφής του στοιχείου <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Επιστρέφει την τιμή \"true\" αν ένας τύπος είναι τύπου null. Διαφορετικά, επιστρέφει την τιμή \"false\".",
        "Documentation.LongDescription": "Επιστρέφει την τιμή <code>true</code> αν ένας τύπος μπορεί να έχει τιμή <code>nullable</code>. Διαφορετικά επιστρέφει την τιμή <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορισμός του κατά πόσο το στοιχείο <code>number</code> μπορεί να έχει τιμή null.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Προσδιορισμός του κατά πόσο το στοιχείο <code>type nullable number</code> μπορεί να έχει τιμή null.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Υποδεικνύει αν ένας τύπος εγγραφής είναι ανοιχτός.",
        "Documentation.LongDescription": "Επιστρέφει μια λογική τιμή <code>logical</code> που υποδεικνύει αν μια εγγραφή <code>type</code> είναι ανοιχτή.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Προσδιορισμός του κατά πόσο η εγγραφή <code>type [ A = number, ...]</code> είναι ανοιχτή.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Επιστρέφει έναν τύπο στοιχείου από έναν τύπο λίστας.",
        "Documentation.LongDescription": "Επιστρέφει έναν τύπο στοιχείου από μια λίστα <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Εύρεση τύπου στοιχείου από τη λίστα <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Επιστρέφει τον τύπο χωρίς δυνατότητα null από έναν τύπο.",
        "Documentation.LongDescription": "Επιστρέφει τον τύπο χωρίς δυνατότητα <code>nullable</code> από το στοιχείο <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Επιστροφή του τύπου χωρίς δυνατότητα null του στοιχείου <code>type nullable number</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Επιστρέφει μια ανοιχτή έκδοση του τύπου εγγραφής που έχετε εισάγει (ή τον ίδιο τύπο αν είναι ήδη ανοιχτή).",
        "Documentation.LongDescription": "Επιστρέφει μια ανοιχτή έκδοση της εγγραφής <code>record</code> <code>type</code> που έχετε εισάγει (ή τον ίδιο τύπο αν είναι ήδη ανοιχτή).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Δημιουργία μιας ανοιχτής έκδοσης του <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Επιστρέφει μια εγγραφή που περιγράφει τα πεδία ενός τύπου εγγραφής, με κάθε πεδίο του επιστρεφόμενου τύπου εγγραφής να περιέχει ένα αντίστοιχο όνομα και μια τιμή.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή που περιγράφει τα πεδία μιας εγγραφής <code>type</code>. Κάθε πεδίο του επιστρεφόμενου τύπου διαθέτει αντίστοιχο όνομα και τιμή, στη μορφή μιας εγγραφής <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Εύρεση του ονόματος και της τιμής της εγγραφής <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Επιστρέφει την πιθανώς κενή λίστα κλειδιών για τον παρεχόμενο τύπο πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει την πιθανώς κενή λίστα κλειδιών για τον δεδομένο τύπο πίνακα.<br>\r\n    <br>\r\n    Κάθε κλειδί ορίζεται με χρήση μιας εγγραφής στην ακόλουθη μορφή:\r\n    <ul>\r\n      <li>\r\n        <code>Στήλες</code>: μια λίστα με τα ονόματα των στηλών που ορίζουν το κλειδί\r\n      </li>\r\n      <li>\r\n        <code>Πρωτεύον</code>: <code>true</code> αν το κλειδί είναι το πρωτεύον κλειδί του πίνακα. διαφορετικά, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Επιστροφή των πληροφοριών κλειδιού για έναν τύπο πίνακα.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Επιστρέφει το τύπο γραμμής του τύπου πίνακα.",
        "Documentation.LongDescription": "Επιστρέφει τον τύπο γραμμής του καθορισμένου τύπου πίνακα. Το αποτέλεσμα θα είναι πάντα ένας τύπος εγγραφής.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέψτε τις πληροφορίες τύπου γραμμής για έναν απλό πίνακα.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Επιστρέφει την ένωση μιας λίστας τύπων.",
        "Documentation.LongDescription": "Επιστρέφει την ένωση των τύπων σε <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Συγκρότηση εγγραφής σε συμβολοσειρά ερωτήματος URI.",
        "Documentation.LongDescription": "Συγκρότηση της εγγραφής <code>query</code> σε συμβολοσειρά ερωτήματος URI, χρησιμοποιώντας χαρακτήρες διαφυγής όπου απαιτείται.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Κωδικοποίηση συμβολοσειράς ερωτήματος που περιέχει ορισμένους ειδικούς χαρακτήρες.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Κωδικοποιεί ειδικούς χαρακτήρες σύμφωνα με το πρότυπο RFC 3986.",
        "Documentation.LongDescription": "Κωδικοποιεί ειδικούς χαρακτήρες στην είσοδο <code>data</code> σύμφωνα με τους κανόνες του προτύπου RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Κωδικοποίηση των ειδικών χαρακτήρων στο \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Επιστρέφει τα μέρη του απόλυτου URI εισόδου ως εγγραφή.",
        "Documentation.LongDescription": "Επιστρέφει τα μέρη της εισόδου <code>absoluteUri</code> ως εγγραφή, περιέχοντας τιμές όπως Σχήμα, Κεντρικός υπολογιστής, Θύρα, Διαδρομή, Ερώτημα, Τμήμα, Όνομα χρήστη και Κωδικός πρόσβασης.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Βρείτε τα μέρη του απόλυτου URI \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Αποκωδικοποιήστε μια συμβολοσειρά με ποσοστιαία κωδικοποίηση.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL της υπηρεσίας ανάλυσης Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents ",
        "Documentation.Name": "VSTS.AccountContents ",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα που έχουν ληφθεί από τη διεύθυνση URL της υπηρεσίας ανάλυσης Azure DevOps ως δυαδική τιμή. Αυτή η συνάρτηση χρησιμοποιεί διαφορετικά διαπιστευτήρια για διαφορετικούς οργανισμούς."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Εισαγάγετε τη διεύθυνση URL της υπηρεσίας ανάλυσης Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Επιστρέφει τα περιεχόμενα που έχουν ληφθεί από τη διεύθυνση URL της υπηρεσίας ανάλυσης Azure DevOps ως δυαδική τιμή. Αυτή η συνάρτηση χρησιμοποιεί καθολικά διαπιστευτήρια για όλο τον προσβάσιμο οργανισμό."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Εκφράζει εναλλακτικά σχέδια ερωτήματος.",
        "Documentation.LongDescription": "Εκφράζει τα εναλλακτικά σχέδια ερωτήματος μέσα σε μια παράσταση σχεδίου ερωτήματος που λαμβάνεται μέσω του Value.Expression(Value.Optimize(...)). Δεν προορίζεται για άλλες χρήσεις.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Επιστρέφει ένα αφηρημένο δέντρο σύνταξης (AST) που αντιπροσωπεύει την παράσταση της τιμής.",
        "Documentation.LongDescription": "Επιστρέφει ένα αφηρημένο δέντρο σύνταξης (AST) που αντιπροσωπεύει την παράσταση της τιμής",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Δημιουργεί μια τιμή ισχυρού τύπου από μια αναπαράσταση κειμένου.",
        "Documentation.LongDescription": "Αποκωδικοποιεί μια τιμή από μια αναπαράσταση κειμένου <code>text</code>, και την ερμηνεύει ως τιμή κατάλληλου τύπου.\r\n    Το <code>Value.FromText</code> λαμβάνει μια τιμή κειμένου και επιστρέφει αριθμό, λογική τιμή, τιμή null, τιμή ημερομηνίας/ώρας, τιμή διάρκειας ή τιμή κειμένου. Η κενή τιμή κειμένου ερμηνεύεται ως τιμή null.\r\n    Ενδέχεται επίσης να παρέχεται μια προαιρετική τιμή <code>culture</code> (για παράδειγμα, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Επιστρέφει μια εγγραφή που περιέχει τα μετα-δεδομένα της εισόδου.",
        "Documentation.LongDescription": "Επιστρέφει μια εγγραφή που περιέχει τα μετα-δεδομένα της εισόδου.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Ζητά από το Value.Expression να επιστρέψει τη βελτιστοποιημένη παράσταση για μια τιμή.",
        "Documentation.LongDescription": "Όταν χρησιμοποιείται στο Value.Expression, αν το <code>value</code> αντιπροσωπεύει ένα ερώτημα που μπορεί να βελτιστοποιηθεί, αυτή η συνάρτηση υποδεικνύει ότι θα πρέπει να επιστραφεί η βελτιστοποιημένη παράσταση. Διαφορετικά, το <code>value</code> θα μεταβιβαστεί χωρίς καμία επίδραση.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Καταργεί τα μετα-δεδομένα της εισόδου.",
        "Documentation.LongDescription": "Καταργεί τα μετα-δεδομένα της εισόδου.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Επιστρέφει τον τύπο της παρεχόμενης τιμής.",
        "Documentation.LongDescription": "Επιστρέφει τον τύπο της παρεχόμενης τιμής.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.LongDescription": "Αυτή η συνάρτηση προορίζεται μόνο για εσωτερική χρήση.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Επιστρέφει το HTML για την καθορισμένη διεύθυνση URL, όπως προβάλλεται από ένα πρόγραμμα περιήγησης web.",
        "Documentation.LongDescription": "Επιστρέφει το HTML για το καθορισμένο <code>url</code>, όπως προβάλλεται από ένα πρόγραμμα περιήγησης web. Μπορεί να παρέχεται μια προαιρετική παράμετρος εγγραφής, <code>options</code>, για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: Εάν η τοποθεσία-στόχος έχει την έννοια ενός κλειδιού API, αυτή η παράμετρος μπορεί να χρησιμοποιηθεί για τον καθορισμό του ονόματος (όχι της τιμής) της παραμέτρου κλειδιού που πρέπει να χρησιμοποιηθεί στη διεύθυνση URL. Η πραγματική τιμή κλειδιού παρέχεται στο διαπιστευτήριο.</li>\r\n        <li><code>WaitFor</code>: Καθορίζει μια συνθήκη για την οποία πρέπει να περιμένετε πριν από τη λήψη του HTML, επιπλέον της αναμονής για τη φόρτωση της σελίδας (κάτι που γίνεται πάντα). Μπορεί να είναι μια εγγραφή που περιέχει πεδία Timeout και/ή Selector. Εάν έχει καθοριστεί μόνο ένα Timeout, η συνάρτηση θα περιμένει το χρονικό διάστημα που έχει καθοριστεί πριν από τη λήψη του HTML. Εάν έχει καθοριστεί και το Selector και το Timeout και το Timeout λήξης παρέλθει πριν εμφανιστεί το Selector στη σελίδα, θα εμφανιστεί ένα σφάλμα. Εάν έχει καθοριστεί ένα Selector χωρίς Timeout, εφαρμόζεται ένα προεπιλεγμένο χρονικό όριο 30 δευτερολέπτων.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Πρόσβαση σε δεδομένα",
        "Documentation.Examples": [
          {
            "Description": "Επιστρέφει τον κώδικα HTML για την τοποθεσία https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Επιστρέφει τον κώδικα HTML για την τοποθεσία https://microsoft.com μετά από αναμονή για την παρουσία επιλογέα CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Επιστρέφει τον κώδικα HTML για την τοποθεσία https://microsoft.com μετά από αναμονή δέκα δευτερολέπτων.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Επιστρέφει τον κώδικα HTML για την τοποθεσία https://microsoft.com μετά από αναμονή έως δέκα δευτερολέπτων για την παρουσία επιλογέα CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Επιστρέφει τα περιεχόμενα που ελήφθησαν από τη διεύθυνση url ως δυαδικά.",
        "Documentation.LongDescription": "Επιστρέφει το περιεχόμενο που λήφθηκε από το <code>url</code> ως δυαδικό. Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να παρέχεται για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>Query</code> : Προσθέστε μέσω προγραμματισμού παραμέτρους ερωτήματος στη διεύθυνση URL χωρίς να χρειάζεται να ανησυχείτε για διαφυγή.</li>\r\n<li><code>ApiKeyName</code> : Εάν η τοποθεσία προορισμού έχει μια έννοια ενός κλειδιού API, αυτή η παράμετρος μπορεί να χρησιμοποιηθεί για τον καθορισμό του ονόματος (όχι της τιμής) της παραμέτρου κλειδιού που πρέπει να χρησιμοποιηθεί στη διεύθυνση URL. Η πραγματική τιμή του κλειδιού παρέχεται στο διαπιστευτήριο.</li>\r\n<li><code>Headers</code> : Ο καθορισμός αυτής της τιμής ως εγγραφής θα παράσχει επιπλέον κεφαλίδες σε μια αίτηση HTTP.</li>\r\n<li><code>Timeout</code> : Ο καθορισμός αυτής της τιμής ως διάρκειας θα αλλάξει το χρονικό όριο για μια αίτηση HTTP. Η προεπιλεγμένη τιμή είναι 100 δευτερόλεπτα.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Ο καθορισμός αυτής της τιμής ως λίστας θα εξαιρέσει αυτά τα κλειδιά κεφαλίδας HTTP από το να αποτελούν μέρος του υπολογισμού για την προσωρινή αποθήκευση δεδομένων.</li>\r\n<li><code>IsRetry</code> : Ο καθορισμός αυτής της λογικής τιμής ως true θα παραβλέπει οποιαδήποτε υπάρχουσα απόκριση στο cache κατά τη λήψη δεδομένων.</li>\r\n<li><code>ManualStatusHandling</code> : Ο καθορισμός αυτής της τιμής ως λίστας θα αποτρέψει οποιονδήποτε ενσωματωμένο χειρισμό για αιτήσεις HTTP των οποίων η απόκριση έχει έναν από αυτούς τους κωδικούς κατάστασης.</li>\r\n<li><code>RelativePath</code> : Ο καθορισμός αυτής της τιμής ως κειμένου την προσαρτά στη διεύθυνση URL βάσης πριν από την υποβολή της αίτησης.</li>\r\n<li><code>Content</code> : Ο καθορισμός αυτής της τιμής αλλάζει την αίτηση Web από GET σε POST, χρησιμοποιώντας την τιμή της επιλογής ως το περιεχόμενο του POST.</li>\r\n</ul>\r\n\r\n    Το αίτημα HTTP γίνεται είτε ως GET (όταν δεν καθορίζεται Περιεχόμενο) είτε ως POST (όταν υπάρχει Περιεχόμενο). Τα αιτήματα POST μπορούν να γίνουν μόνο ανώνυμα..\r\n    <br>\r\n    Οι κεφαλίδες της απόκρισης HTTP είναι διαθέσιμες ως μεταδεδομένα στο δυαδικό αποτέλεσμα. Εκτός ενός περιβάλλοντος προσαρμοσμένης σύνδεσης δεδομένων, είναι διαθέσιμο μόνο ένα υποσύνολο κεφαλίδων απόκρισης (για λόγους ασφαλείας).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Ανάκτηση των περιεχομένων του <code>\"https://bing.com/search?q=Power+Query\"</code> με χρήση των επιλογών RelativePath και Query. Αυτές οι επιλογές μπορούν να χρησιμοποιηθούν για δυναμική υποβολή ερωτήματος σε μια στατική διεύθυνση URL βάσης.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Εκτελέστε μια καταχώρηση σε μια διεύθυνση URL, περνώντας ένα δυαδικό ωφέλιμο φορτίο JSON και αναλύοντας την απόκριση ως JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Συνδεθείτε σε μια ασφαλή διεύθυνση URL που αποδέχεται ένα κλειδί ελέγχου ταυτότητας ως μέρος της συμβολοσειράς ερωτήματος. Αντί να κωδικοποιήσετε το μυστικό κλειδί στο M (το οποίο θα δημιουργούσε κίνδυνο ασφαλείας), \r\n    το κλειδί μπορεί να παρασχεθεί με ασφάλεια καθορίζοντας το όνομά του (όχι την τιμή του) στο M, επιλέγοντας έλεγχο ταυτότητας Web API και εισάγοντας την τιμή κλειδιού ως μέρος του διαπιστευτηρίου Web API.\r\n Όταν χρησιμοποιείται με αυτόν τον τρόπο, το παρακάτω παράδειγμα θα δημιουργήσει μια αίτηση για <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Επιστρέφει τις κεφαλίδες HTTP που έχουν ληφθεί από τη διεύθυνση url ως τιμή εγγραφής.",
        "Documentation.LongDescription": "Επιστρέφει τις κεφαλίδες που έχουν ληφθεί από το <code>url</code> ως εγγραφή. Μια προαιρετική παράμετρος εγγραφής, <code>options</code>, μπορεί να παρέχεται για τον καθορισμό πρόσθετων ιδιοτήτων. Η εγγραφή μπορεί να περιέχει τα ακόλουθα πεδία:\r\n    <ul>\r\n<li><code>Query</code> : Προσθέστε μέσω προγραμματισμού παραμέτρους ερωτήματος στη διεύθυνση URL χωρίς να χρειάζεται να ανησυχείτε για διαφυγή.</li>\r\n<li><code>ApiKeyName</code> : Εάν η τοποθεσία προορισμού έχει μια έννοια ενός κλειδιού API, αυτή η παράμετρος μπορεί να χρησιμοποιηθεί για τον καθορισμό του ονόματος (όχι της τιμής) της παραμέτρου κλειδιού που πρέπει να χρησιμοποιηθεί στη διεύθυνση URL. Η πραγματική τιμή του κλειδιού παρέχεται στο διαπιστευτήριο.</li>\r\n<li><code>Headers</code> : Ο καθορισμός αυτής της τιμής ως εγγραφής θα παράσχει επιπλέον κεφαλίδες σε μια αίτηση HTTP.</li>\r\n<li><code>Timeout</code> : Ο καθορισμός αυτής της τιμής ως διάρκειας θα αλλάξει το χρονικό όριο για μια αίτηση HTTP. Η προεπιλεγμένη τιμή είναι 100 δευτερόλεπτα.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Ο καθορισμός αυτής της τιμής ως λίστας θα εξαιρέσει αυτά τα κλειδιά κεφαλίδας HTTP από το να αποτελούν μέρος του υπολογισμού για την προσωρινή αποθήκευση δεδομένων.</li>\r\n<li><code>IsRetry</code> : Ο καθορισμός αυτής της λογικής τιμής ως true θα παραβλέπει οποιαδήποτε υπάρχουσα απόκριση στο cache κατά τη λήψη δεδομένων.</li>\r\n<li><code>ManualStatusHandling</code> : Ο καθορισμός αυτής της τιμής ως λίστας θα αποτρέψει οποιονδήποτε ενσωματωμένο χειρισμό για αιτήσεις HTTP των οποίων η απόκριση έχει έναν από αυτούς τους κωδικούς κατάστασης.</li>\r\n<li><code>RelativePath</code> : Ο καθορισμός αυτής της τιμής ως κειμένου την προσαρτά στη διεύθυνση URL βάσης πριν από την υποβολή της αίτησης.</li>\r\n</ul>\r\n\r\n    Το αίτημα HTTP γίνεται με τη μέθοδο HEAD. Εκτός ενός περιβάλλοντος προσαρμοσμένης σύνδεσης δεδομένων, είναι διαθέσιμο μόνο ένα υποσύνολο κεφαλίδων απόκρισης (για λόγους ασφαλείας).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Ανακτήστε τις κεφαλίδες HTTP για <code>\"https://bing.com/search?q=Power+Query\"</code> χρησιμοποιώντας τις επιλογές RelativePath και Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Το περιβάλλον εξουσιοδότησης έναντι του οποίου αξιολογείται μια συνθήκη καταχώρησης ελέγχου πρόσβασης (ACE).",
        "Documentation.LongDescription": "Το περιβάλλον εξουσιοδότησης έναντι του οποίου αξιολογείται μια συνθήκη καταχώρησης ελέγχου πρόσβασης (ACE).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Ένας πίνακας καταχωρήσεων ελέγχου πρόσβασης (ACE).",
        "Documentation.LongDescription": "Ένας ταξινομημένος πίνακας καταχωρήσεων ελέγχου πρόσβασης (ACE) που αντιπροσωπεύουν κανόνες εξουσιοδότησης. Κάθε γραμμή αξιολογείται σε σχέση με το τρέχον περιβάλλον εξουσιοδότησης (σε σειρά) και η πρώτη γραμμή για την οποία η παράσταση <code>Condition</code> επιστρέφει true καθορίζει ποιος κανόνας ισχύει. Η στήλη <code>Action</code> αντιπροσωπεύει το είδος ενέργειας για το οποίο ισχύει ο κανόνας. Η στήλη <code>AccessControlKind</code> καθορίζει αν θα πρέπει να επιτρέπεται ή όχι η πρόσβαση για την ενέργεια.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Καθορίζει το είδος του ελέγχου πρόσβασης.",
        "Documentation.LongDescription": "Καθορίζει το είδος του ελέγχου πρόσβασης.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις δυαδικές τιμές.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις δυαδικές τιμές.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Καθορίζει τον τύπο δυαδικής κωδικοποίησης.",
        "Documentation.LongDescription": "Καθορίζει τον τύπο δυαδικής κωδικοποίησης.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Καθορίζει πόσες φορές αναμένεται να εμφανίζεται το στοιχείο στην ομάδα.",
        "Documentation.LongDescription": "Καθορίζει πόσες φορές αναμένεται να εμφανίζεται το στοιχείο στην ομάδα.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Περιγράφει τον τύπο της προσωρινής αποθήκευσης που θα πραγματοποιηθεί.",
        "Documentation.LongDescription": "Περιγράφει τον τύπο της προσωρινής αποθήκευσης που θα πραγματοποιηθεί.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλα τα byte.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλα τα byte.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Καθορίζει τη σειρά των byte.",
        "Documentation.LongDescription": "Καθορίζει τη σειρά των byte.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλους τους χαρακτήρες.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλους τους χαρακτήρες.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Καθορίζει τον τύπο συμπίεσης.",
        "Documentation.LongDescription": "Καθορίζει τον τύπο συμπίεσης.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Καθορίζει τη σημασία των εισαγωγικών σε έγγραφα Csv.",
        "Documentation.LongDescription": "Καθορίζει τη σημασία των εισαγωγικών σε έγγραφα Csv.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει την τιμή νομισματικής μονάδας.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει την τιμή νομισματικής μονάδας.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές ημερομηνίας.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές ημερομηνίας.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές ημερομηνίας και ώρας που δεν σχετίζονται με μια ζώνη ώρας.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές ημερομηνίας και ώρας που δεν σχετίζονται με μια ζώνη ώρας.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές ημερομηνίας και ώρας που σχετίζονται με μια ζώνη ώρας.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές ημερομηνίας και ώρας που σχετίζονται με μια ζώνη ώρας.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Καθορίζει μια ημέρα της εβδομάδας.",
        "Documentation.LongDescription": "Καθορίζει μια ημέρα της εβδομάδας.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει αριθμό σταθερών δεκαδικών ψηφίων.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει αριθμό σταθερών δεκαδικών ψηφίων.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει αριθμό κινητής υποδιαστολής διπλής ακρίβειας.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει αριθμό κινητής υποδιαστολής διπλής ακρίβειας.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές διάρκειας.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές διάρκειας.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Καθορίζει την αναμενόμενη ενέργεια για επιπλέον τιμές σε μια γραμμή που περιέχει περισσότερες από τις αναμενόμενες στήλες.",
        "Documentation.LongDescription": "Καθορίζει την αναμενόμενη ενέργεια για επιπλέον τιμές σε μια γραμμή που περιέχει περισσότερες από τις αναμενόμενες στήλες.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις συναρτήσεις.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις συναρτήσεις.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Καθορίζει το είδος ομαδοποίησης.",
        "Documentation.LongDescription": "Πολλαπλές τοπικές ομάδες μπορούν να παραχθούν με την ίδια βασική τιμή, αλλά μόνο μία καθολική ομάδα για μια δεδομένη τιμή κλειδιού.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει μια τιμή GUID.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει μια τιμή GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Μια ταυτότητα αντιπροσωπεύει έναν χρήστη, μια ομάδα, μια συσκευή ή άλλο στοιχείο με δυνατότητα ταυτοποίησης.",
        "Documentation.LongDescription": "Μια ταυτότητα αντιπροσωπεύει έναν χρήστη, μια ομάδα, μια συσκευή ή άλλο στοιχείο με δυνατότητα ταυτοποίησης.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Καθορίζει μια εμβέλεια στην οποία δημιουργούνται και συγκρίνονται οι ταυτότητες.",
        "Documentation.LongDescription": "Καθορίζει μια εμβέλεια στην οποία δημιουργούνται και συγκρίνονται οι ταυτότητες.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει τον υπογεγραμμένο ακέραιο 16 bit.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει τον υπογεγραμμένο ακέραιο 16 bit.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει τον υπογεγραμμένο ακέραιο 32 bit.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει τον υπογεγραμμένο ακέραιο 32 bit.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει τον υπογεγραμμένο ακέραιο 64 bit.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει τον υπογεγραμμένο ακέραιο 64 bit.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει τον υπογεγραμμένο ακέραιο 8 bit.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει τον υπογεγραμμένο ακέραιο 8 bit.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Καθορίζει τον αλγόριθμο σύνδεσης που πρέπει να χρησιμοποιηθεί στη λειτουργία σύνδεσης.",
        "Documentation.LongDescription": "Καθορίζει τον αλγόριθμο σύνδεσης που πρέπει να χρησιμοποιηθεί στη λειτουργία σύνδεσης.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Καθορίζει το είδος της λειτουργίας σύνδεσης.",
        "Documentation.LongDescription": "Καθορίζει το είδος της λειτουργίας σύνδεσης.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Καθορίζει τον αριστερό ή δεξιό πίνακα ενός συνδέσμου.",
        "Documentation.LongDescription": "Καθορίζει τον αριστερό ή δεξιό πίνακα ενός συνδέσμου.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Περιγράφει τον τύπο του όρου ορίου που υποστηρίζεται από τη διάλεκτο SQL που χρησιμοποιείται από αυτή την προέλευση δεδομένων.",
        "Documentation.LongDescription": "Περιγράφει τον τύπο του όρου ορίου που υποστηρίζεται από τη διάλεκτο SQL που χρησιμοποιείται από αυτή την προέλευση δεδομένων.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις λίστες.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις λίστες.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις λογικές τιμές.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις λογικές τιμές.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Καθορίζει την αναμενόμενη ενέργεια για τιμές που λείπουν σε μια γραμμή που περιέχει λιγότερες από τις αναμενόμενες στήλες.",
        "Documentation.LongDescription": "Καθορίζει την αναμενόμενη ενέργεια για τιμές που λείπουν σε μια γραμμή που περιέχει λιγότερες από τις αναμενόμενες στήλες.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει την τιμή null.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει την τιμή null.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλους τους αριθμούς.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλους τους αριθμούς.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Καθορίζει τα είδη των τιμών που μπορεί να παραλείπει μια υπηρεσία OData.",
        "Documentation.LongDescription": "Καθορίζει τα είδη των τιμών που μπορεί να παραλείπει μια υπηρεσία OData.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Καθορίζει την εμφάνιση ενός στοιχείου σε μια ακολουθία.",
        "Documentation.LongDescription": "Καθορίζει την εμφάνιση ενός στοιχείου σε μια ακολουθία.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Καθορίζει την κατεύθυνση της ταξινόμησης.",
        "Documentation.LongDescription": "Καθορίζει την κατεύθυνση της ταξινόμησης.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Ο τύπος που αναπαριστά έναν κωδικό πρόσβασης κειμένου.",
        "Documentation.LongDescription": "Ο τύπος που αναπαριστά έναν κωδικό πρόσβασης κειμένου.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει την τιμή ποσοστού.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει την τιμή ποσοστού.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Καθορίζει τον τύπο λειτουργίας εκατοστημορίου.",
        "Documentation.LongDescription": "Καθορίζει τον τύπο λειτουργίας εκατοστημορίου.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Καθορίζει την ακρίβεια της σύγκρισης.",
        "Documentation.LongDescription": "Καθορίζει την ακρίβεια της σύγκρισης.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Καθορίζει το στυλ των εισαγωγικών.",
        "Documentation.LongDescription": "Καθορίζει το στυλ των εισαγωγικών.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Καθορίζει τον τύπο κατάταξης.",
        "Documentation.LongDescription": "Καθορίζει τον τύπο κατάταξης.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις εγγραφές.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις εγγραφές.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Υποδεικνύει αν η δημιουργία ευρετηρίου θα πρέπει να γίνει από την αρχή ή το τέλος των δεδομένων εισαγωγής.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Καθορίζει την κατεύθυνση στρογγυλοποίησης, όταν υπάρχει ισοδυναμία ανάμεσα στους πιθανούς αριθμούς προς τους οποίους μπορεί να γίνει στρογγυλοποίηση.",
        "Documentation.LongDescription": "Καθορίζει την κατεύθυνση στρογγυλοποίησης, όταν υπάρχει ισοδυναμία ανάμεσα στους πιθανούς αριθμούς προς τους οποίους μπορεί να γίνει στρογγυλοποίηση.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Οι έγκυρες επιλογές για την επιλογή λειτουργίας εκτέλεσης SAP Business Warehouse.",
        "Documentation.LongDescription": "Οι έγκυρες επιλογές για την επιλογή λειτουργίας εκτέλεσης SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Έγκυρες επιλογές για την επιλογή διανομής SAP HANA.",
        "Documentation.LongDescription": "Έγκυρες επιλογές για την επιλογή διανομής SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Τελεστής περιοχής για παραμέτρους εισόδου περιοχής HANA SAP.",
        "Documentation.LongDescription": "Τελεστής περιοχής για παραμέτρους εισόδου περιοχής HANA SAP.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει αριθμό κινητής υποδιαστολής μονής ακρίβειας.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει αριθμό κινητής υποδιαστολής μονής ακρίβειας.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Το πρωτόκολλο για χρήση κατά τη σύνδεση σε μια παρουσία του Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλους τους πίνακες.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλους τους πίνακες.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές κειμένου.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές κειμένου.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Καθορίζει τον τύπο κωδικοποίησης του κειμένου.",
        "Documentation.LongDescription": "Καθορίζει τον τύπο κωδικοποίησης του κειμένου.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές ώρας.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλες τις τιμές ώρας.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Καθορίζει το επίπεδο ανίχνευσης.",
        "Documentation.LongDescription": "Καθορίζει το επίπεδο ανίχνευσης.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Ο τύπος που αντιπροσωπεύει όλους τους τύπους.",
        "Documentation.LongDescription": "Ο τύπος που αντιπροσωπεύει όλους τους τύπους.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Ο τύπος που αναπαριστά ένα URI κειμένου.",
        "Documentation.LongDescription": "Ο τύπος που αναπαριστά ένα URI κειμένου.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Καθορίζει μια μέθοδο HTTP.",
        "Documentation.LongDescription": "Καθορίζει μια μέθοδο HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
