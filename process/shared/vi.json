{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Trả về một đại diện cấu trúc của cơ sở dữ liệu Access.",
        "Documentation.LongDescription": "Trả về cách biểu diễn có cấu trúc của cơ sở dữ liệu Access, <code>database</code>. Có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p l&#244;-gic (true/false) đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Trả về cơ sở dữ liệu Analysis Services trên máy chủ cụ thể.",
        "Documentation.LongDescription": "Trả về cơ sở dữ liệu về phiên bản Analysis Services, <code>server</code>.  Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Gi&#225; trị l&#244;-gic cho biết liệu c&#225;c loại được chỉ định trong m&#244; h&#236;nh dạng bảng hoặc đa chiều c&#243; được sử dụng cho c&#225;c loại cột gi&#225; trị đo đ&#227; th&#234;m hay kh&#244;ng. Khi đặt th&#224;nh false, loại &quot;số&quot; sẽ được sử dụng cho tất cả c&#225;c cột gi&#225; trị đo. Gi&#225; trị mặc định cho t&#249;y chọn n&#224;y l&#224; false.</li>\r\n<li><code>Culture</code> : T&#234;n ng&#244;n ngữ chỉ định ng&#244;n ngữ cho dữ liệu. Thuộc t&#237;nh n&#224;y tương ứng với thuộc t&#237;nh chuỗi kết nối &#39;M&#227; định danh cục bộ&#39;.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng truy vấn ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>SubQueries</code> : Số (0, 1 hoặc 2) đặt gi&#225; trị của thuộc t&#237;nh &quot;SubQueries&quot; trong chuỗi kết nối. Gi&#225; trị n&#224;y kiểm so&#225;t h&#224;nh động của c&#225;c th&#224;nh phần được t&#237;nh tr&#234;n mục chọn ri&#234;ng hoặc mục k&#253; hiệu phụ. (Gi&#225; trị mặc định l&#224; 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Khối AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Nhập/Truy vấn trực tiếp dữ liệu khối từ AtScale.",
        "Documentation.LongDescription": "\r\nTrả về dữ liệu khối từ AtScale trên máy chủ <code>máy chủ</code>. Một tham số bản ghi tùy chọn, <code>tùy chọn</code>, có thể được chỉ định để kiểm soát các tùy chọn sau:\r\n<ul>\r\n        <li><code> TypedMeasureColumns </code>: Một giá trị lô-gic cho biết loại được chỉ định trong mô hình đa chiều hoặc dạng bảng sẽ được dùng cho loại của cột đo được thêm. Khi đặt thành giả, loại \"số\" sẽ được dùng cho tất cả các cột đo. Giá trị mặc định cho tùy chọn này là giả.</li>\r\n        <li><code>CommandTimeout</code>: Một khoảng thời gian (tính bằng giây) kiểm soát thời gian truy vấn phía máy chủ được cho phép để chạy trước khi bị hủy. Giá trị mặc định tùy thuộc vào trình điều khiển. </li>\r\n        <li><code>ConnectionTimeout</code>: Một khoảng thời gian (tính bằng giây) kiểm soát thời gian chờ trước khi dừng kết nối tới máy chủ. Giá trị mặc định tùy thuộc vào trình điều khiển. </li>\r\n\r\n</ul>\r\nTham số bản ghi được chỉ định là [option1 = value1, option2 = value2...].",
        "Documentation.Examples": {
          "Description": "Danh sách dữ liệu khối trong khối AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Nhập dữ liệu từ Trình khám phá dữ liệu Azure (Kusto)",
        "Documentation.DisplayName": "Trình khám phá dữ liệu Azure (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Trình khám phá dữ liệu Azure (Kusto)",
        "Documentation.LongDescription": "Nhập dữ liệu từ Trình khám phá dữ liệu Azure (phiên bản Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Trả về bảng thông tin Sự kiện màu bụi",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Bảng chứa các Sự kiện màu bụi trong cơ sở dữ liệu \"Mẫu\" thuộc cụm \"trợ giúp\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Nhập Url cho Dịch vụ phân tích Azure DevOps của bạn.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Trả về nội dung được tải xuống từ url Dịch vụ phân tích Azure DevOps dưới dạng giá trị nhị phân. Chức năng này sử dụng thông tin xác thực khác nhau cho các tổ chức khác nhau."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Nguồn cấp dữ liệu của Dịch vụ Azure DevOps",
        "Documentation.DisplayName": "Nguồn cấp dữ liệu của Dịch vụ Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Trả về một bảng bao gồm các nguồn cấp dữ liệu OData do Azure DevOps cung cấp."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Nhập URL của điểm cuối API REST Azure Enterprise được liên kết với đăng ký của bạn",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Trả về danh sách báo cáo và tháng có sẵn từ API Azure Enterprise",
        "Documentation.Name": "Nhập dữ liệu từ Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Sử dụng hàm AzureEnterprise.Tables rồi điều hướng đến một giá trị cụ thể để có kết quả.",
            "Code": "cho phép\r\n    Nguồn = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Nội dung = Source{[Key=\"Contents\"]}[Data]\r\ntrong\r\n    Nội dung",
            "Result": "Bảng"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Xem https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli để tham khảo mẫu truy vấn cho người bắt đầu.",
        "Documentation.Examples": [
          {
            "Description": "Trả về bảng chứa kết quả truy vấn của truy vấn người dùng có tên \"resources\"",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Liệt kê các bảng trong phiên bản Azure Spark.",
        "Documentation.LongDescription": "Liệt kê các bảng trong phiên bản Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Liệt kê các bảng trong phiên bản Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Trả về một bảng có thể điều hướng chứa các bộ chứa tìm được trong tài khoản được chỉ định từ tín liệu bộ nhớ Azure.",
        "Documentation.LongDescription": "Trả về một bảng có thể điều hướng chứa một hàng cho mỗi bộ chứa tìm được tại URL tài khoản <code>account</code> từ tín liệu bộ nhớ Azure. Mỗi hàng chứa một liên kết tới các blob bộ chứa. <code>options</code> có thể được chỉ định để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>BlockSize</code> : Số byte cần đọc trước khi chờ mức sử dụng dữ liệu. Gi&#225; trị mặc định l&#224; 4 MB.</li>\r\n<li><code>RequestSize</code> : Số byte cần c&#244;́ gắng đọc trong m&#244;̣t y&#234;u c&#226;̀u HTTP đ&#234;́n máy chủ. Giá trị mặc định là 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Tùy chọn ConcurrentRequests h&#244;̃ trợ tải xu&#244;́ng dữ li&#234;̣u nhanh hơn bằng cách chỉ định s&#244;́ lượng y&#234;u c&#226;̀u c&#226;̀n thực hi&#234;̣n song song, với chi phí sử dụng b&#244;̣ nhớ. B&#244;̣ nhớ được y&#234;u c&#226;̀u là (ConcurrentRequest * RequestSize). Giá trị mặc định là 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Trả về bảng điều hướng chứa các tài liệu tìm thấy trong vùng chứa được chỉ định và những thư mục con của vùng chứa đó trên Azure Data Lake Storage.",
        "Documentation.LongDescription": "Trả về một bảng có thể điều hướng chứa các tài liệu tìm được tại bộ chứa được chỉ định và các thư mục con của bộ chứa tại URL tài khoản, <code>endpoint</code>, từ hệ thống tệp Azure Data Lake Storage. <code>options</code> có thể được chỉ định để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>BlockSize</code> : Số byte cần đọc trước khi chờ mức sử dụng dữ liệu. Gi&#225; trị mặc định l&#224; 4 MB.</li>\r\n<li><code>RequestSize</code> : Số byte cần c&#244;́ gắng đọc trong m&#244;̣t y&#234;u c&#226;̀u HTTP đ&#234;́n máy chủ. Giá trị mặc định là 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Tùy chọn ConcurrentRequests h&#244;̃ trợ tải xu&#244;́ng dữ li&#234;̣u nhanh hơn bằng cách chỉ định s&#244;́ lượng y&#234;u c&#226;̀u c&#226;̀n thực hi&#234;̣n song song, với chi phí sử dụng b&#244;̣ nhớ. B&#244;̣ nhớ được y&#234;u c&#226;̀u là (ConcurrentRequest * RequestSize). Giá trị mặc định là 16.</li>\r\n<li><code>HierarchicalNavigation</code> : L&#244;-gic (true/false) ki&#234;̉m soát li&#234;̣u các t&#234;̣p được trả v&#234;̀ ở dạng xem thư mục c&#226;y hay danh sách phẳng. Gi&#225; trị mặc định l&#224; false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Trả về một bảng điều hướng được, có chứa các bảng tìm thấy trong tài khoản được chỉ định từ tín liệu bộ nhớ Azure.",
        "Documentation.LongDescription": "Trả về bảng dẫn hướng chứa một hàng cho mỗi bảng được tìm thấy tại URL tài khoản, <code>account</code>, từ kho lưu trữ Azure. Mỗi hàng chứa một liên kết tới bảng azure. Tham số bản ghi tùy chọn, <code>options</code>, có thể được cung cấp để chỉ định thuộc tính bổ sung. Bản ghi có thể chứa các trường sau đây:\r\n    <ul>\r\n<li><code>Timeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ y&#234;u cầu với m&#225;y chủ. Gi&#225; trị mặc định tùy thuộc theo nguồn.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Thông tin chuyên sâu về chuỗi thời gian Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight trên AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Hàm này không khả dụng vì yêu cầu .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (Thừa tự)",
        "Documentation.Caption": "Common Data Service (Thừa tự)",
        "Documentation.LongDescription": "Kết nối với phiên bản Common Data Service của bạn (Dynamics 365 và PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Trả về nội dung của tài liệu CSV ở dạng bảng.",
        "Documentation.LongDescription": "Trả về nội dung của tài liệu CSV dưới dạng bảng.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> có thể rỗng, là số lượng cột, danh sách tên cột, loại bảng hoặc bản ghi tùy chọn.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> có thể là ký tự đơn, danh sách ký tự hoặc giá trị <code>\"\"</code>, cho biết các hàng nên được phân chia bằng các ký tự dấu cách liên tiếp. Mặc định: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Tham khảo <code>ExtraValues.Type</code> để biết các giá trị được hỗ trợ của <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> chỉ định loại mã hóa văn bản.\r\n      </li>\r\n    </ul>\r\n\r\n    Nếu một bản ghi được chỉ định cho <code>columns</code> (đồng thời <code>delimiter</code>, <code>extraValues</code> và <code>encoding</code> là rỗng), các trường bản ghi sau có thể được cung cấp:\r\n    <ul>\r\n      <li>\r\n        <code>Dấu phân cách</code>: Dấu phân cách cột. Mặc định: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Cột</code>: Có thể là rỗng, là số lượng cột, danh sách tên cột hoặc loại cột. Nếu số lượng cột ít hơn số lượng tìm được trong đầu vào, các cột bổ sung sẽ bị bỏ qua. Nếu số lượng cột nhiều hơn số lượng tìm được trong đầu vào, các cột bổ sung sẽ là rỗng. Khi không được chỉ định, số lượng cột sẽ được xác định bằng dữ liệu tìm được trong đầu vào.\r\n      </li>\r\n      <li>\r\n        <code>Mã hóa</code>: Mã hóa văn bản tệp. Mặc định: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Chỉ định cách xử lý trích dẫn.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (mặc định): Trích dẫn trong một trường chỉ quan trọng nếu theo ngay sau dấu phân tách.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Trích dẫn trong một trường luôn quan trọng, bất kể vị trí xuất hiện.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Chỉ định cách xử lý ngắt dòng có trích dẫn.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (mặc định): Ngắt dòng có trích dẫn được coi là một phần của dữ liệu, không phải sự kết thúc của hàng hiện tại.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Tất cả ngắt dòng được coi là sự kết thúc của hàng hiện tại, ngay cả khi ngắt bên trong giá trị có trích dẫn.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Xử lý văn bản CSV có tiêu đề cột",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Trả về bảng chứa tập hợp kích thước khả dụng.",
        "Documentation.LongDescription": "Trả về bảng chứa tập hợp kích thước khả dụng trong <code>cube</code>. Mỗi kích thước là bảng chứa tập hợp các thuộc tính kích thước và mỗi thuộc tính kích thước được thể hiện dưới dạng cột trong bảng kích thước. Có thể mở rộng kích thước trong cube bằng Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Trả về cây bảng lồng nhau thể hiện phân cấp thư mục hiển thị của đối tượng (ví dụ: kích thước và số đo).",
        "Documentation.LongDescription": "Trả về cây bảng lồng nhau thể hiện phân cấp thư mục hiển thị của đối tượng (ví dụ: kích thước và số đo) sẵn dùng trong <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Trả về một bảng có chứa tập hợp các thuộc tính giá trị đo có sẵn được mở rộng trong cube.",
        "Documentation.LongDescription": "Trả về một bảng có chứa tập hợp các thuộc tính có sẵn cho giá trị đo được mở rộng trong cube.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Trả về bảng chứa tập hợp phép đo khả dụng.",
        "Documentation.LongDescription": "Trả về một bảng có chứa tập hợp các giá trị đo có sẵn trong <code>cube</code>.\r\n    Mỗi giá trị đo được biểu diễn dưới dạng hàm. Bạn có thể áp dụng các giá trị đo cho cube bằng Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Trả về bảng chứa loạt tham số có thể được áp dụng cho khối cube.",
        "Documentation.LongDescription": "Trả về bảng chứa loạt tham số có thể được áp dụng cho <code>cube</code>. Mỗi tham số là một hàm có thể được gọi để nhận <code>cube</code> có tham số và đối số được áp dụng.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Trả về một bảng có chứa tập hợp các thuộc tính có sẵn cho kích thước được mở rộng trong cube.",
        "Documentation.LongDescription": "Trả về một bảng có chứa tập hợp các thuộc tính có sẵn cho kích thước được mở rộng trong cube.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage thế hệ 1",
        "Documentation.Description": "Nhập URL tài khoản Azure Data Lake Storage thế hệ 1 của bạn.",
        "Documentation.LongDescription": "Trả về bảng chứa một hàng của mỗi thư mục và tệp tìm thấy trên <code>URL</code> của Azure Data Lake Storage thế hệ 1. Mỗi hàng đều chứa thuộc tính của thư mục hoặc tệp cũng như đường dẫn đến nội dung của tệp hoặc thư mục đó."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage thế hệ 1",
        "Documentation.Description": "Nhập URL của tài khoản Azure Data Lake Storage của bạn.",
        "Documentation.LongDescription": "Trả về bảng chứa một hàng của mỗi tệp tìm thấy trên <code>URL</code>, của Azure Data Lake Storage thế hệ 1. Mỗi hàng đều chứa thuộc tính của tệp và liên kết tới nội dung của tệp đó."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Nhập URL của tài khoản Azure Cosmos DB.",
        "Documentation.LongDescription": "Trả về một bảng gồm các cơ sở dữ liệu Azure Cosmos DB tại <code>url</code>. Nếu <code>cơ sở dữ liệu</code> được chỉ định thì một bảng bộ sưu tập sẽ được trả về. Ngoài ra, nếu trường <code>Truy vấn</code> được chỉ định trong bản ghi<code>tùy chọn</code> thì kết quả của truy vấn được thực thi trên cơ sở dữ liệu và/hoặc bộ sưu tập đã chỉ định sẽ được trả về."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Nhập URL điểm cuối dịch vụ OData của Dynamics 365 Business Central (bản tại chỗ) của bạn.",
        "Documentation.DisplayName": "Dynamics 365 Business Central (bản tại chỗ)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (bản tại chỗ)",
        "Documentation.LongDescription": "Trả về bảng có dữ liệu liên quan về Dynamics 365 Business Central (bản tại chỗ). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Nhập URL cho điểm cuối dịch vụ OData của Dynamics NAV.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Trả về bảng chứa dữ liệu Dynamics NAV có liên quan. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Trả về các cube trong phiên bản Essbase được nhóm lại theo máy chủ Essbase.",
        "Documentation.LongDescription": "Trả về một bảng cube do máy chủ Essbase nhóm từ phiên bản Essbase tại máy chủ APS <code>url</code>. Có thể chỉ định một tham số bản ghi tùy chọn <code>options</code> để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Trả về nội dung của sổ làm việc Excel.",
        "Documentation.LongDescription": "Trả về nội dung của sổ làm việc Excel.\r\n    <ul>\r\n     <li> <code>useHeaders</code> có thể là null, giá trị lô-gic (true/false) cho biết hàng đầu tiên của mỗi bảng được trả về nên được coi là tiêu đề hay bản ghi tùy chọn. Mặc định: false.</li>\r\n     <li> <code>delayTypes</code> có thể là null hoặc giá trị lô-gic (true/false) cho biết có giữ nguyên trạng thái không phân loại của các cột thuộc mỗi bảng được trả về hay không. Mặc định: false.</li>\r\n    </ul>\r\n\r\n    Nếu bản ghi được chỉ định cho <code>useHeaders</code> (và <code>delayTypes</code> là null), các trường bản ghi sau đây có thể được cung cấp:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Có thể là null hoặc một giá trị lô-gic (true/false) cho biết hàng đầu tiên của mỗi bảng được trả về có được coi là tiêu đề không. Mặc định: false.</li>\r\n     <li> <code>DelayTypes</code>: Có thể là null hoặc giá trị lô-gic (true/false) cho biết có giữ nguyên trạng thái không phân loại của các cột thuộc mỗi bảng được trả về hay không. Mặc định: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: Có thể là null hoặc giá trị lô-gic (true/false) cho biết vùng trang tính chứa dữ liệu có được suy ra bằng cách đọc chính trang tính, thay vì đọc siêu dữ liệu chiều từ tệp hay không. Điều này có thể hữu ích trong các trường hợp siêu dữ liệu chiều không chính xác. Lưu ý rằng tùy chọn này chỉ được hỗ trợ cho các tệp Excel Open XML chứ không được hỗ trợ cho các tệp Excel cũ. Mặc định: false.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Trả về nội dung của Sheet1 từ sổ làm việc Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Trả về một bảng chứa thuộc tính và nội dung của các tệp cũng như thư mục tìm được trong thư mục được chỉ định.",
        "Documentation.LongDescription": "Trả về một bảng chứa một hàng cho mỗi thư mục và tệp tìm được trong thư mục <code>path</code>. Mỗi hàng chứa thuộc tính của thư mục hoặc tệp và một liên kết tới nội dung của thư mục/tệp đó. Tham số <code>options</code> hiện chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Trả về một bảng chứa thuộc tính và nội dung của các tệp cũng như thư mục tìm được trong thư mục và thư mục con được chỉ định.",
        "Documentation.LongDescription": "Trả về một bảng chứa một hàng cho mỗi và tệp tìm được trong thư mục <code>path</code> và tất cả thư mục con của thư mục. Mỗi hàng chứa thuộc tính của tệp và một liên kết tới nội dung của tệp đó. Tham số <code>options</code> hiện chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "BigQuery của Google (Azure AD)",
        "Documentation.Caption": "BigQuery của Google (Azure AD)",
        "Documentation.Description": "Nhập dữ liệu từ cơ sở dữ liệu BigQuery của Google bằng Azure AD",
        "Documentation.LongDescription": "\r\n      Trả về một bảng liệt kê các dự án có sẵn trong BigQuery của Google bằng Azure AD dành cho <code>ID Dự án thanh toán</code> . Tham số bản ghi tùy chọn, <code>tùy chọn</code>, có thể được chỉ định để kiểm soát các tùy chọn sau:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Khoảng thời gian kiểm soát thời gian cần đợi trước khi từ bỏ nỗ lực thực hiện kết nối với máy chủ. Giá trị mặc định là giá trị Hết thời gian chờ kết nối ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Khoảng thời gian kiểm soát thời gian được phép chạy truy vấn phía máy chủ trước khi bị hủy bỏ.</li>\r\n        <li><code>UseStorageApi</code>: Chỉ định có nên dùng API Lưu trữ BigQuery cho các tập hợp kết quả lớn hay không. Giá trị mặc định là true để dùng API Lưu trữ. Đặt thành false để không dùng API Lưu trữ</li>\r\n        <li><code>AudienceUri</code>: Đây là URI đối tượng mà trình điều khiển ODBC có thể sử dụng cho các yêu cầu trao đổi mã thông báo. Trường này phải là một URI đủ tiêu chuẩn (ví dụ: //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread) trong đó pool_id là tên duy nhất trên toàn cầu để xác định nhóm lực lượng lao động.</li>\r\n      </ul>\r\n    Tham số bản ghi được chỉ định là [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Liệt kê các dự án có sẵn trong BigQuery của Google bằng Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Trang tính",
        "Documentation.Caption": "Google Trang tính",
        "Documentation.Description": "Nhập dữ liệu từ Google Trang tính",
        "Documentation.LongDescription": "Nhập dữ liệu từ Google Trang tính"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Trả về bảng điều hướng chứa vùng chứa có trong tài khoản chỉ định từ ngăn lưu trữ Azure.",
        "Documentation.LongDescription": "Trả về bảng điều hướng chứa một hàng cho mỗi vùng chứa có trong URL của tài khoản, <code>account</code>, từ ngăn lưu trữ Azure. Mỗi hàng chứa một liên kết đến các blob của vùng chứa.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Trả về bảng điều hướng chứa các vùng chứa có trong tài khoản chỉ định từ ngăn lưu trữ Azure.",
        "Documentation.LongDescription": "Trả về bảng điều hướng chứa một hàng cho mỗi vùng chứa có trong URL của tài khoản, <code>account</code>, từ ngăn lưu trữ Azure. Mỗi hàng chứa một liên kết đến các blob của vùng chứa.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Trả về một bảng chứa thuộc tính và nội dung của các tệp cũng như thư mục tìm được trong thư mục được chỉ định từ hệ thống tệp Hadoop.",
        "Documentation.LongDescription": "Trả về một bảng chứa một hàng cho mỗi thư mục và tệp tìm được tại URL mục, <code>url</code>, từ hệ thống tệp Hadoop. Mỗi hàng chứa thuộc tính của thư mục hoặc tệp và một liên kết tới nội dung của thư mục/tệp đó.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Trả về một bảng chứa thuộc tính và nội dung của các tệp tìm được trong thư mục được chỉ định và thư mục con từ hệ thống tệp Hadoop.",
        "Documentation.LongDescription": "Trả về một bảng chứa một hàng cho mỗi thư mục và tệp tìm được tại URL mục <code>url</code>và các thư mục con từ hệ thống tệp Hadoop. Mỗi hàng chứa thuộc tính của tệp và một liên kết tới nội dung của tệp đó.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Nhập dữ liệu từ cụm Impala",
        "Documentation.LongDescription": "Nhập dữ liệu từ cụm Impala <code>server</code>. Nếu bạn chưa chỉ định cổng thì cổng mặc định 21050 sẽ được sử dụng.",
        "Documentation.Examples": [
          {
            "Description": "Liệt kê các bảng trong cụm Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Nhập dữ liệu từ Trình khám phá dữ liệu Azure (Kusto)",
        "Documentation.DisplayName": "Trình khám phá dữ liệu Azure (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Trình khám phá dữ liệu Azure (Kusto)",
        "Documentation.LongDescription": "Nhập dữ liệu từ Trình khám phá dữ liệu Azure (phiên bản Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Trả về bảng thông tin Sự kiện màu bụi",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Bảng chứa các Sự kiện màu bụi trong cơ sở dữ liệu \"Mẫu\" thuộc cụm \"trợ giúp\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Trả về bảng có chứa dữ liệu từ điểm cuối MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Thực hiện lệnh gọi đến API MailChimp và trả về tập dữ liệu kết quả dưới dạng bảng. Tự động chuyển trang qua tất cả các kết quả. Bạn có thể sử dụng tham số entityName (Tên thực thể) cho các điểm cuối API khi điểm cuối gốc và entityName (Tên thực thể) chính trong phản hồi ở định dạng JSON không khớp.",
        "Documentation.Examples": [
          {
            "Description": "Kéo bảng dữ liệu từ điểm cuối danh sách của API MailChimp.",
            "Code": "MailChimp.Collection(\"danh sách\")",
            "Result": "Bảng có chứa dữ liệu danh sách."
          },
          {
            "Description": "Kéo bảng dữ liệu từ điểm cuối chiến dịch-thư mục của API MailChimp.",
            "Code": "MailChimp.Collection(\"chiến dịch-thư mục\", \"thư mục\")",
            "Result": "Bảng có chứa dữ liệu chiến dịch-thư mục."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Trả về kết quả phản hồi thô từ điểm cuối API MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Thực hiện lệnh gọi đến API MailChimp và trả về phản hồi thô.",
        "Documentation.Examples": [
          {
            "Description": "Trả về dữ liệu thô từ điểm cuối API MailChimp về báo cáo/lần bấm-chi tiết cho một chiến dịch đã cho.",
            "Code": "MailChimp.Instance(\"báo cáo/{campaign_id}/lần bấm-chi tiết\")",
            "Result": "Dữ liệu chi tiết thô về lần bấm từ chiến dịch đã cho."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Cung cấp chức năng truy vấn nâng cao.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Cung cấp chức năng truy vấn nâng cao.",
        "Documentation.Examples": [
          {
            "Description": "Giả sử hôm nay là ngày 15 tháng 6 năm 2017, nhận dữ liệu tóm tắt từ ngày 1 tháng 5 năm 2017 đến ngày 15 tháng 6 năm 2017",
            "Code": "\r\n      giả sử    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      trong     \r\n          kết quả\r\n    ",
            "Result": "Hàm sẽ trả về dữ liệu tóm tắt từ ngày 1 tháng 5 năm 2017 đến ngày 15 tháng 6 năm 2017"
          },
          {
            "Description": "Giả sử hôm nay là ngày 15 tháng 6 năm 2017, nhận dữ liệu tóm tắt cho tháng 4 năm 2017.",
            "Code": "\r\n      giả sử    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      trong     \r\n          kết quả\r\n    ",
            "Result": "Hàm sẽ trả về dữ liệu từ ngày 1 tháng 4 năm 2017 đến ngày 30 tháng 4 năm 2017"
          },
          {
            "Description": "Giả sử hôm nay là ngày 15 tháng 6 năm 2017, nhận dữ liệu tóm tắt từ tháng 4 năm 2017 cho đến nay.",
            "Code": "\r\n      giả sử    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      trong     \r\n          kết quả\r\n    ",
            "Result": "Hàm sẽ trả về dữ liệu từ ngày 1 tháng 4 năm 2017 đến ngày 15 tháng 6 năm 2017"
          },
          {
            "Description": "Giả sử hôm nay là ngày 15 tháng 6 năm 2017, nhận dữ liệu tóm tắt từ tháng 12 trước cho đến tháng 2 này ",
            "Code": "\r\n      giả sử    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      trong     \r\n          kết quả\r\n    ",
            "Result": "Hàm sẽ trả về dữ liệu từ ngày 1 tháng 12 năm 2016 đến ngày 28 tháng 2 năm 2017"
          },
          {
            "Description": "Giả sử hôm nay là ngày 15 tháng 6 năm 2017, nhận phí Marketplace cho 18 tháng trước",
            "Code": "\r\n      giả sử    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      trong     \r\n          kết quả\r\n    ",
            "Result": "Hàm sẽ trả về dữ liệu từ 1 tháng 12 năm 2015 đến ngày 15 tháng 6 năm 2017"
          },
          {
            "Description": "Giả sử hôm nay là ngày 15 tháng 6 năm 2017, nhận phí chi tiết cho tháng 5 và tháng 6 năm 2017",
            "Code": "\r\n      giả sử    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      trong     \r\n          kết quả\r\n    ",
            "Result": "Hàm sẽ trả về dữ liệu từ ngày 1 tháng 5 năm 2017 đến ngày 15 tháng 6 năm 2017"
          },
          {
            "Description": "Giả sử hôm nay là ngày 3 tháng 7 năm 2017, nhận phí chi tiết cho tháng 7 năm 2016",
            "Code": "\r\n      giả sử  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      trong     \r\n          kết quả\r\n    ",
            "Result": "Hàm sẽ trả về dữ liệu trong khoảng từ ngày 01 tháng 07 năm 2016 đến ngày 31 tháng 7 năm 2016"
          },
          {
            "Description": "Giả sử hôm nay là ngày 13 tháng 7 năm 2017, nhận tóm tắt số dư cho 10 tháng trước cộng với 13 ngày của tháng này",
            "Code": "\r\n      giả sử  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      trong     \r\n          kết quả\r\n    ",
            "Result": "Hàm sẽ trả về dữ liệu từ ngày 1 tháng 9 năm 2016 đến ngày 13 tháng 7 năm 2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Trả về một bảng trong các bảng SQL và lượt xem từ nguồn dữ liệu ODBC. ",
        "Documentation.LongDescription": "Trả về bảng gồm các dạng xem và bảng SQL từ nguồn dữ liệu ODBC do chuỗi kết nối <code>connectionString</code> chỉ định. <code>connectionString</code> có thể là văn bản hoặc bản ghi gồm các cặp giá trị thuộc tính. Giá trị thuộc tính có thể là văn bản hoặc số. Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định l&#224; 15 gi&#226;y.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Một logic (đ&#250;ng / sai) quyết định xem c&#243; tạo c&#225;c t&#249;y chọn chuỗi kết nối tương th&#237;ch với SQL Server để x&#225;c thực Windows hay kh&#244;ng. Gi&#225; trị mặc định l&#224; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Trả về các dạng xem và bảng SQL dựa trên chuỗi kết nối được cung cấp.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Trả về bảng gồm dạng xem và bảng SQL từ nguồn dữ liệu OLE DB.",
        "Documentation.LongDescription": "Trả về một bảng gồm các dạng xem và bảng SQL từ nguồn dữ liệu OLE DB do chuỗi kết nối <code>connectionString</code> chỉ định. <code>connectionString</code> có thể là văn bản hoặc bản ghi của các cặp giá trị thuộc tính. Giá trị thuộc tính có thể là văn bản hoặc số. Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p l&#244;-gic (true/false) đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Một logic (đ&#250;ng / sai) quyết định xem c&#243; tạo c&#225;c t&#249;y chọn chuỗi kết nối tương th&#237;ch với SQL Server để x&#225;c thực Windows hay kh&#244;ng. Gi&#225; trị mặc định l&#224; true.</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...] hoặc [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Trả về một bảng chứa các bảng SQL và lượt xem từ Oracle Database.",
        "Documentation.LongDescription": "Trả về một bảng chứa dạng xem và bảng SQL từ Oracle Database trên máy chủ <code>server</code>. Cổng có thể được tùy ý chỉ định với máy chủ, được phân tách bằng dấu hai chấm. Bạn có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau đây:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...] hoặc [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Trả về bất kỳ bảng nào được tìm thấy trong tệp PDF.",
        "Documentation.LongDescription": "Trả về mọi bảng tìm thấy trong <code>pdf</code>. Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa những trường sau:\r\n    <ul>\r\n<li><code>Implementation</code> : Phi&#234;n bản thuật to&#225;n đ&#234;̉ dùng khi x&#225;c định c&#225;c bảng. C&#225;c phi&#234;n bản cũ chỉ khả dụng cho t&#237;nh tương th&#237;ch ngược, để ngăn c&#225;c truy vấn cũ bị hỏng bởi c&#225;c bản cập nhật thuật to&#225;n. Phi&#234;n bản mới nhất phải lu&#244;n mang lại kết quả tốt nhất. Gi&#225; trị hợp lệ l&#224; &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot; hoặc null.</li>\r\n<li><code>StartPage</code> : Chỉ định trang đầu ti&#234;n trong phạm vi trang cần kiểm tra. Mặc định: 1.</li>\r\n<li><code>EndPage</code> : Chỉ định trang cuối trong phạm vi trang cần kiểm tra. Mặc định: trang cuối của t&#224;i liệu.</li>\r\n<li><code>MultiPageTables</code> : Kiểm tra xem những bảng tương tự tr&#234;n c&#225;c trang li&#234;n tiếp c&#243; tự động kết hợp th&#224;nh một bảng duy nhất kh&#244;ng. Mặc định: true.</li>\r\n<li><code>EnforceBorderLines</code> : Kiểm tra xem đường viền c&#243; lu&#244;n được &#225;p dụng l&#224;m ranh giới &#244; (nếu l&#224; true) kh&#244;ng hay chỉ l&#224; một trong số nhiều gợi &#253; để x&#225;c định ranh giới &#244; (nếu l&#224; false). Mặc định: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Truy cập vào dữ liệu",
        "Documentation.Examples": [
          {
            "Description": "Trả về bảng có chứa trong sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#bảng({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Nhập URL của tài khoản Planview Projectplace của bạn.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Trả về bảng có dữ liệu Planview Projectplace có liên quan."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "(Þÿţħǿŉ §¢гίρŧ)",
        "Documentation.Description": "(Éхęċцτēѕ Рỳŧђőл ѕčřĩþτ άⁿδ ѓéťцŗņś δαŧã ƒядмє§)",
        "Documentation.Examples": {
          "Description": "(Éхęċцτēѕ Рỳŧђőл ѕčřĩþτ άⁿδ ѓéťцŗņś δαŧã ƒядмє§)",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "(Ŗ §сѓΐþţ)",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Trả về một bảng trong đó mỗi hàng là một tên trường và giá trị của bản ghi đầu vào.",
        "Documentation.LongDescription": "Trả về một bảng chứa các cột <code>Name</code> và <code>Value</code> với một hàng cho mỗi trường trong <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Tạo một bảng từ bản ghi.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Trả về gói trong cơ sở dữ liệu SAP HANA.",
        "Documentation.LongDescription": "Trả về một bảng gồm các gói đa chiều từ cơ sở dữ liệu SAP HANA <code>server</code>. Có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>Distribution</code> : SapHanaDistribution sẽ đặt gi&#225; trị của thuộc t&#237;nh &quot;Ph&#226;n phối&quot; trong chuỗi kết nối. Định tuyến c&#226;u lệnh l&#224; phương ph&#225;p đ&#225;nh gi&#225; n&#250;t m&#225;y chủ ch&#237;nh x&#225;c của hệ thống được ph&#226;n phối trước khi thực thi c&#226;u lệnh. Gi&#225; trị mặc định l&#224; SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Chỉ định triển khai tr&#236;nh nối SAP HANA để sử dụng.</li>\r\n<li><code>EnableColumnBinding</code> : Li&#234;n kết c&#225;c biến với c&#225;c cột của tập kết quả SAP HANA khi tải dữ liệu. C&#243; thể cải thiện hiệu suất với chi ph&#237; sử dụng bộ nhớ cao hơn một ch&#250;t. Gi&#225; trị mặc định l&#224; false.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định l&#224; 15 gi&#226;y.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Trả về một bảng chứa nội dung từ trang web SharePoint.",
        "Documentation.LongDescription": "Trả về một bàng có chứa hàng cho mỗi thư mục và tài liệu được tìm thấy trên trang web SharePoint được chỉ định, <code>url</code>. Mỗi hàng có chứa các thuộc tính của thư mục hoặc tệp và liên kết đến nội dung của thư mục hoặc tệp đó. Có thể chỉ định <code>options</code> để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Một số (14 hoặc 15) hoặc văn bản &quot;Auto&quot; gi&#250;p chỉ định phi&#234;n bản API SharePoint cần sử dụng cho trang web n&#224;y. Khi kh&#244;ng được chỉ định, API phi&#234;n bản 14 sẽ được sử dụng. Khi Auto được chỉ định, phi&#234;n bản m&#225;y chủ sẽ được tự động ph&#225;t hiện nếu c&#243;, nếu kh&#244;ng, phi&#234;n bản được mặc định đặt về 14. C&#225;c trang web SharePoint kh&#244;ng bằng tiếng Anh y&#234;u cầu tối thiểu l&#224; phi&#234;n bản 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Trả về một bảng chứa tài liệu từ trang web SharePoint.",
        "Documentation.LongDescription": "Trả về một bảng có chứa hàng cho mỗi tài liệu được tìm thấy trên trang web SharePoint được chỉ định, <code>url</code> và các thư mục con. Mỗi hàng có chứa các thuộc tính của thư mục hoặc tệp và liên kết đến nội dung của thư mục hoặc tệp đó. Có thể chỉ định <code>options</code> để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Một số (14 hoặc 15) hoặc văn bản &quot;Auto&quot; gi&#250;p chỉ định phi&#234;n bản API SharePoint cần sử dụng cho trang web n&#224;y. Khi kh&#244;ng được chỉ định, API phi&#234;n bản 14 sẽ được sử dụng. Khi Auto được chỉ định, phi&#234;n bản m&#225;y chủ sẽ được tự động ph&#225;t hiện nếu c&#243;, nếu kh&#244;ng, phi&#234;n bản được mặc định đặt về 14. C&#225;c trang web SharePoint kh&#244;ng bằng tiếng Anh y&#234;u cầu tối thiểu l&#224; phi&#234;n bản 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Trả về một bảng chứa nội dung từ Danh sách SharePoint.",
        "Documentation.LongDescription": "Trả về một bảng có chứa hàng cho từng mục Danh sách tìm thấy trong danh sách SharePoint được chỉ định, <code>url</code>. Mỗi hàng có chứa các thuộc tính của Danh sách. Có thể chỉ định <code>options</code> để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Một số (14 hoặc 15) hoặc văn bản &quot;Auto&quot; gi&#250;p chỉ định phi&#234;n bản API SharePoint cần sử dụng cho trang web n&#224;y. Khi kh&#244;ng được chỉ định, API phi&#234;n bản 14 sẽ được sử dụng. Khi Auto được chỉ định, phi&#234;n bản m&#225;y chủ sẽ được tự động ph&#225;t hiện nếu c&#243;, nếu kh&#244;ng, phi&#234;n bản được mặc định đặt về 14. C&#225;c trang web SharePoint kh&#244;ng bằng tiếng Anh y&#234;u cầu tối thiểu l&#224; phi&#234;n bản 15.</li>\r\n<li><code>Implementation</code> : Kh&#244;ng bắt buộc. H&#227;y chỉ định phi&#234;n bản tr&#236;nh kết nối SharePoint sẽ sử dụng. Gi&#225; trị ph&#249; hợp l&#224; &quot;2.0&quot; hoặc null. Nếu gi&#225; trị l&#224; &quot;2.0&quot;, tr&#236;nh kết nối SharePoint 2.0 sẽ được triển khai. Trong trường hợp gi&#225; trị l&#224; null, tr&#236;nh kết nối SharePoint ban đầu sẽ được triển khai.</li>\r\n<li><code>ViewMode</code> : Kh&#244;ng bắt buộc. T&#249;y chọn n&#224;y chỉ hợp lệ với quy tr&#236;nh triển khai tr&#236;nh kết nối SharePoint 2.0. Gi&#225; trị ph&#249; hợp l&#224; &quot;All&quot; v&#224; &quot;Default&quot;. Nếu bạn kh&#244;ng chỉ định, gi&#225; trị sẽ được đặt th&#224;nh &quot;All&quot;. Khi bạn chỉ định &quot;All&quot;, chế độ xem sẽ bao gồm tất cả c&#225;c cột do người d&#249;ng tạo v&#224; cột do hệ thống x&#225;c định. Nếu bạn chỉ định &quot;Default&quot;, chế độ xem sẽ khớp nội dung người d&#249;ng nh&#236;n thấy khi xem danh s&#225;ch trực tuyến ở mọi chế độ xem m&#224; người d&#249;ng đặt l&#224;m Mặc định trong phần c&#224;i đặt. Nếu người d&#249;ng chỉnh sửa chế độ xem mặc định để th&#234;m/x&#243;a cột do người d&#249;ng tạo hoặc cột do hệ thống x&#225;c định hay tạo chế độ xem mới v&#224; đặt chế độ xem đ&#243; l&#224;m mặc định, những thay đổi n&#224;y sẽ &#225;p dụng cho tr&#236;nh kết nối.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Ngăn tr&#236;nh kết nối sử dụng điểm cuối ri&#234;ng biệt cho c&#225;c cột ghi ch&#250;.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Trả về một bảng chứa nội dung tại URL đã chỉ định được định dạng theo API SODA 2.0.",
        "Documentation.LongDescription": "Trả về một bảng chứa nội dung tại URL đã chỉ định <code>url</code> được định dạng theo API SODA 2.0. URL phải trỏ tới nguồn hợp lệ tuân thủ SODA kết thúc bằng phần mở rộng .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Có thể sử dụng chức năng này để gọi bất kỳ điểm cuối \"Danh sách\" nào mà API SparkPost phiên bản 1 cung cấp. Khi thực hiện cuộc gọi tới API SparkPost bằng chức năng này, hãy nhớ rằng API SparkPost có hạn mức API nghiêm ngặt. Nếu máy chủ SparkPost đang trả về mã trạng thái 429, thì có nghĩa là bạn đã đạt đến hạn mức và sẽ phải chờ vài phút trước khi thực hiện cuộc gọi khác.",
        "Documentation.Examples": [
          {
            "Description": "Trả về bảng có duy nhất một cột đã điền sẵn dữ liệu từ một trong các điểm cuối \"Danh sách\" của API SparkPost phiên bản 1 (xem tài liệu về SparkPost để biết thông tin chi tiết).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Truy xuất các bảng mà trình kết nối SparkPost cung cấp, được điền sẵn dữ liệu tổng hợp trong số ngày do người dùng chỉ định. Khi làm mới các bảng hoặc thực hiện cuộc gọi tới API SparkPost bằng trình kết nối này, hãy nhớ rằng API SparkPost có hạn mức API nghiêm ngặt. Nếu máy chủ SparkPost đang trả về mã trạng thái 429, thì có nghĩa là bạn đã đạt đến hạn mức và sẽ phải chờ vài phút trước khi thực hiện cuộc gọi khác. Khi lựa chọn giá trị cho tham số Số ngày, lưu ý rằng API chỉ lưu trữ dữ liệu trong vòng 6 tháng."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Trả về một bảng bao gồm các cơ sở dữ liệu trên một SQL Server.",
        "Documentation.LongDescription": "Trả về một bảng chứa các cơ sở dữ liệu trên máy chủ SQL đã chỉ định, <code>server</code>. Bạn có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau đây:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Số đặt gi&#225; trị của mệnh đề truy vấn &quot;maxdop&quot; trong truy vấn SQL đ&#227; tạo.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n<li><code>MultiSubnetFailover</code> : Một ph&#233;p (true/false) logic đặt gi&#225; trị của thuộc t&#237;nh &quot;MultiSubnetFailover&quot; trong chuỗi kết nối (mặc định l&#224; false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Giá trị l&#244;-gic (true/false) trong đó nếu true, thao tác n&#233;n các chuyển đổi loại c&#243; thể kh&#244;ng th&#224;nh c&#244;ng v&#224; khiến to&#224;n bộ truy vấn kh&#244;ng th&#224;nh c&#244;ng. Kh&#244;ng n&#234;n d&#249;ng cho mục đích sử dụng chung.</li>\r\n<li><code>ContextInfo</code> : Gi&#225; trị nhị ph&#226;n được sử dụng để đặt CONTEXT_INFO trước khi chạy từng lệnh.</li>\r\n<li><code>OmitSRID</code> : Giá trị l&#244;-gic (true/false) trong đó nếu true thì sẽ bỏ SRID khi tạo Văn bản quen thu&#244;̣c từ các loại hình học và địa lý.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Một gi&#225; trị l&#244;gic (true/false) m&#224;, nếu l&#224; true, cho ph&#233;p n&#233;n truy vấn cơ sở dữ liệu ch&#233;o tr&#234;n c&#249;ng một m&#225;y chủ. Gi&#225; trị mặc định l&#224; false.</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...].\r\n    <br>\r\n    Không hỗ trợ đặt truy vấn SQL cần chạy trên máy chủ. Thay vào đó, nên sử dụng <code>Sql.Database</code> để chạy truy vấn SQL.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Gọi tới API Stripe, với tùy chọn giới hạn số lệnh gọi API được thực hiện.",
        "Documentation.LongDescription": "Gọi tới API Stripe tại https://api.stripe.com/v1/<code>method</code>, với bản ghi tùy chọn <code>query</code> được chấp nhận làm tham số bổ sung và <code>pageLimit</code> tùy chọn làm giới hạn về số lượng yêu cầu API. Các dữ liệu mới nhất được trả về trước. Nếu <code>pageLimit</code> không được chỉ định, tất cả dữ liệu sẽ được trả về. Stripe Phiên bản 2015-10-16 được sử dụng.",
        "Documentation.Examples": [
          {
            "Description": "Trả về tất cả dữ liệu phí",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Một bảng có tất cả dữ liệu phí cho tài khoản Stripe hiện tại"
          },
          {
            "Description": "Trả về một trang dữ liệu phí",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Một bảng có dữ liệu phí mới nhất cho tài khoản Stripe hiện tại"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Tải một bảng trong bộ nhớ, cô lập bảng đó khỏi các thay đổi bên ngoài trong quá trình đánh giá.",
        "Documentation.LongDescription": "Ghi bảng vào bộ đệm trong bộ nhớ để khi đánh giá, các thay đổi bên ngoài không ảnh hưởng đến bảng này.\r\n    Việc ghi vào bộ đệm không gây ra ảnh hưởng sâu rộng. Thao tác này đòi hỏi phải đánh giá mọi giá trị của ô vô hướng nhưng để nguyên giá trị có hướng (hàng, danh sách, bảng, v.v.).\r\n    <br>\r\n    <br>\r\n    Lưu ý rằng hàm này đôi khi có thể làm cho truy vấn của bạn chạy nhanh hơn hoặc không. Trong một số trường hợp, hàm này làm cho truy vấn của bạn chạy chậm hơn do phải sử dụng thêm \r\n    để đọc và lưu trữ tất cả dữ liệu vào bộ nhớ, cũng như do việc ghi vào bộ đệm làm cản trở hoạt động nén xuôi dòng. Nếu không cần ghi\r\n    dữ liệu vào bộ đệm nhưng bạn chỉ muốn ngăn hoạt động nén xuôi dòng, hay sử dụng <code>Table.StopFolding</code> thay vào đó.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Tải tất cả hàng trong bảng SQL vào bộ nhớ để các hoạt động xuôi dòng không thể truy vấn SQL Server được nữa.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Trả về một bảng là kết quả hợp nhất một danh sách các bảng.",
        "Documentation.LongDescription": "Trả về một bảng là kết quả hợp nhất một danh sách các bảng, <code>tables</code>. Bảng kết quả sẽ có cấu trúc loại hàng được xác định bởi <code>columns</code> hoặc tập hợp các loại đầu vào nếu <code>columns</code> không được chỉ định.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Hợp nhất ba bảng với nhau.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Hợp nhất ba bảng có cấu trúc khác nhau.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Hợp nhất hai bảng và tham chiếu đến loại đã cho.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Giáng cấp các tiêu đề cột thành hàng giá trị đầu tiên.",
        "Documentation.LongDescription": "Giáng cấp các tiêu đề cột (tức là tên cột) thành hàng giá trị đầu tiên. Tên cột mặc định là \"Column1\", \"Column2\", v.v.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Giáng cấp hàng giá trị đầu tiên trong bảng.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Loại bỏ hàng trùng lặp khỏi bảng.",
        "Documentation.LongDescription": "Loại bỏ hàng trùng lặp khỏi bảng.\r\n    Tham số tùy chọn, <code>equationCriteria</code>, chỉ định những cột của bảng được kiểm tra trùng lặp. Nếu <code>equationCriteria</code> không được chỉ định, tất cả các cột sẽ được kiểm tra.<br>\r\n    <br>\r\n    Vì Power Query đôi khi giảm tải một số thao tác sang nguồn dữ liệu phụ trợ (còn gọi là \"nén\") và đôi khi tối ưu hóa các truy vấn bằng cách \r\n bỏ qua các thao tác không thực sự cần thiết. Nhìn chung, không đảm bảo loại trùng lặp cụ thể nào sẽ được giữ lại.\r\n    Ví dụ, bạn không thể giả định rằng hàng đầu tiên với tập giá trị cột duy nhất sẽ được giữ lại và các hàng bên dưới trong bảng sẽ bị xóa đi.\r\n    Nếu muốn xóa trùng lặp để có kết quả theo dự đoán, đầu tiên, bạn cần tạo bộ đệm cho bảng bằng cách sử dụng <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ hàng trùng lặp khỏi bảng.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Loại bỏ hàng trùng lặp khỏi cột [b] trong bảng <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Tạo một bảng từ danh sách cột và giá trị được chỉ định.",
        "Documentation.LongDescription": "Tạo một bảng thuộc loại <code>columns</code> từ danh sách <code>lists</code> chứa các danh sách lồng nhau với các tên cột và giá trị.\r\n    Nếu một số cột có nhiều giá trị hơn các cột khác thì giá trị bị thiếu sẽ được điền bằng giá trị mặc định là 'giá trị null' nếu các cột có thể có giá trị rỗng.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Trả về một bảng từ danh sách tên khách hàng trong một danh sách. Mỗi giá trị trong mục danh sách khách hàng trở thành một giá trị hàng và mỗi danh sách trở thành một cột.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Tạo một bảng từ danh sách cột cho sẵn và danh sách tên cột.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Tạo một bảng với số cột mỗi hàng khác nhau. Giá trị hàng bị thiếu là null.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Chuyển đổi một danh sách thành một bảng bằng cách áp dụng hàm tách được chỉ định cho mỗi mục trong danh sách.",
        "Documentation.LongDescription": "Chuyển đổi danh sách <code>list</code> thành một bảng bằng cách áp dụng hàm tách tùy chọn <code>splitter</code> cho mỗi mục trong danh sách. Theo mặc định, danh sách được giả định là danh sách giá trị văn bản được tách bằng dấu phẩy. <code>columns</code> tùy chọn có thể là số lượng cột, danh sách cột hoặc TableType. <code>default</code> và <code>extraValues</code> tùy chọn cũng có thể được chỉ định.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Tạo bảng từ danh sách bằng trình phân tách mặc định.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Tạo bảng từ danh sách bằng trình phân tách tùy chỉnh.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Tạo bảng từ danh sách bằng trình phân tách Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Chuyển đổi một danh sách bản ghi thành một bảng.",
        "Documentation.LongDescription": "Chuyển đổi <code>records</code>, một danh sách bản ghi, thành một bảng.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Tạo bảng từ bản ghi, sử dụng các tên trường bản ghi làm tên cột.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Tạo bảng từ bản ghi bằng các cột được nhập và chọt cột số.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Tạo bảng từ danh sách giá trị hàng và cột tùy chọn",
        "Documentation.LongDescription": "Tạo bảng từ danh sách <code>rows</code>, trong đó mỗi thành phần của danh sách là một danh sách bên trong có chứa giá trị cột của một hàng. Danh sách tùy chọn tên cột, loại bảng hoặc số cột có thể được cung cấp cho <code>columns</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Trả về một bảng với cột [CustomerID] có các giá trị {1, 2}, cộ [Name] có các giá trị {\"Bob\", \"Jim\"} và cột [Phone] có các giá trị {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Trả về một bảng với cột [CustomerID] có các giá trị {1, 2}, cột [Name] có các giá trị {\"Bob\", \"Jim\"} và cột [Phone] có các giá trị {\"123-4567\", \"987-6543\"} trong đó [CustomerID] là loại số còn [Name] và [Phone] là loại văn bản.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Tạo một bảng với một cột từ (các) giá trị cho sẵn.",
        "Documentation.LongDescription": "Tạo bảng có cột chứa giá trị hoặc danh sách giá trị đã cung cấp, <code>value</code>. Tham số bản ghi tùy chọn, <code>options</code>, có thể được chỉ định để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : Tên cột được sử dụng khi xây dựng bảng từ một giá trị danh sách hoặc giá trị vô hướng.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Tạo một bảng từ giá trị 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Tạo một bảng từ danh sách.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Tạo bảng từ giá trị 1, có tên cột tùy chỉnh.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Trả về thông tin về cách phân hoạch bảng.",
        "Documentation.LongDescription": "Trả về thông tin về cách phân hoạch bảng.  Một bảng được trả về trong đó mỗi cột là một cột phân hoạch trong bảng gốc và mỗi hàng tương ứng với một phân hoạch trong bảng gốc.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Trả về một hồ sơ gồm các cột trong một bảng.",
        "Documentation.LongDescription": "<p>Trả về một hồ sơ cho các cột trong <code>table</code>.</p>\r\n<p>Thông tin sau được trả về cho mỗi cột (nếu có):\r\n<ul>\r\n  <li>tối thiểu</li>\r\n  <li>tối đa</li>\r\n  <li>trung bình</li>\r\n  <li>độ lệch chuẩn</li>\r\n  <li>số lượng</li>\r\n  <li>số lượng rỗng</li>\r\n  <li>số lượng phân biệt</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Tăng cấp hàng giá trị đầu tiên làm các tiêu đề cột mới (nghĩa là tên cột).",
        "Documentation.LongDescription": "Tăng cấp hàng giá trị đầu tiên làm các tiêu đề cột mới (tức là tên cột). Theo mặc định, chỉ những giá trị là văn bản hoặc số mới được tăng cấp lên tiêu đề. Tùy chọn hợp lệ:\r\n    <div>\r\n      <code>PromoteAllScalars</code> : Nếu được đặt thành <code>true</code>, tất cả các giá trị vô hướng trong hàng đầu tiên sẽ được tăng cấp lên tiêu đề bằng cách sử dụng <code>Culture</code>, nếu được chỉ định (hoặc ngôn ngữ tài liệu hiện tại).\r\n    Đối với các giá trị không được chuyển thành văn bản, tên cột mặc định sẽ được sử dụng.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code> : Tên ngôn ngữ chỉ định ngôn ngữ cho dữ liệu đó.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tăng cấp hàng giá trị đầu tiên trong bảng.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Tăng cấp tất cả các giá trị vô hướng trong hàng đầu tiên của bảng lên tiêu đề.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Trả về một bảng chứa các hàng đếm đầu tiên bị bỏ qua.",
        "Documentation.LongDescription": "Trả về một bảng không chứa số lượng hàng được chỉ định đầu tiên <code>countOrCondition</code> của bảng <code>table</code>.\r\n    Số lượng hàng bị loại bỏ tùy theo tham số tùy chọn <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Nếu <code>countOrCondition</code> bị bỏ qua thì chỉ hàng đầu tiên bị loại bỏ. </li>\r\n    <li> Nếu <code>countOrCondition</code> là một số thì nhiều hàng (bắt đầu từ trên cùng) sẽ bị loại bỏ. </li>\r\n    <li> Nếu <code>countOrCondition</code> là một điều kiện thì các hàng đáp ứng điều kiện này sẽ bị loại bỏ cho đến khi một hàng không đáp ứng điều kiện.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ hàng đầu tiên của bảng.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Loại bỏ hai hàng đầu tiên của bảng.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Loại bỏ các hàng đầu tiên trong đó [CustomerID] <=2 của bảng.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Trả về một bảng có N hàng cuối cùng bị loại bỏ.",
        "Documentation.LongDescription": "Trả về một bảng không chứa <code>countOrCondition</code> hàng cuối cùng của bảng <code>table</code>.\r\n        Số lượng hàng bị loại bỏ tùy theo tham số tùy chọn <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Nếu <code>countOrCondition</code> bị bỏ qua thì chỉ hàng cuối cùng bị loại bỏ. </li>\r\n    <li> Nếu <code>countOrCondition</code> là một số thì nhiều hàng (bắt đầu từ cuối) sẽ bị loại bỏ. </li>\r\n    <li> Nếu <code>countOrCondition</code> là một điều kiện thì các hàng đáp ứng điều kiện này sẽ bị loại bỏ cho đến khi một hàng không đáp ứng điều kiện.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Xóa hàng cuối cùng của bảng.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Loại bỏ các hàng cuối cùng trong đó [CustomerID] > 2 của bảng.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Trả về một bảng có các hàng bị lỗi ít nhất một ô bị loại bỏ khỏi bảng đầu vào. Nếu chỉ định danh sách cột thì chỉ các ô trong cột được chỉ định được kiểm tra lỗi.",
        "Documentation.LongDescription": "Trả về một bảng có các hàng bị lỗi ít nhất một ô bị loại bỏ khỏi bảng đầu vào. Nếu chỉ định danh sách cột thì chỉ các ô trong cột được chỉ định được kiểm tra lỗi.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Xóa giá trị lỗi từ hàng đầu tiên.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Trả về một bảng có các hàng theo thứ tự đảo ngược.",
        "Documentation.LongDescription": "Trả về một bảng có các hàng từ đầu vào <code>table</code> theo thứ tự đảo ngược.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Đảo ngược các hàng trong bảng.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Trả về một bảng chứa mô tả về cột (tức là giản đồ) của bảng được chỉ định.",
        "Documentation.LongDescription": "<p>Trả về bảng mô tả các cột của <code>table</code>.</p>\r\n<p>Mỗi hàng trong bảng mô tả các thuộc tính của cột trong <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Tên cột</b></td>\r\n    <td><b>Mô tả</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Tên</code></td>\r\n    <td>Tên cột.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Vị trí</code></td>\r\n    <td>Vị trí dựa trên 0 của cột trong <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Tên loại cột.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kiểu</code></td>\r\n    <td>Kiểu của loại cột.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Liệu cột có thể chứa giá trị <code>null</code> hay không.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Cơ sở số (ví dụ: dựa trên 2 hoặc 10) của các trường <code>NumericPrecision</code> và <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Độ chính xác của cột số trong cơ sở được chỉ định bởi <code>NumericPrecisionBase</code>. Đây là số lượng chữ số tối đa có thể được thể hiện bằng một giá trị của loại này (bao gồm các chữ số phân số).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Quy mô của cột số trong cơ sở được chỉ định bởi <code>NumericPrecisionBase</code>. Đây là số lượng chữ số trong phần phân số của giá trị của loại này. Giá trị <code>0</code> thể hiện quy mô cố định mà không có chữ số phân số. Giá trị <code>null</code> thể hiện quy mô không xác định (do nổi hoặc không xác định).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Số lượng chữ số phân số tối đa trong phần giây của giá trị ngày và thời gian.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Số lượng ký tự tối đa được phép trong một cột <code>văn bản</code> hoặc số lượng byte được phép trong một cột <code>nhị phân</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Cho biết liệu cột này có thể thay đổi độ dài (tối đa <code>MaxLength</code>) hoặc có kích thước cố định.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Tên của loại cột trong hệ thống loại gốc của nguồn (ví dụ: <code>nvarchar</code> của SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Biểu thức mặc định của một giá trị trong cột này theo ngôn ngữ biểu thức gốc của nguồn (ví dụ: <code>42</code> hoặc <code>newid()</code> của SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Mô tả</code></td>\r\n    <td>Mô tả cột.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Trả về một bảng chỉ có các hàng bị lỗi ít nhất một ô bị của bảng đầu vào. Nếu chỉ định danh sách cột thì chỉ các ô trong cột được chỉ định được kiểm tra lỗi.",
        "Documentation.LongDescription": "Trả về một bảng chỉ có các hàng bị lỗi ít nhất một ô bị của bảng đầu vào. Nếu chỉ định danh sách cột thì chỉ các ô trong cột được chỉ định được kiểm tra lỗi.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Chọn tên của khách hàng có lỗi trong hàng.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Trả về một bảng chứa các hàng đếm đầu tiên bị bỏ qua.",
        "Documentation.LongDescription": "Trả về một bảng không chứa số lượng hàng được chỉ định đầu tiên <code>countOrCondition</code> của bảng <code>table</code>.\r\n    Số lượng hàng bị bỏ qua tùy theo tham số tùy chọn <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Nếu <code>countOrCondition</code> bị bỏ qua thì chỉ hàng đầu tiên bị bỏ qua. </li>\r\n    <li> Nếu <code>countOrCondition</code> là một số thì nhiều hàng (bắt đầu ở trên cùng) sẽ được bỏ qua. </li>\r\n    <li> Nếu <code>countOrCondition</code> là một điều kiện thì các hàng đáp ứng điều kiện này sẽ được bỏ qua cho đến khi một hàng không đáp ứng điều kiện.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Bỏ qua hàng đầu tiên của bảng.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Bỏ qua hai hàng đầu tiên của bảng.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Bỏ qua các hàng đầu tiên trong đó [Price] > 25 của bảng.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Ngăn mọi thao tác xuôi dòng chạy dựa trên nguồn dữ liệu gốc.",
        "Documentation.LongDescription": "Ngăn mọi thao tác xuôi dòng chạy dựa trên nguồn dữ liệu gốc trong <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Tải dữ liệu từ bảng SQL theo cách ngăn không mọi thao tác xuôi dòng chạy dưới dạng truy vấn trên SQL server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Chuyển đổi cột thành hàng và hàng thành cột.",
        "Documentation.LongDescription": "Chuyển đổi cột thành hàng và hàng thành cột.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi hàng của bảng chứa các cặp tên-giá trị thành cột.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Nhận mối quan hệ giữa một tập hợp bảng.",
        "Documentation.LongDescription": "Nhận mối quan hệ giữa một tập hợp bảng. Tập hợp <code>tables</code> được giả định để có một cấu trúc giống với cấu trúc của một bảng điều hướng. Cột do <code>dataColumn</code> xác định có chứa các bảng dữ liệu thực.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Trả về một bảng chứa các bảng SQL và lượt xem từ cơ sở dữ liệu Teradata.",
        "Documentation.LongDescription": "Trả về một bảng chứa dạng xem và bảng SQL từ cơ sở dữ liệu Teradata trên máy chủ <code>server</code>. Cổng có thể được tùy ý chỉ định với máy chủ, được phân tách bằng dấu hai chấm. Bạn có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát cac tùy chọn sau đây:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...] hoặc [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Thông tin chuyên sâu về chuỗi thời gian Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Nhập số tháng của dữ liệu Twilio trước đây để truy xuất.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Trả về bảng có dữ liệu Twilio liên quan."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Trả về một bảng chứa mô tả về các cột (tức là sơ đồ) của loại bảng được chỉ định.",
        "Documentation.LongDescription": "<p>Trả về bảng mô tả các cột của <code>tableType</code>.</p>\r\n<p>Tham khảo tài liệu về <code>Table.Schema</code> để biết mô tả về bảng kết quả.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Nguồn cấp dữ liệu của Dịch vụ Azure DevOps",
        "Documentation.DisplayName": "Nguồn cấp dữ liệu của Dịch vụ Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Trả về một bảng bao gồm các nguồn cấp dữ liệu OData do Azure DevOps cung cấp."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Kết nối với dữ liệu Viva Insights",
        "Documentation.LongDescription": "Nhập số liệu hàng tuần và dữ liệu thuộc tính từ Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Trả về một bảng chứa các thuộc tính thấy được và số liệu hàng tuần cho từng nhân viên được theo dõi số liệu trong phân vùng.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Trả về nội dung của tài liệu HTML được phân chia thành các cấu trúc hợp thành cũng như biểu diễn của toàn bộ tài liệu và văn bản của tài liệu đó sau khi loại bỏ thẻ.",
        "Documentation.LongDescription": "Trả về nội dung của tài liệu HTML được phân chia thành các cấu trúc hợp thành cũng như biểu diễn của toàn bộ tài liệu và văn bản của tài liệu đó sau khi loại bỏ thẻ.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Trả về bảng bao gồm số liệu Webtrends chính.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Gọi đến điểm cuối Webtrends KeyMetrics và trả về tất cả dữ liệu dưới dạng bảng.",
        "Documentation.Examples": [
          {
            "Description": "Gọi ra bảng bao gồm các số liệu chính cho bên thuê 98765 trong 30 ngày vừa qua",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Bảng bao gồm các số liệu chính"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Nhập ID Hồ sơ được liên kết với tài khoản Webtrends của bạn.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Trả về bảng bao gồm dữ liệu Webtrends có liên quan."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Kết nối với dữ liệu Viva Insights",
        "Documentation.LongDescription": "Nhập số liệu hàng tuần và dữ liệu thuộc tính từ Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Trả về một bảng chứa các thuộc tính thấy được và số liệu hàng tuần cho từng nhân viên được theo dõi số liệu trong phân vùng.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Trả về nội dung của tài liệu XML ở dạng bảng phân cấp.",
        "Documentation.LongDescription": "Trả về nội dung của tài liệu XML ở dạng bảng phân cấp.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Trả về nội dung của tài liệu XML ở dạng một tập hợp lồng nhau của các bảng được làm phẳng.",
        "Documentation.LongDescription": "Trả về nội dung của tài liệu XML ở dạng một tập hợp lồng nhau của các bảng được làm phẳng.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Truy xuất nội dung của tệp xml cục bộ.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Nhập URL của tài khoản Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Trả về bảng có dữ liệu Zendesk có liên quan."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Trả về bộ sưu tập sơ đồ cho nguồn dữ liệu ADO.NET.",
        "Documentation.LongDescription": "Trả về bộ sưu tập sơ đồ cho nguồn dữ liệu ADO.NET với tên nhà cung cấp là <code>providerName</code> và chuỗi kết nối là <code>connectionString</code>. <code>connectionString</code> có thể là văn bản hoặc bản ghi bao gồm các cặp giá trị thuộc tính. Giá trị thuộc tính có thể là văn bản hoặc số. Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Một logic (đ&#250;ng / sai) quyết định xem c&#243; tạo c&#225;c t&#249;y chọn chuỗi kết nối tương th&#237;ch với SQL Server để x&#225;c thực Windows hay kh&#244;ng. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Nhập dữ liệu từ cơ sở dữ liệu của Amazon Redshift.",
        "Documentation.LongDescription": "Trả về bảng liệt kê các bảng trên mạng nhóm Amazon Redshift <code>máy chủ</code> trong cơ sở dữ liệu <code>cơ sở dữ liệu</code>. Một tham số dưới dạng bản ghi tùy chọn, <code>tùy chọn</code> có thể sẽ được chỉ định cụ thể để kiểm soát các tùy chọn sau:\r\n<ul>\r\n<li><code>Tên nhà cung cấp</code>: Một giá trị dưới dạng văn bản được sử dụng làm Tên nhà cung cấp cho kết nối. Giá trị này được sử dụng khi dùng Microsoft Authentication.</li>\r\n<li><code>Kích thước lô</code>: Số hàng được tải trong một cuộc gọi đến máy chủ.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Trả lại một bảng có cue đa chiều từ cơ sở dữ liệu Analysis Services.",
        "Documentation.LongDescription": "Trả về một bảng gồm các khối đa chiều hoặc mô hình dạng bảng từ cơ sở dữ liệu Analysis Services <code>database</code> trên máy chủ <code>server</code>. Có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn MDX gốc để truy xuất dữ liệu.</li>\r\n<li><code>TypedMeasureColumns</code> : Gi&#225; trị l&#244;-gic cho biết liệu c&#225;c loại được chỉ định trong m&#244; h&#236;nh dạng bảng hoặc đa chiều c&#243; được sử dụng cho c&#225;c loại cột gi&#225; trị đo đ&#227; th&#234;m hay kh&#244;ng. Khi đặt th&#224;nh false, loại &quot;số&quot; sẽ được sử dụng cho tất cả c&#225;c cột gi&#225; trị đo. Gi&#225; trị mặc định cho t&#249;y chọn n&#224;y l&#224; false.</li>\r\n<li><code>Culture</code> : T&#234;n ng&#244;n ngữ chỉ định ng&#244;n ngữ cho dữ liệu. Thuộc t&#237;nh n&#224;y tương ứng với thuộc t&#237;nh chuỗi kết nối &#39;M&#227; định danh cục bộ&#39;.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng truy vấn ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>SubQueries</code> : Số (0, 1 hoặc 2) đặt gi&#225; trị của thuộc t&#237;nh &quot;SubQueries&quot; trong chuỗi kết nối. Gi&#225; trị n&#224;y kiểm so&#225;t h&#224;nh động của c&#225;c th&#224;nh phần được t&#237;nh tr&#234;n mục chọn ri&#234;ng hoặc mục k&#253; hiệu phụ. (Gi&#225; trị mặc định l&#224; 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Trả lại một bảng liên kế các bảng trên cụm Spark được chỉ định.",
        "Documentation.LongDescription": "Trả lại một bảng liên kế các bảng trên cụm Spark <code>host</code> using <code>protocol</code>.  Các giao thức hợp lệ là:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Trả lại một bảng liên kế các bảng trên cụm Spark được chỉ định.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Nhập tên dự án và tổ chức.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Máy chủ Azure DevOps (Chỉ bảng)",
        "Documentation.LongDescription": "Trả về bảng dạng xem Phân tích do Azure DevOps cung cấp."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Nhập dữ liệu từ HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nTrả về danh sách máy tính bảng từ HDInsight Interactive Query theo<code>cơ sở dữ liệu</code> trên <code>máy chủ</code> HDInsight Interactive Query. Số cổng có thể được chỉ định tùy chọn với máy chủ, được phân tách bằng dấu hai chấm. Thông số tùy chọn của <code>tùy chọn</code> có thể được chỉ định để kiểm soát các tùy chọn sau đây:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Thời lượng kiểm soát khoảng thời gian chờ trước khi dừng kết nối với máy chủ. Giá trị mặc định phụ thuộc vào trình điều khiển.</li>\r\n        <li><code>CommandTimeout</code>: Thời lượng kiểm soát khoảng thời gian truy vấn phía máy chủ được phép chạy trước khi bị hủy. Giá trị mặc định phụ thuộc vào trình điều khiển.</li>\r\n</ul>\r\nnTham số <code>tùy chọn</code> được chỉ định dưới dạng [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Trả về một bảng có các cột được ánh xạ tới các thuộc tính của một thực thể trong Common Data Model, bao gồm các loại dữ liệu.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Trả về một bảng có các cột được ánh xạ tới các thuộc tính của một thực thể trong Common Data Model, bao gồm các loại dữ liệu. Các cột từ định nghĩa thực thể sẽ được thêm nếu không được ánh xạ và mọi cột chưa được ánh xạ sẽ bị loại bỏ.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Trả về khối cube sau khi áp dụng tham số.",
        "Documentation.LongDescription": "Trả về khối cube sau khi áp dụng <code>parameter</code> với <code>arguments</code> cho <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Thay đổi chi tiết kích thước của ngữ cảnh bộ lọc cho cube bằng cách thu hẹp thuộc tính được ánh xạ cho các cột được chỉ định.",
        "Documentation.LongDescription": "Thay đổi chi tiết kích thước của ngữ cảnh bộ lọc cho <code>cube</code> bằng cách thu hẹp thuộc tính được ánh xạ cho các cột được chỉ định <code>columnNames</code>. Cột cũng bị xóa khỏi chế độ xem dạng bảng của cube.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Thay thế tập hợp các chiều mà Cube.Dimensions trả về.",
        "Documentation.LongDescription": "Thay thế tập hợp các chiều mà <code>Cube.Dimensions</code> trả về.\r\n    Ví dụ: bạn có thể dùng hàm này để thêm cột ID cho thuộc tính chiều. Như vậy, nguồn dữ liệu có thể nhóm dựa trên ID thay vì giá trị hiển thị.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Áp dụng danh sách các hàm cube.",
        "Documentation.LongDescription": "Áp dụng danh sách các hàm cube, <code>transforms</code>, trên <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Trả về một bảng chứa các dạng xem và bảng SQL có trong cơ sở dữ liệu Db2.",
        "Documentation.LongDescription": "Trả về một bảng chứa các dạng xem và bảng SQL có trong cơ sở dữ liệu Db2 trên máy chủ <code>server</code> trong phiên bản cơ sở dữ liệu có tên là <code>database</code>. Có thể sử dụng máy chủ để chỉ định cổng và phân tách bằng dấu hai chấm. Bạn có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau đây:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n<li><code>Implementation</code> : Chỉ định triển khai nh&#224; cung cấp cơ sở dữ liệu nội bộ cần sử dụng. Gi&#225; trị hợp lệ l&#224;: &quot;IBM&quot; v&#224; &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Số CCSID (M&#227; định danh bộ k&#253; tự m&#227; h&#243;a) để giải m&#227; dữ liệu nhị ph&#226;n Db2 FOR BIT th&#224;nh c&#225;c chuỗi k&#253; tự. &#193;p dụng cho Implementation = “Microsoft”. Đặt 0 để tắt t&#237;nh năng chuyển đổi (mặc định). Đặt 1 để chuyển đổi dựa tr&#234;n m&#227; h&#243;a cơ sở dữ liệu. Đặt số CCSID kh&#225;c để chuyển đổi th&#224;nh m&#227; h&#243;a ứng dụng.</li>\r\n<li><code>PackageCollection</code> : Chỉ định gi&#225; trị chuỗi cho bộ sưu tập g&#243;i (mặc định l&#224; &quot;NULLID&quot;) để cho ph&#233;p sử dụng g&#243;i được chia sẻ cần thiết nhằm xử l&#253; c&#226;u lệnh SQL. &#193;p dụng cho Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Chỉ định xem c&#243; thực hiện kết nối qua cổng kết nối Db2 Connect kh&#244;ng. &#193;p dụng cho Triển khai = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Chẳng hạn, chỉ định tham số bản ghi là [option1 = value1, option2 = value2...] hoặc [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Truy xuất tập dữ liệu từ Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Trả về một bảng chứa thuộc tính và nội dung của các blob có trong vùng chứa chỉ định từ ngăn lưu trữ Azure.",
        "Documentation.LongDescription": "Trả về một bảng chứa một hàng cho mỗi tệp blob có trong URL của vùng chứa, <code>account</code>, từ ngăn lưu trữ Azure. Mỗi hàng chứa thuộc tính của tệp và liên kết đến nội dung của tệp đó.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Trả về một bảng chứa kết quả chạy bộ chọn CSS được chỉ định dựa trên HTML được cung cấp.",
        "Documentation.LongDescription": "Trả về bảng có chứa các kết quả chạy bộ chọn CSS đã chỉ định so với <code>html</code> đã cho. Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau đây:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Đang truy cập vào dữ liệu",
        "Documentation.Examples": [
          {
            "Description": "Trả về một bảng từ giá trị văn bản html mẫu.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Trình quản lý</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#bảng({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Trích xuất tất cả hrefs từ giá trị văn bản html mẫu.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Kiểm tra</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Trả về bảng chứa các bảng SQL và các dạng xem có trong cơ sở dữ liệu Informix.",
        "Documentation.LongDescription": "Trả về một bảng chứa dạng xem và bảng SQL có trong cơ sở dữ liệu Informix trên máy chủ <code>server</code> trong phiên bản cơ sở dữ liệu có tên là <code>database</code>. Cổng có thể được tùy ý chỉ định với máy chủ, được phân tách bằng dấu hai chấm. Bạn có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau đây:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...] hoặc [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Trả về bảng có chi tiết về khách hàng tiềm năng.",
        "Documentation.LongDescription": "Gọi tới điểm cuối API Marketo REST tại <code>url</code>/rest/v1/leads.json. Tất cả khách hàng tiềm năng trong danh sách kể từ khi trả về <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Kéo chi tiết về ba khách hàng tiềm năng",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Một bảng có chi tiết về khách hàng tiềm năng đã cung cấp"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Nhập URL của điểm cuối API REST Marketo được liên kết với tài khoản của bạn.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Trả về bảng có dữ liệu Marketo liên quan."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Trả về một bảng chứa các bảng SQL, lượt xem và các hàm vô hướng được lưu trữ có trong cơ sở dữ liệu MySQL.",
        "Documentation.LongDescription": "Trả về một bảng chứa dạng xem, bảng SQL và các hàm vô hướng đã lưu trữ có trong cơ sở dữ liệu MySQL trên máy chủ <code>server</code> trong phiên bản cơ sở dữ liệu có tên <code>database</code>. Cổng có thể được tùy ý chỉ định với máy chủ, được phân tách bằng dấu hai chấm. Bạn có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau đây:\r\n    <ul>\r\n<li><code>Encoding</code> : Đ&#227; gửi gi&#225; trị TextEncoding chỉ định bộ k&#253; tự được sử dụng để m&#227; h&#243;a tất cả c&#225;c truy vấn đến m&#225;y chủ (gi&#225; trị mặc định l&#224; null).</li>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Một ph&#233;p (true/false) logic x&#225;c định xem c&#243; buộc cột tinyint tr&#234;n m&#225;y chủ dưới dạng gi&#225; trị logic hay kh&#244;ng. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>OldGuids</code> : Một ph&#233;p (true/false) logic đặt xem sẽ coi cột char(36) (nếu l&#224; false) hay cột binary(16) (nếu l&#224; true) l&#224; GUID. Gi&#225; trị mặc định l&#224; false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Một ph&#233;p (true/false) logic đặt xem trả về tất cả c&#225;c bảng chứa tất cả cơ sở dữ liệu (nếu l&#224; false) hay trả về bảng v&#224; dạng xem chứa cơ sở dữ liệu được chỉ định (nếu l&#224; true). Gi&#225; trị mặc định l&#224; false.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...] hoặc [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Nhập dữ liệu từ cơ sở dữ liệu IBM Netezza.",
        "Documentation.LongDescription": "\r\nTrả về bảng gồm các bảng Netezza, dạng xem và hàm đã lưu trữ từ cơ sở dữ liệu Máy chủ Netezza <code>cơ sở dữ liệu</code> trên máy chủ <code>máy chủ</code>. Có thể tùy ý chỉ định cổng bằng máy chủ, được phân tách bằng dấu hai chấm. Có thể chỉ định tham số bản ghi tùy chọn, <code>tùy chọn</code> để kiểm soát các tùy chọn sau:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: Phép lô-gic (true/false) đặt xem có tạo thuộc tính dẫn hướng trên các giá trị trả về không (mặc định là true)</li>\r\n        <li><code>HierarchicalNavigation</code>: Phép lô-gic (true/false) đặt xem có xem các bảng được nhóm theo tên sơ đồ của chúng hay không (mặc định là false)</li>\r\n        <li><code>ConnectionTimeout</code>: Khoảng thời gian kiểm soát thời gian chờ trước khi từ bỏ nỗ lực thực hiện kết nối với máy chủ. Giá trị mặc định tùy thuộc vào trình điều khiển.</li>\r\n        <li><code>CommandTimeout</code>: Khoảng thời gian kiểm soát thời gian cho phép chạy truy vấn phía máy chủ trước khi bị hủy. Giá trị mặc định tùy thuộc vào trình điều khiển. </li>\r\n<li><code> NormalizeDatabaseName</code>: Một logic (true/false) đặt xem có tiêu chuẩn hóa tên cơ sở dữ liệu thành chữ viết hoa không hay diễn giải từng từ (mặc định là true). </li>\r\n</ul>\r\nTham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...].",
        "Documentation.Examples": [
          {
            "Description": "Liệt kê các bảng trong dự án trên IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Trả về kết quả chạy truy vấn gốc về nguồn dữ liệu ODBC.",
        "Documentation.LongDescription": "Trả về kết quả chạy <code>query</code> bằng chuỗi kết nối <code>connectionString</code> sử dụng ODBC. <code>connectionString</code> có thể là văn bản hoặc bản ghi gồm các cặp giá trị thuộc tính. Giá trị thuộc tính có thể là văn bản hoặc số. Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định l&#224; 15 gi&#226;y.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Một logic (đ&#250;ng / sai) quyết định xem c&#243; tạo c&#225;c t&#249;y chọn chuỗi kết nối tương th&#237;ch với SQL Server để x&#225;c thực Windows hay kh&#244;ng. Gi&#225; trị mặc định l&#224; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Trả về kết quả chạy một truy vấn đơn giản dựa trên chuỗi kết nối được cung cấp.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Trả về kết quả chạy truy vấn gốc về nguồn dữ liệu OLE DB.",
        "Documentation.LongDescription": "Trả về kết quả chạy <code>query</code> bằng chuỗi kết nối <code>connectionString</code> sử dụng OLE DB. <code>connectionString</code> có thể là văn bản hoặc bản ghi gồm các cặp giá trị thuộc tính. Giá trị thuộc tính có thể là văn bản hoặc số. Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Một logic (đ&#250;ng / sai) quyết định xem c&#243; tạo c&#225;c t&#249;y chọn chuỗi kết nối tương th&#237;ch với SQL Server để x&#225;c thực Windows hay kh&#244;ng. Gi&#225; trị mặc định l&#224; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Trả về bảng chứa các bảng SQL và các chế độ xem có trong cơ sở dữ liệu PostgreSQL.",
        "Documentation.LongDescription": "Trả về một bảng chứa dạng xem và bảng SQL có trong cơ sở dữ liệu PostgreSQL trên máy chủ <code>server</code> trong phiên bản cơ sở dữ liệu có tên là <code>database</code>. Cổng có thể được tùy ý chỉ định với máy chủ, được phân tách bằng dấu hai chấm. Bạn có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau đây:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...] hoặc [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Nhập dữ liệu từ kho dữ liệu Snowflake Computing.",
        "Documentation.LongDescription": "Trả về một bảng liệt kê các bảng trong <code>warehouse</code> Snowflake Computing trên <code>server</code>. Có thể chỉ định một tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau:\r\n<ul>\r\n<li><code>Role</code>: Một giá trị văn bản để sử dụng làm Tên vai trò cho kết nối.</li>\r\n<li><code>CreateNavigationProperties</code>: Một giá trị (true/false) logic thiết lập xem có tạo thuộc tính dẫn hướng đối với giá trị được trả về hay không (mặc định là true).</li>\r\n<li><code>ConnectionTimeout</code>: Số giây chờ phản hồi mạng từ Snowflake.</li>\r\n<li><code>CommandTimeout</code>: Số giây chờ truy vấn thực hiện.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Liệt kê các bảng trong kho dữ liệu Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Trả lại một bảng liên kế các bảng trên cụm Spark được chỉ định.",
        "Documentation.LongDescription": "Trả lại một bảng liên kế các bảng trên cụm Spark <code>host</code> using <code>protocol</code>.  Các giao thức hợp lệ là:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Liệt kê các bảng trong phiên bản Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Trả về một bảng chứa các bảng SQL, lượt xem và các hàm được lưu trữ từ cơ sở dữ liệu SQL.",
        "Documentation.LongDescription": "Trả về một bảng chứa dạng xem, bảng SQL và các hàm đã lưu trữ từ cơ sở dữ liệu SQL Server <code>database</code> trên máy chủ <code>server</code>. Cổng có thể được tùy ý chỉ định với máy chủ, được phân tách bằng dấu hai chấm hoặc dấu phẩy. Bạn có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Số đặt gi&#225; trị của mệnh đề truy vấn &quot;maxdop&quot; trong truy vấn SQL đ&#227; tạo.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n<li><code>MultiSubnetFailover</code> : Một ph&#233;p (true/false) logic đặt gi&#225; trị của thuộc t&#237;nh &quot;MultiSubnetFailover&quot; trong chuỗi kết nối (mặc định l&#224; false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Giá trị l&#244;-gic (true/false) trong đó nếu true, thao tác n&#233;n các chuyển đổi loại c&#243; thể kh&#244;ng th&#224;nh c&#244;ng v&#224; khiến to&#224;n bộ truy vấn kh&#244;ng th&#224;nh c&#244;ng. Kh&#244;ng n&#234;n d&#249;ng cho mục đích sử dụng chung.</li>\r\n<li><code>ContextInfo</code> : Gi&#225; trị nhị ph&#226;n được sử dụng để đặt CONTEXT_INFO trước khi chạy từng lệnh.</li>\r\n<li><code>OmitSRID</code> : Giá trị l&#244;-gic (true/false) trong đó nếu true thì sẽ bỏ SRID khi tạo Văn bản quen thu&#244;̣c từ các loại hình học và địa lý.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Một gi&#225; trị l&#244;gic (true/false) m&#224;, nếu l&#224; true, cho ph&#233;p n&#233;n truy vấn cơ sở dữ liệu ch&#233;o tr&#234;n c&#249;ng một m&#225;y chủ. Gi&#225; trị mặc định l&#224; false.</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...] hoặc [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Trả về bảng chứa các bảng SQL và dạng xem có trong cơ sở dữ liệu Sybase.",
        "Documentation.LongDescription": "Trả về một bảng chứa dạng xem và bảng SQL có trong cơ sở dữ liệu Sybase trên máy chủ <code>server</code> trong phiên bản cơ sở dữ liệu có tên là <code>database</code>. Cổng có thể được tùy ý chỉ định với máy chủ, được phân tách bằng dấu hai chấm. Bạn có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau đây:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : H&#224;m được sử dụng để tạo t&#234;n cho c&#225;c thuộc t&#237;nh điều hướng.</li>\r\n<li><code>Query</code> : Đ&#227; sử dụng truy vấn SQL gốc để truy xuất dữ liệu. Nếu truy vấn tạo ra nhiều tập hợp kết quả, chỉ tập hợp đầu ti&#234;n được trả về.</li>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ nỗ lực kết nối với m&#225;y chủ. Gi&#225; trị mặc định phụ thuộc v&#224;o tr&#236;nh điều khiển.</li>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n</ul>\r\n\r\n    Chẳng hạn, tham số bản ghi được chỉ định dưới dạng [option1 = value1, option2 = value2...] hoặc [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Chắp thêm một cột có các giá trị vị trí rõ ràng.",
        "Documentation.LongDescription": "Chắp thêm một cột có tên <code>newColumnName</code> vào <code>table</code> với các giá trị vị trí rõ ràng.\r\n    Một giá trị tùy chọn, <code>initialValue</code>, giá trị chỉ mục ban đầu. Giá trị tùy chọn <code>increment</code> chỉ định số lượng tăng mỗi giá trị chỉ mục.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Thêm một cột chỉ mục có tên \"chỉ mục\" vào bảng.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Thêm một cột chỉ mục có tên \"chỉ mục\", bắt đầu tại giá trị 10 và tăng theo số gia là 5, vào bảng.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Cho một cột danh sách trong một bảng, hãy tạo một bản sao của một hàng cho mỗi giá trị trong danh sách.",
        "Documentation.LongDescription": "Cho <code>table</code> trong đó <code>column</code> là danh sách giá trị, hãy tách danh sách này thành một hàng cho mỗi giá trị. Giá trị trong các cột khác được sao chép trong từng hàng mới được tạo.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tách cột danh sách [Name] trong bảng.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Phân bố giá trị của ô trước thành các ô có giá trị rỗng ở dưới trong cột.",
        "Documentation.LongDescription": "Trả về một bảng từ <code>table</code> được chỉ định trong đó giá trị của ô trước được phân bố tới các ô có giá trị rỗng ở dưới trong <code>columns</code> được chỉ định.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Trả về một bảng có các giá trị null trong cột [Place] được điền giá trị ở trên chúng từ bảng.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Phân bố giá trị của ô tới các ô có giá trị rỗng ở phía trên trong cột.",
        "Documentation.LongDescription": "Trả về một bảng từ <code>table</code> được chỉ định trong đó giá trị của ô tiếp theo được phân bố tới các ô có giá trị rỗng ở phía trên trong <code>columns</code> được chỉ định.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Trả về một bảng có các giá trị null trong cột [Column2] được điền giá trị ở phía dưới chúng từ bảng.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Trả về tất cả các hàng chứa văn bản cho sẵn trong bảng.",
        "Documentation.LongDescription": "Trả về các hàng trong bảng <code>table</code> chứa văn bản <code>text</code>. Nếu không tìm thấy văn bản này thì một bảng trống được trả về.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm các hàng trong bảng chứa \"Bob\".",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Trả về các hàng đếm đầu tiên được chỉ định.",
        "Documentation.LongDescription": "Trả về (các) hàng đầu tiên của bảng <code>table</code>, tùy theo giá trị của <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Nếu <code>countOrCondition</code> là một số thì nhiều hàng (bắt đầu ở trên cùng) sẽ được trả về. </li>\r\n    <li> Nếu <code>countOrCondition</code> là một điều kiện thì các hàng đáp ứng điều kiện này sẽ được trả về cho đến khi một hàng không đáp ứng điều kiện.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm hai hàng đầu tiên của bảng.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Tìm các hàng đầu tiên trong đó [a] > 0 trong bảng.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Trả về một bảng là kết quả kết hợp một nhóm các bảng đã phân chia.",
        "Documentation.LongDescription": "Trả về một bảng là kết quả của việc kết hợp một loạt bảng được phân vùng, <code>partitions</code>. <code>partitionColumn</code> là tên của cột cần thêm. Loại cột mặc định là <code>bất kỳ</code> nhưng có thể được chỉ định bởi <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm loại mục từ danh sách <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Trả về số lượng hàng được chỉ định cuối cùng.",
        "Documentation.LongDescription": "Trả về (các) hàng cuối cùng từ bảng <code>table</code> tùy theo giá trị của <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Nếu <code>countOrCondition</code> là một số thì nhiều hàng sẽ được trả về bắt đầu từ vị trí (kết thúc bằng - <code>countOrCondition</code>). </li>\r\n    <li> Nếu <code>countOrCondition</code> là một điều kiện thì các hàng đáp ứng điều kiện này sẽ được trả về theo vị trí tăng dần cho đến khi một hàng không đáp ứng điều kiện.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm hai hàng cuối cùng của bảng.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Tìm các hàng cuối cùng trong đó [a] > 0 trong bảng.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Trả về một bảng trong đó tất cả các cột đều đã được thêm tiền tố là văn bản cho sẵn.",
        "Documentation.LongDescription": "Trả về một bảng trong đó tất cả tên cột từ <code>table</code> cho sẵn đều được thêm tiền tố là văn bản <code>prefix</code> cho sẵn cùng với một dấu chấm ở dạng <code><code>prefix</code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Thêm tiền tố \"MyTable\" cho các cột trong bảng.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Trả về các hàng bắt đầu tại phần bù được chỉ định.",
        "Documentation.LongDescription": "Trả về các hàng từ <code>table</code> bắt đầu tại <code>offset</code> được chỉ định. Tham số tùy chọn <code>count</code> chỉ định số lượng hàng sẽ trả về. Theo mặc định, tất cả các hàng sau phần bù đều được trả về.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trả về tất cả các hàng bắt đầu tại phần bù 1 trong bảng.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Trả về một hàng bắt đầu tại phần bù 1 trong bảng.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Loại bỏ các cột được chỉ định.",
        "Documentation.LongDescription": "Loại bỏ <code>columns</code> đã chỉ định từ <code>table</code> được cung cấp.\r\n    Nếu cột đã chỉ định không tồn tại thì sẽ xảy ra lỗi trừ khi tham số tùy chọn <code>missingField</code> chỉ định hành vi thay thế (ví dụ như <code>MissingField.UseNull</code> hoặc <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ cột [Phone] khỏi bảng.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Cố gắng loại bỏ cột không tồn tại khỏi bảng.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Loại bỏ tất cả những lần xuất hiện của các hàng được chỉ định khỏi bảng.",
        "Documentation.LongDescription": "Loại bỏ tất cả những lần xuất hiện của <code>rows</code> được chỉ định khỏi <code>table</code>.\r\n    Có thể chỉ định tham số tùy chọn <code>equationCriteria</code> để kiểm soát phép so sánh giữa các hàng của bảng.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ mọi hàng có [a = 1] khỏi bảng <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Loại bỏ số lượng hàng được chỉ định.",
        "Documentation.LongDescription": "Loại bỏ <code>count</code> hàng khỏi phần đầu của <code>table</code>, bắt đầu tại <code>offset</code> được chỉ định. Tổng số mặc định 1 được sử dụng nếu tham số <code>count</code> không được cung cấp. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ hàng đầu tiên khỏi bảng.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Loại bỏ hàng tại ví trị 1 khỏi bảng.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Loại bỏ hai hàng bắt đầu tại vị trí 1 khỏi bảng.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Áp dụng (các) tác vụ đổi tên có dạng {old, new}.",
        "Documentation.LongDescription": "Thực hiện các tác vụ đổi tên cho sẵn đối với các cột trong bảng <code>table</code>. Tác vụ thay thế <code>renames</code> bao gồm một danh sách có hai giá trị là tên cột cũ và tên cột mới, được cung cấp trong một danh sách.\r\n    Nếu cột này không tồn tại thì một ngoại lệ được đưa ra trừ khi tham số tùy chọn <code>missingField</code> chỉ định một thay thế (ví dụ: <code>MissingField.UseNull</code> hoặc <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Thay thế tên cột \"CustomerNum\" bằng \"CustomerID\" trong bảng.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Thay thế tên cột \"CustomerNum\" bằng \"CustomerID\" và \"PhoneNum\" bằng \"Phone\" trong bảng.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Thay thế tên cột \"NewCol\" bằng \"NewColumn\" trong bảng và bỏ qua nếu cột này không tồn tại.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Trả về một bảng có các cột theo thứ tự được chỉ định.",
        "Documentation.LongDescription": "Trả về một bảng từ đầu vào <code>table</code> với các cột theo thứ tự do <code>columnOrder</code> chỉ định. Các cột không được chỉ định trong danh sách sẽ không được sắp xếp lại.\r\n     Nếu cột này không tồn tại thì một ngoại lệ được đưa ra trừ khi tham số tùy chọn <code>missingField</code> chỉ định một thay thế (ví dụ: <code>MissingField.UseNull</code> hoặc <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi thứ tự của các cột [Phone] và [Name] trong bảng.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Chuyển đổi thứ tự của các cột [Phone] và [Address] hoặc sử dụng \"MissingField.Ignore\" trong bảng. Điều này khoongn thay đổi bảng vì cột [Address] không tồn tại.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Lặp lại các hàng của các bảng với số lần được chỉ định.",
        "Documentation.LongDescription": "Trả về một bảng có các hàng từ đầu vào <code>table</code> lặp lại số lần <code>count</code> được chỉ định.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Lặp lại các hàng trong bảng hai lần.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Thay thế giá trị lỗi trong cột được chỉ định bằng giá trị chỉ định tương ứng.",
        "Documentation.LongDescription": "Thay thế giá trị lỗi trong cột được chỉ định của <code>table</code> bằng giá trị mới trong danh sách <code>errorReplacement</code>. Định dạng của danh sách là {{column1, value1}, …}. Có thể chỉ có một giá trị thay thế mỗi cột, chỉ định cột nhiều lần sẽ dẫn đến lỗi.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Thay thế giá trị lỗi bằng chữ \"world\" trong bảng.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Thay thế giá trị lỗi trong cột A bằng chữ \"hello\" và trong cột B bằng chữ \"world\" trong bảng.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Thay thế các khóa của bảng được chỉ định.",
        "Documentation.LongDescription": "Thay thế các khóa của bảng được chỉ định.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Thay thế các khóa hiện có của bảng.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Thay thế tất cả các hàng được chỉ định bằng (các) hàng được cung cấp.",
        "Documentation.LongDescription": "Thay thế tất cả các hàng được chỉ định trong <code>table</code> bằng (các) hàng được cung cấp. Các hàng sẽ thay thế và các thay thế được chỉ định trong <code>replacements</code>, sử dụng định dạng {old, new}.\r\n    Có thể chỉ định tham số <code>equationCriteria</code> tùy chọn để kiểm soát phép so sánh giữa các hàng của bảng.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Thay thế các hàng [a = 1, b = 2] và [a = 2, b = 3] bằng [a = -1, b = -2],[a = -2, b = -3] trong bảng.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Trả về một bảng chỉ có các cột được chỉ định.",
        "Documentation.LongDescription": "Trả về <code>table</code> chỉ có <code>columns</code> được chỉ định.\r\n    <ul>\r\n       <li><code>table</code>: Bảng được cung cấp.</li>\r\n       <li><code>columns</code>: Danh sách các cột từ bảng <code>table</code> sẽ trả về. Các cột trong bảng được trả về sắp xếp theo thứ tự được liệt kê trong <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Tùy chọn)</i> Nên làm gì nếu cột không tồn tại.  Ví dụ: <code>MissingField.UseNull</code> hoặc <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Chỉ bao gồm cột [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Chỉ bao gồm cột [CustomerID] và [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Nếu cột được bao gồm không tồn tại, kết quả mặc định là lỗi.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Nếu cột được bao gồm không tồn tại, tùy chọn<code>MissingField.UseNull</code> sẽ tạo một cột có các giá trị null.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Chọn các hàng đáp ứng hàm điều kiện.",
        "Documentation.LongDescription": "Trả về một bảng chứa các hàng từ <code>table</code> khớp với lựa chọn <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Chọn các hàng trong bảng nơi các giá trị trong cột [CustomerID] lớn hơn 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Chọn các hàng trong bảng nơi các tên không chứa \"B\".",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Phân loại bảng bằng cách sử dụng một hoặc nhiều tên cột và tiêu chí so sánh.",
        "Documentation.LongDescription": "Phân loại <code>table</code> bằng cách sử dụng một hoặc nhiều tên cột và <code>comparisonCriteria</code> tùy chọn trong biểu mẫu { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Sắp xếp bảng trên cột \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Sắp xếp bảng trên cột \"OrderID\" theo thứ tự giảm dần.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Sắp xếp bảng trên cột \"CustomerID\" sau đó đến \"OrderID\", với \"CustomerID\" theo thứ tự giảm dần.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Biến đổi tên cột bằng cách sử dụng hàm đã cho.",
        "Documentation.LongDescription": "Biến đổi tên cột bằng cách sử dụng hàm <code>nameGenerator</code> đã cho. Tùy chọn hợp lệ:\r\n    <div>\r\n      <code>MaxLength</code> chỉ định độ dài tối đa của tên cột mới. Nếu kết quả hàm đã cho có tên cột dài hơn thì tên dài đó sẽ bị cắt bớt.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> được sử dụng để kiểm soát so sánh trong khi tạo tên cột mới. Trình so sánh có thể được sử dụng để cung cấp so sánh nhận thức về ngôn ngữ và văn hóa hoặc phân biệt chữ hoa-thường.\r\n    </div>\r\n    <div>\r\n      Thông tin sau đây được tích hợp trong trình so sánh hiện có bằng ngôn ngữ công thức:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: Được sử dụng thực hiện so sánh thứ tự chính xác</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: Được sử dụng để thực hiện so sánh phân biệt chữ hoa-thường thứ tự chính xác</li>\r\n      <li> <code>Comparer.FromCulture</code>: Được sử dụng để thực hiện só sánh nhận thức văn hóa</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Xóa ký tự <code>#(tab)</code> khỏi tên cột",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Biến đổi tên cột để tạo tên phân biệt chữ hoa-thường có độ dài là 6.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Áp dụng (các) chuyển đổi loại có dạng { column, type } bằng cách thức cụ thể.",
        "Documentation.LongDescription": "Trả về một bảng từ đầu vào <code>table</code> bằng cách áp dụng tác vụ chuyển đổi cho các cột được chỉ định trong tham số <code>typeTransformations</code> (trong đó định dạng là { column name, type name}), bằng cách sử dụng cách thức được chỉ định trong tham số <code>culture</code> (ví dụ: \"en-US\").\r\n    Nếu cột này không tồn tại thì xảy ra trường hợp ngoại lệ.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi giá trị số trong cột [a] thành giá trị văn bản từ bảng <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Chuyển đổi các giá trị của một hoặc nhiều cột.",
        "Documentation.LongDescription": "Chuyển đổi <code>table</code> bằng cách áp dụng mỗi phép toán trong cột được liệt kê trong <code>transformOperations</code> (với dạng thức là { column name, transformation } hoặc { column name, transformation, new column type }).\r\n    Nếu <code>defaultTransformation</code> được chỉ định, giá trị này sẽ áp dụng cho tất cả các cột không được liệt kê trong <code>transformOperations</code>.\r\n    Nếu một cột được liệt kê trong <code>transformOperations</code> không tồn tại, một ngoại lệ sẽ được đưa ra trừ khi tham số tùy chọn <code>missingField</code> chỉ định một giá trị thay thế (ví dụ: <code>MissingField.UseNull</code> hoặc <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi các giá trị văn bản trong cột [A] thành giá trị số và các giá trị số trong cột [B] thành giá trị văn bản.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Chuyển đổi các giá trị số trong cột bị thiếu [X] thành các giá trị văn bản, bỏ qua các cột không tồn tại.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Chuyển đổi các giá trị số trong cột [X] bị thiếu thành giá trị văn bản, đặt mặc định thành null trên các cột không tồn tại.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Tăng các giá trị số trong cột [B] và chuyển đổi chúng thành giá trị văn bản và chuyển đổi tất cả các cột khác thành số.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Tạo hoặc mở rộng bảng với trình xử lý do người dùng xác định cho các phép toán truy vấn và thao tác.",
        "Documentation.LongDescription": "<p>Trả về dạng xem <code>table</code> khi hàm được chỉ định trong <code>handlers</code> được sử dụng thay cho hành vi mặc định của một thao tác khi thao tác được áp dụng cho dạng xem.</p>\r\n<p>Nếu <code>table</code> được cung cấp, tất cả hàm trình điều khiển đều không bắt buộc. Nếu <code>table</code> không được cung cấp, yêu cầu có các hàm trình điều khiển <code>GetType</code> và <code>GetRows</code>. Nếu hàm trình điều khiển không được chỉ định cho một thao tác, hành vi mặc định của thao tác được áp dụng cho <code>table</code> (trừ trường hợp <code>GetExpression</code>).</p>\r\n<p>Các hàm trình điều khiển phải trả về giá trị tương đương về mặt ngữ nghĩa với kết quả áp dụng thao tác dựa trên <code>table</code> (hoặc dạng xem có được trong trường hợp <code>GetExpression</code>).</p>\r\n<p>Nếu hàm trình điều khiển phát sinh lỗi, hành vi mặc định của thao tác được áp dụng cho dạng xem.</p>\r\n<p><code>Table.View</code> có thể được sử dụng để triển khai việc gộp vào nguồn dữ liệu – bản dịch của truy vấn M sang truy vấn theo nguồn (ví dụ: để tạo câu lệnh T-SQL từ truy vấn M).</p>\r\n<p>Tham khảo tài liệu về trình kết nối tùy chỉnh Power Query để biết mô tả đầy đủ hơn về <code>Table.View</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Tạo dạng xem cơ bản không yêu cầu truy nhập hàng theo thứ tự để xác định loại hoặc số lượng hàng.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Nhập tên dự án và tổ chức.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (Chỉ bảng)",
        "Documentation.LongDescription": "Trả về bảng dạng xem Phân tích do Azure DevOps cung cấp."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Nhập dữ liệu từ Vertica",
        "Documentation.LongDescription": "Trả về bảng bao gồm các sơ đồ có trên máy chủ được đặt tên theo tham số <code>máy chủ</code> trong cơ sở dữ liệu được đặt tên theo tham số <code>cơ sở dữ liệu</code>.\r\nCó thể cung cấp tham số bản ghi tùy chọn, <code>tùy chọn</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể bao gồm các trường sau:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: Khoảng thời gian kiểm soát thời gian chờ trước khi từ bỏ nỗ lực kết nối với máy chủ. Giá trị mặc định phụ thuộc vào trình điều khiển.</li>\r\n    <li><code>CommandTimeout </code>: Khoảng thời gian kiểm soát thời gian cho phép chạy truy vấn phía máy chủ trước khi truy vấn đó bị hủy. Giá trị mặc định phụ thuộc vào trình điều khiển.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Liệt kê các bảng trong Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Trả về bảng bao gồm nội dung báo cáo từ Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Gọi tới điểm cuối báo cáo Webtrends cho trước và trả về tất cả dữ liệu dưới dạng bảng.",
        "Documentation.Examples": [
          {
            "Description": "Gọi tới điểm cuối báo cáo khách truy cập Webtrends để có dữ liệu trong 30 ngày qua",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Bảng bao gồm dữ liệu khách truy cập"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Trả về một danh sách miền Active Directory trong cùng cụm nhánh với miền được chỉ định hoặc danh sách miền của máy hiện hành nếu không chỉ định.",
        "Documentation.LongDescription": "Trả về một danh sách miền Active Directory trong cùng cụm nhánh với miền được chỉ định hoặc danh sách miền của máy hiện hành nếu không chỉ định.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Trả lại kết quả về chạy truy vấn gốc trên nguồn dữ liệu ADO.NET.",
        "Documentation.LongDescription": "Trả về kết quả chạy <code>query</code> bằng chuỗi kết nối <code>connectionString</code> sử dụng nhà cung cấp ADO.NET <code>providerName</code>. <code>connectionString</code> có thể là văn bản hoặc bản ghi gồm các cặp giá trị thuộc tính. Giá trị thuộc tính có thể là văn bản hoặc số. Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Khoảng thời gian kiểm so&#225;t thời lượng ph&#237;a m&#225;y chủ được phép chạy trước khi bị hủy bỏ. Gi&#225; trị mặc định l&#224; 10 ph&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Một logic (đ&#250;ng / sai) quyết định xem c&#243; tạo c&#225;c t&#249;y chọn chuỗi kết nối tương th&#237;ch với SQL Server để x&#225;c thực Windows hay kh&#244;ng. Gi&#225; trị mặc định l&#224; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Trả về các bộ báo cáo trong Adobe Analytics.",
        "Documentation.LongDescription": "Trả về một bảng gồm các gói đa chiều từ Adobe Analytics. Có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Một ph&#233;p (true/false) logic đặt xem c&#243; xem c&#225;c bảng được nh&#243;m theo t&#234;n lược đồ của ch&#250;ng hay kh&#244;ng (mặc định l&#224; false).</li>\r\n<li><code>MaxRetryCount</code> : Số lần thử thực hiện lại khi kiểm tra v&#242;ng kết quả của truy vấn. Gi&#225; trị mặc định l&#224; 120.</li>\r\n<li><code>RetryInterval</code> : Khoảng thời gian giữa c&#225;c lần cố gắng thử lại. Gi&#225; trị mặc định l&#224; 1 gi&#226;y.</li>\r\n<li><code>Implementation</code> : Chỉ định phi&#234;n bản API Adobe Analytics. Gi&#225; trị hợp lệ l&#224;: &quot;2.0&quot;. C&#224;i đặt mặc định sử dụng API phi&#234;n bản 1.4</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Nhập dữ liệu từ một Hive LLAP",
        "Documentation.LongDescription": "\r\nTrả về danh sách bảng từ Hive LLAP được chỉ định bởi <code>cơ sở dữ liệu</code> trên <code>máy chủ</code> Hive LLAP bằng cách sử dụng <code>giao thức</code> đã chọn. Số cổng có thể được chỉ định tùy chọn với máy chủ, được phân tách bằng dấu hai chấm. Giao thức Thrift Transport là một loại giao thức được liệt kê với các giá trị \"Tiêu chuẩn\", \"HTTP\". Tham số tùy chọn của <code>tùy chọn</code> có thể được chỉ định để kiểm soát các tùy chọn sau đây:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Thời lượng kiểm soát khoảng thời gian chờ trước khi dừng kết nối với máy chủ. Giá trị mặc định phụ thuộc vào trình điều khiển.</li>\r\n        <li><code>CommandTimeout</code>: Thời lượng kiểm soát khoảng thời gian truy vấn phía máy chủ được phép chạy trước khi bị hủy bỏ. Giá trị mặc định phụ thuộc vào trình điều khiển.</li>\r\n</ul>\r\nTham số <code>tùy chọn</code> được chỉ định là [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Giả sử hôm nay là ngày 15 tháng 6 năm 2017, nhận dữ liệu tóm tắt từ ngày 1 tháng 5 năm 2017 đến ngày 15 tháng 6 năm 2017",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Hàm sẽ trả về dữ liệu tóm tắt từ ngày 1 tháng 5 năm 2017 đến ngày 15 tháng 6 năm 2017"
          },
          {
            "Description": "Giả sử hôm nay là ngày 15 tháng 6 năm 2017, nhận dữ liệu tóm tắt cho tháng 4 năm 2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Hàm sẽ trả về dữ liệu từ ngày 1 tháng 4 năm 2017 đến ngày 30 tháng 4 năm 2017"
          },
          {
            "Description": "Giả sử hôm nay là ngày 15 tháng 6 năm 2017, nhận dữ liệu tóm tắt từ tháng 4 năm 2017 cho đến nay.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Hàm sẽ trả về dữ liệu từ ngày 1 tháng 4 năm 2017 đến ngày 15 tháng 6 năm 2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Quản lý chi phí Azure",
        "Documentation.Description": "Quản lý chi phí Azure",
        "Documentation.DisplayName": "Quản lý chi phí Azure",
        "Documentation.LongDescription": "Quản lý chi phí Azure",
        "Documentation.Name": "Quản lý chi phí Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Nhập tên dự án và tổ chức.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Dịch vụ Azure DevOps",
        "Documentation.LongDescription": "Trả về một bảng bao gồm các nguồn cấp dữ liệu OData do Azure DevOps cung cấp."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Kết nối với phiên bản Dataverse của bạn (Dynamics 365 và PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Hợp nhất bảng kích thước được chỉ định với ngữ cảnh bộ lọc của cube và thay đổi chi tiết kích thước của ngữ cảnh bộ lọc bằng cách mở rộng tập hợp thuộc tính kích thước được chỉ định.",
        "Documentation.LongDescription": "Hợp nhất bảng kích thước được chỉ định <code>dimensionSelector</code>, với ngữ cảnh bộ lọc, <code>cube</code>, của cube và thay đổi chi tiết kích thước của ngữ cảnh bộ lọc bằng cách mở rộng tập hợp thuộc tính kích thước được chỉ định, <code>attributeNames</code>. Thuộc tính kích thước được thêm vào chế độ xem dạng bảng với cột có tên <code>newColumnNames</code> hoặc <code>attributeNames</code> nếu không được chỉ định.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Thêm cột vào cube chứa kết quả của phép đo được áp dụng trong ngữ cảnh hàng của mỗi hàng.",
        "Documentation.LongDescription": "Thêm cột có tên <code>column</code> vào <code>cube</code> chứa kết quả của phép đo <code>measureSelector</code> được áp dụng trong ngữ cảnh hàng của mỗi hàng. Ứng dụng đo lường bị ảnh hưởng bởi các thay đổi đối với chi tiết kích thước và lát cắt. Giá trị đo lường sẽ được điều chỉnh sau khi các hoạt động cube nhất định được thực hiện.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 for Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Nhập công ty và môi trường Dynamics 365 Business Central của bạn.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Trả về bảng có dữ liệu liên quan về Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Nhập công ty và môi trường Dynamics 365 Business Central của bạn.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Trả về bảng có dữ liệu liên quan về Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Nhập công ty và môi trường Dynamics 365 Business Central của bạn.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Trả về bảng có dữ liệu liên quan về Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Nhập công ty và môi trường Dynamics 365 Business Central của bạn.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Trả về bảng có dữ liệu liên quan về Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Trả về nội dung của sổ làm việc Excel hiện tại.",
        "Documentation.LongDescription": "Trả về nội dung của sổ làm việc Excel hiện tại. Trả về bảng, dải ô có tên và mảng động. Không giống như <code>Excel.Workbook</code>, nó không trả về trang tính.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Trả lại bảng mục lục từ tài khoản Microsoft Exchange.",
        "Documentation.LongDescription": "Trả về một bảng nội dung từ tài khoản Microsoft Exchange <code>mailboxAddress</code>. Nếu <code>mailboxAddress</code> không được chỉ định thì tài khoản mặc định cho thông tin đăng nhập sẽ được sử dụng.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Kho dữ liệu",
        "Documentation.Caption": "Kho dữ liệu",
        "Documentation.Description": "Nhập dữ liệu từ Kho dữ liệu",
        "Documentation.LongDescription": "Nhập dữ liệu từ Kho dữ liệu"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Trả về tài khoản Google Analytics.",
        "Documentation.LongDescription": "Trả về tài khoản Google Analytics có thể truy cập được bằng thông tin đăng nhập hiện tại.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "BigQuery của Google",
        "Documentation.Caption": "BigQuery của Google",
        "Documentation.Description": "Nhập dữ liệu từ cơ sở dữ liệu BigQuery của Google.",
        "Documentation.LongDescription": "\r\n      Trả về một bảng liệt kê các dự án có sẵn trong BigQuery của Google. Tham số bản ghi tùy chọn, <code>tùy chọn</code>, có thể được chỉ định để kiểm soát các tùy chọn sau:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Khoảng thời gian kiểm soát thời gian cần đợi trước khi từ bỏ nỗ lực thực hiện kết nối với máy chủ. Giá trị mặc định là giá trị Hết thời gian chờ kết nối ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Khoảng thời gian kiểm soát thời gian được phép chạy truy vấn phía máy chủ trước khi bị hủy bỏ.</li>\r\n        <li><code>BillingProject</code>: Id dự án thanh toán. Giá trị mặc định là dự án khả dụng đầu tiên.</li>\r\n        <li><code>UseStorageApi</code>: Chỉ định có nên dùng API Lưu trữ BigQuery cho các tập hợp kết quả lớn hay không. Giá trị mặc định là true để dùng API Lưu trữ. Đặt thành false để không dùng API Lưu trữ</li>\r\n      </ul>\r\n     Tham số bản ghi được chỉ định là [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Liệt kê các dự án có sẵn trong BigQuery của Google",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Kho hồ dữ liệu",
        "Documentation.Caption": "Nhập dữ liệu từ kho hồ dữ liệu",
        "Documentation.Description": "Nhập dữ liệu từ kho hồ dữ liệu",
        "Documentation.LongDescription": "Kết nối với tất cả các Kho hồ dữ liệu mà bạn có quyền truy nhập và chọn những thực thể bạn muốn sử dụng"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Trả về bảng có chứa dữ liệu MailChimp chính.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Trả về bảng có chứa dữ liệu MailChimp chính.",
        "Documentation.Examples": [
          {
            "Description": "Trả về bảng có chứa dữ liệu MailChimp chính.",
            "Code": "MailChimp.Tables()",
            "Result": "Bảng có chứa dữ liệu MailChimp chính."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Trả về bảng có các hoạt động của khách hàng tiềm năng.",
        "Documentation.LongDescription": "Gọi tới điểm cuối API Marketo REST tại <code>url</code>/rest/v1/activities.json. Tất cả hoạt động trong danh sách <code>activityIds</code> đã diễn ra kể từ khi trả về <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Kéo bảng hoạt động \"Truy cập Trang web\" kể từ ngày 1 tháng 11 năm 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Một bảng có chi tiết về tất cả hoạt động \"Truy cập Trang web\" kể từ ngày 1 tháng 11"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"chọn * từ PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Luồng dữ liệu của Power BI (Cũ)",
        "Documentation.Caption": "Nhập dữ liệu từ luồng dữ liệu của Power BI",
        "Documentation.LongDescription": "Kết nối với tất cả các luồng dữ liệu Power BI mà bạn có quyền truy cập và chọn những thực thể bạn muốn sử dụng."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Kho dữ liệu",
        "Documentation.Caption": "Kho dữ liệu",
        "Documentation.Description": "Nhập dữ liệu từ kho dữ liệu",
        "Documentation.LongDescription": "Nhập dữ liệu từ kho dữ liệu"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Luồng dữ liệu",
        "Documentation.Caption": "Nhập dữ liệu từ luồng dữ liệu",
        "Documentation.Description": "Nhập dữ liệu từ luồng dữ liệu",
        "Documentation.LongDescription": "Kết nối với tất cả các luồng dữ liệu mà bạn có quyền truy cập và chọn những thực thể bạn muốn sử dụng"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Nhập dữ liệu từ QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Trả về một bảng liệt kê các bảng có sẵn trong QuickBooks Online. Có thể chỉ định tham số bản ghi tùy chọn, <code>options</code>, để kiểm soát các tùy chọn sau:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: Khoảng thời gian kiểm soát thời gian cần đợi trước khi từ bỏ nỗ lực kết nối với máy chủ. </li>\r\n            <li><code>CommandTimeout</code>: Khoảng thời gian kiểm soát thời gian truy vấn phía máy chủ được phép chạy trước khi bị hủy.</li>\r\n          </ul>\r\n        Tham số bản ghi được chỉ định là [option1 = value1, option2 = value2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Trả về đối tượng từ tài khoản Salesforce.",
        "Documentation.LongDescription": "Trả về các đối tượng trên tài khoản Salesforce được cung cấp trong thông tin đăng nhập. Tài khoản sẽ được kết nối thông qua môi trường được cung cấp <code>loginUrl</code>. Nếu không có môi trường nào được cung cấp thì tài khoản sẽ kết nối với môi trường sản xuất (https://login.salesforce.com). Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Một ph&#233;p l&#244;-gic (true/false) đặt xem c&#243; tạo c&#225;c thuộc t&#237;nh điều hướng tr&#234;n gi&#225; trị trả về hay kh&#244;ng (mặc định l&#224; false).</li>\r\n<li><code>ApiVersion</code> : Phi&#234;n bản API Salesforce cần sử dụng cho truy vấn n&#224;y. Khi chưa được chỉ định, phi&#234;n bản API 29.0 sẽ được sử dụng.</li>\r\n<li><code>Timeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ y&#234;u cầu với m&#225;y chủ. Gi&#225; trị mặc định tùy thuộc theo nguồn.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Trả về báo cáo từ tài khoản Salesforce.",
        "Documentation.LongDescription": "Trả về báo cáo về tài khoản Salesforce được cung cấp trong thông tin đăng nhập. Tài khoản sẽ được kết nối thông qua môi trường được cung cấp <code>loginUrl</code>. Nếu không có môi trường nào được cung cấp thì tài khoản sẽ kết nối với môi trường sản xuất (https://login.salesforce.com). Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Phi&#234;n bản API Salesforce cần sử dụng cho truy vấn n&#224;y. Khi chưa được chỉ định, phi&#234;n bản API 29.0 sẽ được sử dụng.</li>\r\n<li><code>Timeout</code> : Khoảng thời gian kiểm so&#225;t thời gian chờ trước khi từ bỏ y&#234;u cầu với m&#225;y chủ. Gi&#225; trị mặc định tùy thuộc theo nguồn.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Trả về InfoCubes và các truy vấn trong hệ thống SAP Business Warehouse được nhóm bởi InfoArea.",
        "Documentation.LongDescription": "Trả về một bảng gồm InfoCubes và các truy vấn được nhóm theo InfoArea từ phiên bản SAP Business Warehouse tại máy chủ <code>server</code> có số hệ thống <code>systemNumberOrSystemId</code> và ID máy khách <code>clientId</code>. Có thể chỉ định tham số bản ghi tùy chọn, <code>optionsOrLogonGroup</code>, để kiểm soát các tùy chọn sau:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Trả về bảng bao gồm các trang tính, báo cáo, thư mục và không gian làm việc từ API Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Trả về bảng lồng nhau bao gồm các trang tính, báo cáo, thư mục và không gian làm việc sẵn có từ API Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Trả về trang tính, thư mục, báo cáo và không gian làm việc có sẵn ở cấp cao nhất của phân cấp Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Bảng bao gồm các thư mục, báo cáo và không gian làm việc từ cấp cao nhất của phân cấp Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Trả về bảng bao gồm số liệu có sẵn từ API SparkPost v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Có thể sử dụng chức năng này để truy xuất dữ liệu từ một điểm cuối \"Số liệu\" cụ thể của API SparkPost phiên bản 1. Khi làm mới các bảng này hoặc thực hiện cuộc gọi tới API SparkPost bằng trình kết nối này, hãy nhớ rằng API SparkPost có hạn mức API nghiêm ngặt. Nếu máy chủ SparkPost đang trả về mã trạng thái 429, thì có nghĩa là bạn đã đạt đến hạn mức và sẽ phải chờ vài phút trước khi thực hiện lệnh gọi khác. Khi chọn giá trị cho tham số Số ngày, lưu ý rằng API chỉ lưu trữ dữ liệu trong vòng 6 tháng.",
        "Documentation.Examples": [
          {
            "Description": "Truy xuất số liệu phân phối count_sent và count_rejected cho tất cả các campaign_ids được tổng hợp trong ba ngày gần đây nhất. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "bảng"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Gọi tới API Stripe.",
        "Documentation.LongDescription": "Gọi tới API Stripe tại https://api.stripe.com/v1/<code>method</code>, với bản ghi <code>additionalParameters</code> được chấp nhận làm tham số bổ sung và danh sách <code>ColumnNames</code> gồm các tên cột dự kiến. Stripe Phiên bản 2015-10-16 được sử dụng.",
        "Documentation.Examples": [
          {
            "Description": "Trả về bảng có các sự kiện được tạo sau ngày 1 tháng 11 năm 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Một bảng có các sự kiện đã chỉ định cho tài khoản Stripe hiện tại"
          },
          {
            "Description": "Trả về bảng có tất cả SKU",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Một bảng có tất cả SKU cho tài khoản Stripe hiện tại"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Trả về bảng liệt kê các bảng và hàm Stripe có sẵn.",
        "Documentation.LongDescription": "Trả về bảng liệt kê các bảng và hàm Stripe có sẵn."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Không gian làm việc Azure Synapse Analytics",
        "Documentation.Caption": "Không gian làm việc Azure Synapse Analytics",
        "Documentation.LongDescription": "Trình kết nối PQ cho không gian làm việc Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Thêm một cột có tên được chỉ định. Giá trị được tính bằng hàm chọn được chỉ định với một hàng được lấy làm dữ liệu đầu vào.",
        "Documentation.LongDescription": "Thêm một cột có tên <code>newColumnName</code> vào bảng <code>table</code>. Các giá trị dành cho cột được tính bằng hàm chọn được chỉ định <code>columnGenerator</code> với mỗi hàng được lấy làm dữ liệu đầu vào.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Thêm một cột số có tên \"TotalPrice\" vào bảng với mỗi giá trị là tổng của cột [Giá] và cột [Vận chuyển].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Thêm một cột mới có các giá trị đại diện thu được bằng cách tạo nhóm mờ cho các giá trị của cột được chỉ định trong bảng.",
        "Documentation.LongDescription": "Thêm cột mới <code>newColumnName</code> vào <code>table</code> với giá trị đại diện của <code>columnName</code>. Phần đại diện có được qua các giá trị khớp mờ trong <code>columnName</code>, ở từng hàng.\r\n    <p>Một tập hợp tùy chọn <code>options</code> có thể được kèm theo để chỉ định cách so sánh các cột chính. Các tùy chọn bao gồm:\r\n    <ul>\r\n<li><code>Culture</code> : Cho ph&#233;p nh&#243;m bản ghi dựa tr&#234;n quy tắc cụ thể theo văn h&#243;a. Đ&#226;y c&#243; thể l&#224; bất kỳ t&#234;n văn h&#243;a hợp lệ nào. V&#237; dụ: một t&#249;y chọn Văn h&#243;a gồm c&#225;c bản ghi nh&#243;m &quot;ja-JP&quot; dựa tr&#234;n văn h&#243;a của người Nhật. Gi&#225; trị mặc định l&#224; &quot;&quot; có nh&#243;m dựa tr&#234;n văn h&#243;a của người Anh b&#226;́t bi&#234;́n.</li>\r\n<li><code>IgnoreCase</code> : Gi&#225; trị logic (true/false) cho ph&#233;p nh&#243;m khóa ph&#226;n biệt chữ hoa/thường. V&#237; dụ: khi là true, &quot;Grapes&quot; được nh&#243;m với &quot;grapes&quot;. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>IgnoreSpace</code> : Gi&#225; trị logic (true/false) cho ph&#233;p kết hợp c&#225;c phần văn bản để t&#236;m nh&#243;m. V&#237; dụ: khi là true, &quot;Gra pes&quot; được nh&#243;m với &quot;Grapes&quot;. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>SimilarityColumnName</code> : T&#234;n của cột hiển thị đ&#244;̣ tương tự giữa gi&#225; trị đầu v&#224;o v&#224; gi&#225; trị đại diện cho đầu v&#224;o đ&#243;. Gi&#225; trị mặc định l&#224; null, khi đ&#243; cột mới cho đ&#244;̣ tương tự sẽ kh&#244;ng được th&#234;m vào.</li>\r\n<li><code>Threshold</code> : Một số trong khoảng từ 0,00 đến 1,00 cho bi&#234;́t điểm tương đ&#244;̀ng m&#224; tại đ&#243; hai gi&#225; trị sẽ được nh&#243;m.\r\n    V&#237; dụ: &quot;Grapes&quot; v&#224; &quot;Graes&quot; (thiếu &quot;p&quot;) được nh&#243;m với nhau chỉ khi t&#249;y chọn n&#224;y được đặt th&#224;nh dưới 0,90.\r\n    Ngưỡng 1,00 chỉ cho ph&#233;p khớp ch&#237;nh x&#225;c.\r\n    (Lưu &#253; rằng một &quot;kết quả khớp ch&#237;nh x&#225;c&quot; gần đ&#250;ng c&#243; thể bỏ qua c&#225;c kh&#225;c biệt như viết hoa, thứ tự từ v&#224; dấu chấm c&#226;u.)\r\n    Gi&#225; trị mặc định l&#224; 0,80.</li>\r\n<li><code>TransformationTable</code> : Bảng cho phép nhóm các bản ghi dựa tr&#234;n các ánh xạ giá trị tùy chỉnh. Bảng sẽ chứa các c&#244;̣t &quot;From&quot; và &quot;To&quot;. Ví dụ: &quot;Grapes&quot; được nhóm với &quot;Raisins&quot; n&#234;́u bảng chuy&#234;̉n đ&#244;̉i được cung c&#226;́p có c&#244;̣t &quot;From&quot; chứa &quot;Grapes&quot; và c&#244;̣t &quot;To&quot; chứa &quot;Raisins&quot;. Lưu ý rằng vi&#234;̣c chuy&#234;̉n đ&#244;̉i sẽ được áp dụng cho mọi phi&#234;n bản văn bản trong bảng chuy&#234;̉n đ&#244;̉i. Với bảng chuy&#234;̉n đ&#244;̉i ở tr&#234;n, &quot;Grapes are sweet&quot; cũng được nhóm với &quot;Raisins are sweet&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tìm các giá trị đại diện cho vị trí của nhân viên.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Thực hiện nối các bảng trên các cột được cung cấp và cho ra kết quả nối trong một cột mới.",
        "Documentation.LongDescription": "Nối các hàng của <code>table1</code> với các hàng của <code>table2</code> dựa trên đẳng thức của các giá trị của các cột khóa được chọn bởi <code>key1</code> (cho <code>table1</code>) và <code>key2</code> (cho <code>table2</code>). Kết quả được nhập vào cột có tên <code>newColumnName</code>.\r\nHàm này hoạt động tương tự như Table.Join với JoinKind là LeftOuter ngoại trừ kết quả nối được trình bày theo kiểu lồng nhau chứ không phải kiểu làm phẳng.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Thêm một cột nối vào ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) có tên \"giá/mặt hàng\" từ bảng ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) được nối trên [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Thêm một khóa vào bảng.",
        "Documentation.LongDescription": "Thêm một khóa vào <code>table</code>, trong đó <code>columns</code> là danh sách bao gồm các tên cột xác định khóa và <code>isPrimary</code> chỉ định đó có phải là khóa chính không.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Thêm một khóa chính cột đơn vào bảng.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Nối một cột với xếp hạng của một hoặc nhiều cột khác.",
        "Documentation.LongDescription": "Nối một cột có tên <code>newColumnName</code> vào <code>table</code> với xếp hạng của một hoặc nhiều cột khác được mô tả bởi <code>comparisonCriteria</code>.\r\nNgười dùng nâng cao có thể dùng tùy chọn <code>options</code> RankKind để chọn một phương pháp xếp hạng cụ thể hơn.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Thêm cột có tên \"RevenueRank\" vào bảng xếp hạng cột \"Doanh thu\" từ cao nhất đến thấp nhất.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Gộp một cột của các bảng thành nhiều cột trong bảng chứa.",
        "Documentation.LongDescription": "Gộp các bảng trong <code>table</code>[<code>column</code>] thành nhiều cột chứa các giá trị gộp cho các bảng. <code>aggregations</code> được dùng để chỉ định các cột chứa các bảng sẽ tính gộp, các hàm tính gộp để áp dụng cho các bảng để tạo giá trị của các bảng đó và tên của các cột tính gộp sẽ tạo.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tính gộp các cột bảng trong <code>[t]</code> trong bảng <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> thành tổng của <code>[t.a]</code>, giá trị tối thiểu và tối đa của <code>[t.b]</code> và tổng số giá trị trong <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Giữ phần bù ban đầu rồi luân phiên lấy và bỏ qua các hàng theo sau.",
        "Documentation.LongDescription": "Giữ phần bù ban đầu rồi luân phiên lấy và bỏ qua các hàng theo sau.\r\n    <ul>\r\n       <li><code>table</code>: Bảng đầu vào.</li>\r\n       <li><code>offset</code>: Số lượng hàng sẽ giữ trước khi bắt đầu các lần lặp.</li>\r\n       <li><code>skip</code>: Số lượng hàng sẽ loại bỏ trong mỗi lần lặp.</li>\r\n       <li><code>take</code>: Số lượng hàng sẽ giữ trong mỗi lần lặp.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trả về một bảng từ bảng mà bắt đầu tại hàng đầu tiên, bảng đó bỏ qua 1 giá trị rồi giữ 1 giá trị.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Kết hợp các cột được chỉ định thành một cột mới bằng hàm kết hợp được chỉ định.",
        "Documentation.LongDescription": "Kết hợp các cột được chỉ định thành một cột mới bằng hàm kết hợp được chỉ định.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp họ và tên vào một cột mới, được phân tách bằng dấu phẩy.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Kết hợp các cột được chỉ định thành một cột có giá trị trong bản ghi mới, trong đó mỗi bản ghi chứa tên trường và giá trị tương ứng với tên cột và giá trị của các cột được kết hợp.",
        "Documentation.LongDescription": "Kết hợp các cột được chỉ định của <code>table</code> thành một cột mang giá trị bản ghi mới có tên là <code>newColumnName</code>, trong đó mỗi bản ghi có tên trường và giá trị tương ứng với tên cột và giá trị của các cột được kết hợp. Nếu chỉ định bản ghi cho <code>options</code>, có thể sẽ có các tùy chọn sau: \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: Khi chỉ định dưới dạng văn bản, cho biết tên cột đã cho phải được coi là tên hiển thị của bản ghi. Không cần phải là một trong các cột trong bản ghi. </li>\r\n     <li> <code>TypeName</code>: Khi được chỉ định dưới dạng văn bản, cung cấp tên loại lô-gic cho bản ghi kết quả có thể được sử dụng khi tải dữ liệu để thúc đẩy hành vi của môi trường tải. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Sao chép một cột có tên được chỉ định. Các giá trị và loại được sao chép từ cột nguồn.",
        "Documentation.LongDescription": "Sao chép cột có tên <code>columnName</code> tới bảng <code>table</code>. Các giá trị và loại cho cột <code>newColumnName</code> được sao chép từ cột <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Sao chép cột \"a\" tới một cột có tên \"cột được sao chép\" trong bảng <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Mở rộng một cột bản ghi thành các cột với từng giá trị.",
        "Documentation.LongDescription": "Cho <code>column</code> bản ghi trong đầu vào <code>table</code>, hãy tạo một bảng với một cột cho mỗi trường trong bản ghi. Có thể tùy chọn chỉ định <code>newColumnNames</code> để đảm bảo tên dành cho các cột trong bảng mới là duy nhất.\r\n    <ul>\r\n        <li><code>table</code>: Bảng gốc với cột bản ghi sẽ mở rộng. </li>\r\n        <li><code>column</code>: Cột sẽ mở rộng.</li>\r\n        <li><code>fieldNames</code>: Danh sách các trường sẽ mở rộng thành các cột trong bảng.</li>\r\n        <li><code>newColumnNames</code>: Danh sách tên cột sẽ đặt cho cột mới. Tên cột mới không được trùng lặp với bất kỳ cột nào trong bảng mới.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Mở rộng cột [a] trong bảng <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> thành 3 cột \"aa\", \"bb\" và \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Mở rộng một cột bản ghi hoặc một cột bảng thành nhiều cột trong bảng chứa.",
        "Documentation.LongDescription": "Mở rộng các bảng trong <code>table</code>[<code>column</code>] thành nhiều hàng và cột. <code>columnNames</code> được dùng để chọn các cột sẽ mở rộng từ bảng bên trong. Chỉ định <code>newColumnNames</code> để tránh xung đột giữa cột hiện có và cột mới.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Mở rộng các cột bảng trong <code>[a]</code> trong bảng <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> thành 3 cột <code>[t.a]</code>, <code>[t.b]</code> và <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Khớp các hàng trong bảng dựa trên phương pháp khớp mờ các từ khóa.",
        "Documentation.LongDescription": "Nhóm hàng <code>table</code> theo các giá trị khớp mờ trong cột được chỉ định, <code>key</code>, trong từng hàng.\r\n    Với mỗi hàng, sẽ có một bản ghi được xây dựng chứa các cột chính (và giá trị của chúng) cùng với mọi cột tổng hợp như được chỉ định bởi <code>aggregatedColumns</code>.\r\n    Hàm này không thể đảm bảo trả lại thứ tự hàng cố định.\r\n    <p>Một tập hợp tùy chọn thuộc <code>options</code> có thể được bao gồm để chỉ định cách so sánh các cột chính. Các tùy chọn bao gồm:\r\n    <ul>\r\n<li><code>Culture</code> : Cho ph&#233;p nh&#243;m bản ghi dựa tr&#234;n quy tắc cụ thể theo văn h&#243;a. Đ&#226;y c&#243; thể l&#224; bất kỳ t&#234;n văn h&#243;a hợp lệ nào. V&#237; dụ: một t&#249;y chọn Văn h&#243;a gồm c&#225;c bản ghi nh&#243;m &quot;ja-JP&quot; dựa tr&#234;n văn h&#243;a của người Nhật. Gi&#225; trị mặc định l&#224; &quot;&quot; có nh&#243;m dựa tr&#234;n văn h&#243;a của người Anh b&#226;́t bi&#234;́n.</li>\r\n<li><code>IgnoreCase</code> : Gi&#225; trị logic (true/false) cho ph&#233;p nh&#243;m khóa ph&#226;n biệt chữ hoa/thường. V&#237; dụ: khi là true, &quot;Grapes&quot; được nh&#243;m với &quot;grapes&quot;. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>IgnoreSpace</code> : Gi&#225; trị logic (true/false) cho ph&#233;p kết hợp c&#225;c phần văn bản để t&#236;m nh&#243;m. V&#237; dụ: khi là true, &quot;Gra pes&quot; được nh&#243;m với &quot;Grapes&quot;. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>SimilarityColumnName</code> : T&#234;n của cột hiển thị đ&#244;̣ tương tự giữa gi&#225; trị đầu v&#224;o v&#224; gi&#225; trị đại diện cho đầu v&#224;o đ&#243;. Gi&#225; trị mặc định l&#224; null, khi đ&#243; cột mới cho đ&#244;̣ tương tự sẽ kh&#244;ng được th&#234;m vào.</li>\r\n<li><code>Threshold</code> : Một số trong khoảng từ 0,00 đến 1,00 cho bi&#234;́t điểm tương đ&#244;̀ng m&#224; tại đ&#243; hai gi&#225; trị sẽ được nh&#243;m.\r\n    V&#237; dụ: &quot;Grapes&quot; v&#224; &quot;Graes&quot; (thiếu &quot;p&quot;) được nh&#243;m với nhau chỉ khi t&#249;y chọn n&#224;y được đặt th&#224;nh dưới 0,90.\r\n    Ngưỡng 1,00 chỉ cho ph&#233;p khớp ch&#237;nh x&#225;c.\r\n    (Lưu &#253; rằng một &quot;kết quả khớp ch&#237;nh x&#225;c&quot; gần đ&#250;ng c&#243; thể bỏ qua c&#225;c kh&#225;c biệt như viết hoa, thứ tự từ v&#224; dấu chấm c&#226;u.)\r\n    Gi&#225; trị mặc định l&#224; 0,80.</li>\r\n<li><code>TransformationTable</code> : Bảng cho phép nhóm các bản ghi dựa tr&#234;n các ánh xạ giá trị tùy chỉnh. Bảng sẽ chứa các c&#244;̣t &quot;From&quot; và &quot;To&quot;. Ví dụ: &quot;Grapes&quot; được nhóm với &quot;Raisins&quot; n&#234;́u bảng chuy&#234;̉n đ&#244;̉i được cung c&#226;́p có c&#244;̣t &quot;From&quot; chứa &quot;Grapes&quot; và c&#244;̣t &quot;To&quot; chứa &quot;Raisins&quot;. Lưu ý rằng vi&#234;̣c chuy&#234;̉n đ&#244;̉i sẽ được áp dụng cho mọi phi&#234;n bản văn bản trong bảng chuy&#234;̉n đ&#244;̉i. Với bảng chuy&#234;̉n đ&#244;̉i ở tr&#234;n, &quot;Grapes are sweet&quot; cũng được nhóm với &quot;Raisins are sweet&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Khớp bảng thêm cột tổng hợp [Số lượng] có chứa số nhân viên ở từng vị trí (\"each Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Nối các hàng từ hai bảng so khớp mờ với nhau dựa trên các khóa cho sẵn.",
        "Documentation.LongDescription": "<p>Nối các hàng <code>table1</code> với các hàng <code>table2</code> dựa trên phép khớp mờ những giá trị của cột chính do <code>key1</code> chọn (cho <code>table1</code>) và <code>key2</code> chọn (cho <code>table2</code>).</p>\r\n<p>Khớp mờ là một phép so sánh dựa trên sự tương đồng của văn bản chứ không phải sự ngang bằng.</p>\r\n<p>Theo mặc định, sẽ thực hiện phép nối trong, tuy nhiên, có thể đưa vào <code>joinKind</code> tùy chọn để chỉ định loại phép nối. Các tùy chọn bao gồm:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Có thể đưa vào tập hợp <code>joinOptions</code> tùy chọn để chỉ định cách so sánh những cột chính. Các tùy chọn bao gồm:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Một số trong khoảng từ 1 đến 8 cho bi&#234;́t số lu&#244;̀ng song song đ&#234;̉ sử dụng cho hoạt đ&#244;̣ng khớp mờ. Gi&#225; trị mặc định l&#224; 1.</li>\r\n<li><code>Culture</code> : Cho ph&#233;p nh&#243;m bản ghi dựa tr&#234;n quy tắc cụ thể theo văn h&#243;a. Đ&#226;y c&#243; thể l&#224; bất kỳ t&#234;n văn h&#243;a hợp lệ nào. V&#237; dụ: một t&#249;y chọn Văn h&#243;a gồm c&#225;c bản ghi khớp &quot;ja-JP&quot; dựa tr&#234;n văn h&#243;a của người Nhật. Gi&#225; trị mặc định l&#224; &quot;&quot; có k&#234;́t quả khớp dựa tr&#234;n văn h&#243;a của người Anh b&#226;́t bi&#234;́n.</li>\r\n<li><code>IgnoreCase</code> : Gi&#225; trị logic (true/false) cho ph&#233;p khớp khóa ph&#226;n biệt chữ hoa/thường. V&#237; dụ: khi là true, &quot;Grapes&quot; khớp với &quot;grapes&quot;. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>IgnoreSpace</code> : Gi&#225; trị logic (true/false) cho ph&#233;p kết hợp c&#225;c phần văn bản để t&#236;m kết quả khớp. V&#237; dụ: khi là true, &quot;Gra pes&quot; khớp với &quot;Grapes&quot;. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>NumberOfMatches</code> : Một số nguy&#234;n chỉ định số h&#224;ng khớp tối đa c&#243; thể được trả về cho m&#244;̃i hàng đ&#226;̀u vào. V&#237; dụ: Gi&#225; trị l&#224; 1 sẽ trả v&#234;̀ nhiều nhất một h&#224;ng khớp cho mỗi h&#224;ng đ&#226;̀u vào. Nếu kh&#244;ng cung cấp t&#249;y chọn này thì tất cả c&#225;c h&#224;ng khớp đ&#234;̀u được trả về.</li>\r\n<li><code>SimilarityColumnName</code> : T&#234;n của cột hiển thị đ&#244;̣ tương tự giữa gi&#225; trị đầu v&#224;o v&#224; gi&#225; trị đại diện cho đầu v&#224;o đ&#243;. Gi&#225; trị mặc định l&#224; null, khi đ&#243; cột mới cho đ&#244;̣ tương tự sẽ kh&#244;ng được th&#234;m vào.</li>\r\n<li><code>Threshold</code> : Một số trong khoảng từ 0,00 đến 1,00 cho bi&#234;́t điểm tương đ&#244;̀ng m&#224; tại đ&#243; hai gi&#225; trị sẽ khớp nhau.\r\n    V&#237; dụ: &quot;Grapes&quot; v&#224; &quot;Graes&quot; (thiếu &quot;p&quot;) được khớp với nhau chỉ khi t&#249;y chọn n&#224;y được đặt th&#224;nh dưới 0,90.\r\n    Ngưỡng 1,00 chỉ cho ph&#233;p khớp ch&#237;nh x&#225;c.\r\n    (Lưu &#253; rằng một &quot;kết quả khớp ch&#237;nh x&#225;c&quot; gần đ&#250;ng c&#243; thể bỏ qua c&#225;c kh&#225;c biệt như viết hoa, thứ tự từ v&#224; dấu chấm c&#226;u.)\r\n    Gi&#225; trị mặc định l&#224; 0,80.</li>\r\n<li><code>TransformationTable</code> : Bảng cho phép khớp các bản ghi dựa tr&#234;n các ánh xạ giá trị tùy chỉnh. Bảng sẽ chứa các c&#244;̣t &quot;From&quot; và &quot;To&quot;. Ví dụ: &quot;Grapes&quot; được khớp với &quot;Raisins&quot; n&#234;́u bảng chuy&#234;̉n đ&#244;̉i được cung c&#226;́p có c&#244;̣t &quot;From&quot; chứa &quot;Grapes&quot; và c&#244;̣t &quot;To&quot; chứa &quot;Raisins&quot;. Lưu ý rằng vi&#234;̣c chuy&#234;̉n đ&#244;̉i sẽ được áp dụng cho mọi phi&#234;n bản văn bản trong bảng chuy&#234;̉n đ&#244;̉i. Với bảng chuy&#234;̉n đ&#244;̉i ở tr&#234;n, &quot;Grapes are sweet&quot; cũng được khớp với &quot;Raisins are sweet&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Phép nối mờ bên trong ở bên trái của hai bảng dựa trên [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Thực hiện phép nối mờ bảng trên các cột được cung cấp và cho ra kết quả nối trong một cột mới.",
        "Documentation.LongDescription": "<p>Nối các hàng <code>table1</code> với các hàng <code>table2</code> dựa trên phép khớp mờ những giá trị của cột chính do <code>key1</code> chọn (cho <code>table1</code>) và <code>key2</code> chọn (cho <code>table2</code>). Kết quả sẽ được trả về trong một cột mới tên là <code>newColumnName</code>.</p>\r\n<p>Khớp mờ là một phép so sánh dựa trên sự giống nhau của văn bản chứ không phải sự ngang bằng.</p>\r\n<p><code>joinKind</code> tùy chọn sẽ chỉ định loại phép nối cần thực hiện. Theo mặc định, sẽ thực hiện phép nối ngoài bên trái nếu chưa chỉ định <code>joinKind</code>. Các tùy chọn bao gồm:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Có thể đưa vào tập hợp <code>joinOptions</code> tùy chọn để chỉ định cách so sánh những cột chính. Các tùy chọn bao gồm:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Một số trong khoảng từ 1 đến 8 cho bi&#234;́t số lu&#244;̀ng song song đ&#234;̉ sử dụng cho hoạt đ&#244;̣ng khớp mờ. Gi&#225; trị mặc định l&#224; 1.</li>\r\n<li><code>Culture</code> : Cho ph&#233;p nh&#243;m bản ghi dựa tr&#234;n quy tắc cụ thể theo văn h&#243;a. Đ&#226;y c&#243; thể l&#224; bất kỳ t&#234;n văn h&#243;a hợp lệ nào. V&#237; dụ: một t&#249;y chọn Văn h&#243;a gồm c&#225;c bản ghi khớp &quot;ja-JP&quot; dựa tr&#234;n văn h&#243;a của người Nhật. Gi&#225; trị mặc định l&#224; &quot;&quot; có k&#234;́t quả khớp dựa tr&#234;n văn h&#243;a của người Anh b&#226;́t bi&#234;́n.</li>\r\n<li><code>IgnoreCase</code> : Gi&#225; trị logic (true/false) cho ph&#233;p khớp khóa ph&#226;n biệt chữ hoa/thường. V&#237; dụ: khi là true, &quot;Grapes&quot; khớp với &quot;grapes&quot;. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>IgnoreSpace</code> : Gi&#225; trị logic (true/false) cho ph&#233;p kết hợp c&#225;c phần văn bản để t&#236;m kết quả khớp. V&#237; dụ: khi là true, &quot;Gra pes&quot; khớp với &quot;Grapes&quot;. Gi&#225; trị mặc định l&#224; true.</li>\r\n<li><code>NumberOfMatches</code> : Một số nguy&#234;n chỉ định số h&#224;ng khớp tối đa c&#243; thể được trả về cho m&#244;̃i hàng đ&#226;̀u vào. V&#237; dụ: Gi&#225; trị l&#224; 1 sẽ trả v&#234;̀ nhiều nhất một h&#224;ng khớp cho mỗi h&#224;ng đ&#226;̀u vào. Nếu kh&#244;ng cung cấp t&#249;y chọn này thì tất cả c&#225;c h&#224;ng khớp đ&#234;̀u được trả về.</li>\r\n<li><code>SimilarityColumnName</code> : T&#234;n của cột hiển thị đ&#244;̣ tương tự giữa gi&#225; trị đầu v&#224;o v&#224; gi&#225; trị đại diện cho đầu v&#224;o đ&#243;. Gi&#225; trị mặc định l&#224; null, khi đ&#243; cột mới cho đ&#244;̣ tương tự sẽ kh&#244;ng được th&#234;m vào.</li>\r\n<li><code>Threshold</code> : Một số trong khoảng từ 0,00 đến 1,00 cho bi&#234;́t điểm tương đ&#244;̀ng m&#224; tại đ&#243; hai gi&#225; trị sẽ khớp nhau.\r\n    V&#237; dụ: &quot;Grapes&quot; v&#224; &quot;Graes&quot; (thiếu &quot;p&quot;) được khớp với nhau chỉ khi t&#249;y chọn n&#224;y được đặt th&#224;nh dưới 0,90.\r\n    Ngưỡng 1,00 chỉ cho ph&#233;p khớp ch&#237;nh x&#225;c.\r\n    (Lưu &#253; rằng một &quot;kết quả khớp ch&#237;nh x&#225;c&quot; gần đ&#250;ng c&#243; thể bỏ qua c&#225;c kh&#225;c biệt như viết hoa, thứ tự từ v&#224; dấu chấm c&#226;u.)\r\n    Gi&#225; trị mặc định l&#224; 0,80.</li>\r\n<li><code>TransformationTable</code> : Bảng cho phép khớp các bản ghi dựa tr&#234;n các ánh xạ giá trị tùy chỉnh. Bảng sẽ chứa các c&#244;̣t &quot;From&quot; và &quot;To&quot;. Ví dụ: &quot;Grapes&quot; được khớp với &quot;Raisins&quot; n&#234;́u bảng chuy&#234;̉n đ&#244;̉i được cung c&#226;́p có c&#244;̣t &quot;From&quot; chứa &quot;Grapes&quot; và c&#244;̣t &quot;To&quot; chứa &quot;Raisins&quot;. Lưu ý rằng vi&#234;̣c chuy&#234;̉n đ&#244;̉i sẽ được áp dụng cho mọi phi&#234;n bản văn bản trong bảng chuy&#234;̉n đ&#244;̉i. Với bảng chuy&#234;̉n đ&#244;̉i ở tr&#234;n, &quot;Grapes are sweet&quot; cũng được khớp với &quot;Raisins are sweet&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Phép nối mờ bên trong ở bên trái của hai bảng dựa trên [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Nhóm các hàng trong bảng có cùng khóa.",
        "Documentation.LongDescription": "Nhóm các hàng <code>table</code> theo các cột có khóa được xác định bởi <code>key</code>. <code>key</code> có thể là tên của một cột hoặc tên của danh sách cột.\r\n    Đối với mỗi nhóm, mỗi bản ghi sẽ được xây dựng bao gồm các cột có khóa (và giá trị của các cột này), cùng với mọi cột tổng hợp do <code>aggregatedColumns</code> chỉ định.\r\n    Theo tùy chọn, <code>groupKind</code> và <code>comparer</code> cũng có thể được chỉ định.<br>\r\n    <br>\r\n    Nếu dữ liệu đã được sắp xếp theo các cột có khóa thì <code>groupKind</code> của GroupKind.Local có thể được cung cấp. Điều này có thể cải thiện hiệu suất gộp nhóm trong một số trường hợp,\r\n    vì tất cả các hàng có bộ giá trị khóa đã cho đều được cho là liền nhau.<br>\r\n    <br>\r\n    Khi chuyển <code>comparer</code>, lưu ý rằng nếu coi các khóa khác nhau là giống nhau thì một hàng có thể bị đặt trong một nhóm có khóa khác với khóa của hàng đó.<br>\r\n    <br>\r\n    Hàm này không đảm bảo thứ tự của các hàng trả về.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Nhóm bảng cộng thêm một cột tính gộp [total] chứa tổng số giá (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Chèn danh sách hàng vào bảng tại vị trí được chỉ định.",
        "Documentation.LongDescription": "Trả về một bảng có danh sách các hàng, <code>rows</code>, được chèn vào <code>table</code> tại vị trí định sẵn, <code>offset</code>. Mỗi cột trong hàng sẽ chèn phải khớp với loại cột của bảng.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Chèn một hàng vào bảng tại vị trí 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Chèn hai hàng vào bảng tại vị trí 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Nối các hàng từ hai bảng khớp nhau dựa trên các khóa cho sẵn.",
        "Documentation.LongDescription": "<p>Nối các hàng <code>table1</code> với các hàng <code>table2</code> dựa trên các giá trị bằng nhau trong các cột khóa được chọn bởi <code>key1</code> (cho <code>table1</code>) và <code>key2</code> (cho <code>table2</code>).</p>\r\n<p>Theo mặc định, loại nối trong sẽ được thực hiện, tuy nhiên, có thể bao gồm <code>joinKind</code> tùy chọn để chỉ định loại nối. Các tùy chọn gồm có:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Có thể bao gồm tập hợp <code>keyEqualityComparers</code> tùy chọn để chỉ định cách so sánh các cột khóa. Tham số này hiện chỉ dành để sử dụng nội bộ.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp hai bảng bằng một cột khóa duy nhất.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Nối hai bảng có tên cột xung đột, sử dụng nhiều cột khóa.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Trả về (các) hàng lớn nhất sử dụng tiêu chí cho sẵn.",
        "Documentation.LongDescription": "Trả về (các) hàng lớn nhất trong <code>table</code>, khi được cho sẵn <code>comparisonCriteria</code>.\r\n    Sau khi sắp xếp các hàng, phải chỉ định tham số <code>countOrCondition</code> để lọc thêm kết quả. Lưu ý: thuật toán sắp xếp không thể đảm bảo kết quả sắp xếp cố định. Tham số <code>countOrCondition</code> có thể có nhiều dạng:\r\n    <ul>\r\n        <li> Nếu một số được chỉ định, một danh sách tối đa <code>countOrCondition</code> mục theo thứ tự tăng dần được trả về. </li>\r\n        <li> Nếu một điều kiện được chỉ định, một danh sách các mục đáp ứng điều kiện được trả về. Khi một mục không đáp ứng điều kiện, không có mục nào khác được xem xét. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tìm hàng có giá trị lớn nhất trong cột [a] với điều kiện [a] > 0 trong bảng. Hàng được phân loại trước khi áp dụng bộ lọc.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Tìm hàng có giá trị lớn nhất trong cột [a] với điều kiện [b] > 0 trong bảng. Hàng được phân loại trước khi áp dụng bộ lọc.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Trả về (các) hàng nhỏ nhất sử dụng tiêu chí cho sẵn.",
        "Documentation.LongDescription": "Trả về (các) hàng nhỏ nhất trong <code>table</code>, khi được cho sẵn <code>comparisonCriteria</code>. Sau khi sắp xếp các hàng, phải chỉ định tham số <code>countOrCondition</code> để lọc thêm kết quả. Lưu ý: thuật toán sắp xếp không thể đảm bảo kết quả sắp xếp cố định. Tham số <code>countOrCondition</code> có thể có nhiều dạng:\r\n    <ul>\r\n        <li> Nếu một số được chỉ định, một danh sách tối đa <code>countOrCondition</code> mục theo thứ tự tăng dần được trả về. </li>\r\n        <li> Nếu một điều kiện được chỉ định, một danh sách các mục đáp ứng điều kiện được trả về. Khi một mục không đáp ứng điều kiện, không có mục nào khác được xem xét. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tìm hàng có giá trị nhỏ nhất trong cột [a] với điều kiện [a] < 3 trong bảng. Hàng được phân loại trước khi áp dụng bộ lọc.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Tìm hàng có giá trị nhỏ nhất trong cột [a] với điều kiện [b] < 0 trong bảng. Hàng được phân loại trước khi áp dụng bộ lọc.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Thực hiện nối các bảng trên các cột được cung cấp và cho ra kết quả nối trong một cột mới.",
        "Documentation.LongDescription": "<p>Nối các hàng <code>table1</code> với các hàng <code>table2</code> dựa trên các giá trị bằng nhau trong các cột khóa được chọn bởi <code>key1</code> (cho <code>table1</code>) và <code>key2</code> (cho <code>table2</code>). Các kết quả được nhập vào cột có tên là <code>newColumnName</code>.</p>\r\n<p><code>joinKind</code> tùy chọn chỉ định loại nối cần thực hiện. Theo mặc định, loại nối ngoài bên trái sẽ được thực hiện nếu bạn không chỉ định <code>joinKind</code>.</p>\r\n<p>Có thể bao gồm tập hợp <code>keyEqualityComparers</code> tùy chọn để chỉ định cách so sánh các cột khóa. Tính năng này hiện chỉ dành để sử dụng nội bộ.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp hai bảng bằng một cột khóa duy nhất.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Cho một cặp cột biểu thị cặp thuộc tính-giá trị, hãy xoay dữ liệu trong cột thuộc tính thành tiêu đề cột.",
        "Documentation.LongDescription": "Cho một cặp cột biểu thị cặp thuộc tính-giá trị, hãy xoay dữ liệu trong cột thuộc tính thành tiêu đề cột.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Lấy giá trị \"a\", \"b\" và \"c\" trong cột thuộc tính của bảng <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> và xoay các giá trị này thành cột riêng của chúng.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Lấy giá trị \"a\", \"b\" và \"c\" trong cột thuộc tính của bảng <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> và xoay các giá trị này thành cột riêng của chúng.  Thuộc tính \"c\" cho khóa \"x\" có nhiều giá trị liên kết đi kèm nên hãy sử dụng hàm List.Max để giải quyết xung đột.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Thay thế phạm vi hàng được chỉ định bằng (các) hàng được cung cấp.",
        "Documentation.LongDescription": "Thay thế số lượng hàng được chỉ định <code>count</code> trong đầu vào <code>table</code> bằng <code>rows</code> được chỉ định bắt đầu sau <code>offset</code>. Tham số <code>rows</code> là danh sách bản ghi.\r\n    <ul>\r\n       <li><code>table</code>: Bảng nơi thực hiện thay thế.</li>\r\n       <li><code>offset</code>: Số lượng hàng sẽ bỏ qua trước khi thực hiện thay thế.</li>\r\n       <li><code>count</code>: Số lượng hàng sẽ thay thế.</li>\r\n       <li><code>rows</code>: Danh sách các bản ghi hàng sẽ chèn vào <code>table</code> tại vị trí do <code>offset</code> chỉ định.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Bắt đầu tại vị trí 1, thay thế 3 hàng.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Thay thế một giá trị bằng một giá trị khác trong các cột được chỉ định.",
        "Documentation.LongDescription": "Thay thế <code>oldValue</code> bằng <code>newValue</code> các cột được chỉ định của <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Thay thế văn bản \"goodbye\" bằng \"world\" trong cột B, chỉ khớp với toàn bộ giá trị.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Thay thế văn bản \"ur\" bằng \"or\" trong cột B, khớp với bất kỳ phần nào của giá trị.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Ẩn danh tên nhân viên Hoa Kỳ.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Ẩn danh tất cả các cột của nhân viên Hoa Kỳ.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Tách các cột được chỉ định thành một tập hợp cột bổ sung bằng chức năng tách được chỉ định.",
        "Documentation.LongDescription": "Tách các cột được chỉ định thành một tập hợp cột bổ sung bằng chức năng tách được chỉ định.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tách cột [Name] tại vị trí của \"i\" thành hai cột",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Chuyển đổi tập hợp cột trong bảng thành các cặp thuộc tính-giá trị.",
        "Documentation.LongDescription": "Chuyển đổi tập hợp cột trong bảng thành các cặp thuộc tính-giá trị, kết hợp với các giá trị còn lại trong mỗi hàng.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Lấy các cột \"a\", \"b\" và \"c\" trong bảng <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> và hủy xoay chúng thành các cặp thuộc tính-giá trị.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Dịch tất cả các cột trừ bộ được chỉ định thành các cặp thuộc tính - giá trị.",
        "Documentation.LongDescription": "Dịch tất cả các cột trừ bộ được chỉ định thành các cặp thuộc tính - giá trị, kết hợp với các giá trị còn lại trong mỗi hàng.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Dịch tất cả các cột trừ bộ được chỉ định thành các cặp thuộc tính - giá trị, kết hợp với các giá trị còn lại trong mỗi hàng.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Phân tích cá nhân của Microsoft Teams",
        "Documentation.LongDescription": "<p>Trình kết nối phân tích của Teams cung cấp cho bạn thông tin chuyên sâu về mức sử dụng Teams. Có sẵn dữ liệu cho hoạt động trong Teams của cá nhân bạn cũng như của nhóm mà bạn là thành viên.</p>\r\n<p>Có sẵn dữ liệu cho 90 ngày trước đó. </p>\r\n<p> Để biết chi tiết về các loại dữ liệu có sẵn, vui lòng tham khảo tài liệu trợ giúp sau: </p>\r\n<ul>\r\n<li><b>Mức sử dụng Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Hoạt động của người dùng Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Nhập tên dự án và tổ chức.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Dịch vụ Azure DevOps",
        "Documentation.LongDescription": "Trả về một bảng bao gồm các nguồn cấp dữ liệu OData do Azure DevOps cung cấp."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Trả về một định dạng nhị phân đọc một giá trị nhị phân.",
        "Documentation.LongDescription": "Trả về một định dạng nhị phân đọc một giá trị nhị phân.  Nếu <code>length</code> được chỉ định, giá trị nhị phân sẽ chứa số lượng byte đó.  Nếu <code>length</code> không được chỉ định, giá trị nhị phân sẽ chứa số lượng byte còn lại đó.  <code>length</code> có thể được chỉ định là một số hoặc một định dạng nhị phân có độ dài đứng trước dữ liệu nhị phân.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Trả về giá trị logic dựa trên kiểm tra đẳng thức đối với hai giá trị cho sẵn.",
        "Documentation.LongDescription": "Trả về một giá trị <code>logical</code> dựa trên kiểm tra đẳng thức đối với hai giá trị cho sẵn, <code>x</code> và <code>y</code>, sử dụng <code>comparer</code> đã cho.\r\n      <div>\r\n        <code>comparer</code> là <code>Comparer</code>, dùng để kiểm soát việc so sánh.\r\n        Hàm so sánh chấp nhận hai đối số và trả về -1, 0 hoặc 1 dựa trên việc giá trị đầu tiên nhỏ hơn, bằng hay lớn hơn giá trị thứ hai.\r\n        Có thể dùng hàm so sánh để thực hiện các phép so sánh không phân biệt chữ hoa chữ thường hoặc có nhận thức về văn hóa và ngôn ngữ.\r\n      </div>\r\n      <div>\r\n        Các hàm so sánh tích hợp sau đây có sẵn bằng ngôn ngữ công thức:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Dùng để so sánh thứ tự chính xác</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Dùng để thực hiện phép so sánh thứ tự chính xác không phân biệt chữ hoa chữ thường</li>\r\n        <li> <code>Comparer.FromCulture</code>: Dùng để thực hiện phép so sánh có nhận thức về văn hóa</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "So sánh \"1\" và \"A\" bằng ngôn ngữ \"vi-VN\" để xác định xem các giá trị đó có bằng nhau hay không.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Trả về ngày và giờ hiện tại trong múi giờ địa phương. Giá trị này được cố định và sẽ không thay đổi với các lệnh gọi liên tiếp.",
        "Documentation.LongDescription": "Trả về một giá trị <code>datetime</code> được đặt thành ngày và giờ hiện tại trên hệ thống. Giá trị này được cố định và sẽ không thay đổi theo các lệnh gọi nối tiếp, chẳng hạn như DateTime.LocalNow - giá trị này có thể trả về các giá trị khác nhau trong quá trình thực thi một biểu thức.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Trả về ngày và giờ hiện tại trong múi giờ địa phương.",
        "Documentation.LongDescription": "Trả về một giá trị <code>datetime</code> được đặt thành ngày và giờ hiện tại trên hệ thống.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Trả về ngày & giờ hiện tại theo múi giờ địa phương. Giá trị này được cố định và sẽ không thay đổi theo các lệnh gọi nối tiếp.",
        "Documentation.LongDescription": "Trả về một giá trị <code>datetime</code> được đặt thành ngày và giờ hiện tại trên hệ thống. Giá trị trả về chứa thông tin múi giờ biểu thị múi giờ địa phương. Giá trị này được cố định và sẽ không thay đổi theo các lệnh gọi nối tiếp, chẳng hạn như DateTimeZone.LocalNow - giá trị này có thể trả về các giá trị khác nhau trong quá trình thực thi một biểu thức.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Trả về ngày và giờ hiện tại theo giờ UTC (múi giờ GMT). Giá trị này được cố định và sẽ không thay đổi theo các lệnh gọi nối tiếp.",
        "Documentation.LongDescription": "Trả về ngày và giờ hiện tại theo giờ UTC (múi giờ GMT). Giá trị này được cố định và sẽ không thay đổi theo các lệnh gọi nối tiếp.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Trả về ngày & giờ hiện tại theo múi giờ địa phương.",
        "Documentation.LongDescription": "Trả về giá trị <code>datetimezone</code> được đặt thành ngày và giờ hiện tại trên hệ thống.\r\n    Giá trị được trả về có chứa thông tin múi giờ thể hiện múi giờ địa phương.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Trả về ngày và giờ hiện tại theo giờ UTC (múi giờ GMT).",
        "Documentation.LongDescription": "Trả về ngày và giờ hiện tại theo giờ UTC (múi giờ GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Tải ngày và giờ hiện tại theo giờ UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Trả về mã định danh không rõ cho đánh giá hiện đang chạy.",
        "Documentation.LongDescription": "Trả về mã định danh không rõ cho đánh giá hiện đang chạy.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Trả về mã định danh không rõ ràng để đối chiếu các yêu cầu đến với các yêu cầu đi.",
        "Documentation.LongDescription": "Trả về mã định danh không rõ ràng để đối chiếu các yêu cầu đến với các yêu cầu đi.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Ghi mục nhập dấu vết và trả về giá trị nếu tính năng theo dõi được bật.",
        "Documentation.LongDescription": "Ghi <code>message</code> dấu vết và trả về <code>value</code> nếu tính năng theo dõi được bật. Một <code>delayed</code> tham số tùy chọn chỉ định xem có trì hoãn đánh giá <code>value</code> cho đến khi thông báo được theo dõi hay không. <code>traceLevel</code> có thể lấy một trong các giá trị sau:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Theo dõi thông báo trước khi gọi hàm Text.From và trả về kết quả.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Nhà cung cấp danh tính mặc định cho máy chủ hiện tại.",
        "Documentation.LongDescription": "Nhà cung cấp danh tính mặc định cho máy chủ hiện tại.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Tích lũy một giá trị tóm tắt từ các mục trong danh sách.",
        "Documentation.LongDescription": "Tích lũy một giá trị tóm tắt từ các mục trong danh sách <code>list</code> bằng cách sử dụng <code>accumulator</code>.\r\n    Có thể đặt một tham số dữ liệu nền tùy chọn <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Tích lũy giá trị tóm tắt từ các mục trong danh sách {1, 2, 3, 4, 5} bằng cách sử dụng ((state, current) => state + current ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Tạo danh sách các giá trị datetimezone được cho sẵn một giá trị ban đầu, tổng cộng và giá thị thời lượng tăng dần.",
        "Documentation.LongDescription": "Trả về một danh sách giá trị <code>datetimezone</code> có kích cỡ là <code>count</code>, bắt đầu tại <code>start</code>. Số gia cho sẵn, <code>step</code>, là giá trị <code>duration</code> được thêm vào mọi giá trị.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách chứa 10 giá trị bắt đầu từ 5 phút trước Ngày Tết (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) tăng với số gia là 1 phút (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Tạo danh sách các giá trị datetime được cho sẵn một giá trị ban đầu, tổng cộng và giá thị thời lượng tăng dần.",
        "Documentation.LongDescription": "Trả về một danh sách giá trị <code>datetime</code> có kích cỡ là <code>count</code>, bắt đầu tại <code>start</code>. Số gia cho sẵn, <code>step</code>, là giá trị <code>duration</code> được thêm vào mọi giá trị.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách chứa 10 giá trị bắt đầu từ 5 phút trước Ngày Tết (#datetime(2011, 12, 31, 23, 55, 0)) tăng với số gia là 1 phút (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Tạo danh sách giá trị ngày chứa một giá trị ban đầu, tổng cộng và giá thị thời lượng tăng dần.",
        "Documentation.LongDescription": "Trả về một danh sách giá trị <code>date</code> có kích cỡ là <code>count</code>, bắt đầu tại <code>start</code>. Số gia cho sẵn, <code>step</code>, là giá trị <code>duration</code> được thêm vào mọi giá trị.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách chứa 5 giá trị bắt đầu từ Đêm giao thừa (#date(2011, 12, 31)) tăng với số gia là 1 ngày (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Tạo một danh sách chứa các giá trị khoảng thời gian khi được cho sẵn một giá trị ban đầu, tổng cộng và giá trị khoảng thời gian tăng dần.",
        "Documentation.LongDescription": "Trả về một danh sách giá trị <code>count</code> <code>duration</code>, bắt đầu tại <code>start</code> và tăng theo số gia <code>duration</code> <code>step</code> cho sẵn.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách chứa 5 giá trị bắt đầu từ 1 giờ và tăng theo số gia là một giờ.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Tạo danh sách giá trị.",
        "Documentation.LongDescription": "Tạo một danh sách giá trị bằng các hàm được cung cấp. Hàm <code>initial</code> tạo giá trị ứng viên ban đầu mà sau đó được kiểm tra dựa trên <code>condition</code>.\r\n    Nếu giá trị ứng viên được chấp nhận thì giá trị đó sẽ trở về trong danh sách kết quả và giá trị ứng viên tiếp theo sẽ được tạo bằng cách chuyển giá trị mới chấp nhận sang <code>next</code>.\r\n    Sau khi một giá trị ứng viên không khớp với <code>condition</code>, quy trình tạo danh sách sẽ dừng.\r\n    Một tham số tùy chọn, <code>selector</code>, có thể được cung cấp để chuyển đổi các mục trong danh sách kết quả.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách bằng cách bắt đầu từ 10, giảm liên tục 1 mục và đảm bảo mỗi mục lớn hơn 0.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Tạo một danh sách bản ghi chứa x và y, trong đó x là giá trị và y là danh sách. x phải nhỏ hơn 10 và biểu thị số lượng mục trong danh sách y. Sau khi danh sách được tạo, chỉ trả về các giá trị x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Chèn các giá trị vào danh sách tại chỉ mục cho sẵn.",
        "Documentation.LongDescription": "Trả về một danh sách mới được tạo bằng cách chèn các giá trị trong <code>values</code> vào <code>list</code> tại <code>index</code>. Vị trí đầu tiên trong danh sách là tại chỉ mục 0.\r\n      <ul>\r\n        <li><code>list</code>: Danh sách mục tiêu nơi các giá trị sẽ được chèn.</li>\r\n        <li><code>index</code>: Chỉ mục của danh sách mục tiêu(<code>list</code>) nơi các giá trị sẽ được chèn. Vị trí đầu tiên trong danh sách là tại chỉ mục 0.</li>\r\n        <li><code>values</code>: Danh sách các giá trị sẽ được chèn vào <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Chèn danh sách ({3, 4}) vào danh sách mục tiêu ({1, 2, 5}) tại chỉ mục 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Chèn một danh sách bằng một danh sách lồng nhau ({1, {1.1, 1.2}}) vào một danh sách đích ({2, 3, 4}) tại chỉ mục 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Thay thế tổng số các giá trị bắt đầu tại vị trí bằng các giá trị thay thế.",
        "Documentation.LongDescription": "Thay thế <code>count</code> giá trị trong <code>list</code> bằng danh sách <code>replaceWith</code>, bắt đầu tại vị trí cụ thể là <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Thay thế {7, 8, 9} trong danh sách {1, 2, 7, 8, 9, 5} bằng {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Tìm kiếm giá trị cụ thể trong một danh sách và thay thế giá trị đó.",
        "Documentation.LongDescription": "Trong danh sách giá trị <code>list</code>, tìm giá trị <code>oldValue</code> và thay thế mỗi lần xuất hiện bằng giá trị thay thế <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Thay thế tất cả giá trị \"a\" trong danh sách {\"a\", \"B\", \"a\", \"a\"} bằng \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Tạo danh sách các giá trị time được cho sẵn một giá trị ban đầu, tổng cộng và giá thị thời lượng tăng dần.",
        "Documentation.LongDescription": "Trả về một danh sách giá trị <code>time</code> có kích cỡ là <code>count</code>, bắt đầu tại <code>start</code>. Số gia cho sẵn, <code>step</code>, là giá trị <code>duration</code> được thêm vào mọi giá trị.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách chứa 4 giá trị bắt đầu từ noon (#time(12, 0, 0)) tăng lên theo số gia là một giờ (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Trả về một danh sách có các phần tử được chuyển đổi từ danh sách đầu vào bằng hàm được chỉ định.",
        "Documentation.LongDescription": "Trả về một danh sách có các phần tử được chiếu từ danh sách đầu vào.<br>\r\n    <br>\r\n    Hàm <code>collectionTransform</code> chuyển đổi từng phần tử thành một danh sách trung gian và hàm <code>resultTransform</code> nhận phần tử gốc cũng như mục từ danh sách trung gian để xây dựng kết quả cuối cùng.<br>\r\n    <br>\r\n    Hàm <code>collectionTransform</code> có chữ ký <code>(x bất kỳ) dưới dạng danh sách => ...</code>,  trong đó <code>x</code> là một phần tử trong <code>list</code>.\r\n    Hàm <code>resultTransform</code> chiếu hình dạng của kết quả và có chữ ký <code>(x bất kỳ, y bất kỳ) dưới dạng bất kỳ => ...</code>, trong đó <code>x</code> là phần tử trong <code>list</code> và <code>y</code> là phần tử từ danh sách được tạo bằng cách chuyển <code>x</code> đến <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Làm phẳng danh sách người và thú cưng của họ.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Trả về một số ngẫu nhiên.",
        "Documentation.LongDescription": "Trả về một số ngẫu nhiên nằm trong khoảng từ 0 đến 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Nhận một số ngẫu nhiên.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.LongDescription": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Thêm trường vào bản ghi.",
        "Documentation.LongDescription": "Thêm trường vào bản ghi <code>record</code> khi được cho sẵn tên của trường là <code>fieldName</code> và giá trị <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Thêm trường Địa chỉ vào bản ghi.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Thay thế văn bản trong đầu vào được cung cấp.",
        "Documentation.LongDescription": "Thay thế văn bản <code>old</code> trong <code>text</code> gốc bằng văn bản <code>new</code>. Có thể sử dụng hàm thay thế này trong <code>List.ReplaceValue</code> và <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Thay thế văn bản \"hE\" bằng \"He\" trong chuỗi \"hEllo world\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Thay thế các giá trị trong đầu vào được cung cấp.",
        "Documentation.LongDescription": "Thay thế giá trị <code>old</code> trong <code>value</code> gốc bằng giá trị <code>new</code>. Có thể sử dụng hàm thay thế này trong <code>List.ReplaceValue</code> và <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Thay thế giá trị 11 bằng giá trị 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Trả về kết quả JSON từ API Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Gọi đến API REST Smartsheet 2.0 tại điểm cuối được chỉ định và trả về kết quả dưới dạng bản ghi JSON.",
        "Documentation.Examples": [
          {
            "Description": "Gọi ra dữ liệu từ điểm cuối API Smartsheet của trang tính với đối số bổ sung được chỉ định",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Bảng bao gồm thông tin trang tính được API Smartsheet trả về"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Trả về một hàm không phân tách, không trả về đối số dưới dạng danh sách phần tử đơn.",
        "Documentation.LongDescription": "Trả về một hàm không phân tách, không trả về đối số dưới dạng danh sách phần tử đơn.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Trả về một hàm tách văn bản thành một danh sách văn bản tại dấu cách.",
        "Documentation.LongDescription": "Trả về một hàm tách văn bản thành một danh sách văn bản tại dấu cách.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tách dữ liệu đầu vào bằng các khoảng trắng, coi dấu ngoặc kép như tất cả các ký tự khác.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Phân hoạch bảng thành danh sách các bảng dựa trên số lượng nhóm và cột được chỉ định.",
        "Documentation.LongDescription": "Phân hoạch <code>table</code> thành danh sách số lượng bảng <code>groups</code> dựa trên giá trị của <code>column</code> và hàm <code>hash</code>.\r\n    Hàm <code>hash</code> được áp dụng cho giá trị của hàng <code>column</code> để lấy giá trị băm cho hàng. Modulo giá trị băm <code>groups</code> xác định hàng sẽ được đưa vào bảng nào được trả về.\r\n    <ul>\r\n       <li><code>table</code>: Bảng sẽ phân hoạch.</li>\r\n       <li><code>column</code>: Cột sẽ băm để xác định hàng nằm trong bảng nào được trả về.</li>\r\n       <li><code>groups</code>: Số lượng bảng mà bảng đầu vào sẽ được phân hoạch thành.</li>\r\n       <li><code>hash</code>: Hàm được áp dụng để lấy giá trị băm.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Phân hoạch bảng <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> thành 2 bảng trên cột [a] sử dụng giá trị của các cột ở dạng hàm băm.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Trả về phần của <code>text</code> giữa <code>startDelimiter</code> và <code>endDelimiter</code> được chỉ định.\r\n    <code>startIndex</code> dạng số tùy chỉnh cho biết số lần xuất hiện của <code>startDelimiter</code> sẽ được xem xét.\r\n    Danh sách tùy chọn <code>startIndex</code> cho biết lần xuất hiện nào của <code>startDelimiter</code> sẽ được xem xét, cũng như việc đánh chỉ mục có được thực hiện tính từ đầu hoặc cuối của đầu vào hay không.\r\n    <code>endIndex</code> cũng tương tự, ngoại trừ việc đánh chỉ mục được thực hiện có liên quan đến <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Lấy phần của \"111 (222) 333 (444)\" giữa dấu ngoặc tròn mở (đầu tiên) và ngoặc tròn đóng (đầu tiên) tiếp theo.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Lấy phần của \"111 (222) 333 (444)\" giữa dấu ngoặc tròn mở thứ hai và dấu ngoặc tròn đóng đầu tiên tiếp theo.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Lấy phần của \"111 (222) 333 (444)\" giữa dấu ngoặc tròn mở thứ hai tính từ cuối và dấu ngoặc tròn đóng thứ hai tiếp theo.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Chèn một giá trị văn bản vào một giá trị khác tại một vị trí cho sẵn.",
        "Documentation.LongDescription": "Trả về kết quả chèn giá trị văn bản <code>newText</code> vào một giá trị văn bản <code>text</code> tại vị trí <code>offset</code>. Vị trí bắt đầu tại số 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Chèn \"C\" giữa \"B\" và \"D\" trong \"ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Trả về một mã định danh duy nhất toàn cầu mới, ngẫu nhiên (GUID).",
        "Documentation.LongDescription": "Trả về một mã định danh duy nhất toàn cầu mới, ngẫu nhiên (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Thay thế tất cả những lần xuất hiện của chuỗi con cụ thể trong văn bản.",
        "Documentation.LongDescription": "Trả về kết quả thay thế tất cả những lần xuất hiện của giá trị văn bản <code>old</code> trong giá trị văn bản <code>text</code> bằng giá trị văn bản <code>new</code>. Hàm này phân biệt chữ hoa/chữ thường.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Thay thế mọi lần xuất hiện của \"the\" trong câu bằng \"a\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Loại bỏ một dãy ký tự và chèn một giá trị mới tại vị trí được chỉ định.",
        "Documentation.LongDescription": "Trả về kết quả loại bỏ một số ký tự, <code>count</code>, khỏi giá trị văn bản <code>text</code> bắt đầu tại vị trí <code>offset</code> rồi chèn giá trị văn bản <code>newText</code> tại cùng vị trí vào <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Thay thế một ký tự đơn lẻ tại vị trí 2 trong giá trị văn bản \"ABGF\" bằng giá trị văn bản mới \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Thêm một khóa vào loại bảng cho sẵn.",
        "Documentation.LongDescription": "Thêm một khóa vào loại bảng cho sẵn.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Trả về danh sách danh tính mà điều kiện sẽ chấp nhận.",
        "Documentation.LongDescription": "<p>Việc sử dụng <code>identityProvider</code> được chỉ định sẽ chuyển đổi <code>condition</code> thành danh sách danh tính mà <code>condition</code> sẽ trả về <code>true</code> trong tất cả các ngữ cảnh ủy quyền, trong đó <code>identityProvider</code> là nhà cung cấp danh tính. Sẽ xảy ra lỗi nếu không thể chuyển đổi <code>condition</code> thành danh sách danh tính, ví dụ: nếu <code>condition</code> tham khảo các thuộc tính không phải danh tính người dùng hoặc nhóm để đưa ra quyết định.</p>\r\n    <p>Lưu ý rằng danh sách danh tính thể hiện các danh tính giống hệt như trong <code>condition</code> và không được chuẩn hóa (chẳng hạn như mở rộng nhóm).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.LongDescription": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Nén giá trị nhị phân bằng cách sử dụng loại nén đã cho.",
        "Documentation.LongDescription": "Nén giá trị nhị phân bằng loại nén đã cho. Kết quả của lệnh gọi này là bản sao dữ liệu đầu vào ở dạng nén. Các loại nén bao  gồm:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Nén giá trị nhị phân.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Giải nén giá trị nhị phân bằng cách sử dụng loại nén đã cho.",
        "Documentation.LongDescription": "Giải nén giá trị nhị phân bằng loại nén đã cho. Kết quả của lệnh gọi này là bản sao dữ liệu đầu vào ở dạng giải nén. Các loại nén bao  gồm:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Giải nén giá trị nhị phân.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Trả về tập hợp con của giá trị nhị phân bắt đầu tại phần bù.",
        "Documentation.LongDescription": "Trả về tập hợp con của giá trị nhị phân bắt đầu tại phần bù <code>binary</code>. Tham số tùy chọn <code>offset</code> quy định độ dài tối đa của tập hợp con.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Trả về tập hợp con của giá trị nhị phân bắt đầu tại phần bù 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Trả về tập hợp con có độ dài 2 từ phần bù 6 của giá trị nhị phân.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Tách nhị phân đã chỉ định thành danh sách các nhị phân sử dụng kích thước trang đã chỉ định.",
        "Documentation.LongDescription": "Tách <code>binary</code> thành danh sách các nhị phân, nơi phần tử đầu tiên của danh sách đầu ra là nhị phân chứa byte <code>pageSize</code> đầu tiên từ\r\n    nhị phân nguồn, phần tử tiếp theo của danh sách đầu ra là nhị phân chứa byte <code>pageSize</code> tiếp theo từ nhị phân nguồn, v.v.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Tạo hoặc mở rộng nhị phân với trình xử lý do người dùng xác định cho các phép toán truy vấn và thao tác.",
        "Documentation.LongDescription": "<p>Trả về dạng xem <code>binary</code> khi hàm được chỉ định trong <code>handlers</code> được sử dụng thay cho hành vi mặc định của một thao tác khi thao tác được áp dụng cho dạng xem.</p>\r\n<p>Nếu <code>binary</code> được cung cấp, tất cả hàm trình điều khiển đều không bắt buộc. Nếu <code>binary</code> không được cung cấp, yêu cầu có các hàm trình điều khiển <code>GetStream</code>. Nếu hàm trình điều khiển không được chỉ định cho một thao tác, hành vi mặc định của thao tác được áp dụng cho <code>binary</code> (trừ trường hợp <code>GetExpression</code>).</p>\r\n<p>Các hàm trình điều khiển phải trả về giá trị tương đương về mặt ngữ nghĩa với kết quả áp dụng thao tác dựa trên <code>binary</code> (hoặc dạng xem có được trong trường hợp <code>GetExpression</code>).</p>\r\n<p>Nếu hàm trình điều khiển phát sinh lỗi, hành vi mặc định của thao tác được áp dụng cho dạng xem.</p>\r\n<p><code>Binary.View</code> có thể được sử dụng để triển khai việc gộp vào nguồn dữ liệu – bản dịch của truy vấn M sang phép toán theo nguồn (ví dụ: để tải xuống một phần của tệp).</p>\r\n<p>Tham khảo tài liệu về trình kết nối tùy chỉnh Power Query để biết mô tả đầy đủ hơn về <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Tạo dạng xem cơ bản không yêu cầu truy nhập dữ liệu để xác định độ dài.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Trả về định dạng nhị phân có thứ tự byte do hàm chỉ định.",
        "Documentation.LongDescription": "Trả về một định dạng nhị phân có thứ tự byte do <code>binaryFormat</code> chỉ định.  Thứ tự byte mặc định là <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Trả về một định dạng nhị phân chọn định dạng nhị phân tiếp theo dựa trên một giá trị đã được đọc.",
        "Documentation.LongDescription": "Trả về một định dạng nhị phân chọn định dạng nhị phân tiếp theo dựa trên một giá trị đã được đọc.  Giá trị định dạng nhị phân do hàm này tạo hoạt động ở các giai đoạn:<ul>\r\n<li>Định dạng nhị phân do tham số <code>binaryFormat</code> chỉ định được dùng để đọc giá trị.</li>\r\n<li>Giá trị được chuyển tới hàm lựa chọn do tham số <code>chooseFunction</code> chỉ định.</li>\r\n<li>Hàm lựa chọn kiểm tra giá trị và trả về định dạng nhị phân thứ hai.</li>\r\n<li>Định dạng nhị phân thứ hai đường dùng để đọc giá trị thứ hai.</li>\r\n<li>Nếu hàm kết hợp được chỉ định thì giá trị đầu tiên và giá trị thứ hai được chuyển tới hàm kết hợp và giá trị kết quả được trả về.</li>\r\n<li>Nếu hàm kết hợp không được chỉ định thì giá trị thứ hai được trả về.</li>\r\n<li>Giá trị thứ hai được trả về.</li>\r\n</ul>Tham số <code>type</code> tùy chọn cho biết loại định dạng nhị phân mà hàm lựa chọn sẽ trả về.  <code>type any</code>, <code>type list</code> hoặc <code>type binary</code> có thể được chỉ định.  Nếu tham số <code>type</code> không được chỉ định thì <code>type any</code> được sử dụng.   Nếu <code>type list</code> hoặc <code>type binary</code> được sử dụng thì hệ thống có thể trả về giá trị <code>binary</code> hoặc <code>list</code> được truyền thay vì giá trị được tải, loại giá trị này có thể làm giảm số lượng bộ nhớ cần dùng để đọc định dạng.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Đọc danh sách byte nơi byte đầu tiên quyết định số lượng phần tử.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Đọc danh sách byte nơi byte đầu tiên quyết định số lượng phần tử và bảo toàn byte đầu tiên được đọc.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Đọc danh sách byte nơi byte đầu tiên quyết định số lượng phần tử bằng cách sử dụng danh sách truyền.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Trả về một định dạng nhị phân đọc một nhóm mục.",
        "Documentation.LongDescription": "Các tham số như sau:\r\n<ul>\r\n<li>Tham số <code>binaryFormat</code> chỉ định định dạng nhị phân của giá trị khóa.</li>\r\n<li>Tham số <code>group</code> cung cấp thông tin về nhóm mục đã biết.</li>\r\n<li>Tham số <code>extra</code> tùy chọn có thể dùng để chỉ định một hàm sẽ trả về một giá trị định dạng nhị phân cho giá trị theo sau bất kỳ khóa nào ngoài dự kiến. Nếu tham số <code>extra</code> không được chỉ định thì lỗi sẽ được thông báo nếu có các giá trị khóa ngoài dự kiến.</li>\r\n</ul>\r\nTham số <code>group</code> chỉ định danh sách định nghĩa mục. Mỗi định nghĩa mục là một danh sách chứa 3-5 giá trị như sau:\r\n<ul>\r\n<li>Giá trị khóa. Giá trị của khóa tương ứng với mục. Giá trị này phải là duy nhất trong tập hợp mục.</li>\r\n<li>Định dạng mục. Định dạng nhị phân tương ứng với giá trị của mục. Giá trị này cho phép mỗi mục có một định dạng khác nhau. </li>\r\n<li>Lần xuất hiện mục. Giá trị <code>BinaryOccurrence.Type</code> cho số lần một mục được dự kiến sẽ xuất hiện trong nhóm. Nếu không có các mục bắt buộc thì sẽ xảy ra lỗi. Các mục trùng lặp bắt buộc hoặc tùy chọn được xử lý như các giá trị khóa ngoài dự kiến.</li>\r\n<li>Giá trị mục mặc định (tùy chọn). Nếu giá trị mục mặc định xuất hiện trong danh sách định nghĩa mục và không phải là giá trị rỗng thì giá trị đó sẽ được sử dụng thay cho giá trị mặc định. Nếu giá trị mặc định cho mục lặp hoặc tùy chọn là giá trị rỗng thì giá trị mặc định cho giá trị lặp là danh sách trống { }.</li>\r\n<li>Chuyển đổi giá trị mục (tùy chọn). Nếu hàm chuyển đổi giá trị mục xuất hiện trong danh sách định nghĩa mục và không phải là giá trị rỗng thì hàm đó sẽ được gọi để chuyển đổi giá trị mục trước khi giá trị đó được trả về. Hàm chuyển đổi chỉ được gọi nếu mục xuất hiện trong đầu vào (hàm này sẽ không bao giờ được gọi bằng giá trị mặc định). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Các trường hợp sau đây giả định là một giá trị khóa có một byte đơn với 4 mục dự kiến trong nhóm, tất cả các mục này đều có một byte dữ liệu theo sau khóa.  Các mục này xuất hiện trong đầu vào như sau:\r\n<ul>\r\n<li>Khóa 1 là bắt buộc và xuất hiện với giá trị 11.</li>\r\n<li>Khóa 2 lặp lại và xuất hiện hai lần với giá trị 22, cho kết quả là một giá trị { 22, 22 }.</li>\r\n<li>Khóa 3 là tùy chọn và không xuất hiện, cho kết quả là một giá trị rỗng.</li>\r\n<li>Khóa 4 lặp lại nhưng không xuất hiện, cho kết quả là một giá trị { }.</li>\r\n<li>Khóa 5 không thuộc nhóm nhưng xuất hiện một lần với giá trị 55.  Hàm bổ sung được gọi bằng giá trị khóa 5 và trả về định dạng tương ứng với giá trị đó (BinaryFormat.Byte).  Giá trị 55 được đọc và bị bỏ.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Ví dụ sau đây minh họa chuyển đổi giá trị mục và giá trị mục mặc định.   Mục lặp có khóa 1 tính tổng của danh sách giá trị được đọc bằng hàm List.Sum.  Mục tùy chọn có khóa 2 có giá trị mặc định là 123 thay vì giá trị rỗng.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Trả về một định dạng nhị phân giới hạn số lượng dữ liệu có thể đọc.",
        "Documentation.LongDescription": "Trả về một định dạng nhị phân giới hạn số lượng dữ liệu có thể đọc.  Cả <code>BinaryFormat.List</code> và <code>BinaryFormat.Binary</code> đều có thể dùng để đọc đến cuối dữ liệu.  <code>BinaryFormat.Length</code> có thể dùng để giới hạn số lượng byte được đọc.  Tham số <code>binaryFormat</code> chỉ định định dạng nhị phân để giới hạn.  Tham số <code>length</code> chỉ định số byte để đọc.  Tham số <code>length</code> có thể là một giá trị số hoặc một giá trị định dạng nhị phân chỉ định định dạng của giá trị độ dài xuất hiện và đứng trước giá trị được đọc.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Giới hạn số lượng byte được đọc là 2 khi đọc một danh sách byte.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Giới hạn số lượng byte được đọc khi đọc một danh sách byte ở giá trị byte đứng trước danh sách.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Trả về một định dạng nhị phân sẽ chuyển đổi các giá trị được đọc bởi một định dạng nhị phân khác.",
        "Documentation.LongDescription": "Trả về một định dạng nhị phân sẽ chuyển đổi các giá trị được đọc bởi một định dạng nhị phân khác.  Tham số <code>binaryFormat</code> chỉ định định dạng nhị phân sẽ được dùng để đọc giá trị.  <code>function</code> được gọi ra bằng giá trị được đọc và trả về giá trị được chuyển đổi.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Đọc một byte và thêm một byte vào đó.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Trả về hàm so sánh sử dụng các quy tắc Thứ tự để so sánh các giá trị.",
        "Documentation.LongDescription": "Trả về hàm so sánh sử dụng quy tắc Thứ tự để so sánh các giá trị đã cho <code>x</code> và <code>y</code>.<br>\r\n      <br>\r\n      Hàm so sánh chấp nhận hai đối số và trả về -1, 0 hoặc 1 dựa vào việc liệu giá trị đầu tiên nhỏ hơn, bằng hay lớn hơn giá trị thứ hai.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Sử dụng quy tắc Thứ tự, so sánh xem \"encyclopædia\" và \"encyclopaedia\" có tương đồng hay không. Lưu ý: các giá trị này tương đồng khi sử dụng <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Trả về một hàm trình so sánh không phân biệt chữ hoa chữ thường sử dụng quy tắc Thứ tự để so sánh giá trị.",
        "Documentation.LongDescription": "Trả về hàm so sánh không phân biệt chữ hoa chữ thường sử dụng quy tắc Thứ tự để so sánh các giá trị đã cho <code>x</code> và <code>y</code>.<br>\r\n        <br>\r\n        Hàm so sánh chấp nhận hai đối số và trả về -1, 0 hoặc 1 dựa vào việc liệu giá trị đầu tiên nhỏ hơn, bằng hay lớn hơn giá trị thứ hai.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Sử dụng quy tắc Thứ tự không phân biệt chữ hoa chữ thường, so sánh \"Abc\" với \"abc\". Lưu ý \"Abc\" nhỏ hơn \"abc\" sử dụng <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Trả về tính chất của thuộc tính chiều.",
        "Documentation.LongDescription": "Trả về tính chất <code>propertyName</code> của thuộc tính chiều <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Trả về thuộc tính của giá trị đo (thuộc tính của ô).",
        "Documentation.LongDescription": "Trả về thuộc tính <code>propertyName</code> của giá trị đo <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Nguồn truy vấn SQL Databricks",
        "Documentation.LongDescription": "Xác định nguồn dữ liệu Databricks để chạy truy vấn SQL"
      },
      "ReturnType": "Truy vấn SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Nguồn truy vấn SQL Databricks",
        "Documentation.LongDescription": "Xác định nguồn dữ liệu Databricks để chạy truy vấn SQL"
      },
      "ReturnType": "Truy vấn SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Thêm các ngày được chỉ định vào ngày.",
        "Documentation.LongDescription": "Trả về kết quả <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> khi thêm <code>numberOfDays</code> ngày vào giá trị <code>datetime</code><code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> mà các ngày đang được thêm.</li>\r\n      <li><code>numberOfDays</code>: Số ngày sẽ thêm.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Thêm 5 ngày vào giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> biểu thị ngày 5/14/2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Thêm các tháng được chỉ định vào ngày.",
        "Documentation.LongDescription": "Trả về kết quả <code>date</code>, <code>datetime</code>, hoặc <code>datetimezone</code> khi thêm <code>numberOfMonths</code> tháng vào giá trị <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code>, hoặc <code>datetimezone</code> đã thêm số tháng vào.</li>\r\n        <li><code>numberOfMonths</code>: Số tháng cần thêm.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Thêm 5 tháng vào giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> biểu thị ngày 5/14/2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Thêm 18 tháng vào giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> biểu thị ngày và giờ là 5/14/2011 08:15:22 SA.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Thêm các quý được chỉ định vào ngày.",
        "Documentation.LongDescription": "Trả về kết quả <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> khi thêm <code>numberOfQuarters</code> quý vào giá trị <code>datetime</code><code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> mà các quý đang được thêm.</li>\r\n      <li><code>numberOfQuarters</code>: Số quý sẽ thêm.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Thêm 1 quý vào giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> biểu thị ngày 5/14/2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Thêm các tuần được chỉ định vào ngày.",
        "Documentation.LongDescription": "Trả về kết quả <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> khi thêm <code>numberOfWeeks</code> tuần vào giá trị <code>datetime</code><code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> mà các tuần đang được thêm.</li>\r\n      <li><code>numberOfWeeks</code>: Số tuần sẽ thêm.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Thêm 2 tuần vào giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> biểu thị ngày 5/14/2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Thêm các năm được chỉ định vào ngày.",
        "Documentation.LongDescription": "Trả về kết quả <code>date</code>, <code>datetime</code>, hoặc <code>datetimezone</code> khi thêm <code>numberOfYears</code> vào giá trị <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code>, hoặc <code>datetimezone</code> đã thêm năm vào.</li>\r\n        <li><code>numberOfYears</code>: Số năm cần thêm.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Thêm 4 năm vào giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> biểu thị giá trị 5/14/2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Thêm 10 năm vào giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> biểu thị ngày và giờ là 5/14/2011 08:15:22 SA.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong ngày hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những ngày tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong ngày hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>days</code>: Số ngày.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu ngày sau thời gian hiện tại trên hệ thống có thuộc hai ngày tiếp theo không.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những tháng tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tháng hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những tháng tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tháng hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>months</code>: Số tháng.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu tháng sau thời gian hiện tại trên hệ thống có thuộc hai tháng tiếp theo không.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những quý tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong quý hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những quý tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong quý hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>quarters</code>: Số quý.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu quý sau thời gian hiện tại trên hệ thống có thuộc hai quý tiếp theo không.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những tuần tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tuần hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những tuần tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tuần hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>weeks</code>: Số tuần.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu tuần sau thời gian hiện tại trên hệ thống có thuộc hai tuần tiếp theo không.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những năm tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong năm hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những năm tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong năm hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>years</code>: Số năm.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu năm sau thời gian hiện tại trên hệ thống có thuộc hai năm tiếp theo không.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những ngày trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong ngày hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những ngày trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong ngày hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>days</code>: Số ngày.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu ngày trước thời gian hiện tại trên hệ thống có thuộc hai ngày trước không.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những tháng trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tháng hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những tháng trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tháng hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>months</code>: Số tháng.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu tháng trước thời gian hiện tại trên hệ thống có thuộc hai tháng trước không.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những quý trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong quý hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những quý trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong quý hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>quarters</code>: Số quý.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu quý trước thời gian hiện tại trên hệ thống có thuộc hai quý trước không.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những tuần trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tuần hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những tuần trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tuần hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>weeks</code>: Số tuần.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu tuần trước thời gian hiện tại trên hệ thống có thuộc hai tuần trước không.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong những năm trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong năm hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những năm trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong năm hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>years</code>: Số năm.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định liệu tuần trước thời gian hiện tại trên hệ thống có thuộc hai năm trước không.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Thêm thông tin múi giờ vào giá trị ngày giờ.",
        "Documentation.LongDescription": "Thêm thông tin múi giờ vào giá trị <code>dateTime</code>. Thông tin múi giờ bao gồm <code>timezoneHours</code> và tùy chọn <code>timezoneMinutes</code>, xác định chênh lệch mong muốn với thời gian UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Đặt múi giờ thành UTC+7:30 (7 giờ 30 phút trước UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong những giờ tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giờ hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho trước <code>dateTime</code> có xuất hiện trong những giờ tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giờ hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>hours</code>: Số giờ.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định giờ sau thời gian hệ thống hiện tại có tính bằng hai giờ tiếp theo hay không.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong những phút tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong phút hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho trước <code>dateTime</code> có xuất hiện trong những phút tiếp theo hay không, khi được xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong phút hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>minutes</code>: Số phút.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định phút sau thời gian hệ thống hiện tại có tính bằng hai phút tiếp theo hay không.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong những giây tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giây hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những giây tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giây hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>seconds</code>: Số giây.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định giây sau thời gian hệ thống hiện tại có tính bằng hai giây tiếp theo hay không.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong những giờ trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giờ hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong những giờ trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giờ hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>hours</code>: Số giờ.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định giờ trước thời gian hệ thống hiện tại có tính bằng hai giờ trước hay không.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong những phút trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong phút hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho trước <code>dateTime</code> có xuất hiện trong những phút trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong phút hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>minutes</code>: Số phút.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định phút trước thời gian hệ thống hiện tại có tính bằng hai phút trước hay không.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong những giây trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giây hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho trước <code>dateTime</code> có xuất hiện trong những giây trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giây hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      <li><code>seconds</code>: Số giây.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định giây trước thời gian hệ thống hiện tại có tính bằng hai giây trước hay không.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Thay đổi múi giờ của giá trị.",
        "Documentation.LongDescription": "Thay đổi thông tin múi giờ về giá trị datetimezone <code>dateTimeZone</code> thành thông tin múi giờ mới do <code>timezoneHours</code> cung cấp và <code>timezoneMinutes</code> tùy chọn.\r\n    Nếu <code>dateTimeZone</code> không có cấu phần múi giờ thì một ngoại lệ được đưa ra.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Thay đổi thông tin múi giờ cho #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) thành 8 giờ.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Thay đổi thông tin múi giờ cho #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) thành -30 phút.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Truy nhập một giá trị theo tên trong ứng dụng kết hợp dữ liệu được nhúng.",
        "Documentation.LongDescription": "Truy nhập một giá trị theo tên trong ứng dụng kết hợp dữ liệu được nhúng.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Tạo hàm bằng một chữ ký tham số cụ thể ở đầu hàm sử dụng đối số danh sách đơn",
        "Documentation.LongDescription": "Lấy một hàm đơn phân <code>function</code> rồi tạo hàm mới bằng loại <code>functionType</code> xây dựng danh sách bao gồm các đối số của loại này rồi chuyển đến <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi List.Sum thành hàm hai đối số, hai đối số đó được thêm vào cùng nhau",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Chuyển đổi hàm sử dụng danh sách thành hàm hai đối số",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Gọi ra hàm cho sẵn",
        "Documentation.LongDescription": "Gọi ra hàm cho sẵn bằng cách sử dụng danh sách đối số được chỉ định và trả về kết quả.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Gọi ra Record.FieldNames bằng một đối số [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Gọi hàm đã cho sau khi đã qua khoảng thời gian được chỉ định.",
        "Documentation.LongDescription": "Trả về kết quả gọi <code>function</code> sau khi đã qua khoảng thời gian <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.LongDescription": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Tạo hàm vô hướng ở đầu hàm vec-tơ, phân lô nhiều viện dẫn.",
        "Documentation.LongDescription": "<p>Trả về một hàm vô hướng thuộc loại <code>scalarFunctionType</code> gọi <code>vectorFunction</code> cùng với một hàng đối số và trả về dữ liệu xuất đơn. Thêm vào đó, khi áp dụng nhiều lần hàm vô hướng cho từng hàng của bảng nhập, chẳng hạn như trong Table.AddColumn, thì <code>vectorFunction</code> sẽ được áp dụng một lần cho toàn bộ dữ liệu nhập.</p>\r\n<p><code>vectorFunction</code> sẽ được chuyển qua một bảng có cùng tên cột và vị trí của tham số <code>scalarFunctionType</code>. Mỗi hàng của bảng này chứa các đối số cho một lệnh gọi tới hàm vô hướng, cùng với các cột tương ứng với những thông số <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> phải trả về danh sách có cùng độ dài với bảng nhập, trong đó mục ở mỗi vị trí phải có cùng kết quả với đánh giá hàm vô hướng trên hàng nhập của chính vị trí đó.</p>\r\n<p>Theo dự kiến, bảng nhập sẽ được đưa vào, vì vậy, <code>vectorFunction</code> dự kiến sẽ đưa vào dữ liệu xuất dưới dạng dữ liệu nhập, chỉ hoạt động với một khúc dữ liệu nhập mỗi lần. Cụ thể là, <code>vectorFunction</code> không được liệt kê bảng nhập nhiều lần.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Tạo bản ghi biểu thị một điểm địa lý từ các phần.",
        "Documentation.LongDescription": "Tạo bản ghi biểu thị một điểm địa lý từ các phần cấu thành, như kinh độ, vĩ độ và nếu có thì cả độ cao (Z) và số đo (M). Có thể cung cấp mã định danh tham chiếu không gian (SRID) tùy chọn nếu mã này khác với giá trị mặc định (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Tạo bản ghi biểu thị một điểm hình học từ các phần.",
        "Documentation.LongDescription": "Tạo bản ghi biểu thị một điểm địa lý từ các phần cấu thành, như tọa độ X, tọa độ Y và nếu có thì cả toạ độ Z và số đo (M). Có thể cung cấp mã định danh tham chiếu không gian (SRID) tùy chọn nếu mã này khác với giá trị mặc định (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Tạo danh tính.",
        "Documentation.LongDescription": "Tạo danh tính.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Xác định danh tính có nằm trong bộ sưu tập danh tính hay không.",
        "Documentation.LongDescription": "Xác định danh tính có nằm trong bộ sưu tập danh tính hay không.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Trả về một danh sách bao gồm tất cả các phần tử phần bù được đánh số lẻ trong danh sách.",
        "Documentation.LongDescription": "Trả về một danh sách bao gồm tất cả các phần tử phần bù được đánh số lẻ trong danh sách. Chuyển đổi giữa lấy và bỏ qua giá trị trong danh sách <code>list</code> tùy theo tham số.\r\n    <ul>\r\n    <li><code>count</code>: Chỉ định số lượng giá trị được bỏ qua mỗi lần.</li>\r\n    <li><code>repeatInterval</code>: Một quãng cách lặp tùy chọn để cho biết số lượng giá trị được thêm vào giữa các giá trị bị bỏ qua.</li>\r\n    <li><code>offset</code>: Một tham số phần bù tùy chọn để bắt đầu bỏ qua các giá trị tại phần bù ban đầu.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tạo danh sách từ {1..10} bỏ qua số đầu tiên.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Tạo danh sách từ {1..10} bỏ qua mọi số khác.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Tạo danh sách từ {1..10} bắt đầu tại 1 và bỏ qua mọi số khác.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Tạo một danh sách từ {1..10} bắt đầu bằng 1, bỏ qua một giá trị, giữ hai giá trị, v.v.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Cho biết danh sách có chứa giá trị không.",
        "Documentation.LongDescription": "Cho biết danh sách <code>list</code> có chứa giá trị <code>value</code> hay không.\r\n    Trả về true nếu tìm thấy giá trị trong danh sách, false nếu ngược lại. Có thể chỉ định giá trị tiêu chí phương trình tùy chọn, <code>equationCriteria</code>, để kiểm soát việc kiểm tra đẳng thức. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Tìm ra danh sách {1, 2, 3, 4, 5} có chứa 3 hay không.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Tìm ra danh sách {1, 2, 3, 4, 5} có chứa 6 hay không.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Cho biết nơi một danh sách bao gồm tất cả các giá trị trong một danh sách khác.",
        "Documentation.LongDescription": "Cho biết danh sách <code>list</code> có chứa tất cả các giá trị trong một danh sách khác, <code>values</code>, hay không.\r\n    Trả về true nếu tìm thấy giá trị trong danh sách, false nếu ngược lại. Có thể chỉ định giá trị tiêu chí phương trình tùy chọn, <code>equationCriteria</code>, để kiểm soát việc kiểm tra đẳng thức. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Tìm ra danh sách {1, 2, 3, 4, 5} có chứa 3 và 4 hay không.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Tìm ra danh sách {1, 2, 3, 4, 5} có chứa 5 và 6 hay không.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Cho biết nơi một danh sách bao gồm bất kỳ giá trị nào trong số các giá trị trong một danh sách khác.",
        "Documentation.LongDescription": "Cho biết danh sách <code>list</code> có bao gồm bất kỳ giá trị nào trong số các giá trị trong một danh sách khác, <code>values</code>, hay không.\r\n        Trả về true nếu tìm thấy giá trị trong danh sách, false nếu ngược lại. Có thể chỉ định giá trị tiêu chí phương trình tùy chọn, <code>equationCriteria</code>, để kiểm soát việc kiểm tra đẳng thức. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Tìm ra danh sách {1, 2, 3, 4, 5} có chứa 3 hoặc 9 hay không.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Tìm ra danh sách {1, 2, 3, 4, 5} có chứa 6 hoặc 7 hay không.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Trả về hiệp phương sai giữa hai danh sách số.",
        "Documentation.LongDescription": "Trả về hiệp phương sai giữa hai danh sách, <code>numberList1</code> và <code>numberList2</code>. <code>numberList1</code> và <code>numberList2</code> phải chứa cùng số lượng là <code>number</code> giá trị.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Tính hiệp phương sai giữa hai danh sách.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Trả về chênh lệch giữa hai danh sách cho sẵn.",
        "Documentation.LongDescription": "Trả về các mục trong danh sách <code>list1</code> không xuất hiện trong danh sách <code>list2</code>. Các giá trị trùng lặp được hỗ trợ.\r\n    Có thể chỉ định giá trị tiêu chí phương trình tùy chọn, <code>equationCriteria</code>, để kiểm soát việc kiểm tra đẳng thức. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm các mục trong danh sách {1, 2, 3, 4, 5} không xuất hiện trong {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Tìm các mục trong danh sách {1, 2} không xuất hiện trong {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Trả về một danh sách giá trị (bao gồm các trường bản ghi) chứa văn bản được chỉ định.",
        "Documentation.LongDescription": "Trả về một danh sách chứa các giá trị từ danh sách <code>list</code> đã chứa giá trị <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm các giá trị văn bản trong danh sách {\"a\", \"b\", \"ab\"} khớp với \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Trả về tập hợp mục đầu tiên trong danh sách bằng cách chỉ định số lượng mục để trả về hoặc một điều kiện đủ tiêu chuẩn.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Nếu một số được chỉ định thì tối đa là số lượng mục đó được trả về. </li>\r\n  <li>Nếu một điều kiện được chỉ định thì tất cả các mục ban đầu đáp ứng được điều kiện này được trả về. Khi một mục không đáp ứng được điều kiện thì không có thêm mục nào được xem xét. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm các giá trị ban đầu trong danh sách {3, 4, 5, -1, 7, 8, 2} lớn hơn 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Trả về true nếu tất cả các giá trị trong danh sách đáp ứng hàm điều kiện.",
        "Documentation.LongDescription": "Trả về <code>true</code> nếu hàm điều kiện <code>condition</code> được đáp ứng bởi tất cả giá trị trong danh sách <code>list</code>, nếu không trả về <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Xác định tất cả giá trị trong danh sách {11, 12, 13} có lớn hơn 10 hay không.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Xác định tất cả giá trị trong danh sách {1, 2, 3} có lớn hơn 10 hay không.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Trả về true nếu giá trị bất kỳ đáp ứng hàm điều kiện.",
        "Documentation.LongDescription": "Trả về <code>true</code> nếu hàm điều kiện <code>condition</code> được đáp ứng bởi giá trị bất kỳ trong danh sách <code>list</code>, nếu không trả về <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm ra có giá trị nào trong danh sách {9, 10, 11} lớn hơn 10 hay không.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Tìm ra có giá trị nào trong danh sách {1, 2, 3} lớn hơn 10 hay không.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Trả về (các) giá trị lớn nhất trong danh sách. Phải chỉ định số lượng giá trị trả về hoặc một điều kiện lọc.",
        "Documentation.LongDescription": "Trả về (các) giá trị lớn nhất trong danh sách, <code>list</code>.\r\n    Sau khi sắp xếp hàng có thể chỉ định tham số tùy chọn để lọc thêm kết quả. Tham số tùy chọn <code>countOrCondition</code> chỉ định số lượng giá trị trả về hoặc một điều kiện lọc. Tham số tùy chọn <code>comparisonCriteria</code> chỉ định cách so sánh các giá trị trong danh sách.\r\n <ul>\r\n        <li> <code>list</code>: Danh sách giá trị.</li>\r\n        <li> <code>countOrCondition</code>:  Nếu một số được chỉ định thì một danh sách bao gồm tối đa <code>countOrCondition</code> mục theo thứ tự tăng dần được trả về. Nếu một điều kiện được chỉ định thì một danh sách chứa các mục đáp ứng điều kiện ngay từ ban đầu được trả về. Khi một mục không đáp ứng điều kiện thì không có thêm mục nào được xem xét.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Tùy chọn]</i> Có thể chỉ định một giá trị <code>comparisonCriteria</code> tùy chọn để xác định cách so sánh các mục trong danh sách. Nếu tham số này rỗng thì trình so sánh mặc định được sử dụng.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Trả về (các) giá trị nhỏ nhất trong danh sách. Có thể chỉ định số lượng giá trị trả về hoặc một điều kiện lọc.",
        "Documentation.LongDescription": "Trả về (các) giá trị nhỏ nhất trong danh sách, <code>list</code>.\r\n    Tham số <code>countOrCondition</code> chỉ định số lượng giá trị trả về hoặc một điều kiện lọc. Tham số tùy chọn <code>comparisonCriteria</code> chỉ định cách so sánh các giá trị trong danh sách.\r\n <ul>\r\n        <li> <code>list</code>: Danh sách giá trị.</li>\r\n        <li> <code>countOrCondition</code>:  Nếu một số được chỉ định thì một danh sách bao gồm tối đa <code>countOrCondition</code> mục theo thứ tự tăng dần được trả về. Nếu một điều kiện được chỉ định thì một danh sách chứa các mục đáp ứng điều kiện này ngay từ ban đầu được trả về. Khi một mục không đáp ứng điều kiện thì không có thêm mục nào được xem xét. Nếu tham số này rỗng thì giá trị duy nhất nhỏ nhất trong danh sách được trả về.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Tùy chọn]</i> Có thể chỉ định một giá trị <code>comparisonCriteria</code> tùy chọn để xác định cách so sánh các mục trong danh sách. Nếu tham số này rỗng thì trình so sánh mặc định được sử dụng.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tìm 5 giá trị nhỏ nhất trong danh sách <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Trả về một danh sách số khi được cho sẵn giá trị ban đầu, tổng cộng và giá trị tăng tùy chọn.",
        "Documentation.LongDescription": "Trả về một danh sách số khi được cho sẵn giá trị ban đầu, tổng cộng và giá trị tăng tùy chọn. Giá trị tăng mặc định là 1.\r\n<ul>\r\n   <li><code>start</code>: Giá trị ban đầu trong danh sách.</li>\r\n   <li><code>count</code>: Số lượng giá trị sẽ tạo.</li>\r\n   <li><code>increment</code>: <i>[Tùy chọn]</i> Giá trị để tăng theo. Nếu các giá trị bị bỏ qua được tăng theo số gia 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách chứa 10 số liên tục bắt đầu tại 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Tạo một danh sách chứa 10 số bắt đầu tại 1 với số gia là 2 cho mỗi số tiếp theo.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Trả về một hoặc nhiều phân vị mẫu tương ứng với các xác suất đã cho.",
        "Documentation.LongDescription": "Trả về một hoặc nhiều phân vị mẫu của danh sách <code>list</code>. Nếu giá trị <code>percentiles</code> là một số trong khoảng 0,0 và 1,0 thì giá trị này sẽ được coi là phân vị và kết quả sẽ là\r\n    một giá trị tương ứng với xác suất đó. Nếu giá trị <code>percentiles</code> là một danh sách chứa các số có giá trị trong khoảng từ 0,0 đến 1,0 thì kết quả sẽ là danh sách các phân vị\r\n    tương ứng với xác suất đầu vào. Người dùng nâng cao có thể sử dụng tùy chọn PercentileMode trong <code>options</code> để chọn một phương pháp nội suy cụ thể hơn, nhưng chúng tôi không khuyến khích phần lớn người dùng sử dụng tùy chọn này.\r\n    Biểu tượng xác định sẵn <code>PercentileMode.ExcelInc</code> và <code>PercentileMode.ExcelExc</code> khớp với các phương pháp nội suy được các hàm Excel sử dụng\r\n    <code>PERCENTILE.INC</code> và <code>PERCENTILE.EXC</code>. Hành vi mặc định khớp với <code>PercentileMode.ExcelInc</code>. Các biểu tượng\r\n    <code>PercentileMode.SqlCont</code> và <code>PercentileMode.SqlDisc</code> lần lượt khớp với hành vi SQL Server của <code>PERCENTILE_CONT</code> và\r\n    <code>PERCENTILE_DISC</code>.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tìm tứ phân vị đầu tiên của danh sách <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Tìm tứ phân vị của danh sách <code> {5, 3, 1, 7, 9} </code> bằng cách sử dụng phương pháp nội suy khớp với <code>PERCENTILE.EXC</code> của Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Trả về (các) phần bù của một giá trị trong một danh sách.",
        "Documentation.LongDescription": "Trả về phần bù tại đó giá trị <code>value</code> xuất hiện trong danh sách <code>list</code>. Trả về -1 nếu giá trị không xuất hiện.\r\n    Có thể chỉ định tham số lần xuất hiện tùy chọn <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Số lần xuất hiện tối đa để báo cáo.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Tìm vị trí trong danh sách {1, 2, 3} mà tại đó giá trị 3 xuất hiện.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Trả về phần bù đầu tiên của một giá trị trong danh sách.",
        "Documentation.LongDescription": "Trả về phần bù trong danh sách <code>list</code> của lần xuất hiện đầu tiên của một giá trị trong danh sách <code>values</code>. Trả về -1 nếu không tìm thấy lần xuất hiện nào.\r\n    Có thể chỉ định tham số lần xuất hiện tùy chọn <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Số lần xuất hiện tối đa có thể được trả về.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Tìm vị trí đầu tiên trong danh sách {1, 2, 3} mà tại đó giá trị 2 hoặc 3 xuất hiện.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Trả về tập hợp con của danh sách bắt đầu tại phần bù.",
        "Documentation.LongDescription": "Trả về tập hợp con của danh sách bắt đầu tại phần bù <code>list</code>. Một tham số tùy chọn là <code>offset</code> đặt số lượng mục tối đa trong tập hợp con.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm tập hợp con bắt đầu tại phần bù 6 của danh sách số từ 1 tới 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Tìm tập hợp con có độ dài là 2 từ phần bù 6, từ danh sách số từ 1 tới 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Loại bỏ các mục trong danh list1 có trong danh sách.",
        "Documentation.LongDescription": "Loại bỏ tất cả những lần xuất hiện của giá trị cụ thể trong <code>list2</code> khỏi <code>list1</code>. Nếu các giá trị trong <code>list2</code> không tồn tại trong <code>list1</code> thì danh sách ban đầu được trả về.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ các mục trong danh sách {2, 4, 6} từ danh sách {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Loại bỏ tất cả những lần xuất hiện của giá trị đầu vào.",
        "Documentation.LongDescription": "Loại bỏ tất cả những lần xuất hiện của giá trị cụ thể trong <code>list2</code> khỏi danh sách <code>list1</code>. Nếu các giá trị trong <code>list2</code> không tồn tại trong <code>list1</code> thì danh sách ban đầu được trả về.\r\n    Có thể chỉ định giá trị tiêu chí phương trình tùy chọn, <code>equationCriteria</code>, để kiểm soát việc kiểm tra đẳng thức. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách từ {1, 2, 3, 4, 5, 5} không có {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Loại bỏ tính số lượng giá trị bắt đầu tại một vị trí được chỉ định.",
        "Documentation.LongDescription": "Loại bỏ <code>count</code> giá trị trong <code>list</code> bắt đầu tại vị trí được chỉ định, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ 3 giá trị trong danh sách {1, 2, 3, 4, -6, -2, -1, 5} bắt đầu tại chỉ mục 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Trả về một danh sách tính tổng lần lặp của danh sách gốc.",
        "Documentation.LongDescription": "Trả về một danh sách là <code>count</code> lần lặp của danh sách gốc <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách có {1, 2} được lặp lại 3 lần.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Áp dụng mỗi lần thay thế { old, new }.",
        "Documentation.LongDescription": "Thực hiện các thay thế cho sẵn đối với danh sách <code>list</code>. Tác vụ thay thế <code>replacements</code> chứa một danh sách có hai giá trị, giá trị cũ và giá trị mới, được cung cấp trong một danh sách.\r\n    Có thể chỉ định giá trị tiêu chí phương trình tùy chọn, <code>equationCriteria</code>, để kiểm soát việc kiểm tra đẳng thức.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách từ {1, 2, 3, 4, 5} thay thế giá trị 5 bằng -5 và giá trị 1 bằng -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Trả về một danh sách giá trị phù hợp với điều kiện.",
        "Documentation.LongDescription": "Trả về một danh sách giá trị từ danh sách <code>list</code> khớp với điều kiện lựa chọn <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm các giá trị trong danh sách {1, -3, 4, 9, -2} lớn hơn 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Tách danh sách đã chỉ định thành một danh sách gồm các danh sách sử dụng kích thước trang đã chỉ định.",
        "Documentation.LongDescription": "Tách <code>list</code> thành danh sách của các danh sách, nơi phần tử đầu tiên của danh sách đầu ra là một danh sách chứa phần tử <code>pageSize</code> đầu tiên từ\r\n    danh sách nguồn, phần tử tiếp theo của danh sách đầu ra là một danh sách chứa phần tử <code>pageSize</code> tiếp theo từ danh sách nguồn, v.v.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Trả về một danh sách mới chứa các giá trị được tính từ danh sách này.",
        "Documentation.LongDescription": "Trả về một danh sách giá trị mới bằng cách áp dụng hàm chuyển đổi <code>transform</code> cho danh sách <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Thêm 1 vào từng giá trị trong danh sách {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Trả về arctang của phép chia hai số.",
        "Documentation.LongDescription": "Trả về arctang của phép chia hai số là <code>y</code> và <code>x</code>. Phép chia sẽ được thiết lập ở dạng <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Trả về kết quả thực hiện tác vụ \"And\" theo bit giữa hai đầu vào.",
        "Documentation.LongDescription": "Trả về kết quả thực hiện tác vụ \"And\" theo bit giữa <code>number1</code> và <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Trả về kết quả thực hiện tác vụ \"Or\" theo bit giữa hai đầu vào.",
        "Documentation.LongDescription": "Trả về kết quả thực hiện tác vụ \"Or\" theo bit giữa <code>number1</code> và <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Chuyển dịch tập hợp bit sang trái.",
        "Documentation.LongDescription": "Trả về kết quả thực hiện chuyển dịch theo bit về bên trái đối với <code>number1</code> theo số lượng bit được chỉ định <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Chuyển dịch tập hợp bit sang phải.",
        "Documentation.LongDescription": "Trả về kết quả thực hiện chuyển dịch theo bit về bên phải đối với <code>number1</code> theo số lượng bit được chỉ định <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Trả về kết quả thực hiện \"XOR\" (Exclusive-OR) theo bit giữa hai đầu vào.",
        "Documentation.LongDescription": "Trả về kết quả thực hiện \"XOR\" (Exclusive-OR) theo bit giữa <code>number1</code> và <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Trả về số lượng tổ hợp duy nhất.",
        "Documentation.LongDescription": "Trả về số lượng tổ hợp duy nhất từ một danh sách mục, <code>setSize</code>, với kích cỡ kết hợp được chỉ định là <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Số lượng mục trong danh sách.</li>\r\n    <li><code>combinationSize</code>: Số lượng mục trong mỗi tổ hợp.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm số lượng tổ hợp từ tổng cộng 5 mục khi mỗi tổ hợp là một nhóm 3.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Chia hai số và trả về phần số nguyên của kết quả.",
        "Documentation.LongDescription": "Trả về phần số nguyên của kết quả sau khi chia một số là <code>number1</code> cho một số khác là <code>number2</code>.\r\n    Nếu <code>number1</code> hoặc <code>number2</code> là giá trị null thì <code>Number.IntegerDivide</code> trả về giá trị null.\r\n      <ul>\r\n        <li><code>number1</code>: Số bị chia.</li>\r\n        <li><code>number2</code>: Số chia.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Chia 6 cho 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Chia 8.3 cho 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Số nguyên chia hai số và trả về số dư.",
        "Documentation.LongDescription": "Trả về số dư trong kết quả chia số nguyên của <code>number</code> cho <code>divisor</code>.\r\n    Nếu <code>number</code> hoặc <code>divisor</code> là giá trị null thì <code>Number.Mod</code> trả về giá trị null.\r\n      <ul>\r\n        <li><code>number</code>: Số bị chia.</li>\r\n        <li><code>divisor</code>: Số chia.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm số dư khi bạn chia 5 cho 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Trả về số lần hoán vị.",
        "Documentation.LongDescription": "Trả về số lần hoán vị có thể tạo từ một số mục, <code>setSize</code>, với kích thước hoán vị được chỉ định là <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm số lần hoán vị từ tổng cộng 5 mục trong các nhóm 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Tăng một số lên lũy thừa cho sẵn.",
        "Documentation.LongDescription": "Trả về kết quả sau khi đưa <code>number</code> lên lũy thừa <code>power</code>.\r\n    Nếu <code>number</code> hoặc <code>power</code> là giá trị null thì <code>Number.Power</code> trả về giá trị null.\r\n      <ul>\r\n        <li><code>number</code>: Cơ số.</li>\r\n        <li><code>power</code>: Số mũ.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị của 5 sau khi được tăng lên lũy thừa 3 (lũy thừa 3 của 5).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Trả về một số ngẫu nhiên giữa hai số.",
        "Documentation.LongDescription": "Trả về một số ngẫu nhiên giữa <code>bottom</code> và <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Nhận một số ngẫu nhiên giữa 1 và 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Trả về giá trị của trường được chỉ định trong bản ghi.",
        "Documentation.LongDescription": "Trả về giá trị của <code>field</code> được chỉ định trong <code>record</code>. Nếu không tìm thấy trường này thì một ngoại lệ được đưa ra.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị của trường \"CustomerID\" trong bản ghi.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Trả về giá trị của trường được chỉ định trong bản ghi hoặc giá trị mặc định nếu không tìm thấy trường.",
        "Documentation.LongDescription": "Trả về giá trị của trường được chỉ định <code>field</code> trong bản ghi <code>record</code>. Nếu không tìm thấy trường thì <code>defaultValue</code> tùy chọn được trả về.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị của trường \"Điện thoại\" trong bản ghi hoặc trả về null nếu không giá trị này tồn tại.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Tìm giá trị của trường \"Điện thoại\" trong bản ghi hoặc trả về giá trị mặc định nếu giá trị này không tồn tại.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Trả về một bản ghi khi được cho sẵn danh sách giá trị trường và tập hợp trường.",
        "Documentation.LongDescription": "Trả về một bản ghi khi được cho sẵn <code>list</code> giá trị trường và tập hợp trường.  Có thể chỉ định <code>fields</code> bằng danh sách giá trị văn bản hoặc loại bản ghi.  Lỗi được đưa ra nếu các trường không phải là duy nhất.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Tạo bản ghi từ danh sách giá trị trường và danh sách tên trường.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Tạo bản ghi từ danh sách giá trị trường và loại bản ghi.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Cho biết bản ghi có các trường được chỉ định hay không.",
        "Documentation.LongDescription": "Cho biết bản ghi <code>record</code> có các trường được chỉ định trong <code>fields</code> hay không bằng cách trả về giá trị lôgic (true hoặc false).\r\n    Có thể chỉ định nhiều giá trị trường bằng cách sử dụng danh sách.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Kiểm tra bản ghi có trường \"CustomerID\" hay không.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Kiểm tra bản ghi có trường \"CustomerID\" và \"Địa chỉ\" hay không.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Loại bỏ (các) trường được chỉ định từ bản ghi đầu vào.",
        "Documentation.LongDescription": "Trả về một bản ghi loại bỏ tất cả các trường được chỉ định trong danh sách <code>fields</code> khỏi đầu vào <code>record</code>. Nếu trường được chỉ định không tồn tại thì một ngoại lệ được đưa ra.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ trường \"Giá\" khỏi bản ghi.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Loại bỏ các trường \"Giá\" và \"Mục\" khỏi bản ghi.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Áp dụng đổi tên từ một danh sách có dạng { old, new }.",
        "Documentation.LongDescription": "Trả về một bản ghi sau khi đổi tên trường trong đầu vào <code>record</code> thành tên trường mới được chỉ định trong danh sách <code>renames</code>. Để đổi tên nhiều lần, có thể sử dụng danh sách lồng nhau ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Đổi tên trường \"Đơn giá\" thành \"Giá\" từ bản ghi.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Đổi tên trường \"Đơn giá\" thành \"Giá\" và \"OrderNum\" thành \"OrderID\" từ bản ghi.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Sắp xếp lại (các) trường được chỉ định theo thứ tự mới.",
        "Documentation.LongDescription": "Trả về một bản ghi sau khi phân loại lại các trường trong <code>record</code> theo thứ tự trường được chỉ định trong danh sách <code>fieldOrder</code>. Các giá trị trường được duy trì và các trường không được liệt kê trong <code>fieldOrder</code> được để lại ở vị trí ban đầu.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Sắp xếp lại các trường trong bản ghi.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Trả về một bản ghi chỉ chứa các trường được chỉ định.",
        "Documentation.LongDescription": "Trả về một bản ghi chỉ bao gồm các trường được chỉ định trong danh sách <code>fields</code> từ đầu vào <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Chọn các trường \"Mục\" và \"Giá\" trong bản ghi.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Trả về một bản ghi sau khi áp dụng các chuyển đổi được chỉ định.",
        "Documentation.LongDescription": "Trả về một bản ghi sau khi áp dụng các chuyển đổi được chỉ định trong danh sách <code>transformOperations</code> cho <code>record</code>.\r\n    Có thể chuyển đổi một hoặc nhiều trường tại một thời gian cụ thể.\r\n      <div>Trong trường hợp một trường duy nhất được chuyển đổi thì <code>transformOperations</code> dự kiến là một danh sách có hai mục. Mục đầu tiên trong <code>transformOperations</code> chỉ định một tên trường và mục thứ hai trong <code>transformOperations</code> chỉ định hàm dùng để chuyển đổi. Ví dụ: <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Trong trường hợp nhiều trường được chuyển đổi thì <code>transformOperations</code> dự kiến là một danh sách bao gồm các danh sách trong đó mỗi danh sách bên trong là một cặp tên trường và tác vụ chuyển đổi. Ví dụ: <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi trường \"Giá\" sang số.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Chuyển đổi các trường \"OrderID\" và \"Price\" thành số.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Trả về một hàm tách văn bản thành danh sách văn bản bằng cách chuyển loại ký tự này thành loại ký tự khác. Các tham số {0} và {1} có thể là danh sách các ký tự hoặc hàm nhận một ký tự và trả về giá trị true/false.",
        "Documentation.LongDescription": "Trả về một hàm tách văn bản thành danh sách văn bản bằng cách chuyển loại ký tự này thành loại ký tự khác. Các tham số <code>before</code> và <code>after</code> có thể là danh sách các ký tự hoặc hàm nhận một ký tự và trả về giá trị true/false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tách dữ liệu đầu vào tại bất kỳ vị trí nào có một chữ số đứng sau một chữ cái viết hoa hoặc chữ thường.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Chuyển đổi truy vấn SQL được cung cấp thành mã M. Hàm này chỉ dùng cho nội bộ.",
        "Documentation.LongDescription": "Chuyển đổi truy vấn <code>sql</code> được cung cấp thành mã M bằng các mã định danh mà <code>environment</code> xác định sẵn. Hàm này chỉ dùng cho nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Trả về một cột dữ liệu được chỉ định từ bảng đó ở dạng danh sách.",
        "Documentation.LongDescription": "Trả về cột dữ liệu được chỉ định bởi <code>column</code> từ bảng <code>table</code> ở dạng danh sách.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Trả về các giá trị từ cột [Name] trong bảng.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Trả về danh sách tên các cột phù hợp với những loại đã chỉ định.",
        "Documentation.LongDescription": "Trả về danh sách tên các cột từ bảng <code>table</code> phù hợp với những loại được chỉ định trong <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Trả về tên các cột thuộc loại Number.Type từ bảng.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Cho biết bản ghi được chỉ định có xuất hiện ở dạng một hàng trong bảng hay không.",
        "Documentation.LongDescription": "Cho biết bản ghi được chỉ định <code>row</code> có xuất hiện ở dạng một hàng trong <code>table</code> hay không.\r\n    Có thể chỉ định tham số tùy chọn <code>equationCriteria</code> để kiểm soát phép so sánh giữa các hàng của bảng.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Xác định bảng có chứa hàng hay không.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Xác định bảng có chứa hàng hay không.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Xác định bảng có chứa hàng so sánh chỉ một côt [Name] hay không.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Cho biết tất cả các bản ghi được chỉ định có xuất hiện ở dạng các hàng trong bảng hay không.",
        "Documentation.LongDescription": "Cho biết tất cả các bản ghi được chỉ định trong danh sách bản ghi <code>rows</code> có xuất hiện ở dạng các hàng trong <code>table</code> hay không.\r\n    Có thể chỉ định tham số tùy chọn <code>equationCriteria</code> để kiểm soát phép so sánh giữa các hàng của bảng.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Xác định bảng có chứa tất cả các hàng so sánh chỉ một cột [CustomerID] hay không.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Xác định bảng có chứa tất cả các hàng hay không.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Cho biết có bản ghi được chỉ định nào xuất hiện ở dạng hàng trong bảng hay không.",
        "Documentation.LongDescription": "Cho biết có bản ghi được chỉ định nào trong danh sách bản ghi <code>rows</code> xuất hiện ở dạng hàng trong <code>table</code> hay không.\r\n    Có thể chỉ định tham số tùy chọn <code>equationCriteria</code> để kiểm soát phép so sánh giữa các hàng của bảng.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Xác định bảng <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> chứa hay không chứa các hàng <code>[a = 1, b = 2]</code> hoặc <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Xác định bảng <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> chứa hay không chứa các hàng <code>[a = 1, b = 3]</code> hoặc <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Xác định bảng <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> chứa hay không chứa các hàng <code>[a = 1, b = 3]</code> hoặc <code>[a = 3, b = 5]</code> khi chỉ so sánh cột [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Cho biết bảng có chứa (các) cột được chỉ định hay không.",
        "Documentation.LongDescription": "Cho biết <code>table</code> có chứa (các) cột được chỉ định <code>columns</code> hay không. Trả về <code>true</code> nếu bảng chứa (các) cột, <code>false</code> nếu ngược lại.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Xác định bảng có chứa cột [Name] hay không.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Tìm xem bảng có cột [Name] và [PhoneNumber] hay không.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Cho biết tất cả các hàng trong bảng có đáp ứng điều kiện cho sẵn hay không.",
        "Documentation.LongDescription": "Cho biết tất cả các hàng trong <code>table</code> có khớp với <code>condition</code> cho sẵn hay không. Trả về <code>true</code> nếu tất cả các hàng đều khớp, <code>false</code> nếu ngược lại.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Xác định tất cả các giá trị hàng trong cột [a] trong bảng có chẵn hay không.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Tìm xem tất cả giá trị hàng trong bảng <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> có phải là [a = 1, b = 2] hay không.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Cho biết có hàng nào trong bảng đáp ứng điều kiện cho sẵn hay không.",
        "Documentation.LongDescription": "Cho biết có hàng nào trong <code>table</code> khớp với <code>condition</code> cho sẵn hay không. Trả về <code>true</code> nếu có hàng khớp, <code>false</code> nếu ngược lại.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Xác định có giá trị hàng nào trong cột [a] của bảng <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> là chẵn hay không.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Xác định nếu có giá trị hàng nào trong bảng <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> là [a = 1, b = 2].",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Trả về hàng lớn nhất hoặc một giá trị mặc định sử dụng tiêu chí cho sẵn.",
        "Documentation.LongDescription": "Trả về hàng lớn nhất trong <code>table</code> khi được cho sẵn <code>comparisonCriteria</code>. Nếu bảng trống thì giá trị <code>default</code> tùy chọn được trả về. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tìm hàng có giá trị lớn nhất trong cột [a] trong bảng <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Tìm hàng có giá trị lớn nhất trong cột [a] trong bảng <code>({})</code>. Trả về -1 nếu trống.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Trả về hàng nhỏ nhất hoặc một giá trị mặc định sử dụng tiêu chí cho sẵn.",
        "Documentation.LongDescription": "Trả về hàng nhỏ nhất trong <code>table</code> khi được cho sẵn <code>comparisonCriteria</code>. Nếu bảng trống thì giá trị <code>default</code> tùy chọn được trả về.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tìm hàng có giá trị nhỏ nhất trong cột [a] trong bảng.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Tìm hàng có giá trị nhỏ nhất trong cột [a] trong bảng. Trả về -1 nếu trống.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Trả về (các) vị trí của hàng trong bảng.",
        "Documentation.LongDescription": "Trả về vị trí hàng của lần xuất hiện đầu tiên của <code>row</code> trong <code>table</code> được chỉ định. Trả về -1 nếu không tìm thấy lần xuất hiện nào.\r\n    <ul>\r\n       <li><code>table</code>: Bảng đầu vào.</li>\r\n       <li><code>row</code>: Hàng trong bảng sẽ tìm vị trí.</li>\r\n       <li><code>occurrence</code>: <i>[Tùy chọn]</i> Chỉ định trả về lần xuất hiện nào của hàng.</li>\r\n       <li><code>equationCriteria</code>: <i>[Tùy chọn]</i> kiểm soát phép so sánh giữa các hàng của bảng.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Tìm vị trí của lần xuất hiện đầu tiên của [a = 2, b = 4] trong bảng <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Tìm vị trí của lần xuất hiện thứ hai của [a = 2, b = 4] trong bảng <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Tìm vị trí của tất cả các lần xuất hiện của [a = 2, b = 4] trong bảng <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Trả về (các) vị trí của bất kỳ hàng nào được chỉ định trong bảng.",
        "Documentation.LongDescription": "Trả về (các) vị trí hàng từ <code>table</code> của lần xuất hiện đầu tiên của danh sách <code>rows</code>. Trả về -1 nếu không tìm thấy lần xuất hiện nào.\r\n    <ul>\r\n    <li><code>table</code>: Bảng đầu vào.</li>\r\n       <li><code>rows</code>:  Danh sách các hàng trong bảng sẽ tìm vị trí.</li>\r\n       <li><code>occurrence</code>: <i>[Tùy chọn]</i> Chỉ định trả về lần xuất hiện nào của hàng.</li>\r\n       <li><code>equationCriteria</code>: <i>[Tùy chọn]</i> kiểm soát phép so sánh giữa các hàng của bảng.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Tìm vị trí của lần xuất hiện đầu tiên của [a = 2, b = 4] or [a = 6, b = 8] trong bảng <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Tìm vị trí của tất cả các lần xuất hiện của [a = 2, b = 4] or [a = 6, b = 8] trong bảng <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.LongDescription": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Tách bảng đã chỉ định thành một danh sách các bảng sử dụng kích thước trang được chỉ định.",
        "Documentation.LongDescription": "Tách <code>table</code> thành danh sách của các bảng, nơi phần tử đầu tiên của danh sách là một bảng chứa hàng <code>pageSize</code> đầu tiên từ\r\n    bảng nguồn, phần tử tiếp theo của danh sách là một bảng chứa hàng <code>pageSize</code> tiếp theo từ bảng nguồn, v.v.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tách bảng gồm năm bản ghi thành các bảng trong đó mỗi bảng có hai bản ghi.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Trả về danh sách chứa các hàng đếm đầu tiên được chỉ định và các hàng còn lại.",
        "Documentation.LongDescription": "Trả về danh sách chứa hai bảng: một bảng có N hàng <code>table</code> đầu tiên (như được <code>count</code> chỉ định) và một bảng chứa các hàng <code>table</code> còn lại.\r\n\r\nNếu các bảng trong danh sách trả về được liệt kê chính xác một lần và theo thứ tự, hàm sẽ chỉ liệt kê <code>table</code> một lần.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trả về 2 hàng đầu tiên của bảng và các hàng còn lại trong bảng.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Chuyển đổi các hàng của bảng bằng hàm chuyển đổi được chỉ định.",
        "Documentation.LongDescription": "Tạo một <code>danh sách</code> bằng cách áp dụng phép toán <code>transform</code> cho từng hàng trong <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi các hàng của bảng thành một danh sách số.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Chuyển đổi các hàng của bảng số thành hồ sơ dạng văn bản.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.LongDescription": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Trả về phần của <code>text</code> sau <code>delimiter</code> được chỉ định.\r\n    <code>index</code> dạng số tùy chọn cho biết lần xuất hiện nào của <code>delimiter</code> sẽ được xem xét.\r\n    Danh sách tùy chọn <code>index</code> cho biết lần xuất hiện nào của <code>delimiter</code> sẽ được xem xét cũng như việc đánh chỉ mục có được thực hiện tính từ phần đầu hoặc cuối của đầu vào hay không.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Lấy phần của \"111-222-333\" sau gạch nối (đầu tiên).",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Lấy phần của \"111-222-333\" sau gạch nối thứ hai.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Lấy phần của \"111-222-333\" sau gạch nối thứ hai tính từ cuối.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Trả về ký tự tại vị trí được chỉ định.",
        "Documentation.LongDescription": "Trả về ký tự ở dạng giá trị văn bản <code>text</code> tại vị trí <code>index</code>. Ký tự đầu tiên trong văn bản tại vị trí 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Tìm ký tự tại vị trí 4 trong chuỗi \"Hello, World\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Trả về phần của <code>text</code> trước <code>delimiter</code> được chỉ định.\r\n    <code>index</code> dạng số tùy chọn cho biết lần xuất hiện nào của <code>delimiter</code> sẽ được xem xét.\r\n    Danh sách tùy chọn <code>index</code> cho biết lần xuất hiện nào của <code>delimiter</code> sẽ được xem xét, cũng như việc đánh chỉ mục có được thực hiện tính từ phần đầu hoặc cuối của đầu vào hay không.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Lấy phần của \"111-222-333\" trước gạch nối (đầu tiên).",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Lấy phần của \"111-222-333\" trước gạch nối thứ hai.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Lấy phần của \"111-222-333\" trước gạch nối thứ hai tính từ cuối.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Trả về kết quả văn bản có chứa chuỗi con hay không.",
        "Documentation.LongDescription": "Phát hiện xem <code>text</code> có chứa giá trị <code>substring</code> không. Trả về true nếu tìm thấy giá trị đó. Hàm này không hỗ trợ các ký tự đại diện hoặc biểu thức thông thường.\r\n      <br>\r\n      <br>\r\n      Đối số tùy chọn <code>comparer</code> có thể dùng để chỉ định các phép so sánh không phân biệt chữ hoa/thường hoặc phép so sánh có tính đến yếu tố văn hóa và ngôn ngữ.\r\n      Các trình so sánh cài sẵn sau đây được cung cấp bằng ngôn ngữ công thức:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Dùng để thực hiện phép so sánh thứ tự có phân biệt chữ hoa/thường</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Dùng để thực hiện phép so sánh thứ tự không phân biệt chữ hoa/thường</li>\r\n        <li> <code>Comparer.FromCulture</code>: Dùng để thực hiện phép so sánh có tính đến yếu tố văn hóa</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Tìm xem văn bản \"Hello World\" có chứa \"Hello\" hay không.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Tìm xem văn bản \"Hello World\" có chứa \"hello\" hay không.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Tìm xem văn bản \"Hello World\" có chứa \"hello\" không bằng trình so sánh không phân biệt chữ hoa/thường.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Trả về các ký tự cuối cùng của văn bản.",
        "Documentation.LongDescription": "Trả về giá trị <code>text</code> là các ký tự <code>count</code> cuối cùng của giá trị <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Nhận 5 ký tự cuối cùng của văn bản \"Hello, World\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Cho biết văn bản có kết thúc bằng giá trị được chỉ định hay không.",
        "Documentation.LongDescription": "Cho biết văn bản đã chọn, <code>text</code>, có kết thúc bằng giá trị được chỉ định, <code>substring</code> hay không. Thông tin chỉ thị có phân biệt chữ hoa/chữ thường.\r\n\r\n      <div>\r\n        <code>comparer</code> là <code>Trình so sánh</code> dùng để kiểm soát phép so sánh. Có thể dùng các trình so sánh để cung cấp phép so sánh không phân biệt chữ hoa/chữ thường và có nhận thức về văn hóa và ngôn ngư.\r\n      </div>\r\n      <div>\r\n        Các trình so sánh cài sẵn sau đây được cung cấp bằng ngôn ngữ công thức:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Dùng để tiến hành so sánh theo thứ tự chính xác</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Dùng để tiến hành so sánh không phân biệt chữ hoa chữ thường theo thứ tự chính xác</li>\r\n        <li> <code>Comparer.FromCulture</code>: Dùng để tiến hành so sánh có nhận thức về văn hóa</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Kiểm tra \"Hello, World\" có kết thúc bằng \"world\" hay không.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Kiểm tra \"Hello, World\" có kết thúc bằng \"World\" hay không.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Trả về văn bản được định dạng từ chuỗi định dạng và các đối số.",
        "Documentation.LongDescription": "Trả về văn bản đã định dạng được tạo bằng cách áp dụng <code>arguments</code> từ danh sách hoặc bản ghi cho chuỗi định dạng <code>formatString</code>. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Định dạng danh sách các số.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Định dạng các loại dữ liệu khác nhau từ bản ghi theo văn hóa Anh-Mỹ.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Trả về chuỗi con tới độ dài cụ thể.",
        "Documentation.LongDescription": "Trả về <code>count</code> ký tự hoặc đến cuối <code>text</code>; tại giá trị bù <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Tìm chuỗi con từ văn bản \"Hello World\" bắt đầu ở chỉ mục 6 kéo dài 5 ký tự.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Tìm chuỗi con từ văn bản \"Hello World\" bắt đầu ở chỉ mục 6 đến cuối.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Trả về văn bản có độ dài được chỉ định bằng cách đệm phần cuối của văn bản cho sẵn.",
        "Documentation.LongDescription": "Trả về giá trị <code>text</code> được đệm tới độ dài <code>count</code> bằng cách chèn dấu cách vào cuối giá trị văn bản <code>text</code>.\r\n    Có thể dùng ký tự tùy chọn <code>character</code> để chỉ định ký tự dùng để đệm. Ký tự đệm mặc định là dấu cách.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Đệm phần cuối của giá trị văn bản để đạt độ dài 10 ký tự.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Đệm phần cuối của giá trị văn bản bằng \"|\" để đạt độ dài 10 ký tự.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Trả về văn bản có độ dài được chỉ định bằng cách đệm phần đầu của văn bản cho sẵn.",
        "Documentation.LongDescription": "Trả về giá trị <code>text</code> được đệm tới độ dài <code>count</code> bằng cách chèn dấu cách vào đầu giá trị văn bản <code>text</code>.\r\n    Có thể dùng ký tự tùy chọn <code>character</code> để chỉ định ký tự dùng để đệm. Ký tự đệm mặc định là dấu cách.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Đệm phần đầu của giá trị văn bản để đạt độ dài 10 ký tự.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Đệm phần đầu của giá trị văn bản bằng \"|\" để đạt độ dài 10 ký tự.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Trả về vị trí đầu tiên của giá trị (-1 nếu không tìm thấy).",
        "Documentation.LongDescription": "Trả về vị trí xuất hiện đã chỉ định của giá trị văn bản <code>substring</code> có trong <code>text</code>.\r\n    Có thể sử dụng tham số tùy chọn <code>occurrence</code> để chỉ định vị trí xuất hiện sẽ trả về (lần xuất hiện đầu tiên theo mặc định).\r\n    Trả về -1 nếu không tìm thấy <code>substring</code>.\r\n\r\n      <div>\r\n        <code>comparer</code> là <code>Comparer</code> dùng để kiểm soát phép so sánh. Có thể dùng các trình so sánh để cung cấp phép so sánh không phân biệt chữ hoa/chữ thường hoặc có nhận biết về văn hóa và ngôn ngữ\r\n      </div>\r\n      <div>\r\n        Trình so sánh cài sẵn sau đây được cung cấp bằng ngôn ngữ công thức:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Dùng để tiến hành so sánh theo thứ tự chính xác</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Dùng để tiến hành so sánh không phân biệt chữ hoa/chữ thường theo thứ tự chính xác</li>\r\n        <li> <code>Comparer.FromCulture</code>: Dùng để tiến hành so sánh có nhận biết về văn hóa</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nhận vị trí của lần xuất hiện đầu tiên của \"World\" trong văn bản \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Tìm vị trí xuất hiện cuối cùng của \"World\" trong \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Trả về vị trí đầu tiên trong giá trị văn bản của ký tự bất kỳ được liệt kê (-1 nếu không tìm thấy).",
        "Documentation.LongDescription": "Trả về vị trí đầu tiên của ký tự bất kỳ trong danh sách <code>characters</code> tìm được trong <code>text</code>.\n    Có thể sử dụng tham số tùy chọn <code>occurrence</code> để chỉ định trả về vị trí xuất hiện nào.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Tìm vị trí đầu tiên của \"W\" hoặc \"H\" trong văn bản \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Tìm vị trí của \"W\" hoặc \"H\" trong văn bản \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Trả về chuỗi con tìm được tại phần bù.",
        "Documentation.LongDescription": "Trả về chuỗi con từ văn bản <code>text</code> tìm được tại phần bù <code>offset</code>.\r\n    Có thể bao gồm tham số tùy chọn <code>count</code> để chỉ định số lượng ký tự sẽ trả về. Xuất hiện lỗi nếu không có đủ ký tự.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Tìm chuỗi con từ văn bản \"Hello World\" bắt đầu tại chỉ mục 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Tìm chuỗi con từ văn bản \"Hello World Hello\" bắt đầu tại chỉ mục 6 trải dài trên 5 ký tự.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Loại bỏ tất cả những lần xuất hiện của giá trị hoặc danh sách ký tự cụ thể khỏi giá trị văn bản đầu vào.",
        "Documentation.LongDescription": "Trả về một bản sao của giá trị văn bản <code>text</code> đã loại bỏ tất cả ký tự khỏi <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ ký tự , và ; khỏi giá trị văn bản.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Loại bố số lượng ký tự bắt đầu tại phần bù cho sẵn",
        "Documentation.LongDescription": "Trả về một bản sao của giá trị văn bản <code>text</code> đã loại bỏ tất cả ký tự khỏi vị trí <code>offset</code>.\r\n    Có thể dùng tham số tùy chọn <code>count</code> để chỉ định số lượng ký tự sẽ loại bỏ. Giá trị mặc định của <code>count</code> là 1. Giá trị vị trí bắt đầu tại 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ 1 ký tự khỏi giá trị văn bản \"ABEFC\" tại vị trí 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Loại bỏ hai ký tự khỏi giá trị văn bản \"ABEFC\" bắt đầu tại vị trí 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Trả về một giá trị văn bản bao gồm văn bản đầu vào được lặp lại ở số lần được chỉ định.",
        "Documentation.LongDescription": "Trả về một giá trị văn bản bao gồm văn bản đầu vào <code>text</code> được lặp lại <code>count</code> lần.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Lặp lại văn bản \"a\" 5 lần.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Lặp lại văn bản \"helloworld\" 3 lần.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Chọn tất cả các lần xuất hiện của ký tự hoặc danh sách ký tự cụ thể từ giá trị văn bản đầu vào.",
        "Documentation.LongDescription": "Trả về một bản sao của giá trị văn bản <code>text</code> đã loại bỏ tất cả ký tự không nằm trong <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Chọn tất cả các ký tự trong phạm vi từ 'a' đến 'z' từ giá trị văn bản.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Tách văn bản thành danh sách giá trị văn bản dựa trên dấu tách được chỉ định.",
        "Documentation.LongDescription": "Trả về danh sách giá trị văn bản là kết quả của việc tách một giá trị văn bản <code>text</code> dựa trên dấu tách được chỉ định, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách từ giá trị văn bản \"Name|Address|PhoneNumber\" được phân tách bằng \"|\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Trả về danh sách giá trị văn bản, tách trên ký tự bất kỳ trong dấu tách.",
        "Documentation.LongDescription": "Trả về danh sách giá trị văn bản là kết quả của việc tách một giá trị văn bản <code>text</code> dựa trên ký tự bất kỳ trong dấu tách được chỉ định, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách từ giá trị văn bản \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Trả về phần đầu văn bản.",
        "Documentation.LongDescription": "Trả về <code>count</code> ký tự đầu tiên của <code>text</code> ở dạng giá trị văn bản.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Nhận 5 ký tự đầu tiên của văn bản \"Hello, World\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Cho biết văn bản có bắt đầu bằng giá trị được chỉ định hay không.",
        "Documentation.LongDescription": "Trả về đúng nếu giá trị văn bản <code>text</code> bắt đầu bằng giá trị văn bản <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Giá trị <code>text</code> sẽ được tìm kiếm</li>\r\n        <li><code>substring</code>: <i></i> Giá trị <code>text</code> là chuỗi con sẽ được tìm kiếm trong  <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Tùy chọn]</i> Sử dụng <code>Comparer</code> để kiểm soát các phép so sánh. Chẳng hạn, có thể sử dụng <code>Comparer.OrdinalIgnoreCase</code> để thực hiện các tìm kiếm không phân biệt chữ hoa/chữ thường</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> là một <code>Comparer</code> được dùng để kiểm soát phép so sánh. Có thể sử dụng các trình so sánh để cung cấp các phép so sánh không phân biệt chữ hoa/chữ thường hoặc phép so sánh có nhận thức về văn hóa và ngôn ngữ.\r\n      </div>\r\n      <div>\r\n        Các trình so sánh tích hợp sau đây được cung cấp bằng ngôn ngữ công thức:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Được dùng để thực hiện phép so sánh có thứ tự chính xác</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Được dùng để thực hiện phép so sánh không phân biệt chữ hoa/chữ thường có thứ tự chính xác</li>\r\n        <li> <code>Comparer.FromCulture</code>: Được dùng để thực hiện phép so sánh có nhận thức về văn hóa</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Kiểm tra văn bản \"Hello, World\" có bắt đầu bằng văn bản \"hello\" hay không.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Kiểm tra văn bản \"Hello, World\" có bắt đầu bằng văn bản \"Hello\" hay không.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Trả về một loại biểu thị các hàm có tham số cụ thể và trả về ràng buộc loại.",
        "Documentation.LongDescription": "Tạo <code>loại hàm</code> từ <code>signature</code>, bản ghi của <code>ReturnType</code> và <code>Tham số</code> và <code>min</code>, số nhỏ nhất của đối số cần để gọi hàm.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tạo loại chức năng lấy tham số dạng số có tên là X và trả về một số.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Trả về một loại biểu thị bản ghi có ràng buộc loại cụ thể về trường.",
        "Documentation.LongDescription": "Trả về một loại biểu thị bản ghi có ràng buộc loại cụ thể về trường.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Linh hoạt tạo loại bảng.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Xác định giá trị của loại đầu tiên luôn tương thích với loại thứ hai.",
        "Documentation.LongDescription": "Xác định xem giá trị của <code>type1</code> có luôn tương thích với <code>type2</code> hay không.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Xác định giá trị của số loại cũng có thể được coi là loại bất kỳ.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Xác định giá trị của loại bất kỳ cũng có thể được coi là số loại.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Thay thế các khía cạnh của một loại.",
        "Documentation.LongDescription": "Thay thế các khía cạnh của <code>type</code> bằng các khía cạnh chứa trong bản ghi <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Trả về một loại bảng mới với tất cả các khóa được thay thế bằng danh sách khóa được chỉ định.",
        "Documentation.LongDescription": "Trả về một loại bảng mới với tất cả các khóa được thay thế bằng danh sách khóa được chỉ định.<br>\r\n    <br>\r\n    Mỗi khóa được xác định bằng một bản ghi ở dạng sau:\r\n    <ul>\r\n      <li>\r\n        <code>Cột</code>: danh sách tên cột xác định khóa\r\n      </li>\r\n      <li>\r\n        <code>Chính</code>: <code>đúng</code> nếu khóa là khóa chính của bảng; nếu không, <code>sai</code>\r\n      </li>\r\n    </ul>\r\n    Xác thực danh sách khóa được chỉ định để đảm bảo rằng không xác định nhiều hơn một khóa chính và tất cả các tên cột khoá đều tồn tại trên loại bảng.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Thay thế thông tin khóa trên loại bảng.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Xóa thông tin khóa đã xác định trước đây trên loại bảng.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Trả về loại của cột trong bảng.",
        "Documentation.LongDescription": "Trả về loại của cột <code>column</code> trong loại bảng <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Trả về một URI tuyệt đối là kết hợp của URI cơ sở đầu vào và URI tương đối.",
        "Documentation.LongDescription": "Trả về một URI tuyệt đối là kết hợp của <code>baseUri</code> đầu vào và <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Trả về tổng của hai giá trị.",
        "Documentation.LongDescription": "Trả về tổng của <code>value1</code> và <code>value2</code>. Có thể chỉ định tham số <code>precision</code> tùy chọn, theo mặc định <code>Precision.Double</code> được sử dụng.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Trả về giá trị nếu giá trị tương thích với loại đã chỉ định.",
        "Documentation.LongDescription": "Trả về giá trị nếu giá trị tương thích với loại được chỉ định hay không. Cách này tương đương với toán tử “như” trong M, với ngoại lệ là có thể chấp nhận các thuộc tính loại mã định danh như Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Truyền một số sang một số.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Tìm cách truyền một giá trị văn bản sang một số.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Trả về -1, 0 hoặc 1 dựa trên việc giá trị đầu tiên nhỏ hơn, bằng hay lớn hơn giá trị thứ hai.",
        "Documentation.LongDescription": "Trả về -1, 0 hoặc 1 dựa trên việc giá trị đầu tiên nhỏ hơn, bằng hay lớn hơn giá trị thứ hai.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Trả về kết quả chia giá trị đầu tiên cho giá trị thứ hai.",
        "Documentation.LongDescription": "Trả về kết quả chia <code>value1</code> cho <code>value2</code>. Có thể chỉ định tham số <code>precision</code> tùy chọn, theo mặc định <code>Precision.Double</code> được sử dụng.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Trả về kết quả hai giá trị bằng nhau hay không bằng nhau.",
        "Documentation.LongDescription": "Trả về true nếu giá trị <code>value1</code> bằng giá trị <code>value2</code>, false nếu ngược lại.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Xác định giá trị có tương thích với loại được chỉ định hay không.",
        "Documentation.LongDescription": "Xác định xem giá trị có tương thích với loại được chỉ định hay không. Cách này tương đương với toán tử “là” trong M, với ngoại lệ là có thể chấp nhận các thuộc tính loại mã định danh như Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "So sánh hai cách xác định xem một số có tương thích với số loại hay không.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Trả về tích của hai giá trị.",
        "Documentation.LongDescription": "Trả về tích của phép nhân <code>value1</code> với <code>value2</code>. Có thể chỉ định tham số <code>precision</code> tùy chọn, theo mặc định <code>Precision.Double</code> được sử dụng.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Đánh giá truy vấn so với mục tiêu.",
        "Documentation.LongDescription": "<p>Đánh giá <code>query</code> dựa trên <code>target</code> bằng các tham số được chỉ định trong <code>parameters</code> và tùy chọn được chỉ định trong <code>options</code>.</p>\r\n<p>Đầu ra của truy vấn được xác định bởi <code>target</code>.</p>\r\n<p><code>target</code> cung cấp ngữ cảnh cho thao tác được mô tả bởi <code>query</code>.</p>\r\n<p><code>query</code> mô tả truy vấn được triển khai dựa trên <code>target</code>. <code>query</code> được thể hiện theo cách cụ thể đối với <code>target</code> (ví dụ: câu lệnh T-SQL).</p>\r\n<p>Giá trị <code>parameters</code> không bắt buộc có thể chứa danh sách hoặc bản ghi phù hợp để cung cấp các giá trị tham số theo dự kiến của <code>query</code>.</p>\r\n<p>Bản ghi <code>options</code> không bắt buộc có thể chứa các tùy chọn ảnh hưởng đến hành vi đánh giá của <code>query</code> dựa trên <code>target</code>. Những tùy chọn này là cụ thể đối với <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Trả về kết quả hai giá trị bằng nhau hay không bằng nhau.",
        "Documentation.LongDescription": "Trả về giá trị rỗng nếu đối số '<code>value1</code>' hoặc '<code>value2</code>' là giá trị rỗng hoặc tương đương với Value.Equals nếu ngược lại.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Thay thế thông tin siêu dữ liệu của đầu vào.",
        "Documentation.LongDescription": "Thay thế thông tin siêu dữ liệu của đầu vào.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Thay thế loại của giá trị.",
        "Documentation.LongDescription": "Thay thế loại của <code>value</code> bằng <code>type</code> được cung cấp.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Thay thế loại mặc định của bản ghi với loại cụ thể hơn.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Trả về hiệu của hai giá trị.",
        "Documentation.LongDescription": "Trả về hiệu của <code>value1</code> và <code>value2</code>. Có thể chỉ định tham số <code>precision</code> tùy chọn, theo mặc định <code>Precision.Double</code> được sử dụng.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Tạo tác vụ mà khi được thực thi sẽ trả về kết quả thực hiện yêu cầu HTTP dưới dạng giá trị nhị phân.",
        "Documentation.LongDescription": "Tạo một hành động mà khi được thực thi, sẽ trả về kết quả của việc thực hiện yêu cầu <code>method</code> dựa trên <code>url</code> bằng HTTP dưới dạng giá trị nhị phân.\r\n    Tham số bản ghi tùy chọn <code>options</code> có thể được cung cấp để chỉ định thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>Query</code> : Th&#234;m tham số truy vấn theo chương trình v&#224;o URL v&#224; kh&#244;ng phải quan t&#226;m đ&#234;́n việc tho&#225;t.</li>\r\n<li><code>ApiKeyName</code> : Nếu site đ&#237;ch c&#243; kh&#225;i niệm về kh&#243;a API thì tham số n&#224;y c&#243; thể được sử dụng để chỉ định t&#234;n (kh&#244;ng phải gi&#225; trị) của tham số khóa phải được sử dụng trong URL. Gi&#225; trị kh&#243;a thực tế được cung cấp trong th&#244;ng tin xác thực.</li>\r\n<li><code>Headers</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng bản ghi sẽ cung cấp ti&#234;u đề bổ sung cho y&#234;u cầu HTTP.</li>\r\n<li><code>Timeout</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng khoảng thời gian sẽ thay đổi thời gian chờ cho y&#234;u cầu HTTP. Gi&#225; trị mặc định l&#224; 100 gi&#226;y.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng danh s&#225;ch sẽ loại trừ c&#225;c khóa ti&#234;u đề HTTP n&#224;y khỏi vi&#234;̣c trở thành một phần trong ph&#233;p t&#237;nh đ&#234;̉ tạo bộ đệm ẩn cho dữ liệu.</li>\r\n<li><code>IsRetry</code> : Vi&#234;̣c chỉ định gi&#225; trị l&#244;-gic n&#224;y l&#224; true sẽ bỏ qua mọi phản hồi hiện c&#243; trong bộ đệm ẩn khi tải dữ liệu.</li>\r\n<li><code>ManualStatusHandling</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng danh s&#225;ch sẽ ngăn chặn mọi thao t&#225;c xử lý t&#237;ch hợp sẵn cho c&#225;c y&#234;u cầu HTTP có phản hồi chứa một trong c&#225;c m&#227; trạng th&#225;i này.</li>\r\n<li><code>RelativePath</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng văn bản sẽ gắn kết giá trị với URL cơ sở trước khi thực hiện y&#234;u cầu.</li>\r\n<li><code>Content</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y sẽ khi&#234;́n nội dung của giá trị trở th&#224;nh n&#244;̣i dung của y&#234;u cầu HTTP.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Lưu ý rằng hàm này bị vô hiệu hóa ở hầu hết các ngữ cảnh. Hãy cân nhắc sử dụng Web.Contents hoặc Web.Headers để thay thế.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Thực hiện một yêu cầu GET với Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Nhập URL của điểm cuối API REST Azure Enterprise được liên kết với đăng ký của bạn",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Trả về kết quả nhị phân của lệnh gọi tới url được cung cấp cho API Azure Enterprise.",
        "Documentation.Examples": [
          {
            "Description": "Sử dụng hàm AzureEnterprise.Contents để trả về kết quả của một báo cáo cụ thể.",
            "Code": "        cho phép\r\n            báo cáo = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            bỏ qua = Table.Skip(report, 2),\r\n            phân tách =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            được đề xuất = Table.PromoteHeaders(split)\r\n        trong\r\n            được đề xuất",
            "Result": "Bảng"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Trả về nội dung của đối tượng nhị phân được chỉ định từ tín liệu bộ nhớ Azure.",
        "Documentation.LongDescription": "Trả về nội dung của blob tại URL, <code>url</code>, từ tín hiệu bộ nhớ Azure. <code>options</code> có thể được chỉ định để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>BlockSize</code> : Số byte cần đọc trước khi chờ mức sử dụng dữ liệu. Gi&#225; trị mặc định l&#224; 4 MB.</li>\r\n<li><code>RequestSize</code> : Số byte cần c&#244;́ gắng đọc trong m&#244;̣t y&#234;u c&#226;̀u HTTP đ&#234;́n máy chủ. Giá trị mặc định là 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Tùy chọn ConcurrentRequests h&#244;̃ trợ tải xu&#244;́ng dữ li&#234;̣u nhanh hơn bằng cách chỉ định s&#244;́ lượng y&#234;u c&#226;̀u c&#226;̀n thực hi&#234;̣n song song, với chi phí sử dụng b&#244;̣ nhớ. B&#244;̣ nhớ được y&#234;u c&#226;̀u là (ConcurrentRequest * RequestSize). Giá trị mặc định là 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Trả về nội dung của tệp được chỉ định từ hệ thống tệp Azure Data Lake Storage.",
        "Documentation.LongDescription": "Trả về nội dung của tệp tại URL, <code>url</code>, từ hệ thống tệp Azure Data Lake Storage. <code>options</code> có thể được chỉ định để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n<li><code>BlockSize</code> : Số byte cần đọc trước khi chờ mức sử dụng dữ liệu. Gi&#225; trị mặc định l&#224; 4 MB.</li>\r\n<li><code>RequestSize</code> : Số byte cần c&#244;́ gắng đọc trong m&#244;̣t y&#234;u c&#226;̀u HTTP đ&#234;́n máy chủ. Giá trị mặc định là 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Tùy chọn ConcurrentRequests h&#244;̃ trợ tải xu&#244;́ng dữ li&#234;̣u nhanh hơn bằng cách chỉ định s&#244;́ lượng y&#234;u c&#226;̀u c&#226;̀n thực hi&#234;̣n song song, với chi phí sử dụng b&#244;̣ nhớ. B&#244;̣ nhớ được y&#234;u c&#226;̀u là (ConcurrentRequest * RequestSize). Giá trị mặc định là 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Trả về độ dài gần đúng của nhị phân.",
        "Documentation.LongDescription": "Trả về độ dài gần đúng của <code>binary</code> hoặc lỗi nếu nguồn dữ liệu không hỗ trợ độ dài gần đúng.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Nhận được độ dài gần đúng của giá trị nhị phân.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Tải giá trị nhị phân trong bộ nhớ.",
        "Documentation.LongDescription": "Đệm giá trị nhị phân trong bộ nhớ. Kết quả của thao tác gọi này là một giá trị nhị phân ổn định, tức là giá trị đó có độ dài và trật tự byte tất định. ",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Tạo phiên bản ổn định của giá trị nhị phân.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Kết hợp danh sách các nhị phân thành một nhị phân đơn.",
        "Documentation.LongDescription": "Kết hợp danh sách các nhị phân thành một nhị phân đơn.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Tạo một nhị phân từ giá trị cho sẵn",
        "Documentation.LongDescription": "Trả về giá trị <code>binary</code> từ <code>value</code> đã cho. Nếu <code>value</code> đã cho là <code>null</code>, thì <code>Binary.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> đã cho là <code>binary</code>, thì <code>value</code> sẽ được trả về. Giá trị của các loại sau có thể được chuyển đổi thành giá trị <code>binary</code>:\r\n      <ul>\r\n        <li><code>text</code>: Giá trị <code>binary</code> từ dạng biểu diễn văn bản. Tham khảo <code>Binary.FromText</code> để biết chi tiết.</li>\r\n      </ul>\r\nNếu <code>value</code> thuộc bất kỳ loại nào khác, thì lỗi sẽ được trả về.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Nhận giá trị <code>binary</code> của <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Kết hợp danh sách các số thành một giá trị nhị phân.",
        "Documentation.LongDescription": "Kết hợp danh sách các số thành một giá trị nhị phân.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Mã hóa dữ liệu từ dạng thức văn bản thành dạng thức nhị phân.",
        "Documentation.LongDescription": "Trả về kết quả chuyển đổi giá trị văn bản <code>text</code> thành một nhị phân (danh sách <code>number</code>). Có thể chỉ định <code>encoding</code> để cho biết mã hóa được sử dụng trong giá trị văn bản.\r\n      Có thể sử dụng các giá trị <code>BinaryEncoding</code> sau đây cho <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Mã hóa cơ sở 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Mã hóa hệ 16</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Giải mã \"1011\" thành nhị phân.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Giải mã \"1011\" thành nhị phân có mã hóa hệ 16.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Đọc luồng nhị phân và cố xác định loại nội dung và thông tin định dạng của luồng.",
        "Documentation.LongDescription": "Trả về một bản ghi có trường Content.Type chứa loại MIME được suy ra. \r\n    Nếu loại nội dung được suy ra là văn bản/* cũng như phát hiện một trang mã cho quá trình mã hóa, thì sẽ trả về thêm trường Content.Encoding có chứa mã hóa của luồng.\r\n    Nếu loại nội dung được suy ra là văn bản/csv và định dạng được phân tách, thì sẽ trả về thêm trường Csv.PotentialDelimiter có chứa bảng phân tích các dấu phân tách tiềm ẩn.\r\n    Nếu loại nội dung được suy ra là văn bản/csv và định dạng có chiều rộng cố định, thì sẽ trả về thêm trường Csv.PotentialPositions có chứa danh sách phân tích các vị trí cột có chiều rộng cố định tiềm ẩn.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Trả về số lượng ký tự.",
        "Documentation.LongDescription": "Trả về số lượng ký tự.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Chuyển đổi một giá trị nhị phần thành một danh sách số.",
        "Documentation.LongDescription": "Chuyển đổi một giá trị nhị phần thành một danh sách số.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Mã hóa dữ liệu nhị phân thành dạng thức văn bản.",
        "Documentation.LongDescription": "Trả về kết quả chuyển đổi danh sách số nhị phân <code>binary</code> thành giá trị văn bản. Có thể tùy ý chỉ định <code>encoding</code> để cho biết mã hóa được sử dụng trong giá trị văn bản đã tạo\r\n      Có thể sử dụng các giá trị <code>BinaryEncoding</code> sau đây cho <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Mã hóa cơ sở 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Mã hóa hệ 16</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Tạo bản ghi lỗi được sửa đổi không kích hoạt dự phòng khi được trình xử lý đã xác định trên dạng xem đưa ra (qua Binary.View).",
        "Documentation.LongDescription": "Tạo bản ghi lỗi được sửa đổi từ <code>errorRecord</code> không kích hoạt dự phòng khi được trình xử lý đã xác định trên dạng xem đưa ra (qua Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Tạo một hàm có thể được chặn bởi một trình xử lý được xác định trên một dạng xem (thông qua Binary.View).",
        "Documentation.LongDescription": "<p>Tạo hàm dạng xem dựa trên <code>function</code> có thể được xử lý trong dạng xem tạo bởi <code>Binary.View</code>.</p>\r\n<p>Có thể sử dụng bộ xử lý <code>OnInvoke</code> của <code>Binary.View</code> để xác định bộ xử lý cho hàm dạng xem.</p>\r\n<p>Như với bộ xử lý cho các phép toán tích hợp, nếu không bộ xử lý <code>OnInvoke</code> nào được chỉ định, hoặc nếu bộ xử lý không xử lý hàm dạng xem, hoặc bộ xử lý phát sinh lỗi, <code>function</code> sẽ được áp dụng ở phía trên cùng của dạng xem.</p>\r\n<p>Tham khảo tài liệu về trình kết nối tùy chỉnh Power Query được phát hành để biết mô tả đầy đủ hơn về <code>Binary.View</code> và các hàm dạng xem tùy chỉnh.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Định dạng nhị phân đọc số nguyên có dấu 64 bit đã được mã hóa bằng mã hóa có độ dài biến thiên 7 bit.",
        "Documentation.LongDescription": "Định dạng nhị phân đọc số nguyên có dấu 64 bit đã được mã hóa bằng mã hóa có độ dài biến thiên 7 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Định dạng nhị phân đọc số nguyên không dấu 64 bit đã được mã hóa bằng mã hóa có độ dài biến thiên 7 bit.",
        "Documentation.LongDescription": "Định dạng nhị phân đọc số nguyên không dấu 64 bit đã được mã hóa bằng mã hóa có độ dài biến thiên 7 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Một định dạng nhị phân đọc một số nguyên không dấu 8 bit.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc một số nguyên không dấu 8 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Một định dạng nhị phân đọc giá trị thập phân 16 byte .NET.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc giá trị thập phân 16 byte .NET.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Một định dạng nhị phân đọc giá trị dấu chấm động có độ chính xác kép IEEE 8 byte.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc giá trị dấu chấm động có độ chính xác kép IEEE 8 byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Trả về một định dạng nhị phân đọc trình tự các mục và trả về một danh sách.",
        "Documentation.LongDescription": "Trả về một định dạng nhị phân đọc trình tự mục và trả về một <code>danh sách</code>.  Tham số <code>binaryFormat</code> chỉ định định dạng nhị phân của mỗi mục.  Có ba cách để xác định số lượng mục được đọc: <ul><li>Nếu <code>countOrCondition</code> không được chỉ định thì định dạng nhị phân sẽ đọc cho đến khi không còn mục nào.</li><li>Nếu <code>countOrCondition</code> là một số thì định dạng nhị phân sẽ đọc toàn bộ số lượng mục đó.</li><li>Nếu <code>countOrCondition</code> là một hàm thì hàm đó sẽ được gọi ra cho mỗi mục được đọc.  Hàm trả về true để tiếp tục và false để dừng đọc mục.  Mục cuối cùng được thêm vào danh sách.</li><li>Nếu <code>countOrCondition</code> là định dạng nhị phân thì tổng số mục theo dự kiến sẽ đứng trước danh sách và định dạng đã chỉ định sẽ được dùng để đọc tổng đó.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Đọc byte cho đến cuối dữ liệu.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Đọc hai byte.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Đọc byte cho đến khi giá trị byte lớn hơn hoặc bằng hai.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Một định dạng nhị phân đọc 0 byte và trả về giá trị rỗng.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc 0 byte và trả về giá trị rỗng.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Trả về một định dạng nhị phân đọc một bản ghi.",
        "Documentation.LongDescription": "Trả về một định dạng nhị phân đọc một bản ghi.  Tham số <code>record</code> chỉ định định dạng của bản ghi.  Mỗi trường trong bản ghi có một định dạng nhị phân khác.  Nếu trường chứa một giá trị không phải là giá trị định dạng nhị phân thì không có dữ liệu nào được đọc đối với trường đó và giá trị trường được hồi báo vào kết quả.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Đọc một bản ghi chứa một số nguyên 16 bit và một số nguyên 32 bit.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Một định dạng nhị phân đọc một số nguyên có dấu 16 bit.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc một số nguyên có dấu 16 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Một định dạng nhị phân đọc một số nguyên có dấu 32 bit.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc một số nguyên có dấu 32 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Một định dạng nhị phân đọc một số nguyên có dấu 64 bit.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc một số nguyên có dấu 64 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Một định dạng nhị phân đọc giá trị dấu chấm động có độ chính xác đơn IEEE 4 byte.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc giá trị dấu chấm động có độ chính xác đơn IEEE 4 byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Trả về một định dạng nhị phân đọc một giá trị văn bản.",
        "Documentation.LongDescription": "Trả về một định dạng nhị phân đọc một giá trị văn bản.  <code>length</code> chỉ định số lượng byte để giải mã hoặc định dạng nhị phân có độ dài đứng trước văn bản.  Giá trị <code>encoding</code> tùy chọn chỉ định việc mã hóa của văn bản.  Nếu <code>encoding</code> không được chỉ định thì mã hóa được xác định từ dấu thứ tự byte Unicode.  Nếu không có dấu thứ tự byte nào thì sẽ sử dụng  <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Giải mã hai byte ở dạng văn bản ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Giải mã văn bản ASCII nơi độ dài của văn bản tính bằng byte xuất hiện trước văn bản ở dạng byte.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Một định dạng nhị phân đọc một số nguyên không dấu 16 bit.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc một số nguyên không dấu 16 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Một định dạng nhị phân đọc một số nguyên không dấu 32 bit.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc một số nguyên không dấu 32 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Một định dạng nhị phân đọc một số nguyên không dấu 64 bit.",
        "Documentation.LongDescription": "Một định dạng nhị phân đọc một số nguyên không dấu 64 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Tạo số nguyên 8 bit từ giá trị đã cho.",
        "Documentation.LongDescription": "Trả về giá trị <code>number</code> 8 bit từ <code>value</code> đã cho. Nếu <code>value</code> đã cho là <code>null</code>, <code>Byte.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> là một <code>number</code> trong khoảng một số nguyên 8 bit không có phần thập phân, thì <code>value</code> sẽ được trả về. Nếu số nguyên có phần thập phân, thì số sẽ được làm tròn bằng chế độ làm tròn được chỉ định. Chế độ làm tròn mặc định là <code>RoundingMode.ToEven</code>. Nếu <code>value</code> là bất kỳ loại nào khác, trước tiên, giá trị này sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.FromText</code>. Tham khảo <code>Number.Round</code> để biết các chế độ làm tròn sẵn dùng. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Lấy giá trị <code>số</code> nguyên 8 bit của <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Lấy giá trị <code>số</code> nguyên 8 bit của <code>\"4,5\"</code> bằng <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Chuyển đổi số thành ký tự văn bản.",
        "Documentation.LongDescription": "Trả về ký tự tương đương với số.<br>\r\n    <br>\r\n    <code>number</code> được cung cấp phải là điểm mã Unicode 21 bit.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi một số thành giá trị ký tự tương đương.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Chuyển đổi một ký tự thành số và quay lại.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Chuyển đổi điểm mã thập lục phân cho biểu tượng cảm xúc \"mặt cười toe toét\" thành cặp thay thế UTF-16 tương đương.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Chuyển đổi một ký tự thành giá trị số.",
        "Documentation.LongDescription": "Trả về số tương đương với <code>character</code>.<br>\r\n    <br>\r\n    Kết quả sẽ là điểm mã Unicode 21 bit được biểu thị bằng ký tự được cung cấp hoặc cặp thay thế.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi một ký tự thành giá trị số tương đương.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Chuyển đổi cặp thay thế UTF-16 cho biểu tượng cảm xúc \"mặt cười toe toét\" thành điểm mã thập lục phân tương đương.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Trả về một hàm kết hợp một danh sách văn bản bằng cách sử dụng dấu tách được chỉ định.",
        "Documentation.LongDescription": "Trả về một hàm kết hợp một danh sách giá trị văn bản thành một giá trị văn bản đơn bằng cách sử dụng dấu tách được chỉ định.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Liệt kê các giá trị văn bản và dùng dấu chấm phẩy để phân tách.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Kết hợp văn bản của hai cột bằng dấu tách dấu phẩy và trích dẫn kiểu CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Trả về một hàm kết hợp một danh sách văn bản bằng cách sử dụng một trình tự dấu tách.",
        "Documentation.LongDescription": "Trả về một hàm kết hợp một danh sách giá trị văn bản thành một giá trị văn bản đơn bằng cách sử dụng trình tự dấu tách.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp một danh sách giá trị văn bản bằng một trình tự dấu tách.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Trả về một hàm kết hợp một danh sách văn bản bằng cách sử dụng độ dài được chỉ định.",
        "Documentation.LongDescription": "Trả về một hàm kết hợp một danh sách giá trị văn bản thành một giá trị văn bản đơn bằng cách sử dụng độ dài được chỉ định.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp một danh sách giá trị văn bản bằng cách trích xuất số lượng ký tự được chỉ định từ mỗi giá trị đầu vào.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Kết hợp một danh sách giá trị văn bản bằng cách trích xuất số lượng ký tự được chỉ định, sau khi điền trước kết quả với văn bản mẫu.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Trả về một hàm kết hợp một danh sách văn bản bằng cách sử dụng các vị trí đầu ra được chỉ định.",
        "Documentation.LongDescription": "Trả về một hàm kết hợp một danh sách giá trị văn bản thành một giá trị văn bản đơn bằng cách sử dụng vị trí đầu ra được chỉ định.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp một danh sách giá trị văn bản bằng cách đặt chúng vào đầu ra tại các vị trí được chỉ định.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Trả về một hàm \\kết hợp một danh sách văn bản bằng cách dùng các vị trí và độ dài được chỉ định.",
        "Documentation.LongDescription": "Trả về một hàm kết hợp một danh sách giá trị văn bản thành một giá trị văn bản đơn bằng cách sử dụng vị trí đầu ra và độ dài được chỉ định. Độ dài null thể hiện rằng toàn bộ giá trị văn bản nên được đưa vào.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp danh sách giá trị văn bản bằng cách sử dụng vị trí và độ dài đầu ra được chỉ định.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Trả về hàm so sánh dựa trên văn hóa được chỉ định và phân biệt chữ hoa chữ thường.",
        "Documentation.LongDescription": "Trả về hàm so sánh sử dụng <code>culture</code> và phân biệt chữ hoa chữ thường do <code>ignoreCase</code> xác định để thực hiện phép so sánh.<br>\r\n      <br>\r\n      Hàm so sánh trả về giá trị -1, 0 hoặc 1 dựa trên việc giá trị đầu tiên nhỏ hơn, bằng hay lớn hơn giá trị thứ hai.<br>\r\n      <br>\r\n      Giá trị mặc định của <code>ignoreCase</code> là false. <code>culture</code> sẽ là một trong các khu vực được .NET framework hỗ trợ (ví dụ như \"en-US\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "So sánh \"a\" và \"A\" bằng ngôn ngữ \"vi-VN\" để xác định xem các giá trị có bằng nhau hay không.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "So sánh \"a\" và \"A\" bằng ngôn ngữ \"vi-VN\" bỏ qua dạng chữ để xác định xem các giá trị có bằng nhau hay không.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Trả về mã nhận dạng thành viên duy nhất từ giá trị thuộc tính thành viên.",
        "Documentation.LongDescription": "Trả về mã nhận dạng thành viên duy nhất từ giá trị thuộc tính thành viên. <code>attribute</code>. Trả về không cho mọi giá trị khác.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Trả về khóa của tính chất.",
        "Documentation.LongDescription": "Trả về khóa của tính chất <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Trả về giá trị tiền tệ từ giá trị đã cho.",
        "Documentation.LongDescription": "Trả về giá trị <code>currency</code> từ <code>value</code> đã cho. Nếu <code>value</code> đã cho là <code>null</code>, <code>Currency.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> đã cho là <code>number</code> trong phạm vi tiền tệ, phần thập phân của <code>value</code> sẽ được làm tròn tới 4 chữ số thập phân và được trả về. Nếu <code>value</code> đã cho thuộc bất kỳ loại nào khác, trước tiên, giá trị này sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.FromText</code>. Khoảng hợp lệ của tiền tệ là <code>-922,337,203,685,477.5808</code> đến <code>922,337,203,685,477.5807</code>. Tham khảo <code>Number.Round</code> để biết các chế độ làm tròn sẵn dùng. Chế độ mặc định là <code>RoundingMode.ToEven</code>. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Nhận giá trị <code>currency</code> của <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Tải giá trị <code>currency</code> của <code>\"1.23455\"</code> bằng<code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Trả về cấu phần ngày.",
        "Documentation.LongDescription": "Trả về cấu phần ngày của giá trị <code>date</code>, <code>datetime</code>, hoặc <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code>, hoặc <code>datetimezone</code> mà từ đó cấu phần ngày được trích xuất.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nhận cấu phần ngày của giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> biểu thị ngày và giờ là 5/14/2011 05:00:00 CH.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Trả về một số (nằm trong khoảng từ 0 đến 6) cho biết ngày trong tuần của giá trị được cung cấp.",
        "Documentation.LongDescription": "Trả về một số (nằm trong khoảng từ 0 đến 6) cho biết ngày trong tuần của <code>dateTime</code> được cung cấp.\r\n  <ul>\r\n        <li><code>dateTime</code>: Một giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: Một giá trị <code>Day</code> cho biết ngày sẽ được coi là ngày đầu tuần. Các giá trị được phép là Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday hoặc Day.Saturday. Nếu bạn không chỉ định, giá trị mặc định tùy thuộc vào văn hóa sẽ được sử dụng.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Lấy ngày đại diện cho tuần là thứ Hai, ngày 21 tháng 2 năm 2011, coi Chủ Nhật là ngày đầu tuần.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Lấy ngày đại diện cho tuần là thứ Hai, ngày 21 tháng 2 năm 2011, coi thứ Hai là ngày đầu tuần.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Trả về tên của ngày trong tuần.",
        "Documentation.LongDescription": "Trả về ngày trong tuần cho <code>date</code> được cung cấp. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nhận tên của ngày trong tuần.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Trả về một số từ 1 đến 366 biểu thị ngày trong năm.",
        "Documentation.LongDescription": "Trả về một số biểu thị ngày trong năm trong giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> cho sẵn, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ngày trong năm cho ngày 1 tháng 3 năm 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Trả về một số từ 28 tới 31 biểu thị số ngày trong tháng.",
        "Documentation.LongDescription": "Trả về số ngày trong tháng trong giá trị <code>date</code>, <code>datetime</code>, hoặc <code>datetimezone</code> <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code>, hoặc <code>datetimezone</code> mà từ đó trả về số ngày trong tháng.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Số ngày trong tháng Mười Hai như được biểu thị bởi <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Trả về thời gian cuối ngày.",
        "Documentation.LongDescription": "Trả về thời gian cuối ngày được biểu thị bởi <code>dateTime</code>. Thông tin múi giờ được bảo toàn.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> mà từ đó tính toán ra thời gian cuối ngày.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nhận giá trị thời gian kết thúc ngày cho 5/14/2011 05:00:00 CH.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Nhận thời gian cuối ngày cho 5/17/2011 05:00:00 CH -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Trả về thời gian cuối tháng.",
        "Documentation.LongDescription": "Trả về thời gian cuối tháng gồm <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> mà từ đó tính toán ra thời gian cuối tháng</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nhận thời gian kết thúc tháng cho 5/14/2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Nhận thời gian kết thúc tháng cho 17/05/2011 05:00:00 CH -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Trả về thời gian cuối quý.",
        "Documentation.LongDescription": "Trả về thời gian cuối quý chứa <code>dateTime</code>. Thông tin múi giờ được bảo toàn.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> mà từ đó tính toán ra thời gian cuối quý.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm thời gian cuối quý cho ngày 10 tháng 10 năm 2011, 8:00 SA.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Trả về thời gian cuối tuần.",
        "Documentation.LongDescription": "Trả về thời gian cuối tuần chứa <code>dateTime</code>.\r\n    Hàm này lấy <code>Day</code> tùy chọn, <code>firstDayOfWeek</code>, để đặt làm ngày đầu tiên trong tuần cho phép tính tương đối này. Giá trị mặc định là <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> mà từ đó tính toán ra ngày cuối của tuần</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Tùy chọn]</i> Giá trị <code>Day.Type</code> biểu thị ngày đầu tiên trong tuần. Các giá trị có thể có là <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> và <code>Day.Saturday.</code> .Giá trị mặc định là <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nhận thời gian kết thúc tuần cho 5/14/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Nhận thời gian kết thúc tuần cho 17/05/2011 05:00:00 CH -7:00 với Chủ Nhật là ngày đầu tiên trong tuần.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Trả về thời gian cuối năm.",
        "Documentation.LongDescription": "Trả về thời gian cuối năm chứa <code>dateTime</code>, bao gồm cả số giây ở dạng phân số. Thông tin múi giờ được bảo toàn.\r\n      <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> mà từ đó tính toán ra thời gian cuối năm.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nhận thời gian cuối năm cho 5/14/2011 05:00:00 CH.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Nhận thời gian kết thúc giờ cho 17/05/2011 05:00:00 CH -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Tạo ngày từ giá trị cho sẵn.",
        "Documentation.LongDescription": "Trả về giá trị <code>date</code> từ <code>value</code> cho sẵn. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").\r\nNếu <code>value</code> cho sẵn là <code>null</code>, <code>Date.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> cho sẵn là <code>date</code> thì sẽ trả về <code>value</code>. Giá trị của các loại sau đây có thể được chuyển đổi thành giá trị <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: Giá trị <code>date</code> từ dạng thức biểu diễn bằng văn bản. Tham khảo <code>Date.FromText</code> để biết chi tiết.</li>\r\n        <li><code>datetime</code>: Cấu phần ngày của <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Cấu phần ngày của datetime địa phương tương đương với <code>value</code>.</li>\r\n        <li><code>number</code>: Cấu phần ngày của datetime tương đương với Ngày tự động OLE được biểu thị bằng <code>value</code>.</li>\r\n      </ul>\r\nNếu <code>value</code> thuộc một loại khác thì sẽ trả về lỗi.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>43910</code> thành giá trị <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Chuyển đổi <code>#datetime(1899, 12, 30, 06, 45, 12)</code> thành giá trị <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Tạo Date từ dạng thức Date cục bộ, phổ quát và tùy chỉnh.",
        "Documentation.LongDescription": "Tạo giá trị <code>date</code> từ dạng biểu diễn văn bản, <code>text</code>. Một tham số <code>record</code> tùy chọn, <code>options</code>, có thể được cung cấp để chỉ định các thuộc tính bổ sung. <code>record</code> có thể chứa các trường sau:\r\n<ul>\r\n   <li><code>Format</code>: Giá trị <code>text</code> cho biết định dạng cần sử dụng. Để biết thêm chi tiết, hãy truy nhập https://go.microsoft.com/fwlink/?linkid=2180104 và https://go.microsoft.com/fwlink/?linkid=2180105. Việc bỏ qua trường này hoặc cung cấp giá trị <code>null</code> sẽ dẫn đến phân tích ngày bằng phương án hiệu quả nhất.</li>\r\n   <li><code>Culture</code>: Khi<code>Format</code> không phải là null, <code>Culture</code> sẽ kiểm soát một số bộ xác định định dạng. Ví dụ, trong <code>\"en-US\"</code> <code>\"MMM\"</code> là <code>\"Jan\", \"Feb\", \"Mar\", ...</code> còn trong <code>\"ru-RU\"</code> <code>\"MMM\"</code> là <code>\"янв\", \"фев\", \"мар\", ...</code>. Khi <code>Format</code> là <code>null</code>, <code>Culture</code> sẽ kiểm soát định dạng cần sử dụng. Khi <code>Culture</code> là <code>null</code> hoặc bị bỏ qua, <code>Culture.Current</code> sẽ được sử dụng.</li>\r\n</ul>\r\nĐể hỗ trợ các quy trình làm việc cũ, <code>options</code> cũng có thể là giá trị văn bản. Giá trị này có cùng hành vi giống như <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>2010-12-31</code> thành giá trị <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Chuyển đổi bằng cách sử dụng dạng thức tùy chỉnh và văn hóa Đức.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Tìm ngày trong lịch Dương tương ứng với đầu năm 1400 trong lịch Hijri.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Cho biết ngày này có diễn ra trong ngày hiện tại hay không, như được xác định bằng ngày và giờ hiện tại trên hệ thống.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho sẵn <code>dateTime</code> có rơi vào ngày hiện tại hay không, như được xác định bởi ngày và giờ hiện tại trên hệ thống.\r\n      <ul>\r\n      <li><code>dateTime</code>: Một giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định thời gian hiện tại trên hệ thống có rơi vào ngày hiện tại không.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Cho biết ngày này có diễn ra trong tháng hiện tại hay không, như được xác định bằng ngày và giờ hiện tại trên hệ thống.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho sẵn <code>dateTime</code> có rơi vào tháng hiện tại hay không, như được xác định bởi ngày và giờ hiện tại trên hệ thống.\r\n      <ul>\r\n      <li><code>dateTime</code>: Một giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định thời gian hiện tại trên hệ thống có rơi vào tháng hiện tại hay không.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Cho biết ngày này có diễn ra trong quý hiện tại hay không, như được xác định bằng ngày và giờ hiện tại trên hệ thống.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho sẵn <code>dateTime</code> có rơi vào quý hiện tại hay không, như được xác định bởi ngày và giờ hiện tại trên hệ thống.\r\n      <ul>\r\n      <li><code>dateTime</code>: Một giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định thời gian hiện tại trên hệ thống có rơi vào quý hiện tại hay không.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Cho biết ngày này có diễn ra trong tuần hiện tại hay không, như được xác định bằng ngày và giờ hiện tại trên hệ thống.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho sẵn <code>dateTime</code> có rơi vào tuần hiện tại hay không, như được xác định bởi ngày và giờ hiện tại trên hệ thống.\r\n      <ul>\r\n      <li><code>dateTime</code>: Một giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định thời gian hiện tại trên hệ thống có rơi vào tuần hiện tại không.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Cho biết ngày này có diễn ra trong năm hiện tại hay không, như được xác định bằng ngày và giờ hiện tại trên hệ thống.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho sẵn <code>dateTime</code> có rơi vào năm hiện tại hay không, như được xác định bởi ngày và giờ hiện tại trên hệ thống.\r\n      <ul>\r\n      <li><code>dateTime</code>: Một giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định thời gian hiện tại trên hệ thống có rơi vào năm hiện tại không.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong ngày tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong ngày hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong ngày tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong ngày hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định ngày sau thời gian hiện tại trên hệ thống có rơi vào ngày tiếp theo hay không.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong tháng tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tháng hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong tháng tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tháng hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định tháng sau thời gian hiện tại trên hệ thống có rơi vào tháng tiếp theo hay không.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong quý tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong quý hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong quý tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong quý hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định quý sau thời gian hiện tại trên hệ thống có rơi vào quý tiếp theo hay không.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong tuần tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tuần hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong tuần tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tuần hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định tuần sau thời gian hiện tại trên hệ thống có rơi vào tuần tiếp theo hay không.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong năm tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong năm hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong năm tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong năm hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định năm sau thời gian hiện tại trên hệ thống có rơi vào năm tiếp theo hay không.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong ngày trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong ngày hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong ngày trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong ngày hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định ngày trước thời gian hiện tại trên hệ thống có rơi vào ngày trước hay không.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong tháng trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tháng hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong tháng trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tháng hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định tháng trước thời gian hiện tại trên hệ thống có rơi vào tháng trước hay không.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong quý trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong quý hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong quý trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong quý hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định quý trước thời gian hiện tại trên hệ thống có rơi vào quý trước hay không.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong tuần trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tuần hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong tuần trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong tuần hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định tuần trước thời gian hiện tại trên hệ thống có rơi vào tuần trước hay không.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Cho biết ngày này có xuất hiện trong năm trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong năm hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong năm trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong năm hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định năm trước thời gian hiện tại trên hệ thống có rơi vào năm trước hay không.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Cho biết ngày này có rơi vào năm hiện tại hay không và vào đúng hay trước ngày hiện tại, như được xác định bởi ngày và giờ hiện tại trên hệ thống.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho sẵn <code>dateTime</code> có rơi vào năm hiện tại hay không và vào đúng hay trước ngày hiện tại, như được xác định bởi ngày và giờ hiện tại trên hệ thống.\r\n      <ul>\r\n      <li><code>dateTime</code>: Một giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định thời gian hiện tại trên hệ thống có rơi vào năm tính tới thời điểm hiện tại hay không.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Cho biết ngày này có rơi vào năm nhuận hay không.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho sẵn <code>dateTime</code> có rơi vào năm nhuận hay không.\r\n <ul>\r\n        <li><code>dateTime</code>: Một giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định năm 2012, như được biểu thị bằng <code>#date(2012, 01, 01)</code> có phải là năm nhuận hay không.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Trả về cấu phần tháng.",
        "Documentation.LongDescription": "Trả về cấu phần tháng của giá trị <code>datetime</code> cho sẵn, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm tháng trong #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Trả về tên cấu phần tháng.",
        "Documentation.LongDescription": "Trả về tên cấu phần tháng cho <code>date</code> được cung cấp. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nhận tên tháng.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Trả về một số cho biết ngày đó rơi vào quý nào trong năm.",
        "Documentation.LongDescription": "Trả về một số trong khoảng từ 1 tới 4 cho biết ngày <code>dateTime</code> rơi vào quý nào trong năm. <code>dateTime</code> có thể là giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm ngày #date(2011, 12, 31) rơi vào quý nào trong năm.",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Trả về thời gian đầu ngày.",
        "Documentation.LongDescription": "Trả về thời gian đầu ngày được biểu thị bởi <code>dateTime</code>.\r\n    <code>dateTime</code> phải là giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm thời gian đầu ngày cho ngày 10 tháng 10 năm 2011, 8:00 SA.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Trả về thời gian đầu tháng.",
        "Documentation.LongDescription": "Trả về thời gian đầu tháng chứa <code>dateTime</code>.\r\n    <code>dateTime</code> phải là giá trị <code>date</code> hoặc <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm thời gian đầu tháng cho ngày 10 tháng 10 năm 2011, 8:10:32 SA.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Trả về thời gian đầu quý.",
        "Documentation.LongDescription": "Trả về thời gian đầu quý chứa <code>dateTime</code>.\r\n    <code>dateTime</code> phải là giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm thời gian đầu quý cho ngày 10 tháng 10 năm 2011, 8:00 SA.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Trả về đầu tuần.",
        "Documentation.LongDescription": "Trả về thời gian đầu tuần chứa <code>dateTime</code>.\r\n    <code>dateTime</code> phải là giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm đầu tuần cho Thứ Ba, ngày 11 tháng 10 năm 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Tìm đầu tuần cho Thứ Ba, ngày 11 tháng 10 năm 2011, sử dụng Thứ Hai làm đầu tuần.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Trả về thời gian đầu năm.",
        "Documentation.LongDescription": "Trả về thời gian đầu năm chứa <code>dateTime</code>.\r\n    <code>dateTime</code> phải là giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm thời gian đầu năm cho ngày 10 tháng 10 năm 2011, 8:10:32 SA.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Trả về một bản ghi chứa các phần của giá trị ngày.",
        "Documentation.LongDescription": "Trả về một bản ghi chứa các phần của giá trị ngày cho sẵn, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: Một giá trị <code>date</code> nơi bản ghi các phần của giá trị đó sẽ được tính.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi giá trị <code>#date(2011, 12, 31)</code> thành một bản ghi chứa các phần từ giá trị ngày.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Trả về một cách biểu diễn văn bản của giá trị ngày.",
        "Documentation.LongDescription": "Trả về dạng biểu diễn văn bản của <code>date</code>. Một tham số <code>record</code> tùy chọn, <code>options</code>, có thể được cung cấp để chỉ định các thuộc tính bổ sung. <code>culture</code> chỉ được sử dụng cho các quy trình làm việc cũ. <code>record</code> có thể chứa các trường sau:\r\n<ul>\r\n   <li><code>Format</code>: Giá trị <code>text</code> cho biết định dạng cần sử dụng. Để biết thêm chi tiết, hãy truy nhập https://go.microsoft.com/fwlink/?linkid=2180104 và https://go.microsoft.com/fwlink/?linkid=2180105. Việc bỏ qua trường này hoặc cung cấp giá trị <code>null</code> sẽ dẫn đến định dạng ngày bằng giá trị mặc định do <code>Culture</code>.</li>\r\n   <li><code>Culture</code> xác định: Khi <code>Format</code> không phải là null, <code>Culture</code> sẽ kiểm soát một số bộ xác định định dạng. Ví dụ, trong <code>\"en-US\"</code> <code>\"MMM\"</code> là <code>\"Jan\", \"Feb\", \"Mar\", ...</code> còn trong <code>\"ru-RU\"</code> <code>\"MMM\"</code> là <code>\"янв\", \"фев\", \"мар\", ...</code>. Khi <code>Format</code> là <code>null</code>, <code>Culture</code> sẽ kiểm soát định dạng mặc định cần sử dụng. Khi <code>Culture</code> là <code>null</code> hoặc bị bỏ qua, <code>Culture.Current</code> sẽ được sử dụng.</li>\r\n</ul>\r\nĐể hỗ trợ các quy trình làm việc cũ, <code>options</code> và <code>culture</code> cũng có thể là các giá trị văn bản. Giá trị này có cùng hành vi giống như <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>#date(2010, 12, 31)</code> thành giá trị <code>text</code>. <i>Đầu ra kết quả có thể khác nhau tùy thuộc vào văn hóa hiện tại.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Chuyển đổi bằng cách sử dụng dạng thức tùy chỉnh và văn hóa Đức.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Tìm ngày trong lịch Hijri tương ứng với ngày 1 tháng 1 năm 2000 trong lịch Dương.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Trả về một số trong khoảng từ 1 tới 6 cho biết ngày này rơi vào tuần nào trong tháng.",
        "Documentation.LongDescription": "Trả về một số trong khoảng từ 1 tới 6 cho biết ngày <code>dateTime</code> rơi vào tuần nào trong tháng.\r\n <ul>\r\n        <li><code>dateTime</code>: Một giá trị <code>datetime</code> mà tuần trong tháng được xác định.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định tuần mà ngày 15 tháng 03 rơi vào trong năm 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Trả về một số trong khoảng từ 1 tới 54 cho biết ngày này rơi vào tuần nào trong năm.",
        "Documentation.LongDescription": "Trả về một số nằm trong khoảng từ 1 đến 54 cho biết ngày, <code>dateTime</code>, thuộc tuần nào trong năm.\r\n <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>datetime</code> của tuần trong năm được xác định.</li>\r\n        <li><code>firstDayOfWeek</code>: Giá trị <code>Day.Type</code> tùy chọn cho biết ngày nào được xem là ngày đầu tiên của tuần mới (ví dụ: <code>Day.Sunday</code>). Nếu bạn không chỉ định rõ, thì giá trị mặc định áp dụng riêng cho từng văn hóa sẽ được sử dụng.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Xác định tuần nào trong năm chứa ngày 27 tháng 3 năm 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Xác định tuần nào trong năm chứa ngày 27 tháng 3 năm 2011, dùng Thứ Hai là ngày đầu tiên của tuần.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Trả về cấu phần năm.",
        "Documentation.LongDescription": "Trả về cấu phần năm của giá trị <code>datetime</code> cho sẵn, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm năm trong #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Trả về thành phần ngày của giá trị date, datetime hoặc datetimezone cho sẵn.",
        "Documentation.LongDescription": "Trả về cấu phần ngày của <code>dateTime</code>, giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code> cho sẵn.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị ngày của #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Tạo một datetime từ giá trị cho sẵn.",
        "Documentation.LongDescription": "Trả về giá trị <code>datetime</code> từ <code>value</code> cho sẵn. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").\r\nNếu <code>value</code> cho sẵn là <code>null</code>, <code>DateTime.From</code> thì sẽ trả về <code>null</code>. Nếu <code>value</code> cho sẵn là <code>datetime</code> thì sẽ trả về <code>value</code>. Có thể chuyển đổi giá trị của các loại sau thành giá trị <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: Giá trị <code>datetime</code> từ dạng thức biểu diễn bằng văn bản. Tham khảo <code>DateTime.FromText</code> để biết chi tiết.</li>\r\n        <li><code>date</code>: Giá trị <code>datetime</code> có <code>value</code> dưới dạng cấu phần ngày và <code>12:00:00 AM</code> dưới dạng cấu phần thời gian.</li>\r\n        <li><code>datetimezone</code>: Giá trị <code>datetime</code> địa phương tương ứng với <code>value</code>.</li>\r\n        <li><code>time</code>: Giá trị <code>datetime</code> có ngày tương ứng của Ngày tự động OLE của <code>0</code> dưới dạng cấu phần ngày và <code>value</code> dưới dạng cấu phần thời gian.</li>\r\n        <li><code>number</code>: Giá trị <code>datetime</code> tương ứng với Ngày tự động OLE được biểu diễn bằng <code>value</code>. </li>\r\n      </ul>\r\nNếu <code>value</code> thuộc bất kỳ loại nào khác, thì sẽ trả về lỗi.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>#time(06, 45, 12)</code> thành giá trị <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Chuyển đổi <code>#date(1975, 4, 4)</code> thành giá trị <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Tạo một datetime từ một số dài 64 bit.",
        "Documentation.LongDescription": "Tạo một giá trị <code>datetime</code> từ giá trị <code>fileTime</code> và chuyển đổi giá trị đó thành múi giờ địa phương. Filetime là giá trị thời gian tệp của Windows biểu thị số lượng quãng cách 100 nano giây đã trôi qua kể từ 12:00 giờ đêm, ngày 1 tháng 1 năm 1601 SCN. (C.E.) Giờ Quốc tế Phối hợp (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>129876402529842245</code> thành giá trị datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Tạo datetimezone từ định dạng ngày giờ địa phương và quốc tế.",
        "Documentation.LongDescription": "Tạo giá trị <code>datetime</code> từ dạng biểu diễn văn bản, <code>text</code>. Một tham số <code>record</code> tùy chọn, <code>options</code>, có thể được cung cấp để chỉ định các thuộc tính bổ sung. <code>record</code> có thể chứa các trường sau:\r\n<ul>\r\n   <li><code>Format</code>: Giá trị <code>text</code> cho biết định dạng cần sử dụng. Để biết thêm chi tiết, hãy truy nhập https://go.microsoft.com/fwlink/?linkid=2180104 và https://go.microsoft.com/fwlink/?linkid=2180105. Việc bỏ qua trường này hoặc cung cấp giá trị <code>null</code> sẽ dẫn đến phân tích ngày bằng phương án hiệu quả nhất.</li>\r\n   <li><code>Culture</code>: Khi <code>Format</code> không phải là null, <code>Culture</code> sẽ kiểm soát một số bộ xác định định dạng. Ví dụ, trong <code>\"en-US\"</code> <code>\"MMM\"</code> là <code>\"Jan\", \"Feb\", \"Mar\", ...</code> còn trong <code>\"ru-RU\"</code> <code>\"MMM\"</code> là <code>\"янв\", \"фев\", \"мар\", ...</code>. Khi <code>Format</code> là <code>null</code>, <code>Culture</code> sẽ kiểm soát định dạng cần sử dụng. Khi <code>Culture</code> là <code>null</code> hoặc bị bỏ qua, <code>Culture.Current</code> sẽ được sử dụng.</li>\r\n</ul>\r\nĐể hỗ trợ các quy trình làm việc cũ, <code>options</code> cũng có thể là giá trị văn bản. Giá trị này có cùng hành vi giống như <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>\"2010-12-31T01:30:00\"</code> thành giá trị datetime.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Chuyển đổi <code>\"2010-12-31T01:30:00.121212\"</code> thành giá trị datetime.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Chuyển đổi <code>\"2010-12-31T01:30:00\"</code> thành giá trị datetime.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Chuyển đổi <code>\"20101231T013000\"</code> thành giá trị datetime.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Cho biết giá trị datetime này có xuất hiện hay trong giờ hiện tại hay không, khi được xác định bằng ngày và giờ hiện tại trên hệ thống.",
        "Documentation.LongDescription": "Cho biết giá trị datetime đã cho <code>dateTime</code> có xuất hiện trong giờ hiện tại hay không, khi được xác định bằng ngày và giờ hiện tại trên hệ thống.\r\n      <ul>\r\n      <li><code>dateTime</code>:  Giá trị <code>datetime</code> hoăc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định thời gian hệ thống hiện tại có tính bằng giờ hiện tại hay không.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Cho biết giá trị datetime này có xuất hiện trong phút hiện tại hay không, khi được xác định bằng ngày và giờ hiện tại trên hệ thống.",
        "Documentation.LongDescription": "Cho biết datetime cho trước <code>dateTime</code> có xuất hiện trong phút hiện tại hay không, khi được xác định bởi ngày và giờ hiện tại trong hệ thống.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định thời gian hệ thống hiện tại có tính bằng phút hiện tại hay không.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Cho biết giá trị datetime này có xuất hiện trong giây hiện tại hay không, khi được xác định bằng ngày và giờ hiện tại trong hệ thống.",
        "Documentation.LongDescription": "Cho biết giá trị datetime cho trước <code>dateTime</code> có xuất hiện trong giây hiện tại hay không, khi được xác định bằng ngày và giờ hiện tại trên hệ thống.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định thời gian hệ thống hiện tại có tính bằng giây hiện tại hay không.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong giờ tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giờ hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong giờ tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giờ hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định giờ sau thời gian hệ thống hiện tại có tính bằng giờ tiếp theo hay không.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong phút tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong phút hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong phút tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong phút hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định phút sau thời gian hệ thống hiện tại có tính bằng phút tiếp tiếp theo hay không.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong giây tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giây hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong giây tiếp theo hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giây hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định giây sau thời gian hệ thống hiện tại có tính bằng giây tiếp theo hay không.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong giờ trước đó hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giờ hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong giờ trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thông. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giờ hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định giờ trước thời gian hệ thống hiện tại có tính bằng giờ trước hay không.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong phút trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong phút hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong phút trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong phút hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định phút trước thời gian hệ thống hiện tại có tính bằng phút trước hay không.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Cho biết ngày giờ này có xuất hiện trong giây trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giây hiện tại.",
        "Documentation.LongDescription": "Cho biết giá trị ngày giờ cho trước <code>dateTime</code> có xuất hiện trong giây trước hay không, khi xác định bằng ngày và giờ hiện tại trên hệ thống. Lưu ý rằng hàm này sẽ trả về false khi bạn thông qua giá trị sẽ xuất hiện trong giây hiện tại.\r\n      <ul>\r\n      <li><code>dateTime</code>: Giá trị <code>datetime</code> hoặc <code>datetimezone</code> sẽ được đánh giá.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Xác định giây trước thời gian hệ thống hiện tại có tính bằng giây trước hay không.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Trả về phần thời gian của giá trị datetime cho sẵn.",
        "Documentation.LongDescription": "Trả về phần thời gian của giá trị datetime cho sẵn, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị thời gian của #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Trả về một bản ghi chứa các phần của giá trị datetime.",
        "Documentation.LongDescription": "Trả về bản ghi có chứa các phần của giá trị datetime đã cho, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>datetime</code> cho bản ghi có chứa các phần được tính toán.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi giá trị <code>#datetime(2011, 12, 31, 11, 56, 2)</code> thành một bản ghi chứa giá trị Ngày và Giờ.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Trả về một biểu diễn văn bản chứa giá trị datetime.",
        "Documentation.LongDescription": "Trả về dạng biểu diễn văn bản của <code>dateTime</code>. Một tham số <code>record</code> tùy chọn, <code>options</code>, có thể được cung cấp để chỉ định các thuộc tính bổ sung. <code>culture</code> chỉ được sử dụng cho các quy trình làm việc cũ. <code>record</code> có thể chứa các trường sau:\r\n<ul>\r\n   <li><code>Format</code>: Giá trị <code>text</code> cho biết định dạng cần sử dụng. Để biết thêm chi tiết, hãy truy nhập https://go.microsoft.com/fwlink/?linkid=2180104 và https://go.microsoft.com/fwlink/?linkid=2180105. Việc bỏ qua trường này hoặc cung cấp giá trị <code>null</code> sẽ dẫn đến định dạng ngày bằng giá trị mặc định do <code>Culture</code>.</li>\r\n   <li><code>Culture</code> xác định: Khi <code>Format</code> không phải là null, <code>Culture</code> sẽ kiểm soát một số bộ xác định định dạng. Ví dụ, trong <code>\"en-US\"</code> <code>\"MMM\"</code> là <code>\"Jan\", \"Feb\", \"Mar\", ...</code> còn trong <code>\"ru-RU\"</code> <code>\"MMM\"</code> là <code>\"янв\", \"фев\", \"мар\", ...</code>. Khi <code>Format</code> là <code>null</code>, <code>Culture</code> sẽ kiểm soát định dạng mặc định cần sử dụng. Khi <code>Culture</code> là <code>null</code> hoặc bị bỏ qua, <code>Culture.Current</code> sẽ được sử dụng.</li>\r\n</ul>\r\nĐể hỗ trợ các quy trình làm việc cũ, <code>options</code> và <code>culture</code> cũng có thể là các giá trị văn bản. Giá trị này có cùng hành vi giống như <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>#datetime(2010, 12, 31, 01, 30, 25)</code> thành giá trị <code>text</code>. <i>Đầu ra kết quả có thể khác nhau tùy thuộc vào văn hóa hiện tại.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Chuyển đổi bằng cách sử dụng dạng thức tùy chỉnh và văn hóa Đức.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Chuyển đổi bằng mẫu hình ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Tạo một datetimezone từ giá trị cho sẵn.",
        "Documentation.LongDescription": "Trả về giá trị <code>datetimezone</code> từ <code>value</code> cho sẵn. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").\r\nNếu <code>value</code> cho sẵn là <code>null</code>, <code>DateTimeZone.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> cho sẵn là <code>datetimezone</code> thì sẽ trả về <code>value</code>. Có thể chuyển đổi giá trị của các loại sau đây thành giá trị <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: Giá trị <code>datetimezone</code> từ dạng thức biểu diễn dạng văn bản. Tham khảo <code>DateTimeZone.FromText</code> để biết chi tiết.</li>\r\n        <li><code>date</code>: Giá trị <code>datetimezone</code> có <code>value</code> dưới dạng cấu phần ngày, <code>12:00:00 AM</code> dưới dạng cấu phần thời gian và mức chênh lệch tương ứng với múi giờ địa phương.</li>\r\n        <li><code>datetime</code>: Giá trị <code>datetimezone</code> có <code>value</code> dưới dạng ngày giờ và mức chênh lệch tương ứng với múi giờ địa phương.</li>\r\n        <li><code>time</code>: Giá trị <code>datetimezone</code> có ngày tương đương với Ngày tự động OLE của <code>0</code> dưới dạng cấu phần ngày, <code>value</code> dưới dạng cấu phần thời gian và mức chênh lệch tương ứng với múi giờ địa phương.</li>\r\n        <li><code>number</code>: Giá trị <code>datetimezone</code> có ngày giờ tương đương với Ngày tự động OLE thể hiện bởi <code>value</code> và mức chênh lệch tương ứng với múi giờ địa phương.</li>\r\n      </ul>\r\nNếu <code>value</code> thuộc bất kỳ loại nào khác, thì sẽ trả về lỗi.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>\"2020-10-30T01:30:00-08:00\"</code> thành giá trị <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Tạo một datetimezone từ một số dài 64 bit.",
        "Documentation.LongDescription": "Tạo một giá trị <code>datetimezone</code> từ giá trị <code>fileTime</code> và chuyển đổi giá trị đó thành múi giờ địa phương. Filetime là giá trị thời gian tệp của Windows biểu thị số lượng quãng cách 100 nano giây đã trôi qua kể từ 12:00 giờ đêm, ngày 1 tháng 1 năm 1601 SCN. (C.E) Giờ Quốc tế Phối hợp (UTC).\r\n",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>129876402529842245</code> thành giá trị datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Tạo một datetimezone từ các dạng thức datetimezone địa phương, phổ quát và tùy chỉnh.",
        "Documentation.LongDescription": "Tạo giá trị <code>datetimezone</code> từ dạng biểu diễn văn bản, <code>text</code>. Một tham số <code>record</code> tùy chọn, <code>options</code> có thể được cung cấp để chỉ định các thuộc tính bổ sung. <code>record</code> có thể chứa các trường sau:\r\n<ul>\r\n   <li><code>Format</code>: Giá trị <code>text</code> cho biết định dạng cần sử dụng. Để biết thêm chi tiết, hãy truy nhập https://go.microsoft.com/fwlink/?linkid=2180104 và https://go.microsoft.com/fwlink/?linkid=2180105. Việc bỏ qua trường này hoặc cung cấp giá trị <code>null</code> sẽ dẫn đến phân tích ngày bằng phương án hiệu quả nhất.</li>\r\n   <li><code>Culture</code>: Khi<code>Format</code> không phải là null, <code>Culture</code> sẽ kiểm soát một số bộ xác định định dạng. Ví dụ, trong <code>\"en-US\"</code> <code>\"MMM\"</code> là <code>\"Jan\", \"Feb\", \"Mar\", ...</code> còn trong <code>\"ru-RU\"</code> <code>\"MMM\"</code> là <code>\"янв\", \"фев\", \"мар\", ...</code>. Khi <code>Format</code> là <code>null</code>, <code>Culture</code> sẽ kiểm soát định dạng cần sử dụng. Khi <code>Culture</code> là <code>null</code> hoặc bị bỏ qua, <code>Culture.Current</code> sẽ được sử dụng.</li>\r\n</ul>\r\nĐể hỗ trợ các quy trình làm việc cũ, <code>options</code> cũng có thể là giá trị văn bản. Giá trị này có cùng hành vi giống như <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>\"2010-12-31T01:30:00-08:00\"</code> thành giá trị <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Chuyển đổi bằng cách sử dụng dạng thức tùy chỉnh và văn hóa Đức.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Chuyển đổi bằng ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Loại bỏ thông tin múi giờ khỏi giá trị datetimezone cho sẵn.",
        "Documentation.LongDescription": "Trả về một giá trị #datetime từ <code>dateTimeZone</code> đã loại bỏ thông tin múi giờ.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ thông tin múi giờ khỏi giá trị #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Chuyển đổi cấu phần múi giờ thành múi giờ địa phương.",
        "Documentation.LongDescription": "Thay đổi thông tin múi giờ của giá trị datetimezone <code>dateTimeZone</code> thành thông tin múi giờ địa phương.\r\n    Nếu <code>dateTimeZone</code> không có cấu phần múi giờ thì thông tin múi giờ địa phương được thêm.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Thay đổi thông tin múi giờ cho #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) thành múi giờ địa phương (giả định là PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Trả về một bản ghi chứa các phần của giá trị datetimezone.",
        "Documentation.LongDescription": "Trả về bản ghi có chứa các phần của giá trị datetimezone đã cho, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: Giá trị <code>datetimezone</code> cho bản ghi có chứa các phần được tính toán.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi giá trị <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> thành một bản ghi chứa giá trị Ngày, Giờ và Múi giờ.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Trả về một biểu diễn văn bản chứa giá trị datetimezone.",
        "Documentation.LongDescription": "Trả về dạng biểu diễn văn bản của <code>dateTimeZone</code>. Một tham số <code>record</code> tùy chọn, <code>options</code>, có thể được cung cấp để chỉ định các thuộc tính bổ sung. <code>culture</code> chỉ được sử dụng cho các quy trình làm việc cũ. <code>record</code> có thể chứa các trường sau:\r\n<ul>\r\n   <li><code>Format</code>: Giá trị <code>text</code> cho biết định dạng cần sử dụng. Để biết thêm chi tiết, hãy truy nhập https://go.microsoft.com/fwlink/?linkid=2180104 và https://go.microsoft.com/fwlink/?linkid=2180105. Việc bỏ qua trường này hoặc cung cấp giá trị <code>null</code> sẽ dẫn đến định dạng ngày bằng giá trị mặc định do <code>Culture</code>.</li>\r\n   <li><code>Culture</code> xác định: Khi <code>Format</code> không phải là null, <code>Culture</code> sẽ kiểm soát một số bộ xác định định dạng. Ví dụ, trong <code>\"en-US\"</code> <code>\"MMM\"</code> là <code>\"Jan\", \"Feb\", \"Mar\", ...</code> còn trong <code>\"ru-RU\"</code> <code>\"MMM\"</code> là <code>\"янв\", \"фев\", \"мар\", ...</code>. Khi <code>Format</code> là <code>null</code>, <code>Culture</code> sẽ kiểm soát định dạng mặc định cần sử dụng. Khi <code>Culture</code> là <code>null</code> hoặc bị bỏ qua, <code>Culture.Current</code> sẽ được sử dụng.</li>\r\n</ul>\r\nĐể hỗ trợ các quy trình làm việc cũ, <code>options</code> và <code>culture</code> cũng có thể là các giá trị văn bản. Giá trị này có cùng hành vi giống như <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> thành giá trị <code>text</code>. <i>Đầu ra kết quả có thể khác nhau tùy thuộc vào văn hóa hiện tại.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Chuyển đổi bằng cách sử dụng dạng thức tùy chỉnh và văn hóa Đức.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Chuyển đổi bằng mẫu hình ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Chuyển đổi cấu phần múi giờ thành múi giờ UTC.",
        "Documentation.LongDescription": "Thay đổi thông tin múi giờ của giá trị ngày giờ <code>dateTimeZone</code> thành thông tin múi giờ UTC hoặc Thời gian Quốc tế.\r\n    Nếu <code>dateTimeZone</code> không có cấu phần múi giờ thì thông tin múi giờ UTC được thêm.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Thay đổi thông tin múi giờ cho #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) thành múi giờ UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Thay đổi múi giờ của giá trị.",
        "Documentation.LongDescription": "Thay đổi múi giờ của giá trị.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Thay đổi múi giờ của giá trị.",
        "Documentation.LongDescription": "Thay đổi múi giờ của giá trị.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Tạo số Thập phân từ giá trị cho trước.",
        "Documentation.LongDescription": "Trả về giá trị <code>number</code> Thập phân từ <code>value</code> cho sẵn. Nếu <code>value</code> cho sẵn là <code>null</code>, <code>Decimal.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> cho sẵn là <code>number</code> nằm trong phạm vi Thập phân thì sẽ trả về <code>value</code>, nếu không sẽ trả về một lỗi. Nếu <code>value</code> thuộc bất kỳ loại nào khác, trước tiên, giá trị này sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.FromText</code>. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Lấy giá trị <code>số</code> Thập phân của <code>\"4,5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Trả về nội dung của bảng Delta Lake.",
        "Documentation.LongDescription": "Trả về nội dung của bảng Delta Lake.",
        "Documentation.Category": "Đang truy cập vào dữ liệu",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Tạo số có độ chính xác Đôi từ giá trị cho trước.",
        "Documentation.LongDescription": "Trả về giá trị Gấp đôi <code>number</code> từ <code>value</code> cho sẵn. Nếu <code>value</code> cho sẵn là <code>null</code>, <code>Double.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> cho sẵn là <code>number</code> nằm trong phạm vi Gấp đôi thì sẽ trả về <code>value</code>, nếu không sẽ trả về một lỗi. Nếu <code>value</code> thuộc bất kỳ loại nào khác, trước tiên, giá trị này sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.FromText</code>. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Lấy giá trị <code>số</code> có độ chính xác Đôi của <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Trả về phần ngày của một khoảng thời gian.",
        "Documentation.LongDescription": "Trả về phần ngày của <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Tính số ngày giữa hai ngày.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Tạo một khoảng thời gian từ giá trị cho sẵn.",
        "Documentation.LongDescription": "Trả về giá trị <code>duration</code> từ <code>value</code> cho sẵn. Nếu <code>value</code> cho sẵn là <code>null</code> thì <code>Duration.From</code> trả về <code>null</code>.  Nếu <code>value</code> cho sẵn là <code>duration</code> thì <code>value</code> được trả về. Giá trị của các loại sau đây có thể được chuyển đổi thành giá trị <code>duration</code>:\r\n      <ul>\r\n        <li><code>text</code>: Giá trị <code>duration</code> từ dạng thời gian đã trôi qua ở dạng thức văn bản (d.h:m:s). Tham khảo <code>Duration.FromText</code> để biết chi tiết.</li>\r\n        <li><code>number</code>: Một <code>duration</code> tương đương với số ngày ở dạng số nguyên hoặc phân số được biểu thị bởi <code>value</code>.</li>\r\n      </ul>\r\nNếu <code>value</code> thuộc một loại khác thì một lỗi được trả về.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>2.525</code> thành giá trị <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Trả về một giá trị khoảng thời gian từ dạng thời gian đã trôi qua ở dạng thức văn bản (d.h:m:s).",
        "Documentation.LongDescription": "Trả về một giá trị khoảng thời gian từ văn bản được chỉ định, <code>text</code>. Hàm này có thể phân tích cú pháp các định dạng sau: \r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Bao gồm tất cả các phạm vi)<br>\r\n        ddd: Số ngày.<br>\r\n        hh: Số giờ, từ 0 đến 23.<br>\r\n        mm: Số phút, từ 0 đến 59.<br>\r\n        ss: Số giây, từ 0 đến 59.<br>\r\n        ff: Phần của giây, từ 0 đến 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>\"2.05:55:20\"</code> thành giá trị <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Trả về phần giờ của một khoảng thời gian.",
        "Documentation.LongDescription": "Trả về phần giờ của <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Trích xuất giờ từ giá trị khoảng thời gian.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Trả về phần phút của một khoảng thời gian.",
        "Documentation.LongDescription": "Trả về phần phút của <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Trích xuất phút từ giá trị khoảng thời gian.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Trả về phần giây của một khoảng thời gian.",
        "Documentation.LongDescription": "Trả về phần giây của <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Trích xuất giây từ giá trị khoảng thời gian.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Trả về một bản ghi chứa các phần của khoảng thời gian này.",
        "Documentation.LongDescription": "Trả về một bản ghi chứa các phần của giá trị khoảng thời gian, <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: <code>duration</code> mà từ đó bản ghi được tạo.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>#duration(2, 5, 55, 20)</code> thành một bản ghi các phần của giá trị này, bao gồm số ngày, số giờ, số phút và số giây nếu áp dụng.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Trả về văn bản có dạng \"d.h:m:s\".",
        "Documentation.LongDescription": "Trả về một dạng thức biểu diễn bằng văn bản có dạng \"day.hour:mins:sec\" cho giá trị khoảng thời gian cụ thể, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: Một <code>khoảng thời gian</code> được dùng làm căn cứ để tính dạng thức biểu diễn đó.</li>\r\n  <li><code>format</code>: <i>[Tùy chọn]</i> Không dùng nữa, sẽ trả về lỗi nếu không phải giá trị rỗng</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>#duration(2, 5, 55, 20)</code> thành giá trị văn bản.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Trả về tổng số ngày trong khoảng thời gian này.",
        "Documentation.LongDescription": "Trả về tổng số ngày kéo dài theo <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Tìm tổng số ngày kéo dài theo giá trị khoảng thời gian.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Trả về tổng số giờ trong khoảng thời gian này.",
        "Documentation.LongDescription": "Trả về tổng số giờ kéo dài theo <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Tìm tổng số giờ kéo dài theo giá trị khoảng thời gian.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Trả về tổng số phút trong khoảng thời gian này.",
        "Documentation.LongDescription": "Trả về tổng số phút kéo dài theo <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Tìm tổng số phút kéo dài theo giá trị khoảng thời gian.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Trả về tổng số giây trong khoảng thời gian này.",
        "Documentation.LongDescription": "Trả về tổng số giây kéo dài theo <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Tìm tổng số giây kéo dài theo giá trị khoảng thời gian.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Trả về một bản ghi lỗi từ các giá trị văn bản được cung cấp về lý do, nội dung và chi tiết.",
        "Documentation.LongDescription": "Trả về một bản ghi lỗi từ các giá trị văn bản được cung cấp về lý do, nội dung và chi tiết.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.LongDescription": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Trả về dạng biểu diễn mã nguồn M của một giá trị không đổi.",
        "Documentation.LongDescription": "Trả về dạng biểu diễn mã nguồn M của một giá trị không đổi.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Tải dạng biểu diễn mã nguồn M của giá trị số.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Tải dạng biểu diễn mã nguồn M của giá trị ngày.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Tải dạng biểu diễn mã nguồn M của giá trị văn bản.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Trả về kết quả đánh giá biểu thức M.",
        "Documentation.LongDescription": "Trả về kết quả đánh giá biểu thức M <code>document</code>, với các mã định danh có sẵn có thể được tham chiếu và xác định theo <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Đánh giá một tổng đơn giản.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Đánh giá một tổng phức tạp hơn.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Đánh giá quá trình ghép giá trị văn bản với mã định danh.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Trả về dạng biểu diễn mã nguồn M của mã định danh.",
        "Documentation.LongDescription": "Trả về dạng biểu diễn mã nguồn M của mã định danh <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Tải dạng biểu diễn mã nguồn M của mã định danh.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Tải dạng biểu diễn mã nguồn M của mã định danh có chứa dấu cách.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Trả về nội dung của tệp được chỉ định ở dạng nhị phân.",
        "Documentation.LongDescription": "Trả về nội dung của tệp, <code>path</code>, dưới dạng nhị phân. Tham số <code>options</code> hiện chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Trả về thông tin một hàm cụ thể có được coi là nguồn dữ liệu hay không.",
        "Documentation.LongDescription": "Trả về thông tin <code>function</code> có được coi là nguồn dữ liệu hay không.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Chuyển đổi văn bản biểu thị một giá trị địa lý ở định dạng Văn bản quen thuộc (WKT) thành một bản ghi có cấu trúc.",
        "Documentation.LongDescription": "Chuyển đổi văn bản biểu thị một giá trị địa lý ở định dạng Văn bản quen thuộc (WKT) thành một bản ghi có cấu trúc. WKT là định dạng chuẩn được xác định bởi Open Geospatial Consortium (OGC) và là định dạng nối tiếp hóa điển hình được các cơ sở dữ liệu, trong đó có SQL Server, sử dụng.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Chuyển đổi giá trị điểm địa lý có cấu trúc thành đại diện Văn bản quen thuộc (WKT).",
        "Documentation.LongDescription": "Chuyển đổi giá trị điểm địa lý có cấu trúc thành đại diện Văn bản quen thuộc (WKT) như được xác định bởi Open Geospatial Consortium (OGC), cũng là định dạng nối tiếp được nhiều cơ sở dữ liệu, trong đó có SQL Server, sử dụng.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Chuyển đổi văn bản biểu thị một giá trị hình học ở định dạng Văn bản quen thuộc (WKT) thành một bản ghi có cấu trúc.",
        "Documentation.LongDescription": "Chuyển đổi văn bản biểu thị một giá trị hình học ở định dạng Văn bản quen thuộc (WKT) thành một bản ghi có cấu trúc. WKT là định dạng chuẩn được xác định bởi Open Geospatial Consortium (OGC) và là định dạng nối tiếp hóa điển hình được các cơ sở dữ liệu, trong đó có SQL Server, sử dụng.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Chuyển đổi giá trị điểm hình học có cấu trúc thành đại diện Văn bản quen thuộc (WKT).",
        "Documentation.LongDescription": "Chuyển đổi giá trị điểm hình học có cấu trúc thành đại diện Văn bản quen thuộc (WKT) như được xác định bởi Open Geospatial Consortium (OGC), cũng là định dạng nối tiếp hóa được nhiều cơ sở dữ liệu, trong đó có SQL Server, sử dụng.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Trả về giá trị guid từ giá trị đã cho.",
        "Documentation.LongDescription": "Trả về một giá trị <code>Guid.Type</code> từ <code>value</code> đã cho. Nếu <code>value</code> đã cho là <code>null</code>, thì <code>Guid.From</code> sẽ trả về <code>null</code>. Thao tác kiểm tra sẽ được thực hiện để xác định <code>value</code> đã cho có ở định dạng được chấp nhận hay không. Hãy xem ví dụ về các định dạng được chấp nhận.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Có thể cung cấp Guid dưới dạng 32 chữ số thập lục phân liền kề nhau.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Có thể cung cấp Guid dưới dạng 32 chữ số thập lục phân được phân tách bằng dấu nối thành các khối 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Có thể cung cấp Guid dưới dạng 32 chữ số thập lục phân được phân tách bằng dấu nối và nằm trong dấu ôm.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Có thể cung cấp Guid dưới dạng 32 chữ số thập lục phân được phân tách bằng dấu nối và nằm trong ngoặc đơn.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Tạo số nguyên 16 bit từ giá trị cho trước.",
        "Documentation.LongDescription": "Trả về giá trị <code>number</code> 16 bit từ <code>value</code> đã cho. Nếu <code>value</code> đã cho là <code>null</code>, <code>Int16.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> là <code>number</code> trong khoảng một số nguyên 16 bit không có phần thập phân, thì <code>value</code> sẽ được trả về. Nếu số nguyên có phần thập phân, thì số sẽ được làm tròn bằng chế độ làm tròn được chỉ định. Chế độ làm tròn mặc định là <code>RoundingMode.ToEven</code>. Nếu <code>value</code> là bất kỳ loại nào khác, trước tiên, giá trị này sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.FromText</code>. Tham khảo <code>Number.Round</code> để biết các chế độ làm tròn sẵn dùng. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Lấy giá trị <code>số</code> nguyên 16 bit của <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Lấy giá trị <code>số</code> nguyên 16 bit của <code>\"4,5\"</code> bằng <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Tạo số nguyên 32 bit từ giá trị cho trước.",
        "Documentation.LongDescription": "Trả về giá trị <code>number</code> 32 bit từ <code>value</code> đã cho. Nếu <code>value</code> đã cho là <code>null</code>, <code>Int32.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> là <code>number</code> trong khoảng một số nguyên 32 bit không có phần thập phân, thì <code>value</code> sẽ được trả về. Nếu số nguyên có phần thập phân, thì số sẽ được làm tròn bằng chế độ làm tròn được chỉ định. Chế độ làm tròn mặc định là <code>RoundingMode.ToEven</code>. Nếu <code>value</code> là bất kỳ loại nào khác, trước tiên, giá trị này sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.FromText</code>. Tham khảo <code>Number.Round</code> để biết các chế độ làm tròn sẵn dùng. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Lấy giá trị <code>số</code> nguyên 32 bit của <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Lấy giá trị <code>số</code> nguyên 32 bit của <code>\"4,5\"</code> bằng <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Tạo số nguyên 64 bit từ giá trị cho trước.",
        "Documentation.LongDescription": "Trả về giá trị <code>number</code> 64 bit từ <code>value</code> đã cho. Nếu <code>value</code> đã cho là <code>null</code>, <code>Int64.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> là <code>number</code> trong khoảng một số nguyên 64 bit không có phần thập phân, thì <code>value</code> sẽ được trả về. Nếu số nguyên có phần thập phân, thì số sẽ được làm tròn bằng chế độ làm tròn được chỉ định. Chế độ làm tròn mặc định là <code>RoundingMode.ToEven</code>. Nếu <code>value</code> là bất kỳ loại nào khác, trước tiên, giá trị này sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.FromText</code>. Tham khảo <code>Number.Round</code> để biết các chế độ làm tròn sẵn dùng. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Nhận giá trị <code>số</code> nguyên 64 bit là <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Tải giá trị số nguyên 64 bit <code>number</code> là <code>\"4.5\"</code> bằng <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Tạo số nguyên 8 bit có dấu từ giá trị cho trước.",
        "Documentation.LongDescription": "Trả về giá trị <code>number</code> 8 bit có dấu từ <code>value</code> đã cho. Nếu <code>value</code> đã cho là <code>null</code>, <code>Int8.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> là <code>number</code> trong khoảng một số nguyên 8 bit có dấu không có phần thập phân, thì <code>value</code> sẽ được trả về. Nếu số nguyên có phần thập phân, thì số sẽ được làm tròn bằng chế độ làm tròn được chỉ định. Chế độ làm tròn mặc định là <code>RoundingMode.ToEven</code>. Nếu <code>value</code> là bất kỳ loại nào khác, trước tiên, giá trị này sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.FromText</code>. Tham khảo <code>Number.Round</code> để biết các chế độ làm tròn sẵn dùng. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Lấy giá trị <code>số</code> nguyên 8 bit có dấu của <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Lấy giá trị <code>số</code> nguyên 8 bit có dấu của <code>\"4,5\"</code> bằng <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Trả về cây cú pháp trừu tượng (AST) cho phần nội dung của hàm.",
        "Documentation.LongDescription": "<p>Trả về cây cú pháp trừu tượng (AST) cho phần nội dung của <code>function</code>, được chuẩn hóa thành một <i>biểu thức mục</i>:\r\n<ul>\r\n  <li>Hàm phải là hàm lambda 1 đối số.</li>\r\n  <li>Tất cả các tham chiếu tới tham số của hàm được thay thế bằng <code>ItemExpression.Item</code>.</li>\r\n  <li>AST sẽ được đơn giản hóa để chỉ chứa nút thuộc các loại:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Sẽ xuất hiện lỗi nếu không thể trả về biểu thức mục AST cho phần nội dung của <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Trả về AST cho nội dung của hàm <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Trả về nội dung của tài liệu JSON.",
        "Documentation.LongDescription": "Trả về nội dung của tài liệu JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Tạo ra phép biểu diễn JSON cho một giá trị nhất định.",
        "Documentation.LongDescription": "<p>Tạo biểu diễn JSON của một giá trị cho sẵn <code>value</code> bằng mã hóa văn bản được <code>encoding</code> chỉ định. Nếu <code>encoding</code> bị bỏ qua thì UTF8 sẽ được sử dụng. Các giá trị được biểu diễn như sau:</p>\r\n <ul>\r\n        <li>Các giá trị rỗng, văn bản và logic được biểu diễn thành các loại JSON tương ứng</li>\r\n        <li>Số được biểu diễn ở dạng số trong JSON, trừ khi <code>#infinity</code>, <code>-#infinity</code> và <code>#nan</code> được chuyển đổi thành rỗng</li>\r\n        <li>Các danh sách được biểu diễn ở dạng mảng JSON</li>\r\n        <li>Các bản ghi được biểu diễn ở dạng đối tượng JSON </li>\r\n        <li>Các bảng được biểu diễn ở dạng mảng đối tượng</li>\r\n        <li>Ngày, giờ, ngày giờ, múi giờ và khoảng thời gian được biểu diễn ở dạng văn bản ISO-8601</li>\r\n        <li>Các giá trị nhị nhân được biểu diễn ở dạng văn bản mã hóa cơ sở 64</li>\r\n        <li>Các loại và hàm tạo ra lỗi</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi một giá trị phức hợp sang JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Chuyển đổi giá trị nhị phân thành một danh sách giá trị văn bản được tách tại ngắt dòng.  Nếu kiểu trích dẫn đã được chỉ định thì ngắt dòng có thể xuất hiện trong dấu ngoặc kép.  Nếu includeLineSeparators là true thì ký tự ngắt dòng sẽ được bao gồm trong văn bản.",
        "Documentation.LongDescription": "Chuyển đổi giá trị nhị phân thành một danh sách giá trị văn bản được tách tại ngắt dòng.  Nếu kiểu trích dẫn đã được chỉ định thì ngắt dòng có thể xuất hiện trong dấu ngoặc kép.  Nếu includeLineSeparators là true thì ký tự ngắt dòng sẽ được bao gồm trong văn bản.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Chuyển đổi một giá trị văn bản thành một danh sách các giá trị văn bản được phân tách tại ngắt dòng. Nếu includeLineSeparators là true thì ký tự ngắt dòng sẽ được đưa vào văn bản.",
        "Documentation.LongDescription": "Chuyển đổi một giá trị văn bản thành một danh sách các giá trị văn bản được phân tách tại ngắt dòng. Nếu includeLineSeparators là true, thì ký tự ngắt dòng sẽ được đưa vào văn bản.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (mặc định) Không cần hoạt động trích dẫn nào.</li>\r\n            <li><code>QuoteStyle.Csv:</code> Trích dẫn ở dạng Csv. Ký tự dấu ngoặc kép được sử dụng để phân ranh giới các khu vực này và một cặp ký tự dấu ngoặc kép được sử dụng để cho biết một ký tự dấu ngoặc kép trong một khu vực này. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Chuyển đổi một danh sách văn bản thành một giá trị nhị phân bằng cách sử dụng mã hóa và lineSeparator được chỉ định. LineSeparator được chỉ định được chắp thêm vào mỗi dòng.  Nếu không được chỉ định thì dấu xuống dòng và ký tự chuyển dòng được sử dụng.",
        "Documentation.LongDescription": "Chuyển đổi một danh sách văn bản thành một giá trị nhị phân bằng cách sử dụng mã hóa và lineSeparator được chỉ định. LineSeparator được chỉ định được chắp thêm vào mỗi dòng.  Nếu không được chỉ định thì dấu xuống dòng và ký tự chuyển dòng được sử dụng.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Chuyển đổi danh sách văn bản thành một văn bản duy nhất.  LineSeparator được chỉ định được chắp thêm vào mỗi dòng.  Nếu không được chỉ định thì dấu xuống dòng và ký tự chuyển dòng được sử dụng.",
        "Documentation.LongDescription": "Chuyển đổi danh sách văn bản thành một văn bản duy nhất.  LineSeparator được chỉ định được chắp thêm vào mỗi dòng.  Nếu không được chỉ định thì dấu xuống dòng và ký tự chuyển dòng được sử dụng.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Trả về true nếu tất cả các biểu thức đều đúng.",
        "Documentation.LongDescription": "Trả về true nếu tất cả các biểu thức trong danh sách <code>list</code> đều đúng.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Xác định tất cả các biểu thức trong danh sách {true, true, 2 > 0} có đúng không.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Xác định tất cả các biểu thức trong danh sách {true, true, 2 < 0} có đúng không.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Trả về true nếu mọi biểu thức đều đúng.",
        "Documentation.LongDescription": "Trả về true nếu mọi biểu thức trong danh sách <code>list</code> đều đúng.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Xác định có biểu thức nào trong số các biểu thức thuộc danh sách {true, false, 2 > 0} đúng không.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Xác định xem có biểu thức nào trong số các biểu thức thuộc danh sách {2 = 0, false, 2 < 0} đúng không.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Trả về giá trị trung bình của các giá trị. Hoạt động với giá trị số, ngày, ngày giờ, múi giờ ngày và khoảng thời gian.",
        "Documentation.LongDescription": "Trả về giá trị trung bình cho các mục trong danh sách, <code>list</code>. Kết quả được cho có cùng loại dữ liệu như các giá trị trong danh sách. Chỉ hoạt động với số, ngày, giờ, ngày giờ, múi giờ ngày và khoảng thời gian.\r\n    Nếu danh sách trống thì giá trị rỗng được trả về.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị trung bình của danh sách số, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Tìm giá trị trung bình của các giá trị ngày: Ngày 1 tháng 1 năm 2011, Ngày 2 tháng 2 năm 2012 và Ngày 3 tháng 3 năm 2013.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Tải danh sách.",
        "Documentation.LongDescription": "Tải danh sách <code>list</code> trong bộ nhớ. Kết quả của lệnh gọi này là một danh sách ổn định.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tạo một bảng ổn định của danh sách {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Trả về một danh sách duy nhất bằng cách kết hợp nhiều danh sách.",
        "Documentation.LongDescription": "Lấy một danh sách bao gồm các danh sách <code>lists</code> và hợp nhất các danh sách đó thành một danh sách mới.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp hai danh sách đơn giản {1, 2} và {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Kết hợp hai danh sách {1, 2} và {3, {4, 5}}, một trong hai danh sách đó chứa một danh sách lồng nhau.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Trả về số lượng mục trong danh sách.",
        "Documentation.LongDescription": "Trả về số lượng mục trong danh sách <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Tìm số lượng giá trị trong danh sách {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Trả về một danh sách giá trị đã được loại bỏ giá trị trùng lặp.",
        "Documentation.LongDescription": "Trả về một danh sách chứa tất cả các giá trị trong danh sách <code>list</code> đã bị loại bỏ giá trị trùng lặp. Nếu danh sách trống thì kết quả là một danh sách trống.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ các giá trị trùng lặp khỏi danh sách {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Trả về giá trị đầu tiên của danh sách hoặc giá trị mặc định được chỉ định nếu trống.",
        "Documentation.LongDescription": "Trả về mục đầu tiên trong danh sách <code>list</code> hoặc giá trị mặc định tùy chọn <code>defaultValue</code> nếu danh sách này trống.\r\n    Nếu danh sách trống và một giá trị mặc định không được chỉ định thì hàm trả về <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị đầu tiên trong danh sách {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Tìm giá trị đầu tiên trong danh sách {}. Nếu danh sách trống, trả về -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Trả về giao điểm của các giá trị danh sách tìm được ở đầu vào.",
        "Documentation.LongDescription": "Trả về giao điểm của các giá trị danh sách tìm được trong danh sách đầu vào <code>lists</code>. Có thể chỉ định tham số tùy chọn <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm giao điểm của các danh sách {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Cho biết có giá trị trùng lặp trong danh sách hay không.",
        "Documentation.LongDescription": "Trả về giá trị lôgic có hay không có giá trị trùng lặp trong danh sách <code>list</code>; <code>true</code> nếu danh sách chứa các giá trị khác biệt, <code>false</code> nếu có giá trị trùng lặp. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm xem danh sách {1, 2, 3} có chứa các giá trị khác biệt hay không (tức là không có giá trị trùng lặp nào).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Tìm xem danh sách {1, 2, 3, 3} có chứa các giá trị khác biệt hay không (tức là không có giá trị trùng lặp nào).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Trả về true nếu danh sách trống.",
        "Documentation.LongDescription": "Trả về <code>true</code> nếu danh sách <code>list</code> không chứa giá trị nào (độ dài bằng 0). Nếu danh sách chứa giá trị (độ dài > 0), trả về <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Tìm ra danh sách {} trống hay không trống.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Tìm ra danh sách {1, 2} trống hay không trống.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Trả về giá trị cuối cùng của danh sách hoặc giá trị mặc định được chỉ định nếu trống.",
        "Documentation.LongDescription": "Trả về mục cuối cùng trong danh sách <code>list</code> hoặc giá trị mặc định tùy chọn <code>defaultValue</code> nếu danh sách này trống.\r\n    Nếu danh sách trống và một giá trị mặc định không được chỉ định thì hàm trả về <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị cuối cùng trong danh sách {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Tìm giá trị cuối cùng trong danh sách {} hoặc -1 nếu trống.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Trả về giá trị cuối cùng trong danh sách.  Có thể tùy chọn chỉ định số lượng giá trị để trả về hoặc một điều kiện đủ tiêu chuẩn.",
        "Documentation.LongDescription": "Trả về mục cuối cùng của danh sách <code>list</code>. Nếu danh sách trống thì một ngoại lệ được đưa ra.\r\n Hàm này lấy một tham số tùy chọn là <code>countOrCondition</code> để hỗ trợ thu thập nhiều mục hoặc lọc mục. Có thể chỉ định <code>countOrCondition</code> theo ba cách:\r\n <ul>\r\n  <li>Nếu một số được chỉ định thì tối đa là số lượng mục đó được trả về. </li>\r\n  <li>Nếu một điều kiện được chỉ định thì tất cả các mục ban đầu đáp ứng được điều kiện này được trả về, bắt đầu ở cuối danh sách. Khi một mục không đáp ứng được điều kiện thì không có thêm mục nào được xem xét. </li>\r\n  <li>Nếu tham số này rỗng thì mục cuối cùng trong danh sách được trả về.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị cuối cùng trong danh sách {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Tìm các giá trị cuối cùng trong danh sách {3, 4, 5, -1, 7, 8, 2} lớn hơn 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Trả về giá trị cực đại hoặc giá trị mặc định cho một danh sách trống.",
        "Documentation.LongDescription": "Trả về mục có giá trị cực đại trong danh sách <code>list</code> hoặc giá trị mặc định tùy chọn <code>default</code> nếu danh sách trống.\r\n    Có thể chỉ định một giá trị comparisonCriteria tùy chọn là <code>comparisonCriteria</code> để xác định cách so sánh các mục trong danh sách. Nếu tham số này là null thì trình so sánh mặc định được sử dụng.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị cực đại trong danh sách {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Tìm giá trị cực đại trong danh sách {} hoặc trả về -1 nếu danh sách trống. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Trả về giá trị trung bình trong danh sách.",
        "Documentation.LongDescription": "Trả về mục có giá trị trung bình trong danh sách <code>list</code>. Hàm này sẽ trả về <code>null</code> nếu danh sách chứa các giá trị không phải <code>null</code>.\r\n    Nếu có số lượng mục chẵn thì hàm sẽ chọn mục có giá trị nhỏ hơn giữa hai mục có giá trị trung bình trừ khi danh sách\r\n    bao gồm toàn bộ ngày giờ, khoảng thời gian, số lượng hoặc giờ, trong trường hợp này hàm sẽ trả về giá trị trung bình của hai mục.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị trung bình trong danh sách <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Trả về giá trị cực tiểu hoặc giá trị mặc định cho một danh sách trống.",
        "Documentation.LongDescription": "Trả về mục có giá trị cực tiểu trong danh sách <code>list</code> hoặc giá trị mặc định tùy chọn <code>default</code> nếu danh sách trống.\r\n    Có thể chỉ định một giá trị comparisonCriteria tùy chọn là <code>comparisonCriteria</code> để xác định cách so sánh các mục trong danh sách. Nếu tham số này là null thì trình so sánh mặc định được sử dụng.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị cực tiểu trong danh sách {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Tìm giá trị cực tiểu trong danh sách {} hoặc trả về -1 nếu danh sách trống. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Trả về giá trị xuất hiện thường xuyên nhất trong danh sách.",
        "Documentation.LongDescription": "Trả về mục xuất hiện thường xuyên nhất trong danh sách, <code>list</code>. Nếu danh sách trống thì sẽ đưa ra ngoại lệ. Nếu xuất hiện nhiều mục có cùng tần suất tối đa, thì sẽ chọn mục cuối cùng.\r\n    Có thể chỉ định giá trị <code>comparisonCriteria</code> tùy chọn, <code>equationCriteria</code>, để kiểm soát quá trình kiểm tra đẳng thức. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Tìm mục xuất hiện thường xuyên nhất trong danh sách <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Tìm mục xuất hiện thường xuyên nhất trong danh sách <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Trả về một danh sách chứa các giá trị xuất hiện thường xuyên nhất trong danh sách.",
        "Documentation.LongDescription": "Trả về mục xuất hiện thường xuyên nhất trong danh sách, <code>list</code>. Nếu danh sách trống thì sẽ đưa ra ngoại lệ. Nếu xuất hiện nhiều mục có cùng tần suất tối đa, thì sẽ chọn mục cuối cùng.\r\n    Có thể chỉ định giá trị <code>comparisonCriteria</code> tùy chọn, <code>equationCriteria</code>, để kiểm soát quá trình kiểm tra đẳng thức. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Tìm các mục xuất hiện thường xuyên nhất trong danh sách <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Trả về số lượng các giá trị không rỗng trong danh sách.",
        "Documentation.LongDescription": "Trả về số lượng các giá trị không rỗng trong danh sách <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Trả về một danh sách phần bù cho đầu vào.",
        "Documentation.LongDescription": "Trả về một danh sách phần bù cho danh sách đầu vào <code>list</code>.\r\n    Khi sử dụng List.Transform để thay đổi một danh sách thì danh sách vị trí có thể dùng để cấp quyền truy cập chuyển đổi đối với vị trí.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm phần bù của giá trị trong danh sách {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Trả về tích của các số trong danh sách.",
        "Documentation.LongDescription": "Trả về tích của các số không rỗng trong danh sách <code>numbersList</code>. Trả về giá trị rỗng nếu không có giá trị nào trong danh sách là giá trị không rỗng.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Tìm tích của các số trong danh sách <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Trả về danh sách số ngẫu nhiên.",
        "Documentation.LongDescription": "Trả về một danh sách số ngẫu nhiên nằm trong khoảng từ 0 đến 1 khi được cho sẵn số lượng các giá trị sẽ tạo và một giá trị dữ liệu nền tùy chọn.\r\n<ul>\r\n   <li><code>count</code>: Số lượng giá trị ngẫu nhiên để tạo.</li>\r\n   <li><code>seed</code>:  <i>[Tùy chọn]</i> Một giá trị số dùng để tạo trình tạo số ngẫu nhiên.  Nếu bị bỏ qua thì một danh sách duy nhất bao gồm các số ngẫu nhiên sẽ được tạo mỗi lần bạn gọi hàm.  Nếu bạn chỉ định giá trị dữ liệu nền bằng một số thì mọi lệnh gọi tới hàm sẽ tạo ra danh sách số ngẫu nhiên tương tự.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách chứa 3 số ngẫu nhiên.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Tạo một danh sách chứa 3 số ngẫu nhiên, chỉ định giá trị dữ liệu nền.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Trả về một danh sách bỏ qua số lượng phần tử đã được chỉ định ở đầu danh sách.",
        "Documentation.LongDescription": "Trả về một danh sách xóa phần tử đầu tiên của danh sách <code>list</code>. Nếu <code>list</code> là danh sách trống, thì sẽ trả về danh sách trống.\r\nHàm này lấy một tham số tùy chọn, <code>countOrCondition</code>, để hỗ trợ xóa nhiều giá trị như được liệt kê dưới đây.\r\n <ul>\r\n <li>Nếu một số được chỉ định, tối đa số lượng mục đó sẽ bị xóa. </li>\r\n <li>Nếu một điều kiện được chỉ định thì mọi mục khớp liên tiếp ở đầu <code>list</code> sẽ bị xóa.</li>\r\n <li>Nếu tham số này là null thì hoạt động mặc định sẽ được quan sát. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách từ {1, 2, 3, 4, 5} mà không có 3 số đầu tiên.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Tạo một danh sách từ {5, 4, 2, 6, 1} bắt đầu bằng một số nhỏ hơn 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Trả về một danh sách loại bỏ số lượng phần tử đã được chỉ định từ cuối danh sách.",
        "Documentation.LongDescription": "Trả về một danh sách xóa các phần tử <code>countOrCondition</code> cuối cùng từ cuối danh sách <code>list</code>. Nếu <code>list</code> có ít hơn <code>countOrCondition</code> phần tử, sẽ trả về danh sách trống.\r\n <ul>\r\n <li>Nếu một số được chỉ định, tối đa số lượng mục đó sẽ bị xóa. </li>\r\n <li>Nếu một điều kiện được chỉ định thì mọi mục khớp liên tiếp ở cuối <code>list</code> sẽ bị xóa.</li>\r\n <li>Nếu tham số này là null thì chỉ có một mục bị xóa. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách từ {1, 2, 3, 4, 5} mà không có 3 số cuối cùng.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Tạo một danh sách từ {5, 4, 2, 6, 4} kết thúc bằng một số nhỏ hơn 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Loại bỏ tất cả giá trị \"rỗng\" khỏi danh sách được chỉ định.",
        "Documentation.LongDescription": "Loại bỏ tất cả những lần xuất hiện của giá trị \"rỗng\" trong <code>list</code>. Nếu không có giá trị 'rỗng' nào trong danh sách thì danh sách gốc được trả về.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ giá trị \"rỗng\" khỏi danh sách {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Đảo ngược thứ tự giá trị trong danh sách.",
        "Documentation.LongDescription": "Trả về một danh sách có các giá trị trong danh sách <code>list</code> theo thứ tự đảo ngược.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách từ {1..10} theo thứ tự đảo ngược.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Trả về mục một danh sách đối với danh sách có độ dài là một, nếu không đưa ra một ngoại lệ.",
        "Documentation.LongDescription": "Nếu chỉ có một mục trong danh sách <code>list</code>, trả về mục đó.\r\n    Nếu có nhiều mục hoặc danh sách trống thì hàm đưa ra một ngoại lệ.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị đơn trong danh sách {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Tìm giá trị đơn trong danh sách {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Trả về mục một danh sách đối với danh sách có độ dài là một và giá trị mặc định đối với danh sách trống.",
        "Documentation.LongDescription": "Nếu chỉ có một mục trong danh sách <code>list</code>, trả về mục đó.\r\n    Nếu danh sách trống, hàm sẽ trả về giá trị null từ khi <code>default</code> tùy chọn được chỉ định. Nếu có nhiều mục trong danh sách, hàm sẽ trả về một lỗi.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị đơn trong danh sách {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Tìm giá trị đơn trong danh sách {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Tìm giá trị đơn trong danh sách {}. Nếu trống, trả về -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Trả về một danh sách bỏ qua số lượng phần tử đã được chỉ định tại phần đầu danh sách.",
        "Documentation.LongDescription": "Trả về một danh sách bỏ qua phần tử đầu tiên của danh sách <code>list</code>. Nếu <code>list</code> là danh sách trống, thì sẽ trả về danh sách trống.\r\nHàm này lấy một tham số tùy chọn, <code>countOrCondition</code>, để hỗ trợ bỏ qua nhiều giá trị như được liệt kê dưới đây.\r\n <ul>\r\n <li>Nếu một số được chỉ định, tối đa số lượng mục đó sẽ bị bỏ qua. </li>\r\n <li>Nếu một điều kiện được chỉ định thì mọi mục khớp liên tiếp ở đầu <code>list</code> sẽ bị bỏ qua.</li>\r\n <li>Nếu tham số này là null thì hoạt động mặc định sẽ được quan sát. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách từ {1, 2, 3, 4, 5} mà không có 3 số đầu tiên.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Tạo một danh sách từ {5, 4, 2, 6, 1} bắt đầu bằng một số dưới 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Lọc ra một danh sách dữ liệu theo tiêu chỉ được chỉ định.",
        "Documentation.LongDescription": "Sắp xếp danh sách dữ liệu, <code>list</code>, theo tiêu chí tùy chọn được chỉ định.\r\n    Một tham số tùy chọn, <code>comparisonCriteria</code>, có thể được chỉ định làm tiêu chí so sánh. Tham số này có thể nhận các giá trị sau:\r\n    <ul>\r\n    <li> Để kiểm soát thứ tự, tiêu chí so sánh có thể là một giá trị Thứ tự đếm được. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Để tính toán một khóa dùng để sắp xếp, bạn có thể sử dụng một hàm gồm 1 đối số. </li>\r\n    <li> Để chọn cả khóa và thứ tự kiểm soát, tiêu chí so sánh có thể là một danh sách chứa khóa và thứ tự (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Để hoàn toàn kiểm soát phép so sánh, bạn có thể sử dụng một hàm gồm 2 đối số. Hàm này sẽ được truyền qua hai mục trong danh sách (hai mục bất kỳ, ở thứ tự bất kỳ). Hàm sẽ trả về một trong các giá trị sau:\r\n        <ul>\r\n            <li> <code>-1</code>: Mục đầu tiên nhỏ hơn mục thứ hai.</li>\r\n            <li> <code>0</code>: Các mục bằng nhau.</li>\r\n            <li> <code>1</code>: Mục đầu tiên lớn hơn mục thứ hai.</li>\r\n        </ul>\r\n        Value.Compare là phương pháp có thể được sử dụng để đại diện cho logic này. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Sắp xếp danh sách {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Sắp xếp danh sách {2, 3, 1} theo thứ tự giảm dần.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Sắp xếp danh sách {2, 3, 1} theo thứ tự giảm dần bằng phương thức Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Trả về ước tính dựa trên mẫu của độ lệch chuẩn.",
        "Documentation.LongDescription": "Trả về ước tính dựa trên mẫu của độ lệch chuẩn của các giá trị trong danh sách <code>numbersList</code>.\r\n    Nếu <code>numbersList</code> là danh sách số thì một số được trả về.\r\n    Một ngoại lệ được đưa ra trên một danh sách trống hoặc một danh sách mục không thuộc loại <code>number</code>.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Tìm độ lệch chuẩn của các số từ 1 tới 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Trả về tổng cộng các mục trong danh sách.",
        "Documentation.LongDescription": "Trả về tổng của các giá trị không rỗng trong danh sách <code>list</code>.  Trả về giá trị rỗng nếu không có giá trị nào trong danh sách là giá trị không rỗng.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Tìm tổng của các số trong danh sách <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Trả về tổ hợp giá trị danh sách tìm được trong đầu vào.",
        "Documentation.LongDescription": "Lấy một danh sách chứa các danh sách <code>lists</code>, hợp nhất các mục trong các danh sách riêng lẻ và trả chúng về trong danh sách đầu ra. Kết quả là danh sách trả về chứa tất cả các mục trong mọi danh sách đầu ra.\r\n    Tác vụ này duy trì ngữ nghĩa túi lặp nên các giá trị trùng lặp có thể trùng khớp như một phần của Tập hợp.\r\n    Có thể chỉ định giá trị tiêu chí phương trình tùy chọn, <code>equationCriteria</code>, để kiểm soát việc kiểm tra đẳng thức. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Tạo một tập hợp của danh sách {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Trả về danh sách các danh sách bằng cách kết hợp các mục ở cùng một vị trí trong nhiều danh sách.",
        "Documentation.LongDescription": "Lấy danh sách các danh sách, <code>lists</code> và trả về danh sách các danh sách kết hợp các mục ở cùng một vị trí.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Nén hai danh sách đơn giản {1, 2} và {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Nén hai danh sách đơn giản có độ dài khác nhau {1, 2} và {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Tạo một lôgic từ giá trị cho sẵn.",
        "Documentation.LongDescription": "Trả về giá trị <code>logical</code> từ <code>value</code> cho sẵn. Nếu <code>value</code> cho sẵn là <code>null</code> thì <code>Logical.From</code> trả về <code>null</code>.  Nếu <code>value</code> cho sẵn là <code>logical</code> thì <code>value</code> được trả về. Giá trị của các loại sau đây có thể được chuyển đổi thành giá trị <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: Một giá trị <code>logical</code> từ giá trị văn bản, <code>\"true\"</code> hoặc <code>\"false\"</code>. Tham khảo <code>Logical.FromText</code> để biết chi tiết.</li>\r\n        <li><code>number</code>: <code>false</code> nếu <code>value</code> bằng <code>0</code>, <code>true</code> nếu ngược lại.</li>\r\n      </ul>\r\nNếu <code>value</code> thuộc một loại khác thì một lỗi được trả về.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>2</code> thành giá trị <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Tạo một giá trị lôgic từ các giá trị văn bản \"true\" và \"false\".",
        "Documentation.LongDescription": "Tạo một giá trị lôgic từ các giá trị văn bản <code>text</code>, \"true\" hoặc \"false\". Nếu <code>text</code> chứa một chuỗi khác thì một ngoại lệ được đưa ra. Giá trị văn bản <code>text</code> không phân biệt chữ hoa/chữ thường.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Tạo một giá trị lôgic từ chuỗi văn bản \"true\".",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Tạo một giá trị lôgic từ chuỗi văn bản \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Trả về văn bản \"true\" hoặc \"false\" khi được cho sẵn một giá trị lôgic.",
        "Documentation.LongDescription": "Tạo một giá trị văn bản từ giá trị lôgic <code>logicalValue</code>, <code>true</code> hoặc <code>false</code>. Nếu <code>logicalValue</code> không phải là giá trị lôgic thì một ngoại lệ được đưa ra.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Tạo một giá trị văn bản từ <code>true</code> lôgic.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Trả về giá trị tuyệt đối của số.",
        "Documentation.LongDescription": "Trả về giá trị tuyệt đối của <code>number</code>. Nếu <code>number</code> là null, <code>Number.Abs</code> sẽ trả về null.\r\n    <ul>\r\n        <li><code>number</code>: <code>number</code> cho giá trị tuyệt đối cần tính.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Giá trị tuyệt đối là -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Trả về arccosin của số.",
        "Documentation.LongDescription": "Trả về arccosin của <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Trả về arcsine của số.",
        "Documentation.LongDescription": "Trả về arcsine của <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Trả về arctang của số.",
        "Documentation.LongDescription": "Trả về the arctang của <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Trả về một byte trong đó mỗi bit là đối nghịch của đầu vào.",
        "Documentation.LongDescription": "Trả về kết quả thực hiện tác vụ \"Not\" theo bit đối với <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Trả về cosin của số.",
        "Documentation.LongDescription": "Trả về cosine của <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Trả về cosin của góc 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Trả về cosin hyperbolic của số.",
        "Documentation.LongDescription": "Trả về cosin hyperbolic của <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Tăng e lên lũy thừa cho sẵn.",
        "Documentation.LongDescription": "Trả về kết quả sau khi đưa e lên lũy thừa <code>number</code> (hàm mũ).\r\n      <ul>\r\n        <li><code>number</code>: <code>number</code> được tính hàm mũ. Nếu <code>number</code> có giá trị null thì <code>Number.Exp</code> sẽ trả về giá trị null. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Tăng e lên lũy thừa 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Trả về giai thừa của số.",
        "Documentation.LongDescription": "Trả về giai thừa của số <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm giai thừa của số 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Tạo một số từ giá trị cho sẵn.",
        "Documentation.LongDescription": "Trả về giá trị <code>number</code> từ <code>value</code> cho sẵn. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").\r\nNếu <code>value</code> cho sẵn là <code>null</code> thì <code>Number.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> cho sẵn là <code>number</code> thì sẽ trả về <code>value</code>. Giá trị của các loại sau đây có thể được chuyển đổi thành giá trị <code>number</code>:\r\n      <ul>\r\n        <li><code>text</code>: Một giá trị <code>number</code> từ dạng thức biểu diễn bằng văn bản. Xử lý các định dạng văn bản thông thường (\"15\", \"3,423.10\", \"5.0E-10\"). Tham khảo <code>Number.FromText</code> để biết chi tiết.</li>\r\n        <li><code>logical</code>: 1 cho <code>true</code>, 0 cho <code>false</code>.</li>\r\n        <li><code>datetime</code>: Số dấu chấm động có độ chính xác gấp đôi chứa ngày Tự động OLE tương đương.</li>\r\n        <li><code>datetimezone</code>: Số dấu chấm động có độ chính xác kép chứa ngày Tự động OLE tương đương với ngày và giờ địa phương là <code>value</code>.</li>\r\n        <li><code>date</code>: Số dấu chấm động có độ chính xác kép chứa ngày Tự động OLE tương đương.</li>\r\n        <li><code>time</code>:  Được biểu thị bằng ngày có dạng phân số.</li>\r\n        <li><code>duration</code>: Được biểu thị bằng ngày có dạng số nguyên và phân số.</li>\r\n      </ul>\r\nNếu <code>value</code> thuộc một loại khác thì sẽ trả về một lỗi.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Nhận giá trị <code>number</code> của <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Nhận giá trị <code>number</code> của <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Tải giá trị <code>số</code> <code>\"12,3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Tạo số từ định dạng văn bản thông thường (\"15\", \"3,423.10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Trả về giá trị <code>số</code> từ giá trị văn bản cho sẵn, <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: Biểu diễn văn bản của một giá trị số. Biểu diễn phải ở định dạng số thông thường, chẳng hạn như \"15\", \"3,423.10\" hoặc \"5.0E-10\".</li>\r\n  <li><code>culture</code>: Một văn hóa tùy chọn kiểm soát cách <code>text</code> được diễn giải (ví dụ: \"en-US\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Nhận giá trị số của <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Nhận giá trị số của <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Cho biết giá trị có chẵn hay không.",
        "Documentation.LongDescription": "Cho biết giá trị <code>number</code> có chẵn hay không bằng cách trả về <code>true</code> nếu là chẵn, <code>false</code> nếu ngược lại.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Kiểm tra 625 có phải là số chẵn hay không.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Kiểm tra 82 có phải là số chẵn hay không.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Cho biết giá trị có phải là NaN (không phải số) hay không.",
        "Documentation.LongDescription": "Cho biết giá trị có phải là NaN (không phải số) hay không. Trả về <code>true</code> nếu <code>number</code> tương đương với <code>Number.IsNaN</code>, <code>false</code> nếu ngược lại.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Kiểm tra 0 chia cho 0 có phải là NaN hay không.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Kiểm tra 1 chia cho 0 có phải là NaN hay không.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Cho biết giá trị có lẻ hay không.",
        "Documentation.LongDescription": "Cho biết giá trị có lẻ hay không. Trả về <code>true</code> nếu <code>number</code> là số lẻ, <code>false</code> nếu ngược lại.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Kiểm tra 625 có phải là số lẻ hay không.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Kiểm tra 82 có phải là số lẻ hay không.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Trả về logarit tự nhiên của số.",
        "Documentation.LongDescription": "Trả về giá trị logarit tự nhiên của số, <code>number</code>. Nếu <code>number</code> lànull <code>Number.Ln</code> trả lại null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nhận logarit tự nhiên của 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Trả về logarit của số cho cơ số được chỉ định (mặc định là e).",
        "Documentation.LongDescription": "Trả về lô-ga-rít của số <code>number</code> cho cơ số <code>base</code> được chỉ định. Nếu <code>base</code> không được chỉ định, giá trị mặc định sẽ là Number.E.\r\n    Nếu <code>number</code> là giá trị null thì <code>Number.Log</code> sẽ trả về giá trị null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nhận lô-ga-rít cơ số 10 của 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Nhận lô-ga-rít cơ số e của 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Trả về lô-ga-rít cơ số 10 của số.",
        "Documentation.LongDescription": "Trả về lô-ga-rít cơ số 10 của số <code>number</code>. Nếu <code>number</code> là giá trị rỗng thì <code>Number.Log10</code> sẽ trả về giá trị rỗng.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nhận lô-ga-rít cơ số 10 của 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Trả về số được làm tròn. Có thể chỉ định số lượng chữ số và chế độ làm tròn.",
        "Documentation.LongDescription": "Trả về kết quả làm tròn <code>number</code> đến số gần nhất. Nếu <code>number</code> là null, <code>Number.Round</code> sẽ trả về null.<br>\r\n      <br>\r\n      Theo mặc định, <code>number</code> được làm tròn đến số nguyên gần nhất và sự liên kết bị phá vỡ bằng cách làm tròn đến số chẵn gần nhất (sử dụng <code>RoundingMode.ToEven</code>, còn được biết đến là \"làm tròn kiểu người làm ngân hàng\").<br>\r\n      <br>\r\n      Tuy nhiên, những cài đặt mặc định này có thể được ghi đè thông qua các tham số tùy chọn sau.\r\n      <ul>\r\n        <li><code>digits</code>: Khiến <code>number</code> được làm tròn đến số lượng chữ số thập phân chỉ định.</li>\r\n        <li><code>roundingMode</code>: Ghi đè hành vi phá vỡ liên kết mặc định khi <code>number</code> ở điểm giữa giữa hai giá trị được làm tròn tiềm năng\r\n      (tham khảo <code>RoundingMode.Type</code> để biết các giá trị khả thi).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Làm tròn 1,234 lên số nguyên gần nhất.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Làm tròn 1,56 lên số nguyên gần nhất.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Làm tròn 1,2345 lên hai vị trí thập phân.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Làm tròn 1,2345 lên ba vị trí thập phân (làm tròn lên).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Làm tròn 1,2345 lên ba vị trí thập phân (làm tròn xuống).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Trả về kết quả làm tròn, số dương lên và số âm xuống. Số chữ số có thể được chỉ định.",
        "Documentation.LongDescription": "Trả về kết quả làm tròn <code>number</code> dựa trên dấu của số. Hàm này sẽ làm tròn số dương lên và số âm xuống.\r\n    Nếu <code>digits</code> được chỉ định, <code>number</code> được làm tròn về <code>digits</code> số thập phân.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Làm tròn số -1,2 cách xa số 0.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Làm tròn số 1,2 cách xa số 0.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Làm tròn số -1,234 về hai vị trí thập phân tính từ 0.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Trả về số cao nhất đằng trước. Số chữ số có thể được chỉ định.",
        "Documentation.LongDescription": "Trả về kết quả làm tròn <code>number</code> xuống số nguyên cao nhất đằng trước. Nếu <code>number</code> là null, hàm này sẽ trả về giá trị null.\r\n\r\n    Nếu <code>digits</code> được cung cấp, <code>number</code> sẽ được làm tròn đến số đã chỉ định của số thập phân.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Làm tròn 1,234 xuống số nguyên.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Làm tròn 1,999 xuống số nguyên.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Làm tròn xuống 1,999 về hai vị trí thập phân.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Trả về kết quả làm tròn số dương xuống và số âm lên. Số chữ số có thể được chỉ định.",
        "Documentation.LongDescription": "Trả về kết quả làm tròn <code>number</code> dựa trên dấu của số. Hàm này sẽ làm tròn số dương xuống và số âm lên.\r\n    Nếu <code>digits</code> được chỉ định, <code>number</code> được làm tròn về <code>digits</code> số thập phân.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Làm tròn số -1,2 tiến tới 0.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Làm tròn số 1,2 tiến tới 0.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Làm tròn số -1,234 về hai vị trí thập phân về phía 0.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Trả về số cao nhất đằng sau. Số chữ số có thể được chỉ định.",
        "Documentation.LongDescription": "Trả về kết quả làm tròn <code>number</code> lên số nguyên cao nhất tiếp theo. Nếu <code>number</code> là null, hàm này sẽ trả về giá trị null.\r\n    Nếu <code>digits</code> được cung cấp, <code>number</code> sẽ được làm tròn đến số đã chỉ định của số thập phân.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Làm tròn 1,234 lên số nguyên.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Làm tròn 1,999 lên số nguyên.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Làm tròn lên 1,234 về hai vị trí thập phân.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Trả về 1 nếu là số dương, -1 nếu là số âm và 0 nếu là số 0.",
        "Documentation.LongDescription": "Trả về 1 nếu <code>number</code> là số dương, -1 nếu là số âm và 0 nếu là số 0.\r\n    Nếu <code>number</code> là giá trị null thì <code>Number.Sign</code> trả về giá trị null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Xác định dấu (cộng trừ) của 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Xác định dấu (cộng trừ) của -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Xác định dấu (cộng trừ) của 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Trả về sin của số.",
        "Documentation.LongDescription": "Trả về sin của <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Trả về sin của góc 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Trả về sin hyperbolic của số.",
        "Documentation.LongDescription": "Trả về sin hyperbolic của <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Trả về căn bậc hai của số.",
        "Documentation.LongDescription": "Trả về căn bậc hai của <code>number</code>.\r\n    Nếu <code>number</code> là giá trị null thì <code>Number.Sqrt</code> trả về giá trị null. Nếu là giá trị âm thì <code>Number.NaN</code> được trả về (không phải số).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Trả về căn bậc hai của 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Trả về căn bậc hai của 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Trả về arctang của số.",
        "Documentation.LongDescription": "Trả về the arctang của <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Tìm tang của góc 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Trả về tang hyperbolic của số.",
        "Documentation.LongDescription": "Trả về tang hyperbolic của <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Chuyển đổi số đã cho thành văn bản.",
        "Documentation.LongDescription": "Chuyển đổi giá trị dạng số <code>number</code> thành giá trị văn bản theo định dạng được chỉ định bởi <code>format</code>.<br>\r\n    <br>\r\n    Định dạng là một giá trị văn bản cho biết cách chuyển đổi số. Để biết thêm chi tiết về các giá trị định dạng được hỗ trợ, hãy đi đến https://go.microsoft.com/fwlink/?linkid=2241210 và https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Ngoài ra, có thể cung cấp tùy chọn <code>culture</code> (ví dụ: \"en-US\") để kiểm soát hoạt động phụ thuộc vào văn hóa của <code>format</code>.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi số sang văn bản mà không xác định định dạng.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Chuyển đổi số sang định dạng số mũ.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Chuyển đổi số sang định dạng phần trăm chỉ có một vị trí thập phân.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Trả về một bảng chứa các nguồn cấp OData do dịch vụ OData cung cấp.",
        "Documentation.LongDescription": "Trả về một bảng các nguồn cấp dữ liệu OData do dịch vụ OData cung cấp từ URI <code>serviceUri</code>, tiêu đề <code>headers</code>. Một giá trị boolean chỉ định sẽ sử dụng kết nối đồng thời hay tham số bản ghi tùy chọn, <code>options</code>, có thể được chỉ định để kiểm soát các tùy chọn sau:\r\n    <ul>\r\n    <li><code>Query</code>: Thêm tham số truy vấn vào URL theo quy trình mà không phải lo thoát ra. </li>\r\n    <li> <code>Headers</code> : Chỉ định giá trị này làm bản ghi sẽ cung cấp tiêu đề bổ sung cho yêu cầu HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Chỉ định giá trị này làm danh sách sẽ loại trừ các khóa tiêu đề HTTP này khỏi việc tính toán để đưa dữ liệu vào bộ đệm ẩn.</li>\r\n    <li> <code>ApiKeyName</code> : Nếu trang đích có khái niệm nào đó về khóa API thì có thể sử dụng tham số này để chỉ định tên (không phải giá trị) của tham số khóa phải sử dụng trong URL. Giá trị khóa thực được cung cấp trong thông tin xác thực.</li>\r\n    <li> <code>Timeout</code> : Chỉ định giá trị này làm khoảng thời gian sẽ thay đổi thời gian chờ đối với yêu cầu HTTP. Giá trị mặc định là 600 giây.</li>\r\n    <li> <code>EnableBatch</code> : Một giá trị logic (true/false) đặt có cho phép tạo yêu cầu OData $batch hay không nếu vượt quá MaxUriLength (mặc định là false).</li>\r\n    <li> <code>MaxUriLength</code> : Một số cho biết độ dài tối đa của URI được phép gửi đến dịch vụ OData. Nếu vượt quá và EnableBatch là true thì yêu cầu sẽ được thực hiện cho điểm cuối OData $batch. Nếu không, sẽ không thực hiện được (mặc định là 2048).</li>\r\n    <li> <code>Concurrent</code> : Một logic (true/false) khi được đặt thành true, các yêu cầu tới dịch vụ sẽ được tạo đồng thời. Khi được đặt thành false, các yêu cầu sẽ được tạo theo trình tự. Khi chưa được chỉ định, giá trị này sẽ do chú thích AsynchronousRequestsSupported của dịch vụ xác định. Nếu dịch vụ không chỉ định AsynchronousRequestsSupported có được hỗ trợ hay không, yêu cầu sẽ được tạo theo trình tự.</li>\r\n    <li> <code>ODataVersion</code> : Một số (3 hoặc 4) chỉ định phiên bản giao thức OData để sử dụng cho dịch vụ OData này. Khi chưa được chỉ định, sẽ yêu cầu tất cả các phiên bản được hỗ trợ. Tiêu đề OData-Version do dịch vụ trả về sẽ xác định phiên bản dịch vụ.</li>\r\n    <li> <code>FunctionOverloads</code> : Một giá trị logic (true/false) khi được đặt thành true, các quá tải nhập chức năng sẽ được liệt kê trong bộ điều hướng dưới dạng các mục tách biệt, còn khi được đặt thành false, các quá tải nhập chức năng sẽ được liệt kê dưới dạng chức năng kết hợp trong bộ điều hướng. Giá trị mặc định cho V3: false. Giá trị mặc định cho V4: true.</li>\r\n    <li> <code>MoreColumns</code> : Một giá trị logic (true/false) khi được đặt thành true sẽ thêm cột \"Cột khác\" vào từng nguồn cấp dữ liệu thực thể có chứa các loại đang mở và loại đa hình. Loại này sẽ chứa các trường chưa được nêu trong loại cơ sở. Khi được đặt thành false, trường này không hiển thị. Giá trị mặc định là false.</li>\r\n    <li> <code>IncludeAnnotations</code> : Danh sách được phân tách bằng dấu phẩy gồm các mẫu hoặc tên thuật ngữ có không gian tên đủ điều kiện để sử dụng \"*\" làm ký tự đại diện. Theo mặc định, không bao gồm chú thích nào.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : Danh sách được phân tách bằng dấu phẩy gồm các mẫu hoặc tên thuật ngữ có không gian tên đủ điều kiện để đưa vào yêu cầu tài liệu siêu dữ liệu, với \"*\" là ký tự đại diện. Theo mặc định, sẽ bao gồm cùng các chú thích như IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code> : Cho phép dịch vụ OData tránh ghi một số giá trị nhất định trong phản hồi. Nếu được dịch vụ xác nhận, chúng tôi sẽ phỏng đoán các giá trị đó theo những trường bị bỏ qua. Có các tùy chọn sau:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : Cho phép dịch vụ OData bỏ qua giá trị null.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : Chỉ định triển khai trình kết nối OData cần sử dụng. Giá trị hợp lệ là \"2.0\" hoặc null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Kết nối với dịch vụ OData TripPin.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Trả về kết quả của thao tác cố suy ra các tính năng SQL cho trình điều khiển SQL.",
        "Documentation.LongDescription": "Trả về kết quả của thao tác cố suy ra các tính năng của SQL với chuỗi kết nối <code>connectionString</code> sử dụng ODBC. <code>connectionString</code> có thể là văn bản hoặc bản ghi của các cặp giá trị thuộc tính. Giá trị thuộc tính có thể là văn bản hoặc số.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Trả về các tính năng SQL được suy ra cho chuỗi kết nối.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Trả về nội dung của tài liệu Parquet ở dạng bảng.",
        "Documentation.LongDescription": "Trả về nội dung tài liệu Parquet dưới dạng bảng. Các tùy chọn bao gồm:\n    <ul>\n    <li> <code>TypeMapping</code> : Giá trị văn bản kiểm soát ánh xạ loại mặc định khi đọc và ghi tệp. Giá trị mặc định là null và cố gắng giữ nguyên độ trung thực nhiều nhất có thể với loại gốc. Giá trị \"Sql\" sẽ tạo kết quả tương thích nhất với Sql Server.</li>\n    </ul>",
        "Documentation.Category": "Đang truy cập vào dữ liệu",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.LongDescription": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.Category": "Đang truy nhập vào dữ liệu",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Trả về giá trị phần trăm từ giá trị đã cho.",
        "Documentation.LongDescription": "Trả về giá trị <code>percentage</code> từ <code>value</code> cho sẵn. Nếu <code>value</code> cho sẵn là <code>null</code>, <code>Percentage.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> cho sẵn là <code>text</code> có biểu tượng dấu phần trăm theo sau, thì sẽ trả về số thập phân được chuyển đổi. Nếu không, giá trị sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.From</code>. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Tải giá trị <code>phần trăm</code> <code>\"12,3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Trả về bản ghi khung dữ liệu từ tệp RData.",
        "Documentation.LongDescription": "Trả về bản ghi khung dữ liệu từ tệp RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Kết hợp các bản ghi trong danh sách cho sẵn.",
        "Documentation.LongDescription": "Kết hợp các bản ghi trong danh sách cho sẵn <code>records</code>. Nếu <code>records</code> chứa giá trị không phải là bản ghi thì một lỗi được trả về.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Tạo bản ghi kết hợp từ các những bản ghi.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Trả về số lượng trường trong bản ghi.",
        "Documentation.LongDescription": "Trả về số lượng trường trong bản ghi <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Tìm số lượng trường trong bản ghi.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Trả về tên của các trường.",
        "Documentation.LongDescription": "Trả về tên của các trường trong bản ghi <code>record</code> ở dạng văn bản.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trả về tên của các trường trong bản ghi.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Trả về danh sách giá trị trường.",
        "Documentation.LongDescription": "Trả về danh sách giá trị trường trong bản ghi <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị trường trong bản ghi.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Tạo bản ghi từ bảng có dạng {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Trả về bản ghi từ bảng bản ghi <code>table</code> chứa tên trường và tên giá trị <code>{[Name = name, Value = value]}</code>. Một ngoại lệ được đưa ra nếu các tên trường không phải là duy nhất.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Tạo bản ghi từ bảng có dạng Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Trả về danh sách giá trị chứa giá trị trường của bản ghi nhập vào.",
        "Documentation.LongDescription": "Trả về danh sách giá trị chứa giá trị trường từ đầu vào <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Trích xuất giá trị trường từ bản ghi.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Trả về một cây cú pháp trừu tượng biểu thị quyền truy nhập vào một cột trong biểu thức hàng.",
        "Documentation.LongDescription": "Trả về một cây cú pháp trừu tượng (AST) biểu thị quyền truy nhập vào cột <code>columnName</code> của hàng trong một biểu thức hàng.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Tạo một AST biểu thị truy cập cột \"CustomerName\".",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Trả về cây cú pháp trừu tượng (AST) cho phần nội dung của hàm.",
        "Documentation.LongDescription": "<p>Trả về cây cú pháp trừu tượng (AST) cho phần nội dung của <code>function</code>, được chuẩn hóa thành một <i>biểu thức hàng</i>:\r\n<ul>\r\n  <li> Hàm phải là hàm lambda 1 đối số.</li>\r\n  <li>Tất cả các tham chiếu tới tham số của hàm được thay thế bằng <code>RowExpression.Row</code>.</li>\r\n  <li>Tất cả các tham chiếu tới cột được thay thế bằng <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>AST sẽ được đơn giản hóa để chỉ chứa nút thuộc các loại:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Sẽ xuất hiện lỗi nếu không thể trả về biểu thức hàng AST cho phần nội dung của <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Trả về AST cho nội dung của hàm <code>từng [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Tạo số có độ chính xác Đơn từ giá trị cho trước.",
        "Documentation.LongDescription": "Trả về giá trị <code>number</code> Đơn từ <code>value</code> cho sẵn. Nếu <code>value</code> cho sẵn là <code>null</code>, <code>Single.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> cho sẵn là <code>number</code> nằm trong phạm vi Đơn thì sẽ trả về <code>value</code>, nếu không sẽ trả về một lỗi. Nếu <code>value</code> thuộc bất kỳ loại nào khác, trước tiên, giá trị này sẽ được chuyển đổi thành <code>number</code> bằng <code>Number.FromText</code>. Một <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Lấy giá trị <code>số</code> có độ chính xác Đơn của <code>\"1,5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Trả về bảng bao gồm dữ liệu từ điểm cuối chỉ mục Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Gọi đến API REST Smartsheet 2.0 tại điểm cuối được chỉ định và chuyển đổi phần tử dữ liệu được trả về thành bảng.",
        "Documentation.Examples": [
          {
            "Description": "Gọi ra bảng thông tin người dùng từ API Smartsheet",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Bảng chứa thông tin người dùng mà API Smartsheet trả về"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Trả về một hàm tách văn bản thành một danh sách văn bản tại bất kỳ dấu tách nào được chỉ định.",
        "Documentation.LongDescription": "Trả về một hàm tách văn bản thành một danh sách văn bản tại bất kỳ dấu tách nào được chỉ định.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tách dữ liệu đầu vào bằng dấu phẩy hoặc dấu chấm phẩy, bỏ qua dấu ngoặc kép và dấu phân tách trong trích dẫn, kể từ đoạn đầu của dữ liệu đầu vào.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Tách dữ liệu đầu vào bằng dấu phẩy hoặc dấu chấm phẩy, bỏ qua dấu ngoặc kép và dấu phân tách trong trích dẫn, kể từ đoạn cuối của dữ liệu đầu vào.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Trả về một hàm tách văn bản thành một danh sách văn bản theo dấu tách được chỉ định.",
        "Documentation.LongDescription": "Trả về một hàm tách văn bản thành một danh sách văn bản theo dấu tách được chỉ định.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tách dữ liệu đầu vào bằng dấu phẩy, bỏ qua dấu phẩy trong trích dẫn.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Trả về một hàm tách văn bản thành một danh sách văn bản tại mỗi dấu tách được chỉ định theo trình tự.",
        "Documentation.LongDescription": "Trả về một hàm tách văn bản thành một danh sách văn bản tại mỗi dấu tách được chỉ định theo trình tự.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tách dữ liệu đầu vào bằng dấu phẩy, rồi bằng dấu chấm phẩy, kể từ đoạn đầu của dữ liệu đầu vào.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Tách dữ liệu đầu vào bằng dấu phẩy, rồi bằng dấu chấm phẩy, coi dấu ngoặc kép như tất cả các ký tự khác và kể từ đoạn cuối của dữ liệu đầu vào.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Trả về một hàm tách văn bản thành một danh sách văn bản theo mỗi độ dài được chỉ định.",
        "Documentation.LongDescription": "Trả về một hàm tách văn bản thành một danh sách văn bản theo mỗi độ dài được chỉ định.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tách dữ liệu đầu vào thành hai kí tự đầu và ba ký tự tiếp theo, kể từ đoạn đầu của dữ liệu đầu vào.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Tách dữ liệu đầu vào thành ba kí tự đầu và hai ký tự tiếp theo, kể từ đoạn cuối của dữ liệu đầu vào.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Trả về một hàm tách văn bản thành một danh sách văn bản tại mỗi vị trí được chỉ định.",
        "Documentation.LongDescription": "Trả về một hàm tách văn bản thành một danh sách văn bản tại mỗi vị trí được chỉ định.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tách dữ liệu đầu vào tại vị trí được chỉ định, kể từ đoạn đầu của dữ liệu đầu vào.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Tách dữ liệu đầu vào tại vị trí được chỉ định, kể từ đoạn cuối của dữ liệu đầu vào.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Trả về một hàm tách văn bản thành một danh sách văn bản theo phần bù và độ dài được chỉ định.",
        "Documentation.LongDescription": "Trả về một hàm giúp bạn phân tách văn bản thành một danh sách văn bản dựa theo bù trừ và độ dài được chỉ định. Độ dài null thể hiện rằng mọi nội dung nhập còn lại nên được đưa vào.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tách dữ liệu đầu vào theo cặp vị trí và độ dài được chỉ định, kể từ đoạn đầu của dữ liệu đầu vào. Lưu ý rằng các phạm vi trong ví dụ này sẽ trùng nhau.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Tách dữ liệu đầu vào theo cặp vị trí và độ dài được chỉ định, kể từ đoạn cuối của dữ liệu đầu vào.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Phân tách nội dung nhập thành một mã bưu điện có độ dài cố định, tiếp theo là một tên thành phố có độ dài biến thiên.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Trả về một hàm tách văn bản thành một danh sách văn bản sau độ dài được chỉ định lặp đi lặp lại.",
        "Documentation.LongDescription": "Trả về một hàm tách văn bản thành một danh sách văn bản sau độ dài được chỉ định lặp đi lặp lại.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Liên tục tách dữ liệu đầu vào thành các khúc gồm ba ký tự, kể từ đoạn đầu của dữ liệu đầu vào.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Liên tục tách dữ liệu đầu vào thành các khúc gồm ba ký tự, kể từ đoạn cuối của dữ liệu đầu vào.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Trả về số lượng hàng gần đúng trong bảng.",
        "Documentation.LongDescription": "Trả về số lượng hàng xấp xỉ <code>table</code> hoặc lỗi nếu nguồn dữ liệu không hỗ trợ giá trị ước lượng.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Ước tính số tổ hợp riêng biệt của thành phố và tiểu bang trong một bảng lớn, để có thể dùng làm ước tính lượng số cho các cột. Ước tính lượng số quan trọng đến mức nhiều nguồn dữ liệu (như SQL Server) hỗ trợ ước lượng cụ thể này, thường sử dụng thuật toán có tên HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Trả về số lượng cột trong bảng.",
        "Documentation.LongDescription": "Trả về số lượng cột trong bảng <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Tìm số lượng cột trong bảng.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Trả về các tên cột ở dạng danh sách.",
        "Documentation.LongDescription": "Trả về các tên cột trong bảng <code>table</code> ở dạng danh sách văn bản.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm các tên cột của bảng.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Trả về hàng đầu tiên hoặc một giá trị mặc định được chỉ định.",
        "Documentation.LongDescription": "Trả về hàng đầu tiên của <code>table</code> hoặc giá trị mặc định tùy chọn <code>default</code> nếu bảng trống.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm hàng đầu tiên của bảng.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Tìm hàng đầu tiên của bảng <code>({})</code> hoặc trả về [a = 0, b = 0] nếu trống.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Trả về cột đầu tiên của hàng đầu tiên trong bảng hoặc giá trị mặc định đã chỉ định.",
        "Documentation.LongDescription": "Trả về cột đầu tiên của hàng đầu tiên trong bảng <code>table</code> hoặc giá trị mặc định đã chỉ định.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Cho biết bảng chỉ chứa các hàng riêng biệt (không trùng lặp) hay không.",
        "Documentation.LongDescription": "Cho biết <code>table</code> chỉ chứa các hàng riêng biệt (không trùng lặp) hay không. Trả về <code>true</code> nếu các hàng riêng biệt, <code>false</code> nếu ngược lại.\r\n    Tham số tùy chọn <code>comparisonCriteria</code> chỉ định cột nào của bảng được kiểm tra tính trùng lặp. Nếu <code>comparisonCriteria</code> không được chỉ định thì tất cả các cột đều được kiểm tra.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Xác định bảng có riêng biệt không.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Xác định bảng có riêng biệt trong cột hay không.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Cho biết bảng có chứa hàng hay không.",
        "Documentation.LongDescription": "Cho biết <code>table</code> có chứa hàng hay không. Trả về <code>true</code> nếu không có hàng nào (tức là bảng trống), <code>false</code> nếu ngược lại.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Xác định bảng có trống hay không.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Xác định bảng <code>({})</code> có trống hay không.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Trả về các khóa của bảng được chỉ định.",
        "Documentation.LongDescription": "Trả về các khóa của bảng được chỉ định.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tải danh sách khóa cho bảng.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Trả về hàng cuối cùng hoặc một giá trị mặc định được chỉ định.",
        "Documentation.LongDescription": "Trả về hàng cuối cùng của <code>table</code> hoặc giá trị mặc định tùy chọn <code>default</code> nếu bảng trống.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tìm hàng cuối cùng của bảng.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Tìm hàng cuối cùng của bảng <code>({})</code> hoặc trả về [a = 0, b = 0] nếu trống.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Trả về số lượng hàng trong bảng.",
        "Documentation.LongDescription": "Trả về số lượng hàng trong bảng <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Tìm số lượng hàng trong bảng.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Trả về hàng duy nhất trong bảng.",
        "Documentation.LongDescription": "Trả về hàng duy nhất trong một hàng <code>table</code>. Nếu <code>table</code> có nhiều hàng thì một ngoại lệ được đưa ra.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trả về hàng đơn nhất trong bảng.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Tạo một danh sách chứa các danh sách lồng nhau bao gồm các giá trị cột từ bảng.",
        "Documentation.LongDescription": "Tạo một danh sách chứa các danh sách lồng nhau từ bảng <code>table</code>.  Mỗi mục danh sách là một danh sách bên trong chứa các giá trị cột.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách chứa các giá trị cột từ bảng.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Chuyển đổi một bảng thành một danh sách bằng cách áp dụng hàm kết hợp được chỉ định cho mỗi hàng giá trị trong bảng.",
        "Documentation.LongDescription": "Chuyển đổi một bảng thành một danh sách bằng cách áp dụng hàm kết hợp được chỉ định cho mỗi hàng giá trị trong bảng.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp văn bản của từng hàng bằng dấu phẩy.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Chuyển đổi bảng thành danh sách bản ghi.",
        "Documentation.LongDescription": "Chuyển đổi bảng <code>table</code> thành danh sách bản ghi.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi bảng thành danh sách bản ghi.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Tạo một danh sách lồng chứa các giá trị hàng từ một bảng.",
        "Documentation.LongDescription": "Tạo một danh sách chứa các danh sách lồng nhau từ bảng <code>table</code>.  Mỗi mục danh sách là một danh sách bên trong chứa các giá trị hàng.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Tạo một danh sách chứa các giá trị hàng từ bảng.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Tạo bản ghi lỗi được sửa đổi không kích hoạt dự phòng khi được trình xử lý đã xác định trên dạng xem đưa ra (qua Table.View).",
        "Documentation.LongDescription": "Tạo bản ghi lỗi được sửa đổi từ <code>errorRecord</code> không kích hoạt dự phòng khi được trình xử lý đã xác định trên dạng xem đưa ra (qua Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Tạo một hàm có thể được chặn bởi một trình xử lý được xác định trên một dạng xem (thông qua Table.View).",
        "Documentation.LongDescription": "<p>Tạo hàm dạng xem dựa trên <code>function</code> có thể được xử lý trong dạng xem tạo bởi <code>Table.View</code>.</p>\r\n<p>Có thể sử dụng bộ xử lý <code>OnInvoke</code> của <code>Table.View</code> để xác định bộ xử lý cho hàm dạng xem.</p>\r\n<p>Như với bộ xử lý cho các phép toán tích hợp, nếu không bộ xử lý <code>OnInvoke</code> nào được chỉ định, hoặc nếu bộ xử lý không xử lý hàm dạng xem, hoặc bộ xử lý phát sinh lỗi, <code>function</code> sẽ được áp dụng ở phía trên cùng của dạng xem.</p>\r\n<p>Tham khảo tài liệu về trình kết nối tùy chỉnh Power Query được phát hành để biết mô tả đầy đủ hơn về <code>Table.View</code> và các hàm dạng xem tùy chỉnh.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Trả về giá trị văn bản đã loại bỏ tất cả ký tự điều khiển.",
        "Documentation.LongDescription": "Trả về giá trị văn bản đã loại bỏ tất cả ký tự điều khiển của <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ ký tự chuyển dòng và các ký tự điều khiển khác khỏi giá trị văn bản.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Ghép chuỗi danh sách giá trị văn bản thành một giá trị văn bản.",
        "Documentation.LongDescription": "Trả về kết quả kết hợp danh sách giá trị văn bản, <code>texts</code>, thành một giá trị văn bản duy nhất. Mọi giá trị <code>null</code> xuất hiện trong <code>texts</code> đều bị bỏ qua.\r\n    <code>separator</code> tùy chọn được sử dụng trong văn bản kết hợp cuối cùng có thể được chỉ định.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kết hợp các giá trị văn bản \"Seattle\" và \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Kết hợp các giá trị văn bản \"Seattle\" và \"WA\" được phân tách bằng một dấu phẩy và một dấu cách.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Kết hợp các giá trị \"Seattle\", <code>null</code> và \"WA\", được phân tách bằng một dấu phẩy và một dấu cách. (Lưu ý rằng <code>null</code> bị bỏ qua.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Tạo một giá trị văn bản từ giá trị cho sẵn.",
        "Documentation.LongDescription": "Trả về dạng thức biểu diễn bằng văn bản của <code>value</code>. <code>value</code> có thể là giá trị <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> hoặc <code>binary</code>.\r\n    Nếu giá trị cho sẵn là giá trị null thì <code>Text.From</code> sẽ trả về giá trị null. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Tạo một giá trị văn bản từ số 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Mã hóa dữ liệu từ dạng nhị phân thành văn bản.",
        "Documentation.LongDescription": "Mã hóa dữ liệu <code>binary</code> từ giá trị nhị phân thành giá trị văn bản bằng cách sử dụng loại <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Đưa ra loại số chi tiết (Int64.Type, Double.Type, v.v.) của một số được mã hóa trong văn bản.",
        "Documentation.LongDescription": "Đưa ra loại số chi tiết (Int64.Type, Double.Type, v.v.) của <code>text</code>. Lỗi sẽ phát sinh nếu <code>text</code> không phải một số. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"vi-VN\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Trả về số lượng ký tự.",
        "Documentation.LongDescription": "Trả về số lượng ký tự trong văn bản <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Tìm số lượng ký tự trong văn bản \"Hello World\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Chuyển đổi tất cả các ký tự thành chữ thường.",
        "Documentation.LongDescription": "Trả về kết quả chuyển đổi tất cả ký tự trong <code>text</code> thành chữ thường. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Nhận phiên bản chữ thường của \"AbCd\".",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Viết hoa chữ cài đầu tiên của mỗi từ.",
        "Documentation.LongDescription": "Trả về kết quả chỉ viết hoa chữ cái đầu tiên của mỗi từ trong giá trị văn bản <code>text</code>. Tất cả chữ cái khác được trả về ở dạng chữ thường. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Sử dụng <code>Text.Proper</code> cho câu đơn giản.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Đảo ngược <code>text</code> được cung cấp.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Đảo ngược văn bản \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Mã hóa văn bản thành dạng thức nhị phân.",
        "Documentation.LongDescription": "Mã hóa giá trị văn bản cho sẵn <code>text</code> thành giá trị nhị phân bằng cách sử dụng <code>encoding</code> được chỉ định.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Trả về danh sách giá trị ký tự từ giá trị văn bản cho sẵn.",
        "Documentation.LongDescription": "Trả về danh sách giá trị ký tự từ giá trị văn bản cho sẵn <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Tạo danh sách giá trị ký tự từ văn bản \"Hello World\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Loại bỏ tất cả dấu cách cách quãng và kế tiếp.",
        "Documentation.LongDescription": "Trả về kết quả loại bỏ tất cả dấu cách cách quãng và kế tiếp khỏi giá trị văn bản <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ dấu cách cách quãng và kế tiếp khỏi \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Loại bỏ tất cả dấu cách kế tiếp.",
        "Documentation.LongDescription": "Trả về kết quả loại bỏ tất cả dấu cách kế tiếp từ giá trị văn bản <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ dấu cách kế tiếp khỏi \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Loại bỏ tất cả dấu cách cách quãng.",
        "Documentation.LongDescription": "Trả về kết quả loại bỏ tất cả dấu cách cách quãng khỏi giá trị văn bản <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Loại bỏ dấu cách cách quãng khỏi \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Chuyển đổi tất cả ký tự thành chữ hoa.",
        "Documentation.LongDescription": "Trả về kết quả chuyển đổi tất cả ký tự trong <code>text</code> thành chữ hoa. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Nhân phiên bản chữ hoa của \"aBcD\".",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Trả về thời gian cuối giờ.",
        "Documentation.LongDescription": "Trả về thời gian cuối giờ được biểu thị bằng <code>dateTime</code>, bao gồm cả số giây ở dạng phân số. Thông tin múi giờ được bảo toàn.\r\n      <ul>\r\n        <li><code>dateTime</code>: Giá trị <code>time</code>, <code>datetime</code> hoặc <code>datetimezone</code> mà từ đó tính toán ra thời gian cuối giờ.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nhận thời gian kết thúc của giờ cho 5/14/2011 05:00:00 CH.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Nhận thời gian kết thúc của giờ cho 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Tạo thời gian từ giá trị cho sẵn.",
        "Documentation.LongDescription": "Trả về giá trị <code>time</code> từ <code>value</code> cho sẵn. <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").\r\nNếu <code>value</code> cho sẵn là <code>null</code>, <code>Time.From</code> sẽ trả về <code>null</code>. Nếu <code>value</code> cho sẵn là <code>time</code> thì sẽ trả về <code>value</code>. Giá trị của các loại sau đây có thể được chuyển đổi thành giá trị <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: Giá trị <code>time</code> từ dạng thức biểu diễn bằng văn bản. Tham khảo <code>Time.FromText</code> để biết chi tiết.</li>\r\n        <li><code>datetime</code>: Cấu phần thời gian của <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Cấu phần thời gian của ngày giờ địa phương tương đương với <code>value</code>.</li>\r\n        <li><code>number</code>: Giá trị <code>time</code> tương đương với số ngày ở dạng phân số hoặc phân số được biểu thị bởi <code>value</code>. Nếu <code>value</code> âm hay lớn hơn hoặc bằng 1 thì sẽ trả về một lỗi.</li>\r\n      </ul>\r\nNếu <code>value</code> thuộc một loại khác thì sẽ trả về một lỗi.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>0.7575</code> thành giá trị <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Chuyển đổi <code>#datetime(1899, 12, 30, 06, 45, 12)</code> thành giá trị <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Tạo Time từ dạng thức Time địa phương, tùy chỉnh và quốc tế.",
        "Documentation.LongDescription": "Tạo giá trị <code>time</code> từ dạng biểu diễn văn bản, <code>text</code>. Một tham số <code>record</code> tùy chọn, <code>options</code>, có thể được cung cấp để chỉ định các thuộc tính bổ sung. <code>record</code> có thể chứa các trường sau:\r\n<ul>\r\n   <li><code>Format</code>: Giá trị <code>text</code> cho biết định dạng cần sử dụng. Để biết thêm chi tiết, hãy truy nhập https://go.microsoft.com/fwlink/?linkid=2180104 và https://go.microsoft.com/fwlink/?linkid=2180105. Việc bỏ qua trường này hoặc cung cấp giá trị <code>null</code> sẽ dẫn đến phân tích thời gian bằng phương án hiệu quả nhất.</li>\r\n   <li><code>Culture</code>: Khi <code>Format</code> không phải là null, <code>Culture</code> sẽ kiểm soát một số bộ xác định định dạng. Ví dụ, trong <code>\"en-US\"</code> <code>\"tt\"</code> là <code>\"AM\" hoặc \"PM\"</code> còn trong <code>\"ar-EG\"</code> <code>\"tt\"</code> là <code>\"ص\" hoặc \"م\"</code>. Khi <code>Format</code> là <code>null</code>, <code>Culture</code> sẽ kiểm soát định dạng mặc định cần sử dụng. Khi <code>Culture</code> là <code>null</code> hoặc bị bỏ qua, <code>Culture.Current</code> sẽ được sử dụng.</li>\r\n</ul>\r\nĐể hỗ trợ các quy trình làm việc cũ, <code>options</code> cũng có thể là giá trị văn bản. Giá trị này có cùng hành vi giống như <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>\"10:12:31am\"</code> thành giá trị Thời gian.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Chuyển <code>\"1012\"</code> thành giá trị Thời gian.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Chuyển <code>\"10\"</code> thành giá trị Thời gian.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Trả về cấu phần giờ.",
        "Documentation.LongDescription": "Trả về cấu phần giờ của giá trị <code>time</code>, <code>datetime</code> hoặc <code>datetimezone</code> được cung cấp, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Tìm giờ trong #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Trả về cấu phần phút.",
        "Documentation.LongDescription": "Trả về cấu phần phút của giá trị <code>time</code>, <code>datetime</code> hoặc <code>datetimezone</code> được cung cấp, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Tìm phút trong #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Trả về cấu phần giây.",
        "Documentation.LongDescription": "Trả về cấu phần giây của giá trị <code>time</code>, <code>datetime</code> hoặc <code>datetimezone</code> được cung cấp, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Tìm giá trị giây từ giá trị ngày giờ.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Trả về thời gian đầu giờ.",
        "Documentation.LongDescription": "Trả về thời gian đầu giờ được biểu thị bởi <code>dateTime</code>.\r\n    <code>dateTime</code> phải là giá trị <code>date</code>, <code>datetime</code> hoặc <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tìm thời gian đầu giờ cho ngày 10 tháng 10 năm 2011, 8:10:32 SA.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Trả về một bản ghi chứa các phần của giá trị Thời gian.",
        "Documentation.LongDescription": "Trả về một bản ghi chứa các phần của giá trị Thời gian cho sẵn, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: Một giá trị <code>time</code> nơi bản ghi các phần của giá trị đó sẽ được tính.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi giá trị <code>#time(11, 56, 2)</code> thành một bản ghi chứa các giá trị Thời gian.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Trả về một cách biểu diễn văn bản của giá trị thời gian.",
        "Documentation.LongDescription": "Trả về dạng biểu diễn văn bản của <code>time</code>. Một tham số <code>record</code> tùy chọn, <code>options</code>, có thể được cung cấp để chỉ định các thuộc tính bổ sung. <code>culture</code> chỉ được sử dụng cho quy trình làm việc cũ. <code>record</code> có thể chứa các trường sau:\r\n<ul>\r\n   <li><code>Format</code>: Giá trị <code>text</code> cho biết định dạng cần sử dụng. Để biết thêm chi tiết, hãy truy nhập https://go.microsoft.com/fwlink/?linkid=2180104 và https://go.microsoft.com/fwlink/?linkid=2180105. Việc bỏ qua trường này hoặc cung cấp giá trị <code>null</code> sẽ dẫn đến định dạng ngày bằng giá trị mặc định do <code>Culture</code> xác định.</li>\r\n   <li><code>Culture</code>: Khi <code>Format</code> không phải là null, <code>Culture</code> sẽ kiểm soát một số bộ xác định định dạng. Ví dụ, trong <code>\"en-US\"</code> <code>\"tt\"</code> là <code>\"AM\" hoặc \"PM\"</code> còn trong <code>\"ar-EG\"</code> <code>\"tt\"</code> là <code>\"ص\" hoặc \"م\"</code>. Khi <code>Format</code> là <code>null</code>, <code>Culture</code> sẽ kiểm soát định dạng mặc định cần sử dụng. Khi <code>Culture</code> là <code>null</code> hoặc bị bỏ qua, <code>Culture.Current</code> sẽ được sử dụng.</li>\r\n</ul>\r\nĐể hỗ trợ các quy trình làm việc cũ, <code>options</code> và <code>culture</code> cũng có thể là giá trị văn bản. Giá trị này có cùng hành vi giống như <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Chuyển đổi <code>#time(01, 30, 25)</code> thành giá trị <code>text</code>. <i>Đầu ra kết quả có thể khác nhau tùy thuộc vào văn hóa hiện tại.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Chuyển đổi bằng cách sử dụng dạng thức tùy chỉnh và văn hóa Đức.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Chuyển đổi bằng dạng thức thời gian chuẩn.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Trả về phiên bản đã đóng của loại bản ghi cho sẵn (hoặc cùng loại nếu đã đóng).",
        "Documentation.LongDescription": "Trả về phiên bản đã đóng của <code>bản ghi</code> <code>type</code> cho sẵn (hoặc cùng loại nếu đã đóng).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tạo phiên bản đã đóng của <code>loại [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Trả về các khía cạnh của một loại.",
        "Documentation.LongDescription": "Trả về bản ghi chứa các khía cạnh của <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Trả về bản ghi có các giá trị trường đã đặt cho tên tham số của một loại hàm và giá trị của chúng được đặt cho loại tương ứng.",
        "Documentation.LongDescription": "Trả về bản ghi có các giá trị trường đã đặt cho tên tham số của <code>type</code> và giá trị của chúng được đặt cho loại tương ứng.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tìm loại tham số cho hàm <code>(x là số, y là văn bản)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Trả về một số cho biết số nhỏ nhất của tham số cần để gọi loại hàm.",
        "Documentation.LongDescription": "Trả về một số cho biết số nhỏ nhất của tham số cần để gọi đầu vào <code>type</code> của hàm.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tìm số của tham số cần thiết cho hàm <code>(x là số, y là văn bản tùy chọn)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Trả về một loại do loại hàm trả về.",
        "Documentation.LongDescription": "Trả về một loại do hàm trả về <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tìm loại trả về của <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Trả về true nếu loại là loại có thể vô giá trị; nếu không sẽ là false.",
        "Documentation.LongDescription": "Trả về <code>true</code> nếu loại là loại <code>có thể vô giá trị</code>; nếu không sẽ là <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Xác định xem <code>số</code> có phải là số có thể vô giá trị hay không.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Xác định xem <code>loại số có thể vô giá trị</code> có phải là vô giá trị hay không.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Trả về loại bản ghi là đang mở.",
        "Documentation.LongDescription": "Trả về giá trị <code>logic</code> cho biết bản ghi <code>type</code> đang mở.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Xác định xem bản ghi <code>type [ A = number, ...]</code> có đang mở hay không.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Trả về loại mục từ loại danh sách.",
        "Documentation.LongDescription": "Trả về loại mục từ loại danh sách <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tìm loại mục từ <code>{number}</code> danh sách.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Trả về loại không phải giá trị null từ một loại.",
        "Documentation.LongDescription": "Trả về loại không phải <code>giá trị null</code> từ <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Trả về loại không phải giá trị null của <code>loại số không phải giá trị null</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Trả về phiên bản mở của loại bản ghi cho sẵn (hoặc cùng loại nếu đã mở).",
        "Documentation.LongDescription": "Trả về phiên bản mở của <code>bản ghi</code> <code>type</code> cho sẵn (hoặc cùng loại nếu đã mở).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tạo phiên bản mở của <code>loại [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Trả về bản ghi mô tả các trường của loại bản ghi với mỗi trường của loại bản ghi trả về có tên tương ứng và một giá trị.",
        "Documentation.LongDescription": "Trả về bản ghi mô tả các trường của bản ghi <code>type</code>. Mỗi trường của loại bản ghi trả về có tên tương ứng và một giá trị theo dạng bản ghi <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tìm tên và giá trị của bản ghi <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Trả về danh sách khóa có thể trống cho loại bảng cho sẵn.",
        "Documentation.LongDescription": "Trả về danh sách khóa có thể trống cho loại bảng cho sẵn.<br>\r\n    <br>\r\n    Mỗi khóa được xác định bằng một bản ghi ở dạng sau:\r\n    <ul>\r\n      <li>\r\n        <code>Cột</code>: danh sách tên cột xác định khóa\r\n      </li>\r\n      <li>\r\n        <code>Chính</code>: <code>đúng</code> nếu khóa là khóa chính của bảng; nếu không, <code>sai</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Trả về thông tin khóa cho loại bảng.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Trả về loại hàng của loại bảng.",
        "Documentation.LongDescription": "Trả về loại hàng của loại bảng đã chỉ định. Kết quả sẽ luôn là một loại bản ghi.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Trả về thông tin loại hàng cho bảng đơn giản.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Trả lại tổ hợp danh sách các loại.",
        "Documentation.LongDescription": "Trả lại tổ hợp loại trong <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Lắp ráp bản ghi vào chuỗi truy vấn URI.",
        "Documentation.LongDescription": "Lắp ráp bản ghi <code>query</code> vào chuỗi truy vấn URI, thoát các ký tự khi cần thiết.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Mã hóa chuỗi truy vấn chứa một số ký tự đặc biệt.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Mã hóa các ký tự đặc biệt theo RFC 3986.",
        "Documentation.LongDescription": "Mã hóa các ký tự đặc biệt trong đầu vào <code>data</code> theo các quy tắc RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Mã hóa các ký tự đặc biệt trong \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Trả về các phần của URI đầu vào tuyệt đối ở dạng bản ghi.",
        "Documentation.LongDescription": "Trả về các phần của <code>absoluteUri</code> đầu vào ở dạng bản ghi, chứa các giá trị như Scheme, Host, Port, Path, Query, Fragment, UserName và Password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Tìm các phần của URI tuyệt đối \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Giải mã chuỗi đuợc mã hóa bằng phần trăm.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Nhập Url cho Dịch vụ phân tích Azure DevOps của bạn.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Trả về nội dung được tải xuống từ url Dịch vụ phân tích Azure DevOps dưới dạng giá trị nhị phân. Chức năng này sử dụng thông tin xác thực khác nhau cho các tổ chức khác nhau."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Nhập Url cho Dịch vụ phân tích Azure DevOps của bạn.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Trả về các nội dung được tải xuống từ Dịch vụ phân tích Azure DevOps dưới dạng giá trị nhị phân. Chức năng này sử dụng thông tin xác thực chung cho tất cả tổ chức có thể truy cập."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Thể hiện kế hoạch truy vấn thay thế.",
        "Documentation.LongDescription": "Thể hiện kế hoạch truy vấn thay thế trong biểu thức kế hoạch truy vấn nhận được qua Value.Expression(Value.Optimize(...)). Không dành cho mục đích sử dụng khác.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Trả về một cây cú pháp trừu tượng đại diện cho biểu thức của giá trị.",
        "Documentation.LongDescription": "Trả về một cây cú pháp trừu tượng (AST) đại diện cho biểu thức của giá trị",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Tạo một giá trị được định kiểu rõ từ một biểu diễn văn bản.",
        "Documentation.LongDescription": "Giải mã giá trị từ biểu diễn văn bản <code>text</code> và diễn giải giá trị đó ở dạng giá trị có loại phù hợp.\r\n    <code>Value.FromText</code> lấy giá trị văn bản và trả về số, giá trị lô-gic, giá trị null, giá trị ngày giờ, giá trị khoảng thời gian hoặc giá trị văn bản. Giá trị văn bản trống được diễn giải ở dạng giá trị null.\r\n    <code>culture</code> tùy chọn cũng có thể được cung cấp (ví dụ: \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Trả về một bản ghi chứa siêu dữ liệu của đầu vào.",
        "Documentation.LongDescription": "Trả về một bản ghi chứa siêu dữ liệu của đầu vào.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Gửi tín hiệu cho Value.Expression để trả về biểu thức được tối ưu hóa cho giá trị.",
        "Documentation.LongDescription": "Khi được sử dụng trong Value.Expression, nếu <code>value</code> đại diện cho truy vấn có thể được tối ưu hóa thì hàm này cho biết biểu thức được tối ưu hóa sẽ được trả về. Nếu không, <code>value</code> sẽ được truyền qua mà không có hiệu ứng nào.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Loại bỏ đầu vào của siêu dữ liệu.",
        "Documentation.LongDescription": "Loại bỏ đầu vào của siêu dữ liệu.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Trả về loại của giá trị cụ thể.",
        "Documentation.LongDescription": "Trả về loại của giá trị cụ thể.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.LongDescription": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.LongDescription": "Chỉ được dùng hàm này trong nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.LongDescription": "Hàm này chỉ nhằm mục đích sử dụng nội bộ.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Trả về HTML cho URL được chỉ định, như được xem bởi trình duyệt web.",
        "Documentation.LongDescription": "Trả về HTML cho <code>url</code> được chỉ định khi được xem bằng trình duyệt web. Có thể cung cấp tham số bản ghi tùy chọn, <code>options</code>, để xác định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: Nếu trang web đích có khái niệm về khóa API thì tham số này có thể được sử dụng để chỉ định tên (không phải giá trị) của tham số khóa phải được sử dụng trong URL. Giá trị khóa thực tế được cung cấp trong thông tin xác thực.</li>\r\n        <li><code>WaitFor</code>: Chỉ định điều kiện cần chờ trước khi tải xuống HTML, ngoài việc chờ tải trang (tùy chọn này luôn được thực hiện). Có thể là bản ghi có chứa các trường Thời gian chờ và/hoặc Bộ chọn. Nếu chỉ chỉ định trường Thời gian chờ, hàm sẽ chờ một khoảng thời gian đã chỉ định trước khi tải xuống HTML. Nếu chỉ định cả Bộ chọn và Thời gian chờ và Thời gian chờ đã hết trước khi Bộ chọn xuất hiện trên trang, lỗi sẽ bị loại bỏ. Nếu chỉ định Bộ chọn mà không có Thời gian chờ thì Thời gian chờ mặc định 30 giây sẽ được áp dụng.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Truy cập vào dữ liệu",
        "Documentation.Examples": [
          {
            "Description": "Trả về HTML cho https://microsoft.com.",
            "Code": "Web.BrowserContents (\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Trả về HTML cho https://microsoft.com sau khi chờ trình chọn CSS xuất hiện.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Trả về HTML cho https://microsoft.com sau khi chờ mười giây.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Trả về HTML cho https://microsoft.com sau khi chờ trình chọn CSS xuất hiện sau tối đa 10 giây.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Trả về nội dung được tải xuống từ url ở dạng nhị phân.",
        "Documentation.LongDescription": "Trả về nội dung được tải xuống từ <code>url</code> dưới dạng nhị phân. Tham số bản ghi tùy chọn <code>options</code> có thể được cung cấp để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>Query</code> : Th&#234;m tham số truy vấn theo chương trình v&#224;o URL v&#224; kh&#244;ng phải quan t&#226;m đ&#234;́n việc tho&#225;t.</li>\r\n<li><code>ApiKeyName</code> : Nếu site đ&#237;ch c&#243; kh&#225;i niệm về kh&#243;a API thì tham số n&#224;y c&#243; thể được sử dụng để chỉ định t&#234;n (kh&#244;ng phải gi&#225; trị) của tham số khóa phải được sử dụng trong URL. Gi&#225; trị kh&#243;a thực tế được cung cấp trong th&#244;ng tin xác thực.</li>\r\n<li><code>Headers</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng bản ghi sẽ cung cấp ti&#234;u đề bổ sung cho y&#234;u cầu HTTP.</li>\r\n<li><code>Timeout</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng khoảng thời gian sẽ thay đổi thời gian chờ cho y&#234;u cầu HTTP. Gi&#225; trị mặc định l&#224; 100 gi&#226;y.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng danh s&#225;ch sẽ loại trừ c&#225;c khóa ti&#234;u đề HTTP n&#224;y khỏi vi&#234;̣c trở thành một phần trong ph&#233;p t&#237;nh đ&#234;̉ tạo bộ đệm ẩn cho dữ liệu.</li>\r\n<li><code>IsRetry</code> : Vi&#234;̣c chỉ định gi&#225; trị l&#244;-gic n&#224;y l&#224; true sẽ bỏ qua mọi phản hồi hiện c&#243; trong bộ đệm ẩn khi tải dữ liệu.</li>\r\n<li><code>ManualStatusHandling</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng danh s&#225;ch sẽ ngăn chặn mọi thao t&#225;c xử lý t&#237;ch hợp sẵn cho c&#225;c y&#234;u cầu HTTP có phản hồi chứa một trong c&#225;c m&#227; trạng th&#225;i này.</li>\r\n<li><code>RelativePath</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng văn bản sẽ gắn kết giá trị với URL cơ sở trước khi thực hiện y&#234;u cầu.</li>\r\n<li><code>Content</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y sẽ thay đổi y&#234;u cầu web từ GET thành POST, sử dụng gi&#225; trị của t&#249;y chọn dưới dạng nội dung của POST.</li>\r\n</ul>\r\n\r\n    Yêu cầu HTTP được thực hiện dưới dạng GET (khi không có Nội dung nào được chỉ định) hoặc POST (khi có Nội dung). Chỉ có thể thực hiện các yêu cầu POST ẩn danh.\r\n    <br>\r\n    Tiêu đề của phản hồi HTTP có sẵn dưới dạng siêu dữ liệu trên kết quả nhị phân. Bên ngoài ngữ cảnh trình kết nối dữ liệu tùy chỉnh, chỉ có một tập hợp con tiêu đề phản hồi sẵn dùng (vì lý do bảo mật).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Truy xuất nội dung của <code>\"https://bing.com/search?q=Power+Query\"</code> bằng các tùy chọn RelativePath và Query. Những tùy chọn này có thể được sử dụng để truy vấn động một URL cơ sở tĩnh.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Thực hiện POST dựa trên một URL, truyền qua tải trọng JSON nhị phân và phân tích phản hồi dưới dạng JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Kết nối với một URL an toàn chấp nhận khóa xác thực như một phần trong chuỗi truy vấn của khóa đó. Thay vì mã hóa cứng khóa bí mật ở dạng M (có rủi ro về bảo mật), \r\n    khóa có thể được cung cấp một cách an toàn bằng cách chỉ định tên của khóa (chứ không phải giá trị của khóa) ở dạng M, chọn xác thực Web API và nhập giá trị khóa như một phần của thông tin xác thực API cho Web.\r\n    Khi được dùng theo cách này, ví dụ sau sẽ tạo một yêu cầu đến <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Trả về tiêu đề HTTP được tải xuống từ url dưới dạng giá trị bản ghi.",
        "Documentation.LongDescription": "Trả về tiêu đề được tải xuống từ <code>url</code> dưới dạng bản ghi. Tham số bản ghi tùy chọn <code>options</code> có thể được cung cấp để chỉ định các thuộc tính bổ sung. Bản ghi có thể chứa các trường sau:\r\n    <ul>\r\n<li><code>Query</code> : Th&#234;m tham số truy vấn theo chương trình v&#224;o URL v&#224; kh&#244;ng phải quan t&#226;m đ&#234;́n việc tho&#225;t.</li>\r\n<li><code>ApiKeyName</code> : Nếu site đ&#237;ch c&#243; kh&#225;i niệm về kh&#243;a API thì tham số n&#224;y c&#243; thể được sử dụng để chỉ định t&#234;n (kh&#244;ng phải gi&#225; trị) của tham số khóa phải được sử dụng trong URL. Gi&#225; trị kh&#243;a thực tế được cung cấp trong th&#244;ng tin xác thực.</li>\r\n<li><code>Headers</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng bản ghi sẽ cung cấp ti&#234;u đề bổ sung cho y&#234;u cầu HTTP.</li>\r\n<li><code>Timeout</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng khoảng thời gian sẽ thay đổi thời gian chờ cho y&#234;u cầu HTTP. Gi&#225; trị mặc định l&#224; 100 gi&#226;y.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng danh s&#225;ch sẽ loại trừ c&#225;c khóa ti&#234;u đề HTTP n&#224;y khỏi vi&#234;̣c trở thành một phần trong ph&#233;p t&#237;nh đ&#234;̉ tạo bộ đệm ẩn cho dữ liệu.</li>\r\n<li><code>IsRetry</code> : Vi&#234;̣c chỉ định gi&#225; trị l&#244;-gic n&#224;y l&#224; true sẽ bỏ qua mọi phản hồi hiện c&#243; trong bộ đệm ẩn khi tải dữ liệu.</li>\r\n<li><code>ManualStatusHandling</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng danh s&#225;ch sẽ ngăn chặn mọi thao t&#225;c xử lý t&#237;ch hợp sẵn cho c&#225;c y&#234;u cầu HTTP có phản hồi chứa một trong c&#225;c m&#227; trạng th&#225;i này.</li>\r\n<li><code>RelativePath</code> : Vi&#234;̣c chỉ định gi&#225; trị n&#224;y dưới dạng văn bản sẽ gắn kết giá trị với URL cơ sở trước khi thực hiện y&#234;u cầu.</li>\r\n</ul>\r\n\r\n    Yêu cầu HTTP được thực hiện với phương pháp HEAD. Bên ngoài ngữ cảnh trình kết nối dữ liệu tùy chỉnh, chỉ có một tập hợp con tiêu đề phản hồi sẵn dùng (vì lý do bảo mật).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Truy xuất tiêu đề HTTP cho <code>\"https://bing.com/search?q=Power+Query\"</code> bằng tùy chọn RelativePath và Truy vấn.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Ngữ cảnh ủy quyền dùng để đánh giá điều kiện của mục nhập kiểm soát truy cập (ACE).",
        "Documentation.LongDescription": "Ngữ cảnh ủy quyền dùng để đánh giá điều kiện của mục nhập kiểm soát truy cập (ACE).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Bảng mục nhập kiểm soát truy cập (ACE).",
        "Documentation.LongDescription": "Bảng mục nhập kiểm soát truy cập (ACE) đã sắp xếp thể hiện quy tắc ủy quyền. Mỗi hàng đều được đánh giá theo ngữ cảnh ủy quyền hiện tại (theo thứ tự) và hàng đầu tiên có biểu thức <code>Condition</code> trả về true xác định quy tắc được áp dụng. Cột <code>Action</code> thể hiện loại hành động được áp dụng quy tắc. Cột <code>AccessControlKind</code> xác định xem sẽ cho phép hay từ chối hành động đó.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Chỉ định loại kiểm soát truy cập.",
        "Documentation.LongDescription": "Chỉ định loại kiểm soát truy cập.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Loại biểu thị tất cả các giá trị.",
        "Documentation.LongDescription": "Loại biểu thị tất cả các giá trị.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Loại biểu thị tất cả giá trị nhị phân.",
        "Documentation.LongDescription": "Loại biểu thị tất cả giá trị nhị phân.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Chỉ định loại mã hóa nhị phân.",
        "Documentation.LongDescription": "Chỉ định loại mã hóa nhị phân.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Chỉ định số lần mục được dự kiến sẽ xuất hiện trong nhóm.",
        "Documentation.LongDescription": "Chỉ định số lần mục được dự kiến sẽ xuất hiện trong nhóm.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Mô tả loại lưu vào bộ nhớ đệm cần thực hiện.",
        "Documentation.LongDescription": "Mô tả loại lưu vào bộ nhớ đệm cần thực hiện.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Loại biểu thị tất cả các byte.",
        "Documentation.LongDescription": "Loại biểu thị tất cả các byte.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Chỉ định thứ tự byte.",
        "Documentation.LongDescription": "Chỉ định thứ tự byte.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Loại biểu thị tất cả giá trị.",
        "Documentation.LongDescription": "Loại biểu thị tất cả giá trị.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Chỉ định loại nén.",
        "Documentation.LongDescription": "Chỉ định loại nén.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Chỉ rõ tầm quan trọng của trích dẫn trong tài liệu Csv.",
        "Documentation.LongDescription": "Chỉ rõ tầm quan trọng của trích dẫn trong tài liệu Csv.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Loại biểu thị giá trị tiền tệ.",
        "Documentation.LongDescription": "Loại biểu thị giá trị tiền tệ.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Loại biểu thị tất cả giá trị ngày.",
        "Documentation.LongDescription": "Loại biểu thị tất cả giá trị ngày.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Loại biểu thị tất cả giá trị ngày và giờ không có múi giờ liên quan.",
        "Documentation.LongDescription": "Loại biểu thị tất cả giá trị ngày và giờ không có múi giờ liên quan.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Loại biểu thị tất cả giá trị ngày và giờ tương ứng với múi giờ.",
        "Documentation.LongDescription": "Loại biểu thị tất cả giá trị ngày và giờ tương ứng với múi giờ.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Chỉ định ngày trong tuần.",
        "Documentation.LongDescription": "Chỉ định ngày trong tuần.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Loại biểu thị số thập phân có phần thập phân cố định.",
        "Documentation.LongDescription": "Loại biểu thị số thập phân có phần thập phân cố định.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Loại biểu thị số thập phân có dấu phẩy động với độ chính xác đôi.",
        "Documentation.LongDescription": "Loại biểu thị số thập phân có dấu phẩy động với độ chính xác đôi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Loại biểu thị tất cả giá trị khoảng thời gian",
        "Documentation.LongDescription": "Loại biểu thị tất cả giá trị khoảng thời gian",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Chỉ định hành động dự kiến cho các giá trị bổ sung trong hàng chứa nhiều cột hơn mong đợi.",
        "Documentation.LongDescription": "Chỉ định hành động dự kiến cho các giá trị bổ sung trong hàng chứa nhiều cột hơn mong đợi.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Loại biểu thị tất cả các hàm.",
        "Documentation.LongDescription": "Loại biểu thị tất cả các hàm.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Chỉ định loại nhóm.",
        "Documentation.LongDescription": "Nhiều nhóm cục bộ có thể được tạo với cùng một giá trị khóa nhưng chỉ một nhóm toàn cầu duy nhất được tạo cho một giá trị khóa nhất định.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Loại đại diện cho giá trị Guid.",
        "Documentation.LongDescription": "Loại đại diện cho giá trị Guid.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Danh tính thể hiện người dùng, nhóm, thiết bị hoặc đối tượng có thể nhận dạng khác.",
        "Documentation.LongDescription": "Danh tính thể hiện người dùng, nhóm, thiết bị hoặc đối tượng có thể nhận dạng khác.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Xác định phạm vi tạo và so sánh danh tính.",
        "Documentation.LongDescription": "Xác định phạm vi tạo và so sánh danh tính.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Loại biểu thị số nguyên 16 bit có dấu.",
        "Documentation.LongDescription": "Loại biểu thị số nguyên 16 bit có dấu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Loại biểu thị số nguyên 32 bit có dấu.",
        "Documentation.LongDescription": "Loại biểu thị số nguyên 32 bit có dấu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Loại biểu thị số nguyên 64 bit có dấu.",
        "Documentation.LongDescription": "Loại biểu thị số nguyên 64 bit có dấu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Loại biểu thị số nguyên 8 bit có dấu.",
        "Documentation.LongDescription": "Loại biểu thị số nguyên 8 bit có dấu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Chỉ định thuật toán liên kết cần sử dụng trong thao tác liên kết.",
        "Documentation.LongDescription": "Chỉ định thuật toán liên kết cần sử dụng trong thao tác liên kết.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Chỉ định loại thao tác liên kết.",
        "Documentation.LongDescription": "Chỉ định loại thao tác liên kết.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Chỉ định bảng nối bên trái hoặc bên phải.",
        "Documentation.LongDescription": "Chỉ định bảng nối bên trái hoặc bên phải.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Mô tả loại mệnh đề giới hạn được tiếng địa phương SQL hỗ trợ được nguồn dữ liệu này sử dụng.",
        "Documentation.LongDescription": "Mô tả loại mệnh đề giới hạn được tiếng địa phương SQL hỗ trợ được nguồn dữ liệu này sử dụng.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Loại biểu thị tất cả các danh sách.",
        "Documentation.LongDescription": "Loại biểu thị tất cả các danh sách.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Loại biểu thị tất cả giá trị lôgic.",
        "Documentation.LongDescription": "Loại biểu thị tất cả giá trị lôgic.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Chỉ định hành động dự kiến cho các giá trị bị thiếu trong hàng chứa ít cột hơn mong đợi.",
        "Documentation.LongDescription": "Chỉ định hành động dự kiến cho các giá trị bị thiếu trong hàng chứa ít cột hơn mong đợi.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Loại biểu thị giá trị rỗng.",
        "Documentation.LongDescription": "Loại biểu thị giá trị rỗng.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Loại biểu thị tất cả các số.",
        "Documentation.LongDescription": "Loại biểu thị tất cả các số.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Chỉ định các loại giá trị mà dịch vụ OData có thể bỏ qua.",
        "Documentation.LongDescription": "Chỉ định các loại giá trị mà dịch vụ OData có thể bỏ qua.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Chỉ định sự xuất hiện của yếu tố trong trình tự.",
        "Documentation.LongDescription": "Chỉ định sự xuất hiện của yếu tố trong trình tự.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Chỉ định hướng sắp xếp.",
        "Documentation.LongDescription": "Chỉ định hướng sắp xếp.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Loại thể hiển mật khẩu bằng văn bản.",
        "Documentation.LongDescription": "Loại thể hiển mật khẩu bằng văn bản.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Loại đại diện cho giá trị phần trăm.",
        "Documentation.LongDescription": "Loại đại diện cho giá trị phần trăm.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Chỉ định loại chế độ phân vị.",
        "Documentation.LongDescription": "Chỉ định loại chế độ phân vị.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Chỉ định độ chính xác so sánh.",
        "Documentation.LongDescription": "Chỉ định độ chính xác so sánh.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Chỉ định kiểu trích dẫn.",
        "Documentation.LongDescription": "Chỉ định kiểu trích dẫn.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Chỉ định loại xếp hạng.",
        "Documentation.LongDescription": "Chỉ định loại xếp hạng.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Loại biểu thị tất cả bản ghi.",
        "Documentation.LongDescription": "Loại biểu thị tất cả bản ghi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Cho biết việc đánh chỉ mục có nên được thực hiện tính từ phần đầu hoặc cuối của đầu vào hay không.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Chỉ định hướng làm tròn khi có mối liên kết giữa các số có thể sẽ làm tròn tới.",
        "Documentation.LongDescription": "Chỉ định hướng làm tròn khi có mối liên kết giữa các số có thể sẽ làm tròn tới.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Các tùy chọn hợp lệ cho tùy chọn chế độ thực thi SAP Business Warehouse.",
        "Documentation.LongDescription": "Các tùy chọn hợp lệ cho tùy chọn chế độ thực thi SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Các tùy chọn hợp lệ cho tùy chọn phân phối SAP HANA.",
        "Documentation.LongDescription": "Các tùy chọn hợp lệ cho tùy chọn phân phối SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Một toán tử khoảng cho các tham số đầu vào của khoảng SAP HANA.",
        "Documentation.LongDescription": "Một toán tử khoảng cho các tham số đầu vào của khoảng SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Loại biểu thị số thập phân có dấu phẩy động với độ chính xác đơn.",
        "Documentation.LongDescription": "Loại biểu thị số thập phân có dấu phẩy động với độ chính xác đơn.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Giao thức để dùng khi kết nối với một phiên bản của Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Loại biểu thị tất cả các bảng.",
        "Documentation.LongDescription": "Loại biểu thị tất cả các bảng.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Loại biểu thị tất cả giá trị văn bản.",
        "Documentation.LongDescription": "Loại biểu thị tất cả giá trị văn bản.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Chỉ định loại mã hóa văn bản.",
        "Documentation.LongDescription": "Chỉ định loại mã hóa văn bản.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Loại biểu thị tất cả giá trị thời gian.",
        "Documentation.LongDescription": "Loại biểu thị tất cả giá trị thời gian.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Trả về mức dấu vết.",
        "Documentation.LongDescription": "Trả về mức dấu vết.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Loại biểu thị tất cả các loại.",
        "Documentation.LongDescription": "Loại biểu thị tất cả các loại.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Loại thể hiện URI văn bản.",
        "Documentation.LongDescription": "Loại thể hiện URI văn bản.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Chỉ định phương thức HTTP.",
        "Documentation.LongDescription": "Chỉ định phương thức HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
