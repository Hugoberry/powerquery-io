{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Vraća strukturalnu reprezentaciju Access baze podataka.",
        "Documentation.LongDescription": "Vraća strukturalnu reprezentaciju Access baze podataka, <code>database</code>. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, da bi se kontrolisale sledeće opcije:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n</ul>\r\n\r\n    Parametar zapisa se navodi kao [opcija1 = vrednost1, opcija2 = vrednost2...], na primer.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Vraća Analysis Services baze podataka u određeni host.",
        "Documentation.LongDescription": "Vraća baze podataka u Analysis Services instancu, <code>server</code>. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Logička vrednost koja naznačava da li će tipovi navedeni u višedimenzionalnom ili tabelarnom modelu biti korišćeni za tipove dodatih kolona mera. Kada je postavljen na false, tip „broj“ biće korišćen za sve kolone mera. Podrazumevana vrednost za ovu opciju je false.</li>\r\n<li><code>Culture</code> : Ime kulture koje navodi kulturu za podatke. To odgovara svojstvu niske veze „Locale Identifier“.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>SubQueries</code> : Broj (0, 1 ili 2) kojim se određuje vrednost svojstva „SubQueries“ u nisci veze. Time se kontroliše ponašanje izračunatih članova za podizbore ili podkocke. (Podrazumevana vrednost je 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "AtScale cubes",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Import/DirectQuery cube data from an AtScale.",
        "Documentation.LongDescription": "\r\nReturns cube data from AtScale on server <code>server</code>. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: A logical value indicating if the types specified in the multidimensional or tabular model will be used for the types of the added measure columns. When set to false, the type \"number\" will be used for all measure columns. The default value for this option is false.</li>\r\n        <li><code>CommandTimeout</code>: A duration (in seconds) which controls how long the server-side query is allowed to run before it is canceled. The default value is driver-dependent. </li>\r\n        <li><code>ConnectionTimeout</code>: A duration (in seconds) which controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent. </li>\r\n\r\n</ul>\r\nThe record parameter is specified as [option1 = value1, option2 = value2...].",
        "Documentation.Examples": {
          "Description": "List the cube data in an AtScale cube.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Imports data from Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Imports data from your Azure Data Explorer (Kusto) instance",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Storm Events information",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "A table with Storm Events from the \"Samples\" database in the \"help\" cluster"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Enter Url of your Azure DevOps Analytics Service.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Returns the contents downloaded from the Azure DevOps Analytics Service url as a binary value. This function uses different credentials for different organizations."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services Feed",
        "Documentation.DisplayName": "Azure DevOps Services Feed",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Returns a table of OData feeds offered by Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Unos URL-a krajnje tačke Azure Enterprise REST API-ja povezane sa upisnicom",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Vraća listu izveštaja i meseci dostupnih iz Azure Enterprise API-ja",
        "Documentation.Name": "Uvoz podataka iz usluge Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Upotreba funkcije AzureEnterprise.Tables i navigacija do određene vrednosti radi dobijanja rezultata.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "See https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli for starter query samples.",
        "Documentation.Examples": [
          {
            "Description": "Return a table with query results of user query 'resources'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "List the tables in an Azure Spark instance.",
        "Documentation.LongDescription": "List the tables in an Azure Spark instance.",
        "Documentation.Examples": [
          {
            "Description": "List the tables in an Azure Spark instance.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Vraća navigacionu tabelu koja sadrži kontejnere pronađene na navedenom nalogu iz Azure bezbednog skladišta.",
        "Documentation.LongDescription": "Vraća tabelu za navigaciju koja sadrži red za svaki kontejner pronađen na URL adresi naloga, <code>account</code>, iz Azure bezbednog skladišta. Svaki red sadrži vezu ka blob objektima kontejnera. <code>options</code> se može navesti radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>BlockSize</code> : Broj bajtova koje treba pročitati pre čekanja na korisnika podataka. Podrazumevana vrednost je 4 MB.</li>\r\n<li><code>RequestSize</code> : Broj bajtova čije čitanje treba pokušati u jednom HTTP zahtevu koji se uputi serveru. Podrazumevana vrednost je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcija ConcurrentRequests podržava brže preuzimanje podataka time što navodi broj zahteva koje treba uputiti istovremeno, nezavisno od opterećenja memorije. Potrebna memorija je (ConcurrentRequest * RequestSize). Podrazumevana vrednost je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Vraća navigacionu tabelu koja sadrži dokumente pronađene u navedenom kontejneru i njegovim potfasciklama iz usluge Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vraća tabelu za navigaciju koja sadrži dokumente pronađene u navedenom kontejneru i njegovim potfasciklama na URL adresi naloga, <code>endpoint</code>, iz Azure Data Lake Storage sistema datoteka. <code>options</code> se može navesti radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>BlockSize</code> : Broj bajtova koje treba pročitati pre čekanja na korisnika podataka. Podrazumevana vrednost je 4 MB.</li>\r\n<li><code>RequestSize</code> : Broj bajtova čije čitanje treba pokušati u jednom HTTP zahtevu koji se uputi serveru. Podrazumevana vrednost je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcija ConcurrentRequests podržava brže preuzimanje podataka time što navodi broj zahteva koje treba uputiti istovremeno, nezavisno od opterećenja memorije. Potrebna memorija je (ConcurrentRequest * RequestSize). Podrazumevana vrednost je 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (tačno/netačno) koja kontroliše da li se datoteke vraćaju u prikazu direktorijuma u vidu stabla ili kao obična lista. Podrazumevana vrednost je „netačno“.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Vraća navigacionu tabelu koja sadrži tabele pronađene na navedenom nalogu iz Azure bezbednog skladišta.",
        "Documentation.LongDescription": "Vraća tabelu za navigaciju koja sadrži red za svaku tabelu pronađenu na URL adresi naloga, <code>account</code>, iz Azure bezbednog skladišta. Svaki red sadrži vezu ka Azure tabeli. Može se dodati opcionalni parametar zapisa, <code>options</code>, radi navođenja dodatnih svojstava. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>Timeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od zahteva upućenog serveru. Podrazumevana vrednost zavisi od izvora.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight on AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Ova funkcija nije dostupna jer zahteva .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (Legacy)",
        "Documentation.Caption": "Common Data Service (Legacy)",
        "Documentation.LongDescription": "Connect to your Common Data Service instance (Dynamics 365 and PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Vraća sadržaj CSV dokumenta u vidu tabele.",
        "Documentation.LongDescription": "Vraća sadržaj CSV dokumenta kao tabelu.\r\n    <ul>\r\n     <li>\r\n         <code>columns</code> može da bude bez vrednosti, broj kolona, lista imena kolona, tip tabele ili zapis opcija.\r\n     </li>\r\n      <li>\r\n          <code>delimiter</code>može da bude jedan znak ili lista znakova, ili vrednost <code>\"\"</code>, što ukazuje da redovi treba da budu podeljeni uzastopnim razmacima. Podrazumevano: <code>\",\"</code>.\r\n      </li>\r\n     <li>\r\n        Pogledajte <code>ExtraValues.Type</code> za podržane vrednosti <code>extraValues</code> .\r\n      </li>\r\n     <li>\r\n         <code>encoding</code>određuje tip kodiranja teksta.\r\n      </li>\r\n    </ul>\r\n\r\n    Ako je zapis određen za <code>columns</code> (i <code>delimiter</code>, <code>extraValues</code>, i <code>encoding</code> bez vrednosti), mogu se obezbediti sledeća polja zapisa:\r\n    <ul>\r\n     <li>\r\n        <code>Delimiter</code>: Znak za razgraničavanje kolona.Podrazumevano: <code>\",\"</code>.\r\n      </li>\r\n     <li>\r\n        <code>Columns</code>: Može biti bez vrednosti, broj kolona, lista naziva kolona ili tip tabele. Ako je broj kolona manji od broja pronađenog u unosu, dodatne kolone će biti zanemarene. Ako je broj kolona veći od broja pronađenog u unosu, dodatne kolone će biti bez vrednosti. Kada nije navedeno, broj kolona će biti određen onim što se nalazi u unosu.\r\n      </li>\r\n     <li>\r\n        <code>Encoding</code>: Kodiranje teksta datoteke. Podrazumevano: 65001 (UTF-8).\r\n      </li>\r\n     <li>\r\n        <code>CsvStyle</code>: Određuje kako se postupa sa citatima.\r\n        <ul>\r\n        <li>\r\n        <code>CsvStyle.QuoteAfterDelimiter</code> (podrazumevano): Navodnici u polju su značajni samo odmah nakon znaka za razgraničavanje.\r\n        </li>\r\n        <li>\r\n        <code>CsvStyle.QuoteAlways</code>: Citati u polju su uvek značajni, bez obzira na to gde se pojavljuju.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Određuje način na koji se postupa sa prelomima reda u navodnicima.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (podrazumevana vrednost): Prelomi linija u navodnicima se tretiraju kao deo podataka, a ne kao kraj trenutnog reda.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Svi prelomi redova se tretiraju kao kraj trenutnog reda, čak i kada se javljaju unutar vrednosti navoda.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Obradite CSV tekst pomoću zaglavlja kolona",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Vraća tabelu koja sadrži skup dostupnih dimenzija.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži skup dostupnih dimenzija u okviru <code>cube</code>. Svaka dimenzija je tabela sa skupom atributa dimenzije i svaki atribut dimenzije je predstavljen kao kolona u tabeli dimenzija. Dimenzije možete da proširite koristeći Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Vraća ugnežđeno stablo tabela koje predstavlja hijerarhiju objekata (na primer, dimenzije i mere) prikazane fascikle.",
        "Documentation.LongDescription": "Vraća ugnežđeno stablo tabela koje predstavlja hijerarhiju objekata (na primer, dimenzije i mere) prikazane fascikle koja se može koristiti u <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Vraća tabelu koja sadrži skup dostupnih svojstava za mere koja se proširuju u kocki.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži skup dostupnih svojstava za mere koje se proširuju u kocki.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Vraća tabelu koja sadrži skup dostupnih mera.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži skup dostupnih mera u okviru <code>cube</code>.\r\n    Svaka mera je predstavljena kao funkcija. Mere mogu biti primenjene na kocku pomoću Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Vraća tabelu sa skupom parametara koji mogu da se primene na kocku.",
        "Documentation.LongDescription": "Vraća tabelu sa skupom parametara koji mogu da se primene na <code>cube</code>. Svaki parametar je funkcija koja može da se aktivira da bi se primenio <code>cube</code> sa parametrom i argumentima.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Vraća tabelu koja sadrži skup dostupnih svojstava za dimenzije koje se proširuju u kocki.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži skup dostupnih svojstava za dimenzije koje se proširuju u kocki.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Enter the URL of your Azure Data Lake Storage Gen1 account.",
        "Documentation.LongDescription": "Returns a table containing a row for each folder and file found at <code>url</code> from Azure Data Lake Storage Gen1. Each row contains properties of the folder or file and a link to its content."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Enter the URL of your Azure Data Lake Storage account.",
        "Documentation.LongDescription": "Returns a table containing a row for each file found at <code>url</code>, from Azure Data Lake Storage Gen1. Each row contains properties of the file and a link to its content."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Enter the URL of an Azure Cosmos DB account.",
        "Documentation.LongDescription": "Returns a table of Azure Cosmos DB databases at <code>url</code>. If <code>database</code> is specified, a table of collections will be returned instead. Additionally, if the field <code>Query</code> is specified in the <code>options</code> record the results of the query being executed on either the specified database and/or collection will be returned."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Dynamics 365 Business Central (on-premises) OData service endpoint.",
        "Documentation.DisplayName": "Dynamics 365 Business Central (on-premises)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (on-premises)",
        "Documentation.LongDescription": "Returns a table with relevant Dynamics 365 Business Central (on-premises) data. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Dynamics NAV OData service endpoint.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Returns a table with relevant Dynamics NAV data. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Vraća kocke u Essbase instanci grupisane prema Essbase serveru.",
        "Documentation.LongDescription": "Vraća tabelu sa kockama grupisanih prema Essbase serveru sa Essbase instance na APS serveru <code>url</code>. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Vraća sadržaj Excel radne sveske.",
        "Documentation.LongDescription": "Vraća sadržaj Excel radne sveske.\r\n    <ul>\r\n     <li> <code>useHeaders</code> može da bude bez vrednosti, logička vrednost (tačno/netačno) koja pokazuje da li prvi red svake vraćene tabele treba tretirati kao zaglavlje ili zapis sa opcijama. Podrazumevana vrednost: netačno.</li>\r\n     <li> <code>delayTypes</code> može da bude bez vrednosti ili logička vrednost (tačno/netačno) koja pokazuje da li kolone svake vraćene tabele treba ostaviti netipiziranim. Podrazumevana vrednost: netačno.</li>\r\n    </ul>\r\n\r\n    Ako je zapis naveden za <code>useHeaders</code> (i ako je <code>delayTypes</code> bez vrednosti), mogu da budu navedena sledeća polja zapisa:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Može da bude bez vrednosti ili da bude logička vrednost (tačno/netačno) koja pokazuje da li prvi red svake vraćene tabele treba tretirati kao zaglavlje. Podrazumevana vrednost: netačno.</li>\r\n     <li> <code>DelayTypes</code>: Može da bude bez vrednosti ili da bude logička vrednost (tačno/netačno) koja pokazuje da li kolone svake vraćene tabele treba ostaviti netipiziranim. Podrazumevana vrednost: netačno.</li>\r\n     <li> <code>InferSheetDimensions</code>: Može da bude bez vrednosti ili da bude logička vrednost (tačno/netačno) koja pokazuje da li oblast radne sveske koja sadrži podatke treba izvesti čitanjem same radne sveske, a ne čitanjem dimenzija metapodataka iz datoteke. To može da bude korisno u slučajevima kada su metapodaci o dimenzijama netačni. Imajte na umu da je ova opcija podržana samo za Open XML Excel datoteke, ne samo za zastarele Excel datoteke. Podrazumevana vrednost: netačno.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vratite sadržaj Lista1 iz Excel radne sveske.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Vraća tabelu koja sadrži svojstva i sadržaj datoteka i fascikli pronađenih u navedenoj fascikli.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži red za svaku fasciklu i datoteku pronađenu u fascikli <code>path</code>. Svaki red sadrži svojstva fascikle ili datoteke i vezu do njenog sadržaja. Parametar <code>options</code> je trenutno namenjen samo za internu upotrebu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Vraća tabelu koja obuhvata svojstva i sadržaj datoteka pronađenih u navedenoj fascikli i potfasciklama.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži red za svaku datoteku pronađenu u fascikli <code>path</code> i svim njenim potfasciklama. Svaki red sadrži svojstva datoteke i vezu do njenog sadržaja. Parametar <code>options</code> je trenutno namenjen samo za internu upotrebu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Import data from a Google BigQuery database using Azure AD",
        "Documentation.LongDescription": "\r\n      Returns a table listing the available projects in Google BigQuery using Azure AD for <code>Billing Project ID</code> . An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: A duration which controls how long to wait before abandoning an attempt to make a connection to the server. The default value is ODBC Connection Timeout value.</li>\r\n        <li><code>CommandTimeout</code>: A duration which controls how long the server-side query is allowed to run before it is canceled.</li>\r\n        <li><code>UseStorageApi</code>: Specifies whether to use the BigQuery Storage API for large result sets. The default value is true to use Storage API. Set to false to not use Storage API</li>\r\n        <li><code>AudienceUri</code>: This is the audience URI which the ODBC driver can use for its token exchange requests. This field must be a fully qualified URI (i.e. //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread) where pool_id is a globally-unique name to identify the workforce pool.</li>\r\n      </ul>\r\n    The record parameter is specified as [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "List the available projects in Google BigQuery using Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Sheets",
        "Documentation.Caption": "Google Sheets",
        "Documentation.Description": "Imports data from GoogleSheets",
        "Documentation.LongDescription": "Imports data from GoogleSheets"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Vraća navigacionu tabelu koja sadrži kontejnere pronađene na navedenom nalogu iz Azure bezbednog skladišta.",
        "Documentation.LongDescription": "Vraća navigacionu tabelu koja sadrži red za svaki kontejner pronađen na URL adresi naloga, <code>account</code>, iz Azure bezbednog skladišta. Svaki red sadrži vezu do blob objekata kontejnera.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Vraća navigacionu tabelu koja sadrži kontejnere pronađene na navedenom nalogu iz Azure bezbednog skladišta.",
        "Documentation.LongDescription": "Vraća navigacionu tabelu koja sadrži red za svaki kontejner pronađen na URL adresi naloga, <code>account</code>, iz Azure bezbednog skladišta. Svaki red sadrži vezu do blob objekata kontejnera.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Vraća tabelu koja sadrži svojstva i sadržaj datoteka i fascikli pronađenih u navedenoj fascikli sa Hadoop sistema datoteka.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži red za svaku fasciklu i datoteku pronađenu na URL adresi fascikle, <code>url</code>, sa Hadoop sistema datoteka. Svaki red sadrži svojstva fascikle ili datoteke i vezu do njenog sadržaja.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Vraća tabelu koja sadrži svojstva i sadržaj datoteka pronađenih u navedenoj fascikli i potfasciklama sa Hadoop sistema datoteka.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži red za svaku datoteku pronađenu na URL adresi fascikle, <code>url</code>, kao i u potfasciklama sa Hadoop sistema datoteka. Svaki red sadrži svojstva datoteke i vezu do njenog sadržaja.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Import data from an Impala cluster",
        "Documentation.LongDescription": "Import data from an Impala cluster <code>server</code>. If a port wasn't specified, the default port 21050 will be used.",
        "Documentation.Examples": [
          {
            "Description": "List the tables in an Impala cluster.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Imports data from Azure Data Explorer  (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Imports data from your Azure Data Explorer (Kusto) instance",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Storm Events information",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "A table with Storm Events from the \"Samples\" database in the \"help\" cluster"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Returns a table with data from a MailChimp endpoint.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Makes a call to the MailChimp API and returns the resulting dataset as a table. Automatically pages through all results. Optional entityName parameter can be used for API endpoints where the root endpoint and main entityName in JSON response do not match.",
        "Documentation.Examples": [
          {
            "Description": "Pulls a table of data from the MailChimp API's lists endpoint.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "A table with list data."
          },
          {
            "Description": "Pulls a table of data from the MailChimp API's campaign-folders endpoint.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "A table with campaign-folders data."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Returns raw response results from a MailChimp API endpoint.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Makes a call to the MailChimp API and returns the raw response.",
        "Documentation.Examples": [
          {
            "Description": "Returns raw data from the reports/click-details MailChimp API endpoint for a given campaign.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Raw click details data from the given campaign."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Provide advanced query functions.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Provide advanced query functions.",
        "Documentation.Examples": [
          {
            "Description": "Assuming today is 2017-6-15, get summaries data between 2017-5-1 to 2017-6-15",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Function will return summaries data between 2017-5-1 to 2017-6-15"
          },
          {
            "Description": "Assuming today is 2017-6-15, get summaries data for April 2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Function will return data between 2017-4-1 and 2017-4-30"
          },
          {
            "Description": "Assuming today is 2017-6-15, get summaries data from April 2017 till now.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Function will return data between 2017-4-1 and 2017-6-15"
          },
          {
            "Description": "Assuming today is 2017-6-15, get summaries data from last December till this February ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Function will return data between 2016-12-1 and 2017-2-28"
          },
          {
            "Description": "Assuming today is 2017-6-15, get marketplace charges for last 18 month",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Function will return data between 2015-12-1 and 2017-6-15"
          },
          {
            "Description": "Assuming today is 2017-6-15, get detail charges for June 2017 and May 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Function will return data between 2017-5-1 and 2017-6-15"
          },
          {
            "Description": "Assuming today is 2017-07-03, get detail charges for July 2016",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Function will return data between 2016-07-01 and 2016-07-31"
          },
          {
            "Description": "Assuming today is 2017-7-13, get balance summaries for past 10 month plus 13 days of this month",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Function will return data between 2016-9-1 and 2017-7-13"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Vraća tabelu SQL tabela i prikaza iz ODBC izvora podataka. ",
        "Documentation.LongDescription": "Vraća tabelu SQL tabela i prikaza iz ODBC izvora podataka koju navodi niska veze <code>connectionString</code>. <code>connectionString</code> može biti tekst ili zapis parova vrednosti svojstava. Vrednosti svojstava mogu da budu tekst ili broj. Opcionalni parametar zapisa, <code>options</code>, može da se obezbedi da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost je 15 sekundi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logička vrednost (true/false) koja određuje da li se stvaraju opcije niske veze kompatibilne sa SQL serverom za Windows potvrdu identiteta. Podrazumevana vrednost je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje SQL tabela i prikaza iz navedene niske veze.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Vraća tabelu sa SQL tabelama i prikazima iz OLE DB izvora podataka.",
        "Documentation.LongDescription": "Vraća tabelu sa SQL tabelama i prikazima iz OLE DB izvora podataka koju je navela niska veze <code>connectionString</code>. <code>connectionString</code> može da bude tekst ili zapis parova vrednosti svojstva. Vrednosti svojstva mogu da budu tekst ili broj. Može se navesti opcionalni parametar zapisa, <code>options</code>, radi obezbeđivanja dodatnih svojstava. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logička vrednost (true/false) koja određuje da li se stvaraju opcije niske veze kompatibilne sa SQL serverom za Windows potvrdu identiteta. Podrazumevana vrednost je true.</li>\r\n</ul>\r\n\r\n    Parametar zapisa se, na primer, navodi kao [opcija1 = vrednost1, opcija2 = vrednost2...] ili [Upit = „izaberi...“].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Vraća tabelu SQL tabela i prikaza iz Oracle Database.",
        "Documentation.LongDescription": "Vraća tabelu SQL tabela i prikaza iz Oracle Database na serveru <code>server</code>. Uz server se opcionalno može navesti port, razdvojen pomoću dve tačke. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, za kontrolu sledećih opcija:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n</ul>\r\n\r\n    Parametar zapisa se, na primer, navodi kao [option1 = value1, option2 = value2...] ili [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Vraća sve tabele pronađene u PDF datoteci.",
        "Documentation.LongDescription": "Vraća sve tabele pronađene u <code>pdf</code>. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>Implementation</code> : Verzija algoritma koja se koristi za identifikaciju tabela. Stare verzije su dostupne samo radi kompatibilnosti, kako bi se sprečilo da se stari upiti oštete ispravkama algoritma. Najnovija verzija bi uvek trebalo da daje najbolje rezultate. Važeće vrednosti su „1.3”, „1.2” „1.1”, ili bez vrednosti.</li>\r\n<li><code>StartPage</code> : Određuje prvu stranicu u opsegu stranica koje treba ispitati. Podrazumevano: 1.</li>\r\n<li><code>EndPage</code> : Određuje poslednju stranicu u opsegu stranica koje treba ispitati. Podrazumevano: poslednja stranica dokumenta.</li>\r\n<li><code>MultiPageTables</code> : Kontroliše da li će se slične tabele na uzastopnim stranicama automatski kombinovati u jednu tabelu. Podrazumevano: „tačno“.</li>\r\n<li><code>EnforceBorderLines</code> : Kontroliše da li se linije ivica uvek nameću kao granice ćelija (kada je vrednost „tačno“) ili se jednostavno koriste kao jedna od mnogo opcija za određivanje granica ćelija (kada je vrednost „netačno“). Podrazumevano: netačno.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Pristup podacima",
        "Documentation.Examples": [
          {
            "Description": "Vraća tabele koje se nalaze u dokumentu sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Projectplace account.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Returns a table with relevant Planview Projectplace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Ρỳтħŏň şčгĩρт",
        "Documentation.Description": "Ė×ęčύťêѕ Þýŧħǿň ŝċřίþť άлď ŗéţΰřηş δªτà ƒґªмёś",
        "Documentation.Examples": {
          "Description": "Ė×ęčύťêѕ Þýŧħǿň ŝċřίþť άлď ŗéţΰřηş δªτà ƒґªмёś",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Я śčřΐφτ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Vraća tabelu čiji je svaki red ime polja i vrednost ulaznog zapisa.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži kolone <code>Name</code> i <code>Value</code> sa redom za svako polje u <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje tabele iz zapisa.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Vraća pakete iz SAP HANA baze podataka.",
        "Documentation.LongDescription": "Vraća tabelu višedimenzionalnih paketa iz SAP HANA baze podataka <code>server</code>. Opcionalni parametar zapisa <code>options</code> može biti naveden radi kontrolisanja sledećih opcija:\r\n    <ul>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>Distribution</code> : Funkcija SapHanaDistribution koja podešava vrednost svojstva „Distribucija“ u niski veze. Usmeravanje instrukcije predstavlja metod procene ispravnog čvora servera distribuiranog sistema pre izvršenja instrukcije. Podrazumevana vrednost je SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Navodi primenu SAP Hana konektora koji će biti korišćen.</li>\r\n<li><code>EnableColumnBinding</code> : Povezuje promenljive sa kolonama skupa rezultata SAP Hana pri dobavljanju podataka. Potencijalno može poboljšati performanse po cenu malo veće iskorišćenosti memorije. Podrazumevana vrednost je netačna.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost je 15 sekundi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Vraća tabelu koja obuhvata sadržaj sa SharePoint lokacije.",
        "Documentation.LongDescription": "Vraća tabelu sa redom za svaku fasciklu i dokument pronađen na navedenom SharePoint sajtu <code>url</code>. Svaki red sadrži svojstva fascikle ili datoteke i vezu do sadržaja. <code>options</code> može biti naveden radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Broj (14 ili 15) ili tekst „Automatski“ koji navodi verziju SharePoint API-ja koja će se koristiti za ovaj sajt. Kada verzija API-ja nije navedena, koristi se 14. Kada se navede „Automatski“, verzija servera će se automatski otkriti ukoliko je moguće. Ako nije, verzija će podrazumevano biti 14. SharePoint sajtovi koji nisu na engleskom zahtevaju barem verziju 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Vraća tabelu koja sadrži dokumente sa SharePoint lokacije.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži red za svaki dokument pronađen na navedenoj SharePoint lokaciji, <code>url</code>, kao i u potfasciklama. Svaki red sadrži svojstva fascikle ili datoteke i vezu do njenog sadržaja. <code>options</code> može da se navede kako bi kontrolisala sledeće opcije:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Broj (14 ili 15) ili tekst „Automatski“ koji navodi verziju SharePoint API-ja koja će se koristiti za ovaj sajt. Kada verzija API-ja nije navedena, koristi se 14. Kada se navede „Automatski“, verzija servera će se automatski otkriti ukoliko je moguće. Ako nije, verzija će podrazumevano biti 14. SharePoint sajtovi koji nisu na engleskom zahtevaju barem verziju 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Vraća tabelu koja obuhvata sadržaj sa SharePoint liste.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži red za svaku stavku sa liste pronađenu na navedenoj SharePoint listi, <code>url</code>. Svaki red sadrži svojstva liste. <code>options</code> može da se navede radi kontrole sledećih opcija\r\n    <ul>\r\n<li><code>ApiVersion</code> : Broj (14 ili 15) ili tekst „Automatski“ koji navodi verziju SharePoint API-ja koja će se koristiti za ovaj sajt. Kada verzija API-ja nije navedena, koristi se 14. Kada se navede „Automatski“, verzija servera će se automatski otkriti ukoliko je moguće. Ako nije, verzija će podrazumevano biti 14. SharePoint sajtovi koji nisu na engleskom zahtevaju barem verziju 15.</li>\r\n<li><code>Implementation</code> : Opcionalno. Navodi koju verziju SharePoint konektora treba koristiti. Prihvaćene vrednosti su „2.0“ ili bez vrednosti. Ako je vrednost „2.0“, koristi se primena 2.0 SharePoint konektora. Ako je vrednost bez vrednosti, koristi se originalna primena SharePoint konektora.</li>\r\n<li><code>ViewMode</code> : Opcionalno. Ova opcija je važeća samo za primenu 2.0. Prihvaćene vrednosti su „Sve“ i „Podrazumevano“. Ako nije navedena nijedna vrednost, vrednost je postavljena na „Sve“. Kada se navede „Sve“, prikaz uključuje sve kolone koje su kreirali korisnici i sistemski definisane kolone. Kada se navede „Podrazumevano“, prikaz će se podudarati sa onima koje korisnik vidi kada gleda listu na mreži u svakom prikazu koji je korisnik postavio kao podrazumevani u postavkama. Ako korisnik uređuje podrazumevani prikaz da bi dodao ili uklonio kolone koje je kreirao korisnik ili sistemski definisane kolone, ili kreiranjem novog prikaza i njegovim podešavanjem kao podrazumevanog, ove promene će se preneti kroz konektor.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Sprečava konektor da koristi zasebnu krajnju tačku za kolone beleški.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Vraća tabelu na osnovu sadržaja sa navedene URL adrese oblikovanu u skladu sa SODA 2.0 API.",
        "Documentation.LongDescription": "Vraća tabelu na osnovu sadržaja sa navedene URL adrese <code>url</code> oblikovanu u skladu sa SODA 2.0 API. URL mora da ukazuje da važeći izvor usaglašen sa SODA standardom koji ima oznaku tipa datoteke .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "This function can be used to call any of the \"Lists\" endpoints offered by the SparkPost API v1. When making calls to the SparkPost API using this function, keep in mind that the SparkPost API has a strict API rate limit. If you see a 429 status code being returned from the SparkPost server you have hit the rate limit and will need to wait a few moments before making more calls.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with a single column populated with data from one of the SparkPost API v1 \"Lists\" endpoints (see SparkPost documentation for details).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Retrieve the built-in tables exposed by the SparkPost connector with data aggregated over a user-specified number of days. When refreshing these tables or making calls to the SparkPost API using this connector, keep in mind that the SparkPost API has a strict API rate limit. If you see a 429 status code being returned from the SparkPost server you have hit the rate limit and will need to wait a few moments before making more calls. When choosing a value for the Number of days parameter, note that the API only stores 6 months worth of data."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Vraća tabelu sa bazama podataka na SQL Serveru.",
        "Documentation.LongDescription": "Vraća tabelu baza podataka na navedenom SQL serveru, <code>server</code>. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, za kontrolu sledećih opcija:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Broj koji određuje vrednost odredbe za upit „maxdop“ u generisanom SQL upitu.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n<li><code>MultiSubnetFailover</code> : Logička vrednost (true/false) koja određuje vrednost svojstva „MultiSubnetFailover“ u nisci veze (podrazumevana vrednost je false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logička opcija (tačno/netačno) koja, ako ima vrednost „tačno“, pokušava da vrati tipove konverzije koji možda neće uspeti i koji bi izazvali neuspeh čitavog upita. Ne preporučuje se za opštu upotrebu.</li>\r\n<li><code>ContextInfo</code> : Binarna vrednost koja se koristi za podešavanje opcije CONTEXT_INFO pre pokretanja svake komande.</li>\r\n<li><code>OmitSRID</code> : Logička opcija (tačno/netačno) koja, ako ima vrednost „tačno“, izostavlja SRID kada proizvodi Well-Known Text iz tipova geometry i geography.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Logička (true/false) vrednost koja, ako ima vrednost „True“, dozvoljava vraćanje upita baza podataka na istom serveru. Podrazumevana vrednost je „False“.</li>\r\n</ul>\r\n\r\n     Parametar zapisa se, na primer, navodi kao [opcija1 = vrednost1, opcija2 = vrednost2...].\r\n    <br>\r\n    Ne podržava postavljanje SQL upita za pokretanje na serveru. Umesto toga, treba koristiti <code>Sql.Database</code> za pokretanje SQL upita.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Makes a call to the Stripe API, with the option to limit number of API calls made.",
        "Documentation.LongDescription": "Makes a call to the Stripe API at https://api.stripe.com/v1/<code>method</code>, with optional record <code>query</code> passed as additional parameters and optional <code>pageLimit</code> as a limit on the number of API requests. Most recent data is returned first. If <code>pageLimit</code> is not specified, all data is returned. Stripe Version 2015-10-16 is used.",
        "Documentation.Examples": [
          {
            "Description": "Returns all charges data",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "A table with all charges data for the current Stripe account"
          },
          {
            "Description": "Returns one page of charges data",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "A table with the most recent charges data for the current Stripe account"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Baferuje tabelu u memoriju, pri čemu je izoluje od spoljašnjih promena tokom procene.",
        "Documentation.LongDescription": "Baferuje tabelu u memoriju, pri čemu je izoluje od spoljnih promena tokom određivanja vrednosti.\r\n    Stavljanje u bafer je plitko. Nameće određivanje vrednosti bilo koje skalarne vrednosti ćelije, ali ostavlja vrednosti koje nisu skalarne (zapisi, liste, tabele i drugo) takve kakve jesu.\r\n    <br>\r\n    <br>\r\n    Imajte na umu da korišćenje ove funkcije može ali ne mora da ubrza izvršavanje vaših upita. U nekim slučajevima može da uspori izvršavanje vaših upita zbog dodatnih \r\n    troškova čitanja svih podataka i njihovog skladištenja u memoriji, kao i zbog činjenice da stavljanje u bafer sprečava posledično preklapanje. Ako podaci ne moraju da se\r\n    stave u bafer, već samo želite da sprečite posledično preklapanje, umesto toga koristite <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Učitajte sve redove SQL tabele u memoriju, tako da sve dolazne operacije više neće moći da izvršavaju upite za SQL server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Vraća tabelu koja je rezultat objedinjavanja liste tabela.",
        "Documentation.LongDescription": "Vraća tabelu koja je rezultat objedinjavanja liste tabela, <code>tables</code>. Za dobijenu tabelu se struktura tipa redova definiše pomoću <code>columns</code> ili združivanjem tipova ulaza ako <code>columns</code> nije naveden.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Objedinjavanje tri tabele.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Objedinite tri tabele sa različitim strukturama.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Objedinite dve tabele i projektujte na dati tip.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Spušta nivo zaglavlja kolona na prvi red vrednosti.",
        "Documentation.LongDescription": "Spušta nivo zaglavlja kolona (tj. imena kolona) na prvi red vrednosti. Podrazumevana imena kolona su „Kolona 1“, „Kolona 2“ i tako dalje.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Spuštanje nivoa prvog reda vrednosti u tabeli.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Uklanja duplirane redove iz tabele.",
        "Documentation.LongDescription": "Uklanja duple redove iz tabele.\r\n    Opcionalni parametar, <code>equationCriteria</code>, određuje koje kolone tabele se testiraju na dupliranje. Ako <code>equationCriteria</code> nije navedeno, testiraju se sve kolone.<br>\r\n    <br>\r\n    Pošto Power Query ponekad prebacuje određene operacije u pozadinske izvore podataka (poznate kao „presavijanje“), a ponekad optimizuje upite \r\n    preskakanjem operacija koje nisu striktno neophodne tako što preskače operacije koje nisu strogo neophodne, uopšteno ne postoji garancija koji će se određeni duplikat sačuvati.\r\n    Na primer, ne možete pretpostaviti da će prvi red sa jedinstvenim skupom vrednosti kolona ostati i da će redovi u tabeli biti uklonjeni.\r\n    Ako želite da se uklanjanje duplikata ponaša predvidljivo, prvo baferujte tabelu pomoću <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje dupliranih redova iz tabele.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Uklanjanje dupliranih redova iz kolone [b] u tabeli <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Kreira tabelu od liste kolona i navedenih vrednosti.",
        "Documentation.LongDescription": "Kreira tabelu tipa <code>columns</code> od liste <code>lists</code> koja sadrži ugnežđene liste sa imenima i vrednostima kolona.\r\n    Ako neke kolone imaju veći broj vrednosti od drugih, vrednosti koje nedostaju će biti popunjene podrazumevanom vrednošću, „bez vrednosti“, ako kolone mogu biti bez vrednosti.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje tabele sa liste imena kupaca na listi. Svaka vrednost u stavki liste kupaca postaje vrednost reda, a svaka lista postaje kolona.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Kreiranje tabele od date liste kolona i liste imena kolona.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Kreiranje tabele sa različitim brojem kolona po redu. Vrednost reda koji nedostaje je bez vrednosti.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Konvertuje listu u tabelu primenom navedene funkcije razdvajanja na svaku stavku sa liste.",
        "Documentation.LongDescription": "Konvertuje listu <code>list</code> u tabelu primenom opcionalne funkcije razdvajanja, <code>splitter</code>, na svaku stavku sa liste. Podrazumevano se smatra da je u pitanju lista tekstualnih vrednosti razdvojena zarezima. Opcionalna vrednost <code>columns</code> može biti broj kolona, lista kolona ili TableType. Mogu se navesti i opcionalne vrednosti <code>default</code> i <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Kreirajte tabelu sa liste koristeći podrazumevani razdelnik.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Kreirajte tabelu sa liste korišćenjem prilagođenog razdelnika.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Kreirajte tabelu sa liste korišćenjem razdelnika Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Konvertuje listu zapisa u tabelu.",
        "Documentation.LongDescription": "Konvertuje <code>records</code>, listu zapisa, u tabelu.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Kreirajte tabelu od zapisa koristeći imena polja zapisa kao imena kolona.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Kreirajte tabelu od zapisa pomoću otkucanih kolona i izaberite kolone sa brojevima.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Kreira tabelu od liste vrednosti redova i opcionalnih kolona",
        "Documentation.LongDescription": "Kreira tabelu od liste <code>rows</code>, pri čemu svaki element liste predstavlja unutrašnju listu koja sadrži vrednosti kolona za jedan red. Za <code>columns</code> se mogu navesti opcionalna lista imena kolona, tip tabele ili broj kolona.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje tabele sa kolonom [IDKupca] koja ima vrednosti {1, 2}, kolonom [Ime] koja ima vrednosti {\"Bob\", \"Jim\"}, kao i kolonom [Telefon] koja ima vrednosti {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Vraćanje tabele sa kolonom [IDKupca] koja ima vrednosti {1, 2}, kolonom [Ime] koja ima vrednosti {\"Bob\", \"Jim\"}, kao i kolonom [Telefon] koja ima vrednosti {\"123-4567\", \"987-6543\"}, pri čemu su [IDKupca], [Ime] i [Telefon] tipovi teksta.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Kreira tabelu sa kolonom od navedenih vrednosti.",
        "Documentation.LongDescription": "Kreira tabelu sa kolonom koja sadrži navedenu vrednost ili listu vrednosti, <code>value</code>. Opcionalni parametar zapisa <code>options</code> se može navesti za kontrolu sledećih opcija:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : Ime kolone korišćeno prilikom kreiranja tabele od liste ili skalarne vrednosti.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje tabele od vrednosti 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Kreiranje tabele od liste.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Kreirajte tabelu od vrednosti 1, sa prilagođenim imenom kolone.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Vraća informacije o tome kako je tabela podeljena.",
        "Documentation.LongDescription": "Vraća informacije o tome kako je tabela podeljena.  Vraća se tabela u kojoj svaka kolona predstavlja podeljenu kolonu iz prvobitne tabele, a svaki red odgovara delu originalne tabele.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Vraća profil kolona tabele.",
        "Documentation.LongDescription": "<p>Vraća profil za kolone u <code>table</code>.</p>\r\n<p>Sledeće informacije se vraćaju za svaku kolonu (kada je primenjivo):\r\n<ul>\r\n  <li>minimalno</li>\r\n  <li>maksimalno</li>\r\n  <li>prosek</li>\r\n  <li>standardna devijacija</li>\r\n  <li>broj</li>\r\n  <li>broj bez vrednosti</li>\r\n  <li>posebno brojanje</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Podiže nivo prvog reda vrednosti na nivo novih zaglavlja kolona (tj. imena kolona).",
        "Documentation.LongDescription": "Podiže nivo prvog reda vrednosti na nivo novih zaglavlja kolona (tj. imena kolona). Podrazumevano se samo tekstualne ili numeričke vrednosti podižu na nivo zaglavlja. Važeće opcije:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: Ako se postavi na <code>true</code>, sve skalarne vrednosti u prvom redu podižu se na nivo zaglavlja pomoću koda <code>Culture</code> ukoliko je naveden (odnosno pomoću trenutnog lokalnog standarda dokumenta).\r\n    Za vrednosti koje ne mogu da se konvertuju u tekst biće korišćeno podrazumevano ime kolone.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: Ime kulture koje navodi kulturu za podatke.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Podizanje nivoa prvog reda vrednosti u tabeli.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Podignite nivo svih skalarnih vrednosti u prvom redu tabele na nivo zaglavlja.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Vraća tabelu sa preskočenim redovima iz prvog prebrojavanja.",
        "Documentation.LongDescription": "Vraća tabelu koja ne sadrži prvi navedeni broj redova <code>countOrCondition</code> tabele <code>table</code>.\r\n    Broj uklonjenih redova zavisi od opcionalnog parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Ako je <code>countOrCondition</code> izostavljen, uklanja se samo prvi red. </li>\r\n    <li> Ako je <code>countOrCondition</code> broj, biće uklonjen taj broj redova (počevši od vrha). </li>\r\n    <li> Ako je <code>countOrCondition</code> uslov, redovi koji ispune uslove će biti uklonjeni dok red ne ispuni uslov.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje prvog reda tabele.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Uklanjanje prva dva reda tabele.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Uklanjanje prvih redova gde je [IDKupca] <=2 u tabeli.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Vraća tabelu sa uklonjenih N redova.",
        "Documentation.LongDescription": "Vraća tabelu koja ne sadrži poslednje <code>countOrCondition</code> redove tabele <code>table</code>.\r\n        Broj uklonjenih redova zavisi od opcionalnog parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Ako je <code>countOrCondition</code> izostavljen, uklanja se samo prvi red. </li>\r\n    <li> Ako je <code>countOrCondition</code> broj, biće uklonjen taj broj redova (počevši od dna). </li>\r\n    <li> Ako je <code>countOrCondition</code> uslov, redovi koji ispune uslov će biti uklonjeni dok red ne ispuni uslov.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje poslednjeg reda tabele.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Uklanjanje poslednjih redova gde je [IDKupca] > 2 u tabeli.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Vraća tabelu sa redovima koji sadrže grešku u najmanje jednoj ćeliji i koji su uklonjeni iz ulazne tabele. Ako je navedena lista kolona, proverava se ispravnost samo ćelija u navedenim kolonama.",
        "Documentation.LongDescription": "Vraća tabelu sa redovima koji sadrže grešku u najmanje jednoj ćeliji i koji su uklonjeni iz ulazne tabele. Ako je navedena lista kolona, proverava se ispravnost samo ćelija u navedenim kolonama.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Uklonite vrednost greške iz prvog reda.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Vraća tabelu sa redovima u obrnutom redosledu.",
        "Documentation.LongDescription": "Vraća tabelu sa redovima iz unosa <code>table</code> u obrnutom redosledu.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Obrtanje redosleda redova iz tabele.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Vraća tabelu koja sadrži opis kolona (tj. šemu) navedene tabele.",
        "Documentation.LongDescription": "<p>Vraća tabelu koja opisuje kolone za <code>table</code>.</p>\r\n<p>Svaki red u tabeli opisuje svojstva kolone za <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Ime kolone</b></td>\r\n    <td><b>Opis</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Ime</code></td>\r\n    <td>Ime kolone.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Pozicija</code></td>\r\n    <td>Pozicija zasnovana na 0 za kolonu u <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Ime tipa kolone.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Vrsta</code></td>\r\n    <td>Vrsta tipa kolone.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Svojstvo kolone da može da sadrži <code>null</code> vrednosti.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Numerička osnova (npr. osnova-2, osnova-10) polja <code>NumericPrecision</code> i <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Preciznost numeričke kolone u osnovi koju navodi <code>NumericPrecisionBase</code>. Ovo je maksimalan broj cifara koji se može predstaviti vrednošću ovog tipa (uključujući razlomke).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Skala numeričke kolone u osnovi koju navodi <code>NumericPrecisionBase</code>. Ovo je broj cifara u delu razlomka vrednosti ovog tipa. Vrednost <code>0</code> označava fiksnu razmeru bez razlomaka. Vrednost <code>null</code> označava da razmera nije poznata (zbog toga što je pokretna ili nije definisana).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Maksimalan broj razlomaka podržanih u drugom delu vrednosti datuma ili vremena.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Maksimalan broj znakova dozvoljenih u <code>tekstualnoj</code> koloni ili maksimalan broj dozvoljenih bajtova u <code>binarnoj</code> koloni.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Označava da li ova kolona može da varira u dužini (do <code>MaxLength</code>) ili je fiksne veličine.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Ime tipa kolone u izvornom sistemu tipa izvora (na primer, <code>nvarchar</code> za SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Podrazumevani izraz za vrednost ove kolone na izvornom jeziku izraza izvora (npr. <code>42</code> ili <code>newid()</code>za SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Opis</code></td>\r\n    <td>Opis kolone.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Vraća tabelu koja se sastoji samo od redova ulazne tabele koji sadrže grešku u najmanje jednoj ćeliji. Ako je navedena lista kolona, proverava se ispravnost samo ćelija u navedenim kolonama.",
        "Documentation.LongDescription": "Vraća tabelu koja se sastoji samo od redova ulazne tabele koji sadrže grešku u najmanje jednoj ćeliji. Ako je navedena lista kolona, proverava se ispravnost samo ćelija u navedenim kolonama.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Izaberite imena klijenata koji imaju greške u svojim redovima.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Vraća tabelu sa preskočenim redovima iz prvog prebrojavanja.",
        "Documentation.LongDescription": "Vraća tabelu koja ne sadrži prvi navedeni broj redova, <code>countOrCondition</code>, iz tabele <code>table</code>.\r\n    Broj preskočenih redova zavisi od opcionalnog parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Ako se <code>countOrCondition</code> izostavi, preskače se samo prvi red. </li>\r\n    <li> Ako je <code>countOrCondition</code> broj, biće preskočeno toliko redova (počev od vrha). </li>\r\n    <li> Ako je <code>countOrCondition</code> uslov, biće preskočeni redovi koji zadovoljavaju uslov sve do reda koji ne zadovoljava uslov.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Preskakanje prvog reda iz tabele.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Preskakanje prva dva reda iz tabele.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Preskakanje prvih redova u kojima je [Cena] > 25 u tabeli.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Sprečava izvršavanje svih posledičnih operacija u odnosu na originalni izvor podataka.",
        "Documentation.LongDescription": "Sprečava izvršavanje svih posledičnih operacija u odnosu na originalni izvor podataka u <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Preuzima podatke iz SQL tabele na način koji sprečava da se bilo kakve posledične operacije izvrše kao upit na SQL serveru.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Pretvara kolone u redove, a redove u kolone.",
        "Documentation.LongDescription": "Pretvara kolone u redove, a redove u kolone.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pretvaranje redova tabele sa parovima ime-vrednost u kolone.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Preuzima relacije u skupu tabela.",
        "Documentation.LongDescription": "Preuzima relacije u skupu tabela. Za skup <code>tables</code> se pretpostavlja da ima sličnu strukturu kao navigaciona tabela. Kolona koju definiše <code>dataColumn</code> sadrži stvarne tabele sa podacima.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Vraća tabelu SQL tabela i prikaza iz Teradata baze podataka.",
        "Documentation.LongDescription": "Vraća tabelu SQL tabela i prikaza iz Teradata baze podataka na serveru <code>server</code>. Uz server se opcionalno može navesti port, razdvojen pomoću dve tačke. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, za kontrolu sledećih opcija:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n</ul>\r\n\r\n    Parametar zapisa se, na primer, navodi kao [option1 = value1, option2 = value2...] ili [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the number of months of historical Twilio data to retrieve.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Returns a table with relevant Twilio data."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Vraća tabelu koja sadrži opis kolona (tj. šemu) navedenog tipa tabele.",
        "Documentation.LongDescription": "<p>Vraća tabelu koja opisuje kolone za <code>tableType</code>.</p>\r\n<p>Pogledajte dokumentaciju za <code>Table.Schema</code> da biste videli opis date tabele.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services Feed",
        "Documentation.DisplayName": "Azure DevOps Services Feed",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Returns a table of OData feeds offered by Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Connect to Viva Insights Data",
        "Documentation.LongDescription": "Import weekly metrics and attribute data from Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with visible attributes and per week metrics for each measured employee in the partition.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Vraća sadržaj HTML dokumenta razložen na sastavne strukture, kao i reprezentaciju celog dokumenta i odgovarajućeg teksta nakon uklanjanja oznaka.",
        "Documentation.LongDescription": "Vraća sadržaj HTML dokumenta razložen na sastavne strukture, kao i reprezentaciju celog dokumenta i odgovarajućeg teksta nakon uklanjanja oznaka.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Returns a table with key Webtrends metrics.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Makes a call to the Webtrends KeyMetrics endpoint and returns all data as a table.",
        "Documentation.Examples": [
          {
            "Description": "Pulls a table of key metrics for tenant 98765 in last 30 days",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "A table of key metrics"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Connect to Viva Insights Data",
        "Documentation.LongDescription": "Import weekly metrics and attribute data from Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with visible attributes and per week metrics for each measured employee in the partition.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Vraća sadržaj XML dokumenta u vidu hijerarhijske tabele.",
        "Documentation.LongDescription": "Vraća sadržaj XML dokumenta u vidu hijerarhijske tabele.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Vraća sadržaj XML dokumenta u vidu ugnežđene kolekcije ravnih tabela.",
        "Documentation.LongDescription": "Vraća sadržaj XML dokumenta u vidu ugnežđene kolekcije ravnih tabela.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite sadržaj lokalne xml datoteke.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Zendesk account.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Returns a table with relevant Zendesk data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Vraća kolekciju šema za ADO.NET izvor podataka.",
        "Documentation.LongDescription": "Vraća kolekciju šema za ADO.NET izvor podataka sa imenom dobavljača <code>providerName</code> i niskom veze <code>connectionString</code>. <code>connectionString</code> može da bude tekst ili zapis parova vrednosti svojstava. Vrednosti svojstava mogu da budu tekst ili broj. Opcionalni parametar zapisa, <code>options</code>, može biti naveden radi navođenja dodatnih svojstava. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logička vrednost (true/false) koja određuje da li se stvaraju opcije niske veze kompatibilne sa SQL serverom za Windows potvrdu identiteta. Podrazumevana vrednost je true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Import data from an Amazon Redshift database.",
        "Documentation.LongDescription": "Returns a table listing the tables on the Amazon Redshift cluster <code>server</code> in the database <code>database</code>.  An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n<ul>\r\n<li><code>Provider Name</code>: A text value to use as the Provider Name for the connection. This is used when using Microsoft Authentication.</li>\r\n<li><code>Batch Size</code>: The number of rows that are fetched in a single call to the server.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Vraća tabelu višedimenzionalnih kocki ili tabelarnih modela iz Analysis Services baze podataka.",
        "Documentation.LongDescription": "Vraća tabelu višedimenzionalnih kocki ili tabelarnih modela iz Analysis Services baze podataka <code>database</code> na serveru <code>server</code>. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka.</li>\r\n<li><code>TypedMeasureColumns</code> : Logička vrednost koja naznačava da li će tipovi navedeni u višedimenzionalnom ili tabelarnom modelu biti korišćeni za tipove dodatih kolona mera. Kada je postavljen na false, tip „broj“ biće korišćen za sve kolone mera. Podrazumevana vrednost za ovu opciju je false.</li>\r\n<li><code>Culture</code> : Ime kulture koje navodi kulturu za podatke. To odgovara svojstvu niske veze „Locale Identifier“.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>SubQueries</code> : Broj (0, 1 ili 2) kojim se određuje vrednost svojstva „SubQueries“ u nisci veze. Time se kontroliše ponašanje izračunatih članova za podizbore ili podkocke. (Podrazumevana vrednost je 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Returns a table listing the tables on the specified Spark cluster.",
        "Documentation.LongDescription": "Returns a table listing the tables on the Spark cluster <code>host</code> using <code>protocol</code>.  Valid protocols are:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Returns a table listing the tables on the specified Spark cluster.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Enter organization and project names.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (Boards only)",
        "Documentation.LongDescription": "Returns a table of Analytics views offered by Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Import data from HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nReturns a list of tables from HDInsight Interactive Query specified by the <code>database</code> on the HDInsight Interactive Query <code>server</code>. A port number may be optionally specified with the server, separated by a colon. An optional <code>options</code> parameter may be specified to control the following options:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: A duration which controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n        <li><code>CommandTimeout</code>: A duration which controls how long the server-side query is allowed to run before it is canceled. The default value is driver-dependent.</li>\r\n</ul>\r\nThe <code>options</code> parameter is specified as [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Returns a table with columns mapped to the attributes of an entity in the Common Data Model, including data types.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Returns a table with columns mapped to the attributes of an entity in the Common Data Model, including data types. Columns from the entity definition will be added if not mapped, and any unmapped columns will be removed.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Vraća kocku nakon primene parametra.",
        "Documentation.LongDescription": "Vraća kocku nakon primene <code>parameter</code> sa <code>arguments</code> na <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Menja dimenzionu granularnost konteksta filtera za kocku skupljanjem atributa mapiranih na navedene kolone.",
        "Documentation.LongDescription": "Menja dimenzionu granularnost konteksta filtera za <code>cube</code> skupljanjem atributa mapiranih na navedene kolone <code>columnNames</code>. Kolone se takođe uklanjaju iz tabelarnog prikaza kocke.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Zamenjuje skup dimenzija koje je vratila funkcija Cube.Dimensions.",
        "Documentation.LongDescription": "Zamena skupa dimenzija koje vraća <code>Cube.Dimensions</code>.\r\n    Na primer, ova funkcija može da se koristi za dodavanje ID kolone atributu dimenzije kako bi izvor podataka mogao da se grupiše na ID-u, a ne na prikazanoj vrednosti.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Primenjuje listu funkcija kocke.",
        "Documentation.LongDescription": "Primenjuje funkcije kocke sa liste, <code>transforms</code>, na <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Vraća tabelu SQL tabela i prikaza dostupnih u Db2 bazi podataka.",
        "Documentation.LongDescription": "Vraća tabelu SQL tabela i prikaza dostupnih u Db2 bazi podataka na serveru <code>server</code> u instanci baze podataka pod imenom <code>database</code>. Uz server se opcionalno može navesti port, razdvojen pomoću dve tačke. Može se navesti opcionalni parametar zapisa, <code>options</code>, radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n<li><code>Implementation</code> : Navodi primenu internog dobavljača baze podataka koja će se koristiti. Važeće vrednosti su: „IBM“ i „Microsoft“.</li>\r\n<li><code>BinaryCodePage</code> : Broj pomoću kojeg CCSID (kodirani identifikator skupa znakova) dešifruje Db2 FOR BIT binarne podatke u niske znakova. Važi ako je Implementation = „Microsoft“. Podesite na 0 da biste onemogućili konverziju (podrazumevano). Podesite na 1 da biste konvertovali na osnovu kodiranja baze podataka. Podesite CCSID na neki drugi broj da biste konvertovali u kodiranje aplikacije.</li>\r\n<li><code>PackageCollection</code> : Navodi vrednost niske za kolekciju paketa (podrazumevana vrednost je „NULLID“) kako bi se omogućila upotreba deljenih paketa potrebnih za obradu SQL izjava.&#160;Važi ako je Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Određuje da li se veza uspostavlja preko Db2 Connect mrežnog prolaza. Važi za „Implementation = &quot;Microsoft&quot;“.</li>\r\n</ul>\r\n\r\n    Parametar zapisa se, na primer, navodi kao [opcija1 = vrednost1, opcija2 = vrednost2...] ili [Upit = „izaberite...“].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Retrieves a dataset from Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Vraća tabelu koja sadrži svojstva i sadržaj blob objekata pronađenih u navedenom kontejneru iz Azure bezbednog skladišta.",
        "Documentation.LongDescription": "Vraća tabelu koja sadrži red za svaku blob datoteku pronađenu na URL adresi kontejnera, <code>account</code>, iz Azure bezbednog skladišta. Svaki red sadrži svojstva datoteke i vezu ka njenom sadržaju.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Vraća tabelu koja sadrži rezultate pokretanja navedenih CSS selektora u odnosu na obezbeđeni HTML.",
        "Documentation.LongDescription": "Vraća tabelu sa rezultatima pokretanja navedenih CSS selektora za navedeni <code>html</code>. Opcionalni parametar zapisa, <code>options</code>, može se navesti za dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Pristup podacima",
        "Documentation.Examples": [
          {
            "Description": "Vraća tabelu uzorka html tekstualne vrednosti.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Upravljač</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Izdvaja sve href stavke iz tekstualne vrednosti uzorka html veze.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Vraća tabelu SQL tabela i prikaza dostupnih u Informix bazi podataka.",
        "Documentation.LongDescription": "Vraća tabelu SQL tabela i prikaza dostupnih u Informix bazi podataka na serveru <code>server</code> u instanci baze podataka pod imenom <code>database</code>. Uz server se opcionalno može navesti port, razdvojen pomoću dve tačke. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, za kontrolu sledećih opcija:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n</ul>\r\n\r\n    Parametar zapisa se, na primer, navodi kao [option1 = value1, option2 = value2...] ili [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Returns a table with lead details.",
        "Documentation.LongDescription": "Makes a call to the Marketo REST API endpoint at <code>url</code>/rest/v1/leads.json. All leads in list <code>leadIds</code> are returned.",
        "Documentation.Examples": [
          {
            "Description": "Pulls the details for three leads",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "A table with details for the supplied leads"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the URL of the Marketo REST API endpoint associated with your account.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Returns a table with relevant Marketo data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Vraća tabelu SQL tabela, prikaza i uskladištenih skalarnih funkcija dostupnih u MySQL bazi podataka.",
        "Documentation.LongDescription": "Vraća tabelu SQL tabela, prikaza i uskladištenih skalarnih funkcija dostupnih u MySQL bazi podataka na serveru <code>server</code> u instanci baze podataka pod imenom <code>database</code>. Uz server se opcionalno može navesti port, razdvojen pomoću dve tačke. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, za kontrolu sledećih opcija:\r\n    <ul>\r\n<li><code>Encoding</code> : Vrednost TextEncoding koja određuje skup znakova koji se koristi za kodiranje svih upita poslatih na server (podrazumevana vrednost je null).</li>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Logička vrednost (true/false) koja određuje da li će se nametnuti pokretanje tinyint kolona na serveru kao logičkih vrednosti. Podrazumevana vrednost je true.</li>\r\n<li><code>OldGuids</code> : Logička vrednost (true/false) koja određuje da li će se char(36) kolone (ako je vrednost false) ili binary(16) kolone (ako je vrednost true) tretirati kao GUID-ovi. Podrazumevana vrednost je false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Logička vrednost (true/false) koja određuje da li će se vratiti sve tabele svih baza podataka (ako je vrednost false) ili će se vratiti tabele i prikazi navedene baze podataka (ako je vrednost true). Podrazumevana vrednost je false.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n</ul>\r\n\r\n    Parametar zapisa se, na primer, navodi kao [option1 = value1, option2 = value2...] ili [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Import data from an IBM Netezza database.",
        "Documentation.LongDescription": "\r\nReturns a table of Netezza tables, views, and stored functions from the Netezza Server database <code>database</code> on server <code>server</code>. The port may be optionally specified with the server, separated by a colon. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true)</li>\r\n        <li><code>HierarchicalNavigation</code>: A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false)</li>\r\n        <li><code>ConnectionTimeout</code>: A duration which controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n        <li><code>CommandTimeout</code>: A duration which controls how long the server-side query is allowed to run before it is canceled. The default value is driver-dependent.</li>\r\n<li><code>NormalizeDatabaseName</code>: A logical (true/false) that sets whether to normalize database name to upper case or interpret it literally (default is true).</li>\r\n</ul>\r\nThe record parameter is specified as [option1 = value1, option2 = value2...].",
        "Documentation.Examples": [
          {
            "Description": "List the tables in an IBM Netezza project.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Vraća rezultat pokretanja osnovnog upita na ODBC izvoru podataka.",
        "Documentation.LongDescription": "Vraća rezultat pokretanja <code>query</code> sa niskom veze <code>connectionString</code> pomoću interfejsa ODBC. <code>connectionString</code> može biti tekst ili zapis parova vrednosti svojstava. Vrednosti svojstava mogu da budu tekst ili broj. Opcionalni parametar zapisa, <code>options</code>, može da se obezbedi da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost je 15 sekundi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logička vrednost (true/false) koja određuje da li se stvaraju opcije niske veze kompatibilne sa SQL serverom za Windows potvrdu identiteta. Podrazumevana vrednost je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje rezultata pokretanja jednostavnog upita u odnosu na obezbeđenu nisku veze.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Vraća rezultat pokretanja osnovnog upita na OLE DB izvoru podataka.",
        "Documentation.LongDescription": "Vraća rezultat pokretanja <code>query</code> sa niskom veze <code>connectionString</code> pomoću interfejsa OLE DB. <code>connectionString</code> može da bude tekst ili zapis parova vrednosti svojstva. Vrednosti svojstva mogu da budu tekst ili broj. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, radi navođenja dodatnih svojstava. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logička vrednost (true/false) koja određuje da li se stvaraju opcije niske veze kompatibilne sa SQL serverom za Windows potvrdu identiteta. Podrazumevana vrednost je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Vraća tabelu SQL tabela i prikaza dostupnih u PostgreSQL bazi podataka.",
        "Documentation.LongDescription": "Vraća tabelu SQL tabela i prikaza dostupnih u PostgreSQL bazi podataka na serveru <code>server</code> u instanci baze podataka pod imenom <code>database</code>. Uz server se opcionalno može navesti port, razdvojen pomoću dve tačke. Može se navesti opcionalni parametar zapisa, <code>options</code>, radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n</ul>\r\n\r\n    Parametar zapisa se, na primer, navodi kao [opcija1 = vrednost1, opcija2 = vrednost2...] ili [Upit = „izaberi...“].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Import data from a Snowflake Computing warehouse.",
        "Documentation.LongDescription": "Returns a table listing the tables in the Snowflake Computing <code>warehouse</code> located at <code>server</code>. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n<ul>\r\n<li><code>Role</code>: A text value to use as the Role name for the connection.</li>\r\n<li><code>CreateNavigationProperties</code>: A logical (true/false) value that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>ConnectionTimeout</code>: The number of seconds to wait for network responses from Snowflake.</li>\r\n<li><code>CommandTimeout</code>: The number of seconds to wait for a query to execute.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "List the tables in a Snowflake warehouse.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Returns a table listing the tables on the specified Spark cluster.",
        "Documentation.LongDescription": "Returns a table listing the tables on the Spark cluster <code>host</code> using <code>protocol</code>.  Valid protocols are:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "List the tables in an Azure Spark instance.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Vraća tabelu SQL tabela, prikaza i uskladištenih funkcija iz SQL Server baze podataka.",
        "Documentation.LongDescription": "Vraća tabelu SQL tabela, prikaza i uskladištenih funkcija iz SQL Server baze podataka <code>database</code> na serveru <code>server</code>. Uz server se opcionalno može navesti port, razdvojen pomoću dve tačke ili zareza. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, za kontrolu sledećih opcija:\r\n    <ul>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Broj koji određuje vrednost odredbe za upit „maxdop“ u generisanom SQL upitu.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n<li><code>MultiSubnetFailover</code> : Logička vrednost (true/false) koja određuje vrednost svojstva „MultiSubnetFailover“ u nisci veze (podrazumevana vrednost je false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logička opcija (tačno/netačno) koja, ako ima vrednost „tačno“, pokušava da vrati tipove konverzije koji možda neće uspeti i koji bi izazvali neuspeh čitavog upita. Ne preporučuje se za opštu upotrebu.</li>\r\n<li><code>ContextInfo</code> : Binarna vrednost koja se koristi za podešavanje opcije CONTEXT_INFO pre pokretanja svake komande.</li>\r\n<li><code>OmitSRID</code> : Logička opcija (tačno/netačno) koja, ako ima vrednost „tačno“, izostavlja SRID kada proizvodi Well-Known Text iz tipova geometry i geography.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Logička (true/false) vrednost koja, ako ima vrednost „True“, dozvoljava vraćanje upita baza podataka na istom serveru. Podrazumevana vrednost je „False“.</li>\r\n</ul>\r\n\r\n    Parametar zapisa se, na primer, navodi kao [option1 = value1, option2 = value2...] ili [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Vraća tabelu SQL tabela i prikaza dostupnih u Sybase bazi podataka.",
        "Documentation.LongDescription": "Vraća tabelu SQL tabela i prikaza dostupnih u Sybase bazi podataka na serveru <code>server</code> u instanci baze podataka pod imenom <code>database</code>. Uz server se opcionalno može navesti port, razdvojen pomoću dve tačke. Može se navesti opcionalni parametar zapisa, <code>options</code>, radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija koja se koristi za pravljenje imena za svojstva navigacije.</li>\r\n<li><code>Query</code> : Osnovni MDX upit koji se koristi za preuzimanje podataka. Ako upit napravi više skupova rezultata, vraća se samo prvi.</li>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>ConnectionTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od pokušaja da se uspostavi veza sa serverom. Podrazumevana vrednost zavisi od upravljačkog programa.</li>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n</ul>\r\n\r\n    Parametar zapisa se, na primer, navodi kao [option1 = value1, option2 = value2...] ili [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Dodaje kolonu sa izričitim vrednostima položaja.",
        "Documentation.LongDescription": "Dodaje kolonu <code>newColumnName</code> u <code>table</code> sa izričitim vrednostima položaja.\r\n    Opcionalna vrednost, <code>initialValue</code>, predstavlja početnu vrednost indeksa. Opcionalna vrednost, <code>increment</code>, navodi koliko se povećava svaka vrednost indeksa.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje kolone indeksa „Indeks“ u tabelu.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Dodavanje kolone indeksa „Indeks“ u tabelu, počev od vrednosti 10 i sa inkrementom 5.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Ako je data kolona sa listama u tabeli, napravite kopiju reda za svaku vrednost iz odgovarajuće liste.",
        "Documentation.LongDescription": "Ako je dato <code>table</code>, pri čemu je <code>column</code> lista vrednosti, deli listu na red za svaku vrednost. Vrednosti iz drugih kolona se dupliraju u svakom novom redu koji se kreira.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Deljenje kolone liste [Ime] u tabeli.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Prenosi vrednost prethodne ćelije na ćelije bez vrednosti koje se nalaze ispod nje u koloni.",
        "Documentation.LongDescription": "Vraća tabelu iz navedenog <code>table</code>, pri čemu se vrednost prethodne ćelije prenosi na ćelije bez vrednosti koje se nalaze ispod nje u navedenom <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje tabele bez vrednosti u koloni [Mesto] popunjenoj vrednošću iz tabele koja se nalazi iznad njih.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Prenosi vrednost iz ćelije na ćelije bez vrednosti koje se nalaze iznad nje u koloni.",
        "Documentation.LongDescription": "Vraća tabelu iz navedenog <code>table</code>, pri čemu se vrednost naredne ćelije prenosi na ćelije bez vrednosti koje se nalaze iznad nje u navedenom <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje tabele bez vrednosti u koloni [Kolona2] popunjenoj vrednošću iz tabele koja se nalazi ispod njih.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Vraća sve redove iz tabele koji sadrže dati tekst.",
        "Documentation.LongDescription": "Vraća redove iz tabele <code>table</code> koji sadrže tekst <code>text</code>. Ako se tekst ne pronađe, vraća se prazna tabela.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje redova u tabeli koji sadrže „Bane“.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Vraća navedene redove iz prvog prebrojavanja.",
        "Documentation.LongDescription": "Vraća prve redove tabele <code>table</code>, u zavisnosti od vrednosti za <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Ako je <code>countOrCondition</code> broj, biće vraćeno toliko redova (počev od vrha). </li>\r\n    <li> Ako je <code>countOrCondition</code> uslov, biće vraćeni redovi koji zadovoljavaju uslov sve do reda koji ne zadovoljava uslov.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje prva dva reda iz tabele.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Pronalaženje prvih redova pri čemu je [a] > 0 u tabeli.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Vraća tabelu koja je rezultat kombinovanja skupa podeljenih tabela.",
        "Documentation.LongDescription": "Vraća tabelu koja je rezultat kombinovanja skupa podeljenih tabela, <code>partitions</code>. <code>partitionColumn</code> je ime kolone za dodavanje. Tip kolone podrazumevano je <code>any</code>, ali može da ga navede i <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pronađite tip stavke sa liste <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Vraća poslednji navedeni broj redova.",
        "Documentation.LongDescription": "Vraća poslednje redove tabele <code>table</code>, u zavisnosti od vrednosti za <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Ako je <code>countOrCondition</code> broj, biće vraćeno toliko redova počev od položaja (kraj – <code>countOrCondition</code>). </li>\r\n    <li> Ako je <code>countOrCondition</code> uslov, po rastućem redosledu će biti vraćeni redovi koji zadovoljavaju uslov sve do reda koji ne zadovoljava uslov.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje poslednja dva reda iz tabele.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Pronalaženje poslednjih redova pri čemu je [a] > 0 u tabeli.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Vraća tabelu čije sve kolone imaju prefiks u vidu datog teksta.",
        "Documentation.LongDescription": "Vraća tabelu u kojoj sva imena kolona iz navedenog <code>table</code> imaju prefiks u vidu datog teksta, <code>prefix</code>, kao i tačku u obliku <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje prefiksa kolonama sa izrazom „MojaTabela“ u tabeli.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Vraća redove počev od navedenog pomaka.",
        "Documentation.LongDescription": "Vraća redove iz <code>table</code> počev od navedenog <code>offset</code>. Opcionalni parametar, <code>count</code>, navodi koliko redova treba vratiti. Podrazumevano se vraćaju svi redovi koji se nalaze posle pomaka.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje svih redova počev od pomaka 1 u tabeli.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Vraćanje jednog reda počev od pomaka 1 u tabeli.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Uklanja navedene kolone.",
        "Documentation.LongDescription": "Uklanja navedenu <code>columns</code> iz obezbeđene <code>table</code>. \r\n    Ako navedena kolona ne postoji, doći će do greške, osim ako opcionalni parametar „<code>missingField</code>“ ne navodi alternativno ponašanje (na primer, <code>MissingField.UseNull</code> or <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje kolone [Telefon] iz tabele.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Pokušajte da uklonite nepostojeću kolonu iz tabele.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Uklanja sva pojavljivanja navedenih redova iz tabele.",
        "Documentation.LongDescription": "Uklanja sva pojavljivanja navedenog <code>rows</code> iz <code>table</code>.\r\n    Može se navesti opcionalni parametar <code>equationCriteria</code> radi kontrole poređenja redova iz tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje redova kod kojih je [a = 1] iz tabele <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Uklanja navedeni broj redova.",
        "Documentation.LongDescription": "Uklanja <code>count</code> za redove od početka <code>table</code>, počev od navedenog <code>offset</code>. Koristi se podrazumevani broj 1 ako se parametar <code>count</code> ne navede. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje prvog reda iz tabele.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Uklanjanje reda na položaju 1 iz tabele.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Uklanjanje dva reda počev od položaja 1 iz tabele.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Primenjuje preimenovanja u obliku {old, new}.",
        "Documentation.LongDescription": "Obavlja data preimenovanja kolona iz tabele <code>table</code>. Operacija zamene <code>renames</code> se sastoji od liste sa dve vrednosti, starog i novog imena kolone, navedenih u obliku liste.\r\n    Ako kolona ne postoji, vraća se izuzetak osim u slučaju da opcionalni parametar <code>missingField</code> navede alternativu (tj. <code>MissingField.UseNull</code> ili <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zamena imena kolone „BrKupca“ imenom „IDKupca“ u tabeli.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamena imena kolone „BrKupca“ imenom IDkupca“ i imena „BrTelefona“ imenom „Telefon“ u tabeli.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamena imena kolone „NovaKol“ imenom „NovaKolona“ u tabeli i zanemarivanje ako kolona ne postoji.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Vraća tabelu sa kolonama u navedenom redosledu.",
        "Documentation.LongDescription": "Prikazuje tabelu iz unosa <code>table</code>, sa kolonama u redosledu koji navodi <code>columnOrder</code>. Kolone koje nisu navedene na listi neće biti preuređene.\r\n     Ako kolona ne postoji, vraća se izuzetak osim u slučaju da opcionalni parametar <code>missingField</code> navede alternativu (tj. <code>MissingField.UseNull</code> ili <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zamena redosleda kolona [Telefon] i [Ime] u tabeli.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamena redosleda kolona [Telefon] i [Adresa] ili upotreba vrednosti „MissingField.Ignore“ u tabeli. Tabela se ne menja jer kolona [Adresa] ne postoji.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Ponavlja redove tabela navedeni broj puta.",
        "Documentation.LongDescription": "Vraća tabelu sa redovima iz unosa <code>table</code>, koji su ponovljeni navedenih <code>count</code> puta.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ponavljanje redova iz tabele dva puta.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Zamenjuje vrednosti greške u navedenim kolonama odgovarajućom navedenom vrednošću.",
        "Documentation.LongDescription": "Zamenjuje vrednosti greške u navedenim kolonama za <code>table</code> novim vrednostima na listi <code>errorReplacement</code>. Format liste je {{column1, value1}, …}. Može da postoji samo jedna vrednost za zamenu po koloni. Navođenje kolone više puta daje grešku.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zamena vrednosti greške tekstom „world“ u tabeli.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Zamena vrednosti greške u koloni A tekstom „hello“ i u koloni B tekstom „world“ u tabeli.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Zamenjuje ključeve navedene tabele.",
        "Documentation.LongDescription": "Zamenjuje ključeve navedene tabele.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zamenite postojeće ključeve tabele.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Zamenjuje sve navedene redove datim redovima.",
        "Documentation.LongDescription": "Zamenjuje sve navedene redove iz <code>table</code> datim redovima. Redovi koji se zamenjuju i njihove zamene navedeni su u <code>replacements</code>, u obliku {old, new}.\r\n    Može se navesti opcionalni parametar <code>equationCriteria</code> radi kontrole poređenja redova iz tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Zamena redova [a = 1, b = 2] i [a = 2, b = 3] redovima [a = -1, b = -2],[a = -2, b = -3] u tabeli.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Vraća tabelu koja sadrži samo navedene kolone.",
        "Documentation.LongDescription": "Vraća <code>table</code> koji sadrži samo mavedene<code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: Navedena tabela.</li>\r\n       <li><code>columns</code>: Lista kolona iz tabele <code>table</code> koja se vraća. Kolone iz vraćene tabele su u redosledu navedenom u <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(opcionalno)</i> Kako postupiti ako kolona ne postoji.  Primer: <code>MissingField.UseNull</code> or <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Uključite samo kolonu [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Uključite samo kolone [CustomerID] i [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Ako uključena kolona ne postoji, podrazumevani rezultat je greška.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Ako uključena kolona ne postoji, opcija <code>MissingField.UseNull</code> kreira kolonu sa null vrednostima.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Bira redove koji odgovaraju funkciji uslova.",
        "Documentation.LongDescription": "Vraća tabelu sa redovima iz <code>table</code>, koja se podudara sa izborom <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Izaberite redove u tabeli, u kojima su vrednosti u koloni [CustomerID] veće od 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Izaberite redove u tabeli, u kojima imena ne sadrže slovo „B“.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Sortira tabelu pomoću jednog ili više imena kolona i kriterijuma poređenja.",
        "Documentation.LongDescription": "Sortira <code>table</code> pomoću liste sa jednim ili više imena kolona i opcionalnim <code>comparisonCriteria</code> u obliku { { col1, comparisonCriteria }, {col2} }..",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Sortiranje tabele u koloni „IDPorudžbine“.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Sortiranje tabele u koloni „IDPorudžbine“ u opadajućem redosledu.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Sortiranje tabele u koloni „IDKupca“, a zatim „IDPorudžbine“, pri čemu je „IDKupca“ u rastućem redosledu.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transformiše imena kolona pomoću date funkcije.",
        "Documentation.LongDescription": "Transformiše imena kolona pomoću date <code>nameGenerator</code> funkcije. Važeće opcije:\r\n    <div>\r\n      <code>MaxLength</code> navodi maksimalnu dužinu imena novih kolona. Ako data funkcija dovede do dužeg imena kolone, ime će biti skraćeno.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> se koristi za kontrolisanje poređenja prilikom generisanja imena novih kolona. Upoređivači mogu da se koriste za obezbeđivanje poređenja koja ne razlikuju velika i mala slova niti uzimaju u obzir kulturu i lokalni standard.\r\n    </div>\r\n    <div>\r\n      Sledeći ugrađeni upoređivači dostupni su u jeziku formule:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: Koristi se za izvršavanje tačnog poređenja rednih brojeva</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: Koristi se za izvršavanje tačnog poređenja rednih brojeva koje ne razlikuje velika i mala slova</li>\r\n      <li> <code>Comparer.FromCulture</code>: Koristi se za izvršavanje poređenja koje uzima u obzir kulturu</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Uklonite znak <code>#(tab)</code> iz imena kolona",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Transformišite imena kolona da biste generisali imena koja sadrže 6 znakova i ne razlikuju velika i mala slova.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Primenjuje transformacije tipa u obliku { column, type } pomoću određene kulture.",
        "Documentation.LongDescription": "Vraća tabelu iz unosa <code>table</code> primenom operacije transformacije na kolone navedene u parametru <code>typeTransformations</code> (pri čemu je format { column name, type name}), pomoću navedene kulture u opcionalnom parametru <code>culture</code> (na primer, „en-US“).\r\n    Ako kolona ne postoji, vraća se izuzetak.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformacija brojčanih vrednosti iz kolone [a] u tekstualne vrednosti iz tabele <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Transformiše vrednosti jedne ili više kolona.",
        "Documentation.LongDescription": "Transformiše <code>table</code> primenom svake operacije kolone navedene u <code>transformOperations</code> (pri kom je format { column name, transformation } ili { column name, transformation, new column type }).\r\n    Ako je <code>defaultTransformation</code> navedeno, primeniće se na sve kolone koje nisu navedene u <code>transformOperations</code>.\r\n    Ako kolona navedena u <code>transformOperations</code> ne postoji, pojavljuje se izuzetak osim ako opcionalni parametar <code>missingField</code> ne navede alternativu (na primer, <code>MissingField.UseNull</code> ili <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte tekstualne vrednosti u koloni [A] u brojčane vrednosti, a brojčane vrednosti u koloni [B] u tekstualne vrednosti.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Konvertujte numeričke vrednosti u koloni [X] koja nedostaje u tekstualne vrednosti, zanemarujući kolone koje ne postoje.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Konvertujte numeričke vrednosti u koloni [X] koja nedostaje u tekstualne vrednosti, što će podrazumevano dati vrednost „null“ u kolonama koje ne postoje.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Povećajte brojčane vrednosti u koloni [B] i konvertujte ih u tekstualne vrednosti i konvertujte sve ostale kolone u brojeve.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Kreira ili proširuje tabelu sa korisnički definisanim rukovaocima za operatore upita i radnje.",
        "Documentation.LongDescription": "<p>Vraća prikaz <code>table</code> gde se funkcije navedene u <code>handlers</code> koriste kao podrazumevano ponašanje operacije kada se operacija primeni na prikaz.</p>\r\n<p>Ako <code>table</code> nije obezbeđen, sve funkcije rukovaoca su opcionalne. Ako <code>table</code> nije obezbeđen, funkcije rukovaoca <code>GetType</code> i <code>GetRows</code> su obavezne. Ako funkcija rukovaoca nije navedena za operaciju, podrazumevano ponašanje operacije se umesto toga primenjuje na <code>table</code> (osim u slučaju <code>GetExpression</code>).</p>\r\n<p>Funkcije rukovaoca moraju da vrate vrednost koja je semantički jednaka rezultatu primene operacije na <code>table</code> (ili dobijenom prikazu u slučaju <code>GetExpression</code>).</p>\r\n<p>Ako funkcija rukovaoca dovede do greške, podrazumevano ponašanje operacije se primenjuje na prikaz.</p>\r\n<p><code>Table.View</code> može da se koristi za primenu presavijanja na izvor podataka – prevod M upita u upite karakteristične za izvor (na primer, kreiranje T-SQL izraza od M upita).</p>\r\n<p>Pogledajte Power Query prilagođenu dokumentaciju konektora za detaljniji opis <code>Table.View</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Kreirajte osnovni prikaz koji ne zahteva pristup redovima da biste odredili tip ili broj redova.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Enter organization and project names.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (Boards only)",
        "Documentation.LongDescription": "Returns a table of Analytics views offered by Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Import data from Vertica",
        "Documentation.LongDescription": "Returns a table of schemas available on the server named by the <code>server</code> parameter in the database named by the <code>database</code> parameter.\r\nAn optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: A duration which controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n    <li><code>CommandTimeout </code>: A duration which controls how long the server-side query is allowed to run before it is canceled. The default value is driver dependent.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "List the tables in Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Returns a table with report content from Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Makes a call to the given Webtrends reporting endpoint and returns all data as a table.",
        "Documentation.Examples": [
          {
            "Description": "Makes a call to the Webtrends visitors report endpoint for data in the last 30 days",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "A table of visitor data"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Vraća listu Active Directory domena u istoj šumi kao navedeni domen ili domena trenutnog računara ako nije naveden nijedan.",
        "Documentation.LongDescription": "Vraća listu Active Directory domena u istoj šumi kao navedeni domen ili domena trenutnog računara ako nije naveden nijedan.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Vraća rezultat pokretanja osnovnog upita na ADO.NET izvoru podataka.",
        "Documentation.LongDescription": "Vraća rezultat pokretanja <code>query</code> uz nisku veze <code>connectionString</code> pomoću ADO.NET dobavljača <code>providerName</code>. <code>connectionString</code> može da bude tekst ili zapis parova vrednosti svojstava. Vrednosti svojstava mogu da budu tekst ili broj. Opcionalni parametar zapisa, <code>options</code>, može biti naveden radi navođenja dodatnih svojstava. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo je upitu na strani servera dozvoljeno da bude aktivan pre otkazivanja. Podrazumevana vrednost je deset minuta.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logička vrednost (true/false) koja određuje da li se stvaraju opcije niske veze kompatibilne sa SQL serverom za Windows potvrdu identiteta. Podrazumevana vrednost je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Vraća pakete izveštaja u usluzi Adobe Analytics.",
        "Documentation.LongDescription": "Vraća tabelu višedimenzionalnih paketa iz usluge Adobe Analytics. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Logička vrednost (true/false) koja određuje da li će se tabele prikazivati grupisane po imenima šema (podrazumevana vrednost je false).</li>\r\n<li><code>MaxRetryCount</code> : Broj ponovnih pokušaja prilikom prikupljanja rezultata upita. Podrazumevana vrednost je 120.</li>\r\n<li><code>RetryInterval</code> : Vreme koje protekne između ponovnih pokušaja. Podrazumevana vrednost je 1 sekunda.</li>\r\n<li><code>Implementation</code> : Navodi API verziju usluge Adobe Analytics. Važeće vrednosti su: „2.0“. Podrazumevano koristi API verziju 1.4.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Import data from a Hive LLAP",
        "Documentation.LongDescription": "\r\nReturns a list of tables from Hive LLAP specified by the <code>database</code> on the Hive LLAP <code>server</code> using the selected <code>protocol</code>. A port number may be optionally specified with the server, separated by a colon. The Thrift Transport Protocol is an enumerated type with values \"Standard\", \"HTTP\". An optional <code>options</code> parameter may be specified to control the following options:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: A duration which controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n        <li><code>CommandTimeout</code>: A duration which controls how long the server-side query is allowed to run before it is canceled. The default value is driver-dependent.</li>\r\n</ul>\r\nThe <code>options</code> parameter is specified as [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Assuming today is 2017-6-15, get summaries data between 2017-5-1 to 2017-6-15",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Function will return summaries data between 2017-5-1 to 2017-6-15"
          },
          {
            "Description": "Assuming today is 2017-6-15, get summaries data for April 2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Function will return data between 2017-4-1 and 2017-4-30"
          },
          {
            "Description": "Assuming today is 2017-6-15, get summaries data from April 2017 till now.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Function will return data between 2017-4-1 and 2017-6-15"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Enter organization and project names.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Returns a table of OData feeds offered by Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Connect to your Dataverse instance (Dynamics 365 and PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Objedinjuje navedenu tabelu dimenzija sa kontekstom filtera kocke i menja dimenzionu granularnost konteksta filtera proširivanjem navedenog skupa atributa dimenzije.",
        "Documentation.LongDescription": "Objedinjuje navedenu tabelu dimenzija, <code>dimensionSelector</code>, sa kontekstom filtera kocke, <code>cube</code>, i menja dimenzionu granularnost proširivanjem navedenog skupa, <code>attributeNames</code>, atributa dimenzije. Atributi dimenzije se dodaju u tabelarni prikaz sa kolonama pod nazivom <code>newColumnNames</code>, odnosno <code>attributeNames</code> ako nije navedeno.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "U kocku dodaje kolonu koja sadrži rezultate mere primenjene u kontekstu reda za svaki red.",
        "Documentation.LongDescription": "Dodaje kolonu pod nazivom <code>column</code> u <code>cube</code>, gde se nalaze rezultati mere <code>measureSelector</code> primenjene u kontekstu reda za svaki red. Na primenu mere utiču promene dimenzione granularnosti i isecanja. Vrednosti mere će biti izmenjene nakon određenih operacija kocke.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Enter your Dynamics 365 Business Central environment and company.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Returns a table with relevant Dynamics 365 Business Central data. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Enter your Dynamics 365 Business Central environment and company.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Returns a table with relevant Dynamics 365 Business Central data. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Enter your Dynamics 365 Business Central environment and company.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Returns a table with relevant Dynamics 365 Business Central data. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Enter your Dynamics 365 Business Central environment and company.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Returns a table with relevant Dynamics 365 Business Central data. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Vraća sadržaj trenutne Excel radne sveske.",
        "Documentation.LongDescription": "Vraća sadržaj trenutne Excel radne sveske. Vraća tabele, imenovane opsege i dinamičke nizove. Za razliku od funkcije <code>Excel.Workbook</code>, ona ne vraća listove.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Vraća sadržaj iz Microsoft Exchange naloga.",
        "Documentation.LongDescription": "Vraća tabelu sadržaja sa Microsoft Exchange naloga <code>mailboxAddress</code>. Ako se <code>mailboxAddress</code> ne navede, koristiće se podrazumevani nalog za akreditiv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Warehouse",
        "Documentation.Caption": "Warehouse",
        "Documentation.Description": "Imports data from Warehouse",
        "Documentation.LongDescription": "Imports data from Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Vraća Google Analytics naloge.",
        "Documentation.LongDescription": "Vraća Google Analytics naloge kojima se može pristupiti iz trenutnog akreditiva.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Import data from a Google BigQuery database.",
        "Documentation.LongDescription": "\r\n      Returns a table listing the available projects in Google BigQuery. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: A duration which controls how long to wait before abandoning an attempt to make a connection to the server. The default value is ODBC Connection Timeout value.</li>\r\n        <li><code>CommandTimeout</code>: A duration which controls how long the server-side query is allowed to run before it is canceled.</li>\r\n        <li><code>BillingProject</code>: Billing project id. The default value is the first available project.</li>\r\n        <li><code>UseStorageApi</code>: Specifies whether to use the BigQuery Storage API for large result sets. The default value is true to use Storage API. Set to false to not use Storage API</li>\r\n      </ul>\r\n    The record parameter is specified as [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "List the available projects in Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Import data from a Lakehouse",
        "Documentation.Description": "Import data from a Lakehouse",
        "Documentation.LongDescription": "Connect to all the Lakehouses you have access to, and choose the entities you'd like to use"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Returns a table with key MailChimp data.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Returns a table with key MailChimp data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with key MailChimp data.",
            "Code": "MailChimp.Tables()",
            "Result": "A table with key MailChimp data."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Returns a table with lead activities.",
        "Documentation.LongDescription": "Makes a call to the Marketo REST API endpoint at <code>url</code>/rest/v1/activities.json. All activities in list <code>activityIds</code> that have occurred since <code>startTime</code> are returned.",
        "Documentation.Examples": [
          {
            "Description": "Pulls a table of \"Visit Webpage\" activities since November 1, 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "A table with details of all \"Visit Webpage\" activities since November 1"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI dataflows (Legacy)",
        "Documentation.Caption": "Import data from a Power BI dataflow",
        "Documentation.LongDescription": "Connect to all the Power BI dataflows you have access to, and choose the entities you’d like to use."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Datamarts",
        "Documentation.Caption": "Datamarts",
        "Documentation.Description": "Imports data from Datamarts",
        "Documentation.LongDescription": "Imports data from Datamarts"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Dataflows",
        "Documentation.Caption": "Import data from a dataflow",
        "Documentation.Description": "Import data from a dataflow",
        "Documentation.LongDescription": "Connect to all the dataflows you have access to, and choose the entities you'd like to use"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Import data from QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Returns a table listing the available tables in QuickBooks Online. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: A duration which controls how long to wait before abandoning an attempt to make a connection to the server.</li>\r\n            <li><code>CommandTimeout</code>: A duration which controls how long the server-side query is allowed to run before it is canceled.</li>\r\n          </ul>\r\n        The record parameter is specified as [option1 = value1, option2 = value2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Vraća objekte iz Salesforce naloga.",
        "Documentation.LongDescription": "Vraća objekte u Salesforce nalog obezbeđen u akreditivima. Nalog će biti povezan putem obezbeđenog okruženja <code>loginUrl</code>. Ako se ne obezbedi nijedno okruženje, nalog će se povezati sa proizvodnjom (https://login.salesforce.com). Opcionalni parametar zapisa, <code>options</code>, može da se obezbedi da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logička vrednost (true/false) koja određuje da li će se generisati svojstva navigacije za vraćene vrednosti (podrazumevana vrednost je true).</li>\r\n<li><code>ApiVersion</code> : Verzija Salesforce API-ja koja se koristi za ovaj upit. Kada verzija API-ja nije navedena, koristi se 29.0.</li>\r\n<li><code>Timeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od zahteva upućenog serveru. Podrazumevana vrednost zavisi od izvora.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Vraća izveštaje iz Salesforce naloga.",
        "Documentation.LongDescription": "Vraća izveštaje u Salesforce nalogu obezbeđenom u akreditivima. Nalog će biti povezan putem obezbeđenog okruženja <code>loginUrl</code>. Ako se ne obezbedi nijedno okruženje, nalog će se povezati sa proizvodnjom (https://login.salesforce.com). Opcionalni parametar zapisa, <code>options</code>, može da se obezbedi da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Verzija Salesforce API-ja koja se koristi za ovaj upit. Kada verzija API-ja nije navedena, koristi se 29.0.</li>\r\n<li><code>Timeout</code> : Vremenski period pomoću kojeg se određuje koliko dugo treba čekati pre odustajanja od zahteva upućenog serveru. Podrazumevana vrednost zavisi od izvora.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Vraća InfoCube elemente i upite u SAP Business Warehouse sistemu, grupisane prema kriterijumu InfoArea.",
        "Documentation.LongDescription": "Vraća tabelu InfoCube elemenata i upita grupisanih prema kriterijumu InfoArea iz SAP Business Warehouse instance na serveru <code>server</code> sa brojem sistema <code>systemNumberOrSystemId</code> i ID-om klijenta <code>clientId</code>. Opcionalni parametar zapisa <code>optionsOrLogonGroup</code> može da se navede za kontrolisanje sledećih opcija:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Returns a table of sheets, reports, folders, and workspaces from the Smartsheet API",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Returns a nested table of available sheets, reports, folders, and workspaces from the Smartsheet API.",
        "Documentation.Examples": [
          {
            "Description": "Returns sheets, folders, reports, and workspaces available at the top level of the Smartsheet hierarchy",
            "Code": "Smartsheet.Tables()",
            "Result": "A table of folders, reports, and workspaces from the top level of the Smartsheet hierarchy"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Returns a table of available metrics from the SparkPost API v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "This function can be used to retrieve data from a particular \"Metrics\" endpoint of the SparkPost API v1. When refreshing these tables or making calls to the SparkPost API using this connector, keep in mind that the SparkPost API has a strict API rate limit. If you see a 429 status code being returned from the SparkPost server you have hit the rate limit and will need to wait a few moments before making more calls. When choosing a value for the Number of days parameter, note that the API only stores 6 months worth of data.",
        "Documentation.Examples": [
          {
            "Description": "Retrieves count_sent and count_rejected deliverability metrics for all campaign_ids aggregated over the last three days. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Makes a call to the Stripe API.",
        "Documentation.LongDescription": "Makes a call to the Stripe API at https://api.stripe.com/v1/<code>method</code>, with record <code>additionalParameters</code> passed as additional parameters and list <code>ColumnNames</code> of expected column names. Stripe Version 2015-10-16 is used.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with events created after November 1, 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "A table with the specified events for the current Stripe account"
          },
          {
            "Description": "Returns a table with all SKUs",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "A table with all SKUs for the current Stripe account"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Returns a table listing the available Stripe tables and functions.",
        "Documentation.LongDescription": "Returns a table listing the available Stripe tables and functions."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Synapse Analytics workspace",
        "Documentation.Caption": "Azure Synapse Analytics workspace",
        "Documentation.LongDescription": "PQ Connector for Azure Synapse Analytics workspace",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Dodaje kolonu sa navedenim imenom. Vrednost se izračunava pomoću navedene funkcije izbora, pri čemu se svaki red smatra unosom.",
        "Documentation.LongDescription": "Dodaje kolonu <code>newColumnName</code> u tabelu <code>table</code>. Vrednosti za kolonu se izračunavaju pomoću navedene funkcije izbora <code>columnGenerator</code>, pri čemu se svaki red smatra unosom.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodajte kolonu sa brojem pod imenom „UkupnaCena“ u tabelu, a svaka vrednost je zbir kolona [Cena] i [Isporuka].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Dodaje nove kolone sa reprezentativnim vrednostima dobijenim približnim grupisanjem vrednosti navedene kolone u tabeli.",
        "Documentation.LongDescription": "Dodaje novu kolonu <code>newColumnName</code> u <code>table</code> sa reprezentativnim vrednostima <code>columnName</code>. Reprezentativne vrednosti se dobijaju približnim podudaranjem vrednosti iz <code>columnName</code>, za svaki red.\r\n    <p>Može da se uklјuči opcionalni skup <code>options</code> da bi se naveo način poređenja kolona klјuča. Opcije uklјučuju: \r\n    <ul>\r\n<li><code>Culture</code> : Omogućava grupisanje zapisa na osnovu pravila specifičnih za kulturu. To može da bude bilo koje važeće ime kulture. Na primer, opcija kulture „ja-JP“ grupiše zapise na osnovu japanske kulture. Podrazumevana vrednost je „“, koja grupiše na osnovu nepromenlјive engleske kulture.</li>\r\n<li><code>IgnoreCase</code> : Logička (true/false) vrednost koja omogućava grupisanje klјuča koje ne razlikuje mala i velika slova. Na primer, kada se podesi vrednost „true“, „Grožđe“ se grupiše sa „grožđe“. Podrazumevana vrednost je „true“.</li>\r\n<li><code>IgnoreSpace</code> : Logička (true/false) vrednost koja omogućava kombinovanje delova teksta kako bi se pronašle grupe. Na primer, kada se podesi vrednost „true“, „Gro žđe“ se grupiše sa „Grožđe“. Podrazumevana vrednost je „true“.</li>\r\n<li><code>SimilarityColumnName</code> : Ime za kolonu koja prikazuje sličnost između ulazne vrednosti i reprezentativne vrednosti za taj unos. Podrazumevana opcija je bez vrednosti i u tom slučaju neće biti dodata nova kolona za sličnosti.</li>\r\n<li><code>Threshold</code> : Broj između 0,00 i 1,00 koji navodi ocenu sličnosti po kojoj će se dve vrednosti grupisati.\r\n    Na primer, „Grožđe“ i „Grože“ (nedostaje slovo „đ“) grupišu se zajedno samo ako je ova opcija podešena na manje od 0,90.\r\n    Granična vrednost od 1,00 dozvoljava samo potpuna podudaranja.\r\n    (Imajte u vidu da približno „Potpuno podudaranje“ može da zanemaruje razlike kao što su veličina slova, redosled reči i interpunkcije.)\r\n    Podrazumevana vrednost je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela koja omogućava grupisanje zapisa na osnovu mapiranja prilagođene vrednosti. Trebalo bi da sadrži kolone „Iz“ i „U“. Na primer, „Grožđe se grupiše sa „Suvo grožđe“ ako je data tabela transformacije sa kolonom „Iz“ koja sadrži „Grožđe“ i kolonom „U“ koja sadrži „Suvo grožđe“. Imajte na umu da se transformacija primenjuje na sva pojavlјivanja teksta u tabeli transformacije. Na osnovu gorenavedene tabele transformacije i „Grožđe je slatko“ grupisaće se sa „Suvo grožđe je slatko“.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pronađite reprezentativne vrednosti za lokaciju zaposlenih.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Obavlja spajanje tabela na navedenim kolonama i daje rezultat spajanja u novoj koloni.",
        "Documentation.LongDescription": "Spaja redove iz <code>table1</code> sa redovima iz <code>table2</code> na osnovu jednakosti vrednosti iz kolona ključa koje bira <code>key1</code> (za <code>table1</code>) i <code>key2</code> (za <code>table2</code>). Rezultati se unose u kolonu <code>newColumnName</code>.\r\nOva funkcija se ponaša slično kao Table.Join sa JoinKind iz LeftOuter, osim što se rezultati spajanja predstavljaju ugnežđeno, a ne ravno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje kolone za spajanje u ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) po imenu „cena/zalihe“ iz tabele ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) spojene na [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Dodaje ključ u tabelu.",
        "Documentation.LongDescription": "Dodaje ključ u tabelu <code>table</code>, gde je <code>columns</code> lista imena kolona koja definiše ključ, a <code>isPrimary</code> navodi da li je ključ primaran.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodajte primarni ključ sa jednom kolonom u tabelu.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Dodaje kolonu sa rangiranjem nekih drugih kolona.",
        "Documentation.LongDescription": "Dodaje kolonu sa imenom <code>newColumnName</code> u <code>table</code> sa rangiranjem nekih drugih kolona koje opisuje <code>comparisonCriteria</code>.\r\nOpciju RankKind u <code>options</code> napredni korisnici mogu da koriste za izbor specifičnijih metoda rangiranja.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Dodajte kolonu sa nazivom „RevenueRank“ u tabelu koja rangira kolonu „Prihod“ od najvišeg do najnižeg.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Prikuplja kolonu sa tabelama u više kolona u okviru tabele koja ih sadrži.",
        "Documentation.LongDescription": "Prikuplja tabele iz <code>table</code>[<code>column</code>] u više kolona koje sadrže agregatne vrednosti za tabele. <code>aggregations</code> se koristi za navođenje kolona koje sadrže tabele za agregaciju, agregatnih funkcija koje se primenjuju na tabele radi generisanja njihovih vrednosti, kao i imena agregatnih kolona koje treba kreirati.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Prikupljanje kolona tabele u <code>[t]</code> u okviru tabele <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> u zbir <code>[t.a]</code>, minimum i maksimum <code>[t.b]</code>, kao i broj vrednosti u <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Zadržava početni pomak, a zatim naizmenično uzima i preskače sledeće redove.",
        "Documentation.LongDescription": "Zadržava početni pomak, a zatim naizmenično uzima i preskače sledeće redove.\r\n    <ul>\r\n       <li><code>table</code>: Ulazna tabela.</li>\r\n       <li><code>offset</code>: Broj redova koji se zadržavaju pre nego što počnu ponavljanja.</li>\r\n       <li><code>skip</code>: Broj redova koji se uklanjaju iz svakog ponavljanja.</li>\r\n       <li><code>take</code>: Broj redova koji se zadržavaju u svakom ponavljanju.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje tabele od tabele koja, počev od prvog reda, preskače 1 vrednost, a zatim zadržava 1 vrednost.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Kombinuje navedene kolone u novu kolonu pomoću navedene funkcije kombinovanja.",
        "Documentation.LongDescription": "Kombinuje navedene kolone u novu kolonu pomoću navedene funkcije kombinovanja.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kombinujte prezime i imena u novu kolonu, razdvojene zarezom.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Kombinuje navedene kolone u novu kolonu sa vrednostima zapisa, pri čemu svaki zapis sadrži imena i vrednosti polja koji odgovaraju imenima i vrednostima kolona koje su kombinovane.",
        "Documentation.LongDescription": "Kombinuje navedene kolone za <code>table</code> u novu kolonu sa zapisima pod imenom <code>newColumnName</code>, pri čemu svaki zapis ima imena i vrednosti polja koja odgovaraju imenima i vrednostima kolona koje se kombinuju. Ako se za <code>options</code> navede zapis, mogu se navesti sledeće opcije:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: Kada se navede kao tekst, pokazuje da dato ime kolone treba tretirati kao ime za prikaz zapisa. To ne mora da bude neka od kolona iz samog zapisa.</li>\r\n     <li> <code>TypeName</code>: Kada se navede kao tekst, navodi ime logičkog tipa za dobijeni zapis, koje se može koristiti tokom učitavanja podataka za podsticanje ponašanja okruženja koje obavlja učitavanje.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Duplira kolonu sa navedenim imenom. Vrednosti i tip se kopiraju iz izvorne kolone.",
        "Documentation.LongDescription": "Dupliranje kolone <code>columnName</code> u okviru tabele <code>table</code>. Vrednosti i tip za kolonu <code>newColumnName</code> se kopiraju iz kolone <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Dupliranje kolone „a“ u kolonu „kopirana kolona“ u okviru tabele <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Proširuje kolonu zapisa u kolone sa svakom vrednošću.",
        "Documentation.LongDescription": "Ako je dato <code>column</code> zapisa u unosu <code>table</code>, kreira tabelu sa kolonom za svako polje u zapisu. Opcionalno, <code>newColumnNames</code> može da bude navedeno da bi imena kolona u novoj tabeli sigurno bila jedinstvena.\r\n    <ul>\r\n        <li><code>table</code>: Prvobitna tabela sa kolonom zapisa koja se proširuje. </li>\r\n        <li><code>column</code>: Kolona koja se proširuje.</li>\r\n        <li><code>fieldNames</code>: Lista polja koja se proširuju u kolone u tabeli.</li>\r\n        <li><code>newColumnNames</code>: Lista sa imenima kolona koja treba dati novim kolonama. Imena novih kolona ne mogu da dupliraju nijednu kolonu iz nove tabele.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Proširenje kolone [a] u tabeli <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> u 3 kolone: „aa“, „bb“ i „cc“.",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Proširuje kolonu sa zapisima ili kolonu sa tabelama u više kolona u okviru tabele koja ih sadrži.",
        "Documentation.LongDescription": "Proširuje tabele iz <code>table</code>[<code>column</code>] u više redova i kolona. <code>columnNames</code> se koristi za izbor kolona za proširenje iz unutrašnje tabele. Navođenje <code>newColumnNames</code> kako bi se izbegle neusaglašenosti između postojećih i novih kolona.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Proširenje kolona tabele u <code>[a]</code> u okviru tabele <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> na 3 kolone: <code>[t.a]</code>, <code>[t.b]</code> i <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Grupišite redove u tabeli na osnovu približnog podudaranja ključeva.",
        "Documentation.LongDescription": "Grupiše redove iz <code>table</code> približnim podudaranjem vrednosti u navedenoj koloni, <code>key</code>, za svaki red.\r\n    Za svaku grupu se konstruiše zapis koji sadrži kolone klјuča (i njihove vrednosti) kao i zbirne kolone navedene po <code>aggregatedColumns</code>.\r\n    Ova funkcija ne može da garantuje vraćanje fiksnog redosleda redova.\r\n    <p>opcionalni skup <code>options</code> može da se uklјuči da bi se naveo način poređenja kolona klјuča. Opcije obuhvataju: \r\n    <ul>\r\n<li><code>Culture</code> : Omogućava grupisanje zapisa na osnovu pravila specifičnih za kulturu. To može da bude bilo koje važeće ime kulture. Na primer, opcija kulture „ja-JP“ grupiše zapise na osnovu japanske kulture. Podrazumevana vrednost je „“, koja grupiše na osnovu nepromenlјive engleske kulture.</li>\r\n<li><code>IgnoreCase</code> : Logička (true/false) vrednost koja omogućava grupisanje klјuča koje ne razlikuje mala i velika slova. Na primer, kada se podesi vrednost „true“, „Grožđe“ se grupiše sa „grožđe“. Podrazumevana vrednost je „true“.</li>\r\n<li><code>IgnoreSpace</code> : Logička (true/false) vrednost koja omogućava kombinovanje delova teksta kako bi se pronašle grupe. Na primer, kada se podesi vrednost „true“, „Gro žđe“ se grupiše sa „Grožđe“. Podrazumevana vrednost je „true“.</li>\r\n<li><code>SimilarityColumnName</code> : Ime za kolonu koja prikazuje sličnost između ulazne vrednosti i reprezentativne vrednosti za taj unos. Podrazumevana opcija je bez vrednosti i u tom slučaju neće biti dodata nova kolona za sličnosti.</li>\r\n<li><code>Threshold</code> : Broj između 0,00 i 1,00 koji navodi ocenu sličnosti po kojoj će se dve vrednosti grupisati.\r\n    Na primer, „Grožđe“ i „Grože“ (nedostaje slovo „đ“) grupišu se zajedno samo ako je ova opcija podešena na manje od 0,90.\r\n    Granična vrednost od 1,00 dozvoljava samo potpuna podudaranja.\r\n    (Imajte u vidu da približno „Potpuno podudaranje“ može da zanemaruje razlike kao što su veličina slova, redosled reči i interpunkcije.)\r\n    Podrazumevana vrednost je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela koja omogućava grupisanje zapisa na osnovu mapiranja prilagođene vrednosti. Trebalo bi da sadrži kolone „Iz“ i „U“. Na primer, „Grožđe se grupiše sa „Suvo grožđe“ ako je data tabela transformacije sa kolonom „Iz“ koja sadrži „Grožđe“ i kolonom „U“ koja sadrži „Suvo grožđe“. Imajte na umu da se transformacija primenjuje na sva pojavlјivanja teksta u tabeli transformacije. Na osnovu gorenavedene tabele transformacije i „Grožđe je slatko“ grupisaće se sa „Suvo grožđe je slatko“.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Grupišite tabelu dodavanjem agregatne kolone [Count] koja sadrži broj zaposlenih na svakoj lokaciji („each Table.RowCount(_))“).",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Spaja redove iz dveju tabela koji se približno podudaraju na osnovu datih ključeva.",
        "Documentation.LongDescription": "<p>Povezuje redove iz <code>table1</code> sa redovima iz <code>table2</code> na osnovu približnog podudaranja vrednosti kolona klјuča koje bira <code>key1</code> (za <code>table1</code>) i <code>key2</code> (za <code>table2</code>).</p>\r\n<p>Približno podudaranje je poređenje koje se zasniva na sličnosti teksta, a ne istovetnosti teksta.</p>\r\n<p>Podrazumevano se vrši unutrašnje spajanje, ali može se uklјučiti opcionalno <code>joinKind</code> da bi se naveo tip spajanja. Opcije obuhvataju:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Može se uklјučiti opcionalni skup <code>joinOptions</code> da bi se navelo kako treba porediti kolone klјuča. Opcije obuhvataju:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Broj između 1 i 8 koji navodi broj paralelnih niti koje se koriste za približno podudaranje. Podrazumevana vrednost je 1.</li>\r\n<li><code>Culture</code> : Omogućava podudaranje zapisa na osnovu pravila specifičnih za kulturu. To može da bude bilo koje važeće ime kulture. Na primer, opcija kulture „ja-JP“ podudara zapise na osnovu japanske kulture. Podrazumevana vrednost je „“, koja podudara na osnovu nepromenlјive engleske kulture.</li>\r\n<li><code>IgnoreCase</code> : Logička (true/false) vrednost koja omogućava podudaranje klјuča koje ne razlikuje mala i velika slova. Na primer, kada se podesi vrednost „true“, „Grožđe“ se podudara sa „grožđe“. Podrazumevana vrednost je „true“.</li>\r\n<li><code>IgnoreSpace</code> : Logička (true/false) vrednost koja omogućava kombinovanje delova teksta kako bi se pronašla podudaranja. Na primer, kada se podesi vrednost „true“, „Gro žđe“ se podudara sa „Grožđe“. Podrazumevana vrednost je „true“.</li>\r\n<li><code>NumberOfMatches</code> : Ceo broj koji navodi maksimalan broj redova koji se podudaraju koji se može vratiti za svaki red ulaza. Na primer, vrednost 1 vraća najviše jedan red koji se podudara za svaki red ulaza. Ako ova opcija nije navedena, vraćaju se svi redovi koji se podudaraju.</li>\r\n<li><code>SimilarityColumnName</code> : Ime za kolonu koja prikazuje sličnost između ulazne vrednosti i reprezentativne vrednosti za taj unos. Podrazumevana opcija je bez vrednosti i u tom slučaju neće biti dodata nova kolona za sličnosti.</li>\r\n<li><code>Threshold</code> : Broj između 0,00 i 1,00 koji navodi ocenu sličnosti po kojoj će se dve vrednosti podudarati.\r\n    Na primer, „Grožđe“ i „Grože“ (nedostaje slovo „đ“) podudaraju se samo ako je ova opcija podešena na manje od 0,90.\r\n    Granična vrednost od 1,00 dozvoljava samo potpuna podudaranja.\r\n    (Imajte u vidu da približno „Potpuno podudaranje“ može da zanemaruje razlike kao što su veličina slova, redosled reči i interpunkcije.)\r\n    Podrazumevana vrednost je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela koja omogućava podudaranje zapisa na osnovu mapiranja prilagođene vrednosti. Trebalo bi da sadrži kolone „Iz“ i „U“. Na primer, „Grožđe se podudara sa „Suvo grožđe“ ako je data tabela transformacije sa kolonom „Iz“ koja sadrži „Grožđe“ i kolonom „U“ koja sadrži „Suvo grožđe“. Imajte na umu da se transformacija primenjuje na sva pojavlјivanja teksta u tabeli transformacije. Na osnovu gorenavedene tabele transformacije i „Grožđe je slatko“ podudariće se sa „Suvo grožđe je slatko“.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Levo unutrašnje spajanje približnih za dve tabele zasnovane na [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Obavlja približno spajanje tabela na navedenim kolonama i daje rezultat spajanja u novoj koloni.",
        "Documentation.LongDescription": "<p>Povezuje redove iz <code>table1</code> sa redovima iz <code>table2</code> na osnovu približnog podudaranja vrednosti kolona ključa koje bira <code>key1</code> (za <code>table1</code>) i <code>key2</code> (za <code>table2</code>). Rezultati se vraćaju u novoj koloni pod imenom <code>newColumnName</code>.</p>\r\n<p>Približno podudaranje je poređenje zasnovano na sličnosti, a ne na jednakosti teksta.</p>\r\n<p>Opcionalni <code>joinKind</code> navodi vrstu spajanja koju treba izvršiti. Podrazumevano se izvršava levo spoljno spajanje ako <code>joinKind</code> nije naveden. Opcije su:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Opcionalni skup <code>joinOptions</code> može biti uključen da bi se navelo kako treba porediti kolone ključa. Opcije su:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Broj između 1 i 8 koji navodi broj paralelnih niti koje se koriste za približno podudaranje. Podrazumevana vrednost je 1.</li>\r\n<li><code>Culture</code> : Omogućava podudaranje zapisa na osnovu pravila specifičnih za kulturu. To može da bude bilo koje važeće ime kulture. Na primer, opcija kulture „ja-JP“ podudara zapise na osnovu japanske kulture. Podrazumevana vrednost je „“, koja podudara na osnovu nepromenlјive engleske kulture.</li>\r\n<li><code>IgnoreCase</code> : Logička (true/false) vrednost koja omogućava podudaranje klјuča koje ne razlikuje mala i velika slova. Na primer, kada se podesi vrednost „true“, „Grožđe“ se podudara sa „grožđe“. Podrazumevana vrednost je „true“.</li>\r\n<li><code>IgnoreSpace</code> : Logička (true/false) vrednost koja omogućava kombinovanje delova teksta kako bi se pronašla podudaranja. Na primer, kada se podesi vrednost „true“, „Gro žđe“ se podudara sa „Grožđe“. Podrazumevana vrednost je „true“.</li>\r\n<li><code>NumberOfMatches</code> : Ceo broj koji navodi maksimalan broj redova koji se podudaraju koji se može vratiti za svaki red ulaza. Na primer, vrednost 1 vraća najviše jedan red koji se podudara za svaki red ulaza. Ako ova opcija nije navedena, vraćaju se svi redovi koji se podudaraju.</li>\r\n<li><code>SimilarityColumnName</code> : Ime za kolonu koja prikazuje sličnost između ulazne vrednosti i reprezentativne vrednosti za taj unos. Podrazumevana opcija je bez vrednosti i u tom slučaju neće biti dodata nova kolona za sličnosti.</li>\r\n<li><code>Threshold</code> : Broj između 0,00 i 1,00 koji navodi ocenu sličnosti po kojoj će se dve vrednosti podudarati.\r\n    Na primer, „Grožđe“ i „Grože“ (nedostaje slovo „đ“) podudaraju se samo ako je ova opcija podešena na manje od 0,90.\r\n    Granična vrednost od 1,00 dozvoljava samo potpuna podudaranja.\r\n    (Imajte u vidu da približno „Potpuno podudaranje“ može da zanemaruje razlike kao što su veličina slova, redosled reči i interpunkcije.)\r\n    Podrazumevana vrednost je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela koja omogućava podudaranje zapisa na osnovu mapiranja prilagođene vrednosti. Trebalo bi da sadrži kolone „Iz“ i „U“. Na primer, „Grožđe se podudara sa „Suvo grožđe“ ako je data tabela transformacije sa kolonom „Iz“ koja sadrži „Grožđe“ i kolonom „U“ koja sadrži „Suvo grožđe“. Imajte na umu da se transformacija primenjuje na sva pojavlјivanja teksta u tabeli transformacije. Na osnovu gorenavedene tabele transformacije i „Grožđe je slatko“ podudariće se sa „Suvo grožđe je slatko“.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Levo unutrašnje spajanje približnih za dve tabele zasnovane na [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Grupiše redove iz tabele koji imaju isti ključ.",
        "Documentation.LongDescription": "Grupiše redove <code>table</code> prema ključnim kolonama definisanim u <code>key</code>. <code>key</code> može biti ime jedne kolone ili lista imena kolona.\r\n    Za svaku grupu se pravi zapis koji sadrži ključne kolone (i njihove vrednosti), zajedno sa svim objedinjenim kolonama koje određuje <code>aggregatedColumns</code>.\r\n Opcionalno, mogu se takođe navesti <code>groupKind</code> i <code>comparer</code>.<br>\r\n    <br>\r\n    Ako su podaci već sortirani po ključnim kolonama, onda je moguće obezbediti <code>groupKind</code> usluge GroupKind. Može se obezbedti lokalno. Ovo može da poboljša performanse grupisanja u određenim slučajevima,\r\n    jer se pretpostavlja da su svi redovi sa datim skupom ključnih vrednosti susedni.<br>\r\n    <br>\r\n    Prilikom prosleđivanja <code>comparer</code>, imajte na umu da ako različite ključeve tretira kao jednake, red će možda biti stavljen u grupu čiji se ključevi razlikuju od njegovog.<br>\r\n    <br>\r\n    Ova funkcija ne garantuje redosled redova koje vraća.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Grupisanje tabele dodavanjem agregatne kolone [ukupno] koja sadrži zbir cena (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Umeće listu redova u tabelu na navedenom položaju.",
        "Documentation.LongDescription": "Vraća tabelu sa listom redova, <code>rows</code>, umetnutu u <code>table</code> na datom položaju, <code>offset</code>. Svaka kolona iz reda koji se umeće mora se podudarati sa tipovima kolona u tabeli.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Umetanje reda u tabelu na položaju 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Umetanje dva reda u tabelu na položaju 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Spaja redove iz dveju tabela koji se podudaraju na osnovu datih ključeva.",
        "Documentation.LongDescription": "<p>Povezuje redove od <code>table1</code> sa redovima od <code>table2</code> na osnovu jednakosti vrednosti kolona sa ključem koje su izabrane od <code>key1</code> (za <code>table1</code>) i <code>key2</code> (za <code>table2</code>).</p>\r\n<p> Podrazumevano, unutrašnje spajanje se izvršava, ali opcionalno <code>joinKind</code> može biti uključeno da bi se naveo tip spajanja. Opcije uključuju:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Opcionalni skup <code>keyEqualityComparers</code> može biti uključen da bi se navelo kako da uporedite kolone ključa. Ovaj parametar je trenutno namenjen samo za internu upotrebu.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Spojite dve tabele pomoću jedne kolone ključa.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Spojite dve tabele koje imaju neusaglašene nazive kolona pomoću više kolona ključa.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Vraća najveće redove na osnovu datih kriterijuma.",
        "Documentation.LongDescription": "Daje najveće redove u <code>table</code>, na osnovu <code>comparisonCriteria</code>.\r\n    Nakon sortiranja redova mora se navesti parametar <code>countOrCondition</code> da bi se rezultat dodatno filtrirao. Imajte u vidu da algoritam sortiranja ne može da garantuje fiksni sortirani rezultat. Parametar <code>countOrCondition</code> može da ima više oblika:\r\n    <ul>\r\n        <li> Ako se navede broj, vraća se lista od najviše <code>countOrCondition</code> stavki po rastućem redosledu. </li>\r\n        <li> Ako se navede uslov, vraća se lista stavki koje inicijalno zadovoljavaju uslov. Ako neka stavka ne zadovolji uslov, kasnije stavke se ne uzimaju u obzir. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje reda sa najvećom vrednošću u koloni [a] uz uslov [a] > 0 u tabeli. Redovi se sortiraju pre nego što se primeni filter.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Pronalaženje reda sa najvećom vrednošću u koloni [a] uz uslov [b] > 0 u tabeli. Redovi se sortiraju pre nego što se primeni filter.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Vraća najmanje redove na osnovu datih kriterijuma.",
        "Documentation.LongDescription": "Daje najmanje redove u <code>table</code>, na osnovu <code>comparisonCriteria</code>. Nakon sortiranja redova se mora navesti parametar <code>countOrCondition</code> da bi se rezultat dodatno filtrirao. Imajte u vidu da algoritam sortiranja ne može da garantuje fiksni sortirani rezultat. Parametar <code>countOrCondition</code> može da ima više oblika:\r\n    <ul>\r\n        <li> Ako se navede broj, vraća se lista od najviše <code>countOrCondition</code> stavki po rastućem redosledu. </li>\r\n        <li> Ako se navede uslov, vraća se lista stavki koje inicijalno zadovoljavaju uslov. Ako neka stavka ne zadovolji uslov, kasnije stavke se ne uzimaju u obzir. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje reda sa najmanjom vrednošću u koloni [a] uz uslov [a] < 3 u tabeli. Redovi se sortiraju pre nego što se primeni filter.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Pronalaženje reda sa najmanjom vrednošću u koloni [a] uz uslov [b] < 0 u tabeli. Redovi se sortiraju pre nego što se primeni filter.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Obavlja spajanje tabela na navedenim kolonama i daje rezultat spajanja u novoj koloni.",
        "Documentation.LongDescription": "<p>Povezuje redove iz <code>table1</code> sa redovima iz <code>table2</code> na osnovu jednakosti vrednosti kolona ključa koje bira <code>key1</code> (za <code>table1</code>) i <code>key2</code> (za <code>table2</code>). Rezultati se unose u kolonu pod imenom <code>newColumnName</code>.</p>\r\n<p>Opcionalni <code>joinKind</code> navodi vrstu spajanja koje se obavlja. Podrazumevano se obavlja levo spoljno spajanje ako nije naveden <code>joinKind</code>.</p>\r\n<p>Možda će biti uključen opcionalni skup <code>keyEqualityComparers</code> da bi se navelo kako porediti kolone ključa. Ova funkcija je trenutno predviđena samo za internu upotrebu.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Spojite dve tabele pomoću jedne kolone ključa.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Na osnovu para kolona koje predstavljaju parove atribut-vrednost, rotira podatke iz kolone sa atributima u zaglavlja kolona.",
        "Documentation.LongDescription": "Na osnovu para kolona koje predstavljaju parove atribut-vrednost, rotira podatke iz kolone sa atributima u zaglavlja kolona.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Uzimanje vrednosti „a“, „b“ i „c“ iz kolone sa atributima u tabeli <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> i izvođenje u zasebnu kolonu.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Uzimanje vrednosti „a“, „b“ i „c“ iz kolone sa atributima u tabeli <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> i izvođenje u zasebnu kolonu.  Sa atributom „c“ za ključ „x“ je povezano više vrednosti, tako da treba koristiti funkciju List.Max da bi se neusaglašenost razrešila.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Zamenjuje navedeni opseg redova datim redovima.",
        "Documentation.LongDescription": "Zamenjuje navedeni broj redova, <code>count</code>, u unosu <code>table</code> navedenim <code>rows</code>, posle <code>offset</code>. Parametar <code>rows</code> je lista zapisa.\r\n    <ul>\r\n       <li><code>table</code>: Tabela u kojoj se vrši zamena.</li>\r\n       <li><code>offset</code>: Broj redova koji se preskače pre nego što se izvrši zamena.</li>\r\n       <li><code>count</code>: Broj redova koji se menja.</li>\r\n       <li><code>rows</code>: Lista zapisa redova koja se umeće u <code>table</code> na lokaciji koju navodi <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Počev od položaja 1, zamena 3 reda.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Zamenjuje jednu vrednost iz navedenih kolona drugom.",
        "Documentation.LongDescription": "Zamenjuje <code>oldValue</code> sa <code>newValue</code> u navedenim kolonama u <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zamenite tekst „Zbogom“ sa „Svet“ u koloni B, što se podudara samo sa celom vrednošću.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Zamenite tekst „vaš“ sa „ili“ u koloni B, što se podudara sa bilo kojim delom vrednosti.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimizujte imena zaposlenih u SAD.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimizujte sve kolone zaposlenih u SAD.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Deli navedene kolone u skup dodatnih kolona pomoću navedene funkcije razdelnika.",
        "Documentation.LongDescription": "Deli navedene kolone u skup dodatnih kolona pomoću navedene funkcije razdelnika.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Razdvojte kolonu [Name] na poziciji slova „i“ u dve kolone",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Prevodi skup kolona iz tabele u parove atribut-vrednost.",
        "Documentation.LongDescription": "Prevodi skup kolona iz tabele u parove atribut-vrednost, u kombinaciji sa ostalim vrednostima u svakom redu.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Uzimanje kolona „a“, „b“ i „c“ iz tabele <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> i opoziv izvođenja u parove atribut-vrednost.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Prevodi sve kolone, osim navedenog skupa, u parove atribut-vrednost.",
        "Documentation.LongDescription": "Prevodi sve kolone, osim navedenog skupa, u parove atribut-vrednost, u kombinaciji sa ostalim vrednostima u svakom redu.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Prevodi sve kolone, osim navedenog skupa, u parove atribut-vrednost, u kombinaciji sa ostalim vrednostima u svakom redu.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams Personal Analytics",
        "Documentation.LongDescription": "<p>The Teams Analytics connector enables you to get insights into your usage of Teams. Data is available for both your personal activity in Teams as well as the activity in Teams you are a member of.</p>\r\n<p>Data is available for prior 90 days. </p>\r\n<p> For details of the types of data available, please refer to the following help documentation: </p>\r\n<ul>\r\n<li><b>Teams Usage:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Teams User Activity:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Enter organization and project names.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Returns a table of OData feeds offered by Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Vraća binarni format koji čita binarnu vrednost.",
        "Documentation.LongDescription": "Vraća binarni format koji čita binarnu vrednost.  Ako je navedena <code>length</code>, binarna vrednost će sadržati toliko bajtova.  Ako nije navedena <code>length</code>, binarna vrednost će sadržati preostale bajtove.  <code>length</code> može se navesti kao broj ili kao binarni format dužine koja prethodi binarnim podacima.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Vraća logičku vrednost na osnovu provere jednakosti za dve date vrednosti.",
        "Documentation.LongDescription": "Vraća <code>logical</code> vrednost na osnovu provere jednakosti dve date vrednosti, <code>x</code> i <code>y</code>, koristeći navedeni <code>comparer</code>.\r\n        <div>\r\n        <code>comparer</code> je <code>Comparer</code> koji se koristi za kontrolisanje poređenja. \r\n        Upoređivač je funkcija koja prihvata dva argumenta i vraća -1, 0 ili 1 na osnovu toga da li je prva vrednost manja od, jednaka ili veća od sekunde.\r \n        Upoređivači mogu da se koriste za pružanje poređenja koja ne razlikuju mala i velika slova ili za poređenja kulture i lokalnog standarda.\r\n        </div>\r\n        <div>\r\n          Sledeći ugrađeni upoređivači dostupni su na jeziku formule:\r\n        </div>\r\n       <ul>\r\n         <li><code>Comparer.Ordinal</code>: Koristi se za izvršavanje tačnog rednog poređenja</li>\r\n         <li><code>Comparer.OrdinalIgnoreCase</code>: Koristi se za izvršavanje tačnog poređenja koje ne razlikuje mala i velika slova</li>\r\n         <li> <code>Comparer.FromCulture</code>>: Koristi se za izvršavanje poređenja usklađeno sa kulturom</li>\r\n    </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Uporedite stavke „1“ i „A“ pomoću lokalnog standarda „en-US“ da biste odredili da li su vrednosti jednake.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Vraća trenutni datum i vreme u lokalnoj vremenskoj zoni. Ova vrednost je fiksna i neće se promeniti uzastopnim pozivima.",
        "Documentation.LongDescription": "Vraća vrednost <code>datetime</code> podešenu na trenutni datum i vreme na sistemu. Ova vrednost je fiksna i neće se promeniti uzastopnim pozivima, za razliku od DateTime.LocalNow, koja može vratiti različite vrednosti tokom izvršenja izraza.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Vraća trenutni datum i vreme u lokalnoj vremenskoj zoni.",
        "Documentation.LongDescription": "Vraća vrednost <code>datetime</code> podešenu na trenutni datum i vreme na sistemu.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Vraća trenutni datum i vreme u lokalnoj vremenskoj zoni. Ova vrednost je fiksna i neće se promeniti uzastopnim pozivima.",
        "Documentation.LongDescription": "Vraća vrednost <code>datetime</code> podešenu na trenutni datum i vreme na sistemu. Vraćena vrednost sadrži informacije o vremenskoj zoni koje se odnose na lokalnu vremensku zonu. Ova vrednost je fiksna i neće se promeniti uzastopnim pozivima, za razliku od DateTimeZone.LocalNow, koja može vratiti različite vrednosti tokom izvršenja izraza.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Vraća trenutni datum i vreme po UTC vremenu (GMT vremenska zona). Ova vrednost je fiksna i neće se promeniti uzastopnim pozivima.",
        "Documentation.LongDescription": "Vraća trenutni datum i vreme po UTC vremenu (GMT vremenska zona). Ova vrednost je fiksna i neće se promeniti uzastopnim pozivima.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Vraća trenutni datum i vreme u lokalnoj vremenskoj zoni.",
        "Documentation.LongDescription": "Vraća vrednost <code>datetimezone</code> podešenu na trenutni datum i vreme na sistemu.\r\n    Vraćena vrednost sadrži informacije o vremenskoj zoni koje se odnose na lokalnu vremensku zonu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Vraća trenutni datum i vreme po UTC vremenu (GMT vremenska zona).",
        "Documentation.LongDescription": "Vraća trenutni datum i vreme po UTC vremenu (GMT vremenska zona).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Dobijanje trenutnog datuma i vremena po UTC vremenu.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Vraća neprozirni identifikator za određivanje vrednosti koje je u toku.",
        "Documentation.LongDescription": "Vraća neprozirni identifikator za određivanje vrednosti koje je u toku.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Vraća neprozirni identifikator za povezivanje dolaznih zahteva sa odlaznim.",
        "Documentation.LongDescription": "Vraća neprozirni identifikator za povezivanje dolaznih zahteva sa odlaznim.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Ispisuje stavku praćenja, ako je praćenje omogućeno, i vraća vrednost.",
        "Documentation.LongDescription": "Ispisuje praćenje <code>message</code>, ako je praćenje omogućeno, i vraća <code>value</code>. Opcionalni parametar <code>delayed</code> navodi da li treba odložiti procenu za <code>value</code> dok se poruka ne isprati. <code>traceLevel</code> može da preuzme jednu od sledećih vrednosti:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Pratite poruku pre pozivanja funkcije Text.From i dobijte rezultat.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Podrazumevani dobavljač identiteta za trenutni host.",
        "Documentation.LongDescription": "Podrazumevani dobavljač identiteta za trenutni host.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Skuplja sumarnu vrednost od stavki sa liste.",
        "Documentation.LongDescription": "Skuplja sumarnu vrednost od stavki sa liste <code>list</code> pomoću <code>accumulator</code>.\r\n    Može se podesiti opcionalni početni parametar, <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Skuplja sumarnu vrednost od stavki sa liste {1, 2, 3, 4, 5} pomoću ((state, current) => state + current ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Generiše listu vrednosti datetimezone na osnovu početne vrednosti, broja i inkrementalne vrednosti trajanja.",
        "Documentation.LongDescription": "Vraća listu vrednosti <code>datetimezone</code> veličine <code>count</code>, počev od <code>start</code>. Dati inkrement, <code>step</code>, predstavlja vrednost <code>duration</code> koja se dodaje svakoj vrednosti.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od 10 vrednosti koja počinje 5 minuta pre prvog dana Nove godine (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) sa inkrementima od 1 minuta (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Generiše listu vrednosti datetime na osnovu početne vrednosti, broja i inkrementalne vrednosti trajanja.",
        "Documentation.LongDescription": "Vraća listu vrednosti <code>datetime</code> veličine <code>count</code>, počev od <code>start</code>. Dati inkrement, <code>step</code>, predstavlja vrednost <code>duration</code> koja se dodaje svakoj vrednosti.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od 10 vrednosti koja počinje 5 minuta pre prvog dana Nove godine (#datetime(2011, 12, 31, 23, 55, 0)) sa inkrementima od 1 minuta (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Generiše listu date vrednosti na osnovu početne vrednosti, broja i inkrementalne vrednosti trajanja.",
        "Documentation.LongDescription": "Vraća listu vrednosti <code>date</code> veličine <code>count</code>, počev od <code>start</code>. Dati inkrement, <code>step</code>, predstavlja vrednost <code>duration</code> koja se dodaje svakoj vrednosti.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od 5 vrednosti koja počinje poslednjeg dana u godini (#date(2011, 12, 31)) sa inkrementima od 1 dana (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Generiše listu vrednosti trajanja na osnovu početne vrednosti, broja i inkrementalne vrednosti trajanja.",
        "Documentation.LongDescription": "Vraća listu vrednosti <code>count</code> <code>duration</code>, počev od <code>start</code> i sa inkrementima koje određuje data vrednost <code>duration</code> <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od 5 vrednosti počev od 1 sata i sa inkrementima od jednog sata.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Generiše listu vrednosti.",
        "Documentation.LongDescription": "Generiše listu vrednosti pomoću obezbeđenih funkcija. Funkcija <code>initial</code> generiše početnu vrednost kandidata, koja se zatim testira u odnosu na <code>condition</code>.\r\n    Ako je vrednost kandidata odobrena, onda se ona vraća kao deo rezultujuće liste, a sledeća vrednost kandidata se generiše tako što se nova odobrena vrednost prenese na <code>next</code>.\r\n    Kada se vrednost kandidata ne podudara sa <code>condition</code>, proces generisanja liste se zaustavlja.\r\n    Takođe se može obezbediti opcionalni parametar, <code>selector</code>, kako bi se transformisale stavke na rezultujućoj listi.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Kreirajte listu počevši od deset, uzastopno smanjujući za jedan, pri čemu svaka stavka mora biti veća od nule.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Generiše listu zapisa koji sadrže x i y, pri čemu x predstavlja vrednost, a y listu. x treba da bude manje od 10 i da predstavlja broj stavki na listi y. Nakon generisanja liste, vraćaju se samo vrednosti za x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Umeće vrednosti u listu kod datog indeksa.",
        "Documentation.LongDescription": "Vraća novu listu koja se dobija umetanjem vrednosti iz <code>values</code> u <code>list</code> kod <code>index</code>. Prvi položaj na listi je kod indeksa 0.\r\n      <ul>\r\n        <li><code>list</code>: Ciljna lista u koju se umeću vrednosti.</li>\r\n        <li><code>index</code>: Indeks ciljne liste (<code>list</code>) u koju se umeću vrednosti. Prvi položaj na listi je kod indeksa 0.</li>\r\n        <li><code>values</code>: Lista vrednosti koje se umeću u <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Umeće listu ({3, 4}) u ciljnu listu ({1, 2, 5}) kod indeksa 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Umeće listu sa ugnežđenom listom ({1, {1.1, 1.2}}) u ciljnu listu ({2, 3, 4}) kod indeksa 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Zamenjuje „count“ broj vrednosti počev od položaja sa vrednostima za zamenu.",
        "Documentation.LongDescription": "Zamenjuje <code>count</code> vrednosti u <code>list</code> listom <code>replaceWith</code>, počev od navedenog položaja, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zamena {7, 8, 9} na listi {1, 2, 7, 8, 9, 5} sa {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Traži navedenu vrednost na listi i zamenjuje je.",
        "Documentation.LongDescription": "Traži vrednost <code>oldValue</code> na listi vrednosti <code>list</code> i zamenjuje svako pojavljivanje vrednošću za zamenu <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zamena svih vrednosti „a“ sa liste {\"a\", \"B\", \"a\", \"a\"} sa „A“.",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Generiše listu vrednosti time na osnovu početne vrednosti, broja i inkrementalne vrednosti trajanja.",
        "Documentation.LongDescription": "Vraća listu vrednosti <code>time</code> veličine <code>count</code>, počev od <code>start</code>. Dati inkrement, <code>step</code>, predstavlja vrednost <code>duration</code> koja se dodaje svakoj vrednosti.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od 4 vrednosti koja počinje od podneva (#time(12, 0, 0)) sa inkrementima od jednog sata (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Vraća listu čiji su elementi transformisani na osnovu liste unosa pomoću navedenih funkcija.",
        "Documentation.LongDescription": "Vraća listu čiji su elementi projektovani sa liste unosa.<br>\r\n    <br>\r\n    Funkcija „<code>collectionTransform</code>“ transformiše svaki element u srednju listu, a funkcija „<code>resultTransform</code>“ prima originalni element, kao i stavku sa srednje liste da bi se konstruisao konačni rezultat.<br>\r\n    <br>\r\n    Funkcija „<code>collectionTransform</code>“ ima potpis <code>(x kao bilo koji) kao lista => ...</code>,  gde <code>x</code> predstavlja element u <code>list</code>.\r\n    Funkcija „<code>resultTransform</code>“ projektuje oblik rezultata i ima potpis <code>(x kao bilo koji, y kao bilo koji) kao bilo koji => ...</code>, gde <code>x</code> predstavlja element u <code>list</code>, a <code>y</code> predstavlja element sa liste generisan prosleđivanjem elementa <code>x</code> u <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Poravnajte listu ljudi i njihovih kućnih ljubimaca.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Vraća nasumičan broj.",
        "Documentation.LongDescription": "Vraća nasumični broj između 0 i 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Dobijanje nasumičnog broja.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Dodaje polje u zapis.",
        "Documentation.LongDescription": "Dodaje polje u zapis <code>record</code>, na osnovu imena polja <code>fieldName</code> i vrednosti <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje polja „Adresa“ u zapis.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Zamenjuje tekst u okviru navedenog unosa.",
        "Documentation.LongDescription": "Zamenjuje tekst <code>old</code> u prvobitnom <code>text</code> tekstom <code>new</code>. Ova funkcija zamene se može koristiti u <code>List.ReplaceValue</code> i <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Zamena teksta „hE“ tekstom „He“ u okviru niske „hEllo world“.",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Zamenjuje vrednosti u okviru navedenog unosa.",
        "Documentation.LongDescription": "Zamenjuje vrednost <code>old</code> u prvobitnom <code>value</code> vrednošću <code>new</code>. Ova funkcija zamene se može koristiti u <code>List.ReplaceValue</code> i <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Zamena vrednosti 11 vrednošću 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Returns a JSON result from the Smartsheet API",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Makes a call to the Smartsheet 2.0 REST API at the specified endpoint and returns results as a JSON record.",
        "Documentation.Examples": [
          {
            "Description": "Pulls data from the sheets Smartsheet API endpoint with additional arguments specified",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "A table with sheets information as returned by the Smartsheet API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Vraća funkciju koja ne obavlja razdvajanje, što njen argument vraća kao listu od jednog elementa.",
        "Documentation.LongDescription": "Vraća funkciju koja ne obavlja razdvajanje, što njen argument vraća kao listu od jednog elementa.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Vraća funkciju koja deli tekst na listu teksta kod razmaka.",
        "Documentation.LongDescription": "Vraća funkciju koja deli tekst na listu teksta kod razmaka.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite unos po znakovima razmaka, tretirajući navodnike kao bilo koji drugi znak.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Deli tabelu na listu tabela na osnovu broja grupa i navedene kolone.",
        "Documentation.LongDescription": "Deli <code>table</code> na listu <code>groups</code> broja tabela na osnovu vrednosti koju ima <code>column</code> i funkcije <code>hash</code>.\r\n    Funkcija <code>hash</code> se primenjuje na vrednost reda <code>column</code> da bi se dobila vrednost heša za red. Modulo vrednosti heša <code>groups</code> određuje u koju vraćenu tabelu će red biti smešten.\r\n    <ul>\r\n       <li><code>table</code>: Tabela koja se deli.</li>\r\n       <li><code>column</code>: Kolona na osnovu koje je dobijen heš da bi se odredilo u kojoj vraćenoj tabeli se red nalazi.</li>\r\n       <li><code>groups</code>: Broj tabela na koje će ulazna tabela biti podeljena.</li>\r\n       <li><code>hash</code>: Funkcija koja se primenjuje da bi se dobila vrednost heša.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Deljenje tabele <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> na 2 tabele u koloni [a] koristeći vrednost kolona kao heš funkciju.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Vraća deo stavke <code>text</code> između navedenih <code>startDelimiter</code> i <code>endDelimiter</code>.\r\n    Opcionalni broj <code>startIndex</code> pokazuje koje pojavljivanje stavke <code>startDelimiter</code> treba uzeti u obzir.\r\n    Opcionalna lista <code>startIndex</code> pokazuje koje pojavljivanje stavke <code>startDelimiter</code> treba uzeti u obzir, kao i da li indeksiranje treba obaviti od početka ili kraja unosa.\r\n    Stavka <code>endIndex</code> je slična, s tim što se indeksiranje obavlja u odnosu na <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite deo „111 (222) 333 (444)“ između (prve) otvorene zagrade i (prve) zatvorene zagrade koja sledi.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Preuzmite deo „111 (222) 333 (444)“ između druge otvorene zagrade i prve zatvorene zagrade koja sledi.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Preuzmite deo „111 (222) 333 (444)“ između druge otvorene zagrade od kraja i druge zatvorene zagrade koja sledi.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Umeće jednu tekstualnu vrednost u drugu na datom položaju.",
        "Documentation.LongDescription": "Vraća rezultat umetanja tekstualne vrednosti <code>newText</code> u tekstualnu vrednost <code>text</code> na položaju <code>offset</code>. Položaji kreću od broja 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Umeće „C“ između „B“ i „D“ u „ABD“.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Vraća novi, nasumični univerzalni jedinstveni identifikator (GUID).",
        "Documentation.LongDescription": "Vraća novi, nasumični univerzalni jedinstveni identifikator (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Zamenjuje sva pojavljivanja date podniske u tekstu.",
        "Documentation.LongDescription": "Vraća rezultat zamene svih pojavljivanja tekstualne vrednosti <code>old</code> u tekstualnoj vrednosti <code>text</code> tekstualnom vrednošću <code>new</code>. Ova funkcija razlikuje mala i velika slova.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Zamena svakog pojavljivanja teksta „the“ u rečenici tekstom „a“.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Uklanja opseg znakova i umeće novu vrednost na navedenom položaju.",
        "Documentation.LongDescription": "Vraća rezultat uklanjanja broja znakova, <code>count</code>, iz tekstualne vrednosti <code>text</code> počev od položaja <code>offset</code>, a zatim umeće tekstualnu vrednost <code>newText</code> na istom položaju u <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Zamena jednog znaka na položaju 2 u tekstualnoj vrednosti „ABGF“ novom tekstualnom vrednošću „CDE“.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Dodaje ključ u dati tip tabele.",
        "Documentation.LongDescription": "Dodaje ključ u dati tip tabele.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Vraća listu identiteta koju će uslov prihvatiti.",
        "Documentation.LongDescription": "<p>Pomoću navedenog <code>identityProvider</code>, konvertuje <code>condition</code> u listu identiteta za koje bi <code>condition</code> vratio <code>tačno</code> u svim kontekstima autorizacije uz <code>identityProvider</code> kao dobavljač identiteta. Prikazuje se greška ako nije moguće konvertovati <code>condition</code> u listu identiteta, na primer ako <code>condition</code> prilikom donošenja odluke konsultuje atribute koji nisu identiteti korisnika ili grupa.</p>\r\n    <p>Imajte na umu da su identiteti na listi identiteta predstavljeni onako kako se pojavljuju u <code>condition</code> i da se na njima ne izvršava normalizacija (kao što je proširenje grupe).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Komprimuje binarnu vrednost pomoću datog tipa kompresije.",
        "Documentation.LongDescription": "Komprimuje binarnu vrednost pomoću datog tipa kompresije.  Rezultat ovog tipa poziva je komprimovana kopija unosa. Tipovi kompresije uključuju:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Komprimujte binarnu vrednost.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Dekomprimuje binarnu vrednost koristeći dati tip kompresije.",
        "Documentation.LongDescription": "Dekomprimuje binarnu vrednost pomoću datog tipa kompresije.  Rezultat ovog poziva je dekomprimovana kopija unosa. Tipovi kompresije obuhvataju:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekomprimuje binarnu vrednost.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Vraća podskup binarne vrednosti koji počinje od pomaka.",
        "Documentation.LongDescription": "Vraća podskup binarnih vrednosti koji počinje od pomaka <code>binary</code>. Opcionalan parametar, <code>offset</code>, određuje maksimalnu dužinu podskupa.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Vraća podskup binarnih vrednosti koji počinje od pomaka 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Vraća podskup dužine 2 od pomaka 6 binarne vrednosti.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Deli navedenu binarnu datoteku na listu binarnih datoteka pomoću navedene veličine stranice.",
        "Documentation.LongDescription": "Deli se <code>binary</code> na listu binarnih datoteka gde je prvi element izlazne liste binarna datoteka koja sadrži prvih <code>pageSize</code> bajtova sa \r\n    izvorne binarne datoteke, sledeći element sa izlazne liste je binarna datoteka koja sadrži sledećih <code>pageSize</code> bajtova sa izvorne binarne datoteke itd.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Kreira ili proširuje binarni prikaz sa korisnički definisanim rukovaocima za operacije upita i radnje.",
        "Documentation.LongDescription": "<p>Vraća prikaz <code>binary</code> gde se funkcije navedene u <code>handlers</code> koriste umesto podrazumevanog ponašanja operacije kada se operacija primeni na prikaz.</p>\r\n<p>Ako je <code>binary</code> naveden, sve funkcije rukovaoca su opcionalne. Ako <code>binary</code> nije naveden, funkcija rukovaoca <code>GetStream</code> je obavezna. Ako funkcija rukovaoca nije navedena za operaciju, podrazumevano ponašanje operacije se umesto toga primenjuje na <code>binary</code> (osim u slučaju <code>GetExpression</code>).</p>\r\n<p>Funkcije rukovaoca moraju da vrate vrednost koja je semantički jednaka rezultatu primene operacije na <code>binary</code> (ili dobijenom prikazu u slučaju <code>GetExpression</code>).</p>\r\n<p>Ako funkcija rukovaoca dovede do greške, podrazumevano ponašanje operacije se primenjuje na prikaz.</p>\r\n<p><code>Binary.View</code> može da se koristi za primenu presavijanja na izvor podataka – prevod M upita u operacije karakteristične za izvor (na primer, za preuzimanje odeljka datoteke).</p>\r\n<p>Pogledajte objavljenu Power Query dokumentaciju prilagođenog konektora za detaljniji opis funkcije <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Kreirajte osnovni prikaz koji ne zahteva pristup podacima da biste odredili dužinu.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Vraća binarni format sa rasporedom bajtova koji navodi funkcija.",
        "Documentation.LongDescription": "Vraća binarni format sa rasporedom bajtova koji navodi <code>binaryFormat</code>.  Podrazumevani raspored bajtova je <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Vraća binarni format koji bira sledeći binarni format na osnovu već pročitane vrednosti.",
        "Documentation.LongDescription": "Vraća binarni format koji bira sledeći binarni format na osnovu već pročitane vrednosti.  Vrednost binarnog formata koji je proizvela ova funkcija funkcioniše u fazama:<ul>\r\n<li>Binarni format koji je naveo parametar <code>binaryFormat</code> koristi se za čitanje vrednosti.</li>\r\n<li>Vrednost se prosleđuje funkciji izbora koju je naveo parametar <code>chooseFunction</code>.</li>\r\n<li>Funkcija izbora ispituje vrednost i vraća drugi binarni format.</li>\r\n<li>Drugi binarni format se koristi za čitanje druge vrednosti.</li>\r\n<li>Ako se navede funkcija kombinovanja, prva i druga vrednost se prosleđuju funkciji kombinovanja i vraća se vrednost koja se dobije.</li>\r\n<li>Ako se ne navede funkcija kombinovanja, vraća se druga vrednost.</li>\r\n<li>Vraća se druga vrednost.</li>\r\n</ul>Opcionalni parametar <code>type</code> ukazuje na tip binarnog formata koji će vratiti funkcija izbora.  Može se navesti <code>type any</code>, <code>type list</code> ili <code>type binary</code>.  Ako se parametar <code>type</code> ne navede, koristi se <code>type any</code>.   Ako se koristi <code>type list</code> ili <code>type binary</code>, sistem će možda moći da vrati protočnu <code>binary</code> ili <code>list</code> vrednost umesto baferovane, što može da smanji količinu memorije potrebne za čitanje formata.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Čitanje liste bajtova kod koje se broj elemenata određuje prvim bajtom.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Čitanje liste bajtova kod koje se broj elemenata određuje prvim bajtom i zadržavanje prvog pročitanog bajta.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Čitanje liste bajtova kod koje se broj elemenata određuje prvim bajtom pomoću protočne liste.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Vraća binarni format koji čita grupu stavki.",
        "Documentation.LongDescription": "Parametri su sledeći:\r\n<ul>\r\n<li>Parametar <code>binaryFormat</code> navodi binarni format vrednosti ključa.</li>\r\n<li>Parametar <code>group</code> navodi informacije o grupi poznatih stavki.</li>\r\n<li>Opcionalni parametar <code>extra</code> se može koristiti za navođenje funkcije koja će vratiti vrednost binarnog formata za vrednost koja sledi bilo koji neočekivani ključ. Ako se parametar <code>extra</code> ne navede, biće prijavljena greška ako se pojave neočekivane vrednosti ključa.</li>\r\n</ul>\r\nParametar <code>group</code> navodi listu definicija stavki. Svaka definicija stavke je lista koja sadrži 3–5 sledećih vrednosti:\r\n<ul>\r\n<li>Vrednost ključa. Vrednost ključa koja odgovara stavci. Mora da bude jedinstvena u skupu stavki.</li>\r\n<li>Format stavke. Binarni format koji odgovara vrednosti stavke. Omogućava da svaka stavka ima različiti format. </li>\r\n<li>Pojavljivanje stavke. Vrednost <code>BinaryOccurrence.Type</code> koja označava očekivani broj pojavljivanja stavke u grupi. Obavezne stavke koje nisu prisutne izazivaju grešku. Obavezne ili opcionalne duplirane stavke se smatraju neočekivanim vrednostima ključa.</li>\r\n<li>Podrazumevana vrednost stavke (opcionalno). Ako se podrazumevana vrednost stavke pojavljuje na listi definicija stavki i nije bez vrednosti, biće korišćena umesto podrazumevane opcije. Podrazumevana opcija za stavke koje se ponavljaju ili stavke koje su opcionalne jeste „bez vrednosti“, dok je podrazumevana opcija za vrednosti koje se ponavljaju prazna lista { }.</li>\r\n<li>Transformacija vrednosti stavke (opcionalno). Ako je funkcija transformacije vrednosti stavke prisutna na listi definicija stavki i nije bez vrednosti, biće pozvana da transformiše vrednost stavke pre nego što bude vraćena. Funkcija transformacije se poziva samo ako se stavka pojavljuje u unosu (nikada neće biti pozvana uz podrazumevanu vrednost). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "U nastavku se podrazumeva vrednost ključa koja je jednobajtna, sa 4 očekivane stavke u grupi, od kojih sve imaju bajt podataka nakon ključa.  Stavke se pojavljuju u ulazu na sledeći način:\r\n<ul>\r\n<li>Ključ 1 je obavezan i pojavljuje se sa vrednošću 11.</li>\r\n<li>Ključ 2 se ponavlja i pojavljuje se dva puta sa vrednošću 22, a kao rezultat daje vrednost { 22, 22 }.</li>\r\n<li>Ključ 3 je opcionalan i ne pojavljuje se, a kao rezultat daje vrednost „bez vrednosti“.</li>\r\n<li>Ključ 4 se ponavlja, ali se ne pojavljuje, a kao rezultat daje vrednost { }.</li>\r\n<li>Ključ 5 nije deo grupe, ali se pojavljuje jednom sa vrednošću 55.  Dodatna funkcija se poziva pomoću vrednosti ključa 5, a vraća format koji odgovara toj vrednosti (BinaryFormat.Byte).  Vrednost 55 se čita i odbacuje.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Sledeći primer ilustruje transformaciju vrednosti stavke i podrazumevanu vrednost stavke.   Stavka koja se ponavlja sa ključem 1 sumira listu pročitanih vrednosti pomoću List.Sum.  Opcionalna stavka sa ključem 2 ima podrazumevanu vrednost 123 umesto „bez vrednosti“.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Vraća binarni format koji ograničava količinu podataka koje je moguće čitati.",
        "Documentation.LongDescription": "Vraća binarni format koji ograničava količinu podataka koji se mogu pročitati.  Oba <code>BinaryFormat.List</code> i <code>BinaryFormat.Binary</code> mogu da se koriste za čitanje do kraja podataka.  <code>BinaryFormat.Length</code> može da se koristi za ograničavanje broja pročitanih bajtova.  Parametar <code>binaryFormat</code> navodi binarni format za ograničenje.  Parametar <code>length</code> navodi broj bajtova za čitanje.  Parametar <code>length</code> može biti brojčana vrednost ili vrednost binarnog formata koja navodi format vrednosti dužine koja se pojavljuje koji prethodi vrednosti koja se čita.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Ograničenje broja pročitanih bajtova na 2 prilikom čitanja liste bajtova.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Ograničite broj bajtova pročitanih prilikom čitanja liste bajtova na vrednost bajta koja prethodi listi.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Vraća binarni format koji će transformisati vrednosti koje je pročitao drugi binarni format.",
        "Documentation.LongDescription": "Vraća binarni format koji će transformisati vrednosti koje je pročitao drugi binarni format.  Parametar <code>binaryFormat</code> navodi binarni format koji će se koristiti za čitanje vrednosti.  <code>function</code> se poziva pomoću pročitane vrednosti, a vraća transformisanu vrednost.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Čitanje bajta i dodavanje još jednog.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Vraća funkciju upoređivača koja koristi pravila rednih brojeva za poređenje vrednosti.",
        "Documentation.LongDescription": "Vraća funkciju poređenja koja koristi redna pravila za poređenje navedenih vrednosti <code>x</code> i <code>y</code>.<br>\r\n <br>\r\n Funkcija poređenja prihvata dva argumenta i vraća -1, 0 ili 1 na osnovu toga da li je prva vrednost manja od, jednaka ili veća od druge.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Pomoću pravila rednih brojeva uporedite da li su stavke „encyclopædia“ i „encyclopaedia“ iste. Obratite pažnju na to da su ove stavke iste ako se koristi funkcija <code>Comparer.FromCulture(\"sr-Latn-RS\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Vraća funkciju upoređivača koja ne razlikuje mala i velika slova i koja koristi pravila zasnovana na redosledu znakova da bi uporedila vrednosti.",
        "Documentation.LongDescription": "Vraća funkciju poređenja koja ne razlikuje mala i velika slova, koja koristi redna pravila za poređenje navedenih vrednosti <code>x</code> i <code>y</code>.<br>\r\n <br>\r\n Funkcija upoređivanja prihvata dva argumenta i vraća -1, 0 ili 1 na osnovu toga da li je prva vrednost manja od, jednaka, ili veće od druge.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Pomoću pravila zasnovanih na redosledu znakova, koja ne razlikuju mala i velika slova, uporedite „Abc“ sa „abc“. Imajte u vidu da je „Abc“ manje od „abc“ pomoću upoređivača <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Vraća svojstvo atributa dimenzije.",
        "Documentation.LongDescription": "Vraća svojstvo <code>propertyName</code> atributa dimenzije <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Vraća svojstvo mere (svojstvo ćelije).",
        "Documentation.LongDescription": "Vraća svojstvo <code>propertyName</code> mere <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL Query Source",
        "Documentation.LongDescription": "Define a Databricks data source for running SQL queries"
      },
      "ReturnType": "Databricks SQL Query",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL Query Source",
        "Documentation.LongDescription": "Define a Databricks data source for running SQL queries"
      },
      "ReturnType": "Databricks SQL Query",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Dodaje navedene dane u datum.",
        "Documentation.LongDescription": "Vraća rezultat <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> od dodavanja <code>numberOfDays</code> dana u vrednost <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> na koju se dodaju dani.</li>\r\n      <li><code>numberOfDays</code>: Broj dana koji se dodaju.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje 5 dana vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>, koja predstavlja datum 14.5.2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Dodaje navedene mesece u datum.",
        "Documentation.LongDescription": "Vraća rezultat <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> od dodavanja <code>numberOfMonths</code> meseci u vrednost <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> u koju se dodaju meseci.</li>\r\n        <li><code>numberOfMonths</code>: Broj meseci koji se dodaju.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje 5 meseci vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>, koja predstavlja datum 14.5.2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Dodavanje 18 meseci vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>, koja predstavlja datum 14.5.2011. i vreme 08:15:22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Dodaje navedene kvartale u datum.",
        "Documentation.LongDescription": "Vraća rezultat <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> od dodavanja <code>numberOfQuarters</code> kvartala u vrednost <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> u koju se dodaju kvartali.</li>\r\n      <li><code>numberOfQuarters</code>: Broj kvartala koji se dodaju.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje 1 kvartala vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>, koja predstavlja datum 14.5.2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Dodaje navedene sedmice u datum.",
        "Documentation.LongDescription": "Vraća rezultat <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> od dodavanja <code>numberOfWeeks</code> sedmica u vrednost <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> na koju se dodaju sedmice.</li>\r\n      <li><code>numberOfWeeks</code>: Broj sedmica koje se dodaju.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje 2 sedmice vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>, koja predstavlja datum 14.5.2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Dodaje navedene godine u datum.",
        "Documentation.LongDescription": "Vraća rezultat <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> od dodavanja <code>numberOfYears</code> vrednosti <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> na koju se dodaju godine.</li>\r\n        <li><code>numberOfYears</code>: Broj godina koje se dodaju.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje 4 godine vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>, koja predstavlja datum 14.5.2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Dodavanje 10 godina vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>, koja predstavlja datum 14.5.2011. i vreme 08:15:22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledećeg broja dana, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog dana.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg broja dana, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog dana.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>days</code>: Broj dana.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se dan posle trenutnog vremena sistema nalazi u okviru naredna dva dana.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledećeg broja meseci, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog meseca.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg broja meseci, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog meseca.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>months</code>: Broj meseci.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se mesec posle trenutnog vremena sistema nalazi u okviru naredna dva meseca.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledećeg broja kvartala, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog kvartala.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg broja kvartala, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog kvartala.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>quarters</code>: Broj kvartala.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se kvartal posle trenutnog vremena sistema nalazi u okviru naredna dva kvartala.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledećeg broja sedmica, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sedmice.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg broja sedmica, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sedmice.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>weeks</code>: Broj sedmica.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se sedmica posle trenutnog vremena sistema nalazi u okviru naredne dve sedmice.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledećeg broja godina, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne godine.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg broja godina, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne godine.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>years</code>: Broj godina.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se godina posle trenutnog vremena sistema nalazi u okviru naredne dve godine.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodnog broja dana, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog dana.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog broja dana, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog dana.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>days</code>: Broj dana.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se dan pre trenutnog vremena sistema nalazi u okviru prethodna dva dana.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodnog broja meseci, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog meseca.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog broja meseci, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog meseca.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>months</code>: Broj meseci.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se mesec pre trenutnog vremena sistema nalazi u okviru prethodna dva meseca.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodnog broja kvartala, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog kvartala.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog broja kvartala, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog kvartala.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>quarters</code>: Broj kvartala.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se kvartal pre trenutnog vremena sistema nalazi u okviru prethodna dva kvartala.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodnog broja sedmica, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sedmice.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog broja sedmica, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sedmice.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>weeks</code>: Broj sedmica.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se sedmica pre trenutnog vremena sistema nalazi u okviru prethodne dve sedmice.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodnog broja godina, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne godine.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog broja godina, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne godine.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>years</code>: Broj godina.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li se godina pre trenutnog vremena sistema nalazi u okviru prethodne dve godine.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Dodaje informacije o vremenskoj zoni vrednosti datuma i vremena.",
        "Documentation.LongDescription": "Dodaje informacije o vremenskoj zoni vrednosti <code>dateTime</code>. Informacije o vremenskoj zoni obuhvataju <code>timezoneHours</code> i opciono <code>timezoneMinutes</code>, što navodi željeni pomak od UTC vremena.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Podesite vremensku zonu na UTC+7:30 (7 časova i 30 minuta nakon UTC vremena).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom sledećeg broja časova, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog časa.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg broja časova, na osnovu aktuelnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog časa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>hours</code>: Broj časova.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je čas nakon aktuelnog vremena sistema tokom sledeća dva časa.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom sledećeg broja minuta, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog minuta.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg broja minuta, na osnovu aktuelnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog minuta.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>minutes</code>: Broj minuta.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je minut nakon aktuelnog vremena sistema tokom sledeća dva minuta.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom sledećeg broja sekundi, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sekunde.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg broja sekundi, na osnovu aktuelnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sekunde.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>seconds</code>: Broj sekundi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je sekunda nakon aktuelnog vremena sistema tokom sledeće dve sekunde.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom prethodnog broja časova, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog časa.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog broja časova, na osnovu aktuelnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog časa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>hours</code>: Broj časova.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je čas pre aktuelnog vremena sistema tokom prethodna dva časa.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom prethodnog broja minuta, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog minuta.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog broja minuta, na osnovu aktuelnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog minuta.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>minutes</code>: Broj minuta.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je minut pre aktuelnog vremena sistema tokom prethodna dva minuta.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom prethodnog broja sekundi, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sekunde.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog broja sekundi, na osnovu aktuelnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sekunde.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      <li><code>seconds</code>: Broj sekundi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je sekunda pre aktuelnog vremena sistema tokom prethodne dve sekunde.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Menja vremensku zonu vrednosti.",
        "Documentation.LongDescription": "Menja informacije o vremenskoj zoni za vrednost datuma i vremenske zone <code>dateTimeZone</code> u informacije o novoj vremenskoj zoni koje obezbeđuje <code>timezoneHours</code> i opcionalno <code>timezoneMinutes</code>.\r\n    Ako <code>dateTimeZone</code> nema komponentu vremenske zone, prijavljuje se izuzetak.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Promena informacija o vremenskoj zoni za #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na 8 sati.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Promena informacija o vremenskoj zoni za #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na -30 minuta.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Pristupa vrednosti po imenu u ugrađenom mešapu.",
        "Documentation.LongDescription": "Pristupa vrednosti po imenu u ugrađenom mešapu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Pravi funkciju sa određenim potpisom parametra iznad funkcije koja koristi jedan argument liste",
        "Documentation.LongDescription": "Koristi funkciju unary <code>function</code> i pravi novu funkciju sa tipom <code>functionType</code> koji pravi listu od svojih argumenata i prosleđuje je na <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Konvertuje List.Sum u funkciju sa dva argumenta čiji argumenti se zbrajaju",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Konvertuje funkciju tako što listu pretvara u funkciju sa dva argumenta",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Poziva datu funkciju",
        "Documentation.LongDescription": "Poziva datu funkciju pomoću navedene liste argumenata i vraća rezultat.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Poziva Record.FieldNames pomoću jednog argumenta [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Poziva datu funkciju nakon što je prosleđeno navedeno trajanje.",
        "Documentation.LongDescription": "Vraća rezultat <code>function</code> nakon što je trajanje <code>delay</code> prosleđeno.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Kreira skalarnu funkciju na vrhu vektorske funkcije, grupišući više pozivanja.",
        "Documentation.LongDescription": "<p>Vraća skalarnu funkciju tipa <code>scalarFunctionType</code> koja poziva <code>vectorFunction</code> sa jednim redom argumenata i vraća jedan rezultat. Pored toga, kada se skalarna funkcija stalno primenjuje za svaki red tabele unosa, kao što je Table.AddColumn, <code>vectorFunction</code> će biti primenjen jednom za sve unose.</p>\r\n<p><code>vectorFunction</code> će proslediti tabelu čije kolone se podudaraju po imenu i položaju parametara za <code>scalarFunctionType</code>. Svaki red ove tabele sadrži argumente za jedan poziv za skalarnu funkciju, sa kolonama koje odgovaraju parametrima za <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> mora da vrati listu iste dužine kao ulazna tabela, čija stavka na svakom položaju mora biti isti rezultat kao procena skalarne funkcije u ulaznom redu istog položaja.</p>\r\n<p>Očekuje se da je ulazna tabela strimovana, tako da se očekuje da <code>vectorFunction</code> strimuje rezultat kako se pojavi unos, radeći samo sa jednim unosom istovremeno. <code>vectorFunction</code> posebno ne sme da prebrojava ulaznu tabelu više od jednom.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Pravi zapis koji predstavlјa geografsku tačku od delova.",
        "Documentation.LongDescription": "Pravi zapis koji predstavlјa geografsku tačku od sastavnih delova, kao što su geografska dužina, geografska širina i, ako su prisutni, nagib (Z) i mera (M). Opcionalni identifikator prostornog referentnog sistema (SRID) može se navesti ako se razlikuje od podrazumevane vrednosti (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Pravi zapis koji predstavlja geometrijsku tačku od delova.",
        "Documentation.LongDescription": "Pravi zapis koji predstavlјa geometrijsku tačku od sastavnih delova, kao što su X-koordinata, Y-koordinata i, ako su prisutni, Z-koordinata i mera (M). Opcionalni identifikator prostornog referentnog sistema (SRID) može se navesti ako se razlikuje od podrazumevane vrednosti (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Pravi identitet.",
        "Documentation.LongDescription": "Pravi identitet.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Određuje da li je identitet član kolekcije identiteta.",
        "Documentation.LongDescription": "Određuje da li je identitet član kolekcije identiteta.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Vraća listu koja se sastoji od svih elemenata pomaka sa liste koji imaju neparan broj.",
        "Documentation.LongDescription": "Vraća listu koja se sastoji od svih elemenata pomaka sa liste koji imaju neparan broj. Naizmenično preuzima i preskače vrednosti sa liste <code>list</code> u zavisnosti od parametara.\r\n    <ul>\r\n    <li><code>count</code>: Navodi broj vrednosti koje se svaki put preskaču.</li>\r\n    <li><code>repeatInterval</code>: Opcionalni interval ponavljanja koji pokazuje broj vrednosti koje se dodaju između preskočenih vrednosti.</li>\r\n    <li><code>offset</code>: Opcionalni parametar pomaka koji počinje preskakanje vrednosti kod početnog pomaka.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od {1..10} koja preskače prvi broj.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Kreiranje liste od {1..10} koja preskače svaki drugi broj.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Kreiranje liste od {1..10} koja počinje od 1 i preskače svaki drugi broj.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Kreiranje liste od {1..10} koja počinje od 1, preskače jednu vrednost, zadržava dve vrednosti i tako dalje.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Navodi da li lista sadrži vrednost.",
        "Documentation.LongDescription": "Navodi da li lista <code>list</code> sadrži vrednost <code>value</code>.\r\n    Vraća „true“ ako se vrednost nalazi na listi. U suprotnom vraća „false“. Može se navesti opcionalna vrednost kriterijuma jednakosti, <code>equationCriteria</code>, radi kontrole testiranja jednakosti. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Otkrivanje da li lista {1, 2, 3, 4, 5} sadrži 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Otkrivanje da li lista {1, 2, 3, 4, 5} sadrži 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Navodi da li lista obuhvata sve vrednosti iz druge liste.",
        "Documentation.LongDescription": "Navodi da li lista <code>list</code> obuhvata sve vrednosti iz druge liste, <code>values</code>.\r\n    Vraća „true“ ako se vrednost nalazi na listi. U suprotnom vraća „false“. Može se navesti opcionalna vrednost kriterijuma jednakosti, <code>equationCriteria</code>, radi kontrole testiranja jednakosti. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Otkrivanje da li lista {1, 2, 3, 4, 5} sadrži 3 i 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Otkrivanje da li lista {1, 2, 3, 4, 5} sadrži 5 i 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Navodi da li lista obuhvata bilo koju vrednost iz druge liste.",
        "Documentation.LongDescription": "Navodi da li lista <code>list</code> obuhvata bilo koju vrednost iz druge liste, <code>values</code>.\r\n        Vraća „true“ ako se vrednost nalazi na listi. U suprotnom vraća „false“. Može se navesti opcionalna vrednost kriterijuma jednakosti, <code>equationCriteria</code>, radi kontrole testiranja jednakosti. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Otkrivanje da li lista {1, 2, 3, 4, 5} sadrži 3 ili 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Otkrivanje da li lista {1, 2, 3, 4, 5} sadrži 6 ili 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Vraća kovarijansu između dve liste brojeva.",
        "Documentation.LongDescription": "Vraća kovarijansu između dve liste, <code>numberList1</code> i <code>numberList2</code>. <code>numberList1</code> i <code>numberList2</code> moraju da sadrže isti broj <code>number</code> vrednosti.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje kovarijanse između dve liste.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Vraća razliku između dve date liste.",
        "Documentation.LongDescription": "Vraća stavke sa liste <code>list1</code> koje se ne pojavljuju na listi <code>list2</code>. Duplirane vrednosti su podržane.\r\n    Može se navesti opcionalna vrednost kriterijuma jednakosti, <code>equationCriteria</code>, radi kontrole testiranja jednakosti. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje stavki sa liste {1, 2, 3, 4, 5} koje se ne pojavljuju na listi {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Pronalaženje stavki sa liste {1, 2} koje se ne pojavljuju na listi {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Vraća listu vrednosti (uključujući polja zapisa) koja sadrži navedeni tekst.",
        "Documentation.LongDescription": "Vraća listu vrednosti sa liste <code>list</code> koja je sadržala vrednost <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje tekstualnih vrednosti sa liste {\"a\", \"b\", \"ab\"} koje se podudaraju sa „a“. ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Vraća prvi skup stavki sa liste tako što navodi broj stavki koje treba vratiti ili kvalifikujući uslov.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Ako se navede broj, vraća se najviše toliko stavki. </li>\r\n  <li>Ako se navede uslov, vraćaju se sve stavke koje inicijalno zadovoljavaju taj uslov. Ako neka stavka ne zadovolji uslov, kasnije stavke se ne uzimaju u obzir. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje inicijalnih vrednosti sa liste {3, 4, 5, -1, 7, 8, 2} koje su veće od 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Vraća „true“ ako sve vrednosti sa liste zadovolje funkciju uslova.",
        "Documentation.LongDescription": "Vraća <code>true</code> ako sve vrednosti sa liste <code>list</code> zadovolje funkciju uslova, <code>condition</code>. U suprotnom vraća <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li su sve vrednosti sa liste {11, 12, 13} veće od 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Utvrđivanje da li su sve vrednosti sa liste {1, 2, 3} veće od 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Vraća „true“ ako bilo koja vrednost zadovolji funkciju uslova.",
        "Documentation.LongDescription": "Vraća <code>true</code> ako bilo koja vrednost sa liste <code>list</code> zadovolji funkciju uslova, <code>condition</code>. U suprotnom vraća <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje da li je bilo koja vrednost sa liste {9, 10, 11} veća od 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Pronalaženje da li je bilo koja vrednost sa liste {1, 2, 3} veća od 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Vraća maksimalne vrednosti sa liste. Mora se navesti broj vrednosti koje treba vratiti ili uslov za filtriranje.",
        "Documentation.LongDescription": "Vraća maksimalne vrednosti sa liste, <code>list</code>.\r\n    Nakon sortiranja redova se mogu navesti opcionalni parametri da bi se rezultat dodatno filtrirao. Opcionalni parametar, <code>countOrCondition</code>, navodi broj vrednosti koje treba vratiti ili uslov za filtriranje. Opcionalni parametar, <code>comparisonCriteria</code>, navodi kako treba porediti vrednosti sa liste.\r\n <ul>\r\n        <li> <code>list</code>: Lista vrednosti.</li>\r\n        <li> <code>countOrCondition</code>:  Ako se navede broj, vraća se lista od najviše <code>countOrCondition</code> stavki po rastućem redosledu. Ako se navede uslov, vraća se lista stavki koje inicijalno zadovoljavaju taj uslov. Ako neka stavka ne zadovolji uslov, kasnije stavke se ne uzimaju u obzir.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcionalno]</i> Može se navesti opcionalna vrednost <code>comparisonCriteria</code> da bi se odredilo kako će se porediti stavke sa liste. Ako je ovaj parametar bez vrednosti, koristi se podrazumevani upoređivač.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Vraća minimalne vrednosti sa liste. Može se navesti broj vrednosti koje treba vratiti ili uslov za filtriranje.",
        "Documentation.LongDescription": "Vraća minimalne vrednosti sa liste, <code>list</code>.\r\n    Parametar, <code>countOrCondition</code>, navodi broj vrednosti koje treba vratiti ili uslov za filtriranje. Opcionalni parametar, <code>comparisonCriteria</code>, navodi kako treba porediti vrednosti sa liste.\r\n <ul>\r\n        <li> <code>list</code>: Lista vrednosti.</li>\r\n        <li> <code>countOrCondition</code>: Ako se navede broj, vraća se lista od najviše <code>countOrCondition</code> stavki po rastućem redosledu. Ako se navede uslov, vraća se lista stavki koje inicijalno zadovoljavaju taj uslov. Ako neka stavka ne zadovolji uslov, kasnije stavke se ne uzimaju u obzir. Ako je ovaj parametar bez vrednosti, vraća se najmanja vrednost sa liste.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcionalno]</i> Može se navesti opcionalna vrednost <code>comparisonCriteria</code> da bi se odredilo kako će se porediti stavke sa liste. Ako je ovaj parametar bez vrednosti, koristi se podrazumevani upoređivač.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje 5 najmanjih vrednosti sa liste <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Vraća listu brojeva na osnovu početne vrednosti, broja i opcionalne inkrementalne vrednosti.",
        "Documentation.LongDescription": "Vraća listu brojeva na osnovu početne vrednosti, broja i opcionalne inkrementalne vrednosti. Podrazumevana inkrementalna vrednost je 1.\r\n<ul>\r\n   <li><code>start</code>: Početna vrednost sa liste.</li>\r\n   <li><code>count</code>: Broj vrednosti koje treba kreirati.</li>\r\n   <li><code>increment</code>: <i>[opcionalno]</i> Vrednost za koju se vrši povećanje. Ako se izostavi, vrednosti se povećavaju za 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Generisanje liste od 10 uzastopnih brojeva počev od 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Generisanje liste od 10 brojeva počev od 1, sa inkrementom od 2 za svaki sledeći broj.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Vraća jedan ili više uzoraka percentila koji odgovaraju datim verovatnoćama.",
        "Documentation.LongDescription": "Vraća jedan ili više uzoraka percentila sa liste <code>list</code>. Ako je vrednost <code>percentiles</code> broj između 0,0 i 1,0, tretiraće se kao percentil i rezultat će biti\r\n    jedna vrednost koja odgovara toj verovatnoći. Ako je vrednost <code>percentiles</code> lista brojeva sa vrednostima između 0,0 i 1,0, rezultat će biti lista percentila\r\n    koji odgovaraju ulaznoj verovatnoći. Napredni korisnici mogu da koriste opciju PercentileMode u <code>options</code> da bi izabrali specifičniji metod interpolacije, s tim što se ona ne preporučuje većini korisnika.\r\n    Unapred definisani simboli <code>PercentileMode.ExcelInc</code> i <code>PercentileMode.ExcelExc</code> podudaraju se sa metodima interpolacije koje koriste Excel funkcije\r\n    <code>PERCENTILE.INC</code> i <code>PERCENTILE.EXC</code>. Podrazumevano ponašanje podudara se sa <code>PercentileMode.ExcelInc</code>. Simboli\r\n    <code>PercentileMode.SqlCont</code> i <code>PercentileMode.SqlDisc</code> podudaraju se sa SQL Server ponašanjem za <code>PERCENTILE_CONT</code> i\r\n    <code>PERCENTILE_DISC</code>, tim redosledom.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje prvog kvartila sa liste <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Pronalaženje kvartila sa liste <code>{5, 3, 1, 7, 9} </code> pomoću metoda interpolacije koji se podudara sa <code>PERCENTILE.EXC</code> u programu Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Vraća pomak(e) vrednosti sa liste.",
        "Documentation.LongDescription": "Vraća pomak na kome se na listi <code>list</code> pojavljuje vrednost <code>value</code>. Vraća -1 ako se vrednost ne pojavljuje.\r\n    Može se navesti opcionalni parametar pojavljivanja <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Maksimalan broj pojavljivanja koji treba prijaviti.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje položaja na listi {1, 2, 3} na kome se pojavljuje vrednost 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Vraća prvi pomak vrednosti sa liste.",
        "Documentation.LongDescription": "Vraća pomak sa liste <code>list</code> prvog pojavljivanja vrednosti na listi <code>values</code>. Vraća -1 ako se ne pronađe pojavljivanje.\r\n    Može se navesti opcionalni parametar pojavljivanja <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Maksimalan broj pojavljivanja koji se može vratiti.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje prvog položaja na listi {1, 2, 3} na kome se pojavljuje vrednost 2 ili 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Vraća podskup liste koji počinje od pomaka.",
        "Documentation.LongDescription": "Vraća podskup liste koji počinje od pomaka <code>list</code>. Opcionalan parametar, <code>offset</code>, određuje maksimalan broj stavki u podskupu.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje podskupa koji počinje od pomaka 6 na listi brojeva od 1 do 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Pronalaženje podskupa dužine 2 od pomaka 6 na listi brojeva od 1 do 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Uklanja stavke iz liste 1 koje su prisutne na listi.",
        "Documentation.LongDescription": "Uklanja sva pojavljivanja datih vrednosti u <code>list2</code> iz <code>list1</code>. Ako vrednosti iz <code>list2</code> ne postoje u <code>list1</code>, vraća se prvobitna lista.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje stavki sa liste {2, 4, 6} iz liste {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Uklanja sva pojavljivanja ulaznih vrednosti.",
        "Documentation.LongDescription": "Uklanja sva pojavljivanja datih vrednosti u <code>list2</code> iz liste <code>list1</code>. Ako vrednosti iz <code>list2</code> ne postoje u <code>list1</code>, vraća se prvobitna lista.\r\n    Može se navesti opcionalna vrednost kriterijuma jednakosti, <code>equationCriteria</code>, radi kontrole testiranja jednakosti. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od {1, 2, 3, 4, 5, 5} bez {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Uklanja „count“ broj vrednosti počev od navedenog položaja.",
        "Documentation.LongDescription": "Uklanja <code>count</code> vrednosti u <code>list</code> počev od navedenog položaja, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje 3 vrednosti sa liste {1, 2, 3, 4, -6, -2, -1, 5} počev od indeksa 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Vraća listu koja sadrži „count“ ponavljanja iz prvobitne liste.",
        "Documentation.LongDescription": "Vraća listu koja sadrži <code>count</code> ponavljanja iz prvobitne liste, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste u kojoj se {1, 2} ponavlja 3 puta.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Primenjuje svaku zamenu za { old, new }.",
        "Documentation.LongDescription": "Obavlja date zamene u okviru liste <code>list</code>. Operacija zamene <code>replacements</code> se sastoji od liste sa dve vrednosti, stare i nove vrednosti, navedenih u obliku liste.\r\n    Može se navesti opcionalna vrednost kriterijuma jednakosti, <code>equationCriteria</code>, radi kontrole testiranja jednakosti.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od {1, 2, 3, 4, 5}, pri čemu se vrednost 5 zamenjuje sa -5, a vrednost 1 sa -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Vraća listu vrednosti koje se podudaraju sa uslovom.",
        "Documentation.LongDescription": "Vraća listu vrednosti sa liste <code>list</code>, koje se podudaraju sa uslovom izbora <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje vrednosti sa liste {1, -3, 4, 9, -2} koje su veće od 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Deli navedenu listu na listu lista koristeći navedenu veličinu stranice.",
        "Documentation.LongDescription": "Deli <code>list</code> na listu lista gde je prvi element izlazne liste lista koja sadrži prvih <code>pageSize</code>elemenata sa\r\n    liste izvora, sledeći element izlazne liste je lista koja sadrži sledećih <code>pageSize</code>elemenata sa liste izvora, i tako dalje.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Vraća novu listu vrednosti izračunatih na osnovu ove liste.",
        "Documentation.LongDescription": "Vraća novu listu vrednosti primenom funkcije transformacije <code>transform</code> na listu, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Dodavanje 1 svakoj vrednosti sa liste {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Vraća arkus tangens za deljenje dva broja.",
        "Documentation.LongDescription": "Vraća arkus tangens za deljenje dva broja, <code>y</code> i <code>x</code>. Deljenje će se konstruisati na sledeći način: <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Vraća rezultat izvršavanja operacije „And“ na nivou bita između dva unosa.",
        "Documentation.LongDescription": "Vraća rezultat izvršavanja operacije „And“ na nivou bita između <code>number1</code> i <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Vraća rezultat izvršavanja operacije „Or“ na nivou bita između dva unosa.",
        "Documentation.LongDescription": "Vraća rezultat izvršavanja operacije „Or“ na nivou bita između <code>number1</code> i <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Pomera skup bitova ulevo.",
        "Documentation.LongDescription": "Vraća rezultat izvršavanja pomeranja ulevo na nivou bita na <code>number1</code>, za navedeni broj bitova <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Pomera skup bitova udesno.",
        "Documentation.LongDescription": "Vraća rezultat izvršavanja pomeranja udesno na nivou bita na <code>number1</code>, za navedeni broj bitova <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Vraća rezultat izvršavanja operacije „XOR“ (isključivo OR) na nivou bita između dva unosa.",
        "Documentation.LongDescription": "Vraća rezultat izvršavanja operacije „XOR“ (isključivo OR) na nivou bita između <code>number1</code> i <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Vraća broj jedinstvenih kombinacija.",
        "Documentation.LongDescription": "Vraća broj jedinstvenih kombinacija sa liste stavki, <code>setSize</code> sa navedenom veličinom kombinacije, <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Broj stavki na listi.</li>\r\n    <li><code>combinationSize</code>: Broj stavki u svakoj kombinaciji.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje broja kombinacija od ukupno 5 stavki kada svaka kombinacija predstavlja grupu od 3.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Deli dva broja i vraća deo rezultata koji je ceo broj.",
        "Documentation.LongDescription": "Deli broj, <code>number1</code>, drugim brojem, <code>number2</code>, i vraća deo rezultata koji je ceo broj.\r\n    Ako su <code>number1</code> ili <code>number2</code> bez vrednosti, <code>Number.IntegerDivide</code> vraća rezultat bez vrednosti.\r\n      <ul>\r\n        <li><code>number1</code>: Deljenik.</li>\r\n        <li><code>number2</code>: Delilac.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Deljenje 6 sa 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Deljenje 8,3 sa 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Ceo broj deli dva broja i vraća ostatak.",
        "Documentation.LongDescription": "Ceo broj deli <code>number</code> sa <code>divisor</code> i vraća ostatak.\r\n    Ako su <code>number</code> ili <code>divisor</code> bez vrednosti, <code>Number.Mod</code> vraća rezultat bez vrednosti.\r\n      <ul>\r\n        <li><code>number</code>: Deljenik.</li>\r\n        <li><code>divisor</code>: Delilac.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje ostatka prilikom deljenja 5 sa 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Vraća broj permutacija.",
        "Documentation.LongDescription": "Vraća broj permutacija koje se mogu generisati od broja stavki, <code>setSize</code>, sa navedenom veličinom permutacije, <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje broja permutacija od ukupno 5 stavki u grupama od 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Podiže broj na dati stepen.",
        "Documentation.LongDescription": "Vraća rezultat podizanja <code>number</code> na stepen <code>power</code>. \r\n    Ako su <code>number</code> ili <code>power</code> bez vrednosti, <code>Number.Power</code> vraća rezultat bez vrednosti.\r\n      <ul>\r\n        <li><code>number</code>: Osnova.</li>\r\n        <li><code>power</code>: Eksponent.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje vrednosti broja 5 podignutog na treći stepen (5 na kub).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Vraća nasumičan broj između dva broja.",
        "Documentation.LongDescription": "Vraća nasumičan broj između <code>bottom</code> i <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Dobijanje nasumičnog broja između 1 i 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Vraća vrednost navedenog polja u zapisu.",
        "Documentation.LongDescription": "Vraća vrednost navedenog <code>field</code> u <code>record</code>. Ako se polje ne pronađe, vraća se izuzetak.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje vrednosti polja „IDKupca“ u zapisu.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Vraća vrednost navedenog polja u zapisu ili podrazumevane vrednosti ako se polje ne pronađe.",
        "Documentation.LongDescription": "Vraća vrednost navedenog polja <code>field</code> u zapisu <code>record</code>. Ako se polje ne pronađe, vraća se opcionalna vrednost <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje vrednosti polja „Telefon“ u zapisu ili vraćanje vrednosti bez vrednosti ako polje ne postoji.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Pronalaženje vrednosti polja „Telefon“ u zapisu ili vraćanje podrazumevane vrednosti ako polje ne postoji.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Vraća zapis na osnovu liste vrednosti polja i skupa polja.",
        "Documentation.LongDescription": "Vraća zapis na osnovu <code>list</code> vrednosti polja i skupa polja.  <code>fields</code> može da navede lista tekstualnih vrednosti ili tip zapisa.  Ako polja nisu jedinstvena, dolazi do greške.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Formiranje zapisa od liste vrednosti polja i liste imena polja.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Formiranje zapisa od liste vrednosti polja i tipa zapisa.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Pokazuje da li zapis sadrži navedena polja.",
        "Documentation.LongDescription": "Pokazuje da li zapis <code>record</code> sadrži polja navedena u <code>fields</code>, tako što vraća logičku vrednost („true“ ili „false“).\r\n    Moguće je navesti više vrednosti polja pomoću liste.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Proveravanje da li zapis sadrži polje „IDKupca“.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Proveravanje da li zapis sadrži polja „IDKupca“ i „Adresa“.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Uklanja navedena polja iz ulaznog zapisa.",
        "Documentation.LongDescription": "Vraća zapis koji uklanja sva polja navedena na listi <code>fields</code> iz unosa <code>record</code>. Ako navedeno polje ne postoji, vraća se izuzetak.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje polja „Cena“ iz zapisa.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Uklanjanje polja „Cena“ i „Stavka“ iz zapisa.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Primenjuje preimenovanja sa liste u obliku { old, new }.",
        "Documentation.LongDescription": "Vraća zapis nakon preimenovanja polja iz unosa <code>record</code> u nova imena polja navedena na listi <code>renames</code>. Za više preimenovanja se može koristiti ugnežđena lista ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preimenovanje polja „JediničnaCena“ u „Cena“ iz zapisa.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Preimenovanje polja „JediničnaCena“ u „Cena“ i „BrPorudžbine“ u „IDPorudžbine“ iz zapisa.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Preuređivanje navedenih polja u novi redosled.",
        "Documentation.LongDescription": "Vraća zapis nakon preuređivanja polja iz <code>record</code> u redosled polja naveden na listi <code>fieldOrder</code>. Vrednosti polja se zadržavaju, dok se polja koja nisu navedena u <code>fieldOrder</code> ostavljaju u prvobitnom položaju.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preuređivanje nekih polja iz zapisa.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Vraća zapis koji sadrži samo navedena polja.",
        "Documentation.LongDescription": "Vraća zapis koji obuhvata samo polja navedena na listi <code>fields</code> iz unosa <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Biranje polja „Stavka“ i „Cena“ iz zapisa.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Vraća zapis nakon primene navedenih transformacija.",
        "Documentation.LongDescription": "Vraća zapis nakon primene transformacija navedenih na listi <code>transformOperations</code> na <code>record</code>.\r\n    U datom trenutku se može transformisati jedno ili više polja.\r\n      <div>U slučaju da se transformiše jedno polje, očekuje se da će <code>transformOperations</code> biti lista sa dve stavke. Prva stavka iz <code>transformOperations</code> navodi ime polja, dok druga stavka iz <code>transformOperations</code> navodi funkciju koja će se koristiti za transformaciju. Na primer, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>U slučaju da se transformiše više polja, očekuje se da će <code>transformOperations</code> biti lista koja se sastoji od lista, pri čemu je svaka unutrašnja lista zapravo kombinacija imena polja i operacije transformacije. Na primer, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte polje „Cena“ u broj.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Konvertujte polja „ID porudžbine“ i „Cena“ u brojeve.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Vraća funkciju koja deli tekst na listu teksta u skladu sa prelazom sa jedne vrste znaka na drugu. Parametri {0} i {1} mogu da budu lista znakova ili funkcija koja uzima znak i vraća vrednost true/false.",
        "Documentation.LongDescription": "Vraća funkciju koja deli tekst na listu teksta u skladu sa prelazom sa jedne vrste znaka na drugu. Parametri <code>before</code> i <code>after</code> mogu da budu lista znakova ili funkcija koja uzima znak i vraća vrednost true/false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite unos svaki put kada sledi veliko ili malo slovo praćeno cifrom.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Konvertuje navedeni SQL upit u M kôd. Ova funkcija je namenjena samo za internu upotrebu.",
        "Documentation.LongDescription": "Konvertuje navedeni <code>sql</code> upit u M kôd, sa dostupnim identifikatorima koje definiše <code>environment</code>. Ova funkcija je namenjena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Vraća navedenu kolonu sa podacima iz tabele u vidu liste.",
        "Documentation.LongDescription": "Vraća kolonu sa podacima koju navodi <code>column</code> iz tabele <code>table</code> u vidu liste.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vraća vrednosti iz kolone [Ime] iz tabele.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Vraća listu sa imenima kolona koje se podudaraju sa navedenim tipovima.",
        "Documentation.LongDescription": "Vraća listu sa imenima kolona iz tabele <code>table</code>, koja se podudaraju sa tipovima navedenim u okviru <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje imena kolona tipa Number.Type iz tabele.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Pokazuje da li se navedeni zapis pojavljuje kao red u tabeli.",
        "Documentation.LongDescription": "Pokazuje da li se navedeni zapis, <code>row</code>, pojavljuje kao red u <code>table</code>.\r\n    Može se navesti opcionalni parametar <code>equationCriteria</code> radi kontrole poređenja redova iz tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li tabela sadrži red.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Utvrđivanje da li tabela sadrži red.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Utvrđivanje da li tabela sadrži red poređenjem samo kolone [Ime].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Pokazuje da li se svi navedeni zapisi pojavljuju kao redovi u tabeli.",
        "Documentation.LongDescription": "Pokazuje da li se svi navedeni zapisi sa liste zapisa <code>rows</code> pojavljuju kao redovi u <code>table</code>.\r\n    Može se navesti opcionalni parametar <code>equationCriteria</code> radi kontrole poređenja redova iz tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Utvrdite da li tabela sadrži sve redove poređenjem samo kolone [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Utvrđivanje da li tabela sadrži sve redove.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Pokazuje da li se bilo koji navedeni zapis pojavljuje kao red u tabeli.",
        "Documentation.LongDescription": "Pokazuje da li se bilo koji navedeni zapis sa liste zapisa <code>rows</code> pojavljuje kao red u <code>table</code>.\r\n    Može se navesti opcionalni parametar <code>equationCriteria</code> radi kontrole poređenja redova iz tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> sadrži redove <code>[a = 1, b = 2]</code> ili <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Utvrđivanje da li tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> sadrži redove <code>[a = 1, b = 3]</code> ili <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Utvrđivanje da li tabela <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> sadrži redove <code>[a = 1, b = 3]</code> ili <code>[a = 3, b = 5]</code> poređenjem samo kolone [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Ukazuje na to da li tabela sadrži navedenu(e) kolonu(e).",
        "Documentation.LongDescription": "Pokazuje da li <code>table</code> sadrži navedene kolone, <code>columns</code>. Vraća <code>true</code> ako tabela sadrži kolonu(e). <code>false</code>u suprotnom.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li tabela sadrži kolonu [Ime].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Otkrivanje da li tabela sadrži kolone [Ime] i [BrojTelefona].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Pokazuje da li svi redovi iz tabele zadovoljavaju dati uslov.",
        "Documentation.LongDescription": "Pokazuje da li se svi redovi iz <code>table</code> podudaraju sa datim <code>condition</code>. Vraća <code>true</code> ako se svi redovi podudaraju. U suprotnom vraća <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li su sve vrednosti redova iz kolone [a] parne u tabeli.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Pronalaženje da li su sve vrednosti redova [a = 1, b = 2], u tabeli <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Pokazuje da li bilo koji red iz tabele zadovoljava dati uslov.",
        "Documentation.LongDescription": "Pokazuje da li se bilo koji red iz <code>table</code> podudara sa datim <code>condition</code>. Vraća <code>true</code> ako se bilo koji red podudara. U suprotnom vraća <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je bilo koja vrednost reda iz kolone [a] parna u tabeli <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Utvrđivanje da li je bilo koja vrednost reda [a = 1, b = 2], u tabeli <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Vraća najveći red ili podrazumevanu vrednost na osnovu datih kriterijuma.",
        "Documentation.LongDescription": "Vraća najveći red u <code>table</code>, na osnovu <code>comparisonCriteria</code>. Ako je tabela prazna, vraća se opcionalna vrednost <code>default</code>. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje reda sa najvećom vrednošću u koloni [a] u tabeli <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Pronalaženje reda sa najvećom vrednošću u koloni [a] u tabeli <code>({})</code>. Ako je tabela prazna, vraća se -1.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Vraća najmanji red ili podrazumevanu vrednost na osnovu datih kriterijuma.",
        "Documentation.LongDescription": "Vraća najmanji red u <code>table</code>, na osnovu <code>comparisonCriteria</code>. Ako je tabela prazna, vraća se opcionalna vrednost <code>default</code>.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje reda sa najmanjom vrednošću u koloni [a] u tabeli.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Pronalaženje reda sa najmanjom vrednošću u koloni [a] u tabeli. Ako je tabela prazna, vraća se -1.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Vraća položaj ili položaje reda u okviru tabele.",
        "Documentation.LongDescription": "Vraća položaj reda prvog pojavljivanja za <code>row</code> u navedenom <code>table</code>. Vraća -1 ako se ne pronađe pojavljivanje.\r\n    <ul>\r\n       <li><code>table</code>: Ulazna tabela.</li>\r\n       <li><code>row</code>: Red iz tabele čiji položaj treba pronaći.</li>\r\n       <li><code>occurrence</code>: <i>[Optional]</i> Navodi koja pojavljivanja reda treba vratiti.</li>\r\n       <li><code>equationCriteria</code>: <i>[Optional]</i> Kontroliše poređenje redova iz tabele.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje položaja prvog pojavljivanja za [a = 2, b = 4] u tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Pronalaženje položaja drugog pojavljivanja za [a = 2, b = 4] u tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Pronalaženje položaja svih pojavljivanja za [a = 2, b = 4] u tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Vraća položaj ili položaje bilo kog navedenog reda u okviru tabele.",
        "Documentation.LongDescription": "Vraća položaje redova iz <code>table</code> za prvo pojavljivanje liste sa <code>rows</code>. Vraća -1 ako se ne pronađe pojavljivanje.\r\n    <ul>\r\n    <li><code>table</code>: Ulazna tabela.</li>\r\n       <li><code>rows</code>:  Lista redova iz tabele čiji položaj treba pronaći.</li>\r\n       <li><code>occurrence</code>: <i>[Optional]</i> Navodi koja pojavljivanja reda treba vratiti.</li>\r\n       <li><code>equationCriteria</code>: <i>[Optional]</i> Kontroliše poređenje redova iz tabele.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje položaja prvog pojavljivanja za [a = 2, b = 4] ili [a = 6, b = 8] u tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Pronalaženje položaja svih pojavljivanja za [a = 2, b = 4] ili [a = 6, b = 8] u tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Deli navedenu tabelu na listu tabela koristeći navedenu veličinu stranice.",
        "Documentation.LongDescription": "Deli <code>table</code> na listu tabela gde je prvi element liste tabela koja sadrži prvih <code>pageSize</code> redova iz\r\n    izvorne tabele, sledeći element liste je tabela koja sadrži sledećih <code>pageSize</code> redova iz izvorne tabele, i tako dalje.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Podelite tabelu sa pet zapisa na tabele sa po dva zapisa.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Vraća listu koja sadrži prve navedene redove i preostale redove.",
        "Documentation.LongDescription": "Vraća listu koja sadrži dve tabele: tabelu sa prvih N redova od<code>table</code> (kao što je navedeno u polju <code>count</code>) i tabelu koja sadrži preostale redove <code>table</code>.\r\n\r\nAko se tabele rezultirajuće liste navedu tačno jednom i po redu funkcija će nabrojati <code>table</code> samo jednom.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vratite prva dva reda i preostale redove tabele.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Transformiše redove iz tabele pomoću navedene funkcije transformacije.",
        "Documentation.LongDescription": "Kreira <code>list</code> tako što će primeniti operaciju <code>transform</code> na svaki red u <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformišite redove tabele u listu brojeva.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Transformišite redove numeričke tabele u tekstualne zapise.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Vraća deo stavke <code>text</code> nakon navedenog <code>delimiter</code>.\r\n    Opcionalni broj <code>index</code> pokazuje koje pojavljivanje stavke <code>delimiter</code> treba uzeti u obzir.\r\n    Opcionalna lista <code>index</code> pokazuje koje pojavljivanje stavke <code>delimiter</code> treba uzeti u obzir, kao i da li indeksiranje treba obaviti od početka ili kraja unosa.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite deo „111-222-333“ posle (prve) crtice.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Preuzmite deo „111-222-333“ posle druge crtice.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Preuzmite deo „111-222-333“ posle druge crtice od kraja.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Vraća znak koji se nalazi na navedenom položaju.",
        "Documentation.LongDescription": "Vraća znak iz tekstualne vrednosti <code>text</code>, koji se nalazi na položaju <code>index</code>. Prvi znak u tekstu se nalazi na položaju 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje znaka na položaju 4 u okviru niske „Hello, World“.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Vraća deo stavke <code>text</code> pre navedenog <code>delimiter</code>.\r\n    Opcionalni broj <code>index</code> pokazuje koje pojavljivanje stavke <code>delimiter</code> treba uzeti u obzir.\r\n    Opcionalna lista <code>index</code> pokazuje koje pojavljivanje stavke <code>delimiter</code> treba uzeti u obzir, kao i da li indeksiranje treba obaviti od početka ili kraja unosa.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite deo „111-222-333“ pre (prve) crtice.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Preuzmite deo „111-222-333“ pre druge crtice.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Preuzmite deo „111-222-333“ pre druge crtice od kraja.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Pokazuje da li tekst sadrži podnisku.",
        "Documentation.LongDescription": "Otkriva da li <code>text</code> sadrži vrednost <code>substring</code>. Vraća vrednost „true“ ako se pronađe vrednost. Ova funkcija ne podržava džoker znakove ili regularne izraze.\r\n      <br>\r\n      <br>\r\n      Opcionalni argument <code>comparer</code> može da se koristi za navođenje poređenja koja ne razlikuju mala i velika slova ili poređenja koja se razlikuju od kulture i lokalnih standarda.\r\n      Sledeći ugrađeni upoređivači su dostupni na jeziku formule:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Koristi se za izvršavanje rednih poređenja koja razlikuju velika i mala slova</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Koristi se za izvršavanje rednih poređenja koja razlikuju velika i mala slova</li>\r\n        <li> <code>Comparer.FromCulture</code>: Koristi se za izvršavanje poređenja usklađeno sa kulturom</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Otkrivanje da li tekst „Hello World“ sadrži „Hello“.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Otkrivanje da li tekst „Hello World“ sadrži „hello“.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Pronađite da li tekst „Zdravo, svete“ sadrži „zdravo“, koristeći upoređivač koji ne razlikuje mala i velika slova.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Vraća poslednje znakove iz teksta.",
        "Documentation.LongDescription": "Vraća <code>text</code> vrednost koja predstavlja poslednjih <code>count</code> znakova <code>text</code> vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Preuzimanje poslednjih 5 znakova iz teksta „Hello, World“.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Pokazuje da li se tekst završava navedenom vrednošću.",
        "Documentation.LongDescription": "Pokazuje da li se dati tekst, <code>text</code>, završava navedenom vrednošću, <code>substring</code>. Indikacija razlikuje mala i velika slova.\r\n\r\n      <div>\r\n        <code>comparer</code>predstavlja <code>Comparer</code> koji se koristi za kontrolisanje poređenja. Upoređivači mogu da se koriste za obezbeđivanje poređenja koja ne razlikuju mala i velika slova ili nisu usklađena sa kulturom odnosno lokalnim standardom.\r\n      </div>\r\n      <div>\r\n        Sledeći ugrađeni upoređivači dostupni su na jeziku formule:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Koristi se za izvršavanje tačnog poređenja zasnovanog na redosledu znakova</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Koristi se za izvršavanje tačnog poređenja zasnovanog na redosledu znakova, koje ne razlikuje mala i velika slova</li>\r\n        <li> <code>Comparer.FromCulture</code>: Koristi se za izvršavanje poređenja usklađenog sa kulturom</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Provera da li se „Hello, World“ završava sa „world“.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Provera da li se „Hello, World“ završava sa „World“.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Vraća oblikovani tekst iz niske za oblikovanje i argumenata.",
        "Documentation.LongDescription": "Vraća oblikovani tekst koji se pravi tako što se primeni <code>arguments</code> sa liste zapisa na nisku za oblikovanje <code>formatString</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Oblikujte kao listu brojeva.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Oblikujte različite tipove podataka iz zapisa u skladu sa kulturom engleskog jezika (Sjedinjene Države).",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Vraća podnisku do određene dužine.",
        "Documentation.LongDescription": "Vraća <code>count</code> znakova ili do kraja <code>text</code>; na pomaku <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Pronađite podnisku iz teksta „Zdravo svete“ počev od indeksa 6, koja sadrži 5 znakova.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Pronađite podnisku iz teksta „Zdravo svete“ počev od indeksa 6 pa do kraja.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Vraća tekst navedene dužine popunjavanjem kraja datog teksta.",
        "Documentation.LongDescription": "Vraća <code>text</code> vrednost popunjenu do dužine <code>count</code> umetanjem razmaka pred kraj tekstualne vrednosti <code>text</code>.\r\n    Može se koristiti opcionalni znak <code>character</code> da bi se naveo znak koji se koristi za popunjavanje. Podrazumevani znak za popunjavanje je razmak.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Popunjavanje kraja tekstualne vrednosti tako da bude dužine 10 znakova.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Popunjavanje kraja tekstualne vrednosti pomoću „|“ tako da bude dužine 10 znakova.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Vraća tekst navedene dužine popunjavanjem početka datog teksta.",
        "Documentation.LongDescription": "Vraća <code>text</code> vrednost popunjenu do dužine <code>count</code> umetanjem razmaka na početku tekstualne vrednosti <code>text</code>.\r\n    Može se koristiti opcionalni znak <code>character</code> da bi se naveo znak koji se koristi za popunjavanje. Podrazumevani znak za popunjavanje je razmak.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Popunjavanje početka tekstualne vrednosti tako da bude dužine 10 znakova.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Popunjavanje početka tekstualne vrednosti pomoću „|“ tako da bude dužine 10 znakova.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Vraća prvi položaj vrednosti (ako se ne pronađe, vraća se -1).",
        "Documentation.LongDescription": "Vraća položaj navedenog pojavljivanja tekstualne vrednosti <code>substring</code> pronađene u <code>text</code>.\r\n    Moguće je koristiti opcionalni parametar <code>occurrence</code> kako bi se navelo koji položaj pojavljivanja treba vratiti (podrazumevano je to prvo pojavljivanje).\r\n    Vraća -1 ako se ne pronađe <code>substring</code>.\r\n\r\n      <div>\r\n         <code>comparer</code> predstavlja <code>Comparer</code> koji se koristi za kontrolu poređenja. Upoređivači mogu da se koriste za obezbeđivanje poređenja koja ne razlikuju mala i velika slova ili onih koja su usklađena sa kulturom i lokalnim standardom.\r\n      </div>\r\n      <div>\r\n        Sledeći ugrađeni upoređivači su dostupni na jeziku formule:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Koristi se za izvršavanje tačnog poređenja zasnovanog na redosledu znakova</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Koristi se za izvršavanje tačnog poređenja zasnovanog na redosledu znakova koje ne razlikuje mala i velika slova</li>\r\n        <li> <code>Comparer.FromCulture</code>: Koristi se za izvršavanje poređenja usklađenog sa kulturom</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Preuzimanje položaja prvog pojavljivanja niske „World“ u tekstu „Hello, World! Hello, World!“.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Preuzimanje položaja poslednjeg pojavljivanja niske „World“ u tekstu „Hello, World! Hello, World!“.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Vraća prvi položaj u tekstualnoj vrednosti za bilo koji navedeni znak (ako se ne pronađe, vraća se -1).",
        "Documentation.LongDescription": "Vraća prvi položaj bilo kog znaka na listi <code>characters</code> koji se nalazi u <code>text</code>.\n    Opcionalni parametar <code>occurrence</code> može da se koristi za navođenje pozicije pojavljivanja za vraćanje.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Pronađite prvi položaj slova „W“ ili „H“ u tekstu „Hello, World!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Pronađite sve položaje slova „W“ ili „H“ u tekstu „Hello, World!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Vraća podnisku pronađenu kod pomaka.",
        "Documentation.LongDescription": "Vraća podnisku iz teksta <code>text</code> pronađenu kod pomaka <code>offset</code>.\r\n    Može se navesti opcionalni parametar, <code>count</code>, da bi se navelo koliko znakova treba vratiti. Vraća grešku ako nema dovoljno znakova.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje podniske iz teksta „Hello World“ počev od indeksa 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Pronalaženje podniske iz teksta „Hello World Hello“ počev od indeksa 6 uz obuhvatanje 5 znakova.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Uklanja sva pojavljivanja datog znaka ili liste znakova iz ulazne tekstualne vrednosti.",
        "Documentation.LongDescription": "Vraća kopiju tekstualne vrednosti <code>text</code> iz koje su uklonjeni svi znakovi iz <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje znakova , i ; iz tekstualne vrednosti.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Uklanja broj znakova počev od datog pomaka",
        "Documentation.LongDescription": "Vraća kopiju tekstualne vrednosti <code>text</code> iz koje su uklonjeni svi znakovi sa položaja <code>offset</code>.\r\n    Može se koristiti opcionalni parametar, <code>count</code>, da bi se naveo broj znakova koje treba ukloniti. Podrazumevana vrednost za <code>count</code> je 1. Vrednosti položaja počinju od 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje 1 znaka iz tekstualne vrednosti „ABEFC“ na položaju 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Uklanjanje dva znaka iz tekstualne vrednosti „ABEFC“ počev od položaja 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Vraća tekstualnu vrednost koja se sastoji od ulaznog teksta ponovljenog navedeni broj puta.",
        "Documentation.LongDescription": "Vraća tekstualnu vrednost koja se sastoji od ulaznog teksta <code>text</code> ponovljenog <code>count</code> puta.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ponavljanje teksta „a“ pet puta.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Ponavljanje teksta „helloworld“ tri puta.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Bira sva pojavljivanja datog znaka ili liste znakova iz ulazne tekstualne vrednosti.",
        "Documentation.LongDescription": "Vraća kopiju tekstualne vrednosti <code>text</code> iz koje su uklonjeni svi znakovi koji nisu u <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Bira sve znakove iz opsega od „a“ do „ž“ iz tekstualne vrednosti.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Deli tekst na listu tekstualnih vrednosti na osnovu navedenog znaka za razgraničavanje.",
        "Documentation.LongDescription": "Vraća listu tekstualnih vrednosti koje nastaju kao rezultat razdvajanja tekstualne vrednosti <code>text</code> na osnovu navedenog znaka za razgraničavanje, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od tekstualne vrednosti „Name|Address|PhoneNumber“ razgraničene pomoću znaka „|“.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Vraća listu tekstualnih vrednosti, podeljenu kod bilo kog znaka u okviru znaka za razgraničavanje.",
        "Documentation.LongDescription": "Vraća listu tekstualnih vrednosti koje nastaju kao rezultat podele tekstualne vrednosti <code>text</code> na osnovu bilo kog znaka u okviru navedenog znaka za razgraničavanje, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od tekstualne vrednosti „Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com“.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Vraća početak teksta.",
        "Documentation.LongDescription": "Vraća prvi <code>count</code> znak iz <code>text</code> kao tekstualnu vrednost.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Preuzimanje prvih 5 znakova iz teksta „Hello, World“.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Pokazuje da li tekst počinje navedenom vrednošću.",
        "Documentation.LongDescription": "Vraća „true“ ako tekstualna vrednost <code>text</code> počinje tekstualnom vrednošću <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> <code>text</code> vrednost koju treba tražiti</li>\r\n        <li><code>substring</code>: <i></i> <code>text</code> vrednost koja predstavlja podnisku koju treba tražiti u <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Optional]</i> <code>Comparer.OrdinalIgnoreCase</code> koji se koristi za kontrolu poređenja. Na primer, <code>Comparer.IgnoreCase</code> se može koristiti za obavljanje pretraga kod kojih se ne razlikuju mala i velika slova</li>\r\n      </ul>\r\n      <div>\r\n         <code>comparer</code> predstavlja <code>Comparer</code> koji se koristi za kontrolu poređenja. Upoređivači se mogu koristiti za poređenja kod kojih se ne razlikuju mala i velika slova ili poređenja usklađena sa kulturom i lokalnim standardom.\r\n      </div>\r\n      <div>\r\n        Sledeći ugrađeni upoređivači dostupni su na jeziku formule:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Koristi se za izvršavanje tačnog poređenja zasnovanog na redosledu znakova</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Koristi se za izvršavanje tačnog poređenja zasnovanih na redosledu znakova, koje ne razlikuje mala i velika slova</li>\r\n        <li> <code>Comparer.FromCulture</code>: Koristi se za izvršavanje poređenja usklađenog sa kulturom</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Provera da li tekst „Hello, World“ počinje tekstom „hello“.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Provera da li tekst „Hello, World“ počinje tekstom „Hello“.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Vraća tip koji predstavlja funkcije sa određenim ograničenjima parametara i tipova vraćanja.",
        "Documentation.LongDescription": "Pravi <code>function type</code> od <code>signature</code>, zapis za <code>ReturnType</code> i <code>Parameters</code>, kao i <code>min</code>, minimalni broj argumenata potreban za pozivanje funkcije.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pravi tip za funkciju koja koristi parametar broja pod imenom X i vraća broj.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Vraća tip koji predstavlja zapise sa određenim ograničenjima tipova na poljima.",
        "Documentation.LongDescription": "Vraća tip koji predstavlja zapise sa određenim ograničenjima tipova na poljima.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Dinamički generišite tip tabele.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Određuje da li je vrednost prvog tipa uvek kompatibilna sa vrednošću drugog tipa.",
        "Documentation.LongDescription": "Određuje da li je vrednost <code>type1</code> uvek kompatibilna sa vrednošću <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li vrednost tipa broja može uvek tretirati i kao bilo koja vrednost.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Odredite da li se vrednost bilo kog tipa može uvek tretirati i kao tip broja.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Zamenjuje aspekte tipa.",
        "Documentation.LongDescription": "Zamenjuje aspekte za <code>type</code> aspektima koji se nalaze u zapisu <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Vraća novi tip tabele kod koga su svi ključevi zamenjeni navedenom listom ključeva.",
        "Documentation.LongDescription": "Vraća novi tip tabele sa svim ključevima zamenjenim navedenom listom ključeva.<br>\r\n    <br>\r\n    Svaki ključ je definisan pomoću zapisa u sledećem obrascu:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: spisak imena kolona koje definišu ključ\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code> ako je ključ primarni ključ tabele; inače, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Proverena je valjanost navedene liste ključeva kako bi se osiguralo da nije definisano više od jednog primarnog ključa i da sva imena kolona ključa postoje u tipu tabele.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Zamenite ključne informacije o tipu tabele.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Obrišite informacije o ključu koje su prethodno definisane u tipu tabele.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Vraća tip kolone u tabeli.",
        "Documentation.LongDescription": "Vraća tip kolone <code>column</code> u tipu tabele <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Vraća apsolutni URI koji predstavlja kombinaciju ulaznog osnovnog URI identifikatora i relativnog URI identifikatora.",
        "Documentation.LongDescription": "Vraća apsolutni URI koji predstavlja kombinaciju ulaznog <code>baseUri</code> i <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Vraća zbir dve vrednosti.",
        "Documentation.LongDescription": "Vraća zbir <code>value1</code> i <code>value2</code>. Može se navesti opcionalni parametar <code>precision</code>. Podrazumevano se koristi <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Vraća vrednost ako je kompatibilna sa određenim tipom.",
        "Documentation.LongDescription": "Vraća vrednost ako je kompatibilna sa određenim tipom. Ovo je jednako \"as\" operatoru u M, sa izuzetkom da može da prihvati reference tipa identifikatora kao što je Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Konvertuj broj u broj.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Pokušaj konvertovanja tekstualne vrednosti u broj.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Vraća -1, 0 ili 1 na osnovu toga da li je prva vrednost manja od, jednaka ili veća od druge.",
        "Documentation.LongDescription": "Vraća -1, 0 ili 1 na osnovu toga da li je prva vrednost manja od, jednaka ili veća od druge.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Vraća rezultat deljenja prve vrednosti drugom.",
        "Documentation.LongDescription": "Vraća rezultat deljenja vrednosti <code>value1</code> vrednošću <code>value2</code>. Može se navesti opcionalni parametar <code>precision</code>. Podrazumevano se koristi <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Navodi da li su dve vrednosti jednake.",
        "Documentation.LongDescription": "Vraća „true“ ako je vrednost <code>value1</code> jednaka vrednosti <code>value2</code>. U suprotnom vraća „false“.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Određuje da li je vrednost kompatibilna sa određenim tipom.",
        "Documentation.LongDescription": "Određuje da li je vrednost kompatibilna sa određenim tipom. Ovo je jednako \"is\" operatoru u M, sa izuzetkom da može da prihvati reference tipa identifikatora kao što je Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Uporedite na dva načina da li je broj kompatibilan sa tipom broja.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Vraća proizvod dve vrednosti.",
        "Documentation.LongDescription": "Vraća proizvod množenja <code>value1</code> i <code>value2</code>. Može se navesti opcionalni parametar <code>precision</code>. Podrazumevano se koristi <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Procenjuje upit u odnosu na cilj.",
        "Documentation.LongDescription": "<p>Procenjuje <code>query</code> u odnosu na <code>target</code> pomoću parametara navedenih u <code>parameters</code> i opcija navedenih u <code>options</code>.</p>\r\n<p>Izlaz upita definiše <code>target</code>.</p>\r\n<p><code>target</code> obezbeđuje kontekst za operaciju koju opisuje <code>query</code>.</p>\r\n<p><code>query</code> opisuje upit koji treba izvršiti u odnosu na <code>target</code>. <code>query</code> se izražava na način specifičan za <code>target</code> (na primer, T-SQL izjava).</p>\r\n<p>Opcionalna <code>parameters</code> vrednost po potrebi može da sadrži listu ili zapis kako bi se navele vrednosti parametara koje očekuje <code>query</code>.</p>\r\n<p>Opcionalni <code>options</code> zapis može da sadrži opcije koje utiču na ponašanje procenjivanja <code>query</code> u odnosu na <code>target</code>. Ove opcije su specifične za <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Navodi da li su dve vrednosti jednake.",
        "Documentation.LongDescription": "Vraća rezultat bez vrednosti ako je bilo koji argument „<code>value1</code>“, „<code>value2</code>“ bez vrednosti. U suprotnom je ekvivalentno vrednosti Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Zamenjuje informacije o metapodacima iz unosa.",
        "Documentation.LongDescription": "Zamenjuje informacije o metapodacima iz unosa.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Zamenjuje tip vrednosti.",
        "Documentation.LongDescription": "Zamenjuje tip <code>value</code> navedenim <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Zamenite podrazumevani tip zapisa određenijim tipom.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Vraća razliku dve vrednosti.",
        "Documentation.LongDescription": "Vraća razliku <code>value1</code> i <code>value2</code>. Može se navesti opcionalni parametar <code>precision</code>. Podrazumevano se koristi <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Kreira radnju koja će, kad se izvrši, vratiti rezultate izvršavanja HTTP zahteva kao binarnu vrednost.",
        "Documentation.LongDescription": "Kreira radnju koja će, kada se izvrši, vratiti rezultate izvršavanja <code>method</code> u odnosu na <code>url</code> koristeći HTTP kao binarnu vrednost.\r\n    Može da se obezbedi opcionalni parametar zapisa, <code>options</code>, da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>Query</code> : Programski dodajte parametre upita u URL adresu bez potrebe da razmišljate o izbegavanju.</li>\r\n<li><code>ApiKeyName</code> : Ako ciljna lokacija ima zapis o API ključu, ovaj parametar se može koristiti za navođenje imena (ne vrednosti) parametra ključa koji mora da se koristi u URL adresi. Stvarna vrednost ključa je data u akreditivu.</li>\r\n<li><code>Headers</code> : Ako navedete ovu vrednost kao zapis, dodaćete zaglavlja u HTTP zahtev.</li>\r\n<li><code>Timeout</code> : Ako navedete ovu vrednost kao trajanje, promenićete vremensko ograničenje za HTTP zahtev. Podrazumevana vrednost je 100 sekundi.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Ako navedete ovu vrednost kao listu, ovi ključevi HTTP zaglavlja neće biti uključeni u izračunavanje za keširanje podataka.</li>\r\n<li><code>IsRetry</code> : Navođenjem ove logičke vrednosti kao tačne zanemarićete postojeći odgovor u keš memoriji prilikom preuzimanja podataka.</li>\r\n<li><code>ManualStatusHandling</code> : Ako navedete ovu vrednost kao listu, sprečićete ugrađenu obradu HTTP zahteva čiji odgovor ima jedan od ovih kodova statusa.</li>\r\n<li><code>RelativePath</code> : Ako navedete ovu vrednost kao tekst, dodaćete je u osnovnu URL adresu pre upućivanja zahteva.</li>\r\n<li><code>Content</code> : Ako navedete ovu vrednost, njen sadržaj će postati telo HTTP zahteva.</li>\r\n</ul>\r\n\r\n    <br>\r\n Imajte na umu da je ova funkcija onemogućena u većini konteksta. Razmotrite korišćenje Web.Contents ili Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Izvršite GET zahtev u odnosu na Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Unos URL-a krajnje tačke Azure Enterprise REST API-ja povezane sa upisnicom",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Vraća binarne rezultate poziva URL-a navedenog za Azure Enterprise API.",
        "Documentation.Examples": [
          {
            "Description": "Upotreba funkcije AzureEnterprise.Contents za vraćanje rezultata nekog konkretnog izveštaja.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Vraća sadržaj navedenog blob objekta iz Azure bezbednog skladišta.",
        "Documentation.LongDescription": "Vraća sadržaj blob objekta na URL adresi, <code>url</code>, iz Azure bezbednog skladišta. <code>options</code> se može navesti radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>BlockSize</code> : Broj bajtova koje treba pročitati pre čekanja na korisnika podataka. Podrazumevana vrednost je 4 MB.</li>\r\n<li><code>RequestSize</code> : Broj bajtova čije čitanje treba pokušati u jednom HTTP zahtevu koji se uputi serveru. Podrazumevana vrednost je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcija ConcurrentRequests podržava brže preuzimanje podataka time što navodi broj zahteva koje treba uputiti istovremeno, nezavisno od opterećenja memorije. Potrebna memorija je (ConcurrentRequest * RequestSize). Podrazumevana vrednost je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Vraća sadržaj navedene datoteke iz Azure Data Lake Storage sistema datoteka.",
        "Documentation.LongDescription": "Vraća sadržaj datoteke na URL adresi, <code>url</code>, iz Azure Data Lake Storage sistema datoteka. <code>options</code> se može navesti radi kontrole sledećih opcija:\r\n    <ul>\r\n<li><code>BlockSize</code> : Broj bajtova koje treba pročitati pre čekanja na korisnika podataka. Podrazumevana vrednost je 4 MB.</li>\r\n<li><code>RequestSize</code> : Broj bajtova čije čitanje treba pokušati u jednom HTTP zahtevu koji se uputi serveru. Podrazumevana vrednost je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcija ConcurrentRequests podržava brže preuzimanje podataka time što navodi broj zahteva koje treba uputiti istovremeno, nezavisno od opterećenja memorije. Potrebna memorija je (ConcurrentRequest * RequestSize). Podrazumevana vrednost je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Vraća približnu dužinu binarnog zapisa.",
        "Documentation.LongDescription": "Vraća približnu dužinu <code>binary</code>, ili grešku ako izvor podataka ne podržava približnu dužinu.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite približnu dužinu binarne vrednosti.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Baferuje binarnu vrednost u memoriju.",
        "Documentation.LongDescription": "Baferuje binarnu vrednost u memoriju. Rezultat ovog poziva je stabilna binarna vrednost, što znači da će imati determinističku dužinu i raspored bajtova.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje stabilne verzije binarne vrednosti.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Kombinuje listu binarnih vrednosti u jednu.",
        "Documentation.LongDescription": "Kombinuje listu binarnih vrednosti u jednu.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Kreira binarnu vrednost od date vrednosti",
        "Documentation.LongDescription": "Vraća <code>Binary</code> vrednost od datog <code>value</code>. Ako dati <code>value</code> predstavlja <code>null</code>, <code>Binary.From</code> vraća <code>null</code>.  Ako je <code>value</code> <code>binary</code> vrednost, vraća se <code>value</code>. Vrednosti sledećih tipova mogu se konvertovati u <code>binary</code> vrednost:\r\n      <ul>\r\n        <li><code>text</code>: <code>Binary</code> vrednost iz tekstualne reprezentacije. Pogledajte <code>Binary.FromText</code> za detalje.</li>\r\n      </ul>\r\nAko je <code>value</code> nekog drugog tipa, vraća se greška.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dobijanje <code>binary</code> vrednosti za <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Konvertuje listu brojeva u binarnu vrednost.",
        "Documentation.LongDescription": "Konvertuje listu brojeva u binarnu vrednost.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Dekodira podatke iz tekstualne forme u binarnu.",
        "Documentation.LongDescription": "Vraća rezultat konvertovanja tekstualne vrednosti <code>text</code> u binarnu (lista <code>number</code>). <code>encoding</code> može da bude navedena da bi ukazivala na kodiranje koje se koristi u tekstualnoj vrednosti.\r\n      Sledeće <code>BinaryEncoding</code> vrednosti se mogu koristiti za <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 kodiranje</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Heksadecimalno kodiranje</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekodiranje sekvence „1011“ u binarni oblik.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Dekodiranje sekvence „1011“ u binarni oblik pomoću heksadecimalnog kodiranja.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Čita binarni tok i pokušava da utvrdi tip sadržaja i informacije o formatu toka.",
        "Documentation.LongDescription": "Vraća zapis sa poljem Content.Type koje sadrži utvrđeni MIME tip.\r\n    Ako je utvrđeni tip sadržaja tekst/* i ako se otkrije kodna stranica za kodiranje, vraća i polje Content.Encoding, koje sadrži kodiranje toka.\r\n    Ako je utvrđeni tip sadržaja tekst/csv, a format je razgraničen, vraća i polje Csv.PotentialDelimiter, koje sadrži tabelu za analizu potencijalnih znakova za razgraničavanje.\r\n    Ako je utvrđeni tip sadržaja tekst/csv, a format je fiksne širine, vraća i polje Csv.PotentialPositions, koje sadrži listu za analizu potencijalnih položaja kolona fiksne širine.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Vraća broj znakova.",
        "Documentation.LongDescription": "Vraća broj znakova.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Konvertuje binarnu vrednost u listu brojeva.",
        "Documentation.LongDescription": "Konvertuje binarnu vrednost u listu brojeva.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Kodira binarne podatke u tekstualni oblik.",
        "Documentation.LongDescription": "Vraća rezultat konvertovanja binarne liste brojeva <code>binary</code> u tekstualnu vrednost. Opcionalno, <code>encoding</code> može da bude naveden da bi ukazivao na kodiranje koje treba koristiti u dobijenoj tekstualnoj vrednosti\r\n      Sledeće <code>BinaryEncoding</code> vrednosti se mogu koristiti za <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 kodiranje</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Heksadecimalno kodiranje</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Kreira izmenjeni zapis o grešci koji neće aktivirati vraćanje kada ga izbaci rukovalac definisan u prikazu (putem funkcije Binary.View).",
        "Documentation.LongDescription": "Kreira izmenjeni zapis o grešci iz <code>errorRecord</code> koji neće aktivirati vraćanje kada ga izbaci rukovalac definisan u prikazu (putem funkcije Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Pravi funkciju koju može da presretne rukovalac definisan u prikazu (pomoću funkcije Binary.View).",
        "Documentation.LongDescription": "<p>Kreira funkciju prikaza na osnovu <code>function</code> kojom se može rukovati u prikazu koji je kreirala funkcija <code>Binary.View</code>.</p>\r\n<p><code>OnInvoke</code> rukovalac funkcije <code>Binary.View</code> može se koristiti za definisanje rukovaoca za funkciju prikaza.</p>\r\n<p>Kao i sa rukovaocima za ugrađene operacije, ako se <code>OnInvoke</code> rukovalac ne navede, ako ne rukuje funkcijom prikaza ili ako rukovalac ne prijavi grešku, <code>function</code> se primenjuje preko prikaza.</p>\r\n<p>Pogledajte objavljenu Power Query dokumentaciju prilagođenog konektora za detaljniji opis funkcije <code>Binary.View</code> i funkcija prilagođenog prikaza.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Binarni format koji čita 64-bitni potpisani ceo broj koji je kodiran pomoću kodiranja promenljive dužine sa bazom od 7 bitova.",
        "Documentation.LongDescription": "Binarni format koji čita 64-bitni potpisani ceo broj koji je kodiran pomoću kodiranja promenljive dužine sa bazom od 7 bitova.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Binarni format koji čita 64-bitni nepotpisani ceo broj koji je kodiran pomoću kodiranja promenljive dužine sa bazom od 7 bitova.",
        "Documentation.LongDescription": "Binarni format koji čita 64-bitni nepotpisani ceo broj koji je kodiran pomoću kodiranja promenljive dužine sa bazom od 7 bitova.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Binarni format koji čita 8-bitni nepotpisani ceo broj.",
        "Documentation.LongDescription": "Binarni format koji čita 8-bitni nepotpisani ceo broj.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Binarni format koji čita .NET 16-bajtnu decimalnu vrednost.",
        "Documentation.LongDescription": "Binarni format koji čita .NET 16-bajtnu decimalnu vrednost.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Binarni format koji čita 8-bajtnu IEEE vrednost dvostruke preciznosti sa pokretnim zarezom.",
        "Documentation.LongDescription": "Binarni format koji čita 8-bajtnu IEEE vrednost dvostruke preciznosti sa pokretnim zarezom.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Vraća binarni format koji čita niz stavki i vraća listu.",
        "Documentation.LongDescription": "Vraća binarni format koji čita niz stavki i vraća <code>list</code>.  Parametar <code>binaryFormat</code> navodi binarni format svake stavke.  Postoje tri načina da utvrdite broj pročitanih stavki: <ul><li>Ako <code>countOrCondition</code> nije naveden, binarni format će očitavati sve dok ne preostane nijedna stavka.</li><li>Ako je <code>countOrCondition</code> broj, binarni format će pročitati toliko stavki.</li><li>Ako je <code>countOrCondition</code> funkcija, ta funkcija će biti pozvana za svaku pročitanu stavku.  Funkcija vraća „true“ da bi nastavila, a „false“ da bi prestala da čita stavke.  Poslednja stavka se nalazi na listi.</li><li>Ako je <code>countOrCondition</code> binarni format, očekuje se da će broj stavki prethoditi listi, a navedeni format se koristi za očitavanje broja.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Čitanje bajtova do kraja podataka.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Čitanje dva bajta.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Čitanje bajtova dok vrednost bajta ne bude veća od dva ili jednaka dva.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Binarni format koji čita nula bajtova i vraća vrednost bez vrednosti.",
        "Documentation.LongDescription": "Binarni format koji čita nula bajtova i vraća vrednost bez vrednosti.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Vraća binarni format koji čita zapis.",
        "Documentation.LongDescription": "Vraća binarni format koji čita zapis.  Parametar <code>record</code> navodi format zapisa.  Svako polje u zapisu može da ima drugačiji binarni format.  Ako polje sadrži vrednost koja nije vrednost binarnog formata, za to polje se ne čitaju podaci, a vrednost polja se vraća rezultatu.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Čitanje zapisa koji sadrži jedan 16-bitni ceo broj i jedan 32-bitni ceo broj.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Binarni format koji čita 16-bitni potpisani ceo broj.",
        "Documentation.LongDescription": "Binarni format koji čita 16-bitni potpisani ceo broj.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Binarni format koji čita 32-bitni potpisani ceo broj.",
        "Documentation.LongDescription": "Binarni format koji čita 32-bitni potpisani ceo broj.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Binarni format koji čita 64-bitni potpisani ceo broj.",
        "Documentation.LongDescription": "Binarni format koji čita 64-bitni potpisani ceo broj.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Binarni format koji čita 4-bajtnu IEEE vrednost jednostruke preciznosti sa pokretnim zarezom.",
        "Documentation.LongDescription": "Binarni format koji čita 4-bajtnu IEEE vrednost jednostruke preciznosti sa pokretnim zarezom.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Vraća binarni format koji čita tekstualnu vrednost.",
        "Documentation.LongDescription": "Vraća binarni format koji čita tekstualnu vrednost.  Navodi <code>length</code> broj bajtova za dekodiranje ili binarni format dužine koji prethodi tekstu.  Opcionalna vrednost <code>encoding</code> navodi kodiranje teksta.  Ako <code>encoding</code> nije navedeno, onda se kodiranje određuje iz Unicode oznaka redosleda bajta.  Ako nema oznaka redosleda bajta, koristi se <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Dekodiranje dva bajta kao ASCII teksta.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Dekodiranje ASCII teksta pri čemu se dužina teksta u bajtovima pojavljuje ispred teksta kao bajt.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Binarni format koji čita 16-bitni nepotpisani ceo broj.",
        "Documentation.LongDescription": "Binarni format koji čita 16-bitni nepotpisani ceo broj.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Binarni format koji čita 32-bitni nepotpisani ceo broj.",
        "Documentation.LongDescription": "Binarni format koji čita 32-bitni nepotpisani ceo broj.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Binarni format koji čita 64-bitni nepotpisani ceo broj.",
        "Documentation.LongDescription": "Binarni format koji čita 64-bitni nepotpisani ceo broj.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Kreira 8-bitni ceo broj iz date vrednosti.",
        "Documentation.LongDescription": "Vraća 8-bitnu celobrojnu vrednost <code>number</code> iz datog <code>value</code>. Ako je dati <code>value</code> <code>null</code>, <code>Byte.Iz</code> vraća <code>null</code>. Ako je dati <code>value</code> <code>number</code> u opsegu 8-bitnog celog broja bez decimalnog dela, vraća se <code>value</code>. Ako sadrži decimalni deo, broj se zaokružuje pomoću navedenog režima zaokruživanja. Podrazumevani režim zaokruživanja je <code>RoundingMode.ToEven</code>. Ako je <code>value</code> nekog drugog tipa, biće konvertovan u <code>number</code>, koristeći <code>Number. FromText</code>. Pogledajte <code>Number.Round</code> za dostupne režime zaokruživanja. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijte 8-bitnu celobrojnu vrednost <code>number</code> od <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dobijte 8-bitnu celobrojnu <code>number</code> vrednost od <code>\"4.5\"</code> koristeći <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Konvertuje broj u tekstualni znak.",
        "Documentation.LongDescription": "Vraća znak koji je ekvivalent broja.<br>\r\n    <br>\r\n    Navedeni <code>number</code> treba da bude 21-bitna Unicode kodna tačka.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte broj u njegovu ekvivalentnu vrednost znaka.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Konvertujte znak u broj i ponovo nazad.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Konvertujte heksadecimalnu tačku koda za emotikon „cerekanje lica“ u svoj ekvivalentni UTF-16 zamenski par.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Konvertuje znak u brojčanu vrednost.",
        "Documentation.LongDescription": "Vraća broj ekvivalent od <code>character</code>.<br>\r\n    <br>\r\n    Rezultat će biti 21-bitna Unicode tačka koda predstavljena navedenim znakom ili zamenskim parom.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte znak u njegovu ekvivalentnu brojčanu vrednost.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Konvertujte UTF-16 zamenski par za emotikon „cerekanje lica“ u odgovarajuću heksadecimalnu tačku koda.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Vraća funkciju koja kombinuje listu teksta pomoću navedenog znaka za razgraničavanje.",
        "Documentation.LongDescription": "Vraća funkciju koja kombinuje listu tekstualnih vrednosti u jednu tekstualnu vrednost pomoću navedenog znaka za razgraničavanje.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinujte listu tekstualnih vrednosti pomoću znaka za razgraničavanje tačkom i zarezom.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Kombinujte tekst dve kolone koristeći znak za razgraničavanje zarez i citiranje CSV stila.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Vraća funkciju koja kombinuje listu teksta pomoću sekvence znakova za razgraničavanje.",
        "Documentation.LongDescription": "Vraća funkciju koja kombinuje listu tekstualnih vrednosti u jednu tekstualnu vrednost pomoću sekvence znakova za razgraničavanje.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinujte listu tekstualnih vrednosti pomoću sekvence znakova za razgraničavanje.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Vraća funkciju koja kombinuje listu teksta pomoću navedenih dužina.",
        "Documentation.LongDescription": "Vraća funkciju koja kombinuje listu tekstualnih vrednosti u jednu tekstualnu vrednost pomoću navedenih dužina.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinujte listu tekstualnih vrednosti tako što ćete izdvojiti navedene brojeve znakova iz svake ulazne vrednosti.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Kombinujte listu tekstualnih vrednosti tako što ćete izdvojiti navedene brojeve znakova, nakon prvog popunjavanja rezultata tekstom predloška.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Vraća funkciju koja kombinuje listu teksta pomoću navedenih izlaznih pozicija.",
        "Documentation.LongDescription": "Vraća funkciju koja kombinuje listu tekstualnih vrednosti u jednu tekstualnu vrednost pomoću navedenih izlaznih pozicija.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinujte listu tekstualnih vrednosti tako što ćete ih postaviti u izlaz na navedene pozicije.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Vraća funkciju koja kombinuje listu teksta pomoću navedenih pozicija i dužina.",
        "Documentation.LongDescription": "Vraća funkciju koja kombinuje listu tekstualnih vrednosti u jednu tekstualnu vrednost pomoću navedenih izlaznih pozicija i dužina. Dužina bez vrednosti ukazuje na to da treba uključiti celu tekstualnu vrednost.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinujte listu tekstualnih vrednosti pomoću navedenih izlaznih pozicija i dužina.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Vraća funkciju upoređivanja na osnovu navedene kulture i osetljivosti na mala i velika slova.",
        "Documentation.LongDescription": "Vraća funkciju upoređivanja koja koristi <code>culture</code> i osetljivost na mala i velika slova koju navodi <code>ignoreCase</code> za izvršavanje poređenja.<br>\r\n <br>\r\n Funkcija upoređivanja prihvata dva argumenta i vraća -1, 0 ili 1 na osnovu toga da li je prva vrednost manja od, jednaka, ili veća od druge.<br>\r\n <br>\r\n Podrazumevana vrednost za <code>ignoreCase</code> je netačna. <code>culture</code> treba da bude jedan od lokalnih standarda koje podržava .NET framework (na primer, „en-US“).\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Uporedite stavke „a“ i „A“ pomoću lokalnog standarda „en-US“ da biste odredili da li su vrednosti jednake.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Uporedite stavke „a“ i „A“ pomoću lokalnog standarda „en-US“ zanemarujući mala i velika slova da biste odredili da li su vrednosti jednake.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Vraća jedinstveni identifikator člana iz vrednosti svojstava članova.",
        "Documentation.LongDescription": "Vraća jedinstveni identifikator člana iz vrednosti svojstava članova. <code>attribute</code>. Vraća praznu vrednost za sve ostale vrednosti.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Vraća ključ svojstva.",
        "Documentation.LongDescription": "Vraća ključ svojstva <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Vraća vrednost valute iz date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>currency</code> iz date vrednosti <code>value</code>. Ako je data vrednost <code>value</code> <code>null</code>, <code>Currency.Iz</code> vraća <code>null</code>. Ako je data vrednost <code>value</code> <code>number</code> u opsegu valute, decimalni deo vrednosti <code>value</code> zaokružuje se na 4 decimalne cifre i vraća se. Ako vrednost <code>value</code> pripada drugom tipu, biće prvo konvertovana u <code>number</code>, koristeći <code>Number.FromText</code>. Važeći opseg za valutu je od <code>-922.337.203.685.477,5808</code> do <code>922.337.203.685.477,5807</code>. Pogledajte <code>Number.Round</code> za dostupne režime zaokruživanja. Podrazumevani je <code>RoundingMode.ToEven</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite vrednost <code>currency</code> od <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Dobijte <code>currency</code> vrednost <code>\"1.23455\"</code> koristeći <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Vraća komponentu dana.",
        "Documentation.LongDescription": "Vraća komponentu vrednosti dana <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> na osnovu koje se izdvaja komponenta dana.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje komponente dana vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>, koja predstavlja datum 14.5.2011. i vreme 17:00:00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Vraća broj (od 0 do 6) koji pokazuje dan u sedmici za navedenu vrednost.",
        "Documentation.LongDescription": "Vraća broj (od 0 do 6) koji pokazuje koji dan u sedmici za navedeni <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>datum</code>, <code>datum i vreme</code> ili <code>datum i vremenska zona</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: Vrednost <code>dan</code> pokazuje koji dan treba smatrati prvim danom u sedmici. Dozvoljene vrednosti su Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday ili Day.Saturday. Ako se ne navede, koristi se podrazumevana vrednost koja zavisi od kulture.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Izračunajte koji je dan u sedmici ponedeljak, 21. februar 2011, uzimajući nedelju kao prvi dan u sedmici.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Izračunajte koji je dan u sedmici ponedeljak, 21. februar 2011, uzimajući ponedeljak kao prvi dan u sedmici.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Vraća ime dana u nedelji.",
        "Documentation.LongDescription": "Vraća ime dana u sedmici za navedeni <code>date</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite ime dana u nedelji.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Vraća broj od 1 do 366 koji predstavlja dan u godini.",
        "Documentation.LongDescription": "Vraća broj koji predstavlja dan u godini u navedenoj vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dan u godini za 1. mart 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Vraća broj od 28 do 31 koji ukazuje na broj dana u mesecu.",
        "Documentation.LongDescription": "Vraća broj dana u mesecu u vrednosti <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za koju se vraća broj dana u mesecu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Broj dana u mesecu decembru koji su predstavljeni pomoću <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Vraća kraj dana.",
        "Documentation.LongDescription": "Vraća kraj dana koji predstavlja <code>dateTime</code>. Informacije o vremenskoj zoni se čuvaju.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> na osnovu koje se izračunava kraj dana.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje kraja dana za 14.5.2011, 17:00:00.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Izračunavanje kraja dana za 17.5.2011, 17:00:00 -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Vraća kraj meseca.",
        "Documentation.LongDescription": "Vraća kraj meseca koji sadrži <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> na osnovu koje se izračunava kraj meseca</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje kraja meseca za 14.5.2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Izračunavanje kraja meseca za 17.5.2011, 17:00:00 -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Vraća kraj kvartala.",
        "Documentation.LongDescription": "Vraća kraj kvartala koji sadrži <code>dateTime</code>. Informacije o vremenskoj zoni se čuvaju.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> na osnovu koje se izračunava kraj kvartala.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronađite kraj kvartala za 10. oktobar 2011. u 08:00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Vraća kraj sedmice.",
        "Documentation.LongDescription": "Vraća kraj sedmice koji sadrži <code>dateTime</code>.\r\n    Ova funkcija uzima opcionalnu vrednost <code>Day</code>, <code>firstDayOfWeek</code>, kako bi je postavila kao prvi dan u sedmici za ovo relativno izračunavanje. Podrazumevana vrednost je <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> na osnovu koje se izračunava poslednji dan u sedmici</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Opciono]</i> Vrednost <code>Day.Type</code> predstavlja prvi dan u sedmici. Moguće vrednosti su <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> i <code>Day.Saturday.</code>. Podrazumevana vrednost je <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje kraja sedmice za 14.5.2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Izračunavanje kraja sedmice za 17.5.2011, 17:00:00 -7:00, pri čemu je nedelja prvi dan u sedmici.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Vraća kraj godine.",
        "Documentation.LongDescription": "Vraća kraj godine koji sadrži <code>dateTime</code>, uključujući frakcione sekunde. Informacije o vremenskoj zoni se čuvaju\r\n      <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> na osnovu koje se izračunava kraj godine.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje kraja godine za 14.5.2011, 17:00:00.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Izračunavanje kraja sata za 17.5.2011, 17:00:00 -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Kreira datum od date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>date</code> od datog <code>value</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).\r\nAko dati <code>value</code> predstavlјa <code>null</code>, <code>Date.From</code> vraća <code>null</code>. Ako dati <code>value</code> predstavlјa <code>date</code>, vraća se <code>value</code>. Vrednosti sledećih tipova se mogu konvertovati u vrednost <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: Vrednost <code>date</code> od tekstualne reprezentacije. Pogledajte <code>Date.FromText</code> za detalјe.</li>>\r\n        <li><code>datetime</code>: Komponenta datuma za <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Komponenta datuma lokalnog ekvivalenta datuma i vremena za <code>value</code>.</li>\r\n        <li><code>number</code>: Komponenta datuma ekvivalenta datuma i vremena za datum OLE automatizacije izražen pomoću <code>value</code>.</li>\r\n      </ul>\r\nAko je <code>value</code> nekog drugog tipa, vraća se greška.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>43910</code> u vrednost <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Konvertovanje <code>#datetime(1899, 12, 30, 06, 45, 12)</code> u vrednost <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Kreira datum iz lokalnih, univerzalnih i prilagođenih formata datuma.",
        "Documentation.LongDescription": "Kreira <code>date</code> vrednost iz tekstualnog prikaza, <code>text</code>. Za određivanje dodatnih svojstava može se navesti opcionalni parametar <code>record</code>, <code>options</code>. <code>record</code> može da sadrži sledeća polja:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> vrednost koja označava format koji će se koristiti. Za više detalja, idite na https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Izostavljanje ovog polja ili obezbeđivanje <code>null</code> rezultiraće raščlanjivanjem datuma korišćenjem najboljeg napora.</li>\r\n   <li><code>Culture</code>: Kada <code>Format</code> nije bez vrednosti <code>Culture</code> kontroliše neke određivače formata. Na primer, u <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, dok je u <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"яnv\", \"fev\", \"mar\", ...</code>. Kada je <code>Format</code> <code>null</code>, <code>Culture</code> kontroliše podrazumevani format koji će se koristiti. Kada je <code>Culture</code> <code>null</code> ili izostavljen, koristi se <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa podršku zastarelih tokova posla, i <code>options</code> može da bude tekstualna vrednost. Ovo ima isto ponašanje kao da je <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertuj <code>\"2010-12-31\"</code> u <code>date</code> vrednost.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Konvertuj pomoću prilagođenog formata i nemačke kulture.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Pronađi datum u gregorijanskom kalendaru koji odgovara početku 1400. godine u Hidžra kalendaru.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom aktuelnog dana, na osnovu trenutnog datuma i vremena sistema.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom aktuelnog dana, na osnovu trenutnog datuma i vremena sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> koja se procenjuje.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je trenutno vreme sistema u aktuelnom danu.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom aktuelnog meseca, na osnovu trenutnog datuma i vremena sistema.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom aktuelnog meseca, na osnovu trenutnog datuma i vremena sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> koja se procenjuje.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je trenutno vreme sistema u aktuelnom mesecu.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom aktuelnog kvartala, na osnovu trenutnog datuma i vremena sistema.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom aktuelnog kvartala, na osnovu trenutnog datuma i vremena sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> koja se procenjuje.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je trenutno vreme sistema u aktuelnom kvartalu.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom aktuelne sedmice, na osnovu trenutnog datuma i vremena sistema.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom aktuelne sedmice, na osnovu trenutnog datuma i vremena sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> koja se procenjuje.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je trenutno vreme sistema u aktuelnoj sedmici.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom aktuelne godine, na osnovu trenutnog datuma i vremena sistema.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom aktuelne godine, na osnovu trenutnog datuma i vremena sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> koja se procenjuje.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je trenutno vreme sistema u aktuelnoj godini.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledećeg dana, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog dana.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg dana, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog dana.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je dan nakon trenutnog vremena sistema u sledećem danu.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledećeg meseca, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog meseca.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg meseca, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog meseca.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je mesec nakon trenutnog vremena sistema u sledećem mesecu.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledećeg kvartala, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog kvartala.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg kvartala, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog kvartala.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je kvartal nakon trenutnog vremena sistema u sledećem kvartalu.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledeće sedmice, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sedmice.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledeće sedmice, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sedmice.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je sedmica nakon trenutnog vremena sistema u sledećoj sedmici.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom sledeće godine, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne godine.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledeće godine, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne godine.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je godina nakon trenutnog vremena sistema u sledećoj godini.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodnog dana, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog dana.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog dana, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog dana.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je dan pre trenutnog vremena sistema u prethodnom danu.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodnog meseca, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog meseca.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog meseca, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog meseca.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je mesec pre trenutnog vremena sistema u prethodnom mesecu.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodnog kvartala, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog kvartala.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog kvartala, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog kvartala.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je kvartal pre trenutnog vremena sistema u prethodnom kvartalu.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodne sedmice, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sedmice.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodne sedmice, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sedmice.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je sedmica pre trenutnog vremena sistema u prethodnoj sedmici.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom prethodne godine, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne godine.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodne godine, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne godine.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je godina pre trenutnog vremena sistema u prethodnoj godini.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Pokazuje da li se ovaj datum pojavljuje tokom aktuelne godine i da li je na aktuelni dan ili pre njega, na osnovu trenutnog datuma i vremena sistema.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom aktuelne godine i da li je na aktuelni dan ili pre njega, na osnovu trenutnog datuma i vremena sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> koja se procenjuje.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li se trenutno vreme sistema nalazi u periodu od početka godine do danas.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Pokazuje da li ovaj datum pada u prestupnu godinu.",
        "Documentation.LongDescription": "Pokazuje da li data vrednost datuma i vremena <code>dateTime</code> pada u prestupnu godinu.\r\n <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code> koja se procenjuje.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je 2012. godina, koja se predstavlja pomoću <code>#date(2012, 01, 01)</code>, prestupna godina.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Vraća komponentu meseca.",
        "Documentation.LongDescription": "Vraća komponentu meseca navedene vrednosti <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje meseca u #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Vraća komponentu imena meseca.",
        "Documentation.LongDescription": "Vraća ime komponente meseca za navedeni <code>date</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite ime meseca.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Vraća broj koji pokazuje u kom se kvartalu u godini datum nalazi.",
        "Documentation.LongDescription": "Vraća broj od 1 do 4 koji pokazuje u kom se kvartalu u godini datum <code>dateTime</code> nalazi. <code>dateTime</code> može da bude vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje kvartala u godini u kome se nalazi datum #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Vraća početak dana.",
        "Documentation.LongDescription": "Vraća početak dana koji predstavlja <code>dateTime</code>.\r\n    <code>dateTime</code> mora da bude vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronađite početak dana za 10. oktobar 2011. u 08:00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Vraća početak meseca.",
        "Documentation.LongDescription": "Vraća početak meseca koji sadrži <code>dateTime</code>.\r\n    <code>dateTime</code> mora da bude vrednost <code>date</code> ili <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronađite početak meseca za 10. oktobar 2011. u 08:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Vraća početak kvartala.",
        "Documentation.LongDescription": "Vraća početak kvartala koji sadrži <code>dateTime</code>.\r\n      <code>dateTime</code> mora da bude vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronađite početak kvartala za 10. oktobar 2011. u 08:00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Vraća početak sedmice.",
        "Documentation.LongDescription": "Vraća početak sedmice koji sadrži <code>dateTime</code>.\r\n    <code>dateTime</code> mora da bude vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronađite početak sedmice za utorak, 11. oktobar 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Pronađite početak sedmice za utorak, 11. oktobar 2011, koristeći ponedeljak kao početak sedmice.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Vraća početak godine.",
        "Documentation.LongDescription": "Vraća početak godine koji sadrži <code>dateTime</code>.\r\n    <code>dateTime</code> mora da bude vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronađite početak godine za 10. oktobar 2011. u 08:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Vraća zapis koji sadrži delove vrednosti datuma.",
        "Documentation.LongDescription": "Vraća zapis koji sadrži delove date vrednosti datuma, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: Vrednost <code>date</code> na osnovu koje se izračunava zapis njenih delova.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje vrednosti <code>#date(2011, 12, 31)</code> u zapis koji sadrži delove vrednosti datuma.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Vraća tekstualnu reprezentaciju vrednosti datuma.",
        "Documentation.LongDescription": "Daje tekstualni prikaz <code>date</code>. Za određivanje dodatnih svojstava može se navesti opcionalni parametar <code>record</code>, <code>options</code>. <code>culture</code> se koristi samo za zastarele tokove posla. <code>record</code> može da sadrži sledeća polja:\r\n<ul>\r\n   <li><code>Format</code>:A <code>text</code> vrednost koja označava format koji će se koristiti. Za više detalja, idite na https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Izostavljanje ovog polja ili obezbeđivanje <code>null</code> rezultiraće oblikovanjem datuma korišćenjem podrazumevane vrednosti koju definiše <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Kada <code>Format</code> nije bez vrednosti <code>Culture</code> kontroliše neke određivače formata. Na primer, u <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, dok je u <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"яnv\", \"fev\", \"mar\", ...</code>. Kada je <code>Format</code> <code>null</code>, <code>Culture</code> kontroliše podrazumevani format koji će se koristiti. Kada je <code>Culture</code> <code>null</code> ili izostavljen, koristi se <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa podršku zastarelih tokova posla, <code>options</code> i <code>culture</code> mogu da budu tekstualne vrednosti. Ovo ima isto ponašanje kao da je <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertuj <code>#date(2010, 12, 31)</code> u <code>text</code> vrednost. <i>Izlaz rezultata može da se razlikuje u zavisnosti od trenutne kulture.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Konvertuj pomoću prilagođenog formata i nemačke kulture.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Pronađi godinu u Hidžra kalendaru koja odgovara 1. januaru 2000. godine u gregorijanskom kalendaru.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Vraća broj od 1 do 6 koji pokazuje u kojoj se sedmici u mesecu ovaj datum nalazi.",
        "Documentation.LongDescription": "Vraća broj od 1 do 6 koji pokazuje u kojoj se sedmici u mesecu datum <code>dateTime</code> nalazi.\r\n <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>datetime</code> za koju se određuje sedmica u mesecu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite koja je sedmica 15. marta 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Vraća broj od 1 do 54 koji pokazuje u kojoj se sedmici u godini ovaj datum nalazi.",
        "Documentation.LongDescription": "Vraća broj od 1 do 54 koji pokazuje u kojoj se sedmici godine se nalazi datum <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>datetime</code> za koju se određuje sedmica u godini.</li>\r\n        <li><code>firstDayOfWeek</code>: Opcionalna vrednost <code>Day.Type</code> koja ukazuje na to koji dan se smatra početkom nove sedmice (npr. <code>Day.Sunday</code>). Ako nije navedeno, koristi se podrazumevana vrednost koja zavisi od kulture.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Odredite koja sedmica u godini sadrži 27. mart 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Odredite koja sedmica u godini sadrži 27. mart 2011, koristeći ponedeljak kao početak sedmice.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Vraća komponentu godine.",
        "Documentation.LongDescription": "Vraća komponentu godine navedene vrednosti <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje godine u #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Vraća komponentu datuma za date, datetime ili datetimezone vrednosti.",
        "Documentation.LongDescription": "Vraća komponentu datuma za <code>dateTime</code>, datu vrednost <code>date</code>, <code>datetime</code> ili <code>datetimezone</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje vrednosti datuma za #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Kreira datum i vreme od date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>datetime</code> od datog <code>value</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).\r\nAko dati <code>value</code> predstavlja <code>null</code>, <code>DateTime.From</code> vraća <code>null</code>. Ako dati <code>value</code> predstavlja <code>datetime</code>, vraća se <code>value</code>. Vrednosti sledećih tipova se mogu konvertovati u vrednost <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: Vrednost <code>datetime</code> od tekstualne reprezentacije. Pogledajte <code>DateTime.FromText</code> za detalje.</li>\r\n        <li><code>date</code>: <code>datetime</code> sa <code>value</code> kao komponentom datuma i <code>12:00:00 AM</code> kao komponentom vremena.</li>\r\n        <li><code>datetimezone</code>: Lokalni <code>datetime</code> ekvivalent za <code>value</code>.</li>\r\n        <li><code>time</code>: <code>datetime</code> sa ekvivalentom datuma za datum OLE automatizacije sa <code>0</code> kao komponentom datuma i <code>value</code> kao komponentom vremena.</li>\r\n        <li><code>number</code>: <code>datetime</code> ekvivalent datuma OLE automatizacije izražen pomoću <code>value</code>. </li>\r\n      </ul>\r\nAko je <code>value</code> nekog drugog tipa, vraća se greška.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>#time(06, 45, 12)</code> u vrednost <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Konvertovanje <code>#date(1975, 4, 4)</code> u vrednost <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Kreira datum i vreme od broja dužine 64 bita.",
        "Documentation.LongDescription": "Kreira vrednost <code>datetime</code> od vrednosti <code>fileTime</code> i konvertuje je u lokalnu vremensku zonu. Vrednost filetime je Windows vrednost vremena datoteke koja predstavlja broj intervala od 100 nanosekundi koji su protekli od 12:00 (ponoć), 1. januara 1601. g. naše ere. (C.E.) Coordinated Universal Time (UTC vreme).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>129876402529842245</code> u vrednost datuma i vremena.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Kreira datum i vremensku zonu od lokalnog i univerzalnog formata datuma i vremena.",
        "Documentation.LongDescription": "Kreira <code>datetime</code> vrednost iz tekstualnog prikaza, <code>text</code>. Za određivanje dodatnih svojstava može se navesti opcionalni parametar <code>record</code>, <code>options</code>. <code>record</code> može da sadrži sledeća polja:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> vrednost koja označava format koji će se koristiti. Za više detalja, idite na https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Izostavljanje ovog polja ili obezbeđivanje <code>null</code> rezultiraće raščlanjivanjem datuma korišćenjem najboljeg napora.</li>\r\n   <li><code>Culture</code>: Kada <code>Format</code> nije bez vrednosti <code>Culture</code> kontroliše neke određivače formata. Na primer, u <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, dok je u <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"яnv\", \"fev\", \"mar\", ...</code>. Kada je <code>Format</code> <code>null</code>, <code>Culture</code> kontroliše podrazumevani format koji će se koristiti. Kada je <code>Culture</code> <code>null</code> ili izostavljen, koristi se <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa podršku zastarelih tokova posla, i <code>options</code> može da bude tekstualna vrednost. Ovo ima isto ponašanje kao da je <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertuj <code>\"2010-12-31T01:30:00\"</code> u vrednost datuma i vremena.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Konvertuj <code>\"2010-12-31T01:30:00.121212\"</code> u vrednost datuma i vremena.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Konvertuj <code>\"2010-12-31T01:30:00\"</code> u vrednost datuma i vremena.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Konvertuj <code>\"20101231T013000\"</code> u vrednost datuma i vremena.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Pokazuje da li se ovi datum i vreme pojavljuju tokom aktuelnog časa, na osnovu aktuelnog datuma i vremena sistema.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom aktuelnog časa, na osnovu aktuelnog datuma i vremena sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je aktuelno vreme sistema u aktuelnom času.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Pokazuje da li se ovi datum i vreme pojavljuju tokom aktuelnog minuta, na osnovu aktuelnog datuma i vremena sistema.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom aktuelnog minuta, na osnovu aktuelnog datuma i vremena sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je aktuelno vreme sistema u aktuelnom minutu.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Pokazuje da li se ovi datum i vreme pojavljuju tokom aktuelne sekunde, na osnovu aktuelnog datuma i vremena sistema.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom aktuelne sekunde, na osnovu aktuelnog datuma i vremena sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je aktuelno vreme sistema u aktuelnoj sekundi.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom sledećeg časa, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog časa.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg časa, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog časa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je čas nakon aktuelnog vremena sistema tokom sledećeg časa.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom sledećeg minuta, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog minuta.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledećeg minuta, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog minuta.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je minut nakon aktuelnog vremena sistema tokom sledećeg minuta.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom sledeće sekunde, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sekunde.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom sledeće sekunde, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sekunde.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je sekunda nakon aktuelnog vremena sistema tokom sledeće sekunde.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom prethodnog časa, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog časa.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog časa, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog časa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je čas pre aktuelnog vremena sistema tokom prethodnog časa.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom prethodnog minuta, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog minuta.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodnog minuta, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutnog minuta.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je minut pre aktuelnog vremena sistema tokom prethodnog minuta.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Pokazuje da li se ovaj datum i vreme pojavljuju tokom prethodne sekunde, na osnovu trenutnog datuma i vremena sistema. Imajte na umu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sekunde.",
        "Documentation.LongDescription": "Pokazuje da li se data vrednost datuma i vremena <code>dateTime</code> pojavljuje tokom prethodne sekunde, na osnovu trenutnog datuma i vremena sistema. Imajte u vidu da će ova funkcija vratiti false kada se prosledi vrednost koja se pojavljuje u okviru trenutne sekunde.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vrednost <code>datetime</code> ili <code>datetimezone</code> za procenu.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je sekunda pre aktuelnog vremena sistema tokom prethodne sekunde.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Vraća vremenski segment date vrednosti datuma i vremena.",
        "Documentation.LongDescription": "Vraća vremenski segment date vrednosti datuma i vremena, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje vrednosti vremena za #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Vraća zapis koji sadrži delove vrednosti datuma i vremena.",
        "Documentation.LongDescription": "Vraća zapis koji sadrži delove date vrednosti datuma i vremena, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>datetime</code> na osnovu koje se izračunava zapis njenih delova.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje vrednosti <code>#datetime(2011, 12, 31, 11, 56, 2)</code> u zapis koji sadrži vrednosti datuma i vremena.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Vraća tekstualnu reprezentaciju vrednosti datuma i vremena.",
        "Documentation.LongDescription": "Daje tekstualni prikaz <code>dateTime</code>. Za određivanje dodatnih svojstava može se navesti opcionalni parametar <code>record</code>, <code>options</code>. <code>culture</code> se koristi samo za zastarele tokove posla. <code>record</code> može da sadrži sledeća polja:\r\n<ul>\r\n   <li><code>Format</code>:A <code>text</code> vrednost koja označava format koji će se koristiti. Za više detalja, idite na https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Izostavljanje ovog polja ili obezbeđivanje <code>null</code> rezultiraće oblikovanjem datuma korišćenjem podrazumevane vrednosti koju definiše <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Kada <code>Format</code> nije bez vrednosti <code>Culture</code> kontroliše neke određivače formata. Na primer, u <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, dok je u <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"яnv\", \"fev\", \"mar\", ...</code>. Kada je <code>Format</code> <code>null</code>, <code>Culture</code> kontroliše podrazumevani format koji će se koristiti. Kada je <code>Culture</code> <code>null</code> ili izostavljen, koristi se <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa podršku zastarelih tokova posla, <code>options</code> i <code>culture</code> mogu da budu tekstualne vrednosti. Ovo ima isto ponašanje kao da je <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertuj <code>#datetime(2010, 12, 31, 01, 30, 25)</code> u <code>text</code> vrednost. <i>Izlaz rezultata može da se razlikuje u zavisnosti od trenutne kulture.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Konvertuj pomoću prilagođenog formata i nemačke kulture.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Konvertuj pomoću ISO 8601 obrasca.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Kreira datum i vremensku zonu od date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>datetimezone</code> od datog <code>value</code>. Opcionalno se može navesti i <code>culture</code> (na primer, \ren-US“).\n<code>value</code>Ako dati <code>value</code> predstavlјa <code>null</code>, <code>DateTimeZone.From</code> vraća <code>null</code>. Ako dati <code>value</code> predstavlјa <code>datetimezone</code>, vraća se \r. Vrednosti sledećih tipova se mogu konvertovati u vrednost <code>datetimezone</code>:\n\r      <ul>\n\r        <li><code>text</code>: Vrednost <code>datetimezone</code> od tekstualne reprezentacije. Pogledajte <code>DateTimeZone.FromText</code> za detalјe.</li>\n<code>value</code>        <li><code>date</code>: <code>datetimezone</code> sa \r kao komponentom datuma, <code>12:00:00 AM</code> kao komponentom vremena i pomakom koji odgovara lokalnoj vremenskoj zoni.</li>\n<code>value</code>        <li><code>datetime</code>: <code>datetimezone</code> sa \r kao datumom i vremenom i pomakom koji odgovara lokalnoj vremenskoj zoni.</li>\n<code>value</code>        <li><code>time</code>: <code>datetimezone</code> sa ekvivalentom datuma za datum OLE automatizacije sa <code>0</code> kao komponentom datuma, \r kao komponentom vremena i pomakom koji odgovara lokalnoj vremenskoj zoni.</li>\n<code>value</code>        <li><code>number</code>: <code>datetimezone</code> sa datumom i vremenom ekvivalentnim datumu OLE automatizacije izraženim pomoću \r i pomakom koji odgovara lokalnoj vremenskoj zoni.</li>\n\r      </ul>\n<code>value</code>Ako je  nekog drugog tipa, vraća se greška.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>\"2020-10-30T01:30:00-08:00\"</code> u vrednost <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Kreira datum i vremensku zonu od broja dužine 64 bita.",
        "Documentation.LongDescription": "Kreira <code>datetimezone</code> vrednost od vrednosti <code>fileTime</code> i konvertuje je u lokalnu vremensku zonu. Vrednost filetime je Windows vrednost vremena datoteke koja predstavlja broj intervala od 100 nanosekundi koji su protekli od 12:00 (ponoć), 1. januara 1601. g. naše ere. (C.E.) Koordinisano univerzalno vreme (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>129876402529842245</code> u vrednost datuma i vremenske zone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Kreira datum i vremensku zonu iz lokalnih, univerzalnih i prilagođenih formata datuma i vremenske zone.",
        "Documentation.LongDescription": "Kreira <code>datetimezone</code> vrednost iz tekstualnog prikaza, <code>text</code>. Za određivanje dodatnih svojstava može se navesti opcionalni parametar <code>record</code>, <code>options</code>. <code>record</code> može da sadrži sledeća polja:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> vrednost koja označava format koji će se koristiti. Za više detalja, idite na https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Izostavljanje ovog polja ili obezbeđivanje <code>null</code> rezultiraće raščlanjivanjem datuma korišćenjem najboljeg napora.</li>\r\n   <li><code>Culture</code>: Kada <code>Format</code> nije bez vrednosti <code>Culture</code> kontroliše neke određivače formata. Na primer, u <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, dok je u <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"яnv\", \"fev\", \"mar\", ...</code>. Kada je <code>Format</code> <code>null</code>, <code>Culture</code> kontroliše podrazumevani format koji će se koristiti. Kada je <code>Culture</code> <code>null</code> ili izostavljen, koristi se <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa podršku zastarelih tokova posla, i <code>options</code> može da bude tekstualna vrednost. Ovo ima isto ponašanje kao da je <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertuj <code>\"2010-12-31T01:30:00-08:00\"</code> u vrednost <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Konvertuj pomoću prilagođenog formata i nemačke kulture.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Konvertuj pomoću ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Uklanja informacije o vremenskoj zoni iz date vrednosti datuma i vremenske zone.",
        "Documentation.LongDescription": "Vraća vrednost #datetime iz <code>dateTimeZone</code> sa uklonjenim informacijama o vremenskoj zoni.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje informacija o vremenskoj zoni iz vrednosti #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Konvertuje komponentu vremenske zone u lokalnu vremensku zonu.",
        "Documentation.LongDescription": "Menja informacije o vremenskoj zoni za vrednost datuma i vremenske zone <code>dateTimeZone</code> u informacije o lokalnoj vremenskoj zoni.\r\n    Ako <code>dateTimeZone</code> nema komponentu vremenske zone, dodaju se informacije o lokalnoj vremenskoj zoni.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Promena informacija o vremenskoj zoni za #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na lokalnu vremensku zonu (podrazumeva se PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Vraća zapis koji sadrži delove vrednosti datuma i vremenske zone.",
        "Documentation.LongDescription": "Vraća zapis koji sadrži delove date vrednosti datuma i vremenske zone, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: Vrednost <code>datetimezone</code> na osnovu koje se izračunava zapis njenih delova.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje vrednosti <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> u zapis koji sadrži vrednosti datuma, vremena i zone.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Vraća tekstualnu reprezentaciju vrednosti datuma i vremenske zone.",
        "Documentation.LongDescription": "Daje tekstualni prikaz <code>dateTimeZone</code>. Za određivanje dodatnih svojstava može se navesti opcionalni parametar <code>record</code>, <code>options</code>. <code>culture</code> se koristi samo za zastarele tokove posla. <code>record</code> može da sadrži sledeća polja:\r\n<ul>\r\n   <li><code>Format</code>:A <code>text</code> vrednost koja označava format koji će se koristiti. Za više detalja, idite na https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Izostavljanje ovog polja ili obezbeđivanje <code>null</code> rezultiraće oblikovanjem datuma korišćenjem podrazumevane vrednosti koju definiše <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Kada <code>Format</code> nije bez vrednosti <code>Culture</code> kontroliše neke određivače formata. Na primer, u <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, dok je u <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"яnv\", \"fev\", \"mar\", ...</code>. Kada je <code>Format</code> <code>null</code>, <code>Culture</code> kontroliše podrazumevani format koji će se koristiti. Kada je <code>Culture</code> <code>null</code> ili izostavljen, koristi se <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa podršku zastarelih tokova posla, <code>options</code> i <code>culture</code> mogu da budu tekstualne vrednosti. Ovo ima isto ponašanje kao da je <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertuj <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> u <code>text</code> vrednost. <i>Izlaz rezultata može da se razlikuje u zavisnosti od trenutne kulture.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Konvertuj pomoću prilagođenog formata i nemačke kulture.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Konvertuj pomoću ISO 8601 obrasca.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Konvertuje komponentu vremenske zone u UTC vremensku zonu.",
        "Documentation.LongDescription": "Menja informacije o vremenskoj zoni za vrednost datuma i vremena <code>dateTimeZone</code> u informacije o vremenskoj zoni UTC vremena ili univerzalnog vremena.\r\n    Ako <code>dateTimeZone</code> nema komponentu vremenske zone, dodaju se informacije o vremenskoj zoni UTC vremena.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Promena informacija o vremenskoj zoni za #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na vremensku zonu UTC vremena.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Menja vremensku zonu vrednosti.",
        "Documentation.LongDescription": "Menja vremensku zonu vrednosti.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Menja vremensku zonu vrednosti.",
        "Documentation.LongDescription": "Menja vremensku zonu vrednosti.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Kreira decimalu iz date vrednosti.",
        "Documentation.LongDescription": "Vraća decimalnu vrednost <code>number</code> od datog <code>value</code>. Ako je dati <code>value</code> <code>null</code>, <code>Decimal.From</code> vraća <code>null</code>. Ako je dati <code>value</code> <code>number</code> u opsegu decimale, vraća se <code>value</code>, a u suprotnom se vraća greška. Ako je <code>value</code> nekog drugog tipa, prvo će biti konvertovan u <code>number</code> koristeći <code>Number.FromText</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijte decimalnu <code>number</code> vrednost od <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Vraća sadržaj Delta Lake tabele.",
        "Documentation.LongDescription": "Vraća sadržaj Delta Lake tabele.",
        "Documentation.Category": "Pristup podacima",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Kreira dupliranu vrednost iz date vrednosti.",
        "Documentation.LongDescription": "Vraća dupliranu vrednost <code>number</code> od datog <code>value</code>. Ako je dati <code>value</code> <code>null</code>, <code>Double.From</code> vraća <code>null</code>. Ako je dati <code>value</code> <code>number</code> u opsegu duplirane vrednosti, vraća se <code>value</code>, a u suprotnom se vraća greška. Ako je <code>value</code> nekog drugog tipa, prvo će biti konvertovan u <code>number</code> koristeći <code>Number.FromText</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijte dupliranu vrednost <code>number</code> od <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Vraća deo trajanja u danima.",
        "Documentation.LongDescription": "Vraća deo trajanja <code>duration</code> u danima.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Izdvojite broj dana između dva datuma.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Kreira trajanje od date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>duration</code> od datog <code>value</code>. Ako dati <code>value</code> predstavlja <code>null</code>, <code>Duration.From</code> vraća <code>null</code>.  Ako dati <code>value</code> predstavlja <code>duration</code>, vraća se <code>value</code>. Vrednosti sledećih tipova se mogu konvertovati u vrednost <code>duration</code>:\r\n      <ul>\r\n        <li><code>text</code>: Vrednost <code>duration</code> od tekstualnih oblika proteklog vremena (d.h:m:s). Pogledajte <code>Duration.FromText</code> za detalje.</li>\r\n        <li><code>number</code>: <code>duration</code> ekvivalent broju celih i frakcionih dana izraženih pomoću <code>value</code>.</li>\r\n      </ul>\r\nAko je <code>value</code> nekog drugog tipa, vraća se greška.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>2.525</code> u vrednost <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Vraća vrednost trajanja od tekstualnih oblika proteklog vremena (d.h:m:s).",
        "Documentation.LongDescription": "Vraća vrednost trajanja iz navedenog teksta, <code>text</code>. Ova funkcija može da raščlanjuje sledeće formate:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Svi opsezi su uključeni)<br>\r\n        ddd: Broj dana.<br>\r\n        hh: Broj časova, između 0 i 23.<br>\r\n        mm: Broj minuta, između 0 i 59.<br>\r\n        ss: Broj sekundi, između 0 i 59.<br>\r\n        ff: Delovi sekundi, između 0 i 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>\"2.05:55:20\"</code> u vrednost <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Vraća deo trajanja u časovima.",
        "Documentation.LongDescription": "Vraća deo trajanja <code>duration</code> u časovima.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Izdvojite časove iz vrednosti trajanja.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Vraća deo trajanja u minutima.",
        "Documentation.LongDescription": "Vraća deo trajanja <code>duration</code> u minutima.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Izdvojite minute iz vrednosti trajanja.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Vraća deo trajanja u sekundama.",
        "Documentation.LongDescription": "Vraća deo trajanja <code>duration</code> u sekundama.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Izdvojite sekunde iz vrednosti trajanja.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Vraća zapis koji sadrži delove trajanja.",
        "Documentation.LongDescription": "Vraća zapis koji sadrži delove vrednosti trajanja, <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: Element <code>duration</code> iz koga se zapis kreira.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>#duration(2, 5, 55, 20)</code> u zapis njegovih delova, uključujući dane, sate, minute i sekunde ako je primenjivo.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Vraća tekst oblika „d.h:m:s“.",
        "Documentation.LongDescription": "Vraća tekstualnu reprezentaciju u obliku „dan.sat:minuti:sekunde“ date vrednosti trajanja, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: <code>Trajanje</code> na osnovu kojeg se izračunava tekstualna reprezentacija.</li>\r\n  <li><code>format</code>: <i>[Opcionalno]</i> Ukoliko je zastarelo, dobija se greška ako nije bez vrednosti</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>#duration(2, 5, 55, 20)</code> u tekstualnu vrednost.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Vraća ukupan broj dana koje ovo trajanje obuhvata.",
        "Documentation.LongDescription": "Vraća ukupan broj dana koje obuhvata <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pronađite ukupan broj dana koje obuhvata vrednost trajanja.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Vraća ukupan broj sati koje ovo trajanje obuhvata.",
        "Documentation.LongDescription": "Vraća ukupan broj časova koje obuhvata <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pronađite ukupan broj časova koje obuhvata vrednost trajanja.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Vraća ukupan broj minuta koje ovo trajanje obuhvata.",
        "Documentation.LongDescription": "Vraća ukupan broj minuta koje obuhvata <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pronađite ukupan broj minuta koje obuhvata vrednost trajanja.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Vraća ukupan broj sekundi koje ovo trajanje obuhvata.",
        "Documentation.LongDescription": "Vraća ukupan broj sekundi koje obuhvata <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pronađite ukupan broj sekundi koje obuhvata vrednost trajanja.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Vraća zapis o grešci od navedenih tekstualnih vrednosti za razlog, poruku i detalj.",
        "Documentation.LongDescription": "Vraća zapis o grešci od navedenih tekstualnih vrednosti za razlog, poruku i detalj.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Vraća reprezentaciju M izvornog koda vrednosti konstante.",
        "Documentation.LongDescription": "Vraća reprezentaciju M izvornog koda vrednosti konstante.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite reprezentaciju M izvornog koda vrednosti broja.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Preuzmite reprezentaciju M izvornog koda vrednosti datuma.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Preuzmite reprezentaciju M izvornog koda tekstualne vrednosti.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Vraća rezultat procene M izraza.",
        "Documentation.LongDescription": "Vraća rezultat procene M izraza <code>document</code>, sa dostupnim identifikatorima na koje se može upućivati preko definicije koju je sastavio/la <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Procenjivanje jednostavnog zbira.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Procenjivanje složenijeg zbira.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Procenjivanje konkatenacije tekstualne vrednosti i identifikatora.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Vraća reprezentaciju M izvornog koda identifikatora.",
        "Documentation.LongDescription": "Vraća reprezentaciju M izvornog koda identifikatora <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite reprezentaciju M izvornog koda identifikatora.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Preuzmite reprezentaciju M izvornog koda identifikatora koji sadrži razmak.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Vraća sadržaj navedene datoteke u binarnom obliku.",
        "Documentation.LongDescription": "Vraća sadržaje datoteke <code>path</code> u binarnom obliku. Parametar <code>options</code> je trenutno namenjen samo za interno upotrebu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Vraća da li se određena funkcija smatra izvorom podataka.",
        "Documentation.LongDescription": "Vraća da li se <code>function</code> smatra izvorom podataka.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Prevodi tekst koji predstavlja geografsku vrednost u Well-Known Text (WKT) formatu u strukturirani zapis.",
        "Documentation.LongDescription": "Prevodi tekst koji predstavlja geografsku vrednost u Well-Known Text (WKT) formatu u strukturirani zapis. WKT je standardni format koji definiše Open Geospatial Consortium (OGC) i on je uobičajeni format serijalizacije koji koriste baze podataka, uključujući SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Prevodi vrednost strukturirane geografske tačke u svoju Well-Known Text (WKT) reprezentaciju.",
        "Documentation.LongDescription": "Prevodi vrednost strukturirane geografske tačke u svoju Well-Known Text (WKT) reprezentaciju na način koji je definisao Open Geospatial Consortium (OGC), takođe format serijalizacije koji koristi mnogo baza podataka, uključujući SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Prevodi tekst koji predstavlja geometrijsku vrednost u Well-Known Text (WKT) formatu u strukturirani zapis.",
        "Documentation.LongDescription": "Prevodi tekst koji predstavlja geometrijsku vrednost u Well-Known Text (WKT) formatu u strukturirani zapis. WKT je standardni format koji definiše Open Geospatial Consortium (OGC) i on je uobičajeni format serijalizacije koji koriste baze podataka, uključujući SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Prevodi vrednost strukturirane geometrijske tačke u svoju Well-Known Text (WKT) reprezentaciju.",
        "Documentation.LongDescription": "Prevodi vrednost strukturirane geometrijske tačke u svoju Well-Known Text (WKT) reprezentaciju na način koji je definisao Open Geospatial Consortium (OGC), takođe format serijalizacije koji koristi mnogo baza podataka, uključujući SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Vraća vrednost za guid iz date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>Guid.Type</code> iz date <code>value</code>. Ako je dati <code>value</code> jednak <code>nuli</code>, <code>Guid.From</code> vraća <code>null</code>.  Biće izvršena promena da bi se utvrdilo da li je <code>value</code> u prihvatljivom formatu. Prihvatljivi formati su navedeni u primerima.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Guid se može navesti u vidu 32 susedne heksademicalne cifre.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid se može navesti u vidu 32 heksademicalne cifre odvojene crtama u blokove 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid se može navesti u vidu 32 heksademicalne cifre odvojene crtama i u velikim zagradama.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid se može navesti u vidu 32 heksademicalne cifre odvojene crtama i u zagradama.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Kreira 16-bitni ceo broj iz date vrednosti.",
        "Documentation.LongDescription": "Vraća 16-bitnu celobrojnu vrednost <code>number</code> iz datog <code>value</code>. Ako je dati <code>value</code> <code>null</code>, <code>Int16.From</code> vraća <code>null</code>. Ako je dati <code>value</code> <code>number</code> u opsegu 16-bitnog celog broja bez decimalnog dela, vraća se <code>value</code>. Ako sadrži decimalni deo, broj se zaokružuje pomoću navedenog režima zaokruživanja. Podrazumevani režim zaokruživanja je <code>RoundingMode.ToEven</code>. Ako je <code>value</code> nekog drugog tipa, biće konvertovan u <code>number</code>, koristeći <code>Number. FromText</code>. Pogledajte <code>Number.Round</code> za dostupne režime zaokruživanja. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijte 16-bitnu celobrojnu <code>number</code> vrednost od <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Preuzmite 16-bitnu celobrojnu <code>number</code> vrednost od <code>\"4.5\"</code> koristeći <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Kreira 32-bitni ceo broj iz date vrednosti.",
        "Documentation.LongDescription": "Vraća 32-bitnu celobrojnu vrednost <code>number</code> iz datog <code>value</code>. Ako je dati <code>value</code> <code>null</code>, <code>Int32.From</code> vraća <code>null</code>. Ako je dati <code>value</code> <code>number</code> u opsegu 32-bitnog celog broja bez decimalnog dela, vraća se <code>value</code>. Ako sadrži decimalni deo, broj se zaokružuje pomoću navedenog režima zaokruživanja. Podrazumevani režim zaokruživanja je <code>RoundingMode.ToEven</code>. Ako je <code>value</code> nekog drugog tipa, biće konvertovan u <code>number</code>, koristeći <code>Number. FromText</code>. Pogledajte <code>Number.Round</code> za dostupne režime zaokruživanja. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijte 32-bitnu celobrojnu <code>number</code> vrednost od <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dobijte 32-bitnu celobrojnu <code>number</code> vrednost od <code>\"4.5\"</code> koristeći <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Kreira 64-bitni ceo broj od date vrednosti.",
        "Documentation.LongDescription": "Vraća 64-bitnu celobrojnu vrednost <code>number</code> iz datog <code>value</code>. Ako je dati <code>value</code> <code>null</code>, <code>Int64.From</code> vraća <code>null</code>. Ako je dati <code>value</code> <code>number</code> u opsegu 64-bitnog celog broja bez decimalnog dela, vraća se <code>value</code>. Ako sadrži decimalni deo, broj se zaokružuje pomoću navedenog režima zaokruživanja. Podrazumevani režim zaokruživanja je <code>RoundingMode.ToEven</code>. Ako je <code>value</code> nekog drugog tipa, biće konvertovan u <code>number</code>, koristeći <code>Number. FromText</code>. Pogledajte <code>Number.Round</code> za dostupne režime zaokruživanja. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijte 64-bitnu celobrojnu <code>numeričku</code> vrednost broja <code>„4“</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dobijte 64-bitnu celobrojnu <code>number</code> vrednost <code>\"4.5\"</code> koristeći <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Kreira potpisani 8-bitni ceo broj iz date vrednosti.",
        "Documentation.LongDescription": "Vraća 8-bitnu celobrojnu vrednost <code>number</code> iz datog <code>value</code>. Ako je dati <code>value</code> <code>null</code>, <code>Int8.From</code> vraća <code>null</code>. Ako je dati <code>value</code> <code>number</code> u opsegu 8-bitnog celog broja bez decimalnog dela, vraća se <code>value</code>. Ako sadrži decimalni deo, broj se zaokružuje pomoću navedenog režima zaokruživanja. Podrazumevani režim zaokruživanja je <code>RoundingMode.ToEven</code>. Ako je <code>value</code> nekog drugog tipa, biće konvertovan u <code>number</code>, koristeći <code>Number. FromText</code>. Pogledajte <code>Number.Round</code> za dostupne režime zaokruživanja. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijte potpisanu 8-bitnu celobrojnu <code>number</code> vrednost od <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dobijte potpisanu 8-bitnu celobrojnu <code>number</code> vrednost od <code>\"4.5\"</code> koristeći <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Vraća apstraktno stablo sintakse (AST) za telo funkcije.",
        "Documentation.LongDescription": "<p>Vraća apstraktno stablo sintakse (AST) za telo za <code>function</code>, normalizovano u <i>izraz stavke</i>:\r\n<ul>\r\n  <li>Funkcija mora biti lambda od 1 argumenta.</li>\r\n  <li>Sve reference za parametar funkcije zamenjuju se sa <code>ItemExpression.Item</code>.</li>\r\n  <li>AST će biti pojednostavljen tako da sadrži samo sledeće vrste čvorova:\r\n    <ul>\r\n      <li><code>Konstanta</code></li>\r\n      <li><code>Pozivanje</code></li>\r\n      <li><code>Unarni</code></li>\r\n      <li><code>Binarni</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Dolazi do greške ako AST izraza stavke ne može da se vrati za telo za <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vraća AST za telo funkcije <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Vraća sadržaj JSON dokumenta.",
        "Documentation.LongDescription": "Vraća sadržaj JSON dokumenta.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Stvara JSON prikaz date vrednosti.",
        "Documentation.LongDescription": "<p>Stvara JSON predstavljanje date vrednosti <code>value</code> sa šifrovanjem teksta koji navodi <code>encoding</code>. Ako je <code>encoding</code> izostavljen, koristi se UTF8. Vrednosti se predstavljaju na sledeći način:</p>\r\n <ul>\r\n        <li>Prazne, tekstualne i logičke vrednosti se predstavljaju kao odgovarajući JSON tipovi</li>\r\n        <li>Brojevi se predstavljaju kao brojevi u JSON-u, osim što se <code>#infinity</code>, <code>-#infinity</code> i <code>#nan</code> konvertuju u praznu vrednost</li>\r\n        <li>Liste se predstavljaju kao JSON nizovi</li>\r\n        <li>Zapisi se predstavljaju kao JSON objekti</li>\r\n        <li>Tabele se predstavljaju kao niz objekata</li>\r\n        <li>Datumi, vreme, datumi i vreme, vremenske zone i trajanja se predstavljaju kao ISO-8601 tekst</li>\r\n        <li>Binarne vrednosti se predstavljaju kao base-64 kodirani tekst</li>\r\n        <li>Tipovi i funkcije stvaraju grešku</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte složenu vrednost u JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Konvertuje binarnu vrednost u listu tekstualnih vrednosti podeljenih kod preloma reda. Ako se navede stil znakova navoda, prelomi reda se mogu pojaviti pod znakovima navoda. Ako includeLineSeparators ima vrednost „true“, znakovi za prelom reda su uključeni u tekst.",
        "Documentation.LongDescription": "Konvertuje binarnu vrednost u listu tekstualnih vrednosti podeljenih kod preloma reda. Ako se navede stil znakova navoda, prelomi reda se mogu pojaviti pod znakovima navoda. Ako includeLineSeparators ima vrednost „true“, znakovi za prelom reda su uključeni u tekst.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Konvertuje tekstualnu vrednost u listu tekstualnih vrednosti razdeljenih kod preloma reda. Ako includeLineSeparators ima vrednost „true“, znaci za prelom reda će biti uključeni u tekst.",
        "Documentation.LongDescription": "Konvertuje tekstualnu vrednost u listu tekstualnih vrednosti razdeljenih kod preloma reda. Ako includeLineSeparators ima vrednost „true“, znaci za prelom reda će biti uključeni u tekst.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (podrazumevano) Nije potrebno navesti ponašanje prilikom upotrebe znakova navoda.</li>\r\n            <li><code>QuoteStyle.Csv:</code> Znakovi navoda se koriste u skladu sa CSV datotekom. Dvostruki znak navoda se koristi za označavanje takvih regiona, a par dvostrukih znakova navoda se koristi za označavanje jednog dvostrukog znaka navoda u okviru takvog regiona. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Konvertuje listu tekstualnih vrednosti u binarnu vrednost pomoću navedenog kodiranja i svojstva lineSeparator. Navedeno svojstvo lineSeparator se dodaje na kraj svakog reda.  Ako nije navedeno, koriste se znakovi za kraj reda i znakovi za položaj u sledećem redu.",
        "Documentation.LongDescription": "Konvertuje listu tekstualnih vrednosti u binarnu vrednost pomoću navedenog kodiranja i svojstva lineSeparator. Navedeno svojstvo lineSeparator se dodaje na kraj svakog reda.  Ako nije navedeno, koriste se znakovi za kraj reda i znakovi za položaj u sledećem redu.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Konvertuje listu tekstualnih vrednosti u pojedinačnu tekstualnu vrednost.  Navedeno svojstvo lineSeparator se dodaje na kraj svakog reda.  Ako nije navedeno, koriste se znakovi za kraj reda i znakovi za položaj u sledećem redu.",
        "Documentation.LongDescription": "Konvertuje listu tekstualnih vrednosti u pojedinačnu tekstualnu vrednost.  Navedeno svojstvo lineSeparator se dodaje na kraj svakog reda.  Ako nije navedeno, koriste se znakovi za kraj reda i znakovi za položaj u sledećem redu.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Vraća „true“ ako svi izrazi imaju vrednost „true“.",
        "Documentation.LongDescription": "Vraća „true“ ako svi izrazi sa liste <code>list</code> imaju vrednost „true“.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li svi izrazi sa liste {true, true, 2 > 0} imaju vrednost „true“.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Utvrđivanje da li svi izrazi sa liste {true, true, 2 < 0} imaju vrednost „true“.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Vraća „true“ ako bilo koji izraz ima vrednost „true“.",
        "Documentation.LongDescription": "Vraća „true“ ako bilo koji izraz sa liste <code>list</code> ima vrednost „true“.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li bilo koji od izraza sa liste {true, false, 2 > 0} ima vrednost „true“.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Utvrđivanje da li bilo koji od izraza sa liste {2 = 0, false, 2 < 0} ima vrednost „true“.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Vraća prosek vrednosti. Funkcioniše sa brojčanim vrednostima, vrednostima datuma, datuma i vremena, datuma i vremenske zone, i trajanja.",
        "Documentation.LongDescription": "Vraća prosečnu vrednost za stavke sa liste, <code>list</code>. Rezultat se navodi u vidu istog tipa podataka kao vrednosti sa liste. Funkcioniše samo sa brojčanim vrednostima, vrednostima datuma, vremena, datuma i vremena, datuma i vremenske zone, i trajanja.\r\n    Ako je lista prazna, vraća se rezultat bez vrednosti.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje prosečne vrednosti liste brojeva, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Pronalaženje prosečne vrednosti za vrednosti datuma 1. januar 2011, 2. januar 2011. i 3. januar 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Baferuje listu.",
        "Documentation.LongDescription": "Baferuje listu <code>list</code> u memoriju. Rezultat ovog poziva je stabilna lista.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje stabilne kopije liste {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Kombinuje više lista i vraća jednu listu.",
        "Documentation.LongDescription": "Uzima listu koja se sastoji od lista, <code>lists</code>, i objedinjuje ih u jednu novu listu.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kombinovanje dve jednostavne liste {1, 2} i {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Kombinovanje dve liste, {1, 2} i {3, {4, 5}}, od kojih jedna sadrži ugnežđenu listu.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Vraća broj stavki na listi.",
        "Documentation.LongDescription": "Vraća broj stavki na listi <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje broja vrednosti na listi {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Vraća listu vrednosti iz koje su uklonjeni duplikati.",
        "Documentation.LongDescription": "Vraća listu koja sadrži sve vrednosti sa liste <code>list</code> iz koje su uklonjeni duplikati. Ako je lista prazna, rezultat je prazna lista.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje duplikata iz liste {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Vraća prvu vrednost sa liste ili navedenu podrazumevanu vrednost ako je lista prazna.",
        "Documentation.LongDescription": "Vraća prvu stavku sa liste <code>list</code> ili opcionalnu podrazumevanu vrednost, <code>defaultValue</code>, ako je lista prazna.\r\n    Ako je lista prazna i podrazumevana vrednost nije navedena, funkcija vraća <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje prve vrednosti sa liste {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Pronalaženje prve vrednosti sa liste {}. Ako je lista prazna, vraća se -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Vraća presek vrednosti liste pronađenih u unosu.",
        "Documentation.LongDescription": "Vraća presek vrednosti liste pronađenih na listi unosa <code>lists</code>. Može se navesti opcionalni parametar <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje preseka lista {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Navodi da li lista sadrži duplikate.",
        "Documentation.LongDescription": "Vraća logičku vrednost nezavisno od toga da li na listi <code>list</code> ima duplikata: vraća <code>true</code> ako lista sadrži jedinstvene vrednosti, a <code>false</code> ako ima dupliranih vrednosti. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Otkrivanje da li lista {1, 2, 3} sadrži jedinstvene vrednosti (t.j. da li je bez duplikata).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Otkrivanje da li lista {1, 2, 3, 3} sadrži jedinstvene vrednosti (t.j. da li je bez duplikata).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Vraća „true“ ako je lista prazna.",
        "Documentation.LongDescription": "Vraća <code>true</code> ako lista, <code>list</code>, ne sadrži vrednosti (dužina 0). Ako lista sadrži vrednosti (dužina > 0), vraća <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje da li je lista {} prazna.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Pronalaženje da li je lista {1, 2} prazna.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Vraća poslednju vrednost sa liste ili navedenu podrazumevanu vrednost ako je lista prazna.",
        "Documentation.LongDescription": "Vraća poslednju stavku sa liste <code>list</code> ili opcionalnu podrazumevanu vrednost, <code>defaultValue</code>, ako je lista prazna.\r\n    Ako je lista prazna i podrazumevana vrednost nije navedena, funkcija vraća <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje poslednje vrednosti sa liste {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Pronalaženje poslednje vrednosti sa liste {} ili dobijanje vrednosti -1 ako je lista prazna.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Vraća poslednju vrednost sa liste.  Opcionalno može da navede broj vrednosti koje treba vratiti ili kvalifikujući uslov.",
        "Documentation.LongDescription": "Vraća poslednju stavku sa liste <code>list</code>. Ako je lista prazna, vraća se izuzetak.\r\n Ova funkcija uzima opcionalni parametar, <code>countOrCondition</code>, da bi podržala prikupljanje više stavki ili filtriranje stavki. <code>countOrCondition</code> se može navesti na tri načina:\r\n <ul>\r\n  <li>Ako se navede broj, vraća se najviše toliko stavki. </li>\r\n  <li>Ako se navede uslov, vraćaju se sve stavke koje inicijalno zadovoljavaju taj uslov, počev od kraja liste. Ako neka stavka ne zadovolji uslov, kasnije stavke se ne uzimaju u obzir. </li>\r\n  <li>Ako je ovaj parametar bez vrednosti, vraća se poslednja stavka sa liste.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje poslednje vrednosti sa liste {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Pronalaženje poslednjih vrednosti sa liste {3, 4, 5, -1, 7, 8, 2} koje su veće od 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Vraća maksimalnu ili podrazumevanu vrednost za praznu listu.",
        "Documentation.LongDescription": "Vraća maksimalnu stavku sa liste <code>list</code> ili opcionalnu podrazumevanu vrednost <code>default</code> ako je lista prazna.\r\n    Može se navesti opcionalna vrednost comparisonCriteria, <code>comparisonCriteria</code>, da bi se odredilo kako će se porediti stavke sa liste. Ako je ovaj parametar bez vrednosti, koristi se podrazumevani upoređivač.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje maksimuma na listi {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Pronalaženje maksimuma na listi {} ili vraćanje vrednosti -1 ako je lista prazna. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Vraća vrednost medijane sa liste.",
        "Documentation.LongDescription": "Vraća stavku medijane sa liste <code>list</code>. Ova funkcija vraća rezultat <code>bez vrednosti</code> ako lista sadrži vrednosti koje nisu <code>bez vrednosti</code>.\r\n    Ako postoji paran broj stavki, funkcija bira manju od dve stavke medijane osim u slučaju da se lista\r\n    sastoji isključivo od datuma i vremena, trajanja i brojeva puta, u kom slučaju vraća prosek dve stavke.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje medijane sa liste <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Vraća minimalnu ili podrazumevanu vrednost za praznu listu.",
        "Documentation.LongDescription": "Vraća minimalnu stavku sa liste <code>list</code> ili opcionalnu podrazumevanu vrednost <code>default</code> ako je lista prazna.\r\n    Može se navesti opcionalna vrednost comparisonCriteria, <code>comparisonCriteria</code>, da bi se odredilo kako će se porediti stavke sa liste. Ako je ovaj parametar bez vrednosti, koristi se podrazumevani upoređivač.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje minimuma na listi {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Pronalaženje minimuma na listi {} ili vraćanje vrednosti -1 ako je lista prazna. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Vraća najčešću vrednost sa liste.",
        "Documentation.LongDescription": "Vraća stavku koja se najčešće pojavljuje na listi, <code>list</code>. Ako je lista prazna, vraća se izuzetak. Ako se više stavki pojavljuje sa istom maksimalnom učestalošću, bira se poslednja.\r\n    Može se navesti opcionalna vrednost <code>comparisonCriteria</code>, <code>equationCriteria</code>, radi kontrole testiranja jednakosti. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje stavke koja se najčešće pojavljuje na listi <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Pronalaženje stavke koja se najčešće pojavljuje na listi <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Vraća listu vrednosti koje se najčešće pojavljuju na listi.",
        "Documentation.LongDescription": "Vraća stavku koja se najčešće pojavljuje na listi, <code>list</code>. Ako je lista prazna, vraća se izuzetak. Ako se više stavki pojavljuje sa istom maksimalnom učestalošću, bira se poslednja.\r\n    Može se navesti opcionalna vrednost <code>comparisonCriteria</code>, <code>equationCriteria</code>, radi kontrole testiranja jednakosti. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje stavki koje se najčešće pojavljuju na listi <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Vraća broj stavki sa liste koje nisu bez vrednosti.",
        "Documentation.LongDescription": "Vraća broj stavki sa liste <code>list</code> koje nisu bez vrednosti.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Vraća listu pomaka za unos.",
        "Documentation.LongDescription": "Vraća listu pomaka za listu unosa <code>list</code>.\r\n    Kada se za promenu liste koristi List.Transform, može se koristiti lista položaja da bi se transformaciji omogućio pristup položaju.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje pomaka za vrednosti sa liste {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Vraća proizvod brojeva sa liste.",
        "Documentation.LongDescription": "Vraća proizvod brojeva sa liste, <code>numbersList</code>, koji nisu bez vrednosti. Vraća rezultat bez vrednosti ako na listi nema vrednosti koje nisu bez vrednosti.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje proizvoda brojeva sa liste <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Vraća listu nasumičnih brojeva.",
        "Documentation.LongDescription": "Vraća listu nasumičnih brojeva između 0 i 1, na osnovu broja vrednosti koje treba generisati i opcionalne početne vrednosti.\r\n<ul>\r\n   <li><code>count</code>: Broj nasumičnih vrednosti koje treba generisati.</li>\r\n   <li><code>seed</code>:  <i>[Optional]</i> Numerička vrednost koja se koristi za dodavanje generatora nasumičnih brojeva.  Ako se izostavi, svaki put kada pozovete funkciju generiše se jedinstvena lista nasumičnih brojeva.  Ako uz broj navedete početnu vrednost, svaki poziv funkcije generiše istu listu nasumičnih brojeva.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste 3 nasumična broja.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Kreiranje liste 3 nasumična broja, uz navođenje početne vrednosti.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Vraća listu koja preskače navedeni broj elemenata na početku liste.",
        "Documentation.LongDescription": "Vraća listu koja uklanja prvi element liste <code>list</code>. Ako je <code>list</code> prazna lista, vraća se prazna lista.\r\nOva funkcija preuzima opcionalni parametar, <code>countOrCondition</code>, da bi se podržalo uklanjanje više vrednosti kao što je navedeno ispod.\r\n <ul>\r\n <li>Ako je naveden broj, uklanja se najviše toliko stavki. </li>\r\n <li>Ako je naveden uslov, sve uzastopne stavke koje se podudaraju na početku<code>list</code>se uklanjaju.</li>\r\n <li>Ako je ovaj parametar bez vrednosti, primećuje se podrazumevano ponašanje. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od {1, 2, 3, 4, 5} bez prva 3 broja.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Kreira listu od {5, 4, 2, 6, 1} koja počinje brojem manjim od 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Vraća listu koja uklanja navedeni broj elemenata na kraju liste.",
        "Documentation.LongDescription": "Vraća listu koja uklanja poslednje <code>countOrCondition</code>elemente sa kraja liste <code>list</code>. Ako <code>list</code> ima manje od <code>countOrCondition</code> elemenata, vraća se prazna lista.\r\n <ul>\r\n <li>Ako je naveden broj, uklanja se najviše toliko stavki. </li>\r\n <li>Ako je naveden uslov, sve uzastopne stavke koje se podudaraju na kraju <code>list</code> se uklanjaju.</li>\r\n <li>Ako je ovaj parametar bez vrednosti, uklanja se samo jedna stavka. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od {1, 2, 3, 4, 5} bez poslednja 3 broja.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Kreiranje liste od {5, 4, 2, 6, 4} koja se završava brojem manjim od 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Uklanja sve vrednosti „bez vrednosti“ iz navedene liste.",
        "Documentation.LongDescription": "Uklanja sva pojavljivanja vrednosti „bez vrednosti“ u <code>list</code>. Ako na listi ne postoje vrednosti „bez vrednosti“, vraća se prvobitna lista.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Uklanjanje vrednosti „bez vrednosti“ iz liste {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Obrće redosled vrednosti na listi.",
        "Documentation.LongDescription": "Vraća listu vrednosti sa liste <code>list</code> u obrnutom redosledu.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od {1..10} u obrnutom redosledu.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Vraća jednu stavku sa liste za listu dužine jedan. U suprotnom, vraća izuzetak.",
        "Documentation.LongDescription": "Ako lista <code>list</code> sadrži samo jednu stavku, vraća tu stavku.\r\n    Ako lista sadrži dve ili više stavki ili je prazna, funkcija vraća izuzetak.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje jedne vrednosti sa liste {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Pronalaženje jedne vrednosti sa liste {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Vraća jednu stavku sa liste za listu dužine jedan i podrazumevanu vrednost za praznu listu.",
        "Documentation.LongDescription": "Ako lista <code>list</code> sadrži samo jednu stavku, vraća tu stavku.\r\n    Ako je lista prazna, funkcija vraća vrednost bez vrednosti, osim u slučaju da se navede opcionalna vrednost <code>default</code>. Ako lista sadrži dve ili više stavki, funkcija vraća grešku.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje jedne vrednosti sa liste {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Pronalaženje jedne vrednosti sa liste {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Pronalaženje jedne vrednosti sa liste {}. Ako je lista prazna, vraća se -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Vraća listu koja preskače navedeni broj elemenata na početku liste.",
        "Documentation.LongDescription": "Vraća listu koja preskače prvi element liste <code>list</code>. Ako je <code>list</code> prazna lista, vraća se prazna lista.\r\nOva funkcija preuzima opcionalni parametar, <code>countOrCondition</code>, da bi se podržalo preskakanje više vrednosti kao što je navedeno ispod.\r\n <ul>\r\n <li>Ako je naveden broj, preskače se najviše toliko stavki. </li>\r\n <li>Ako je naveden uslov, sve uzastopne stavke koje se podudaraju na početku<code>list</code> se preskaču.</li>\r\n <li>Ako je ovaj parametar bez vrednosti, primećuje se podrazumevano ponašanje. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste od {1, 2, 3, 4, 5} bez prva 3 broja.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Kreira listu od {5, 4, 2, 6, 1} koja počinje brojem manjim od 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Sortira listu podataka prema navedenim kriterijumima.",
        "Documentation.LongDescription": "Sortira listu podataka, <code>list</code>, prema navedenim opcionalnim kriterijumima.\r\n    Može se navesti opcionalni parametar, <code>comparisonCriteria</code>, kao kriterijum poređenja. Može da uzme jednu od sledećih vrednosti:\r\n    <ul>\r\n    <li> Da bi se kontrolisao redosled, kriterijum poređenja može da bude Order enum vrednost. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Da bi se izračunao ključ koji će se koristiti za sortiranje, može se koristiti funkcija sa 1 argumentom. </li>\r\n    <li> Da bi se izabrao ključ i kontrolisao redosled, kriterijum poređenja može da bude lista koja sadrži ključ i redosled (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Za potpunu kontrolu poređenja, može se koristiti funkcija od 2 argumenta. Ovoj funkciji će biti prosleđene dve stavke sa liste (bilo koje dve stavke, bilo kojim redosledom). Funkcija treba da vrati jednu od sledećih vrednosti:\r\n       <ul>\r\n              <li> <code>-1</code>: Prva stavka je manja od druge stavke.</li>\r\n              <li> <code>0</code>: Stavke su jednake.</li>\r\n              <li> <code>1</code>: Prva stavka je veća od druge stavke.</li>\r\n          </ul>\r\n          Value.Compare je metod koji se može koristiti za delegiranje ove logike. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Sortiranje liste {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Sortiranje liste {2, 3, 1} po opadajućem redosledu.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Sortiranje liste {2, 3, 1} po opadajućem redosledu pomoću metoda Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Vraća procenu standardne devijacije koja se zasniva na uzorku.",
        "Documentation.LongDescription": "Vraća procenu standardne devijacije vrednosti sa liste, <code>numbersList</code>, koja se zasniva na uzorku.\r\n    Ako je <code>numbersList</code> lista brojeva, vraća se broj.\r\n    Vraća se izuzetak ako je lista prazna ili ako sadrži stavke koje nisu tipa <code>broj</code>.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje standardne devijacije brojeva od 1 do 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Vraća zbir stavki na listi.",
        "Documentation.LongDescription": "Vraća zbir vrednosti sa liste, <code>list</code>, koje nisu bez vrednosti.  Vraća rezultat bez vrednosti ako na listi nema vrednosti koje nisu bez vrednosti.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje zbira brojeva sa liste <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Vraća združene vrednosti liste pronađene u unosu.",
        "Documentation.LongDescription": "Uzima spisak lista <code>lists</code>, pravi uniju stavki sa pojedinačnih lista i vraća ih u vidu izlazne liste. U skladu sa time, vraćena lista sadrži sve stavke iz izlaznih lista.\r\n    Ova operacija koristi tradicionalnu semantiku duplikata elemenata, tako da se duplirane vrednosti uparuju u okviru unije.\r\n    Može se navesti opcionalna vrednost kriterijuma jednakosti, <code>equationCriteria</code>, radi kontrole testiranja jednakosti. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje unije liste {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Vraća spisak listi tako što kombinuje stavke koje su na istom položaju na više listi.",
        "Documentation.LongDescription": "Uzima spisak listi <code>lists</code> i vraća spisak listi koji kombinuje stavke na istom položaju.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zipuje dve jednostavne liste {1, 2} i {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Zipuje dve jednostavne liste različitih dužina {1, 2} i {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Kreira logičku vrednost od date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>logical</code> od datog <code>value</code>. Ako dati <code>value</code> predstavlja <code>null</code>, <code>Logical.From</code> vraća <code>null</code>.  Ako dati <code>value</code> predstavlja <code>logical</code>, vraća se <code>value</code>. Vrednosti sledećih tipova se mogu konvertovati u vrednost <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: Vrednost <code>logical</code> od tekstualne vrednosti, bilo <code>\"true\"</code> ili <code>\"false\"</code>. Pogledajte <code>Logical.FromText</code> za detalje.</li>\r\n        <li><code>number</code>: <code>false</code> ako je <code>value</code> jednako <code>0</code>, a <code>true</code> ako nije.</li>\r\n      </ul>\r\nAko je <code>value</code> nekog drugog tipa, vraća se greška.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>2</code> u <code>logical</code> vrednost.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Kreira logičku vrednost od tekstualnih vrednosti „true“ i „false“.",
        "Documentation.LongDescription": "Kreira logičku vrednost od tekstualne vrednosti <code>text</code>, bilo „true“ ili „false“. Ako <code>text</code> sadrži drugačiju nisku, vraća se izuzetak. Tekstualna vrednost <code>text</code> ne razlikuje mala i velika slova.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje logičke vrednosti od tekstualne niske „true“.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Kreiranje logičke vrednosti od tekstualne niske „a“.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Vraća tekstualnu vrednost „true“ ili „false“ na osnovu logičke vrednosti.",
        "Documentation.LongDescription": "Kreira tekstualnu vrednost od logičke vrednosti <code>logicalValue</code>, bilo <code>true</code> ili <code>false</code>. Ako <code>logicalValue</code> nije logička vrednost, vraća se izuzetak.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje tekstualne vrednosti od logičke <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Vraća apsolutnu vrednost broja.",
        "Documentation.LongDescription": "Vraća apsolutnu vrednost za <code>number</code>. Ako je <code>number</code> bez vrednosti, <code>Number.Abs</code> vraća rezultat bez vrednosti.\r\n    <ul>\r\n        <li><code>number</code>: <code>number</code> za koji se izračunava apsolutna vrednost.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Apsolutna vrednost za -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Vraća arkus kosinus broja.",
        "Documentation.LongDescription": "Vraća arkus kosinus za <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Vraća arkus sinus broja.",
        "Documentation.LongDescription": "Vraća arkus sinus za <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Vraća arkus tangens broja.",
        "Documentation.LongDescription": "Vraća arkus tangens za <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Vraća bajt ako je svaki bit suprotan unosu.",
        "Documentation.LongDescription": "Vraća rezultat izvršavanja operacije „Not“ na nivou bita na <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Vraća kosinus broja.",
        "Documentation.LongDescription": "Vraća kosinus za <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje kosinusa ugla 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Vraća hiperbolički kosinus broja.",
        "Documentation.LongDescription": "Vraća hiperbolički kosinus za <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Podiže e na dati stepen.",
        "Documentation.LongDescription": "Vraća rezultat podizanja e na stepen <code>number</code> (eksponencijalna funkcija).\r\n      <ul>\r\n        <li><code>number</code>: <code>number</code> za koji se izračunava eksponencijalna funkcija. Ako je <code>number</code> bez vrednosti, <code>Number.Exp</code> vraća rezultat bez vrednosti. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Podizanje e na treći stepen.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Vraća faktorijel broja.",
        "Documentation.LongDescription": "Vraća faktorijel broja <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje faktorijela broja 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Kreira broj od date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>number</code> od datog <code>value</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).\r\nAko dati <code>value</code> predstavlja <code>null</code>, <code>Number.From</code> vraća <code>null</code>. Ako dati <code>value</code> predstavlja <code>number</code>, vraća se <code>value</code>. Vrednosti sledećih tipova se mogu konvertovati u vrednost <code>number</code>:\r\n      <ul>\r\n        <li><code>text</code>: Vrednost <code>number</code> od tekstualne reprezentacije. Obrađuju se uobičajeni tekstualni formati (\"15\", \"3,423.10\", \"5.0E-10\"). Pogledajte <code>Number.FromText</code> za detalje.</li>\r\n        <li><code>logical</code>: 1 za <code>true</code>, 0 za <code>false</code>.</li>\r\n        <li><code>datetime</code>: Broj dvostruke preciznosti sa pokretnim zarezom koji sadrži ekvivalent datuma OLE automatizacije.</li>\r\n        <li><code>datetimezone</code>: Broj dvostruke preciznosti sa pokretnim zarezom koji sadrži ekvivalent datuma OLE automatizacije za lokalni datum i vreme <code>value</code>.</li>\r\n        <li><code>date</code>: Broj dvostruke preciznosti sa pokretnim zarezom koji sadrži ekvivalent datuma OLE automatizacije.</li>\r\n        <li><code>time</code>: Izraženo u decimalnim danima.</li>\r\n        <li><code>duration</code>: Izraženo u celim i decimalnim danima.</li>\r\n      </ul>\r\nAko je <code>value</code> nekog drugog tipa, vraća se greška.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijanje vrednosti <code>number</code> za <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dobijanje vrednosti <code>number</code> za <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Preuzmite vrednost <code>broj</code> od <code>„12,3%“</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Kreira brojeve od uobičajenih tekstualnih formata („15“, „3,423.10“, „5.0E-10“).",
        "Documentation.LongDescription": "Vraća vrednost <code>number</code> od date tekstualne vrednosti, <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: Tekstualna reprezentacija brojčane vrednosti. Reprezentacija mora da bude u uobičajenom formatu broja, kao što su „15“, „3423,10“, „5.0E-10“.</li>\r\n  <li><code>culture</code>: Opcionalna kultura koja kontroliše kako se <code>text</code> tumači (na primer, „en-US“).</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijanje brojčane vrednosti za <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dobijanje brojčane vrednosti za <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Navodi da li je vrednost paran broj.",
        "Documentation.LongDescription": "Navodi da li je vrednost, <code>number</code>, paran broj tako što vraća <code>true</code> ako jeste paran broj, a <code>false</code> ako nije.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Provera da li je 625 paran broj.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Provera da li je 82 paran broj.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Navodi da li vrednost nije broj.",
        "Documentation.LongDescription": "Navodi da li vrednost nije broj. Vraća <code>true</code> ako je <code>number</code> ekvivalentno vrednosti <code>Number.IsNaN</code>, a <code>false</code> ako nije.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Provera da li 0 podeljeno sa 0 nije broj.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Provera da li 1 podeljeno sa 0 nije broj.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Navodi da li je vrednost neparan broj.",
        "Documentation.LongDescription": "Navodi da li je vrednost neparan broj. Vraća <code>true</code> ako je <code>number</code> neparan broj, a <code>false</code> ako nije.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Provera da li je 625 neparan broj.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Provera da li je 82 neparan broj.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Vraća prirodni logaritam broja.",
        "Documentation.LongDescription": "Vraća prirodni logaritam broja, <code>number</code>. Ako je <code>number</code> bez vrednosti, <code>Number.Ln</code> vraća rezultat bez vrednosti.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje prirodnog logaritma broja 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Vraća logaritam broja za navedenu osnovu (podrazumevana je e).",
        "Documentation.LongDescription": "Vraća logaritam broja, <code>number</code>, za navedenu osnovu <code>base</code>. Ako se <code>base</code> ne navede, podrazumevana vrednost je Number.E.\r\n    Ako je <code>number</code> bez vrednosti, <code>Number.Log</code> vraća rezultat bez vrednosti.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje logaritma broja 2 sa osnovom 10.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Izračunavanje logaritma broja 2 sa osnovom e.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Vraća logaritam broja sa osnovom 10.",
        "Documentation.LongDescription": "Vraća logaritam broja, <code>number</code>, sa osnovom 10. Ako je <code>number</code> bez vrednosti, <code>Number.Log10</code> vraća rezultat bez vrednosti.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje logaritma broja 2 sa osnovom 10.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Vraća zaokruženi broj. Može se navesti broj cifara i način zaokruživanja.",
        "Documentation.LongDescription": "Daje rezultat zaokruživanja <code>number</code> na najbliži broj. Ako <code>number</code> je bez vrednosti, <code>Number.Round</code> vraća rezultat bez vrednosti.<br>\r\n      <br>\r\n      Podrazumevano se <code>number</code> zaokružuje na najbliži celi broj, i veze se raskidaju tako što se zaokruže na najbliži paran broj (koristeći <code>RoundingMode.ToEven</code>,takođe poznat i kao „banker za zaokruživanje“).<br>\r\n      <br>\r\n      Međutim, ove podrazumevane vrednosti mogu da se zamene pomoću sledećih opcionalnih parametara.\r\n      <ul>\r\n        <li><code>digits</code>: Uzrokuje <code>number</code>da bude zaokružen na navedeni broj decimala.</li>\r\n        <li><code>roundingMode</code>: Zamenjuje podrazumevano ponašanje preloma veze kada <code>number</code> se nalazi u sredini između dve potencijalne zaokružene vrednosti\r\n      (pogledajte <code>RoundingMode.Type</code>za moguće vrednosti).</li>\r\n</ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokruživanje broja 1,234 na najbliži ceo broj.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokruživanje broja 1,56 na najbliži ceo broj.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Zaokruživanje broja 1,2345 na broj sa dva decimalna mesta.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Zaokruživanje broja 1,2345 na broj sa tri decimalna mesta (zaokruživanje na veći broj).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Zaokruživanje broja 1,2345 na broj sa tri decimalna mesta (zaokruživanje na manji broj).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Daje rezultat zaokruživanja pozitivnih brojeva na veći broj, a negativnih na manji. Može da se navede broj cifara.",
        "Documentation.LongDescription": "Daje rezultat zaokruživanja broja <code>number</code> na osnovu znaka broja. Ova funkcija će pozitivne brojeve zaokružiti na veći broj, a negativne na manji.\r\n    Ako je <code>digits</code> naveden, <code>number</code> se zaokružuje na <code>digits</code> broj decimalnih cifara.\r\n",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokruživanje broja -1,2 dalje od nule.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Zaokruživanje broja 1,2 dalje od nule.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Zaokružite broj -1,234 na broj sa dva decimalna mesta u suprotnom smeru od nule.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Daje prethodni najveći broj. Može da se navede broj cifara.",
        "Documentation.LongDescription": "Vraća rezultat zaokruživanja <code>number</code> na prethodni najveći ceo broj. Ako je <code>number</code> null, ova funkcija vraća null.\r\n\r\n    Ako je <code>digits</code> dato, <code>number</code> zaokružuje se na navedeni broj decimalnih cifara.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokruživanje broja 1,234 na manji ceo broj.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokruživanje broja 1,999 na manji ceo broj.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Zaokružite broj 1,999 na manji broj sa dva decimalna mesta.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Daje rezultat zaokruživanja pozitivnih brojeva na manji broj, a negativnih na veći. Može da se navede broj cifara.",
        "Documentation.LongDescription": "Daje rezultat zaokruživanja broja <code>number</code> na osnovu znaka broja. Ova funkcija će pozitivne brojeve zaokružiti na manji broj, a negativne na veći.\r\n    Ako je <code>digits</code> naveden, <code>number</code> se zaokružuje na <code>digits</code> broj decimalnih cifara.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokruživanje broja -1,2 prema nuli.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Zaokruživanje broja 1,2 prema nuli.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Zaokružite broj -1,234 na broj sa dva decimalna mesta prema nuli.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Daje sledeći najveći broj. Može da se navede broj cifara.",
        "Documentation.LongDescription": "Vraća rezultat zaokruživanja <code>number</code> na sledeći najveći ceo broj. Ako je <code>number</code> null, ova funkcija vraća null.\r\n    Ako je <code>digits</code> dato, <code>number</code> zaokružuje se na navedeni broj decimalnih cifara.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokruživanje broja 1,234 na veći ceo broj.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Zaokruživanje broja 1,999 na veći ceo broj.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Zaokružite 1,234 na veći broj sa dva decimalna mesta.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Vraća 1 ako je broj pozitivan, -1 ako je negativan i 0 ako je broj nula.",
        "Documentation.LongDescription": "Vraća 1 ako je <code>number</code> pozitivan broj, -1 ako je negativan i 0 ako je broj nula.\r\n    Ako je <code>number</code> bez vrednosti, <code>Number.Sign</code> vraća rezultat bez vrednosti.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje znaka za 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Utvrđivanje znaka za -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Utvrđivanje znaka za 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Vraća sinus broja.",
        "Documentation.LongDescription": "Vraća sinus za <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje sinusa ugla 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Vraća hiperbolički sinus broja.",
        "Documentation.LongDescription": "Vraća hiperbolički sinus za <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Vraća kvadratni koren broja.",
        "Documentation.LongDescription": "Vraća kvadratni koren broja <code>number</code>.\r\n    Ako je <code>number</code> bez vrednosti, <code>Number.Sqrt</code> vraća rezultat bez vrednosti. Ako je to negativna vrednost, vraća se <code>Number.NaN</code> (nije broj).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje kvadratnog korena broja 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Pronalaženje kvadratnog korena broja 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Vraća tangens broja.",
        "Documentation.LongDescription": "Vraća tangens za <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje tangensa ugla 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Vraća hiperbolički tangens broja.",
        "Documentation.LongDescription": "Vraća hiperbolički tangens za <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Konvertuje dati broj u tekst.",
        "Documentation.LongDescription": "Konvertuje numeričku vrednost <code>number</code> u tekstualnu vrednost u skladu sa formatom koji navodi <code>format</code>.<br>\r\n    <br>\r\n    Format predstavlja tekstualnu vrednost koja ukazuje na to kako treba konvertovati broj. Za više detalja o podržanim vrednostima formata idite na https://go.microsoft.com/fwlink/?linkid=2241210 i https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Opcionalno <code>culture</code> se može takođe obezbediti (na primer, „en-US”) za kontrolisanje ponašanja koja zavise od kulture od <code>format</code>.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Konvertuj broj u tekst bez navođenja formata.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Konvertuj broj u eksponencijalni format.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Konvertuj broj u format procenta sa samo jednim decimalnim mestom.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Vraća tabelu OData feed-ova koju nudi OData usluga.",
        "Documentation.LongDescription": "Vraća tabelu OData feed-ova koju nudi usluga OData iz uri <code>serviceUri</code>, zaglavlja <code>headers</code>. Logička vrednost koja određuje da li će se koristiti istovremene veze ili opcioni parametar zapisa, <code>options</code>, može biti navedena za kontrolu sledećih opcija:\r\n    <ul>\r\n    <li><code>Upit</code>: Programski dodajte parametre upita u URL adresu bez brige o begstvu. </li>\r\n    <li> <code>Zaglavlja</code> : Navođenje ove vrednosti kao zapisa obezbediće dodatna zaglavlja HTTP zahtevu.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Navođenje ove vrednosti kao liste će isključiti ove HTTP ključeve zaglavlja iz računanja za keširanje podataka.</li>\r\n    <li> <code>ApiKeyName</code> : Ako ciljni sajt ima pojam API ključa, ovaj parametar se može koristiti za određivanje imena (ne vrednosti) ključnog parametra koji se mora koristiti u URL adresi. Stvarna vrednost ključa je navedena u akreditivima.</li>\r\n    <li> <code>Timeout</code> : Određivanjem ove vrednosti kao trajanja promeniće se vremensko ograničenje za HTTP zahtev. Podrazumevana vrednost je 600 sekundi.</li>\r\n    <li> <code>EnableBatch</code> : Logički (tačno/netačno) koji postavlja da li će se dozvoliti generisanje OData $batch zahteva ako je MaxUriLength prekoračena (podrazumevana vrednost je netačna).</li>\r\n    <li> <code>MaxUriLength</code> : Broj koji označava maksimalnu dužinu dozvoljenog uri-a poslatog usluzi OData Ako je prekoračeno i EnableBatch je tačno, onda će zahtev biti upućen OData $batch krajnjoj tački, u suprotnom neće uspeti (podrazumevano je 2048).</li>\r\n    <li> <code>Concurrent</code> : Logički (tačno/netačno) kada je postavljeno na tačno, zahtevi za uslugu će se upućivati istovremeno. Kada je postavljeno na Netačno, zahtevi će se praviti uzastopno. Kada nije navedena, vrednost će biti određena napomenom AsynchronousRequestsSupported usluge. Ako usluga ne navede da li je AsynchronousRequestsSupported podržan, zahtevi će se slati uzastopno.</li>\r\n    <li> <code>ODataVersion</code> : Broj (3 ili 4) koji navodi verziju OData protokola koja će se koristiti za ovu uslugu OData. Kada nije navedeno, biće tražene sve podržane verzije. Verzija usluge će biti određena zaglavljem OData-verzijom koje vraća usluga.</li>\r\n    <li> <code>FunctionOverloads</code> : Logičko (tačno/netačno) kada je postavljeno na tačno, preopterećenja uvoza funkcija biće navedena u navigatoru kao zasebni unosi, kada je postavljena na netačno, preopterećenja uvoza funkcija će biti navedena kao jedna funkcija ujedinjenja u navigatoru. Podrazumevana vrednost za V3: netačno. Podrazumevana vrednost za V4: tačno.</li>\r\n    <li> <code>MoreColumns</code> : Logički (tačno/netačno) kada je postavljeno na tačno, dodaje kolonu „Još kolona“ svakom feed-u entiteta koji sadrži otvorene tipove i polimorfne tipove. Ovo će sadržati polja koja nisu deklarisana u osnovnom tipu. Kada je netačno, ovo polje nije prisutno. Podrazumevano je netačno.</li>\r\n    <li> <code>IncludeAnnotations</code> : Lista naziva termina ili obrazaca kvalifikovanih za prostore odvojenih zarezima koje treba uključiti sa „*“ kao džoker znakom. Podrazumevano, nijedna od napomena nije uključena.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : Lista naziva termina ili obrazaca kvalifikovanih za prostore odvojenih zarezima koje treba uključiti u zahteve za dokumente metapodataka, sa  kao džoker znakom. Podrazumevano uključuje iste napomene kao IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code> : Omogućava usluzi OData da izbegne pisanje određenih vrednosti u odgovorima. Ako ih usluga potvrdi, te vrednosti ćemo zaključiti iz izostavljenih polja. Opcije uključuju:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : Dozvoljava usluzi OData da izostavi nulte vrednosti.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : Određuje implementaciju OData konektora za upotrebu. Važeće vrednosti su „2.0“ ili bez vrednosti.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Povežite se sa uslugom TripPin OData.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Vraća rezultat pokušaja određivanja mogućnosti SQL-a za ODBC upravljački program.",
        "Documentation.LongDescription": "Vraća rezultat pokušaja određivanja mogućnosti SQL-a sa niskom veze <code>connectionString</code> pomoću ODBC-a. <code>connectionString</code> može da bude tekst ili zapis parova vrednosti svojstava. Vrednosti svojstava mogu da budu tekstualne ili numeričke.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje izvedenih SQL mogućnosti za nisku veze.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Vraća sadržaj Parquet dokumenta u vidu tabele.",
        "Documentation.LongDescription": "Vraća sadržaj Parquet dokumenta kao tabelu. Opcije uključuju:\n    <ul>\n    <li> <code>Mapiranje tipa</code> : Tekstualna vrednost koja kontroliše podrazumevano mapiranje tipa tokom čitanja i upisivanja datoteka. Podrazumevana vrednost je „Null“ i pokušava da sačuva što veću tačnost originalnog tipa. Vrednost „SQL“ će dati rezultate koji su najprikladniji sa sistemom SQL Server.</li>\n    </ul>",
        "Documentation.Category": "Pristup podacima",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Pristup podacima",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Vraća vrednost procenta iz date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>percentage</code> od datog <code>value</code>. Ako je data vrednost <code>value</code> <code>null</code>, <code>Percentage.From</code> vraća <code>null</code>.  Ako je data vrednost <code>value</code> <code>text</code> sa simbolom procenta na kraju, biće vraćen konvertovani decimalni broj. U suprotnom, vrednost će biti konvertovana u <code>number</code> koristeći <code>Number.From</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite vrednost <code>procenat</code> od <code>„12,3%“</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Vraća zapis okvira podataka iz RData datoteke.",
        "Documentation.LongDescription": "Vraća zapis okvira podataka iz RData datoteke.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Kombinovanje zapisa iz date liste.",
        "Documentation.LongDescription": "Kombinovanje zapisa iz datog <code>records</code>. Ako <code>records</code> sadrži vrednosti koje nisu iz zapisa, vraća se greška.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje kombinovanog zapisa od zapisa.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Vraća broj polja u zapisu.",
        "Documentation.LongDescription": "Vraća broj polja u zapisu <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje broja polja u zapisu.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Vraća imena polja.",
        "Documentation.LongDescription": "Vraća imena polja u zapisu <code>record</code> kao tekst.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje imena polja u zapisu.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Vraća listu vrednosti polja.",
        "Documentation.LongDescription": "Vraća listu vrednosti polja u zapisu <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje vrednosti polja u zapisu.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Kreira zapis od tabele u obliku {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Vraća zapis od tabele zapisa <code>table</code> koji sadrži imena polja i imena vrednosti <code>{[Name = name, Value = value]}</code>. Ako imena polja nisu jedinstvena, vraća se izuzetak.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje zapisa od tabele u obliku Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Vraća listu vrednosti koja sadrži vrednosti polja iz ulaznog zapisa.",
        "Documentation.LongDescription": "Vraća listu vrednosti koja sadrži vrednosti polja iz unosa <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Izdvajanje vrednosti polja iz zapisa.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Vraća apstraktno stablo sintakse (AST) koje predstavlja pristup koloni u okviru izraza reda.",
        "Documentation.LongDescription": "Vraća apstraktno stablo sintakse (AST) koje predstavlja pristup koloni <code>columnName</code> reda u okviru izraza reda.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Kreira AST koji predstavlja pristup koloni „CustomerName“.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Vraća apstraktno stablo sintakse (AST) za telo funkcije.",
        "Documentation.LongDescription": "<p>Vraća apstraktno stablo sintakse (AST) za telo za <code>function</code>, normalizovano u <i>izraz reda</i>:\r\n<ul>\r\n  <li>Funkcija mora biti lambda od 1 argumenta.</li>\r\n  <li>Sve reference za parametar funkcije zamenjuju se sa <code>RowExpression.Row</code>.</li>\r\n  <li>Sve reference za kolone zamenjuju se sa <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>AST će biti pojednostavljen tako da sadrži samo sledeće vrste čvorova:\r\n    <ul>\r\n      <li><code>Konstanta</code></li>\r\n      <li><code>Pozivanje</code></li>\r\n      <li><code>Unarni</code></li>\r\n      <li><code>Binarni</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Dolazi do greške ako AST izraza reda ne može da se vrati za telo za <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vraća AST za telo funkcije <code>za svaki [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Kreira jedinstvenu vrednost iz date vrednosti.",
        "Documentation.LongDescription": "Vraća pojedinačnu vrednost <code>number</code> od datog <code>value</code>. Ako je dati <code>value</code> <code>null</code>, <code>Single.From</code> vraća <code>null</code>. Ako je dati <code>value</code> <code>number</code> u opsegu pojedinačne vrednosti, vraća se <code>value</code>, a u suprotnom se vraća greška. Ako je <code>value</code> nekog drugog tipa, prvo će biti konvertovan u <code>number</code> koristeći <code>Number.FromText</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dobijte jedinstvenu <code>number</code> vrednost od <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Returns a table of data from an Smartsheet index endpoint.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Makes a call to the Smartsheet 2.0 REST API at the specified endpoint and transforms the data element returned into a table.",
        "Documentation.Examples": [
          {
            "Description": "Pulls a table of users information from the Smartsheet API",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "A table with users information as returned by the Smartsheet API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Vraća funkciju koja deli tekst na listu teksta kod bilo kog navedenog znaka za razgraničavanje.",
        "Documentation.LongDescription": "Vraća funkciju koja deli tekst na listu teksta kod bilo kog navedenog znaka za razgraničavanje.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podelite unos zarezom ili tačkom i zarezom, zanemarujući navodnike i citirane znakove za razgraničavanje i počevši od početka unosa.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Podelite unos zarezom ili tačkom i zarezom, zanemarujući navodnike i citirane znakove za razgraničavanje i počevši od kraja unosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Vraća funkciju koja deli tekst na listu teksta prema navedenom znaku za razgraničavanje.",
        "Documentation.LongDescription": "Vraća funkciju koja deli tekst na listu teksta prema navedenom znaku za razgraničavanje.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite unos zarezom, zanemarujući citirane zareze.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Vraća funkciju koja deli tekst na listu teksta kod svakog navedenog znaka za razgraničavanje u nizu.",
        "Documentation.LongDescription": "Vraća funkciju koja deli tekst na listu teksta kod svakog navedenog znaka za razgraničavanje u nizu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite unos zarezom, a zatim tačkom i zarezom, počevši od početka unosa.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Razdelite unos zarezom, a zatim tačkom i zarezom, tretirajući navodnike kao bilo koji drugi znak i počevši od kraja unosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Vraća funkciju koja deli tekst na listu teksta prema svakoj navedenoj dužini.",
        "Documentation.LongDescription": "Vraća funkciju koja deli tekst na listu teksta prema svakoj navedenoj dužini.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite unos na prva dva znaka, a zatim sledeća tri, počevši od početka unosa.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Podelite unos na prva tri znaka, a zatim sledeća dva, počevši od kraja unosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Vraća funkciju koja deli tekst na listu teksta kod svakog navedenog položaja.",
        "Documentation.LongDescription": "Vraća funkciju koja deli tekst na listu teksta kod svakog navedenog položaja.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite unos na navedenim pozicijama, počevši od početka unosa.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Razdelite unos na navedenim pozicijama, počevši od kraja unosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Vraća funkciju koja deli tekst na listu teksta prema navedenim pomacima i dužinama.",
        "Documentation.LongDescription": "Vraća funkciju koja deli tekst na listu sa tekstom u skladu sa navedenim pomacima i dužinama. Dužina bez vrednosti ukazuje na to da svi preostali unosi treba da budu uključeni.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite unos po navedenim parovima položaja i dužine, počevši od početka unosa. Imajte u vidu da se opsezi u ovom primeru preklapaju.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Razdelite unos po navedenim parovima položaja i dužine, počevši od kraja unosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Podelite unos na poštanski broj fiksne dužine praćen imenom grada promenljive dužine.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Vraća funkciju koja iznova deli tekst na listu teksta prema navedenoj dužini.",
        "Documentation.LongDescription": "Vraća funkciju koja iznova deli tekst na listu teksta prema navedenoj dužini.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite unos više puta na odlomke od tri znaka, počevši od početka unosa.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Razdelite unos više puta na odlomke od tri znaka, počevši od kraja unosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Daje približan broj redova u tabeli.",
        "Documentation.LongDescription": "Vraća približan broj redova u tabeli <code>table</code> ili grešku ako izvor podataka ne podržava aproksimaciju.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Procenite broj različitih kombinacija grada i države u velikoj tabeli, što može da se koristi kao procena kardinalnosti za kolone. Procene kardinalnosti su dovoljno važne da različiti izvori podataka (na primer SQL Server) podržavaju ovu određenu aproksimaciju, često pomoću algoritma koji se zove HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Vraća broj kolona u tabeli.",
        "Documentation.LongDescription": "Vraća broj kolona u tabeli <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje broja kolona u tabeli.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Vraća imena kolona u vidu liste.",
        "Documentation.LongDescription": "Vraća imena kolona iz tabele <code>table</code> u vidu liste teksta.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje imena kolona iz tabele.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Vraća prvi red ili navedenu podrazumevanu vrednost.",
        "Documentation.LongDescription": "Vraća prvi red iz <code>table</code> ili opcionalnu podrazumevanu vrednost, <code>default</code>, ako je tabela prazna.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje prvog reda iz tabele.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Pronalaženje prvog reda iz tabele <code>({})</code> ili vraćanje [a = 0, b = 0] ako je tabela prazna.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Vraća prvu kolonu prvog reda tabele ili navedenu podrazumevanu vrednost.",
        "Documentation.LongDescription": "Vraća prvu kolonu prvog reda tabele <code>table</code> ili navedenu podrazumevanu vrednost.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Pokazuje da li tabela sadrži samo posebne redove (bez duplikata).",
        "Documentation.LongDescription": "Pokazuje da li <code>table</code> sadrži samo posebne redove (bez duplikata). Vraća <code>true</code> ako su redovi posebni, a <code>false</code> ako nisu.\r\n    Opcionalni parametar, <code>comparisonCriteria</code>, navodi koje se kolone iz tabele testiraju na duplikate. Ako se <code>comparisonCriteria</code> ne navede, testiraju se sve kolone.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je tabela posebna.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Utvrđivanje da li je tabela posebna u koloni.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Pokazuje da li tabela sadrži redove.",
        "Documentation.LongDescription": "Pokazuje da li <code>table</code> tabela sadrži redove. Vraća <code>true</code> ako nema redova (tj. tabela je prazna), a <code>false</code> ako ih ima.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Utvrđivanje da li je tabela prazna.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Utvrđivanje da li je tabela <code>({})</code> prazna.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Vraća ključeve navedene tabele.",
        "Documentation.LongDescription": "Vraća ključeve navedene tabele.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite listu ključeva za tabelu.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Vraća poslednji red ili navedenu podrazumevanu vrednost.",
        "Documentation.LongDescription": "Vraća poslednji red iz <code>table</code> ili opcionalnu podrazumevanu vrednost, <code>default</code>, ako je tabela prazna.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje poslednjeg reda iz tabele.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Pronalaženje poslednjeg reda iz tabele <code>({})</code> ili vraćanje [a = 0, b = 0] ako je tabela prazna.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Vraća broj redova u tabeli.",
        "Documentation.LongDescription": "Vraća broj redova u <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje broja redova u tabeli.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Vraća jedini red iz tabele.",
        "Documentation.LongDescription": "Vraća jedini red u jednom redu <code>table</code>. Ako <code>table</code> ima više redova, vraća se izuzetak.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje reda iz tabele.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Kreira listu koja se sastoji od ugnežđenih lista vrednosti kolona iz tabele.",
        "Documentation.LongDescription": "Kreira listu koja se sastoji od ugnežđenih lista iz tabele, <code>table</code>.  Svaka stavka sa liste je unutrašnja lista koja sadrži vrednosti kolona.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste sa vrednostima kolona od tabele.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Konvertuje tabelu u listu primenom navedene funkcije kombinovanja na svaki red sa vrednostima u tabeli.",
        "Documentation.LongDescription": "Konvertuje tabelu u listu primenom navedene funkcije kombinovanja na svaki red sa vrednostima u tabeli.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Kombinujte tekst u svakom redu pomoću zareza.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Konvertuje tabelu u listu zapisa.",
        "Documentation.LongDescription": "Konvertuje tabelu, <code>table</code>, u listu zapisa.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje tabele u listu zapisa.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Kreira listu koja se sastoji od ugnežđenih lista vrednosti redova iz tabele.",
        "Documentation.LongDescription": "Kreira listu koja se sastoji od ugnežđenih lista iz tabele, <code>table</code>.  Svaka stavka sa liste je unutrašnja lista koja sadrži vrednosti redova.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste sa vrednostima redova od tabele.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Kreira izmenjeni zapis o grešci koji neće aktivirati rezervnu postavku kada ga prijavi rukovalac definisan u prikazu (putem Table.View).",
        "Documentation.LongDescription": "Kreira izmenjeni zapis o grešci sa <code>errorRecord</code> koji neće aktivirati rezervnu postavku kada ga prijavi rukovalac definisan u prikazu (putem Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Pravi funkciju koju može da presretne rukovalac definisan u prikazu (pomoću svojstva Table.View).",
        "Documentation.LongDescription": "<p>Kreira funkciju prikaza na osnovu <code>function</code> kojom se može rukovati u prikazu koji je kreirala funkcija <code>Table.View</code>.</p>\r\n<p><code>OnInvoke</code> rukovalac funkcije <code>Table.View</code> može se koristiti za definisanje rukovaoca za funkciju prikaza.</p>\r\n<p>Kao i sa rukovaocima za ugrađene operacije, ako se <code>OnInvoke</code> rukovalac ne navede, ako ne rukuje funkcijom prikaza ili ako rukovalac ne prijavi grešku, <code>function</code> se primenjuje preko prikaza.</p>\r\n<p>Pogledajte objavljenu Power Query dokumentaciju prilagođenog konektora za detaljniji opis funkcije <code>Table.View</code> i funkcija prilagođenog prikaza.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Vraća tekstualnu vrednost iz koje su uklonjeni svi kontrolni znakovi.",
        "Documentation.LongDescription": "Vraća tekstualnu vrednost iz koje su uklonjeni svi kontrolni znakovi iz <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Uklonite znakove za položaj u sledećem redu i druge kontrolne znakove iz tekstualne vrednosti.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Povezuje listu tekstualnih vrednosti u jednu tekstualnu vrednost.",
        "Documentation.LongDescription": "Vraća rezultat kombinovanja liste tekstualnih vrednosti, <code>texts</code>, u jednu tekstualnu vrednost. Sve <code>nulte</code> vrednosti prisutne u <code>texts</code> se zanemaruju.\r\n    Može da se navede opcionalna <code>separator</code> koja se koristi u konačnom kombinovanom tekstu.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kombinovanje tekstualnih vrednosti „Seattle“ i „WA“.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Kombinujte tekstualne vrednosti „Sijetl“ i \"WA\", razdvojene zarezom i razmakom.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Kombinujte vrednosti „Sijetl“, <code>nultu vrednost</code> i „WA“, razdvojene zarezom i razmakom. (Imajte u vidu da se <code>nulta vrednost</code> zanemaruje.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Kreira tekstualnu vrednost od date vrednosti.",
        "Documentation.LongDescription": "Vraća tekstualnu reprezentaciju za <code>value</code>. <code>value</code> može da bude vrednost <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> ili <code>binary</code>.\r\n    Ako je data stavka bez vrednosti, <code>Text.From</code> vraća rezultat bez vrednosti. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje tekstualne vrednosti od broja 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Dekodira podatke iz binarnog oblika u tekstualni.",
        "Documentation.LongDescription": "Dekodira podatke, <code>binary</code>, iz binarne vrednosti u tekstualnu pomoću tipa <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Izvodi tip granularnog broja (Int64.Type, Double.Type itd.) za broj šifrovan u tekstu.",
        "Documentation.LongDescription": "Izvodi granularni tip broja (Int64.Type, Double.Type itd.) od <code>text</code>. Prijavljuje se greška ako <code>text</code> nije broj. Opcionalno <code>culture</code> se takođe može navesti (na primer, „sr-Latn-RS“).",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Vraća broj znakova.",
        "Documentation.LongDescription": "Vraća broj znakova u tekstu <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Otkrivanje koliko se znakova nalazi u tekstu „Hello World“.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Konvertuje sve znakove u mala slova.",
        "Documentation.LongDescription": "Vraća rezultat konvertovanja svih znakova u <code>text</code> u mala slova. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preuzimanje verzije niske „AbCd“ sa malim slovima.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Pretvara prvo slovo svake reči u veliko slovo.",
        "Documentation.LongDescription": "Vraća rezultat pretvaranja samo prvog slova svake reči u veliko slovo u tekstualnoj vrednosti <code>text</code>. Sva druga slova se vraćaju u vidu malih slova. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Upotreba <code>Text.Proper</code> na prostoj rečenici.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Obrće navedeni <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obrnite tekst „123“.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Kodira tekst u binarni oblik.",
        "Documentation.LongDescription": "Kodira datu tekstualnu vrednost, <code>text</code>, u binarnu pomoću navedenog <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Vraća listu vrednosti znakova iz date tekstualne vrednosti.",
        "Documentation.LongDescription": "Vraća listu vrednosti znakova iz date tekstualne vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Kreiranje liste vrednosti znakova od teksta „Hello World“.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Uklanja sve razmake s početka i kraja.",
        "Documentation.LongDescription": "Vraća rezultat uklanjanja svih razmaka s početka i kraja tekstualne vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Uklanja sve razmake s početka i kraja vrednosti „     a b c d    “.",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Uklanja sve razmake s kraja.",
        "Documentation.LongDescription": "Vraća rezultat uklanjanja svih razmaka s kraja tekstualne vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Uklanja sve razmake s kraja vrednosti „     a b c d    “.",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Uklanja sve razmake s početka.",
        "Documentation.LongDescription": "Vraća rezultat uklanjanja svih razmaka s početka tekstualne vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Uklanja sve razmake s početka vrednosti „     a b c d    “.",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Konvertuje sve znakove u velika slova.",
        "Documentation.LongDescription": "Vraća rezultat konvertovanja svih znakova u <code>text</code> u velika slova. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preuzimanje verzije niske „aBcD“ sa velikim slovima.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Vraća kraj sata.",
        "Documentation.LongDescription": "Vraća kraj sata koji predstavlja <code>dateTime</code>, uključujući frakcione sekunde. Informacije o vremenskoj zoni se čuvaju\r\n      <ul>\r\n        <li><code>dateTime</code>: Vrednost <code>time</code>, <code>datetime</code> ili <code>datetimezone</code> na osnovu koje se izračunava kraj godine.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Izračunavanje kraja sata za 14.5.2011, 17:00:00.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Izračunavanje kraja sata za 17.5.2011, 17:00:00 -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Kreira vreme od date vrednosti.",
        "Documentation.LongDescription": "Vraća vrednost <code>time</code> od datog <code>value</code>. Opcionalno se može navesti i <code>culture</code> (na primer, „en-US“).\r\nAko dati <code>value</code> predstavlja <code>null</code>, <code>Time.From</code> vraća <code>null</code>. Ako dati <code>value</code> predstavlja <code>time</code>, vraća se <code>value</code>. Vrednosti sledećih tipova se mogu konvertovati u vrednost <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: Vrednost <code>time</code> od tekstualne reprezentacije. Pogledajte <code>Time.FromText</code> za detalje.</li>\r\n        <li><code>datetime</code>: Komponenta vremena za <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Komponenta vremena lokalnog ekvivalenta datuma i vremena za <code>value</code>.</li>\r\n        <li><code>number</code>: <code>time</code> ekvivalent broju decimalnih dana izraženih pomoću <code>value</code>. Ako je <code>value</code> negativno ili veće ili jednako 1, vraća se greška.</li>\r\n      </ul>\r\nAko je <code>value</code> nekog drugog tipa, vraća se greška.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>0.7575</code> u vrednost <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Konvertovanje <code>#datetime(1899, 12, 30, 06, 45, 12)</code> u vrednost <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Kreira vreme iz lokalnih i univerzalnih i prilagođenih formata vremena.",
        "Documentation.LongDescription": "Kreira <code>time</code> vrednost iz tekstualnog prikaza, <code>text</code>. Za određivanje dodatnih svojstava može se navesti opcionalni parametar <code>record</code>, <code>options</code>. <code>record</code> može da sadrži sledeća polja:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> vrednost koja označava format koji će se koristiti. Za više detalja, idite na https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Izostavljanje ovog polja ili obezbeđivanje <code>null</code> rezultiraće raščlanjivanjem vremena korišćenjem najboljeg napora.</li>\r\n   <li><code>Culture</code>: Kada <code>Format</code> nije bez vrednosti <code>Culture</code> kontroliše neke određivače formata. Na primer, u <code>\"en-US\"</code> <code>\"tt\"</code> je <code>\"AM\" or \"PM\"</code>, dok je u <code>\"ar-EG\"</code> <code>\"tt\"</code> je <code>\"ص\" ili \"م\"</code>. Kada je <code>Format</code> <code>null</code>, <code>Culture</code> kontroliše podrazumevani format koji će se koristiti. Kada je <code>Culture</code> <code>null</code> ili izostavljen, koristi se <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa podršku zastarelih tokova posla, i <code>options</code> može da bude tekstualna vrednost. Ovo ima isto ponašanje kao da je <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje <code>\"10:12:31am\"</code> u vrednost vremena.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Konvertovanje <code>\"1012\"</code> u vrednost vremena.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Konvertovanje <code>\"10\"</code> u vrednost vremena.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Vraća komponentu sata.",
        "Documentation.LongDescription": "Vraća komponentu sata navedene vrednosti <code>time</code>, <code>datetime</code> ili <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje sata u #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Vraća komponentu minuta.",
        "Documentation.LongDescription": "Vraća komponentu minuta navedene vrednosti <code>time</code>, <code>datetime</code> ili <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje minuta u #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Vraća komponentu sekunde.",
        "Documentation.LongDescription": "Vraća komponentu sekunde navedene vrednosti <code>time</code>, <code>datetime</code> ili <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pronađite vrednost sekunde na osnovu vrednosti datuma i vremena.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Vraća početak sata.",
        "Documentation.LongDescription": "Vraća početak sata koji predstavlja <code>dateTime</code>.\r\n    <code>dateTime</code> mora da bude vrednost <code>time</code>, <code>datetime</code> ili <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pronađite početak sata za 10. oktobar 2011. u 08:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Vraća zapis koji sadrži delove vrednosti vremena.",
        "Documentation.LongDescription": "Vraća zapis koji sadrži delove date vrednosti vremena, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: Vrednost <code>time</code> na osnovu koje se izračunava zapis njenih delova.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertovanje vrednosti <code>#time(11, 56, 2)</code> u zapis koji sadrži vrednosti vremena.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Vraća tekstualnu reprezentaciju vrednosti vremena.",
        "Documentation.LongDescription": "Daje tekstualni prikaz <code>time</code>. Za određivanje dodatnih svojstava može se navesti opcionalni parametar <code>record</code>, <code>options</code>. <code>culture</code> se koristi samo za zastarele tokove posla. <code>record</code> može da sadrži sledeća polja:\r\n<ul>\r\n   <li><code>Format</code>:A <code>text</code> vrednost koja označava format koji će se koristiti. Za više detalja, idite na https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Izostavljanje ovog polja ili obezbeđivanje <code>null</code> rezultiraće oblikovanjem datuma korišćenjem podrazumevane vrednosti koju definiše <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Kada <code>Format</code> nije bez vrednosti <code>Culture</code> kontroliše neke određivače formata. Na primer, u <code>\"en-US\"</code> <code>\"tt\"</code> je <code>\"AM\" ili \"PM\"</code>, dok je u <code>\"ar-EG\"</code> <code>\"tt\"</code> je <code>\"ص\" ili \"م\"</code>. Kada je <code>Format</code> <code>null</code>, <code>Culture</code> kontroliše podrazumevani format koji će se koristiti. Kada je <code>Culture</code> <code>null</code> ili izostavljen, koristi se <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa podršku zastarelih tokova posla, <code>options</code> i <code>culture</code> mogu da budu tekstualne vrednosti. Ovo ima isto ponašanje kao da je <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertuj <code>#time(01, 30, 25)</code> u <code>text</code> vrednost. <i>Izlaz rezultata može da se razlikuje u zavisnosti od trenutne kulture.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Konvertuj pomoću prilagođenog formata i nemačke kulture.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Konvertuj pomoću standardnog formata vremena.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Vraća zatvorenu verziju datog tipa zapisa (ili isti tip ako je već zatvoren).",
        "Documentation.LongDescription": "Vraća zatvorenu verziju za dati <code>record</code> <code>type</code> (ili isti tip ako je već zatvoren).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Kreirajte zatvorenu verziju za <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Vraća aspekte tipa.",
        "Documentation.LongDescription": "Vraća zapis koji sadrži aspekte za <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Vraća zapis sa vrednostima polja podešenim na ime parametara za tip funkcije i njihove vrednosti podešene na odgovarajuće tipove.",
        "Documentation.LongDescription": "Vraća zapis sa vrednostima polja podešenih na ime parametara za <code>type</code> i njihove vrednosti podešene na odgovarajuće tipove.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pronađite tipove parametara za funkciju <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Vraća broj koji označava minimalni broj parametara potrebnih za pozivanje tipa funkcije.",
        "Documentation.LongDescription": "Vraća broj koji označava minimalni broj parametara potrebnih za pozivanje ulaza <code>type</code> za funkciju.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pronađite broj potrebnih parametara za funkciju <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Vraća tip koji daje tip funkcije.",
        "Documentation.LongDescription": "Vraća tip koji daje funkcija <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pronađite tip vraćanja za <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Vraća vrednost „true“ ako je tip onaj koji može biti bez vrednosti. U suprotnom, vraća vrednost „false“.",
        "Documentation.LongDescription": "Vraća vrednost <code>true</code> ako je tip <code>nullable</code>. U suprotnom, <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li <code>number</code> može da bude bez vrednosti.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Odredite da li <code>type nullable number</code> može da bude bez vrednosti.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Daje odgovor da li je tip zapisa otvoren.",
        "Documentation.LongDescription": "Vraća <code>logical</code>, ukazujući na to da li je zapis <code>type</code> otvoren.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Odredite da li je zapis <code>type [ A = number, ...]</code> otvoren.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Vraća tip stavke iz tipa liste.",
        "Documentation.LongDescription": "Vraća tip stavke sa liste <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pronađite tip stavke sa liste <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Vraća tip koji ne može biti bez vrednosti iz tipa.",
        "Documentation.LongDescription": "Vraća tip koji nije <code>nullable</code> iz <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vratite tip koji ne može biti bez vrednosti za <code>type nullable number</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Vraća otvorenu verziju datog tipa zapisa (ili isti tip ako je već otvoren).",
        "Documentation.LongDescription": "Vraća otvorenu verziju za dati <code>record</code> <code>type</code> (ili isti tip ako je već otvoren).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Kreirajte otvorenu verziju za <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Vraća zapis koji opisuje polja tipa zapisa, gde svako polje vraćenog tipa zapisa ima odgovarajuće ime i vrednost.",
        "Documentation.LongDescription": "Vraća zapis koji opisuje polja zapisa <code>type</code>. Svako polje vraćenog tipa zapisa ima odgovarajuće ime i vrednost u obliku zapisa <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pronađite ime i vrednost zapisa <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Vraća moguće praznu listu ključeva za dati tip tabele.",
        "Documentation.LongDescription": "Vraća verovatno praznu listu ključeva za dati tip tabele.<br>\r\n    <br>\r\n    Svaki ključ je definisan pomoću zapisa u sledećem obrascu:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: spisak imena kolona koje definišu ključ\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code> ako je ključ primarni ključ tabele; inače, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje ključnih informacija za tip tabele.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Vraća tip reda tipa tabele.",
        "Documentation.LongDescription": "Vraća tip reda navedenog tipa tabele. Rezultat će uvek biti tip zapisa.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vraćanje informacija o tipu reda za jednostavnu tabelu.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Vraća združivanje liste tipova.",
        "Documentation.LongDescription": "Vraća združivanje tipova u <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Sastavite zapis u URI nisku upita.",
        "Documentation.LongDescription": "Sastavite zapis <code>query</code> u URI nisku zapisa, izbegavajući znakove po potrebi.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kodirajte nisku upita koja sadrži neke specijalne znakove.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Kodira specijalne znakove u skladu sa standardom RFC 3986.",
        "Documentation.LongDescription": "Kodira specijalne znakove u unosu <code>data</code> u skladu sa pravilima standarda RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kodira specijalne znakove u okviru \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Vraća delove ulaznog apsolutnog URI identifikatora u vidu zapisa.",
        "Documentation.LongDescription": "Vraća delove ulaznog <code>absoluteUri</code> u vidu zapisa koji sadrži vrednosti kao što su Scheme, Host, Port, Path, Query, Fragment, UserName i Password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Pronalaženje delova apsolutnog URI identifikatora „www.adventure-works.com“.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Dekodirajte procentualno kodiranu nisku.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Enter Url of your Azure DevOps Analytics Service.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Returns the contents downloaded from the Azure DevOps Analytics Service url as a binary value. This function uses different credentials for different organizations."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Enter Url of your Azure DevOps Analytics Service.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Returns the contents downloaded from the Azure DevOps Analytics Service url as a binary value. This function uses global credentials for all the accessible organization."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Izražava alternativne planove upita.",
        "Documentation.LongDescription": "Izražava alternativne planove upita u okviru izraza plana upita dobijenog putem Value.Expression(Value.Optimize(...)). Nije namenjeno za druge upotrebe.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Vraća apstraktno stablo sintakse (AST) koje predstavlja izraz vrednosti.",
        "Documentation.LongDescription": "Vraća apstraktno stablo sintakse (AST) koje predstavlja izraz vrednosti",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Kreira vrednost podudarnog tipa od tekstualne reprezentacije.",
        "Documentation.LongDescription": "Dekodira vrednost iz tekstualne reprezentacije, <code>text</code>, i tumači je kao vrednost odgovarajućeg tipa.\r\n    <code>Value.FromText</code> uzima tekstualnu vrednost i vraća broj, logičku vrednost, stavku bez vrednosti, vrednost datuma i vremena, vrednost trajanja ili tekstualnu vrednost. Prazna tekstualna vrednost se tumači kao stavka bez vrednosti.\r\n    Može se navesti i opcionalan <code>culture</code> (na primer, „en-US“).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Vraća zapis koji sadrži metapodatke unosa.",
        "Documentation.LongDescription": "Vraća zapis koji sadrži metapodatke unosa.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Signali Value.Expression za vraćanje optimizovanog izraza za vrednost.",
        "Documentation.LongDescription": "Kada se koristi u okviru Value.Expression, ako <code>value</code> predstavlјa upit koji može da se optimizuje, ova funkcija ukazuje na to da treba da se vrati optimizovani izraz. U suprotnom, <code>value</code> se prosleđuje bez efekta.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Uklanja metapodatke iz unosa.",
        "Documentation.LongDescription": "Uklanja metapodatke iz unosa.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Vraća tip date vrednosti.",
        "Documentation.LongDescription": "Vraća tip date vrednosti.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.LongDescription": "Ova funkcija je predviđena samo za internu upotrebu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Vraća HTML za navedenu URL adresu, kao što je prikazano u veb pregledaču.",
        "Documentation.LongDescription": "Vraća HTML za navedeni <code>url</code>, kako ga vidi veb pregledač. Moguće je navesti opcionalni parametar zapisa, <code>options</code>, da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n     <ul>\r\n        <li><code>Naziv API ključa</code>: Ako ciljni sajt ima naznaku API ključa, ovaj parametar može da se koristi za navođenje naziva (a ne vrednosti) parametra ključa koji se mora koristiti u URL adresi. Stvarna vrednost ključa je navedena u akreditivu.</li>\r\n        <li><code>Čekaj na</code>: Navodi uslov za čekanje pre preuzimanja HTML datoteke, pored čekanja da se stranica učita (što se uvek radi). Može da bude zapis koji sadrži polja „Vremensko ograničenje“ i/ili „Birač“. Ako se navede samo vremensko ograničenje, funkcija će čekati navedeno vreme pre preuzimanja HTML datoteke. Ako se navedu i birač i vremensko ograničenje, i ako vremensko ograničenje istekne pre nego što se birač pojavi na stranici, prikazaće se greška. Ako se navede birač bez vremenskog ograničenja, primenjuje se podrazumevano vremensko ograničenje od 30 sekundi.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Pristup podacima",
        "Documentation.Examples": [
          {
            "Description": "Vraća HTML za https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vraća HTML za https://microsoft.com nakon čekanja da se pojavi CSS birač.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vraća HTML za https://microsoft.com nakon čekanja od deset sekundi.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vraća HTML za https://microsoft.com nakon čekanja od najviše deset sekundi da se pojavi CSS birač.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Vraća sadržaj preuzet sa URL adrese u binarnom obliku.",
        "Documentation.LongDescription": "Vraća sadržaj preuzet iz <code>url</code> kao binarni. Opcionalni parametar zapisa, <code>options</code>, može se navesti da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>Query</code> : Programski dodajte parametre upita u URL adresu bez potrebe da razmišljate o izbegavanju.</li>\r\n<li><code>ApiKeyName</code> : Ako ciljna lokacija ima zapis o API ključu, ovaj parametar se može koristiti za navođenje imena (ne vrednosti) parametra ključa koji mora da se koristi u URL adresi. Stvarna vrednost ključa je data u akreditivu.</li>\r\n<li><code>Headers</code> : Ako navedete ovu vrednost kao zapis, dodaćete zaglavlja u HTTP zahtev.</li>\r\n<li><code>Timeout</code> : Ako navedete ovu vrednost kao trajanje, promenićete vremensko ograničenje za HTTP zahtev. Podrazumevana vrednost je 100 sekundi.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Ako navedete ovu vrednost kao listu, ovi ključevi HTTP zaglavlja neće biti uključeni u izračunavanje za keširanje podataka.</li>\r\n<li><code>IsRetry</code> : Navođenjem ove logičke vrednosti kao tačne zanemarićete postojeći odgovor u keš memoriji prilikom preuzimanja podataka.</li>\r\n<li><code>ManualStatusHandling</code> : Ako navedete ovu vrednost kao listu, sprečićete ugrađenu obradu HTTP zahteva čiji odgovor ima jedan od ovih kodova statusa.</li>\r\n<li><code>RelativePath</code> : Ako navedete ovu vrednost kao tekst, dodaćete je u osnovnu URL adresu pre upućivanja zahteva.</li>\r\n<li><code>Content</code> : Ako navedete ovu vrednost, promenićete veb zahtev iz GET u POST, koristeći vrednost opcije kao sadržaj za POST.</li>\r\n</ul>\r\n\r\n    HTTP zahtev se pravi kao GET (kada nije naveden sadržaj) ili POST (kada postoji sadržaj). POST zahtevi mogu biti upućeni samo anonimno.\r\n    <br>\r\n    Zaglavlja HTTP odgovora dostupna su kao metapodaci binarnog rezultata. Izvan konteksta konektora prilagođenih podataka, dostupan je samo podskup zaglavlja odgovora (iz bezbednosnih razloga).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite sadržaj <code>\"https://bing.com/search?q=Power+Query\"</code> koristeći opcije RelativePath i Query. Ove opcije se mogu koristiti za dinamičko postavljanje upita o statičkoj osnovnoj URL adresi.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Izvršite POST protiv URL adrese, prosleđujući binarni JSON korisni teret i analizirajući odgovor kao JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Povežite se na bezbednu URL adresu koja prihvata ključ za potvrdu identiteta kao deo niske upita. Umesto čvrstog kodiranja tajnog ključa u M (što bi predstavljalo bezbednosni rizik), \r\n    ključ može bezbedno da se obezbedi tako što će navesti njegovo ime (a ne vrednost) u M, odabrati potvrdu identiteta veb API-ja i uneti ključnu vrednost kao deo akreditiva veb API-ja.\r\n    Kada se koristi na ovaj način, sledeći primer će generisati zahtev za <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Vraća HTTP zaglavlja preuzeta sa URL adrese u vidu vrednosti zapisa.",
        "Documentation.LongDescription": "Vraća zaglavlja preuzeta iz <code>url</code> kao zapis. Opcionalni parametar zapisa, <code>options</code>, može se navesti da bi se navela dodatna svojstva. Zapis može da sadrži sledeća polja:\r\n    <ul>\r\n<li><code>Query</code> : Programski dodajte parametre upita u URL adresu bez potrebe da razmišljate o izbegavanju.</li>\r\n<li><code>ApiKeyName</code> : Ako ciljna lokacija ima zapis o API ključu, ovaj parametar se može koristiti za navođenje imena (ne vrednosti) parametra ključa koji mora da se koristi u URL adresi. Stvarna vrednost ključa je data u akreditivu.</li>\r\n<li><code>Headers</code> : Ako navedete ovu vrednost kao zapis, dodaćete zaglavlja u HTTP zahtev.</li>\r\n<li><code>Timeout</code> : Ako navedete ovu vrednost kao trajanje, promenićete vremensko ograničenje za HTTP zahtev. Podrazumevana vrednost je 100 sekundi.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Ako navedete ovu vrednost kao listu, ovi ključevi HTTP zaglavlja neće biti uključeni u izračunavanje za keširanje podataka.</li>\r\n<li><code>IsRetry</code> : Navođenjem ove logičke vrednosti kao tačne zanemarićete postojeći odgovor u keš memoriji prilikom preuzimanja podataka.</li>\r\n<li><code>ManualStatusHandling</code> : Ako navedete ovu vrednost kao listu, sprečićete ugrađenu obradu HTTP zahteva čiji odgovor ima jedan od ovih kodova statusa.</li>\r\n<li><code>RelativePath</code> : Ako navedete ovu vrednost kao tekst, dodaćete je u osnovnu URL adresu pre upućivanja zahteva.</li>\r\n</ul>\r\n\r\n    HTTP zahtev je napravljen pomoću metoda HEAD. Izvan konteksta prilagođenog konektora podataka, dostupan je samo podskup zaglavlja odgovora (iz bezbednosnih razloga).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Preuzmite HTTP zaglavlja za <code>\"https://bing.com/search?q=Power+Query\"</code> koristeći opcije RelativePath i Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Kontekst autorizacije u odnosu na koji se procenjuje stavka za kontrolu pristupa (ACE stavka).",
        "Documentation.LongDescription": "Kontekst autorizacije u odnosu na koji se procenjuje stavka za kontrolu pristupa (ACE stavka).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Tabela sa stavkama za kontrolu pristupa (ACE stavkama).",
        "Documentation.LongDescription": "Uređena tabela stavki za kontrolu pristupa (ACE stavki) koja predstavlja pravila autorizacije. Svaki red se procenjuje u odnosu na trenutni kontekst autorizacije (po redosledu) i prvi red za koji se vrati izraz <code>Condition</code> određuje koje pravilo se primenjuje. Kolona <code>Action</code> predstavlja vrstu radnje na koju se pravilo primenjuje. Kolona <code>AccessControlKind</code> određuje da treba dozvoliti ili zabraniti pristup za radnju.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Navodi vrstu kontrole pristupa.",
        "Documentation.LongDescription": "Navodi vrstu kontrole pristupa.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Tip koji predstavlja sve vrednosti.",
        "Documentation.LongDescription": "Tip koji predstavlja sve vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Tip koji predstavlja sve binarne vrednosti.",
        "Documentation.LongDescription": "Tip koji predstavlja sve binarne vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Navodi tip binarnog kodiranja.",
        "Documentation.LongDescription": "Navodi tip binarnog kodiranja.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Navodi koliko puta se očekuje da će se stavka pojaviti u grupi.",
        "Documentation.LongDescription": "Navodi koliko puta se očekuje da će se stavka pojaviti u grupi.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Opisuje tip bafera koji treba da se izvrši.",
        "Documentation.LongDescription": "Opisuje tip bafera koji treba da se izvrši.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Tip koji predstavlja sve bajtove.",
        "Documentation.LongDescription": "Tip koji predstavlja sve bajtove.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Navodi redosled bajtova.",
        "Documentation.LongDescription": "Navodi redosled bajtova.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Tip koji predstavlja sve znakove.",
        "Documentation.LongDescription": "Tip koji predstavlja sve znakove.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Navodi tip komprimovanja.",
        "Documentation.LongDescription": "Navodi tip komprimovanja.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Navodi značaj kvota u Csv dokumentima.",
        "Documentation.LongDescription": "Navodi značaj kvota u Csv dokumentima.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Tip koji predstavlja vrednost valute.",
        "Documentation.LongDescription": "Tip koji predstavlja vrednost valute.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Tip koji predstavlja sve vrednosti datuma.",
        "Documentation.LongDescription": "Tip koji predstavlja sve vrednosti datuma.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Tip koji predstavlja sve vrednosti datuma i vremena bez povezane vremenske zone.",
        "Documentation.LongDescription": "Tip koji predstavlja sve vrednosti datuma i vremena bez povezane vremenske zone.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Tip koji predstavlja sve vrednosti datuma i vremena koje se odnose na vremensku zonu.",
        "Documentation.LongDescription": "Tip koji predstavlja sve vrednosti datuma i vremena koje se odnose na vremensku zonu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Navodi dan u nedelji.",
        "Documentation.LongDescription": "Navodi dan u nedelji.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Tip koji predstavlja decimalni broj sa fiksnim znakom za razdvajanje decimala.",
        "Documentation.LongDescription": "Tip koji predstavlja decimalni broj sa fiksnim znakom za razdvajanje decimala.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Tip koji predstavlja broj duplo precizne plutajuće tačke.",
        "Documentation.LongDescription": "Tip koji predstavlja broj duplo precizne plutajuće tačke.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Tip koji predstavlja sve vrednosti trajanja",
        "Documentation.LongDescription": "Tip koji predstavlja sve vrednosti trajanja",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Navodi očekivanu radnju za dodatne vrednosti u redu koji sadrži više kolona nego što se očekuje.",
        "Documentation.LongDescription": "Navodi očekivanu radnju za dodatne vrednosti u redu koji sadrži više kolona nego što se očekuje.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Tip koji predstavlja sve funkcije.",
        "Documentation.LongDescription": "Tip koji predstavlja sve funkcije.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Navodi vrstu grupisanja.",
        "Documentation.LongDescription": "Više lokalnih grupa može biti proizvedeno sa istom vrednošću ključa, ali samo jedna globalna grupa se proizvodi za datu vrednost ključa.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Tip koji predstavlja Guid vrednost.",
        "Documentation.LongDescription": "Tip koji predstavlja Guid vrednost.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Identitet predstavlja korisnika, grupu, uređaj ili nešto drugo što se može identifikovati.",
        "Documentation.LongDescription": "Identitet predstavlja korisnika, grupu, uređaj ili nešto drugo što se može identifikovati.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Definiše opseg u kojem se identiteti prave i porede.",
        "Documentation.LongDescription": "Definiše opseg u kojem se identiteti prave i porede.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Tip koji predstavlja potpisani 16-bitni ceo broj.",
        "Documentation.LongDescription": "Tip koji predstavlja potpisani 16-bitni ceo broj.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Tip koji predstavlja potpisani 32-bitni ceo broj.",
        "Documentation.LongDescription": "Tip koji predstavlja potpisani 32-bitni ceo broj.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Tip koji predstavlja potpisani 64-bitni ceo broj.",
        "Documentation.LongDescription": "Tip koji predstavlja potpisani 64-bitni ceo broj.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Tip koji predstavlja potpisani 8-bitni ceo broj.",
        "Documentation.LongDescription": "Tip koji predstavlja potpisani 8-bitni ceo broj.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Navodi algoritam spajanja koji treba koristiti u operaciji spajanja.",
        "Documentation.LongDescription": "Navodi algoritam spajanja koji treba koristiti u operaciji spajanja.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Navodi vrstu operacije spajanja.",
        "Documentation.LongDescription": "Navodi vrstu operacije spajanja.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Navodi levu ili desnu tabelu spajanja.",
        "Documentation.LongDescription": "Navodi levu ili desnu tabelu spajanja.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Opisuje tip odredbe ograničenja koji podržava SQL dijalekt koji koristi ovaj izvor podataka.",
        "Documentation.LongDescription": "Opisuje tip odredbe ograničenja koji podržava SQL dijalekt koji koristi ovaj izvor podataka.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Tip koji predstavlja sve liste.",
        "Documentation.LongDescription": "Tip koji predstavlja sve liste.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Tip koji predstavlja sve logičke vrednosti.",
        "Documentation.LongDescription": "Tip koji predstavlja sve logičke vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Navodi očekivanu radnju za vrednosti koje nedostaju u redu koji sadrži manje kolona nego što se očekuje.",
        "Documentation.LongDescription": "Navodi očekivanu radnju za vrednosti koje nedostaju u redu koji sadrži manje kolona nego što se očekuje.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Tip koji predstavlja vrednosti bez vrednosti.",
        "Documentation.LongDescription": "Tip koji predstavlja vrednosti bez vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Tip koji predstavlja sve brojeve.",
        "Documentation.LongDescription": "Tip koji predstavlja sve brojeve.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Određuje vrste vrednosti koje OData usluga može da izostavi.",
        "Documentation.LongDescription": "Određuje vrste vrednosti koje OData usluga može da izostavi.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Navodi pojavljivanje elementa u sekvenci.",
        "Documentation.LongDescription": "Navodi pojavljivanje elementa u sekvenci.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Navodi smer sortiranja.",
        "Documentation.LongDescription": "Navodi smer sortiranja.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Tip koji predstavlja tekstualnu lozinku.",
        "Documentation.LongDescription": "Tip koji predstavlja tekstualnu lozinku.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Tip koji predstavlja vrednost procenta.",
        "Documentation.LongDescription": "Tip koji predstavlja vrednost procenta.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Navodi tip režima percentila.",
        "Documentation.LongDescription": "Navodi tip režima percentila.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Navodi preciznost poređenja.",
        "Documentation.LongDescription": "Navodi preciznost poređenja.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Navodi stil znakova navoda.",
        "Documentation.LongDescription": "Navodi stil znakova navoda.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Navodi tip rangiranja.",
        "Documentation.LongDescription": "Navodi tip rangiranja.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Tip koji predstavlja sve zapise.",
        "Documentation.LongDescription": "Tip koji predstavlja sve zapise.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Pokazuje da li indeksiranje treba obaviti od početka ili kraja unosa.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Navodi smer zaokruživanja kada postoji nerešena situacija u pogledu mogućeg broja cifara na koji se vrši zaokruživanje.",
        "Documentation.LongDescription": "Navodi smer zaokruživanja kada postoji nerešena situacija u pogledu mogućeg broja cifara na koji se vrši zaokruživanje.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Važeće opcije za opciju SAP Business Warehouse režima izvršavanja.",
        "Documentation.LongDescription": "Važeće opcije za opciju SAP Business Warehouse režima izvršavanja.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Važeće opcije za opciju distribucije SAP HANA.",
        "Documentation.LongDescription": "Važeće opcije za opciju distribucije SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Operator opsega za SAP HANA ulazne parametre opsega.",
        "Documentation.LongDescription": "Operator opsega za SAP HANA ulazne parametre opsega.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Tip koji predstavlja broj jedinstveno precizne plutajuće tačke.",
        "Documentation.LongDescription": "Tip koji predstavlja broj jedinstveno precizne plutajuće tačke.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "The protocol to use when connecting to an instance of Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Tip koji predstavlja sve tabele.",
        "Documentation.LongDescription": "Tip koji predstavlja sve tabele.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Tip koji predstavlja sve tekstualne vrednosti.",
        "Documentation.LongDescription": "Tip koji predstavlja sve tekstualne vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Navodi tip kodiranja teksta.",
        "Documentation.LongDescription": "Navodi tip kodiranja teksta.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Tip koji predstavlja sve vrednosti vremena.",
        "Documentation.LongDescription": "Tip koji predstavlja sve vrednosti vremena.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Navodi nivo praćenja.",
        "Documentation.LongDescription": "Navodi nivo praćenja.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Tip koji predstavlja sve tipove.",
        "Documentation.LongDescription": "Tip koji predstavlja sve tipove.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Tip koji predstavlja tekstualni URI.",
        "Documentation.LongDescription": "Tip koji predstavlja tekstualni URI.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Navodi HTTP metod.",
        "Documentation.LongDescription": "Navodi HTTP metod.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
