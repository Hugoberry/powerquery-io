{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Vrne strukturno predstavitev zbirke podatkov programa Access.",
        "Documentation.LongDescription": "Vrne strukturno predstavitev Accessove zbirke podatkov <code>database</code>. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;false&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2 ...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Vrne zbirke podatkov storitev Analysis Services iz določenega gostitelja.",
        "Documentation.LongDescription": "Vrne zbirke podatkov iz primerka storitev Analysis Services <code>server</code>. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Logična vrednost, ki določa, ali bodo vrste, določene v večdimenzionalnem ali tabelaričnem modelu, uporabljene za vrste dodanih stolpcev z merami. Če je ta vrednost nastavljena na &#187;false&#171;, bo vrsta &#187;number&#171; uporabljena za vse stolpce z merami. Privzeta vrednost za to možnost je &#187;false&#171;.</li>\r\n<li><code>Culture</code> : Ime kulture, ki določa kulturo podatkov. To ime ustreza lastnosti niza povezave &#187;Območni identifikator&#171;.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>SubQueries</code> : Številka (0, 1 ali 2), ki nastavi vrednost lastnosti &#187;SubQueries&#171; v nizu povezave. Ta vrednost nadzoruje način delovanja izračunanih članov v podizborih ali podizrezih. (Privzeta vrednost je 2.)</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Kocke AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Podatki kocke za uvoz/DirectQuery iz storitve AtScale.",
        "Documentation.LongDescription": "\r\nVrne podatke kocke iz storitve AtScale v strežniku <code>server</code>. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: logična vrednost, ki označuje, ali bodo tipi, navedeni v večdimenzionalnem ali tabelaričnem modelu, uporabljeni za tipe dodanih stolpcev z merami. Če je ta možnost nastavljena na »false«, bo tip »number« uporabljen za vse stolpce z merami. Privzeta vrednost te možnosti je »false«.</li>\r\n        <li><code>CommandTimeout</code>: trajanje (v sekundah), ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je odvisna od gonilnika. </li>\r\n        <li><code>ConnectionTimeout</code>: trajanje (v sekundah), ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika. </li>\r\n\r\n</ul>\r\nParameter zapisa je naveden kot [možnost1 = vrednost1, možnost2 = vrednost2 ...].",
        "Documentation.Examples": {
          "Description": "Prikaže podatke kocke v kocki storitve AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Uvozi podatke iz storitve Raziskovalec podatkov Azure (Kusto)",
        "Documentation.DisplayName": "Raziskovalec podatkov Azure (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Raziskovalec podatkov Azure (Kusto)",
        "Documentation.LongDescription": "Uvozi podatke iz vašega primerka storitve Raziskovalec podatkov Azure (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabelo z informacijami o dogodkih Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabela z dogodki Storm iz zbirke podatkov »Vzorci« v gruči »pomoč«"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Vnesite URL storitve Azure DevOps Analytics.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Vrne vsebino, preneseno z naslova URL storitve Azure DevOps Analytics, v obliki dvojiške vrednosti. Ta funkcija uporablja različne poverilnice za različne organizacije."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Vir storitev Azure DevOps",
        "Documentation.DisplayName": "Vir storitev Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Vrne tabelo virov OData, ki jih zagotavlja storitev Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Vnesite URL končne točke vmesnika REST API za Azure Enterprise, ki je povezan z vašo včlanitvijo",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Vrne seznam poročil in mesecev, ki so na voljo v vmesniku API za Azure Enterprise",
        "Documentation.Name": "Uvoz podatkov iz storitve Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Uporabite funkcijo »AzureEnterprise.Tables«, da poiščete določeno vrednost za pridobitev rezultatov.",
            "Code": "let\r\n    Vir = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Vsebina = Vir{[Key=\"Contents\"]}[Podatki]\r\nin\r\n    Vsebina",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Oglejte si https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli za vzorčne poizvedbe za začetek.",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabelo z rezultati poizvedbe uporabnikove poizvedbe »viri«",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Navedite tabele v primerku storitve Azure Spark.",
        "Documentation.LongDescription": "Navedite tabele v primerku storitve Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Navedite tabele v primerku storitve Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Vrne tabelo za krmarjenje, ki vsebuje vsebnike, najdene v določenem računu iz trezorja shrambe Azure.",
        "Documentation.LongDescription": "Vrne tabelo za krmarjenje, ki vsebuje vrstico vsakega vsebnika, najdenega na URL-ju računa (<code>account</code>), iz trezorja shrambe Azure. Vsaka vrstica vsebuje povezavo na zbirke dvojiških podatkov vsebnikov. <code>options</code> lahko določite za nadzor teh možnosti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Število bajtov, ki jih je treba prebrati pred čakanjem na uporabnika podatkov. Privzeta vrednost je 4 MB.</li>\r\n<li><code>RequestSize</code> : Število bajtov za poskus branja v eni zahtevi HTTP za strežnik. Privzeta vrednost je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnost &#187;ConcurrentRequests&#171; podpira hitrejše prenose podatkov tako, da navede število zahtev, ki jih je mogoče izvesti vzporedno na račun uporabe pomnilnika. Zahtevan je pomnilnik (ConcurrentRequest * RequestSize). Privzeta vrednost je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Vrne tabelo za krmarjenje, ki vsebuje dokumente, najdene v določenem vsebniku in njegovih podmapah v storitvi Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vrne tabelo za krmarjenje, ki vsebuje dokumente, najdene v določenem vsebniku in njegovih podmapah na URL-ju računa <code>endpoint</code>, iz datotečnega sistema storitve Azure Data Lake Storage. <code>options</code> lahko določite za nadzor teh možnosti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Število bajtov, ki jih je treba prebrati pred čakanjem na uporabnika podatkov. Privzeta vrednost je 4 MB.</li>\r\n<li><code>RequestSize</code> : Število bajtov za poskus branja v eni zahtevi HTTP za strežnik. Privzeta vrednost je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnost &#187;ConcurrentRequests&#171; podpira hitrejše prenose podatkov tako, da navede število zahtev, ki jih je mogoče izvesti vzporedno na račun uporabe pomnilnika. Zahtevan je pomnilnik (ConcurrentRequest * RequestSize). Privzeta vrednost je 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki določa, ali bodo datoteke vrnjene v pogled imenika, podobnem drevesu, ali na ploskem seznamu. Privzeta vrednost je &#187;false&#171;.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Vrne tabelo za krmarjenje, ki vsebuje tabele, najdene v določenem računu iz trezorja shrambe Azure.",
        "Documentation.LongDescription": "Vrne tabelo za krmarjenje, ki vsebuje vrstico za vsako tabelo, najdeno na URL-ju računa (<code>account</code>), iz trezorja shrambe Azure. Vsaka vrstica vsebuje povezavo do tabele Azure. Navedete lahko izbirni parameter zapisa <code>options</code>, ki določa dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>Timeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus pošiljanja zahteve strežniku. Privzeta vrednost je odvisna od vira.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Vpogledi v časovne vrste Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight v storitvi AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Ta funkcija ni na voljo, ker zanjo potrebujete ogrodje .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (starejša različica)",
        "Documentation.Caption": "Common Data Service (starejša različica)",
        "Documentation.LongDescription": "Ustvarite povezavo do svojega primerka storitve Common Data Service (Dynamics 365 in PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Vrne vsebino dokumenta CSV kot tabelo.",
        "Documentation.LongDescription": "Vrne vsebino dokumenta CSV v tabeli.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> je lahko nič, številka stolpcev, seznam imen stolpcev, vrsta tabele ali zapis možnosti.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> je lahko en znak, seznam znakov ali vrednost <code>\"\"</code>, ki ponazarja, katere vrstice morajo biti razdeljene z zaporednimi presledki. Privzeto: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Sklicujte se na <code>ExtraValues.Type</code> za podprte vrednosti za <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> določa vrsto šifriranja besedila.\r\n      </li>\r\n    </ul>\r\n\r\n    Če je naveden zapis za <code>columns</code> (in imajo <code>delimiter</code>, <code>extraValues</code> ter <code>encoding</code> vrednost nič), so morda na voljo ta polja zapisov:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: ločilo stolpcev. Privzeto: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: je lahko vrednost nič, število stolpcev, seznam imen stolpcev ali vrsta tabele. Če je število stolpcev nižje od števila, najdenega v vnosu, bodo dodatni stolpci prezrti. Če je število stolpcev višje od števila, najdenega v vnosu, imajo dodatni stolpci vrednost nič. Če ni navedeno, število stolpcev določa vrednost vnosa.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: šifriranje besedila datoteke. Privzeto: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: določa način obravnave navedkov.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (privzeto): navedki v polju so pomembni le takoj za ločilom.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: navedki v polju so vedno pomembni, ne glede na mesto pojavitve.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: določa način obravnave citiranih prelomov vrstic.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (privzeto): citirani prelomi vrstic se obravnavajo kot del podatkov in ne na koncu trenutne vrstice.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: vsi prelomi vrstic se obravnavajo na koncu trenutne vrstice, tudi če se vrstica pojavi v citirani vrednosti.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Obdelajte besedilo CSV z glavami stolpcev",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Vrne tabelo z naborom razpoložljivih dimenzij.",
        "Documentation.LongDescription": "Vrne tabelo z naborom razpoložljivih dimenzij v <code>cube</code>. Vsaka dimenzija je tabela, ki vsebuje nabor dimenzijskih atributov, in vsak dimenzijski atribut je predstavljen kot stolpec v tabeli dimenzij. Dimenzije lahko v kocki razširite z Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Vrne ugnezdeno drevo tabel, ki predstavlja hierarhijo predmetov v prikazni mapi (na primer dimenzije in meritve).",
        "Documentation.LongDescription": "Vrne ugnezdeno drevo tabel, ki predstavlja hierarhijo predmetov v prikazni mapi (npr. dimenzije in meritve), ki so na voljo za uporabo v <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Vrne tabelo z naborom razpoložljivih lastnosti mere, ki so razširjene v kocki.",
        "Documentation.LongDescription": "Vrne tabelo z naborom razpoložljivih lastnosti, ki so na voljo za mere, razširjene v kocki.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Vrne tabelo z naborom razpoložljivih meritev.",
        "Documentation.LongDescription": "Vrne tabelo z naborom razpoložljivih meritev v <code>cube</code>.\r\n    Vsaka meritev je predstavljena kot funkcija. Meritve se lahko za kocko uporabijo s Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Vrne tabelo z naborom parametrov, ki jih lahko uporabite v kocki.",
        "Documentation.LongDescription": "Vrne tabelo z naborom parametrov, ki jih lahko uporabite v kocki <code>cube</code>. Vsak parameter je funkcija, ki jo lahko prikličete, da dobite <code>cube</code> z uporabljenim parametrom in njegovimi argumenti.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Vrne tabelo z naborom lastnosti, ki so na voljo za dimenzije, razširjene v kocki.",
        "Documentation.LongDescription": "Vrne tabelo z naborom lastnosti, ki so na voljo za dimenzije, razširjene v kocki.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Vnesite URL svojega računa za Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsako mapo in datoteko, najdeno na naslovu <code>url</code> v storitvi Azure Data Lake Storage Gen1. Vsaka vrstica vsebuje lastnosti mape ali datoteke in povezavo do njene vsebine."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Vnesite URL svojega računa za Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsako datoteko, najdeno na naslovu <code>url</code> v storitvi Azure Data Lake Storage Gen1. Vsaka vrstica vsebuje lastnosti datoteke in povezavo do njene vsebine."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Vnesite URL računa za Azure Cosmos DB.",
        "Documentation.LongDescription": "Vrne tabelo zbirk podatkov Azure Cosmos DB, ki so na naslovu <code>url</code>. Če določite <code>database</code>, bo namesto tega vrnjena tabela zbirk. Če pa v zapisu <code>options</code> določite polje <code>Query</code>, bodo vrnjeni rezultati poizvedbe, ki je bila zagnana v navedeni zbirki podatkov in/ali zbirki."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Vnesite URL končne točke storitve OData za Dynamics 365 Business Central (na mestu uporabe).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (na mestu uporabe)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (na mestu uporabe)",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki storitve Dynamics 365 Business Central (na mestu uporabe). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Vnesite URL končne točke storitve Dynamics NAV OData.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki storitve Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Vrne kocke iz primerka Essbase, ki so združene po strežniku Essbase.",
        "Documentation.LongDescription": "Vrne tabelo iz kock, ki so združene po strežnika Essbase iz primerka Essbase v strežniku APS <code>url</code>. Določite lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Vrne vsebino Excelovega delovnega zvezka.",
        "Documentation.LongDescription": "Vrne vsebino Excelovega delovnega zvezka.\r\n    <ul>\r\n     <li> Vrednost <code>useHeaders</code> je lahko ničelna, logična vrednost (true/false), ki označuje, ali je treba prvo vrstico vsake vrnjene tabele obravnavati kot glavo, ali zapis možnosti. Privzeta vrednost: false. </li>\r\n     <li> Vrednost <code>delayTypes</code> je lahko ničelna ali logična vrednost (true/false), ki označuje, ali je treba stolpce vsake vrnjene tabele pustiti nevnesene. Privzeta vrednost: false. </li>\r\n    </ul>\r\n\r\n    Če je zapis določen za <code>useHeaders</code> (in vrednost <code>delayTypes</code> ničelna), lahko navedete ta polja zapisa: \r\n    <ul>\r\n     <li> <code>UseHeaders</code>: je lahko ničelna ali logična vrednost (true/false), ki označuje, ali je treba prvo vrstico vsake vrnjene tabele obravnavati kot glavo. Privzeta vrednost: false. </li>\r\n     <li> <code>DelayTypes</code>: je lahko ničelna ali logična vrednost (true/false), ki označuje, ali je treba stolpce vsake vrnjene tabele pustiti nevnesene. Privzeta vrednost: false. </li>\r\n     <li> <code>InferSheetDimensions</code>: je lahko ničelna ali logična vrednost (true/false), ki označuje, ali je območje delovnega lista, ki vsebuje podatke, treba namesto z branjem metapodatkov dimenzije iz datoteke izpeljati z branjem samega delovnega lista. To je lahko uporabno v primerih, kjer so metapodatki dimenzij nepravilni. Upoštevajte, da je ta možnost podprta samo za odprte Excelove datoteke »Odprtokodni XML«, ne pa tudi za starejše Excelove datoteke. Privzeta vrednost: false. </li>\r\n    </ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vrne vsebino lista1 iz Excelovega delovnega zvezka.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Vrne tabelo, ki vsebuje lastnosti in vsebino datotek in map, najdenih v določeni mapi.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsako mapo in datoteko, najdeno v poti mape, <code>path</code>. Vsaka vrstica vsebuje lastnosti mape ali datoteke in povezavo do vsebine. Parameter <code>options</code> je trenutno namenjen samo notranji uporabi.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Vrne tabelo, ki vsebuje lastnosti in vsebino datotek, najdenih v določeni mapi in podmapah.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsako datoteko, najdeno v mapi <code>path</code> in vseh njenih podmapah. Vsaka vrstica vsebuje lastnosti datoteke in povezavo do njene vsebine. Parameter <code>options</code> je trenutno namenjen samo za notranjo uporabo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Uvozite podatke iz zbirke podatkov storitve Google BigQuery s storitvijo Azure AD",
        "Documentation.LongDescription": "\r\n      Vrne tabelo, v kateri so navedeni projekti, ki so na voljo v storitvi Google BigQuery, z uporabo storitve Azure AD za <code>ID obračunavanja projekta</code>. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je vrednost izteka povezave z ODBC.</li>\r\n        <li><code>CommandTimeout</code>: trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana.</li>\r\n        <li><code>UseStorageApi</code>: določa, ali bo za velike nabore rezultatov uporabljen vmesnik API shrambe storitve BigQuery. Privzeta vrednost je »true« in določa uporabo vmesnika API shrambe. Nastavite na »false«, če ne želite uporabiti vmesnika API shrambe.</li>\r\n        <li><code>AudienceUri</code>: to je URI občinstva, ki ga lahko gonilnik ODBC uporabi za svoje zahteve za izmenjavo žetonov. To polje mora biti popolnoma določen URI (npr. //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread), kjer je pool_id globalno enolično ime za prepoznavo skupine zaposlenih.</li>\r\n      </ul>\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2 ...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Prikažite projekte, ki so na voljo v storitvi Google BigQuery, z uporabo storitve Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Preglednice",
        "Documentation.Caption": "Google Preglednice",
        "Documentation.Description": "Uvozi podatke iz Google Preglednic",
        "Documentation.LongDescription": "Uvozi podatke iz Google Preglednic"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Vrne tabelo za krmarjenje, ki vsebuje vsebnike, najdene v določenem računu iz trezorja shrambe Azure.",
        "Documentation.LongDescription": "Vrne tabelo za krmarjenje, ki vsebuje vrstico vsakega vsebnika, najdenega na URL-ju računa (<code>account</code>), iz trezorja shrambe Azure. Vsaka vrstica vsebuje povezavo na zbirke dvojiških podatkov vsebnikov.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Vrne tabelo za krmarjenje, ki vsebuje vsebnike, najdene v določenem računu iz trezorja shrambe Azure.",
        "Documentation.LongDescription": "Vrne tabelo za krmarjenje, ki vsebuje vrstico vsakega vsebnika, najdenega na URL-ju računa (<code>account</code>), iz trezorja shrambe Azure. Vsaka vrstica vsebuje povezavo na zbirke dvojiških podatkov vsebnikov.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Vrne tabelo, ki vsebuje lastnosti in vsebino datotek in map, najdenih v določeni mapi iz datotečnega sistema Hadoop.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsako mapo in datoteko, najdeno na URL-ju mape, <code>url</code>, iz datotečnega sistema Hadoop. Vsaka vrstica vsebuje lastnosti mape ali datoteke in povezavo do vsebine.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Vrne tabelo, ki vsebuje lastnosti in vsebino datotek, najdenih v določeni mapi in podmapah iz datotečnega sistema Hadoop.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsako datoteko, najdeno na URL-ju mape, <code>url</code>, in podmape iz datotečnega sistema Hadoop. Vsaka vrstica vsebuje lastnosti datoteke in povezavo do vsebine.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Uvozite podatke iz gruče Impala",
        "Documentation.LongDescription": "Uvozite podatke iz gruče Impala <code>server</code>. Če vrat niste navedli, bodo uporabljena privzeta vrata 21050.",
        "Documentation.Examples": [
          {
            "Description": "Navedite tabele v gruči Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Uvozi podatke iz storitve Raziskovalec podatkov Azure (Kusto)",
        "Documentation.DisplayName": "Raziskovalec podatkov Azure (Kusto)",
        "Documentation.Caption": "Kusto.Vsebina",
        "Documentation.Name": "Raziskovalec podatkov Azure (Kusto)",
        "Documentation.LongDescription": "Uvozi podatke iz vašega primerka storitve Raziskovalec podatkov Azure (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabelo z informacijami o dogodkih Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabela z dogodki Storm iz zbirke podatkov »Vzorci« v gruči »pomoč«"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "Krmar po prodaji storitve LinkedIn",
        "Documentation.LongDescription": "Krmar po prodaji storitve LinkedIn",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Vrne tabelo s podatki iz končne točke storitve MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Pokliče vmesnik API storitve MailChimp API in vrne ustvarjeni nabor podatkov v obliki tabele. Samodejno se premika po vseh rezultatih. Izbirni parameter »entityName« lahko uporabite za končne točke vmesnika API, kjer se korenska končna točka in glavni parameter »entityName« v odgovoru JSON ne ujemata.",
        "Documentation.Examples": [
          {
            "Description": "Pridobi tabelo s podatki iz vmesnika API s končno točko seznamov v storitvi MailChimp.",
            "Code": "MailChimp.Collection(\"seznami\")",
            "Result": "Tabela s podatki seznamov."
          },
          {
            "Description": "Pridobi tabelo s podatki iz vmesnika API s končno točko map akcij v storitvi MailChimp.",
            "Code": "MailChimp.Collection(\"mape akcij\", \"mape\")",
            "Result": "Tabela s podatki map akcij."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Vrne odgovor z neobdelanimi rezultati iz končne točke vmesnika storitve MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Pokliče vmesnik API storitve MailChimp API in vrne neobdelan odgovor.",
        "Documentation.Examples": [
          {
            "Description": "Vrne neobdelane podatke iz poročil/podrobnosti o klikih iz končne točke vmesnika API storitve MailChimp za navedeno akcijo.",
            "Code": "MailChimp.Instance(\"poročila/{campaign_id}/podrobnosti o klikih\")",
            "Result": "Neobdelani podatki s podrobnostmi o klikih iz navedene akcije."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Zagotavlja napredne funkcije poizvedbe.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Zagotavlja napredne funkcije poizvedbe.",
        "Documentation.Examples": [
          {
            "Description": "Denimo, da je danes 15. 6. 2017 ter da želite pridobiti podatke povzetkov med 1. 5. 2017 in 15. 6. 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija vrne podatke povzetkov med 1. 5. 2017- in 15. 6. 2017"
          },
          {
            "Description": "Denimo, da je danes 15. 6. 2017 in da želite pridobiti podatke povzetkov za april 2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija vrne podatke med 1. 4. 2017 in 30. 4. 2017"
          },
          {
            "Description": "Denimo, da je danes 15. 6. 2017 in da želite pridobiti podatke povzetkov od aprila 2017 do današnjega dne.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Povzetki\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija vrne podatke med 1. 4. 2017 in 15. 6. 2017"
          },
          {
            "Description": "Denimo, da je danes je 15. 6. 2017 in da želite pridobiti podatke povzetkov od zadnjega decembra do tega februarja ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Povzetki\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija vrne podatke med 1. 12. 2016 in 28. 2 2017"
          },
          {
            "Description": "Denimo, da je danes je 15. 6. 2017 in da želite pridobiti stroške spletnega mesta Marketplace za zadnjih 18 mesecev",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"StroškiTrga\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija vrne podatke med 1. 12. 2015 in 15. 6. 2017"
          },
          {
            "Description": "Denimo, da je danes 15. 6. 2017 ter da želite pridobiti podrobne stroške za junij 2017 in maj 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"PodrobniStroški\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija vrne podatke med 1. 5. 2017 in 15. 6. 2017"
          },
          {
            "Description": "Denimo, da je danes 3. 7. 2017 in da želite pridobiti podrobne stroške za julij 2016",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"PodrobniStroški\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija vrne podatke med 1. 7. 2016 in 31. 7. 2016"
          },
          {
            "Description": "Denimo, da je danes 13. 7. 2017 ter da želite pridobiti povzetke stanja za preteklih 10 mesecev in 13 dni tega meseca.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija vrne podatke med 1. 9. 2016 in 13. 7. 2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Vpogledi v potrošnjo na platformi Microsoft Azure",
        "Documentation.Description": "Vpogledi v potrošnjo na platformi Microsoft Azure",
        "Documentation.DisplayName": "Vpogledi v potrošnjo na platformi Microsoft Azure",
        "Documentation.LongDescription": "Vpogledi v potrošnjo na platformi Microsoft Azure",
        "Documentation.Name": "Vpogledi v potrošnjo na platformi Microsoft Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Vrne tabelo tabel in pogledov SQL iz vira podatkov ODBC. ",
        "Documentation.LongDescription": "Vrne tabelo tabel in pogledov SQL iz vira podatkov ODBC, ki je določen v nizu povezave <code>connectionString</code>. <code>connectionString</code> je lahko besedilo ali zapis s pari vrednosti lastnosti. Vrednosti lastnosti so lahko besedilo ali število. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je 15 sekund.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logična vrednost (true/false), ki določa, ali je treba za preverjanje pristnosti sistema Windows ustvariti možnosti niza povezave, ki so združljive s strežnikom SQL Server. Privzeta vrednost je &#187;true&#171;.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pridobite tabele in poglede SQL iz navedenega niza povezave.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Vrne tabelo s tabelami in pogledi SQL iz vira podatkov OLE DB.",
        "Documentation.LongDescription": "Vrne tabelo s tabelami in pogledi SQL iz vira podatkov ODBC, ki je določen v nizu povezave <code>connectionString</code>. <code>connectionString</code> je lahko besedilo ali zapis s pari vrednosti lastnosti. Vrednosti lastnosti so lahko besedilo ali število. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logična vrednost (true/false), ki določa, ali je treba za preverjanje pristnosti sistema Windows ustvariti možnosti niza povezave, ki so združljive s strežnikom SQL Server. Privzeta vrednost je &#187;true&#171;.</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer določen kot [možnost1 = vrednost1, možnost2 = vrednost2 ...] ali [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Vrne tabelo tabel in pogledov SQL iz zbirke podatkov Oracle Database.",
        "Documentation.LongDescription": "Vrne tabelo s tabelami in pogledi SQL iz zbirke podatkov Oracle Database v strežniku <code>server</code>. S strežnikom lahko izbirno določite vrata, ki jih ločite z dvopičjem. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...] ali [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Vrne vse tabele, najdene v datoteki PDF.",
        "Documentation.LongDescription": "Vrne vse tabele, najdene v <code>pdf</code>. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>Implementation</code> : Različica algoritma, ki bo uporabljena pri identifikaciji tabel. Stare različice so na voljo samo za vzvratno združljivost, da lahko preprečite nedelovanje poizvedb zaradi posodobitev algoritma. Najnovejša različica mora vedno vrniti najboljše rezultate. Veljavne vrednosti so &#187;1.3&#171;, &#187;,1.2&#171;, &#187;1.1&#171; ali &#187;null&#171;.</li>\r\n<li><code>StartPage</code> : Določa prvo stran v obsegu strani za preverjanje. Privzeto: 1.</li>\r\n<li><code>EndPage</code> : Določa zadnjo stran v obsegu strani za preverjanje. Privzeto: zadnja stran dokumenta.</li>\r\n<li><code>MultiPageTables</code> : Nadzoruje, ali bodo podobne tabele na zaporednih straneh samodejno združene v eno samo tabelo. Privzeto: true.</li>\r\n<li><code>EnforceBorderLines</code> : Nadzoruje, ali so črte obrob vedno uveljavljene kot meje celic (če je nastavljeno na &#187;true&#171;) oziroma preprosto uporabljene kot en namig med mnogimi za določanje mej celic (če je nastavljeno na &#187;false&#171;). Privzeto: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Dostop do podatkov",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabele, ki jih vsebuje sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Vnesite URL svojega računa za Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki aplikacije Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Ρỳτĥøπ §сŕįрτ",
        "Documentation.Description": "Σхзсüťęš Ρýţђθπ šсяĩþŧ дñδ ŗзтϋřйş ðāτą ƒѓãmëѕ",
        "Documentation.Examples": {
          "Description": "Σхзсüťęš Ρýţђθπ šсяĩþŧ дñδ ŗзтϋřйş ðāτą ƒѓãmëѕ",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Я śčŕîрŧ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Vrne tabelo, v kateri je vsaka vrstica ime polja in vrednost vhodnega zapisa.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje stolpca <code>Name</code> in <code>Value</code> ter vrstico za vsako polje v <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Vrnite tabelo iz zapisa.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Vrne pakete v zbirki podatkov SAP HANA.",
        "Documentation.LongDescription": "Vrne tabelo večdimenzionalnih paketov iz zbirke podatkov <code>server</code> platforme SAP HANA. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>Distribution</code> : SapHanaDistribution, ki nastavi vrednost lastnosti &#187;Porazdelitev&#171; v nizu povezave. Usmerjanje izjav je način ovrednotenja pravilnega vozlišča strežnika porazdeljenega sistema pred izvedbo izjave. Privzeta vrednost je &#187;SapHanaDistribution.All&#171;.</li>\r\n<li><code>Implementation</code> : Določa izvedbo priključka SAP HANA za uporabo.</li>\r\n<li><code>EnableColumnBinding</code> : Poveže spremenljivke s stolpci nabora rezultatov SAP Hana pri pridobivanju podatkov. Lahko izboljša učinkovitost delovanja zaradi nekoliko večje uporabe pomnilnika. Privzeta vrednost je &#187;false&#171;.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je 15 sekund.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Vrne tabelo z vsebino s spletnega mesta SharePoint.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsako mapo in dokument na navedenem SharePointovem spletnem mestu <code>url</code>. Vsaka vrstica vsebuje lastnosti mape ali datoteke in povezavo do vsebine. Navedete lahko <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Število (14 ali 15) ali besedilo &#187;Samodejno&#171;, ki določa različico vmesnika API za SharePoint, ki bo uporabljena za to mesto. Če tega parametra ne navedete, bo uporabljena različica 14 vmesnika API. Če navedete &#187;Samodejno&#171;, bo različica strežnika samodejno odkrita, če bo to mogoče, v nasprotnem primeru pa je privzeto izbrana različica 14. Za SharePointova mesta, ki niso v angleščini, potrebujete vsaj različico 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Vrne tabelo z dokumenti s spletnega mesta SharePoint.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsak dokument, ki je bil najden na navedenem SharePointovem spletnem mestu <code>url</code>, in podmape. Vsaka vrstica vsebuje lastnosti mape ali datoteke in povezavo do vsebine. Navedete lahko <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Število (14 ali 15) ali besedilo &#187;Samodejno&#171;, ki določa različico vmesnika API za SharePoint, ki bo uporabljena za to mesto. Če tega parametra ne navedete, bo uporabljena različica 14 vmesnika API. Če navedete &#187;Samodejno&#171;, bo različica strežnika samodejno odkrita, če bo to mogoče, v nasprotnem primeru pa je privzeto izbrana različica 14. Za SharePointova mesta, ki niso v angleščini, potrebujete vsaj različico 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Vrne tabelo z vsebino s SharePointovega seznama.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsak element seznama na navedenem SharePointovem seznamu <code>url</code>. Vsaka vrstica vsebuje lastnosti seznama. Navedete lahko <code>options</code>, s katerim lahko nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Število (14 ali 15) ali besedilo &#187;Samodejno&#171;, ki določa različico vmesnika API za SharePoint, ki bo uporabljena za to mesto. Če tega parametra ne navedete, bo uporabljena različica 14 vmesnika API. Če navedete &#187;Samodejno&#171;, bo različica strežnika samodejno odkrita, če bo to mogoče, v nasprotnem primeru pa je privzeto izbrana različica 14. Za SharePointova mesta, ki niso v angleščini, potrebujete vsaj različico 15.</li>\r\n<li><code>Implementation</code> : Neobvezno. Določa, katero različico SharePointovega priključka želite uporabiti. Sprejete vrednosti so &#187;2.0&#171; ali &#187;null&#171;. Če je vrednost &#187;2.0&#171;, je uporabljena uvedba SharePointovega povezovalnika 2.0. Če je vrednost &#187;null&#171;, je uporabljena izvirna uvedba SharePointovega povezovalnika.</li>\r\n<li><code>ViewMode</code> : Neobvezno. Ta možnost je veljavna le za uvedbo 2.0. Sprejeti vrednosti sta &#187;All&#171; in &#187;Default&#171;. Če vrednost ni določena, je vrednost nastavljena na &#187;All&#171;. Če je določena možnost &#187;All&#171;, pogled vključuje vse uporabniško ustvarjene in sistemsko določene stolpce. Ko je določena možnost &#187;Default&#171;, se pogled ujema s tem, kar uporabnik vidi, ko si ogleda seznam v spletu v katerem koli pogledu, ki ga je uporabnik v nastavitvah nastavil kot &#187;Default&#171;. Če uporabnik uredi privzeti pogled tako, da doda ali odstrani uporabniško ustvarjene ali sistemsko določene stolpce ali pa ustvari nov pogled in ga nastavlja kot privzetega, se te spremembe razširijo prek povezovalnika.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Priključku preprečuje uporabo ločene končne točke za stolpce opombe.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Vrne tabelo iz vsebine na navedenem URL-ju, formatirano skladno z API-jem SODA 2.0.",
        "Documentation.LongDescription": "Vrne tabelo iz vsebine na navedenem URL-ju <code>url</code>, formatirano skladno z API-jem SODA 2.0. URL mora kazati na veljaven vir, skladen s SODA, ki ima pripono .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "To funkcijo lahko uporabite za klicanje katere koli končne točke »Seznam«, ki so na voljo v vmesniku API za SparkPost v1. Pri klicanju vmesnika API za SparkPost s to funkcijo upoštevajte, ne pozabite, da je za vmesnik API za SparkPost določena stroga omejitev števila klicev vmesnika API. Če strežnik SparkPost vrne kodo stanja 429, ste dosegli omejitev števila klicev, zato boste pred dodatnimi klici morali počakati nekaj trenutkov.",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabelo, v kateri je en stolpec dopolnjen s podatki iz ene končne točke »Seznami« vmesnika API za SparkPost v1 (podrobnosti najdete v dokumentaciji za SparkPost).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Pridobite vgrajene tabele, ki jih razkrije priključek SparkPost z združenimi podatki za uporabniško določeno število dni. Pri osveževanju teh tabel ali klicanju vmesnika API za SparkPost API s tem priključkom upoštevajte, da je za vmesnik API za SparkPost določena stroga omejitev števila klicev vmesnika API. Če strežnik SparkPost vrne kodo stanja 429, ste dosegli omejitev števila klicev, zato boste pred dodatnimi klici morali počakati nekaj trenutkov. Pri izbiranju vrednosti za parameter števila dni upoštevajte, da lahko vmesnik API shrani podatke samo za 6 mesecev."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Vrne tabelo zbirk podatkov v strežniku SQL Server.",
        "Documentation.LongDescription": "Vrne tabelo zbirk podatkov v navedenem strežniku SQL Server <code>server</code>. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Številka, s katero nastavite vrednost stavka poizvedbe &#187;maxdop&#171; v ustvarjeni poizvedbi strežnika SQL.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n<li><code>MultiSubnetFailover</code> : Logična vrednost (true/false), ki nastavi vrednost lastnosti &#187;MultiSubnetFailover&#171; v nizu povezave (privzeta vrednost je &#187;false&#171;).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logična vrednost (true/false), ki poskusi pregibati pretvorbe vrste, če je &#187;true&#171;. Ta funkcija morda ne bo uspela, zato morda ne bo uspela celotna poizvedba. Ni priporočeno za splošno uporabo.</li>\r\n<li><code>ContextInfo</code> : Dvojiška vrednost, uporabljena za nastavitev lastnosti CONTEXT_INFO pred zagonom posameznega ukaza.</li>\r\n<li><code>OmitSRID</code> : Logična vrednost (true/false), ki izpusti SRID pri ustvarjanju dobro znanega besedila iz vrst geometrije in geografije, če je true.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Logična vrednost (true/false). Če je &#187;true&#171;, omogoča pregibanje poizvedb zbirke podatkov v istem strežniku. Privzeta vrednost je &#187;false&#171;.</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...].\r\n    <br>\r\n    S tem parametrom poizvedbe strežnika SQL ne morete nastaviti tako, da se izvaja v strežniku. Če želite zagnati poizvedbo strežnika SQL, uporabite <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Pokliče vmesnik API za Stripe z možnostjo omejitve števila klicev končne točke vmesnika API.",
        "Documentation.LongDescription": "Pokliče vmesnik API za Stripe na naslovu https://api.stripe.com/v1/<code>method</code> z izbirnim zapisom <code>query</code> kot dodatnim parametrom in izbirnim elementom <code>pageLimit</code> kot omejitvijo števila zahtev vmesnika API. Najprej so vrnjeni najnovejši podatki. Če element <code>pageLimit</code> ni določen, so vrnjeni vsi podatki. Uporabljena je različica Stripe 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Vrne podatke o vseh stroških",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Tabela s podatki o vseh stroških za trenutni račun Stripe"
          },
          {
            "Description": "Vrne eno stran podatkov o stroških",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Tabela z najnovejšimi podatki o stroških za trenutni račun Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Shrani tabelo v medpomnilnik, da med vrednotenjem ne pride do zunanjih sprememb.",
        "Documentation.LongDescription": "Shrani tabelo v medpomnilnik in jo med vrednotenjem osami pred zunanjimi spremembami.\r\n    Medpomnjenje je plitko. Vsili ovrednotenje vseh skalarnih vrednosti celic, vendar pusti neskalarne vrednosti (zapise, sezname, tabele itn.), kot so.\r\n    <br>\r\n    <br>\r\n    Upoštevajte, da lahko s to funkcijo omogočite hitrejše izvajanje poizvedb. V nekaterih primerih lahko poizvedbe zaradi dodatnih stroškov branja vseh podatkov \r\n    shranjevanja v pomnilniku ter dejstva, da medpomnjenje preprečuje pregibanje navzdol, upočasnijo izvajanje poizvedb. Če ni treba, da so podatki shranjeni v medpomnilniku\r\n,    vendar želite preprečiti pregibanje navzdol, namesto tega uporabite <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Naložite vse vrstice tabele SQL v pomnilnik, tako da nobeni postopki v strežniku SQL ne bodo več mogli poizvedovanje po strežniku SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Vrne tabelo, ki je rezultat spajanja seznama tabel.",
        "Documentation.LongDescription": "Vrne tabelo, ki je rezultat spajanja seznama tabel <code>tables</code>. Nastala tabela bo vsebovala strukturo z vrsto vrstice, ki jo določa <code>columns</code> ali unija vrst vnosov, če <code>columns</code> ni določen.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Spojite tri tabele.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Spojite tri tabele z različnimi strukturami.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Spojite dve tabeli in projekt v navedeno vrsto.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Poniža glave stolpcev na prvo vrstico vrednosti.",
        "Documentation.LongDescription": "Poniža glave stolpcev (tj. imena stolpcev) na prvo vrstico vrednosti. Privzeta imena stolpcev so »Column1«, »Column2« itd.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Ponižajte prvo vrstico vrednosti v tabeli v tabeli.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Odstrani podvojene vrstice iz tabele.",
        "Documentation.LongDescription": "Odstrani podvojene vrstice iz tabele.\r\n    Izbirni parameter <code>equationCriteria</code>, ki določa, za katere stolpce tabele je bilo preverjeno, ali vsebujejo dvojnike. Če parameter <code>equationCriteria</code> ni določen, so preskušeni vsi stolpci.<br>\r\n    <br>\r\n    Power Query včasih preloži nekatere postopke v zaledne vire podatkov (imenovane »pregibanje«) in včasih optimizira tudi poizvedbe tako, da \r\n    preskoči postopke, ki niso nujno potrebni, zato na splošno ni nobenega zagotovila, kateri določeni dvojniki bodo ohranjeni.\r\n    Ne morete na primer predvidevati, da bo prva vrstica z enoličnim naborom vrednosti stolpcev ostala, vrstice navzdol v tabeli pa bodo odstranjene.\r\n    Če želite omogočiti predvidljivo delovanje odstranjevanja dvojnikov, najprej medpomnite tabelo z ukazom <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Odstranite podvojene vrstice iz tabele.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Odstranite podvojene vrstice iz stolpca [b] v tabeli <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Ustvari tabelo iz seznama stolpcev in navedenih vrednosti.",
        "Documentation.LongDescription": "Ustvari tabelo vrste <code>columns</code> iz seznama <code>lists</code>, ki vsebuje ugnezdene sezname z imeni stolpcev in vrednostmi.\r\n    Če imajo nekateri stolpci več vrednosti kot drugi, bodo manjkajoče vrednosti napolnjene s privzeto vrednostjo »null«, če stolpci lahko imajo ničelno vrednost.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite tabelo iz seznama imen strank na seznamu. Vsaka vrednost na seznamu strank z elementi je pretvorjena v vrednost vrstice, vsak seznam pa v stolpec.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Ustvarite tabelo iz danega seznama stolpcev in seznama imen stolpcev.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Ustvarite tabelo z drugačnim številom stolpcev na vrstico. Manjkajoča vrednost vrstice je ničelna.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Pretvori seznam v tabelo, tako da uporabi navedeno razdelilno funkcijo za vsak element na seznamu.",
        "Documentation.LongDescription": "Pretvori seznam <code>list</code> v tabelo, tako da uporabi izbirno razdelilno funkcijo, <code>splitter</code>, za vsak element na seznamu. Seznam naj bi bil privzeto seznam besedilnih vrednosti, razdeljen z vejicami. Izbirni parameter <code>columns</code> je lahko število stolpcev, seznam stolpcev ali vrsta tabele. Določite lahko tudi izbirna parametra <code>default</code> in <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite tabelo s seznama z uporabo privzetega razdeljevalca.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Ustvarite tabelo s seznama z uporabo razdeljevalca po meri.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Ustvarite tabelo s seznama z uporabo razdeljevalca Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Pretvori seznam zapisov v tabelo.",
        "Documentation.LongDescription": "Pretvori <code>records</code>, seznam zapisov, v tabelo.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite tabelo iz zapisov in pri tem za imena stolpcev uporabite imena polj zapisov.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Ustvarite tabelo iz zapisov z vnesenimi stolpci in izberite stolpce s števili.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Ustvari tabelo iz seznama vrednosti vrstic in izbirnih stolpcev",
        "Documentation.LongDescription": "Ustvari tabelo iz seznama <code>rows</code>, kjer je vsak element seznama notranji seznam, ki vsebuje vrednosti stolpcev za posamezno vrstico. Za <code>columns</code> lahko navedete izbirni seznam imen stolpcev, vrsto tabele ali število stolpcev.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabelo s stolpcem [IDStranke] z vrednostma {1, 2} in stolpcem [Ime] z vrednostma {\"Bob\", \"Jim\"} in stolpcem [Telefon] z vrednostma {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Vrne tabelo s stolpcem [IDStranke] z vrednostma {1, 2}, stolpcem [Ime] z vrednostma {\"Bob\", \"Jim\"}, in stolpcem [Telefon] z vrednostma {\"123-4567\", \"987-6543\"}, pri čemer je [IDStranke] število, [Ime] in [telefon] pa besedilo.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Ustvari tabelo s stolpcem iz podanih vrednosti.",
        "Documentation.LongDescription": "Ustvari tabelo s stolpcem, ki vsebuje navedeno vrednost ali seznam vrednosti, <code>value</code>. Določite lahko izbirni parameter zapisa (<code>options</code>), s katerim nadzorujete te možnosti:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: ime stolpca, ki je uporabljeno pri ustvarjanju tabele iz seznama ali skalarne vrednosti.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite tabelo iz vrednosti 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Ustvarite tabelo iz seznama.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Ustvarite tabelo iz vrednosti 1 z imenom stolpca po meri.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Vrne informacije o tem, kako je tabela razdeljena.",
        "Documentation.LongDescription": "Vrne informacije o tem, kako je tabela razdeljena  Vrnjena je tabela, kjer je vsak stolpec stolpec particije v izvirni tabeli in vsaka vrstica ustreza particiji v izvirni tabeli.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Vrne profil stolpcev tabele.",
        "Documentation.LongDescription": "<p>Vrne profil za stolpce v <code>table</code>.</p>\r\n<p>Za vsak stolpec (kadar je na voljo) so vrnjene te informacije:\r\n<ul>\r\n  <li>minimalno</li>\r\n  <li>maksimalno</li>\r\n  <li>povprečno</li>\r\n  <li>standardni odklon</li>\r\n  <li>število</li>\r\n  <li>štetje vrednosti null</li>\r\n  <li>razlikovalno štetje</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Poviša prvo vrstico vrednosti kot nove glave stolpcev (npr. imena stolpcev).",
        "Documentation.LongDescription": "Poviša prvo vrstico vrednosti kot nove glave stolpcev (npr. imena stolpcev). V glave so privzeto povišane samo besedilne in številske vrednosti. Veljavne možnosti so:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: če to možnost nastavite na <code>true</code>, so vse skalarne vrednosti v prvi vrstici povišane v glave s parametrom <code>Culture</code>, če je naveden (ali trenutnimi območnimi nastavitvami dokumenta).\r\n    Za vrednosti, ki jih je mogoče pretvoriti v besedilo, bo uporabljeno privzeto ime stolpca.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: ime kulture, ki določa kulturo za podatke.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Povišajte prvo vrstico z vrednostmi v tabeli.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Povišajte vse skalarne vrednosti v prvi vrstici tabele v glave.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Vrne tabelo, v kateri je preskočenih prvih »število« vrstic.",
        "Documentation.LongDescription": "Vrne tabelo, ki ne vsebuje prvega navedenega števila vrstic <code>countOrCondition</code> tabele <code>table</code>.\r\n    Število odstranjenih vrstic je odvisno od izbirnega parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Če je <code>countOrCondition</code> izpuščen, je odstranjena le prva vrstica. </li>\r\n    <li> Če je <code>countOrCondition</code> število, bo odstranjenih toliko vrstic (z začetkom na vrhu). </li>\r\n    <li> Če je <code>countOrCondition</code> pogoj, bodo odstranjene vrstice, ki izpolnjujejo pogoj, dokler določena vrstica ne izpolnjuje pogoja.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odstranite prvo vrstico tabele.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odstranite prvi dve vrstici tabele.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odstranite prve vrstice, kjer je [IDStranke] <= 2 v tabeli.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Vrne tabelo, iz katere je odstranjenih zadnjih N vrstic.",
        "Documentation.LongDescription": "Vrne tabelo, ki ne vsebuje zadnjih <code>countOrCondition</code> vrstic tabele <code>table</code>.\r\n        Število odstranjenih vrstic je odvisno od izbirnega parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Če je <code>countOrCondition</code> izpuščen, je odstranjena samo zadnja vrstica. </li>\r\n    <li> Če je <code>countOrCondition</code> število, bo odstranjenih toliko vrstic (z začetkom na dnu). </li>\r\n    <li> Če je <code>countOrCondition</code> pogoj, bodo odstranjene vrstice, ki izpolnjujejo pogoj, dokler določena vrstica ne izpolnjuje pogoja.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odstranite zadnjo vrstico tabele.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Odstranite zadnje vrstice, kjer je [IDStranke] > 2 v tabeli.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Vrne tabelo, pri čemer so iz vhodne tabele odstranjene vrstice, ki vsebujejo napako v vsaj eni celici. Če navedete seznam stolpcev, se preverijo morebitne napake le v celicah v navedenih stolpcih.",
        "Documentation.LongDescription": "Vrne tabelo, pri čemer so iz vhodne tabele odstranjene vrstice, ki vsebujejo napako v vsaj eni celici. Če navedete seznam stolpcev, se preverijo morebitne napake le v celicah v navedenih stolpcih.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odstranite vrednost napake iz prve vrstice.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Vrne tabelo z vrsticami v obratnem vrstnem redu.",
        "Documentation.LongDescription": "Vrne tabelo z vrsticami iz vnosa <code>table</code> v obratnem vrstnem redu.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Obrnite vrsti red vrstic v tabeli.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Vrne tabelo, ki vsebuje opis stolpcev (npr. shemo) določene tabele.",
        "Documentation.LongDescription": "<p>Vrne tabelo, ki opisuje stolpce tabele <code>table</code>.</p>\r\n<p>Vsaka vrstica v tabeli opisuje lastnosti stolpca za <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Ime stolpca</b></td>\r\n    <td><b>Opis</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Ime stolpca.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>Ničelni položaj stolpca v tabeli <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Ime vrste stolpca.</td>\r\n  </tr>\r\n <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Vrsta stolpca.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Ali stolpec lahko vsebuje vrednosti <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Številska osnova (npr. z osnovo 2 ali 10) polj <code>NumericPrecision</code> in <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Natančnost številskega stolpca v osnovi, določena z vrednostjo <code>NumericPrecisionBase</code>. To je največje število števk, ki jih lahko predstavlja vrednost te vrste (vključno s številom mest v števcu oz. imenovalcu).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Lestvica številskega stolpca v osnovi, kot jo določa <code>NumericPrecisionBase</code>. To je število števk v števcu ali imenovalcu vrednosti te vrste. Vrednost <code>0</code> označuje fiksno lestvico brez števk v števcu ali imenovalcu. Vrednost <code>null</code> označuje, da lestvica ni znana (morda zato, ker je spremenljiva ali ker ni določena).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Največje število števk v imenovalcu ali števcu, ki je podprto v delu s sekundami vrednosti za datum ali čas.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Največje število dovoljenih znakov v stolpcu <code>text</code> ali največje število dovoljenih bajtov v stolpcu <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Označuje, ali se dolžina tega stolpca lahko spreminja (do <code>MaxLength</code>) ali pa je velikost fiksna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Ime vrste stolpca v sistemu originalne vrste vira (npr. <code>nvarchar</code> for SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Privzeti izraz za vrednost tega stolpca v jeziku izvirnega izraza za vir (npr. <code>42</code> ali <code>newid()</code> za SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Opis stolpca.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Vrne tabelo z le tistimi vrsticami vhodne tabele, ki vsebujejo napako v vsaj eni celici. Če navedete seznam stolpcev, se preverijo morebitne napake le v celicah v navedenih stolpcih.",
        "Documentation.LongDescription": "Vrne tabelo z le tistimi vrsticami vhodne tabele, ki vsebujejo napako v vsaj eni celici. Če navedete seznam stolpcev, se preverijo morebitne napake le v celicah v navedenih stolpcih.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Izberite imena strank z napakami v njihovih vrsticah.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Vrne tabelo, v kateri je preskočenih prvih »število« vrstic.",
        "Documentation.LongDescription": "Vrne tabelo, ki ne vsebuje prvega navedenega števila vrstic <code>countOrCondition</code> tabele <code>table</code>.\r\n    Število preskočenih vrstic je odvisno od izbirnega parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Če je <code>countOrCondition</code> izpuščen, je preskočena le prva vrstica. </li>\r\n    <li> Če je <code>countOrCondition</code> število, bo preskočenih toliko vrstic (z začetkom na vrhu). </li>\r\n    <li> Če je <code>countOrCondition</code> pogoj, bodo preskočene vrstice, ki izpolnjujejo pogoj, dokler določena vrstica ne izpolnjuje pogoja.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Preskočite prvo vrstico tabele.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Preskočite prvi dve vrstici tabele.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Preskočite prve vrstice, kjer je [Cena] > 25 v tabeli.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Prepreči izvajanje vseh operacij v strežniku navzdol v izvirnem viru podatkov.",
        "Documentation.LongDescription": "Prepreči izvajanje vseh operacij v strežniku navzdol v izvirnem viru podatkov v storitvi <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Pridobi podatke iz tabele SQL na način, ki preprečuje izvajanje vseh operacij v strežniku SQL kot poizvedbo.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Spremeni stolpce v vrstice in vrstice v stolpce.",
        "Documentation.LongDescription": "Spremeni stolpce v vrstice in vrstice v stolpce.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Spremenite vrstice tabele parov »ime-vrednost« v stolpce.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Pridobi relacije med naborom tabel.",
        "Documentation.LongDescription": "Pridobi relacije med naborom tabel. Za nabor <code>tables</code> se predvideva, da ima strukturo, ki je podobna strukturi tabele za krmarjenje. Stolpec, določen s/z <code>dataColumn</code>, vsebuje dejanske podatkovne tabele.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Vrne tabelo tabel in pogledov SQL iz zbirke podatkov Teradata.",
        "Documentation.LongDescription": "Vrne tabelo s tabelami in pogledi SQL iz zbirke podatkov Teradata v strežniku <code>server</code>. S strežnikom lahko izbirno določite vrata, ki jih ločite z dvopičjem. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...] ali [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Vpogledi v časovne vrste Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Vnesite število mesecev, za katere želite pridobiti zgodovinske podatke storitve Twilio.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tabele",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki storitve Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Vrne tabelo z opisom stolpcev (npr. shemo) določene vrste tabele.",
        "Documentation.LongDescription": "<p>Vrne tabelo z opisom stolpcev tabele <code>tableType</code>.</p>\r\n<p>Glejte dokumentacijo za <code>Table.Schema</code> za opis nastale tabele.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Vir storitev Azure DevOps",
        "Documentation.DisplayName": "Vir storitev Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Vrne tabelo virov OData, ki jih zagotavlja storitev Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Vzpostavljanje povezave s podatki Vpogledov Viva",
        "Documentation.LongDescription": "Uvozite tedensko metriko in podatke atributov iz Analitike delovnega mesta.",
        "Documentation.Examples": [
          {
            "Description": "Pridobi tabelo z vidnimi atributi in metriko na teden za vsakega izmerjenega zaposlenega na particiji.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Vrne vsebino dokumenta HTML, razdeljeno na sestavne dele, ter predstavitev celotnega dokumenta in njegovega besedila po odstranitvi oznak.",
        "Documentation.LongDescription": "Vrne vsebino dokumenta HTML, razdeljeno na sestavne dele, ter predstavitev celotnega dokumenta in njegovega besedila po odstranitvi oznak.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Vrne tabelo s ključnimi metrikami storitve Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Pokliče končno točko za ključne metrike v storitvi Webtrends in vrne vse podatke v obliki tabele.",
        "Documentation.Examples": [
          {
            "Description": "Pridobi tabelo s ključnimi metrikami za najemnika 98765 z zadnjih 30 dni",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Tabela s ključnimi metrikami"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Vnesite ID profila, ki je povezan z vašim računom za Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki storitve Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Vzpostavljanje povezave s podatki Vpogledov Viva",
        "Documentation.LongDescription": "Uvozite tedensko metriko in podatke atributov iz Analitike delovnega mesta.",
        "Documentation.Examples": [
          {
            "Description": "Pridobi tabelo z vidnimi atributi in metriko na teden za vsakega izmerjenega zaposlenega na particiji.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Vrne vsebino dokumenta XML kot hierarhično tabelo.",
        "Documentation.LongDescription": "Vrne vsebino dokumenta XML kot hierarhično tabelo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Vrne vsebino dokumenta XML kot ugnezdeno zbirko poenostavljenih tabel.",
        "Documentation.LongDescription": "Vrne vsebino dokumenta XML kot ugnezdeno zbirko poenostavljenih tabel.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pridobite vsebino lokalne datoteke xml.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Vnesite URL svojega računa za Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki storitve Zendesk."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Vrne zbirko shem za vir podatkov ADO.NET.",
        "Documentation.LongDescription": "Vrne zbirko shem za vir podatkov ADO.NET z imenom ponudnika <code>providerName</code> in nizom povezave <code>connectionString</code>. <code>connectionString</code> je lahko besedilo ali zapis s pari vrednosti lastnosti. Vrednosti lastnosti so lahko besedilo ali številka. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logična vrednost (true/false), ki določa, ali je treba za preverjanje pristnosti sistema Windows ustvariti možnosti niza povezave, ki so združljive s strežnikom SQL Server. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (beta)",
        "Documentation.Description": "Uvozite podatke iz zbirke podatkov storitve Amazon Redshift.",
        "Documentation.LongDescription": "Vrne tabelo, v kateri so navedene tabele v gruči storitve Amazon Redshift <code>v</code> zbirke podatkov in <code>zbirke</code>.  Določite lahko izbirni parameter zapisa <code>options</code> za nadzor teh možnosti:\r\n<ul>\r\n<li><code>Ime ponudnika</code>: besedilna vrednost, ki jo želite uporabiti kot ime ponudnika za povezavo. To se uporablja pri uporabi datoteke Microsoft Authentication.</li>\r\n<li><code>Batch Size</code>: število vrstic, ki so dostavljene z enim klicem strežnika.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Vrne tabelo večdimenzionalnih kock ali tabelaričnih modelov iz zbirke podatkov storitev Analysis Services.",
        "Documentation.LongDescription": "Vrne tabelo večdimenzionalnih kock ali tabelaričnih modelov iz zbirke podatkov storitev Analysis Services <code>database</code> v strežniku <code>server</code>. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>Query</code> : Izvorna poizvedba MDX, uporabljena za pridobitev podatkov.</li>\r\n<li><code>TypedMeasureColumns</code> : Logična vrednost, ki določa, ali bodo vrste, določene v večdimenzionalnem ali tabelaričnem modelu, uporabljene za vrste dodanih stolpcev z merami. Če je ta vrednost nastavljena na &#187;false&#171;, bo vrsta &#187;number&#171; uporabljena za vse stolpce z merami. Privzeta vrednost za to možnost je &#187;false&#171;.</li>\r\n<li><code>Culture</code> : Ime kulture, ki določa kulturo podatkov. To ime ustreza lastnosti niza povezave &#187;Območni identifikator&#171;.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>SubQueries</code> : Številka (0, 1 ali 2), ki nastavi vrednost lastnosti &#187;SubQueries&#171; v nizu povezave. Ta vrednost nadzoruje način delovanja izračunanih članov v podizborih ali podizrezih. (Privzeta vrednost je 2.)</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Vrne tabelo, v kateri so navedene tabele v določeni gruči Spark.",
        "Documentation.LongDescription": "Vrne tabelo, v kateri so navedene tabele v določeni gruči Spark <code>host</code> in pri tem uporabi <code>protocol</code>.  Veljavni protokoli so:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabelo, v kateri so navedene tabele v določeni gruči Spark.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Vnesite organizacijo in imena projektov.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (samo table)",
        "Documentation.LongDescription": "Vrne tabelo pogledov storitve Analytics, ki jih zagotavlja storitev Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Uvozite podatke iz poizvedbe HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nVrne seznam tabel iz poizvedbe HDInsight Interactive Query, ki je določena s parametrom <code>database</code> v paremteru <code>server</code> poizvedbe HDInsight Interactive Query. S strežnikom lahko izbirno navedete številko vrat, ki jo ločite z dvopičjem. Navedete lahko izbirni parameter <code>options</code>, s katerim nadzorujete te možnosti:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n        <li><code>CommandTimeout</code>: trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je odvisna od gonilnika.</li>\r\n</ul>\r\nParameter <code>options</code> je naveden kot [možnost1 = vrednost1, možnost2 = vrednost 2 ...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Vrne tabelo s stolpci, ki so preslikani v atribute entitete v modelu Common Data Model, vključno s podatkovnimi tipi.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Vrne tabelo s stolpci, ki so preslikani v atribute entitete v modelu Common Data Model, vključno s podatkovnimi tipi. Stolpci iz definicije entitete bodo dodani, če niso preslikani, morebitni nepreslikani stolpci pa bodo odstranjeni.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Vrne kocko, ko zanjo uporabite parameter.",
        "Documentation.LongDescription": "Vrne kocko, ko uporabite <code>parameter</code> z vrednostjo <code>arguments</code> za <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Spremeni dimenzionalno granularnost konteksta filtra kocke s strnjevanjem atributov, preslikanih na navedene stolpce.",
        "Documentation.LongDescription": "Spremeni dimenzionalno granularnost konteksta filtra za <code>cube</code> s strnjevanjem atributov, preslikanih na navedene stolpce <code>columnNames</code>. Stolpci se tudi odstranijo iz tabelarnega pogleda kocke.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Zamenja nabor dimenzij, ki jih vrne Cube.Dimensions.",
        "Documentation.LongDescription": "Zamenja nabor dimenzij, ki jih vrne <code>Cube.Dimensions</code>.\r\n To funkcijo lahko na primer uporabite za dodajanje stolpca ID atributu razsežnosti, tako da lahko vir podatkov združuje na ID in ne na prikazano vrednost.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Uporabi seznam funkcij kocke.",
        "Documentation.LongDescription": "Uporabi seznam funkcij kocke (<code>transforms</code>) za <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Vrne tabelo tabel in pogledov SQL, ki so na voljo v zbirki podatkov Db2.",
        "Documentation.LongDescription": "Vrne tabelo tabel in pogledov SQL, ki so na voljo v zbirki podatkov Db2 v strežniku <code>server</code> v primerku zbirke podatkov z imenom <code>database</code>. S strežnikom lahko izbirno določite vrata, ki jih ločite z dvopičjem. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n<li><code>Implementation</code> : Določa izvedbo ponudnika notranje zbirke podatkov, ki bo uporabljena. Veljavni vrednosti sta: &#187;IBM&#171; in &#187;Microsoft&#171;.</li>\r\n<li><code>BinaryCodePage</code> : Številka za CCSID (identifikator nabora kodiranih znakov) za dekodiranje dvojiških podatkov Db2 FOR BIT v znakovne nize. Velja za izvedbo = &#187;Microsoft&#171;. Nastavite na 0, če želite onemogočiti pretvorbo (privzeta nastavitev). Nastavite na 1, če želite pretvoriti na podlagi kodiranja zbirke podatkov. Nastavite drugo številko CCSID, če želite pretvoriti v kodiranje aplikacije.</li>\r\n<li><code>PackageCollection</code> : Določa vrednost niza za zbirko paketov (privzeta vrednost je &#187;NULLID&#171;), ki omogoči uporabo paketov v skupni rabi, potrebnih za obdelavo stavkov SQL. Velja le, če je možnost &#187;Implementation&#171; nastavljena na &#187;Microsoft&#171;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Določa, ali je povezava vzpostavljena prek prehoda Db2 Connect. Velja za izvajanje = &#187;Microsoft&#171;.</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...] ali [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Pridobi nabor podatkov iz storitve Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Vrne tabelo, ki vsebuje lastnosti in vsebino zbirk dvojiških podatkov, najdenih v določenem vsebniku iz trezorja shrambe Azure.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje vrstico za vsako datoteko zbirke dvojiških podatkov, najdeno v URL-ju vsebnika, <code>account</code>, iz trezorja shrambe Azure. Vsaka vrstica vsebuje lastnosti datoteke in povezavo do vsebine.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Vrne tabelo, ki vsebuje rezultate zagona navedenih izbirnikov CSS v navedenem HTML-ju.",
        "Documentation.LongDescription": "Vrne tabelo, ki vsebuje rezultate zagona navedenih izbirnikov CSS v navedenem <code>html</code>. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Dostop do podatkov",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabelo iz vzorca besedilne vrednosti HTML.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Izvleče vse oznake HREF iz vzorca besedilne vrednosti HTML.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Vrne tabelo s tabelami in pogledi SQL, ki so na voljo v zbirki podatkov Informix.",
        "Documentation.LongDescription": "Vrne tabelo s tabelami in pogledi SQL, ki so na voljo v zbirki podatkov Informix v strežniku <code>server</code> v primerku zbirke podatkov z imenom <code>database</code>. S strežnikom lahko izbirno določite vrata, ki jih ločite z dvopičjem. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...] ali [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Vrne tabelo s podrobnostmi možnih strank.",
        "Documentation.LongDescription": "Pokliče končno točko vmesnika REST API za Marketo na naslovu <code>url</code>/rest/v1/leads.json. Vrnjene so vse možne stranke na seznamu <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Prikaže podrobnosti za tri možne stranke",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Tabela s podrobnostmi o navedenih možnih strankah"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Vnesite URL končne točke vmesnika API REST za Marketo, ki je povezan z vašim računom.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki programa Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Vrne tabelo tabel, pogledov in shranjenih skalarnih funkcij SQL, ki so na voljo v zbirki podatkov MySQL.",
        "Documentation.LongDescription": "Vrne tabelo s tabelami, pogledi in shranjenimi skalarnimi funkcijami SQL, ki so na voljo v zbirki podatkov MySQL v strežniku <code>server</code> v primerku zbirke podatkov z imenom <code>database</code>. S strežnikom lahko izbirno določite vrata, ki jih ločite z dvopičjem. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>Encoding</code> : Vrednost TextEncoding, ki določa nabor znakov, uporabljenih za vseh poizvedb, ki so poslane v strežnik (privzeta je ničelna vrednost).</li>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Logična vrednost (true/false), ki določa, ali bodo stolpci &#187;tinyint&#171; v strežniku obravnavani kot logične vrednosti. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>OldGuids</code> : Logična vrednost (true/false), ki določa, ali bodo stolpci &#187;char(36) (false)&#171; oz. stolpci &#187;binary(16) (true)&#171; obravnavani kot GUID-ji. Privzeta vrednost je &#187;false&#171;.</li>\r\n<li><code>ReturnSingleDatabase</code> : Logična vrednost (true/false), ki nastavi, ali bodo vrnjene vse tabele vseh zbirk podatkov (če je vrednost &#187;false&#171;) oziroma tabele in pogledi določene zbirke podatkov (če je vrednost &#187;true&#171;). Privzeta vrednost je &#187;false&#171;.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...] ali [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Uvozite podatke iz zbirke podatkov storitve IBM Netezza.",
        "Documentation.LongDescription": "\r\nVrne tabelo, v kateri so navedeni projekti, pogledi in shranjene funkcije v zbirki podatkov strežnika Netezza Server <code>database</code> v strežniku <code>server</code>. S strežnikom lahko izbirno navedete vrata, ki jih morate ločiti z dvopičjem. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je »true«)</li>\r\n        <li><code>HierarchicalNavigation</code>: logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je »false«)</li>\r\n        <li><code>ConnectionTimeout</code>: trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n        <li><code>CommandTimeout</code>: trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>NormalizeDatabaseName</code>: logična vrednost (true/false), ki nastavi, ali je treba ime zbirke podatkov normalizirati v velike črke ali jo razlagati dobesedno (privzeta vrednost je »true«).</li>\r\n</ul>\r\nParameter zapisa je naveden kot [možnost1 = vrednost1, možnost2 = vrednost2 ...].",
        "Documentation.Examples": [
          {
            "Description": "Prikažite seznam tabel v projektu storitve IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Vrne rezultat izvajajoče se izvorne poizvedbe v viru podatkov ODBC.",
        "Documentation.LongDescription": "Vrne rezultat izvajajoče se poizvedbe <code>query</code> z nizom povezave <code>connectionString</code>, ki uporablja ODBC. <code>connectionString</code> je lahko besedilo ali zapis s pari vrednosti lastnosti. Vrednosti lastnosti so lahko besedilo ali številka. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je 15 sekund.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logična vrednost (true/false), ki določa, ali je treba za preverjanje pristnosti sistema Windows ustvariti možnosti niza povezave, ki so združljive s strežnikom SQL Server. Privzeta vrednost je &#187;true&#171;.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pridobite rezultat zagona preproste poizvedbe v navedenem nizu povezave.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Vrne rezultat izvajajoče se izvorne poizvedbe v viru podatkov OLE DB.",
        "Documentation.LongDescription": "Vrne rezultat izvajajoče se poizvedbe <code>query</code> z nizom povezave <code>connectionString</code>, ki uporablja OLE DB. <code>connectionString</code> je lahko besedilo ali zapis s pari vrednosti lastnosti. Vrednosti lastnosti so lahko besedilo ali številka. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logična vrednost (true/false), ki določa, ali je treba za preverjanje pristnosti sistema Windows ustvariti možnosti niza povezave, ki so združljive s strežnikom SQL Server. Privzeta vrednost je &#187;true&#171;.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Vrne tabelo tabel in pogledov SQL, ki so na voljo v zbirki podatkov PostgreSQL.",
        "Documentation.LongDescription": "Vrne tabelo tabel in pogledov SQL, ki so na voljo v zbirki podatkov PostgreSQL v strežniku <code>server</code> v primerku zbirke podatkov z imenom <code>database</code>. S strežnikom lahko izbirno določite vrata, ki jih ločite z dvopičjem. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...] ali [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Uvozite podatke iz podatkovnega skladišča Snowflake Computing.",
        "Documentation.LongDescription": "Vrne tabelo s seznamom tabel v <code>podatkovnem skladišču</code> Snowflake Computing, ki je v <code>strežniku</code>. Določite lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n<ul>\r\n<li><code>Role</code>: besedilna vrednost, ki bo uporabljena kot ime vloge za povezavo.</li>\r\n<li><code>CreateNavigationProperties</code>: logična vrednost (true/false), ki nastavi, ali bodo za vrnjene vrednosti ustvarjenje lastnosti krmarjenja (privzeta vrednost je »true«).</li>\r\n<li><code>ConnectionTimeout</code>: koliko sekund je treba počakati na odzive omrežja iz storitve Snowflake.</li>\r\n<li><code>CommandTimeout</code>: koliko sekund je treba počakati na izvedbo poizvedbe.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam tabel v podatkovnem skladišču Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Vrne tabelo, v kateri so navedene tabele v določeni gruči Spark.",
        "Documentation.LongDescription": "Vrne tabelo, v kateri so navedene tabele v določeni gruči Spark <code>host</code> in pri tem uporabi <code>protocol</code>.  Veljavni protokoli so:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Navedite tabele v primerku storitve Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Vrne tabelo tabel, pogledov in shranjenih skalarnih funkcij SQL, ki so na voljo v zbirki podatkov SQL Server.",
        "Documentation.LongDescription": "Vrne tabelo s tabelami, pogledi in shranjenimi skalarnimi funkcijami SQL, ki so na voljo v zbirki podatkov strežnika SQL Server <code>database</code> v strežniku <code>server</code>. S strežnikom lahko izbirno določite vrata, ki jih ločite z dvopičjem ali vejico. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Številka, s katero nastavite vrednost stavka poizvedbe &#187;maxdop&#171; v ustvarjeni poizvedbi strežnika SQL.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n<li><code>MultiSubnetFailover</code> : Logična vrednost (true/false), ki nastavi vrednost lastnosti &#187;MultiSubnetFailover&#171; v nizu povezave (privzeta vrednost je &#187;false&#171;).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logična vrednost (true/false), ki poskusi pregibati pretvorbe vrste, če je &#187;true&#171;. Ta funkcija morda ne bo uspela, zato morda ne bo uspela celotna poizvedba. Ni priporočeno za splošno uporabo.</li>\r\n<li><code>ContextInfo</code> : Dvojiška vrednost, uporabljena za nastavitev lastnosti CONTEXT_INFO pred zagonom posameznega ukaza.</li>\r\n<li><code>OmitSRID</code> : Logična vrednost (true/false), ki izpusti SRID pri ustvarjanju dobro znanega besedila iz vrst geometrije in geografije, če je true.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Logična vrednost (true/false). Če je &#187;true&#171;, omogoča pregibanje poizvedb zbirke podatkov v istem strežniku. Privzeta vrednost je &#187;false&#171;.</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...] ali [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Vrne tabelo tabel in pogledov SQL, ki so na voljo v zbirki podatkov Sybase.",
        "Documentation.LongDescription": "Vrne tabelo tabel in pogledov SQL, ki so na voljo v zbirki podatkov Sybase v strežniku <code>server</code> v primerku zbirke podatkov z imenom <code>database</code>. S strežnikom lahko izbirno določite vrata, ki jih ločite z dvopičjem. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;true&#171;).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ki se uporablja za ustvarjanje imen lastnosti krmarjenja.</li>\r\n<li><code>Query</code> : Izvorna poizvedba SQL, uporabljena za pridobitev podatkov. Če poizvedba pridobi več naborov rezultatov, bo vrnjen samo prvi nabor.</li>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>ConnectionTimeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n</ul>\r\n\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...] ali [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Doda stolpec z eksplicitnimi vrednostmi položajev.",
        "Documentation.LongDescription": "Doda stolpec z imenom <code>newColumnName</code> v <code>table</code> z eksplicitnimi vrednostmi položajev.\r\n    Izbirna vrednost <code>initialValue</code> je začetna vrednost indeksa. Izbirna vrednost <code>increment</code> določa, za koliko se poveča vsaka vrednost indeksa.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodajte stolpec indeksa z imenom »Indeks« v tabelo.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "V tabelo dodajte stolpec indeksa z imenom »Indeks«, ki se začne z vrednostjo 10 in povečuje za 5.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Za navedeni stolpec seznamov v tabeli ustvarite kopijo vrstice za vsako vrednost na seznamu.",
        "Documentation.LongDescription": "Za navedeni <code>table</code>, kjer je <code>column</code> seznam vrednosti, razdeli seznam v vrstico za vsako vrednost. Vrednosti v drugih stolpcih so podvojene v vsaki novi vrstici, ki je ustvarjena.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Razdelite stolpec seznama [Ime] v tabeli.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Razširi vrednost prejšnje celice v celice z vrednostjo »null« pod stolpcem.",
        "Documentation.LongDescription": "Vrne tabelo iz navedene <code>table</code>, kjer se vrednost prejšnje celice razširi v spodnje celice z vrednostjo »null« v navedeni <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vrnite tabelo, v kateri so vrednosti »null« v stolpcu [Mesto] dopolnjene z vrednostjo nad njimi iz tabele.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Razširi vrednost celice v celice z vrednostjo »null« nad stolpcem.",
        "Documentation.LongDescription": "Vrne tabelo iz navedene <code>table</code>, kjer se vrednost naslednje celice razširi v celice z vrednostjo »null« zgoraj v navedeni <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vrnite tabelo, v kateri so vrednosti »null« v stolpcu [Stolpec2] dopolnjene z vrednostjo pod njimi iz tabele.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Vrne vse vrstice, ki vsebujejo dano besedilo v tabeli.",
        "Documentation.LongDescription": "Vrne vrstice v tabeli <code>table</code>, ki vsebujejo besedilo <code>text</code>. Če besedila ni mogoče najti, je vrnjena prazna tabela.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrstice v tabeli, ki vsebujejo »Bob«.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Vrne prvih »število« vrstic, ki so navedene.",
        "Documentation.LongDescription": "Vrne prve vrstice tabele <code>table</code>, odvisno od vrednosti <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Če je <code>countOrCondition</code> število, bo vrnjenih toliko vrstic (z začetkom na vrhu). </li>\r\n    <li> Če je <code>countOrCondition</code> pogoj, bodo vrnjene vrstice, ki izpolnjujejo pogoj, dokler določena vrstica ne izpolnjuje pogoja.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite prvi dve vrstici tabele.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Poiščite prve vrstice, kjer je [a] > 0 v tabeli.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Vrne tabelo, ki je rezultat združitve nabora tabel, razdeljenih na particije.",
        "Documentation.LongDescription": "Vrne tabelo, ki je nastala zaradi združitve nabora razdeljenih tabel, <code>partitions</code>. <code>partitionColumn</code> predstavlja ime stolpca, ki ga boste dodali. Vrsta stolpca je privzeto nastavljena na <code>poljubno</code>, vendar jo lahko določite s/z <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrsto elementa s seznama <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Vrne zadnje navedeno število vrstic.",
        "Documentation.LongDescription": "Vrne zadnje vrstice iz tabele <code>table</code>, odvisno od vrednosti <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Če je <code>countOrCondition</code> število, bo vrnjenih toliko vrstic z začetkom na položaju (konec – <code>countOrCondition</code>). </li>\r\n    <li> Če je <code>countOrCondition</code> pogoj, bodo v naraščajočem vrstnem redu vrnjene vrstice, ki izpolnjujejo pogoj, dokler določena vrstica ne izpolnjuje pogoja.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite zadnji dve vrstici tabele.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Poiščite zadnje vrstice v tabeli, kjer je [a] > 0.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Vrne tabelo, v kateri je pred vsemi stolpci navedeno dano besedilo.",
        "Documentation.LongDescription": "Vrne tabelo, v kateri sta pred imeni vseh stolpcev iz <code>table</code> navedena dano besedilo <code>prefix</code> in pika v obliki <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pred stolpci v tabeli navedite »MojaTabela«.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Vrne vrstice z začetkom v navedenem odmiku.",
        "Documentation.LongDescription": "Vrne vrstice iz tabele <code>table</code> z začetkom v navedenem odmiku <code>offset</code>. Izbirni parameter <code>count</code> določa, koliko vrstic bo vrnjenih. Privzeto so vrnjene vse vrstice po odmiku.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vrnite vse vrstice z začetkom v odmiku 1 v tabeli.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Vrnite eno vrstico z začetkom v odmiku 1 v tabeli.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Odstrani navedene stolpce.",
        "Documentation.LongDescription": "Odstrani navedeni stolpec <code>columns</code> iz podane tabele <code>table</code>.\r\n    Če izbrani stolpec ne obstaja, se prikaže sporočilo o napaki, razen če izbirni parameter <code>missingField</code> določa nadomestno vedenje (na primer <code>MissingField.UseNull</code> ali <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Odstranite stolpec [Telefon] iz tabele.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Poskusite odstraniti neobstoječ stolpec iz tabele.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Odstrani vse pojavitve navedenih vrstic iz tabele.",
        "Documentation.LongDescription": "Odstrani vse pojavitve navedene vrstice <code>rows</code> iz tabele <code>table</code>.\r\n    Določite lahko izbirni parameter <code>equationCriteria</code> za nadzor primerjave med vrsticami tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Odstranite vrstice, kjer je [a = 1], iz tabele <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Odstrani navedeno število vrstic.",
        "Documentation.LongDescription": "Odstrani <code>count</code> vrstic na začetku tabele <code>table</code>, z začetkom v vrstici <code>offset</code>, ki je navedena. Če parameter <code>count</code> ni podan, se uporabi privzeto število 1. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odstranite prvo vrstico iz tabele.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odstranite vrstico na mestu 1 iz tabele.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odstranite dve vrstici z začetkom na mestu 1 iz tabele.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Uporabi preimenovanja v obliki {old, new}.",
        "Documentation.LongDescription": "Preimenuje stolpce v tabeli <code>table</code>, kot je navedeno. Postopek zamenjave <code>renames</code> je sestavljen iz seznama dveh vrednosti – starega imena stolpca in novega imena stolpca, ki sta podana na seznamu.\r\n    Če stolpec ne obstaja, pride do izjeme, razen če izbirni parameter <code>missingField</code> določa nadomestno vrednost (npr. <code>MissingField.UseNull</code> ali <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte ime stolpca »ŠtStranke« z imenom »IDStranke« v tabeli.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamenjajte ime stolpca »ŠtStranke« z imenom »IDStranke« in »TelefonskaŠt« z »Telefon« v tabeli.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamenjajte ime stolpca »NovStol« z imenom »NovStolpec« v tabeli in prezrite, če stolpec ne obstaja.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Vrne tabelo s stolpci v navedenem vrstnem redu.",
        "Documentation.LongDescription": "Vrne tabelo iz vnosa <code>table</code> s stolpci v vrstnem redu, ki ga določa <code>columnOrder</code>. Stolpci, ki niso navedeni na seznamu, ne bodo razvrščeni.\r\n     Če stolpec ne obstaja, pride do izjeme, razen če izbirni parameter <code>missingField</code> določa nadomestno vrednost (npr. <code>MissingField.UseNull</code> ali <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte vrstni red stolpcev [Telefon] in [Ime] v tabeli.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamenjajte vrstni red stolpcev [Telefon] in [Naslov] ali uporabite »MissingField.Ignore« v tabeli. Tabelo ne bo spremenjena, ker stolpec [Naslov] ne obstaja.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Ponovi vrstice tabele tolikokrat, kot je navedeno.",
        "Documentation.LongDescription": "Vrne tabelo, v kateri se vrstice iz vnosa <code>table</code> ponovijo <code>count</code>-krat, kot je navedeno.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Dvakrat ponovite vrstice v tabeli.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "V navedenih stolpcih zamenja vrednosti z napakami z ustrezno navedeno vrednostjo.",
        "Documentation.LongDescription": "V navedenih stolpcih tabele <code>table</code> zamenja vrednosti z napakami z novimi vrednostmi seznama <code>errorReplacement</code>. Oblika seznama je {{column1, value1}, …}. Za stolpec imate lahko le eno vrednost zamenjave; če stolpec določite večkrat, bo prišlo do napake.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vrednost napake zamenjajte z besedo »svet« v tabeli.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Vrednost napake v stolpcu A zamenjajte z besedo »živijo« in v stolpcu B z besedo »svet« v tabeli.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Zamenja ključe navedene tabela.",
        "Documentation.LongDescription": "Zamenja ključe navedene tabela.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte obstoječe ključe tabela.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Zamenja vse navedene vrstice s podanimi vrsticami.",
        "Documentation.LongDescription": "Zamenja vse navedene vrstice v tabeli <code>table</code> s podanimi vrsticami. Vrstice, ki bodo zamenjane, in nadomestne vrstice so navedene v <code>replacements</code> z obliko {old, new}.\r\n    Določite lahko izbirni parameter <code>equationCriteria</code> za nadzor primerjave med vrsticami tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte vrstici [a = 1, b = 2] in [a = 2, b = 3] z vrstico [a = -1, b = -2],[a = -2, b = -3] v tabeli.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Vrne tabelo z le navedenimi stolpci.",
        "Documentation.LongDescription": "Vrne tabelo <code>table</code>, ki vsebuje le navedene stolpce <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: podana tabela.</li>\r\n       <li><code>columns</code>: seznam stolpcev iz tabele <code>table</code>, ki bo vrnjena. Stolpci v vrnjeni tabeli so v vrstnem redu, ki je naveden v <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(izbirno)</i> Kaj narediti, če stolpec ne obstaja? Primer: <code>MissingField.UseNull</code> ali <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vključite samo stolpec [Ime].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Vključite samo stolpca [IDStranke] in [Ime].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Če vključeni stolpec ne obstaja, je privzeti rezultat napaka.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Če vključeni stolpec ne obstaja, možnost <code>MissingField.UseNull</code> ustvari stolpec z ničelnimi vrednostmi.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Izbere vrstice, ki ustrezajo funkciji »condition«.",
        "Documentation.LongDescription": "Vrne tabelo vrstic iz <code>table</code>, ki ustreza izboru <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Izberite vrstice v tabeli, v katerih so vrednosti v stolpcu [IDStranke] večje od 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Izberite vrstice v tabeli, v katerih imena ne vsebujejo črke »B«.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Razvrsti tabelo z enim ali več imeni stolpcev in s kriteriji primerjave.",
        "Documentation.LongDescription": "Razvrsti tabelo <code>table</code> s seznamom enega ali več imen stolpcev in z izbirnim parametrom <code>comparisonCriteria</code> v obliki { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Razvrstite tabelo po stolpcu »IDNaročila«.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Razvrstite tabelo po stolpcu »IDNaročila« v padajočem vrstnem redu.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Razvrstite tabelo po stolpcih »IDStranke« in »IDNaročila«, pri čemer je stolpec »IDStranke« v naraščajočem vrstnem redu.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Pretvori imena stolpcev z navedeno funkcijo.",
        "Documentation.LongDescription": "Pretvori imena stolpcev z navedeno funkcijo <code>nameGenerator</code>. Veljavne možnosti:\r\n    <div>\r\n      <code>MaxLength</code> določa največjo dolžino imen stolpcev. Če je rezultat navedene funkcije daljše ime stolpca, bo dolgo ime obrezano.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> se uporablja za nadzor primerjave pri ustvarjanju novih imen stolpcev. S primerjalniki je mogoče določiti primerjave, ki ne razlikujejo med velikimi in malimi črkami oziroma upoštevajo kulturo ali območne nastavitve.\r\n    </div>\r\n    <div>\r\n      Za jezik formule so na voljo ti vgrajeni primerjalniki:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: uporablja se za natančno primerjavo vrstilnih števnikov</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: uporablja se za natančno primerjavo vrstilnih števnikov, ki ne razlikuje med velikimi in malimi črkami</li>\r\n      <li> <code>Comparer.FromCulture</code>: uporablja se za primerjavo, ki upošteva kulturo</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Odstrani znak <code>#(tab)</code> iz imen stolpcev",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Pretvorite imena stolpcev, da ustvarite imena, ki vsebujejo 6 znakov in ne razlikujejo med velikimi in malimi črkami.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Uporabi pretvorbe vrste v obliki { column, type } z določeno kulturo.",
        "Documentation.LongDescription": "Vrne tabelo iz vnosa <code>table</code> tako, da uporabi postopek pretvorbe za stolpce, navedene v parametru <code>typeTransformations</code> (v obliki zapisa { column name, type name}), z določeno kulturo v izbirnem parametru <code>culture</code> (na primer »sl-SI«).\r\n    Če stolpec ne obstaja, pride do izjeme.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite številske vrednosti v stolpcu [a] v besedilne vrednosti iz tabele <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Preoblikuje vrednosti enega ali več stolpcev.",
        "Documentation.LongDescription": "Preoblikuje <code>table</code> tako, da uporabi postopek posameznega stolpca, navedenega v <code>transformOperations</code> (oblika zapisa je { column name, transformation } ali { column name, transformation, new column type }).\r\n    Če je določen element <code>defaultTransformation</code>, je ta uporabljen za vse stolpce, ki niso navedeni v <code>transformOperations</code>.\r\n    Če stolpec, ki je naveden v <code>transformOperations</code>, ne obstaja, je ustvarjena izjema, razen če izbirni parameter <code>missingField</code> določa nadomestno vrednost (na primer <code>MissingField.UseNull</code> ali <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite besedilne vrednosti v stolpcu [A] v številske vrednosti, številske vrednosti v stolpcu [B] pa v besedilne vrednosti.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Pretvorite številske vrednosti v manjkajočem stolpcu [X] v besedilne vrednosti in pri tem prezrite stolpce, ki ne obstajajo.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Pretvorite številske vrednosti v manjkajočem stolpcu [X] v besedilne vrednosti in pri tem privzeto prikažite vrednost »null« za stolpce, ki ne obstajajo.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Povečajte številske vrednosti v stolpcu [B] in jih pretvorite v besedilne vrednosti, vse druge stolpce pa pretvorite v številke.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Ustvari ali podaljša tabelo z uporabniško določenimi rutinami za obravnavo za postopke poizvedbe in dejanja.",
        "Documentation.LongDescription": "<p>Vrne pogled za <code>table</code>, v katerem so funkcije, določene v <code>handlers</code>, uporabljene namesto privzetega delovanja postopka, ko je za pogled uporabljen postopek.</p>\r\n<p>Če je na voljo <code>table</code>, so vse funkcije rutine izbirne. Če <code>table</code> ni na voljo, sta zahtevani funkciji rutine <code>GetType</code> in <code>GetRows</code>. Če funkcija rutine ni navedena za postopek, je privzeto delovanje postopka uporabljeno za <code>table</code> (razen v primeru funkcije <code>GetExpression</code>).</p>\r\n<p>Funkcije rutine za obravnavo morajo vrniti vrednost, ki je semantično enakovredna rezultatu uporabe postopka za <code>table</code> (ali nastalega pogleda v primeru funkcije <code>GetExpression</code>).</p>\r\n<p>Če pri funkciji rutine za obravnavo pride do napake, je za pogled uporabljeno privzeto delovanja postopka.</p>\r\n<p>Parameter <code>Table.View</code> lahko uporabite za izvedbo zlaganja v viru podatkov – prevod poizvedb M v poizvedbe, značilne za vir (npr. za ustvarjanje izjav T-SQL iz poizvedb M).</p>\r\n<p>Popoln opis funkcije <code>Table.View</code> najdete v objavljeni dokumentaciji za povezovalnik po meri Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite osnovni pogled, ki ne zahteva dostopa do vrstic, da bi bilo mogoče določiti vrsto ali število vrstic.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Vnesite organizacijo in imena projektov.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (samo table)",
        "Documentation.LongDescription": "Vrne tabelo pogledov storitve Analytics, ki jih zagotavlja storitev Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Uvozite podatke iz platforme Vertica",
        "Documentation.LongDescription": "Vrne tabelo shem, ki so na voljo v strežniku, poimenovanem s parametrom <code>server</code> v zbirki podatkov, poimenovani s parametrom <code>database</code>.\r\nNavedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n    <li><code>CommandTimeout </code>: trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je odvisna od gonilnika.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Navedite tabele v platformi Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Vrne tabelo z vsebino poročila iz storitve Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Pokliče navedeno končno točko za poročanje v storitvi Webtrends in vrne vse podatke v obliki tabele.",
        "Documentation.Examples": [
          {
            "Description": "Pokliče končno točko poročila o obiskovalcih v storitvi Webtrends za podatke v zadnjih 30 dneh",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Tabela s podatki obiskovalcev"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Vrne seznam domen storitve Active Directory v istem gozdu, kot je določena domena, ali iz trenutne domene računalnika, če nobena ni določena.",
        "Documentation.LongDescription": "Vrne seznam domen storitve Active Directory v istem gozdu, kot je določena domena, ali iz trenutne domene računalnika, če nobena ni določena.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Vrne rezultat izvajajoče se izvorne poizvedbe v viru podatkov ADO.NET.",
        "Documentation.LongDescription": "Vrne rezultat izvajajoče se poizvedbe <code>query</code> z nizom povezave <code>connectionString</code>, ki uporablja ponudnika ADO.NET <code>providerName</code>. <code>connectionString</code> je lahko besedilo ali zapis s pari vrednosti lastnosti. Vrednosti lastnosti so lahko besedilo ali številka. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je deset minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logična vrednost (true/false), ki določa, ali je treba za preverjanje pristnosti sistema Windows ustvariti možnosti niza povezave, ki so združljive s strežnikom SQL Server. Privzeta vrednost je &#187;true&#171;.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Vrne zbirke poročil iz storitve Adobe Analytics.",
        "Documentation.LongDescription": "Vrne tabelo večdimenzionalnih paketov iz storitve Adobe Analytics. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Logična vrednost (true/false), ki nastavi, ali bodo tabele prikazane tako, da bodo združene v skupine po njihovih imenih sheme (privzeta vrednost je &#187;false&#171;).</li>\r\n<li><code>MaxRetryCount</code> : Število ponovnih poskusov, ki bodo izvedeni pri pozivanju za rezultat poizvedbe. Privzeta vrednost je 120.</li>\r\n<li><code>RetryInterval</code> : Čas med ponovnimi poskusi. Privzeta vrednost je 1 sekunda.</li>\r\n<li><code>Implementation</code> : Navaja različico API-ja storitve Adobe Analytics. Veljavne vrednosti so: &#187;2.0&#171;. Privzeta nastavitev uporablja različico API-ja 1.4.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Uvozite podatke iz storitve Hive LLAP",
        "Documentation.LongDescription": "\r\nVrne seznam tabel iz storitve Hive LLAP, ki so določene s parametrom <code>database</code> v parametru Hive LLAP <code>server</code> z uporabo izbranega parametra <code>protocol</code>. S strežnikom lahko izbirno navedete številko vrat, ki jo ločite z dvopičjem. Protokol ThriftTransport je vrsta oštevilčenega protokola z vrednostmi »Standardno« in »HTTP«. Navedete lahko izbirni parameter <code>možnosti</code>, s katerim nadzorujete te možnosti:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je odvisna od gonilnika.</li>\r\n        <li><code>CommandTimeout</code>: trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana. Privzeta vrednost je odvisna od gonilnika.</li>\r\n</ul>\r\n Parameter <code>options</code> je naveden kot [možnost1 = vrednost1, možnost2 = vrednost2 ...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Denimo, da je danes 15. 6. 2017 ter da želite pridobiti podatke povzetkov med 1. 5. 2017 in 15. 6. 2017",
            "Code": "let\r\n          enrollmentNumber=\"100\",\r\n          optionalParameters=[numberOfMonth=1],\r\n          result= AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkcija vrne podatke povzetkov med 1. 5. 2017- in 15. 6. 2017"
          },
          {
            "Description": "Denimo, da je danes 15. 6. 2017 in da želite pridobiti podatke povzetkov za april 2017.",
            "Code": "let\r\n          enrollmentNumber=\"100\",\r\n          optionalParameters=[startBillingDataWindow=\"-2\", endBillingDataWindow=\"-1\"],\r\n          result= AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkcija vrne podatke med 1. 4. 2017 in 30. 4. 2017"
          },
          {
            "Description": "Denimo, da je danes 15. 6. 2017 in da želite pridobiti podatke povzetkov od aprila 2017 do današnjega dne.",
            "Code": "let\r\n          enrollmentNumber=\"100\",\r\n          optionalParameters=[startBillingDataWindow=\"-2\", endBillingDataWindow=\"0\", dataType=\"Summaries\"],\r\n          result=AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkcija vrne podatke med 1. 4. 2017 in 15. 6. 2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Upravljanje stroškov za Azure",
        "Documentation.Description": "Upravljanje stroškov za Azure",
        "Documentation.DisplayName": "Upravljanje stroškov za Azure",
        "Documentation.LongDescription": "Upravljanje stroškov za Azure",
        "Documentation.Name": "Upravljanje stroškov za Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Vnesite organizacijo in imena projektov.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Storitve Azure DevOps",
        "Documentation.LongDescription": "Vrne tabelo virov OData, ki jih zagotavlja storitev Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Ustvarite povezavo do svojega primerka storitve Dataverse (Dynamics 365 in PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Združi navedeno tabelo dimenzij v kontekst filtra kocke in spremeni dimenzionalno granularnost konteksta filtra z razširjanjem navedenega nabora dimenzionalnih atributov.",
        "Documentation.LongDescription": "Združi navedeno tabelo dimenzij (<code>dimensionSelector</code>) v kontekst filtra kocke (<code>cube</code>) in spremeni dimenzionalno granularnost konteksta filtra z razširjanjem navedenega nabora (<code>attributeNames</code>) dimenzionalnih atributov. Dimenzionalni atributi se dodajo v tabelarni pogled s stolpci, poimenovanimi <code>newColumnNames</code> ali <code>attributeNames</code>, če ime ni navedeno.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Kocki doda stolpec z rezultati meritve, uporabljene v kontekstu vrstice za vsako vrstico.",
        "Documentation.LongDescription": "<code>cube</code> doda stolpec z imenom <code>column</code> z rezultati meritve (<code>measureSelector</code>), uporabljene v kontekstu vrstice za vsako vrstico. Na uporabo meritve vplivajo spremembe dimenzionalne granularnosti in uporaba rezin. Vrednosti meritve bodo prilagojene po izvedbi določenih postopkov kocke.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Vnesite svoje okolje in podjetje za Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki storitve Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Vnesite svoje okolje in podjetje za Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki storitve Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Vnesite svoje okolje in podjetje za Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki storitve Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Vnesite svoje okolje in podjetje za Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vrne tabelo z ustreznimi podatki storitve Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Vrne vsebino trenutnega Excelovega delovnega zvezka.",
        "Documentation.LongDescription": "Vrne vsebino trenutnega Excelovega delovnega zvezka. Vrne tabele, imenovane obsege in dinamična polja strežnikov. Za razliko od <code>Excel.Workbook</code> ne vrne listov.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Vrne kazalo vsebine iz računa Microsoft Exchange.",
        "Documentation.LongDescription": "Vrne kazalo vsebine iz Microsoft Exchangeevega računa <code>mailboxAddress</code>. Če parametra <code>mailboxAddress</code> ne navedete, bo uporabljen privzeti račun za poverilnice.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Skladišče",
        "Documentation.Caption": "Skladišče",
        "Documentation.Description": "Uvozi podatke iz skladišča",
        "Documentation.LongDescription": "Uvozi podatke iz skladišča"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Vrne račune storitve Google Analytics.",
        "Documentation.LongDescription": "Vrne račune storitve Google Analytics, ki so dostopni s trenutno poverilnico.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Uvozite podatke iz zbirke podatkov storitve Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Vrne tabelo, v kateri so navedeni projekti, ki so na voljo v storitvi Google BigQuery. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom. Privzeta vrednost je vrednost izteka povezave z ODBC.</li>\r\n        <li><code>CommandTimeout</code>: trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana.</li>\r\n        <li><code>BillingProject</code>: ime projekta obračunavanja. Privzeta vrednost je prvi projekt, ki je na voljo.</li>\r\n        <li><code>UseStorageApi</code>: določa, ali bo za velika nabore rezultatov uporabljen vmesnik API shrambe storitve BigQuery. Privzeta vrednost je »true«, ki določa uporabo vmesnika API shrambe. Nastavite jo na »false«, če ne želite uporabiti vmesnika API shrambe.</li>\r\n      </ul>\r\n    Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2 ...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Prikaži projekte, ki so na voljo v storitvi Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Skladišče Lakehouse",
        "Documentation.Caption": "Uvozite podatke iz skladišča Lakehouse",
        "Documentation.Description": "Uvozite podatke iz skladišča Lakehouse",
        "Documentation.LongDescription": "Ustvarite povezavo do vseh skladišč Lakehouse, do katerih lahko dostopate, in izberite entitete, ki se jih želite ogledati."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Vrne tabelo s ključnimi podatki storitve MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Vrne tabelo s ključnimi podatki storitve MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabelo s ključnimi podatki storitve MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Tabela s ključnimi podatki storitve MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Vrne tabelo z dejavnostmi možne stranke.",
        "Documentation.LongDescription": "Pokliče končno točko vmesnika REST API za Marketo na naslovu <code>url</code>/rest/v1/activities.json. Vrnjene so vse dejavnosti na seznamu <code>activityIds</code>, ki so bile izvedene od datuma <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Prikaže tabelo dejavnosti »Obisk spletne strani« od 1. novembra 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Tabela s podrobnostmi vseh dejavnosti »Obisk spletne strani« od 1. novembra"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Podatkovni tokovi storitve Power BI (podedovano)",
        "Documentation.Caption": "Uvozite podatke iz podatkovnega toka storitve Power BI",
        "Documentation.LongDescription": "Ustvarite povezavo do vseh podatkovnih tokov storitve Power BI, do katerih lahko dostopate, in izberite entitete, ki se jih želite ogledati."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Datamarts",
        "Documentation.Caption": "Datamarts",
        "Documentation.Description": "Uvozi podatke iz storitve Datamarts",
        "Documentation.LongDescription": "Uvozi podatke iz storitve Datamarts"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Podatkovni tokovi",
        "Documentation.Caption": "Uvozite podatke iz vira podatkovnega toka",
        "Documentation.Description": "Uvozite podatke iz vira podatkovnega toka",
        "Documentation.LongDescription": "Ustvarite povezavo do vseh podatkovnih tokov storitve, do katerih lahko dostopate, in izberite entitete, ki se jih želite ogledati."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Uvozite podatke iz storitve QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Vrne tabelo, v kateri so navedene tabele, ki so na voljo v storitvi QuickBooks Online. Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim nadzorujete te možnosti:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: trajanje, ki nadzoruje čas čakanja, preden je preklican poskus vzpostavitve povezave s strežnikom.</li>\r\n            <li><code>CommandTimeout</code>: trajanje, ki nadzoruje, koliko časa se lahko izvaja poizvedba na strani strežnika, preden je preklicana.</li>\r\n          </ul>\r\n        Parameter zapisa je na primer naveden kot [možnost1 = vrednost1, možnost2 = vrednost2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Vrne predmete iz računa Salesforce.",
        "Documentation.LongDescription": "Vrne predmete računa Salesforce, ki je naveden v poverilnicah. Račun bo vzpostavil povezavo prek navedenega okolja <code>loginUrl</code>. Če ni navedeno nobeno okolje, bo račun vzpostavil povezavo s spletnim mestom za produkcijo (https://login.salesforce.com). Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logična vrednost (true/false), ki določa, ali je treba za vrnjene vrednosti ustvariti lastnosti krmarjenja (privzeta vrednost je &#187;false&#171;).</li>\r\n<li><code>ApiVersion</code> : Različica vmesnika API storitve Salesforce, ki bo uporabljena za to poizvedbo. Če je ne navedete, bo uporabljena različica 29.0 vmesnika API.</li>\r\n<li><code>Timeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus pošiljanja zahteve strežniku. Privzeta vrednost je odvisna od vira.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Vrne poročila iz računa Salesforce.",
        "Documentation.LongDescription": "Vrne poročila računa Salesforce, ki je naveden v poverilnicah. Račun bo vzpostavil povezavo prek navedenega okolja <code>loginUrl</code>. Če ni navedeno nobeno okolje, bo račun vzpostavil povezavo s spletnim mestom za produkcijo (https://login.salesforce.com). Navedete lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Različica vmesnika API storitve Salesforce, ki bo uporabljena za to poizvedbo. Če je ne navedete, bo uporabljena različica 29.0 vmesnika API.</li>\r\n<li><code>Timeout</code> : Trajanje, ki nadzoruje čas čakanja, preden je preklican poskus pošiljanja zahteve strežniku. Privzeta vrednost je odvisna od vira.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Vrne nabore InfoCube in poizvedbe iz sistema SAP Business Warehouse, ki so združeni po lastnosti InfoArea.",
        "Documentation.LongDescription": "Vrne tabelo naborov InfoCube in poizvedb, ki so združeni po lastnosti »InfoArea«, iz primerka skladišča SAP Business Warehouse v strežniku <code>server</code> s številko sistema <code>systemNumberOrSystemId</code> ID-jem odjemalca <code>clientId</code>. Navedete lahko izbirni parameter zapisa <code>optionsOrLogonGroup</code>, s katerim nadzorujete te možnosti:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Vrne tabelo listov, poročil, map in delovnih prostorov iz vmesnika API storitve Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Vrne ugnezdeno tabelo listov, poročil, map in delovnih prostorov, ki so na voljo v vmesniku API storitve Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Vrne liste, mape, poročila in delovne prostore, ki so na voljo na zgornji ravni hierarhije storitve Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Tabela map, poročil in delovnih prostorov z zgornje ravni hierarhije storitve Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Vrne tabelo z razpoložljivo metriko iz vmesnika API v1 storitve SparkPost",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "To funkcijo lahko uporabite za pridobivanje podatkov iz določene končne točke »Metrika« vmesnika API za SparkPost v1. Pri osveževanju teh tabel ali klicanju vmesnika API za SparkPost API s tem priključkom upoštevajte, da je za vmesnik API za SparkPost določena stroga omejitev števila klicev vmesnika API. Če strežnik SparkPost vrne kodo stanja 429, ste dosegli omejitev števila klicev, zato boste pred dodatnimi klici morali počakati nekaj trenutkov. Pri izbiranju vrednosti za parameter števila dni upoštevajte, da lahko vmesnik API shrani podatke samo za 6 mesecev.",
        "Documentation.Examples": [
          {
            "Description": "Pridobi metriko dostavljivosti za »count_sent« in »count_rejected« za vse »campaign_ids«, združene v zadnjih treh dneh. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabela"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Pokliče vmesnik API za Stripe.",
        "Documentation.LongDescription": "Pokliče vmesnik API za Stripe na naslovu https://api.stripe.com/v1/<code>method</code> z zapisom <code>additionalParameters</code> kot dodatnim parametrom in seznamom pričakovanih imen stolpcev <code>ColumnNames</code>. Uporabljena je različica Stripe 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Vrne tabelo z dogodki, ustvarjenimi po 1. novembru 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Tabela z določenimi dogodki za trenutni račun Stripe"
          },
          {
            "Description": "Vrne tabelo z vsemi inventarnimi številkami (SKU)",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Tabela z vsemi inventarnimi številkami (SKU) za trenutni račun Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Vrne tabelo, kjer so navedene razpoložljive tabele in funkcije programa Stripe.",
        "Documentation.LongDescription": "Vrne tabelo, kjer so navedene razpoložljive tabele in funkcije programa Stripe."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Delovni prostor storitve Azure Synapse Analytics",
        "Documentation.Caption": "Delovni prostor storitve Azure Synapse Analytics",
        "Documentation.LongDescription": "Priključek PQ za delovni prostor storitve Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Doda stolpec z navedenim imenom. Vrednost se izračuna z določeno funkcijo izbire, pri čemer vsaka vrstica predstavlja vnos.",
        "Documentation.LongDescription": "Doda stolpec z imenom <code>newColumnName</code> v tabelo <code>table</code>. Vrednosti za stolpec se izračunajo z določeno funkcijo izbire <code>columnGenerator</code>, pri čemer vsaka vrstica predstavlja vnos.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodajte številski stolpec z imenom »SkupnaCena« v tabelo, pri čemer je vsaka vrednost vsota stolpcev [Cena] in [Dostava].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Doda nov stolpec z reprezentativnimi vrednostmi, ki so pridobljene z mehkim ujemanjem vrednosti navedenega stolpca v tabeli.",
        "Documentation.LongDescription": "Doda nov stolpec <code>newColumnName</code> v tabelo <code>table</code> z reprezentativnimi vrednostmi <code>columnName</code>. Reprezentativne vrednosti so pridobljene z mehkim ujemanjem vrednostih v tabeli <code>columnName</code> za vsako posamezno vrstico.\r\n    <p>Dodate lahko izbirni nabor <code>options</code>, da določite način primerjave stolpcev ključev. Med možnosti spadajo: \r\n    <ul>\r\n<li><code>Culture</code> : Omogoča združevanje zapisov na podlagi pravil, značilnih za kulturo. Uporabljeno je lahko katero koli veljavno ime kulture. Primer: če je možnost &#187;Kultura&#171; nastavljena na &#187;sl-SI&#171;, so zapisi združeni na podlagi slovenske kulture. Privzeta vrednost je &quot;&quot;, ki vsebuje skupine na podlagi nespremenljive angleške kulture.</li>\r\n<li><code>IgnoreCase</code> : Logična vrednost (true/false), ki omogoča združevanje ključev z razlikovanjem med velikimi in malimi črkami. Primer: če je &#187;true&#171;, je beseda &#187;Grozdje&#171; združena z besedo &#187;grozdje&#171;. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>IgnoreSpace</code> : Logična vrednost (true/false), ki omogoča kombiniranje delov besedila za iskanje skupin. Primer: če je &#187;true&#171;, je beseda &#187;Gro zdje&#171; združena z besedo &#187;Grozdje&#171;. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>SimilarityColumnName</code> : Ime stolpca, ki prikazuje podobnost med vhodno in reprezentativno vrednostjo za ta vnos. Privzeta vrednost je ničelna, ki ne doda novega stolpca za podobnosti.</li>\r\n<li><code>Threshold</code> : Število med 0,00 in 1,00, ki določa stopnjo podobnosti, pri kateri bosta dve vrednosti združeni.\r\n    Na primer, &#187;grozdje&#171; in &#187;grodje&#171; (brez črke &#187;z&#171;) sta združeni le, če je ta možnost nastavljena na manj kot 0,90.\r\n    Prag 1,00 omogoča le natančna ujemanja.\r\n    (Upoštevajte, da se pri nejasnem &#187;natančnem ujemanju&#171; lahko zanemarijo razlike, kot so črkovanje, besedni red in ločila.)\r\n    Privzeta vrednost je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela, ki omogoča združevanje zapisov na podlagi preslikav vrednosti po meri. Vsebovati mora stolpca &#187;Iz&#171; in &#187;V&#171;. Primer: beseda &#187;Grozdje&#171; je združena z besedo &#187;Rozine&#171;, če je v tabeli pretvorbe naveden stolpec &#187;Iz&#171;, ki vsebuje &#187;Grozdje&#171;, in stolpec &#187;V&#171;, ki vsebuje &#187;Rozine&#171;. Upoštevajte, da bo pretvorba uporabljena za vse ponovitve besedila v tabeli pretvorbe. Z zgornjo tabelo pretvorbe bo besedna zveza &#187;Grozdje je sladko&#171; združena tudi z besedno zvezo &#187;Rozine so sladke&#171;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Poiščite reprezentativne vrednosti za mesto zaposlenih.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Združi tabele v podanih stolpcih in vrne rezultat združevanja v novem stolpcu.",
        "Documentation.LongDescription": "Združi vrstice tabele <code>table1</code> z vrsticami tabele <code>table2</code> glede na enakost vrednosti stolpcev s ključem, ki jih izbereta <code>key1</code> (za <code>table1</code>) in <code>key2</code> (za <code>table2</code>). Rezultati so vneseni v stolpec z imenom <code>newColumnName</code>.\r\nTa funkcija deluje podobno kot funkcija »Table.Join« z možnostjo »JoinKind.LeftOuter«, pri čemer so rezultati združevanja predstavljeni v ugnezdeni in ne poenostavljeni obliki.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodajte združeni stolpec v ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) z imenom »price/stock« iz tabele ({[saleID = 1, price = 20], [saleID = 2, price = 10]}), združene v [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Doda ključ v dano vrsto tabele.",
        "Documentation.LongDescription": "Doda ključ v <code>table</code>, <code>columns</code> je seznam imen stolpcev, ki določajo ključ, in <code>isPrimary</code> določa, ali je ključ primarni.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tabeli dodajte primarni ključ z enim stolpcem.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Doda stolpec z razvrstitvijo enega ali več drugih stolpcev.",
        "Documentation.LongDescription": "Doda stolpec z imenom <code>newColumnName</code> k <code>table</code> z razvrstitvijo enega ali več drugih stolpcev, ki jih opisuje <code>comparisonCriteria</code>.\r\nMožnost RankKind v <code>options</code> lahko izkušeni uporabniki uporabijo za izbiro bolj specifične metode razvrstitve.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Dodajte stolpec z imenom »RevenueRank« v tabelo, ki razvrsti stolpec »Prihodek« od najvišjega do najnižjega.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Združi stolpec tabel v več stolpcev v vsebovalni tabeli.",
        "Documentation.LongDescription": "Združi tabele v <code>table</code>[<code>column</code>] v več stolpcev, ki vsebujejo združene vrednosti za tabele. <code>aggregations</code> se uporablja za določanje stolpcev s tabelami, ki bodo združene, združevalnih funkcij, s katerimi bodo ustvarjene vrednosti tabel, in imen združenih stolpcev, ki bodo ustvarjeni.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Združite stolpce tabele v <code>[t]</code> v tabeli <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> v vsoto vrednosti <code>[t.a]</code>, najmanjše in največje vrednosti <code>[t.b]</code> in števila vrednosti v <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Ohrani začetni odmik, nato pa izmenično jemlje in preskakuje naslednje vrstice.",
        "Documentation.LongDescription": "Ohrani začetni odmik, nato pa izmenično jemlje in preskakuje naslednje vrstice.\r\n    <ul>\r\n       <li><code>table</code>: vhodna tabela.</li>\r\n       <li><code>offset</code>: število vrstic, ki bodo ohranjene pred začetkom ponovitev.</li>\r\n       <li><code>skip</code>: število vrstic, ki bodo odstranjene v vsaki ponovitvi.</li>\r\n       <li><code>take</code>: število vrstic, ki bodo ohranjene v vsaki ponovitvi.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vrnite tabelo iz tabele, ki z začetkom v prvi vrstici preskoči 1 vrednost in nato obdrži 1 vrednost.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Združi navedene stolpce v nov stolpec z določeno funkcijo združitve.",
        "Documentation.LongDescription": "Združi navedene stolpce v nov stolpec z določeno funkcijo združitve.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Združite priimke in imena v nov stolpec, ločene z vejico.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Združi navedene stolpce v nov stolpec z vrednostjo zapisa, kjer vsak zapis vsebuje imena polj in vrednosti, ki ustrezajo imenom stolpcev in vrednostim stolpcev, ki so bili združeni.",
        "Documentation.LongDescription": "Združi navedene stolpce <code>table</code> v nov stolpec z vrednostjo zapisa, imenovan <code>newColumnName</code>, kjer vsak zapis vsebuje imena polj in vrednosti, ki ustrezajo imenom stolpcev in vrednostim stolpcev, ki so bile združene. Če je za <code>options</code> določen zapis, bodo morda na voljo te možnosti:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: če je naveden kot besedilo, označuje, da je treba navedeno ime stolpca obravnavati kot prikazano ime zapisa, vendar ni potrebno, da je to eden od stolpcev v samem zapisu.</li>\r\n     <li> <code>TypeName</code>: če je naveden kot besedilo, zagotovi ime logične vrste za ustvarjen zapis, ki ga je mogoče uporabiti med nalaganjem podatkov za omogočanje delovanja glede na okolje nalaganja.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Podvoji stolpec z navedenim imenom. Vrsta in vrednosti so kopirane iz izvornega stolpca.",
        "Documentation.LongDescription": "Podvojite stolpec z imenom <code>columnName</code> v tabelo <code>table</code>. Vrsta in vrednosti za stolpec <code>newColumnName</code> so kopirane iz stolpca <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Podvojite stolpec »a« v stolpec z imenom »copied column« v tabeli <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Razširi stolpec zapisov v stolpce z vsako vrednostjo.",
        "Documentation.LongDescription": "Za navedeni <code>column</code> zapisov v vhodni tabeli <code>table</code> ustvari tabelo s stolpcem za vsako polje v zapisu. Če želite, lahko navedete <code>newColumnNames</code>, da zagotovite enolična imena za stolpce v novi tabeli.\r\n    <ul>\r\n        <li><code>table</code>: izvirna tabela s stolpcem zapisa, ki bo razširjen. </li>\r\n        <li><code>column</code>: stolpec, ki bo razširjen.</li>\r\n        <li><code>fieldNames</code>: seznam polj, ki bodo razširjena v stolpce v tabeli.</li>\r\n        <li><code>newColumnNames</code>: seznam imen stolpcev za nove stolpce. Nova imena stolpcev ne smejo biti podvojena za noben stolpec v novi tabeli.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Razširite stolpec [a] v tabeli <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> v 3 stolpce »aa«, »bb« in »cc«.",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Razširi stolpec zapisov ali stolpec tabel v več stolpcev v vsebovalni tabeli.",
        "Documentation.LongDescription": "Razširi tabele v <code>table</code>[<code>column</code>] v več vrstic in stolpcev. <code>columnNames</code> se uporablja za izbiro stolpcev, ki bodo razširjeni iz notranje tabele. Navedite <code>newColumnNames</code>, da ne pride do sporov med obstoječimi in novimi stolpci.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Razširite stolpce tabele v <code>[a]</code> v tabeli <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> v 3 stolpce <code>[t.a]</code>, <code>[t.b]</code> in <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Združi vrstice v tabeli na podlagi delnega ujemanja ključev.",
        "Documentation.LongDescription": "Združi vrstice tabele <code>table</code> z mehkim ujemanjem vrednosti v navedenem stolpcu <code>key</code> za vsako vrstico.\r\n    Za vsako skupino je ustvarjen zapis, ki vsebuje stolpce ključev (in njihove vrednosti) ter vse združene stolpce, ki jih določa <code>aggregatedColumns</code>.\r\n    Ta funkcija ne more zagotoviti, da bo vrnila vrstice z nespremenljivim vrstnim redom.\r\n    <p>Dodate lahko izbirni nabor <code>options</code>, da določite način primerjave stolpcev ključev. Med možnosti spadajo:\r\n    <ul>\r\n<li><code>Culture</code> : Omogoča združevanje zapisov na podlagi pravil, značilnih za kulturo. Uporabljeno je lahko katero koli veljavno ime kulture. Primer: če je možnost &#187;Kultura&#171; nastavljena na &#187;sl-SI&#171;, so zapisi združeni na podlagi slovenske kulture. Privzeta vrednost je &quot;&quot;, ki vsebuje skupine na podlagi nespremenljive angleške kulture.</li>\r\n<li><code>IgnoreCase</code> : Logična vrednost (true/false), ki omogoča združevanje ključev z razlikovanjem med velikimi in malimi črkami. Primer: če je &#187;true&#171;, je beseda &#187;Grozdje&#171; združena z besedo &#187;grozdje&#171;. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>IgnoreSpace</code> : Logična vrednost (true/false), ki omogoča kombiniranje delov besedila za iskanje skupin. Primer: če je &#187;true&#171;, je beseda &#187;Gro zdje&#171; združena z besedo &#187;Grozdje&#171;. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>SimilarityColumnName</code> : Ime stolpca, ki prikazuje podobnost med vhodno in reprezentativno vrednostjo za ta vnos. Privzeta vrednost je ničelna, ki ne doda novega stolpca za podobnosti.</li>\r\n<li><code>Threshold</code> : Število med 0,00 in 1,00, ki določa stopnjo podobnosti, pri kateri bosta dve vrednosti združeni.\r\n    Na primer, &#187;grozdje&#171; in &#187;grodje&#171; (brez črke &#187;z&#171;) sta združeni le, če je ta možnost nastavljena na manj kot 0,90.\r\n    Prag 1,00 omogoča le natančna ujemanja.\r\n    (Upoštevajte, da se pri nejasnem &#187;natančnem ujemanju&#171; lahko zanemarijo razlike, kot so črkovanje, besedni red in ločila.)\r\n    Privzeta vrednost je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela, ki omogoča združevanje zapisov na podlagi preslikav vrednosti po meri. Vsebovati mora stolpca &#187;Iz&#171; in &#187;V&#171;. Primer: beseda &#187;Grozdje&#171; je združena z besedo &#187;Rozine&#171;, če je v tabeli pretvorbe naveden stolpec &#187;Iz&#171;, ki vsebuje &#187;Grozdje&#171;, in stolpec &#187;V&#171;, ki vsebuje &#187;Rozine&#171;. Upoštevajte, da bo pretvorba uporabljena za vse ponovitve besedila v tabeli pretvorbe. Z zgornjo tabelo pretvorbe bo besedna zveza &#187;Grozdje je sladko&#171; združena tudi z besedno zvezo &#187;Rozine so sladke&#171;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Združite tabelo tako, da dodate stolpec za združevanje [Štetje], ki vsebuje število zaposlenih na posamezni lokaciji (»vsak Table.RowCount(_))«).",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Združi vrstice iz dveh tabel, ki se delno ujemajo glede na navedene ključe.",
        "Documentation.LongDescription": "<p>Združi vrstice tabele <code>table1</code> z vrsticami tabele <code>table2</code> glede na mehko ujemanje vrednosti stolpcev ključev, ki jih izbereta <code>key1</code> (za <code>table1</code>) in <code>key2</code> (za <code>table2</code>).</p>\r\n<p>Mehko ujemanje je primerjava, ki ne temelji na enakosti besedila, ampak na podrobnosti besedila.</p>\r\n<p>Privzeto je izvedeno notranje združevanje, vendar pa lahko dodate izbirno možnost <code>joinKind</code>, da določite vrsto združevanja. Med možnosti spadajo:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Dodate lahko izbirni nabor možnosti <code>joinOptions</code>, da določite način primerjave stolpcev ključev. Med možnosti spadajo:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Število med 1 in 8, ki določa število vzporednih niti za uporabo za mehko ujemanje. Privzeta vrednost je 1.</li>\r\n<li><code>Culture</code> : Omogoča ujemanje zapisov na podlagi pravil, značilnih za kulturo. Uporabljeno je lahko katero koli veljavno ime kulture. Primer: če je možnost &#187;Kultura&#171; nastavljena na &#187;sl-SI&#171;, se zapisi ujemajo na podlagi slovenske kulture. Privzeta vrednost je &quot;&quot;, ki vsebuje skupine na podlagi nespremenljive angleške kulture.</li>\r\n<li><code>IgnoreCase</code> : Logična vrednost (true/false), ki omogoča ujemanje ključev z razlikovanjem med velikimi in malimi črkami. Primer: če je &#187;true&#171;, se beseda &#187;Grozdje&#171; ujema z besedo &#187;grozdje&#171;. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>IgnoreSpace</code> : Logična vrednost (true/false), ki omogoča kombiniranje delov besedila za iskanje ustreznic. Primer: če je &#187;true&#171;, se beseda &#187;Gro zdje&#171; ujema z besedo &#187;Grozdje&#171;. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>NumberOfMatches</code> : Celo število, ki določa največje dovoljeno število ujemajočih se vrstic, ki jih je mogoče vrniti za vsako vhodno vrstico. Primer: vrednost 1 bo na primer vrnila največ eno ujemajočo se vrstico za vsako vhodno vrstico. Če ta možnost ni navedena, so vrnjene vse ujemajoče se vrstice.</li>\r\n<li><code>SimilarityColumnName</code> : Ime stolpca, ki prikazuje podobnost med vhodno in reprezentativno vrednostjo za ta vnos. Privzeta vrednost je ničelna, ki ne doda novega stolpca za podobnosti.</li>\r\n<li><code>Threshold</code> : Število med 0,00 in 1,00, ki določa stopnjo podobnosti, pri kateri se bosta dve vrednosti ujemali.\r\n    Na primer, &#187;grozdje&#171; in &#187;grodje&#171; (brez črke &#187;z&#171;) se ujemata le, če je ta možnost nastavljena na manj kot 0,90.\r\n    Prag 1,00 omogoča le natančna ujemanja.\r\n    (Upoštevajte, da se pri nejasnem &#187;natančnem ujemanju&#171; lahko zanemarijo razlike, kot so črkovanje, besedni red in ločila.)\r\n    Privzeta vrednost je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela, ki omogoča ujemanje zapisov na podlagi preslikav vrednosti po meri. Vsebovati mora stolpca &#187;Iz&#171; in &#187;V&#171;. Primer: beseda &#187;Grozdje&#171; se ujema z besedo &#187;Rozine&#171;, če je v tabeli pretvorbe naveden stolpec &#187;Iz&#171;, ki vsebuje &#187;Grozdje&#171;, in stolpec &#187;V&#171;, ki vsebuje &#187;Rozine&#171;. Upoštevajte, da bo pretvorba uporabljena za vse ponovitve besedila v tabeli pretvorbe. Z zgornjo tabelo pretvorbe se bo besedna zveza &#187;Grozdje je sladko&#171; ujemala tudi z besedno zvezo &#187;Rozine so sladke&#171;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Levo notranje delno združevanje dveh tabel na podlagi stolpca [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Izvede delno združevanje tabel v podanih stolpcih in vrne rezultat združevanja v novem stolpcu.",
        "Documentation.LongDescription": "<p>Združi vrstice tabele <code>table1</code> z vrsticami tabele <code>table2</code> glede na delno ujemanje vrednosti stolpcev s ključem, ki jih izbereta <code>key1</code> (za <code>table1</code>) in <code>key2</code> (za <code>table2</code>). Rezultati so vrnjeni v nov stolpec z imenom <code>newColumnName</code>.</p>\r\n<p>Delno ujemanje je primerjava, ki ne temelji na enakosti besedila, ampak na podrobnosti besedila.</p>\r\n<p>Izbirna možnost <code>joinKind</code> določa vrsto združevanja, ki ga želite izvesti. Privzeto je izvedeno levo zunanje združevanje, če parameter <code>joinKind</code> ni določen. Možnosti vključujejo:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Vključuje lahko izbirni nabor parametrov <code>joinOptions</code>, s katerim določite način primerjave stolpcev s ključem. Možnosti vključujejo:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Število med 1 in 8, ki določa število vzporednih niti za uporabo za mehko ujemanje. Privzeta vrednost je 1.</li>\r\n<li><code>Culture</code> : Omogoča ujemanje zapisov na podlagi pravil, značilnih za kulturo. Uporabljeno je lahko katero koli veljavno ime kulture. Primer: če je možnost &#187;Kultura&#171; nastavljena na &#187;sl-SI&#171;, se zapisi ujemajo na podlagi slovenske kulture. Privzeta vrednost je &quot;&quot;, ki vsebuje skupine na podlagi nespremenljive angleške kulture.</li>\r\n<li><code>IgnoreCase</code> : Logična vrednost (true/false), ki omogoča ujemanje ključev z razlikovanjem med velikimi in malimi črkami. Primer: če je &#187;true&#171;, se beseda &#187;Grozdje&#171; ujema z besedo &#187;grozdje&#171;. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>IgnoreSpace</code> : Logična vrednost (true/false), ki omogoča kombiniranje delov besedila za iskanje ustreznic. Primer: če je &#187;true&#171;, se beseda &#187;Gro zdje&#171; ujema z besedo &#187;Grozdje&#171;. Privzeta vrednost je &#187;true&#171;.</li>\r\n<li><code>NumberOfMatches</code> : Celo število, ki določa največje dovoljeno število ujemajočih se vrstic, ki jih je mogoče vrniti za vsako vhodno vrstico. Primer: vrednost 1 bo na primer vrnila največ eno ujemajočo se vrstico za vsako vhodno vrstico. Če ta možnost ni navedena, so vrnjene vse ujemajoče se vrstice.</li>\r\n<li><code>SimilarityColumnName</code> : Ime stolpca, ki prikazuje podobnost med vhodno in reprezentativno vrednostjo za ta vnos. Privzeta vrednost je ničelna, ki ne doda novega stolpca za podobnosti.</li>\r\n<li><code>Threshold</code> : Število med 0,00 in 1,00, ki določa stopnjo podobnosti, pri kateri se bosta dve vrednosti ujemali.\r\n    Na primer, &#187;grozdje&#171; in &#187;grodje&#171; (brez črke &#187;z&#171;) se ujemata le, če je ta možnost nastavljena na manj kot 0,90.\r\n    Prag 1,00 omogoča le natančna ujemanja.\r\n    (Upoštevajte, da se pri nejasnem &#187;natančnem ujemanju&#171; lahko zanemarijo razlike, kot so črkovanje, besedni red in ločila.)\r\n    Privzeta vrednost je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela, ki omogoča ujemanje zapisov na podlagi preslikav vrednosti po meri. Vsebovati mora stolpca &#187;Iz&#171; in &#187;V&#171;. Primer: beseda &#187;Grozdje&#171; se ujema z besedo &#187;Rozine&#171;, če je v tabeli pretvorbe naveden stolpec &#187;Iz&#171;, ki vsebuje &#187;Grozdje&#171;, in stolpec &#187;V&#171;, ki vsebuje &#187;Rozine&#171;. Upoštevajte, da bo pretvorba uporabljena za vse ponovitve besedila v tabeli pretvorbe. Z zgornjo tabelo pretvorbe se bo besedna zveza &#187;Grozdje je sladko&#171; ujemala tudi z besedno zvezo &#187;Rozine so sladke&#171;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Levo notranje delno združevanje dveh tabel na podlagi stolpca [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Združi vrstice v tabeli, ki imajo enak ključ.",
        "Documentation.LongDescription": "Združi vrstice parametra <code>table</code> po stolpcih ključa, ki jih določa <code>key</code>. <code>key</code> je lahko ime enega stolpca ali seznam imen stolpcev.\r\n    Za vsako skupino je ustvarjen zapis, ki vsebuje stolpce ključa (in njihove vrednosti) ter vse združene stolpce, ki jih določa <code>aggregatedColumns</code>.\r\n    Izbirno lahko navedete še parametra <code>groupKind</code> in <code>comparer</code>.<br>\r\n    <br>\r\n    Če so podatki že razvrščeni po stolpcih ključa, lahko navedete <code>groupKind</code> funkcije GroupKind.Local. S tem boste v nekaterih primerih morda izboljšali delovanje združevanja,\r\n    saj je za vse vrstice z določenim naborom vrednosti ključa predvideno, da so zvezne.<br>\r\n    <br>\r\n    Če navedete parameter <code>comparer</code>, morate upoštevati, da bo vrstica morda vstavljena v skupino, katerih ključi so drugačni od njenih ključev, če ta vrstica obravnava različne ključe kot enake.<br>\r\n    <br>\r\n    Ta funkcija ne zagotavlja vrstnega reda vrstic, ki jih pridobi.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Združite tabelo tako, da dodate združevalni stolpec [skupaj], ki vsebuje vsoto cen (\"each List.Sum([cena])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Vstavi seznam vrstic v tabelo na navedenem položaju.",
        "Documentation.LongDescription": "Vrne tabelo s seznamom vrstic, <code>rows</code>, vstavljenih v na dano mesto <code>table</code> na danem položaju, <code>offset</code>. Vsak stolpec v vrstici, ki jo želite vstaviti, se mora ujemati z vrstami stolpcev tabele.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vstavite vrstico v tabelo na mesto 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Vstavite vrstici v tabelo na mesto 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Združi vrstice iz dveh tabel, ki se ujemajo glede na dane ključe.",
        "Documentation.LongDescription": "<p>Združi vrstice tabele <code>table1</code> z vrsticami tabele <code>table2</code> glede na enakost vrednosti stolpcev ključa, ki jih izbereta <code>key1</code> (za <code>table1</code>) in <code>key2</code> (za <code>table2</code>).</p>\r\n<p>Privzeto je izvedeno notranje združevanje, vendar lahko vključite izbirni parameter <code>joinKind</code>, če želite določiti vrsto združevanja. Možnosti vključujejo:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Vključite lahko izbirni nabor parametrov <code>keyEqualityComparers</code>, s katerim določite način primerjave stolpcev ključa. Ta funkcija je trenutno namenjena samo interni uporabi.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Združite dve tabeli z enim stolpcem ključa.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Združite dve tabeli, ki sta v sporu z imeni stolpcev, in pri tem uporabite več stolpcev ključa.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Vrne največje vrstice glede na dane kriterije.",
        "Documentation.LongDescription": "Vrne največje vrstice v tabeli <code>table</code>, če navedete <code>comparisonCriteria</code>.\r\n    Ko so vrstice razvrščene, morate določiti parameter <code>countOrCondition</code> za nadaljnje filtriranje rezultata. Upoštevajte, da algoritem razvrščanja ne zagotavlja nespremenljivega razvrščenega rezultata. Parameter <code>countOrCondition</code> ima lahko več oblik:\r\n    <ul>\r\n        <li> Če navedete število, je vrnjen seznam z največ <code>countOrCondition</code> elementi v naraščajočem vrstnem redu. </li>\r\n        <li> Če navedete pogoj, je vrnjen seznam elementov, ki prvotno izpolnjujejo pogoj. Ko določen element ne izpolnjuje več pogoja, se nadaljnji elementi ne upoštevajo. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrstico z največjo vrednostjo v stolpcu [a] s pogojem [a] > 0 v tabeli. Vrstice so razvrščene, preden uporabite filter.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Poiščite vrstico z največjo vrednostjo v stolpcu [a] s pogojem [b] > 0 v tabeli. Vrstice so razvrščene, preden uporabite filter.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Vrne najmanjše vrstice glede na dane kriterije.",
        "Documentation.LongDescription": "Vrne najmanjše vrstice v tabeli <code>table</code>, če navedete <code>comparisonCriteria</code>. Ko so vrstice razvrščene, morate določiti parameter <code>countOrCondition</code> za nadaljnje filtriranje rezultata. Upoštevajte, da algoritem razvrščanja ne zagotavlja nespremenljivega razvrščenega rezultata. Parameter <code>countOrCondition</code> ima lahko več oblik:\r\n    <ul>\r\n        <li> Če navedete število, je vrnjen seznam z največ <code>countOrCondition</code> elementi v naraščajočem vrstnem redu. </li>\r\n        <li> Če navedete pogoj, je vrnjen seznam elementov, ki prvotno izpolnjujejo pogoj. Ko določen element ne izpolnjuje več pogoja, se nadaljnji elementi ne upoštevajo. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrstico z najmanjšo vrednostjo v stolpcu [a] s pogojem [a] < 3 v tabeli. Vrstice so razvrščene, preden uporabite filter.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Poiščite vrstico z najmanjšo vrednostjo v stolpcu [a] s pogojem [b] < 3 v tabeli. Vrstice so razvrščene, preden uporabite filter.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Združi tabele v podanih stolpcih in vrne rezultat združevanja v novem stolpcu.",
        "Documentation.LongDescription": "<p>Združi vrstice tabele <code>table1</code> z vrsticami tabele <code>table2</code> glede na enakost vrednosti stolpcev ključa, ki jih izbereta <code>key1</code> (za <code>table1</code>) in <code>key2</code> (za <code>table2</code>). Rezultati so vneseni v stolpec z imenom <code>newColumnName</code>.</p>\r\n<p>Izbirni parameter <code>joinKind</code> določa, kakšna vrsta združevanja bo izvedena. Če parameter <code>joinKind</code> ni naveden, je privzeto izvedeno levo zunanje združevanje.</p>\r\n<p>Vključite lahko izbirni nabor parametrov <code>keyEqualityComparers</code>, s katerim določite način primerjave stolpcev ključa. Ta funkcija je trenutno namenjena samo interni uporabi</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Združite dve tabeli z enim stolpcem ključa.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Zavrti podatke v stolpcu atributov v naslove stolpcev, če določite par stolpcev, ki predstavlja pare »atribut-vrednost«.",
        "Documentation.LongDescription": "Zavrti podatke v stolpcu atributov v naslove stolpcev, če določite par stolpcev, ki predstavlja pare »atribut-vrednost«.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zavrtite vrednosti »a«, »b« in »c« v stolpcu atributov tabele <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> v lasten stolpec.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Zavrtite vrednosti »a«, »b« in »c« v stolpcu atributov tabele <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> v lasten stolpec.  Z atributom »c« za ključ »x« je povezanih več vrednosti, zato razrešite spor s funkcijo »List.Max«.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Zamenja navedeni obseg vrstic s podanimi vrsticami.",
        "Documentation.LongDescription": "Zamenja navedeno število vrstic, <code>count</code>, v vhodni tabeli <code>table</code> z navedenim seznamom <code>rows</code>, ki se začne za <code>offset</code>. Parameter <code>rows</code> je seznam zapisov.\r\n    <ul>\r\n       <li><code>table</code>: tabela, v kateri je izvedena zamenjava.</li>\r\n       <li><code>offset</code>: število vrstic, ki bodo preskočene pred zamenjavo.</li>\r\n       <li><code>count</code>: število vrstic, ki bodo zamenjane.</li>\r\n       <li><code>rows</code>: seznam zapisov vrstic, ki bodo vstavljeni v tabelo <code>table</code> na mestu, ki ga določa <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte 3 vrstice in začnite na mestu 1.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Zamenja eno vrednost z drugo v navedenih stolpcih.",
        "Documentation.LongDescription": "Zamenja <code>oldValue</code> z <code>newValue</code> v navedenih stolpcih tabele <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte besedilo »na svidenje« z besedilom »svet« v stolpcu B, ki se ujema le s celotno vrednostjo.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Zamenjajte besedilo »ur« z besedilom »or« v stolpcu B, ki se ujema s poljubnim delom vrednosti.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimizirajte imena zaposlenih v ZDA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimizirajte vse stolpce zaposlenih v ZDA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Razdeli navedene stolpce v nabor dodatnih stolpcev z navedeno razdelilno funkcijo.",
        "Documentation.LongDescription": "Razdeli navedene stolpce v nabor dodatnih stolpcev z navedeno razdelilno funkcijo.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Stolpec [Ime] na mestu »i« razdelite na dva stolpca",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Prevede nabor stolpcev v tabeli v pare »atribut-vrednost«.",
        "Documentation.LongDescription": "Prevede nabor stolpcev v tabeli v pare »atribut-vrednost«, skupaj s preostalimi vrednostmi v vsaki vrstici.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Odvrtite stolpce »a«, »b« in »c« v tabeli <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> v pare »atribut-vrednost«.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Prevede vse stolpce, razen navedenega nabora, v pare atribut-vrednost.",
        "Documentation.LongDescription": "Prevede vse stolpce, razen navedenega nabora, v pare atribut-vrednost skupaj s preostalimi vrednostmi v vsaki vrstici.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Prevede vse stolpce, razen navedenega nabora, v pare atribut-vrednost skupaj s preostalimi vrednostmi v vsaki vrstici.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Osebna analitika za Microsoft Teams",
        "Documentation.LongDescription": "<p>S priključkom za analitiko za Teams lahko pridobite vpoglede v svojo uporabo aplikacije Teams. Podatki so na voljo tako za osebno dejavnost v aplikaciji Teams kot tudi za za dejavnost v aplikaciji Teams, katere član ste.</p>\r\n<p>Podatki so na voljo za preteklih 90 dni. </p>\r\n<p> Za podrobnosti o vrstah podatkov, ki so na voljo, si oglejte to dokumentacijo s pomočjo: </p>\r\n<ul>\r\n<li><b>Uporaba aplikacije Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Dejavnost uporabnikov aplikacije Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Vnesite organizacijo in imena projektov.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Storitve Azure DevOps",
        "Documentation.LongDescription": "Vrne tabelo virov OData, ki jih zagotavlja storitev Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Vrne dvojiško obliko, ki bere dvojiško vrednost.",
        "Documentation.LongDescription": "Vrne dvojiško obliko, ki bere dvojiško vrednost. Če je določen parameter <code>length</code>, bo dvojiška vrednost vsebovala toliko bajtov. Če parameter <code>length</code> ni določen, bo dvojiška vrednost vsebovala preostanek bajtov. <code>length</code> je lahko določen kot število ali kot dvojiška oblika dolžine pred dvojiškimi podatki.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Vrne logično vrednost na osnovi preverjanja enakosti dveh danih vrednosti.",
        "Documentation.LongDescription": "Vrne vrednost <code>logical</code> na podlagi preverjanja enakosti dveh danih vrednosti, <code>x</code> in <code>y</code>, z uporabo podanega<code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> je <code>Comparer</code>, ki se uporablja za nadzor primerjave.\r\n        Primerjalnik je funkcija, ki sprejme dva argumenta in vrne –1, 0 ali 1 glede na to, ali je prva vrednost manjša od, enaka, ali večje od druge.\r\n        S primerjalniki je mogoče določiti primerjave, ki ne razlikujejo med velikimi in malimi črkami ali kulturo in območnimi nastavitvami.\r\n      </div>\r\n      <div>\r\n        Ti vgrajeni primerjalniki so na voljo v jeziku formule:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Used to perform an exact ordinal comparison</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>:  uporablja se za natančno primerjavo vrstilnih števnikov, ki ne razlikuje med velikimi in malimi črkami</li>\r\n        <li> <code>Comparer.FromCulture</code>: uporablja se za primerjavo, ki upošteva kulturo</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Primerjajte »1« in »A« s področnimi nastavitvami »en-US« in določite, ali so vrednosti enake.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Vrne trenutni datum in uro v lokalnem časovnem pasu. Ta vrednost je nespremenljiva in se ne bo spremenila z zaporednimi klici.",
        "Documentation.LongDescription": "Vrne vrednost <code>datetime</code>, nastavljeno na trenutni datum in uro v sistemu. Ta vrednost je nespremenljiva in se ne bo spremenila z zaporednimi klici, kar ne drži za DateTime.LocalNow, ki lahko vrne različne vrednosti v postopku izvajanja izraza.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Vrne trenutni datum in uro v lokalnem časovnem pasu.",
        "Documentation.LongDescription": "Vrne vrednost <code>datetime</code>, nastavljeno na trenutni datum in uro v sistemu.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Vrne trenutni datum in uro v lokalnem časovnem pasu. Ta vrednost je nespremenljiva in se ne bo spremenila z zaporednimi klici.",
        "Documentation.LongDescription": "Vrne vrednost <code>datetime</code>, nastavljeno na trenutni datum in uro v sistemu. Vrnjena vrednost vsebuje podatke o časovnem pasu, ki predstavljajo lokalni časovni pas. Ta vrednost je nespremenljiva in se ne bo spremenila z zaporednimi klici, kar ne drži za DateTimeZone.LocalNow, ki lahko vrne različne vrednosti v postopku izvajanja izraza.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Vrne trenutni datum in uro v času UTC (časovni pas GMT). Ta vrednost je nespremenljiva in se ne bo spremenila z zaporednimi klici.",
        "Documentation.LongDescription": "Vrne trenutni datum in uro v času UTC (časovni pas GMT). Ta vrednost je nespremenljiva in se ne bo spremenila z zaporednimi klici.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Vrne trenutni datum in uro v lokalnem časovnem pasu.",
        "Documentation.LongDescription": "Vrne vrednost <code>datetimezone</code>, nastavljeno na trenutni datum in uro v sistemu.\r\n    Vrnjena vrednost vsebuje podatke o časovnem pasu, ki predstavljajo lokalni časovni pas.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Vrne trenutni datum in uro v času UTC (časovni pas GMT).",
        "Documentation.LongDescription": "Vrne trenutni datum in uro v času UTC (časovni pas GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pridobite trenutni datum in uro v UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Vrne prikriti identifikator za ovrednotenje, ki se trenutno izvaja.",
        "Documentation.LongDescription": "Vrne prikriti identifikator za ovrednotenje, ki se trenutno izvaja.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Vrne neprozorni identifikator za korelacijo dohodnih zahtev z odhodnimi zahtevami.",
        "Documentation.LongDescription": "Vrne neprozorni identifikator za korelacijo dohodnih zahtev z odhodnimi zahtevami.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Zapiše vnos sledi, če je omogočeno sledenje, in vrne vrednost.",
        "Documentation.LongDescription": "Zapiše sled <code>message</code>, če je omogočeno sledenje, in vrne <code>value</code>. Izbirni parameter <code>delayed</code> določa, ali je ovrednotenje <code>value</code> zakasnjeno, dokler je sporočilo sledeno. Za <code>traceLevel</code> je mogoče določiti eno teh vrednosti:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Sledi sporočilu, preden prikliče funkcijo Text.From, in vrne rezultat.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Privzeti ponudnik identitet za trenutnega gostitelja.",
        "Documentation.LongDescription": "Privzeti ponudnik identitet za trenutnega gostitelja.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Zbere skupno vrednost iz elementov na seznamu.",
        "Documentation.LongDescription": "Zbere skupno vrednost iz elementov na seznamu <code>list</code> z <code>accumulator</code>.\r\n    Nastavite lahko tudi izbirni parameter semena, <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zbere skupno vrednost iz elementov na seznamu {1, 2, 3, 4, 5} z ((state, current) => state + current ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Ustvari seznam vrednosti »datetimezone«, če navedete začetno vrednost, število in prirastno trajanje.",
        "Documentation.LongDescription": "Vrne seznam vrednosti <code>datetimezone</code> velikosti <code>count</code>, ki se začne z <code>start</code>. Dani prirastek, <code>step</code>, je vrednost <code>duration</code>, ki je dodana vsaki vrednosti.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam 10 vrednosti, ki se začne 5 minut pred začetkom novega leta (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) in povečuje za 1 minuto (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Ustvari seznam vrednosti »datetime«, če navedete začetno vrednost, število in prirastno trajanje.",
        "Documentation.LongDescription": "Vrne seznam vrednosti <code>datetime</code> velikosti <code>count</code>, ki se začne z <code>start</code>. Dani prirastek, <code>step</code>, je vrednost <code>duration</code>, ki je dodana vsaki vrednosti.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam 10 vrednosti, ki se začne 5 minut pred začetkom novega leta (#datetime(2011, 12, 31, 23, 55, 0)) in povečuje za 1 minuto (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Ustvari seznam vrednosti »date«, če navedete začetno vrednost, število in prirastno trajanje.",
        "Documentation.LongDescription": "Vrne seznam vrednosti <code>date</code> velikosti <code>count</code>, ki se začne z <code>start</code>. Dani prirastek, <code>step</code>, je vrednost <code>duration</code>, ki je dodana vsaki vrednosti.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam 5 vrednosti, ki se začne na večer pred novim letom (#date(2011, 12, 31)) in povečuje za 1 dan (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Ustvari seznam vrednosti »duration«, če navedete začetno vrednost, število in prirastno trajanje.",
        "Documentation.LongDescription": "Vrne seznam vrednosti <code>duration</code> <code>count</code>, ki se začne z <code>start</code> in poveča za dano vrednost <code>duration</code> <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam 5 vrednosti, ki se začne z 1 uro in povečuje za uro.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Ustvari seznam vrednosti.",
        "Documentation.LongDescription": "Ustvari seznam vrednosti z razpoložljivimi funkcijami. Funkcija <code>initial</code> ustvari začetno vrednost kandidata, ki se nato preveri glede na <code>condition</code>. \r \n    Če je vrednost kandidata odobrena, se vrne kot del dobljenega seznama, naslednja vrednost kandidata pa se ustvari tako, da se novo odobrena vrednost posreduje funkciji <code>next</code>. \r\n      Ko se vrednost kandidata ne ujema z vrednostjo <code>condition</code>, se postopek ustvarjanja seznama ustavi.\r\n      Za preoblikovanje elementov na dobljenem seznamu se lahko navede tudi neobvezni parameter <code>selector</code>, ki preoblikuje elemente na dobljenem seznamu.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Seznam ustvarite tako, da začnete pri desetih, nato korakoma zmanjšujete za ena, pri tem pa poskrbite, da bo vsak element večji od nič.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Generiranje seznama zapisov, ki vsebujejo x in y, kjer je x vrednost in y seznam. Pri tem mora x biti manj kot 10 in predstavljati število elementov na seznamu y. Ko je seznam ustvarjen, se vrnejo samo vrednosti x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Vstavi vrednosti v seznam z danim indeksom.",
        "Documentation.LongDescription": "Vrne nov seznam, ustvarjen z vstavljanjem vrednosti na seznamu <code>values</code> v seznam <code>list</code> z indeksom <code>index</code>. Prvi položaj na seznamu ima indeks 0.\r\n      <ul>\r\n        <li><code>list</code>: ciljni seznam, v katerega bodo vstavljene vrednosti.</li>\r\n        <li><code>index</code>: indeks ciljnega seznama (<code>list</code>), v katerega bodo vstavljene vrednosti. Prvi položaj na seznamu ima indeks 0.</li>\r\n        <li><code>values</code>: seznam vrednosti, ki bodo vstavljene v seznam <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vstavite seznam ({3, 4}) v ciljni seznam ({1, 2, 5}) z indeksom 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Vstavite seznam z ugnezdenim seznamom ({1, {1.1, 1.2}}) v ciljni seznam ({2, 3, 4}) z indeksom 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Zamenja število vrednosti z začetkom na položaju z nadomestnimi vrednostmi.",
        "Documentation.LongDescription": "Zamenja <code>count</code> vrednosti na seznamu <code>list</code> s seznamom <code>replaceWith</code> z začetkom na navedenem položaju, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte {7, 8, 9} na seznamu {1, 2, 7, 8, 9, 5} s {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Na seznamu poišče navedeno vrednost in jo zamenja.",
        "Documentation.LongDescription": "Na seznamu vrednosti, <code>list</code>, poišče vrednost <code>oldValue</code> in zamenja vsako pojavitev z nadomestno vrednostjo <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte vse vrednosti »a« na seznamu {\"a\", \"B\", \"a\", \"a\"} z »A«.",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Ustvari seznam vrednosti »time«, če navedete začetno vrednost, število in prirastno trajanje.",
        "Documentation.LongDescription": "Vrne seznam vrednosti <code>time</code> velikosti <code>count</code>, ki se začne z <code>start</code>. Dani prirastek, <code>step</code>, je vrednost <code>duration</code>, ki je dodana vsaki vrednosti.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam 4 vrednosti, ki se začne opoldne (#time(12, 0, 0)) in povečuje za eno uro (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Vrne seznam z elementi, ki so pretvorjeni iz vhodnega seznama z navedenimi funkcijami.",
        "Documentation.LongDescription": "Vrne seznam, katerega elementi so projicirani iz vhodnega seznama.<br>\r\n    <br>\r\n    Funkcija <code>collectionTransform</code> pretvori vsak element v vmesni seznam, funkcija <code>resultTransform</code> pa izvirni element kot tudi element z vmesnega seznama pretvori v končni rezultat <br>\r\n    <br>\r\n    Funkcija <code>collectionTransform</code> ima podpis <code>(x kot poljuben) kot seznam => ...</code>,  kjer je<code>x</code> element v mapi <code>list</code>.\r\n    Funkcija <code>resultTransform</code> projicira obliko rezultata in ima podpis <code>(x kot poljuben, y kot poljuben) kot poljuben => ...</code>, kjer je <code>x</code> element v <code>list</code> in <code>y</code> element s seznama, ustvarjenega s prehodom <code>x</code> v <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Sploščen seznam ljudi in njihovih hišnih ljubljenčkov.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Vrne naključno število.",
        "Documentation.LongDescription": "Vrne naključno število med 0 in 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Poiščite naključno število.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Doda polje v zapis.",
        "Documentation.LongDescription": "Doda polje v zapis <code>record</code>, če navedete ime polja <code>fieldName</code> in vrednost <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "V zapis dodajte polje za naslov.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Zamenja besedilo v podanem vnosu.",
        "Documentation.LongDescription": "Zamenja besedilo <code>old</code> v izvirnem <code>text</code> z besedilom <code>new</code>. To funkcijo zamenjevalnika lahko uporabite v <code>List.ReplaceValue</code> in <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte besedilo »hE« z besedilom »He« v nizu »hEllo world«.",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Zamenja vrednosti v podanem vnosu.",
        "Documentation.LongDescription": "Zamenja vrednost <code>old</code> v izvirnem <code>value</code> z vrednostjo <code>new</code>. To funkcijo zamenjevalnika lahko uporabite v <code>List.ReplaceValue</code> in <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte vrednost 11 z vrednostjo 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Vrne rezultat JSON iz vmesnika API storitve Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Pokliče vmesnik REST API storitve Smartsheet 2.0 na navedeni končni točki in vrne rezultate v obliki zapisa JSON.",
        "Documentation.Examples": [
          {
            "Description": "Pridobi podatke z lista na končni točki vmesnika API storitve Smartsheet z dodatnimi navedenimi argumenti",
            "Code": "Smartsheet.Content(\"listi\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Tabela s podatki o listih, ki jo vrne vmesnik API storitve Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Vrne funkcijo, ki ne izvede razdelitve in vrne svoj argument kot seznam z enim elementom.",
        "Documentation.LongDescription": "Vrne funkcijo, ki ne izvede razdelitve in vrne svoj argument kot seznam z enim elementom.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Vrne funkcijo, ki razdeli besedilo v seznam besedila pri presledku.",
        "Documentation.LongDescription": "Vrne funkcijo, ki razdeli besedilo v seznam besedila pri presledku.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite vnos s presledki in obravnavajte narekovaje kot kateri koli drug znak.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Razdeli tabelo v seznam tabel glede na število navedenih skupin in stolpcev.",
        "Documentation.LongDescription": "Razdeli tabelo <code>table</code> v seznam <code>groups</code> tabel glede na vrednost vrstice <code>column</code> in funkcijo <code>hash</code>.\r\n    Funkcija <code>hash</code> se uporabi za vrednost vrstice <code>column</code>, da se pridobi razpršilna vrednost za vrstico. Modul razpršilne vrednosti <code>groups</code> določa, v katero od vrnjenih tabel bo vstavljena vrstica.\r\n    <ul>\r\n       <li><code>table</code>: tabela, ki bo razdeljena.</li>\r\n       <li><code>column</code>: stolpec, ki bo razpršen za določanje, katera vrnjena tabela vsebuje vrstico.</li>\r\n       <li><code>groups</code>: število tabel, v katere bo razdeljena vhodna tabela.</li>\r\n       <li><code>hash</code>: funkcija, uporabljena za pridobitev razpršilne vrednosti.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Razdelite tabelo <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> v 2 tabeli v stolpcu [a], tako da uporabite vrednost stolpcev kot razpršilni algoritem.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Vrne del števila <code>text</code> med navedenima <code>startDelimiter</code> in <code>endDelimiter</code>.\r\n    Izbirna številska vrednost <code>startIndex</code> označuje, katero ponovitev števila <code>startDelimiter</code> je treba upoštevati.\r\n    Izbirni seznam <code>startIndex</code> označuje, katero ponovitev števila <code>startDelimiter</code> je treba upoštevati, in ali je treba indeksiranje izvesti od začetka ali konca vnosa.\r\n    <code>endIndex</code> je podobno, le da je indeksiranje izvedeno relativno glede na <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pridobite del števila »111 (222) 333 (444)« med (prvim) oklepajem in (prvim) zaklepajem, ki mu sledi.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Pridobite del števila »111 (222) 333 (444)« med drugim oklepajem od konca in prvim zaklepajem, ki mu sledi.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Pridobite del števila »111 (222) 333 (444)« med drugim oklepajem od konca in drugim zaklepajem, ki mu sledi.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Vstavi eno besedilno vrednost v drugo na danem položaju.",
        "Documentation.LongDescription": "Vrne rezultat vstavljanja besedilne vrednosti <code>newText</code> v besedilno vrednost <code>text</code> na položaju <code>offset</code>. Položaji se začnejo s številom 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Vstavite »C« med »B« in »D« v »ABD«.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Vrne nov, naključen globalni enolični identifikator (GUID).",
        "Documentation.LongDescription": "Vrne nov, naključen globalni enolični identifikator (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Zamenja vse pojavitve danega podniza v besedilu.",
        "Documentation.LongDescription": "Vrne rezultat zamenjave vseh pojavitev besedilne vrednosti <code>old</code> v besedilni vrednosti <code>text</code> z besedilno vrednostjo <code>new</code>. Ta funkcija razlikuje med velikimi in malimi črkami.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte vse pojavitve besede »the« v stavku z besedo »a«.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Odstrani obseg znakov in vstavi novo vrednost na navedenem položaju.",
        "Documentation.LongDescription": "Vrne rezultat odstranitve števila znakov, <code>count</code>, iz besedilne vrednosti <code>text</code> z začetkom na položaju <code>offset</code> in vstavljanja besedilne vrednosti <code>newText</code> na enakem položaju v <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte en znak na položaju 2 v besedilni vrednosti »ABGF« z novo besedilno vrednostjo »CDE«.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Doda ključ v dano vrsto tabele.",
        "Documentation.LongDescription": "Doda ključ v dano vrsto tabele.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Vrne seznam identitet, ki jih bo sprejel pogoj.",
        "Documentation.LongDescription": "<p>Z uporabo navedene lastnosti <code>identityProvider</code> pretvori <code>condition</code> v seznam identitet, za katero bil <code>condition</code> vrnil <code>true</code> v vseh kontekstih odobritve, kjer je <code>identityProvider</code> ponudnik identitete. Prikaže se sporočilo o napaki, če <code>condition</code> ni mogoče pretvoriti v seznam identitet (če na primer <code>condition</code> za sprejem odločitve uporabi atribute, ki niso identitete uporabnikov ali skupin).</p>\r\n    <p>Upoštevajte, da seznam identitet predstavlja identitete, kot so prikazane v <code>condition</code>, za njih pa ni izvedena nobena normalizacija (kot je razširitev skupine).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Stisne dvojiško vrednost z uporabo navedene vrste stiskanja.",
        "Documentation.LongDescription": "Stisne dvojiško vrednost z uporabo navedene vrste stiskanja.  Rezultat tega klica je stisnjena kopija vnosa. Vrste stiskanja so med drugim lahko:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Stisnite dvojiško vrednost.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Raztegne dvojiško vrednost z uporabo navedene vrste stiskanja.",
        "Documentation.LongDescription": "Raztegne dvojiško vrednost z uporabo navedene vrste stiskanja.  Rezultat tega klica je raztegnjena kopija vhoda. Vrste stiskanja so med drugim lahko:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Raztegnite dvojiško vrednost.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Vrne podnabor dvojiške vrednosti, ki se začne pri odmiku.",
        "Documentation.LongDescription": "Vrne podnabor dvojiške vrednosti, ki se začne pri odmiku <code>binary</code>. Izbirni parameter <code>offset</code> nastavi največjo dolžino v podnaboru.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Vrne podnabor dvojiške vrednosti, ki se začne pri odmiku 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Vrne podnabor dolžine 2 od odmika 6 dvojiške vrednosti.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Razdeli navedene dvojiške podatke na seznam dvojiških podatkov z uporabo navedene velikosti strani.",
        "Documentation.LongDescription": "Razdeli <code>binary</code> na seznam dvojiških podatkov, kjer so prvi element seznama rezultatov dvojiški podatki, ki vsebujejo prvih <code>pageSize</code> bajtov iz izvornih dvojiških podatkov \r,\n    naslednji element seznama rezultatov pa so dvojiški podatki, ki vsebujejo naslednjih <code>pageSize</code> bajtov iz izvornih dvojiških podatkov itd.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Ustvari ali podaljša binary z uporabniško določenimi rutinami za obravnavo za postopke poizvedbe in dejanja.",
        "Documentation.LongDescription": "<p>Vrne pogled za <code>binary</code>, v katerem so funkcije, določene v <code>handlers</code>, uporabljene namesto privzetega delovanja postopka, ko je za pogled uporabljen postopek.</p>\r\n<p>Če je na voljo <code>binary</code>, so vse funkcije rutine izbirne. Če <code>binary</code> ni na voljo, je zahtevana funkcija rutine <code>GetStream</code>. Če funkcija rutine ni navedena za postopek, je privzeto delovanje postopka uporabljeno za <code>binary</code> (razen v primeru funkcije <code>GetExpression</code>).</p>\r\n<p>Funkcije rutine za obravnavo morajo vrniti vrednost, ki je semantično enakovredna rezultatu uporabe postopka za <code>binary</code> (ali nastalega pogleda v primeru funkcije <code>GetExpression</code>).</p>\r\n<p>Če pri funkciji rutine za obravnavo pride do napake, je za pogled uporabljeno privzeto delovanja postopka.</p>\r\n<p>Parameter <code>Binary.View</code> lahko uporabite za izvedbo zlaganja v viru podatkov – prevod poizvedb M v poizvedbe, značilne za vir (npr. za ustvarjanje izjav T-SQL iz poizvedb M).</p>\r\n<p>Popoln opis funkcije <code>Binary.View</code> najdete v objavljeni dokumentaciji za povezovalnik po meri Power Query.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite osnovni pogled, ki ne zahteva dostopa do podatkov, da bi bilo mogoče določiti dolžino.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Vrne dvojiško obliko z vrstnim redom bajtov, ki ga določa funkcija.",
        "Documentation.LongDescription": "Vrne dvojiško obliko z vrstnim redom bajtov, ki ga določa <code>binaryFormat</code>.  Privzeti vrstni red bajtov je <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Vrne dvojiško obliko, ki izbere naslednjo dvojiško obliko glede na vrednost, ki je že prebrana.",
        "Documentation.LongDescription": "Vrne dvojiško obliko, ki izbere naslednjo dvojiško obliko glede na vrednost, ki je že prebrana.  Vrednost dvojiške oblike, ki jo ustvari ta funkcija, deluje v stopnjah:<ul>\r\n<li>Za branje vrednosti se uporabi dvojiška oblika, ki jo določi parameter <code>binaryFormat</code>.</li>\r\n<li>Vrednost se posreduje funkciji izbire, ki jo določa parameter <code>chooseFunction</code>.</li>\r\n<li>Funkcija izbire pregleda vrednost in vrne drugo dvojiško obliko.</li>\r\n<li>Za branje druge vrednosti se uporabi druga dvojiška oblika.</li>\r\n<li>Če je določena funkcija združitve, se prva in druga vrednost posredujeta funkciji združitve, vrne pa se nastala vrednost.</li>\r\n<li>Če funkcija združitve ni določena, se vrne druga vrednost.</li>\r\n<li>Vrne se druga vrednost.</li>\r\n</ul>Izbirni parameter <code>type</code> določa vrsto dvojiške oblike, ki jo bo vrnila funkcija združitve.  Določi se lahko <code>type any</code>, <code>type list</code> ali <code>type binary</code>.  Če parameter <code>type</code> ni določen, se uporabi <code>type any</code>.   Če se uporabi <code>type list</code> ali <code>type binary</code>, lahko sistem vrne pretočno vrednost <code>binary</code> ali <code>list</code> namesto medpomnjene, kar lahko zmanjša količino pomnilnika, ki je potrebna za branje oblike.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Preberite seznam bajtov, kjer število elementov določa prvi bajt.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Preberite seznam bajtov, kjer število elementov določa prvi bajt, in ohranite branje prvega bajta.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Preberite seznam bajtov, kjer število elementov določa prvi bajt s pretočnim seznamom.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Vrne dvojiško obliko, ki bere skupino elementov.",
        "Documentation.LongDescription": "Parametri so:\r\n<ul>\r\n<li>Parameter <code>binaryFormat</code> določa dvojiško obliko vrednosti ključa.</li>\r\n<li>Parameter <code>group</code> zagotavlja informacije o skupini znanih elementov.</li>\r\n<li>Izbirni parameter <code>extra</code> lahko uporabite za določitev funkcije, ki bo vrnila vrednost dvojiške oblike za nepričakovano vrednost, ki sledi kateremu koli ključu.  Če parametra <code>extra</code> ne določite, bo v primeru nepričakovanih vrednosti ključa prišlo do napake.</li>\r\n</ul>\r\nParameter <code>group</code> določa seznam definicij elementov. Vsaka definicija elementa je seznam, ki vsebuje spodnjih 3 do 5 vrednosti:\r\n<ul>\r\n<li>Vrednost ključa. Vrednost ključa, ki ustreza elementu. Vrednost mora biti enolična v naboru elementov.</li>\r\n<li>Oblika elementa. Dvojiška oblika, ki ustreza vrednosti elementa in omogoča, da ima vsak element drugačno obliko. </li>\r\n<li>Ponovitev elementa. Vrednost <code>BinaryOccurrence.Type</code>, ki določa, kolikokrat naj bi se element ponovil v skupini. Zahtevani elementi, ki niso prisotni, povzročijo napako. Zahtevani ali izbirni podvojeni elementi so obravnavani kot nepričakovane vrednosti ključa.</li>\r\n<li>Privzeta vrednost elementa (izbirno). Če je privzeta vrednost elementa prikazana na seznamu definicij elementov in ni ničelna, bo uporabljena namesto privzete vrednosti. Privzeta vrednost za ponavljajoče se ali izbirne elemente je ničelna vrednost, privzeta vrednost za ponavljajoče se vrednosti pa je prazen seznam { }.</li>\r\n<li>Pretvorba vrednosti elementa (izbirno). Če je funkcija pretvorbe vrednosti elementa na seznamu definicij elementov in ni ničelna, bo klicana za pretvorbo vrednosti elementa, preden je ta vrnjena. Funkcija pretvorbe je poklicana le, če je element prikazan v vnosu (nikoli ne bo poklicana s privzeto vrednostjo). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Naslednje predvideva vrednost ključa, ki je enobajtna, s štirimi pričakovanimi elementi v skupini, pri katerih ključu sledi bajt podatkov.  Element se pri vnosu prikaže tako:\r\n<ul>\r\n<li>Ključ 1 je zahtevan in se pojavi z vrednostjo 11.</li>\r\n<li>Ključ 2 se ponovi in se pojavi dvakrat z vrednostjo 22 ter da rezultat v vrednosti { 22, 22 }.</li>\r\n<li>Ključ 3 je izbiren in se ne pojavi ter da rezultat v vrednosti »null«.</li>\r\n<li>Ključ 4 se ponovi, vendar se ne pojavi, in da rezultat v vrednosti { }.</li>\r\n<li>Ključ 5 ni del skupine, vendar se pojavi enkrat z vrednostjo 55.  Dodatna funkcija je klicana z vrednostjo ključa 5 in vrne obliko, ki ustreza tej vrednosti (BinaryFormat.Byte).  Vrednost 55 je prebrana in zavržena.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Naslednji primer prikazuje pretvorbo vrednosti elementa in privzeto vrednost elementa.   Ponavljanje elementa s ključem 1 povzame seznam vrednosti, prebranih z »List.Sum«.  Izbirni element s ključem 2 ima privzeto vrednost 123 namesto null.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Vrne dvojiško obliko, ki omeji količino podatkov, ki jo je mogoče prebrati.",
        "Documentation.LongDescription": "Vrne dvojiško obliko, ki omeji količino podatkov, ki jo je mogoče prebrati.  Tako <code>BinaryFormat.List</code> kot <code>BinaryFormat.Binary</code> se lahko uporabi za branje do konca podatkov. <code>BinaryFormat.Length</code> je lahko uporabljen za omejitev števila bajtov, ki so prebrani. Parameter <code>binaryFormat</code> določa dvojiško obliko za omejitev. Parameter <code>length</code> določa število bajtov za branje. Parameter <code>length</code> je lahko številska vrednost ali vrednost dvojiške oblike, ki določa obliko prikazane vrednosti dolžine, ki je pred vrednostjo za branje.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Pri branju seznama bajtov omejite število prebranih bajtov na 2.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Pri branju seznama bajtov omejite število prebranih bajtov na vrednost bajtov pred seznamom.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Vrne dvojiško obliko, ki bo pretvorila vrednosti, ki jih bere druga dvojiška oblika.",
        "Documentation.LongDescription": "Vrne dvojiško obliko, ki bo pretvorila vrednosti, ki jih bere druga dvojiška oblika.  Parameter <code>binaryFormat</code> določa dvojiško obliko, ki bo uporabljena za branje vrednosti.  <code>function</code> se prikliče s prebrano vrednostjo in vrne pretvorjeno vrednost.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Preberite bajt in mu dodajte ena.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Vrne funkcijo primerjalnika, ki za primerjavo vrednosti uporablja pravila vrstilnih števnikov.",
        "Documentation.LongDescription": "Vrne funkcijo primerjalnika, ki ne razlikuje med velikimi in malimi črkami, in ki uporablja pravila vrstilnega števnika za primerjavo podanih vrednosti <code>x</code> in <code>y</code>.<br>\r\n      <br>\r\n      Funkcija primerjalnika sprejme dva argumenta in vrne –1, 0 ali 1 glede na to, ali je prva vrednost manjša od, enaka,  ali večje od druge.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "S pravili vrstilnih števnikov primerjajte, ali sta izraza »encyclopædia« in »encyclopaedia« enaka. Gre za ekvivalenta, ki uporabljata <code>Comparer.FromCulture(\"en-us\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Vrne funkcijo primerjalnika, ki ne razlikuje med velikimi ter malimi črkami in ki za primerjavo vrednosti uporablja pravila vrstilnih števnikov.",
        "Documentation.LongDescription": "Vrne funkcijo primerjalnika, ki ne razlikuje med velikimi in malimi črkami, in ki uporablja pravila vrstilnega števnika za primerjavo podanih vrednosti <code>x</code> in <code>y</code>.<br>\r\n        <br>\r\n        Funkcija primerjalnika sprejme dva argumenta in vrne –1, 0 ali 1 glede na to, ali je prva vrednost manjša od, enaka,  ali večje od druge.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "S pravili vrstilnih števnikov, ki ne razlikujejo med velikimi in malimi črkami, primerjajte »Abc« z »abc«. Upoštevajte, da je »Abc« manjše kot »abc«, če uporabljate primerjalnik <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Vrne lastnost atributa dimenzije.",
        "Documentation.LongDescription": "Vrne lastnost <code>propertyName</code> za atribut dimenzije <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Vrne lastnost mere (lastnost celice).",
        "Documentation.LongDescription": "Vrne lastnost <code>propertyName</code> za atribut dimenzije <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Vir poizvedbe SQL Databricks",
        "Documentation.LongDescription": "Določite vir podatkov Databricks za izvajanje SQL poizvedb"
      },
      "ReturnType": "Poizvedba SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Vir poizvedbe SQL Databricks",
        "Documentation.LongDescription": "Določite vir podatkov Databricks za izvajanje SQL poizvedb"
      },
      "ReturnType": "Poizvedba SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Datumu doda določene dni.",
        "Documentation.LongDescription": "Vrne rezultat <code>date</code>, <code>datetime</code> ali <code>datetimezone</code> od dodajanja <code>numberOfDays</code> dni vrednosti <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, h kateri se dodajo dnevi.</li>\r\n      <li><code>numberOfDays</code>: število dni, ki naj se dodajo.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodajte 5 dni vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki predstavlja datum 5/14/2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Datumu doda določene mesece.",
        "Documentation.LongDescription": "Vrne rezultat <code>date</code>, <code>datetime</code> ali <code>datetimezone</code> od dodajanja <code>numberOfMonths</code> mesecev vrednosti <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, h kateri se dodajo meseci.</li>\r\n        <li><code>numberOfMonths</code>: število mesecev, ki naj se dodajo.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodajte 5 mesecev vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki predstavlja datum 5/14/2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Dodajte 18 mesecev vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki predstavlja datum in čas 5/14/2011 08:15:22 AM.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Datumu doda določena četrtletja.",
        "Documentation.LongDescription": "Vrne rezultat <code>date</code>, <code>datetime</code> ali <code>datetimezone</code> od dodajanja <code>numberOfQuarters</code> četrtletij vrednosti <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, h kateri se dodajo četrtletja.</li>\r\n      <li><code>numberOfQuarters</code>: število četrtletij, ki naj se dodajo.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodajte 1 četrtletje vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki predstavlja datum 5/14/2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Datumu doda določene tedne.",
        "Documentation.LongDescription": "Vrne rezultat <code>date</code>, <code>datetime</code> ali <code>datetimezone</code> od dodajanja <code>numberOfWeeks</code> tednov vrednosti <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, h kateri se dodajo tedni.</li>\r\n      <li><code>numberOfWeeks</code>: število tednov, ki naj se dodajo.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodajte 2 tedna vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki predstavlja datum 5/14/2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Datumu doda določena leta.",
        "Documentation.LongDescription": "Vrne rezultat <code>date</code>, <code>datetime</code> ali <code>datetimezone</code> od dodajanja <code>numberOfYears</code> vrednosti <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, h kateri se dodajo leta.</li>\r\n        <li><code>numberOfYears</code>: število let, ki naj se dodajo.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodajte 4 leta vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki predstavlja datum 5/14/2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Dodajte 10 let vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki predstavlja datum in čas 5/14/2011 08:15:22 AM.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem številu dni, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem dnevu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem dnevu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem dnevu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>days</code>: število dni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je dan po trenutnem času sistema v naslednjih dveh dnevih.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem številu mesecev, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem mesecu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem številu mesecev, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem mesecu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>months</code>: število mesecev.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je mesec po trenutnem času sistema v naslednjih dveh mesecih.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem številu četrtletij, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem četrtletju.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem številu četrtletij, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem četrtletju.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>quarters</code>: število četrtletij.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je četrtletje po trenutnem času sistema v naslednjih dveh četrtletjih.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem številu tednov, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem tednu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem številu tednov, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem tednu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>weeks</code>: število tednov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je teden po trenutnem času sistema v naslednjih dveh tednih.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem številu let, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem letu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem številu let, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem letu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>years</code>: število let.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je leto po trenutnem času sistema v naslednjih dveh letih.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem številu dni, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem dnevu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem številu dni, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem dnevu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>days</code>: število dni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je dan pred trenutnim časom sistema v prejšnjih dveh dnevih.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem številu mesecev, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem mesecu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem številu mesecev, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem mesecu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>months</code>: število mesecev.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je mesec pred trenutnim časom sistema v preteklih dveh mesecih.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem številu četrtletij, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem četrtletju.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem številu četrtletij, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem četrtletju.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>quarters</code>: število četrtletij.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je četrtletje pred trenutnim časom sistema v preteklih dveh četrtletjih.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem številu tednov, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem tednu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem številu tednov, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem tednu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>weeks</code>: število tednov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je teden pred trenutnim časom sistema v preteklih dveh tednih.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem številu let, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem letu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem številu let, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem letu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>years</code>: število let.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je leto pred trenutnim časom sistema v preteklih dveh letih.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Doda informacije o časovnem pasu za vrednost »datetime«.",
        "Documentation.LongDescription": "Doda informacije o časovnem pasu za vrednost <code>dateTime</code>. Informacije o časovnem pasu vključujejo <code>timezoneHours</code> in izbirno <code>timezoneMinutes</code>, kar določa želeni odmik od časa UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nastavite časovni pas na UTC+7:30 (7 ur in 30 minut po času UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v naslednjem številu ur, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni uri.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem številu ur, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni uri.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>hours</code>: število ur.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je ura po trenutnem sistemskem času v naslednjih dveh urah.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v naslednjem številu minut, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni minuti.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem številu minut, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni minuti.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>minutes</code>: število minut.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je minuta po trenutnem sistemskem času v naslednjih dveh minutah.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v naslednjem številu sekund, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni sekundi.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem številu sekund, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni sekundi.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>seconds</code>: število sekund.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je sekunda po trenutnem sistemskem času v naslednjih dveh sekundah.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v prejšnjem številu ur, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni uri.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem številu ur, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni uri.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>hours</code>: število ur.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je ura pred trenutnim sistemskim časom v prejšnjih dveh urah.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v prejšnjem številu minut, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni minuti.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem številu minut, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni minuti.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>minutes</code>: število minut.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je minuta pred trenutnim sistemskim časom v prejšnjih dveh minutah.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v prejšnjem številu sekund, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni sekundi.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem številu sekund, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni sekundi.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      <li><code>seconds</code>: število sekund.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je sekunda pred trenutnim sistemskim časom v prejšnjih dveh sekundah.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Spremeni časovni pas vrednosti.",
        "Documentation.LongDescription": "Spremeni podatke o časovnem pasu vrednosti »datetimezone« <code>dateTimeZone</code> na nove podatke o časovnem pasu, ki jih zagotovi <code>timezoneHours</code> in izbirno <code>timezoneMinutes</code>.\r\n    Če <code>dateTimeZone</code> nima komponente »timezone«, pride do izjeme.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Spremenite podatke o časovnem pasu za »#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30)« na 8 ur.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Spremenite podatke o časovnem pasu za »#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30)« na 30 minut.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Dostopa do vrednosti glede na ime v vdelani kombinaciji.",
        "Documentation.LongDescription": "Dostopa do vrednosti glede na ime v vdelani kombinaciji.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Ustvari funkcijo z določenim podpisom parametra poleg funkcije, ki vsebuje argument enega seznama",
        "Documentation.LongDescription": "Uporabi unarno funkcijo <code>function</code>, da ustvari novo funkcijo z vrsto <code>functionType</code>, ki sestavi seznam iz svojih argumentov in ga pošlje <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Pretvori »List.Sum« v funkcijo z dvema argumentoma, katere argumenti so sešteti",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Pretvori funkcijo z uporabo seznama v funkcijo z dvema argumentoma",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Prikliče dano funkcijo",
        "Documentation.LongDescription": "Prikliče dano funkcijo z določenim seznamom argumentov in vrne rezultat.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Prikliče Record.FieldNames z enim argumentom [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Prikliče navedeno funkcijo po poteku navedenega trajanja.",
        "Documentation.LongDescription": "Vrne rezultata priklica funkcije <code>function</code> po poteku trajanja <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Ustvari skalarno funkcijo poleg vektorske funkcije in v en paket združi več priklicev.",
        "Documentation.LongDescription": "<p>Vrne skalarno funkcijo vrste »<code>scalarFunctionType</code>«, ki prikliče <code>vectorFunction</code> z eno vrstico argumentov in vrne en sam rezultat. Če je skalarna funkcija uporabljena zaporedoma za vsako vrstico tabele rezultatov, kot je »Table.AddColumn«, bo poleg tega <code>vectorFunction</code> uporabljena za vse vnose.</p>\r\n<p><code>vectorFunction</code> bo uporabljena v tabeli, katere stolpci se ujemajo v imenu in položaju parametrov funkcije <code>scalarFunctionType</code>. Vsaka vrstica te tabele vsebuje argumente za en klic skalarne funkcije s stolpci, ki ustrezajo parametrom fukcije <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> mora vrniti seznam z enako dolžino kot vhodna tabela, katere element na vsakem položaju mora biti isti rezultat kot ovrednotenje skalarne funkcije v vnosni vrstici istega položaja.</p>\r\n<p>Pričakovano je, da je vnosna tabela pretakana, zato je pričakovano, da <code>vectorFunction</code> pretaka svoj rezultat, ko je dodan vnos, in deluje samo z enim koščkom vnosa hkrati. Zlasti <code>vectorFunction</code> ne sme oštevilčiti svoje vnosne tabele več kot enkrat.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Ustvari zapis, ki predstavlja geografsko točko iz delov.",
        "Documentation.LongDescription": "Ustvari zapis, ki predstavlja geografsko točko iz njegovih sestavnih delov, kot so zemljepisna dolžina, zemljepisna širina ter nadmorska višina (Z) in mera (M), če sta prisotni. Izbirni prostorski referenčni identifikator (SRID) je mogoče navesti, če se razlikuje od privzete vrednosti (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Ustvari zapis, ki predstavlja geometrično točko iz delov.",
        "Documentation.LongDescription": "Ustvari zapis, ki predstavlja geografsko točko iz njegovih sestavnih delov, kot so koordinata X, koordinata Y ter koordinata (Z) in mera (M), če sta prisotni. Izbirni prostorski referenčni identifikator (SRID) je mogoče navesti, če se razlikuje od privzete vrednosti (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Ustvari identiteto.",
        "Documentation.LongDescription": "Ustvari identiteto.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Določa, ali je identiteta član zbirke identitet.",
        "Documentation.LongDescription": "Določa, ali je identiteta član zbirke identitet.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Vrne seznam, sestavljen iz vseh elementov odmika, označenih z lihimi števili, na seznamu.",
        "Documentation.LongDescription": "Vrne seznam, sestavljen iz vseh elementov odmika, označenih z lihimi števili, na seznamu. Izmenično jemlje in preskakuje vrednosti s seznama <code>list</code> glede na parametre.\r\n    <ul>\r\n    <li><code>count</code>: določa število vrednosti, ki se vsakič preskočijo.</li>\r\n    <li><code>repeatInterval</code>: izbirni interval ponavljanja, ki kaže, koliko vrednosti se doda med preskočenimi vrednostmi.</li>\r\n    <li><code>offset</code>: izbirni parameter odmika, da se preskakovanje vrednosti začne pri začetnem odmiku.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam iz {1..10}, ki preskoči prvo število.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Ustvarite seznam iz {1..10}, ki preskoči vsako drugo številko.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Ustvarite seznam iz {1..10}, ki se začne pri 1 in preskoči vsako drugo število.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Ustvarite seznam iz {1..10}, ki se začne z 1, preskoči eno vrednost, ohrani dve vrednosti in tako naprej.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Označuje, ali seznam vsebuje vrednost.",
        "Documentation.LongDescription": "Označuje, ali seznam <code>list</code> vsebuje vrednost <code>value</code>.\r\n    Vrne »true«, če je vrednost najdena na seznamu, sicer vrne »false«. Določite lahko izbirno vrednost kriterijev enakosti <code>equationCriteria</code> za nadzor preskušanja enakosti. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali seznam {1, 2, 3, 4, 5} vsebuje vrednost 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali seznam {1, 2, 3, 4, 5} vsebuje vrednost 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Označuje, kje seznam vključuje vse vrednosti na drugem seznamu.",
        "Documentation.LongDescription": "Označuje, ali seznam <code>list</code> vključuje vse vrednosti na drugem seznamu, <code>values</code>.\r\n    Vrne »true«, če je vrednost najdena na seznamu, sicer vrne »false«. Določite lahko izbirno vrednost kriterijev enakosti <code>equationCriteria</code> za nadzor preskušanja enakosti. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali seznam {1, 2, 3, 4, 5} vsebuje vrednosti 3 in 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali seznam {1, 2, 3, 4, 5} vsebuje vrednosti 5 in 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Označuje, kje seznam vključuje katero koli vrednost na drugem seznamu.",
        "Documentation.LongDescription": "Označuje, ali seznam <code>list</code> vključuje katero koli vrednost na drugem seznamu, <code>values</code>.\r\n        Vrne »true«, če je vrednost najdena na seznamu, sicer vrne »false«. Določite lahko izbirno vrednost kriterijev enakosti <code>equationCriteria</code> za nadzor preskušanja enakosti. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali seznam {1, 2, 3, 4, 5} vsebuje vrednost 3 ali 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali seznam {1, 2, 3, 4, 5} vsebuje vrednost 6 ali 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Vrne kovarianco med dvema seznamoma števil.",
        "Documentation.LongDescription": "Vrne kovarianco med dvema seznamoma, <code>numberList1</code> in <code>numberList2</code>. <code>numberList1</code> in <code>numberList2</code> morata vsebovati enako število vrednosti <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Izračunajte kovarianco med dvema seznamoma.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Vrne razliko dveh danih seznamov.",
        "Documentation.LongDescription": "Vrne elemente na seznamu <code>list1</code>, ki niso prikazani na seznamu <code>list2</code>. Podvojene vrednosti so podprte.\r\n    Določite lahko izbirno vrednost kriterijev enakosti <code>equationCriteria</code> za nadzor preskušanja enakosti. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite elemente na seznamu {1, 2, 3, 4, 5}, ki niso prikazani na seznamu {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Poiščite elemente na seznamu {1, 2}, ki niso prikazani na seznamu {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Vrne seznam vrednosti (vključno s polji zapisov), ki vsebujejo navedeno besedilo.",
        "Documentation.LongDescription": "Vrne seznam vrednosti iz seznama <code>list</code>, ki je vseboval vrednost <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite besedilne vrednosti na seznamu {\"a\", \"b\", \"ab\"}, ki se ujemajo z \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Vrne prvi nabor elementov na seznamu, tako da določi število vrnjenih elementov ali ustrezen pogoj.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Če navedete število, je vrnjenih največ toliko elementov. </li>\r\n  <li>Če navedete pogoj, so vrnjeni vsi elementi, ki prvotno izpolnjujejo pogoj. Ko določen element ne izpolnjuje več pogoja, nadaljnji elementi niso upoštevani. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite začetne vrednosti na seznamu {3, 4, 5, -1, 7, 8, 2}, ki so večje od 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Vrne »true«, če je funkcija »condition« zadovoljna z vsemi vrednostmi na seznamu.",
        "Documentation.LongDescription": "Vrne <code>true</code>, če je funkcija »condition«, <code>condition</code>, zadovoljna z vsemi vrednostmi na seznamu <code>list</code>, sicer vrne <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali so vse vrednosti na seznamu {11, 12, 13} večje od 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali so vse vrednosti na seznamu {1, 2, 3} večje od 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Vrne »true«, če je funkcija »condition« zadovoljna s katero koli vrednostjo.",
        "Documentation.LongDescription": "Vrne <code>true</code>, če je funkcija »condition«, <code>condition</code>, zadovoljna s katero koli vrednostjo na seznamu <code>list</code>, sicer vrne <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali je katera od vrednosti na seznamu {9, 10, 11} večja od 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali je katera od vrednosti na seznamu {1, 2, 3} večja od 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Vrne največje vrednosti na seznamu. Navesti je treba število vrednosti, ki bodo vrnjene, ali pogoj filtriranja.",
        "Documentation.LongDescription": "Vrne največje vrednosti na seznamu, <code>list</code>.\r\n ko so vrstice razvrščene, lahko izberete izbirne parametre za nadaljnje filtriranje rezultata. Izbirni parameter <code>countOrCondition</code> določa število vrnjenih vrednosti ali pogoj filtriranja. Izbirni parameter <code>comparisonCriteria</code> določa način primerjave vrednosti na seznamu.\r\n <ul>\r\n <li> <code>list</code>: Seznam vrednosti.</li>\r\n <li> <code>countOrCondition</code>: Če je določeno število, je vrnjen seznam največ <code>countOrCondition</code> elementov v naraščajočem vrstnem redu. Če je določen pogoj, je vrnjen seznam elementov, ki prvotno izpolnjujejo pogoj. Ko element ne uspe, se obravnava noben element.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Izbirno]</i> Določite lahko izbirno vrednost <code>comparisonCriteria</code>, da določite način primerjave elementov na seznamu. Če je vrednost tega parametra ničelna, je uporabljen privzeti primerjalnik.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Vrne najmanjše vrednosti na seznamu. Navedeno je lahko število vrednosti, ki bodo vrnjene, ali pogoj filtriranja.",
        "Documentation.LongDescription": "Vrne najmanjše vrednosti na seznamu, <code>list</code>.\r\n Parameter, <code>countOrCondition</code>, določa število vrednosti, ki bodo vrnjene, ali pogoj filtriranja. Izbirni parameter <code>comparisonCriteria</code>, določa, kako primerjate vrednosti na seznamu.\r\n <ul>\r\n <li> <code>list</code>: Seznam vrednosti.</li>\r\n <li> <code>countOrCondition</code>: Če je določeno število, je vrnjen seznam največ <code>countOrCondition</code> elementov v naraščajočem vrstnem redu. Če je določen pogoj, je vrnjen seznam elementov, ki prvotno izpolnjujejo pogoj. Ko element ne uspe, se obravnava noben element več. Če je ta parameter ničeln, je vrnjena ena najmanjša vrednost na seznamu.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Izbirno]</i> Določite lahko izbirno vrednost <code>comparisonCriteria</code>, da določite način primerjave elementov na seznamu. Če je vrednost tega parametra ničelna, je uporabljen privzeti primerjalnik.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Poiščite 5 najmanjših vrednosti na seznamu <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Vrne seznam števil, če navedete začetno vrednost, število in izbirni prirastek.",
        "Documentation.LongDescription": "Vrne seznam števil, če navedete začetno vrednost, število in izbirni prirastek. Privzeti prirastek je 1.\r\n<ul>\r\n   <li><code>start</code>: začetna vrednost na seznamu.</li>\r\n   <li><code>count</code>: število vrednosti, ki bodo ustvarjene.</li>\r\n   <li><code>increment</code>: <i>[izbirno]</i> vrednost prirastka. Če to izpustite, se vrednosti povečajo za 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam 10 zaporednih števil, ki se začne z 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Ustvarite seznam 10 števil, ki se začne z 1, pri čemer se vsako naslednje število poveča za 2.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Vrne enega ali več vzorčnih percentilov, ki ustrezajo navedenim verjetnostnim.",
        "Documentation.LongDescription": "Vrne enega ali več vzorčnih percentilov seznama <code>list</code>. Če je vrednost <code>percentiles</code> številka med 0,0 in 1,0, bo obravnavana kot percentil, zato bo rezultat\r\n    enojna vrednost, ki ustreza tej verjetnosti. Če je vrednost <code>percentiles</code> seznam številk z vrednostmi med 0,0 in 1,0, bo rezultat seznam percentilov,\r\n    ki ustreza verjetnosti vnosa. Izkušeni uporabniki lahko uporabijo možnost »PercentileMode« v <code>options</code>, da izberejo dolj določen način interpolacije, vendar ta možnost ni priporočena za večino uporabnikov.\r\n    Vnaprej določena simbola <code>PercentileMode.ExcelInc</code> in <code>PercentileMode.ExcelExc</code> sta enaka kot načini interpolacije, ki jih uporabljata Excelovi funkciji\r\n    <code>PERCENTILE.INC</code> in <code>PERCENTILE.EXC</code>. Privzeti način delovanja je enak kot pri <code>PercentileMode.ExcelInc</code>. Simbola\r\n    <code>PercentileMode.SqlCont</code> in <code>PercentileMode.SqlDisc</code> sta enaka delovanju v strežniku SQL Server za <code>PERCENTILE_CONT</code> in\r\n    <code>PERCENTILE_DISC</code>.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Poiščite prvi kvartil seznama <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Poiščite kvartile seznama <code>{5, 3, 1, 7, 9}</code> z uporabo načina interpolacije, ki se ujema z Excelovo funkcijo <code>PERCENTILE.EXC</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Vrne odmike vrednosti na seznamu.",
        "Documentation.LongDescription": "Vrne odmik, v katerem je vrednost <code>value</code> prikazana na seznamu <code>list</code>. Vrne –1, če vrednost ni prikazana. \r\n    Določite lahko izbirni parameter pojavitve <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: največje število pojavitev, ki bodo sporočene.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Poiščite položaj na seznamu {1, 2, 3}, na katerem je prikazana vrednost 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Vrne prvi odmik vrednosti na seznamu.",
        "Documentation.LongDescription": "Vrne odmik na seznamu <code>list</code> za prvo pojavitev vrednosti na seznamu <code>values</code>. Vrne –1, če ni najdena nobena pojavitev.\r\n    Določite lahko izbirni parameter pojavitve <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: največje število pojavitev, ki so lahko vrnjene.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Poiščite prvi položaj na seznamu {1, 2, 3}, na katerem je prikazana vrednost 2 ali 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Vrne podnabor seznama, ki se začne v odmiku.",
        "Documentation.LongDescription": "Vrne podnabor seznama, ki se začne v odmiku <code>list</code>. Izbirni parameter <code>offset</code> nastavi največje število elementov v podnaboru.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite podnabor, ki se začne v odmiku 6 na seznamu števil od 1 do 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Poiščite podnabor z dolžino 2 iz odmika 6 na seznamu števil od 1 do 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Odstrani elemente iz »list1«, ki so na seznamu.",
        "Documentation.LongDescription": "Odstrani vse pojavitve danih vrednosti na seznamu <code>list2</code> iz seznama <code>list1</code>. Če vrednosti na seznamu <code>list2</code> ne obstajajo na seznamu <code>list1</code>, je vrnjen izvirni seznam.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Odstranite elemente na seznamu {2, 4, 6} iz seznama {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Odstrani vse pojavitve vhodnih vrednosti.",
        "Documentation.LongDescription": "Odstrani vse pojavitve danih vrednosti na seznamu <code>list2</code> iz seznama <code>list1</code>. Če vrednosti na seznamu <code>list2</code> ne obstajajo na seznamu <code>list1</code>, je vrnjen izvirni seznam.\r\n    Določite lahko izbirno vrednost kriterijev enakosti <code>equationCriteria</code> za nadzor preskušanja enakosti. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam iz {1, 2, 3, 4, 5, 5} brez {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Odstrani število vrednosti z začetkom na navedenem položaju.",
        "Documentation.LongDescription": "Odstrani <code>count</code> vrednosti na seznamu <code>list</code> z začetkom na navedenem položaju, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Odstranite 3 vrednosti na seznamu {1, 2, 3, 4, -6, -2, -1, 5} z začetkom v indeksu 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Vrne seznam, ki vsebuje »count« ponovitev izvirnega seznama.",
        "Documentation.LongDescription": "Vrne seznam, ki vsebuje <code>count</code> ponovitev izvirnega seznama, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam, v katerem se {1, 2} ponovi trikrat.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Uporabi vsako zamenjavo v obliki { old, new }.",
        "Documentation.LongDescription": "Zamenja seznam <code>list</code>, kot je navedeno. Postopek zamenjave <code>replacements</code> je sestavljen iz seznama dveh vrednosti – stare in nove vrednosti, ki sta podani na seznamu.\r\n    Določite lahko izbirno vrednost kriterijev enakosti <code>equationCriteria</code> za nadzor preskušanja enakosti.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam iz {1, 2, 3, 4, 5} ter zamenjajte vrednost 5 z vrednostjo –5 in vrednost 1 z vrednostjo –1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Vrne seznam vrednosti, ki ustrezajo pogoju.",
        "Documentation.LongDescription": "Vrne seznam vrednosti iz seznama <code>list</code>, ki ustrezajo pogoju izbire <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednosti na seznamu {1, -3, 4, 9, -2}, ki so večje od 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Razdeli navedeni seznam na seznam seznamov z uporabo navedene velikosti strani.",
        "Documentation.LongDescription": "Razdeli <code>list</code> na seznam seznamov, kjer je prvi element seznama rezultatov seznam, ki vsebuje prvih <code>pageSize</code> elementov iz \r\n    izvornega seznama, naslednji element seznama rezultatov pa vsebuje naslednjih <code>pageSize</code> elementov iz izvornega seznama itd.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Vrne nov seznam vrednosti, izračunanih iz tega seznama.",
        "Documentation.LongDescription": "Vrne nov seznam vrednosti, tako da uporabi funkcijo pretvorbe <code>transform</code> za seznam, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Dodajte 1 vsaki vrednosti na seznamu {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Vrne arkus tangens deljenja dveh števil.",
        "Documentation.LongDescription": "Vrne arkus tangens deljenja dveh števil, <code>y</code> in <code>x</code>. Deljenje bo v obliki <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Vrne rezultat izvajanja bitne operacije »And« med dvema vnosoma.",
        "Documentation.LongDescription": "Vrne rezultat izvajanja bitne operacije »And« med <code>number1</code> in <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Vrne rezultat izvajanja bitne operacije »Or« med dvema vnosoma.",
        "Documentation.LongDescription": "Vrne rezultat izvajanja bitne operacije »Or« med <code>number1</code> in <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Premakne nabor bitov v levo.",
        "Documentation.LongDescription": "Vrne rezultat izvajanja bitnega premika v levo za <code>number1</code> za navedeno število bitov <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Premakne nabor bitov v desno.",
        "Documentation.LongDescription": "Vrne rezultat izvajanja bitnega premika v desno za <code>number1</code> za navedeno število bitov <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Vrne rezultat izvajanja bitne operacije »XOR« (Exclusive-OR) med dvema vnosoma.",
        "Documentation.LongDescription": "Vrne rezultat izvajanja bitne operacije »XOR« (Exclusive-OR) med <code>number1</code> in <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Vrne število enoličnih kombinacij.",
        "Documentation.LongDescription": "Vrne število enoličnih kombinacij iz seznama elementov <code>setSize</code> z določeno velikostjo kombinacije <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: število elementov na seznamu.</li>\r\n    <li><code>combinationSize</code>: število elementov v vsaki kombinaciji.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite število kombinacij iz skupno 5 elementov, pri čemer je vsaka kombinacija skupina 3 elementov.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Deli dve števili in vrne del celega števila rezultata.",
        "Documentation.LongDescription": "Vrne del celega števila rezultata deljenja števila <code>number1</code> s številom <code>number2</code>.\r\n    Če ima <code>number1</code> ali <code>number2</code> ničelno vrednost, <code>Number.IntegerDivide</code> vrne »null«.\r\n      <ul>\r\n        <li><code>number1</code>: deljenec.</li>\r\n        <li><code>number2</code>: delitelj.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Delite število 6 s številom 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Delite število 8,3 s številom 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Celo število deli dve števili in vrne ostanek.",
        "Documentation.LongDescription": "Vrne ostanek deljenja celega števila <code>number</code> s številom <code>divisor</code>. \r\n    Če ima <code>number</code> ali <code>divisor</code> ničelno vrednost, <code>Number.Mod</code> vrne »null«.\r\n      <ul>\r\n        <li><code>number</code>: deljenec.</li>\r\n        <li><code>divisor</code>: delitelj.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite ostanek deljenja števila 5 s številom 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Vrne število permutacij.",
        "Documentation.LongDescription": "Vrne število permutacij, ki jih je mogoče ustvariti iz števila elementov <code>setSize</code> z določeno velikostjo permutacije <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite število permutacij iz skupno 5 elementov v skupinah po 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Potencira število na dani eksponent.",
        "Documentation.LongDescription": "Vrne rezultat potenciranja števila <code>number</code> na eksponent <code>power</code>.\r\n    Če ima <code>number</code> ali <code>power</code> ničelno vrednost, <code>Number.Power</code> vrne »null«.\r\n      <ul>\r\n        <li><code>number</code>: osnova.</li>\r\n        <li><code>power</code>: eksponent.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost števila 5 na potenco 3 (5 na tretjo).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Vrne naključno število med dvema številoma.",
        "Documentation.LongDescription": "Vrne naključno število med <code>bottom</code> in <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Poiščite naključno število med 1 in 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Vrne vrednost navedenega polja v zapisu.",
        "Documentation.LongDescription": "Vrne vrednost navedenega polja <code>field</code> v zapisu <code>record</code>. Če polja ni mogoče najti, pride do izjeme.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost polja »IDStranke« v zapisu.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Vrne vrednost navedenega polja v zapisu ali privzeto vrednost, če polja ni mogoče najti.",
        "Documentation.LongDescription": "Vrne vrednost navedenega polja <code>field</code> v zapisu <code>record</code>. Če polja ni mogoče najti, je vrnjena izbirna vrednost <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost polja »Telefon« v zapisu ali vrnite ničelno vrednost, če ne obstaja.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Poiščite vrednost polja »Telefon« v zapisu ali vrnite privzeto vrednost, če ne obstaja.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Vrne zapis, če navedete seznam vrednosti polj in nabor polj.",
        "Documentation.LongDescription": "Vrne zapis, če navedete seznam <code>list</code> vrednosti polj in nabor polj.  <code>fields</code> je lahko določen s seznamom besedilnih vrednosti ali z vrsto zapisa.  Če polja niso enolična, pride do napake.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite zapis iz seznama vrednosti polj in seznama imen polj.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Ustvarite zapis iz seznama vrednosti polj in vrste zapisa.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Označuje, ali ima zapis navedena polja.",
        "Documentation.LongDescription": "Označuje, ali ima zapis <code>record</code> polja, navedena v <code>fields</code>, tako da vrne logično vrednost (»true« ali »false«).\r\n    S seznamom lahko navedete več vrednosti polj.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Preverite, ali zapis vsebuje polje »IDStranke«.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Preverite, ali zapis vsebuje polji »IDStranke« in »Telefon«.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Odstrani navedena polja iz vhodnega zapisa.",
        "Documentation.LongDescription": "Vrne zapis, ki odstrani vsa polja, navedena na seznamu <code>fields</code> iz vnosa <code>record</code>. Če navedeno polje ne obstaja, pride do izjeme.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odstranite polje »Cena« iz zapisa.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Odstranite polji »Cena« in »Izdelek« iz zapisa.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Uporabi preimenovanja iz seznama v obliki { old, new }.",
        "Documentation.LongDescription": "Vrne zapis po preimenovanju polj v vnosu <code>record</code> v nova imena polj, navedena na seznamu <code>renames</code>. Za več preimenovanj lahko uporabite ugnezdeni seznam ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preimenujte polje »CenaEnote« v »Cena« v zapisu.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Preimenujte polje »CenaEnote« v »Cena« in polje »ŠtNaročila« v »IDNaročila« v zapisu.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Preuredi navedena polja v nov vrstni red.",
        "Documentation.LongDescription": "Vrne zapis po preurejanju polj v <code>record</code> v vrstni red polj, navedenih na seznamu <code>fieldOrder</code>. Vrednosti polj so ohranjene in polja, ki niso navedena v <code>fieldOrder</code>, ostanejo na prvotnem položaju.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Prerazvrstite nekaj polj v zapisu.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Vrne zapis, ki vsebuje le navedena polja.",
        "Documentation.LongDescription": "Vrne zapis, ki vključuje le polja, navedena na seznamu <code>fields</code> iz zapisa <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Izberite polji »Izdelek« in »Cena« v zapisu.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Vrne zapis po uporabi navedenih pretvorb.",
        "Documentation.LongDescription": "Vrne zapis po uporabi pretvorb, navedenih na seznamu <code>transformOperations</code>, za <code>record</code>.\r\n    Ob danem času lahko pretvorite eno ali več polj.\r\n      <div>Pri pretvorbi enega polja se pričakuje, da je <code>transformOperations</code> seznam z dvema elementoma. Prvi element v <code>transformOperations</code> določa ime polja, drugi element v <code>transformOperations</code> pa določa funkcijo, ki bo uporabljena za pretvorbo. Na primer: <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Pri pretvorbi več polj se pričakuje, da je <code>transformOperations</code> seznam seznamov, pri čemer je vsak notranji seznam par imena polja in postopka pretvorbe. Na primer: <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite polje »Cena« v število.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Pretvorite polji »IDNaročila« in »Cena« v števila.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Vrne funkcijo, ki razdeli besedilo na seznam besedila v skladu s prehodom iz ene vrste znaka v drugo. Parametra {0} in {1} sta lahko seznam znakov ali funkcija, ki vzame znak in vrne vrednost »true/false«.",
        "Documentation.LongDescription": "Vrne funkcijo, ki razdeli besedilo na seznam besedila v skladu s prehodom iz ene vrste znaka v drugo. Parametra <code>before</code> in <code>after</code> sta lahko seznam znakov ali funkcija, ki vzame znak in vrne vrednost »true/false«.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite vnos vsakič, ko števkam sledi velika ali male črke.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Pretvori navedeno poizvedbo SQL v kodo M. Ta funkcija je namenjena le interni uporabi.",
        "Documentation.LongDescription": "Pretvori podano poizvedbo <code>sql</code> V kodo M z razpoložljivimi identifikatorji, ki jih <code>environment</code>. Ta funkcija je namenjena le interni uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Vrne navedeni stolpec podatkov iz tabele kot seznam.",
        "Documentation.LongDescription": "Vrne stolpec podatkov, ki ga določa <code>column</code>, iz tabele <code>table</code> kot seznam.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vrne vrednosti iz stolpca [Ime] v tabeli.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Vrne seznam z imeni stolpcev, ki se ujemajo z navedenimi vrstami.",
        "Documentation.LongDescription": "Vrne seznam z imeni stolpcev iz tabele <code>table</code>, ki se ujemajo z vrstami, navedenimi v <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vrne imena stolpcev vrste »Number.Type« iz tabele.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Označuje, ali je navedeni zapis prikazan kot vrstica v tabeli.",
        "Documentation.LongDescription": "Označuje, ali je navedeni zapis, <code>row</code>, prikazan kot vrstica v <code>table</code>.\r\n    Določite lahko izbirni parameter <code>equationCriteria</code> za nadzor primerjave med vrsticami tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali tabela vsebuje vrstico.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali tabela vsebuje vrstico.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ugotovite, ali tabela vsebuje vrstico, tako da primerjate samo stolpec [Ime].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Označuje, ali so vsi navedeni zapisi prikazani kot vrstice v tabeli.",
        "Documentation.LongDescription": "Označuje, ali so vsi navedeni zapisi na seznamu zapisov <code>rows</code> prikazani kot vrstice v <code>table</code>.\r\n    Določite lahko izbirni parameter <code>equationCriteria</code> za nadzor primerjave med vrsticami tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali tabela vsebuje vse vrstice, tako, da primerjate samo stolpec [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali tabela vsebuje vse vrstice.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Označuje, ali je kateri od navedenih zapisov prikazan kot vrstica v tabeli.",
        "Documentation.LongDescription": "Označuje, ali je kateri od navedenih zapisov na seznamu zapisov <code>rows</code> prikazan kot vrstica v <code>table</code>.\r\n    Določite lahko izbirni parameter <code>equationCriteria</code> za nadzor primerjave med vrsticami tabele.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> vsebuje vrstico <code>[a = 1, b = 2]</code> ali <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> vsebuje vrstico <code>[a = 1, b = 3]</code> ali <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ugotovite, ali tabela <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> vsebuje vrstico <code>[a = 1, b = 3]</code> ali <code>[a = 3, b = 5]</code>, s primerjavo le stolpca [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Označuje, ali tabela vsebuje navedene stolpce.",
        "Documentation.LongDescription": "Označuje, ali tabela <code>table</code> vsebuje navedene stolpce, <code>columns</code>. Vrne <code>true</code>, če tabela vsebuje stolpce, sicer vrne <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali tabela vsebuje stolpec [Ime].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali tabela vsebuje stolpca [Ime] in [TelefonskaŠtevilka].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Označuje, ali vse vrstice v tabeli izpolnjujejo dani pogoj.",
        "Documentation.LongDescription": "Označuje, ali vse vrstice v tabeli <code>table</code> ustrezajo danemu pogoju <code>condition</code>. Vrne <code>true</code>, če vse vrstice ustrezajo pogoju, sicer vrne <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali so vse vrednosti vrstic v stolpcu [a] soda števila v tabeli.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali so vse vrednosti vrstic [a = 1, b = 2] v tabeli <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Označuje, ali katera od vrstic v tabeli izpolnjuje dani pogoj.",
        "Documentation.LongDescription": "Označuje, ali katera od vrstic v tabeli <code>table</code> ustreza danemu pogoju <code>condition</code>. Vrne <code>true</code>, če katera od vrstic ustreza pogoju, sicer vrne <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali je katera od vrednosti vrstic v stolpcu [a] sodo število v tabeli <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ugotovite, ali je katera od vrednosti vrstic [a = 1, b = 2] v tabeli <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Vrne največjo vrstico ali privzeto vrednost glede na dane kriterije.",
        "Documentation.LongDescription": "Vrne največjo vrstico v tabeli <code>table</code>, če navedete <code>comparisonCriteria</code>. Če je tabela prazna, je vrnjena izbirna vrednost <code>default</code>. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrstico z največjo vrednostjo v stolpcu [a] v tabeli <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Poiščite vrstico z največjo vrednostjo v stolpcu [a] v tabeli <code>({})</code>. Vrnite –1, če je tabela prazna.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Vrne najmanjšo vrstico ali privzeto vrednost glede na dane kriterije.",
        "Documentation.LongDescription": "Vrne najmanjšo vrstico v tabeli <code>table</code>, če navedete <code>comparisonCriteria</code>. Če je tabela prazna, je vrnjena izbirna vrednost <code>default</code>.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrstico z najmanjšo vrednostjo v stolpcu [a] v tabeli.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Poiščite vrstico z najmanjšo vrednostjo v stolpcu [a] v tabeli. Vrnite –1, če je tabela prazna.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Vrne položaj ali položaje vrstice v tabeli.",
        "Documentation.LongDescription": "Vrne položaj vrstice za prvo pojavitev vrstice <code>row</code> v navedeni tabeli <code>table</code>. Vrne –1, če ni najdena nobena pojavitev.\r\n    <ul>\r\n       <li><code>table</code>: vhodna tabela.</li>\r\n       <li><code>row</code>: vrstica v tabeli, za katero bo poiskan položaj.</li>\r\n       <li><code>occurrence</code>: <i>[izbirno]</i> določa, katere pojavitve vrstice bodo vrnjene.</li>\r\n       <li><code>equationCriteria</code>: <i>[izbirno]</i> nadzoruje primerjavo med vrsticami tabele.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Poiščite položaj prve pojavitve vrstice [a = 2, b = 4] v tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Poiščite položaj druge pojavitve vrstice [a = 2, b = 4] v tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Poiščite položaj vseh pojavitev vrstice [a = 2, b = 4] v tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Vrne položaj ali položaje katere koli navedene vrstice v tabeli.",
        "Documentation.LongDescription": "Vrne položaje vrstic iz tabele <code>table</code> za prvo pojavitev seznama vrstic <code>rows</code>. Vrne –1, če ni najdena nobena pojavitev.\r\n    <ul>\r\n    <li><code>table</code>: vhodna tabela.</li>\r\n       <li><code>rows</code>: seznam vrstic v tabeli, za katere bodo poiskani položaji.</li>\r\n       <li><code>occurrence</code>: <i>[izbirno]</i> določa, katere pojavitve vrstice bodo vrnjene.</li>\r\n       <li><code>equationCriteria</code>: <i>[izbirno]</i> nadzoruje primerjavo med vrsticami tabele.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Poiščite položaj prve pojavitve vrstice [a = 2, b = 4] ali [a = 6, b = 8] v tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Poiščite položaj vseh pojavitev vrstice [a = 2, b = 4] ali [a = 6, b = 8] v tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Razdeli navedeno tabelo na seznam tabel z uporabo navedene velikosti strani.",
        "Documentation.LongDescription": "Razdeli <code>table</code> na seznam tabel, kjer je prvi element seznama tabela, ki vsebuje prvih <code>pageSize</code> vrstic iz\r\n    izvorne tabele, naslednji element seznama pa je tabela, ki vsebuje naslednjih <code>pageSize</code> vrstic iz izvorne tabele itd.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Razdeli tabelo s petimi zapisi na tabele, v katerih sta v vsaki tabeli dva zapisa.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Vrne seznam, ki vsebuje določene prve vrstice in preostale vrstice.",
        "Documentation.LongDescription": "Vrne seznam, ki vsebuje dve tabeli: tabelo s prvimi vrsticami N za <code>table</code> (kot določa <code>count</code>) in tabelo s preostalimi vrsticami za <code>table</code>.\r\n\r\nČe sta tabeli na seznamu oštevilčeni točno enkrat in v ustreznem vrstnem redu, bo funkcija oštevilčila <code>table</code> samo enkrat.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vrne prvi dve vrstici tabele in preostale vrstice tabele.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Pretvori vrstice tabele z določeno funkcijo pretvorbe.",
        "Documentation.LongDescription": "Ustvari <code>list</code> tako, da uporabi operacijo <code>transform</code> za vsako vrstico v <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite vrstice tabele v seznam števil.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Pretvorite vrstice številske tabele v besedilne zapise.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Vrne del števila <code>text</code> za navedenim številom <code>delimiter</code>.\r\n    Izbirna številska vrednost <code>index</code> označuje, katero ponovitev števila <code>delimiter</code> je treba upoštevati.\r\n    Izbirni seznam <code>index</code> označuje, katero ponovitev števila <code>delimiter</code> je treba upoštevati, in ali je treba indeksiranje izvesti od začetka ali konca vnosa.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pridobite del števila »111-222-333« za (prvim) vezajem.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Pridobite del števila »111-222-333« za drugim vezajem.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Pridobite del števila »111-222-333« za drugim vezajem od konca.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Vrne znak na navedenem položaju.",
        "Documentation.LongDescription": "Vrne znak v besedilni vrednosti <code>text</code> na položaju <code>index</code>. Prvi znak v besedilu je na položaju 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Poiščite znak s položajem 4 v nizu »Hello, World«.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Vrne del števila <code>text</code> pred navedenim številom <code>delimiter</code>.\r\n    Izbirna številska vrednost <code>index</code> označuje, katero ponovitev števila <code>delimiter</code> je treba upoštevati.\r\n    Izbirni seznam <code>index</code> označuje, katero ponovitev števila <code>delimiter</code> je treba upoštevati, in ali je treba indeksiranje izvesti od začetka ali konca vnosa.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pridobite del števila »111-222-333« pred (prvim) vezajem.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Pridobite del števila »111-222-333« pred drugim vezajem.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Pridobite del števila »111-222-333« pred drugim vezajem od konca.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Vrne podatek, ali besedilo vsebuje podniz.",
        "Documentation.LongDescription": "Zazna, ali <code>text</code> vsebuje vrednost <code>substring</code>. Vrne »true«, če je najdena vrednost. Ta funkcija ne podpira nadomestnih znakov ali regularnih izrazov.\r\n      <br>\r\n      <br>\r\n Izbirni argument <code>comparer</code> lahko uporabite za določanje primerjav, ki ne razlikujejo med velikimi in malimi črkami, ali kulture in območnih nastavitev.\r\n V jeziku formule so na voljo ti vgrajeni primerjalniki:\r\n <ul>\r\n <li><code>Comparer.Ordinal</code>: Uporablja se za izvajanje primerjave vrstnega števnika, občutljivega na velike in male črke</li>\r\n <li><code>Comparer.OrdinalIgnoreCase</code>:  Uporablja se za primerjavo vrstilnih števnikov</li>\r\n <li><code>Comparer.FromCulture</code></li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali besedilo »Hello World« vsebuje »Hello«.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali besedilo »Hello World« vsebuje »hello«.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Ugotovite, ali besedilo »Pozdravljen, svet« vsebuje »pozdravljen«, pri tem pa uporabite primerjalnik, ki ne razlikuje med velikimi in malimi črkami.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Vrne zadnje znake besedila.",
        "Documentation.LongDescription": "Vrne <code>text</code> vrednost, ki predstavlja zadnjih <code>count</code> znakov <code>text</code> vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Poiščite zadnjih 5 znakov besedila »Hello, World«.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Označuje, ali se besedilo konča v navedeni vrednosti.",
        "Documentation.LongDescription": "Označuje, ali se navedeno besedilo <code>text</code> konča z navedeno vrednostjo, <code>substring</code>. Oznaka razlikuje med velikimi in malimi črkami.\r\n\r\n      <div>\r\n        <code>comparer</code> je <code>Comparer</code>, ki se uporablja za nadzor primerjave. S primerjalniki je mogoče določiti primerjave, ki ne razlikujejo med velikimi in malimi črkami oziroma upoštevajo kulturo ali območne nastavitve.\r\n      </div>\r\n      <div>\r\n        Za jezik formule so na voljo ti vgrajeni primerjalniki:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: uporablja se za natančno primerjavo vrstilnih števnikov</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: uporablja se za natančno primerjavo vrstilnih števnikov, ki ne razlikuje med velikimi in malimi črkami</li>\r\n        <li> <code>Comparer.FromCulture</code>: uporablja se za primerjavo, ki upošteva kulturo</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Preverite, ali se »Hello, World« konča z »world«.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Preverite, ali se »Hello, World« konča z »World«.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Vrne oblikovano besedilo iz niza oblike in argumentov.",
        "Documentation.LongDescription": "Vrne oblikovano besedilo, ki je ustvarjeno z uporabo parametra <code>arguments</code> s seznama ali iz zapisa v nizu oblike <code>formatString</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Oblikuje seznam številk.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Oblikuje druge podatkovne tipe iz zapisa glede na angleško kulturo (Združene države).",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Vrne podniz do določene dolžine.",
        "Documentation.LongDescription": "Vrne <code>count</code> znakov ali do konca <code>text</code> pri odmiku <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Poiščite podniz iz besedila »Hello World«, ki se začne z indeksom 6 v razponu 5 znakov.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Poiščite podniz iz besedila »Hello World«, ki se začne z indeksom 6 do konca.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Vrne besedilo z navedeno dolžino, tako da zapolni konec danega besedila.",
        "Documentation.LongDescription": "Vrne <code>text</code> vrednost s polnilom do dolžine <code>count</code>, tako da vstavi presledke na koncu besedilne vrednosti <code>text</code>.\r\n    Z izbirnim znakom <code>character</code> lahko določite znak, ki bo uporabljen za zapolnjevanje. Privzeti znak polnila je presledek.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Zapolnite konec besedilne vrednosti, da bo njena dolžina 10 znakov.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Zapolnite konec besedilne vrednosti z »|«, da bo njena dolžina 10 znakov.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Vrne besedilo z navedeno dolžino, tako da zapolni začetek danega besedila.",
        "Documentation.LongDescription": "Vrne <code>text</code> vrednost s polnilom do dolžine <code>count</code>, tako da vstavi presledke na začetku besedilne vrednosti <code>text</code>.\r\n    Z izbirnim znakom <code>character</code> lahko določite znak, ki bo uporabljen za zapolnjevanje. Privzeti znak polnila je presledek.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Zapolnite začetek besedilne vrednosti, da bo njena dolžina 10 znakov.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Zapolnite začetek besedilne vrednosti z »|«, da bo njena dolžina 10 znakov.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Vrne prvi položaj vrednosti (–1, če ni najden).",
        "Documentation.LongDescription": "Vrne položaj navedene ponovitve besedilne vrednosti <code>substring</code>, ki je najdena v <code>text</code>.\r\n    Z izbirnim parametrom <code>occurrence</code> lahko določite, kateri položaj ponovitve bo vrnjen (privzeto je vrnjena prva ponovitev).\r\n    Vrne -1, če <code>substring</code> ni mogoče najti.\r\n\r\n      <div>\r\n        <code>comparer</code> je <code>Comparer</code>, ki se uporablja za nadzor primerjave. S primerjalniki je mogoče določiti primerjave, ki ne razlikujejo med velikimi in malimi črkami oziroma upoštevajo kulturo ali območne nastavitve.\r\n      </div>\r\n      <div>\r\n        Za jezik formule so na voljo ti vgrajeni primerjalniki:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: uporablja se za natančno primerjavo vrstilnih števnikov</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: uporablja se za natančno primerjavo vrstilnih števnikov, ki ne razlikuje med velikimi in malimi črkami</li>\r\n        <li> <code>Comparer.FromCulture</code>: uporablja se za primerjavo, ki upošteva kulturo</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Poiščite položaj prve pojavitve besede »World« v besedilu »Hello, World! Hello, World!«.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Poiščite položaj zadnje ponovitve besede »World« v besedilu »Hello, World! Hello, World!«.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Vrne prvi položaj v besedilni vrednosti katerega koli navedenega znaka (–1, če ni najden).",
        "Documentation.LongDescription": "Vrne prvi položaj katerega koli znaka na seznamu <code>characters</code>, ki je na voljo v <code>text</code>.\n    Z izbirnim parametrom <code>occurrence</code> lahko določite, kateri položaj pojavitve bo vrnjen.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Poiščite prvi položaj znaka »P« ali »s« v besedilu »Pozdravljen, svet!«.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Poiščite vse položaje znaka »Š« ali »s« v besedilu »Pozdravljen, svet!«.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Vrne podniz, ki je najden v odmiku.",
        "Documentation.LongDescription": "Vrne podniz iz besedila <code>text</code>, ki je najden v odmiku <code>offset</code>.\r\n    Z izbirnim parametrom <code>count</code> lahko določite, koliko znakov bo vrnjenih. Če ni dovolj znakov, se prikaže sporočilo o napaki.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Poiščite podniz iz besedila »Hello World«, ki se začne z indeksom 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Poiščite podniz iz besedila »Hello World Hello«, ki se začne z indeksom 6 v razponu 5 znakov.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Odstrani vse pojavitve danega znaka ali seznama znakov iz vhodne besedilne vrednosti.",
        "Documentation.LongDescription": "Vrne kopijo besedilne vrednosti <code>text</code>, iz katere so odstranjeni vsi znaki s položajem <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Odstranite znaka »,« in »;« iz besedilne vrednosti.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Odstrani število znakov z začetkom v danem odmiku.",
        "Documentation.LongDescription": "Vrne kopijo besedilne vrednosti <code>text</code>, iz katere so odstranjeni vsi znaki s položajem <code>offset</code>.\r\n    Z izbirnim parametrom <code>count</code> lahko določite, koliko znakov bo odstranjenih. Privzeta vrednost parametra <code>count</code> je 1. Vrednosti položajev se začnejo pri 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Odstranite 1 znak iz besedilne vrednosti »ABEFC« na položaju 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Odstranite dva znaka iz besedilne vrednosti »ABEFC« z začetkom na položaju 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Vrne besedilno vrednost, sestavljeno iz vhodnega besedila, ki se ponovi tolikokrat, kot je navedeno.",
        "Documentation.LongDescription": "Vrne besedilno vrednost, sestavljeno iz vhodnega besedila <code>text</code>, ki se ponovi <code>count</code>-krat.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Petkrat ponovite besedilo »a«.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Trikrat ponovite besedilo »helloworld«.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Izbere vse pojavitve danega znaka ali seznama znakov iz vhodne besedilne vrednosti.",
        "Documentation.LongDescription": "Vrne kopijo besedilne vrednosti <code>text</code>, iz katere so odstranjeni vsi znaki, ki niso v <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "V besedilni vrednosti izberite vse znake v območju od »a« do »ž«.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Razdeli besedilo v seznam besedilnih vrednosti glede na navedeno ločilo.",
        "Documentation.LongDescription": "Vrne seznam besedilnih vrednosti, ki nastane z razdelitvijo besedilne vrednosti <code>text</code> glede na navedeno ločilo, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam iz besedilne vrednosti »Name|Address|PhoneNumber«, ločene z »|«.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Vrne seznam besedilnih vrednosti, ki so razdeljene v katerem koli znaku v ločilu.",
        "Documentation.LongDescription": "Vrne seznam besedilnih vrednosti, ki nastane z razdelitvijo besedilne vrednosti <code>text</code> glede na kateri koli znak v navedenem ločilu, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam iz besedilne vrednosti »Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com«.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Vrne začetek besedila.",
        "Documentation.LongDescription": "Vrne prvih <code>count</code> znakov besedila <code>text</code> kot besedilno vrednost.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Poiščite prvih 5 znakov besedila »Hello, World«.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Označuje, ali se besedilo začne z navedeno vrednostjo.",
        "Documentation.LongDescription": "Vrne »true«, če se besedilna vrednost <code>text</code> začne z besedilno vrednostjo <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> vrednost <code>text</code>, ki bo iskana</li>\r\n        <li><code>substring</code>: <i></i> vrednost <code>text</code>, ki je podniz, ki bo iskan v <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Izbirno]</i> <code>Comparer</code>, ki se uporablja za nadzor primerjave. S <code>Comparer.OrdinalIgnoreCase</code> lahko na primer izvedete iskanje, ki ne razlikuje med velikimi in malimi črkami</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> je <code>Comparer</code>, ki se uporablja za nadzor primerjave. S primerjalniki lahko izvedete primerjave, ki ne razlikujejo črk, ali primerjave, ki upoštevajo kulturo in območne nastavitve.\r\n      </div>\r\n      <div>\r\n        Za jezik formule so na voljo ti vgrajeni primerjalniki:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: uporablja se za natančno primerjavo vrstilnih števnikov</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: uporablja se za natančno primerjavo vrstilnih števnikov, ki ne razlikuje med velikimi in malimi črkami</li>\r\n        <li> <code>Comparer.FromCulture</code>: uporablja se za primerjavo, ki upošteva kulturo</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Preverite, ali se besedilo »Hello, World« začne z besedilom »hello«.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Preverite, ali se besedilo »Hello, World« začne z besedilom »Hello«.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Vrne vrsto, ki predstavlja funkcije z določenim parametrom in omejitvami vrste vrnitve.",
        "Documentation.LongDescription": "Ustvari <code>vrsto funkcije</code> iz zapisa <code>signature</code>, zapis z <code>vrnjeno vrsto</code> in <code>parametri</code>, in števila <code>min</code>, najmanjšim številom argumentov, zahtevanih za poziv funkcije.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Ustvari vrsto za funkcije, ki prevzame številko parametra z imenom X, in vrne število.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Vrne vrsto, ki predstavlja zapise z omejitvami določene vrste v poljih.",
        "Documentation.LongDescription": "Vrne vrsto, ki predstavlja zapise z omejitvami določene vrste v poljih.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Dinamično ustvarite vrsto tabele.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Določi, ali je vrednost prvega tipa vedno združljiva z drugo vrsto.",
        "Documentation.LongDescription": "Določi, ali je vrednost <code>type1</code> vedno združljiva s <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali je vrednost števila tipa mogoče vedno obravnavati kot katero koli vrsto.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali je vrednost vrste lahko vedno obravnavana kot številka tipa.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Nadomesti fasete neke vrste.",
        "Documentation.LongDescription": "Nadomesti fasete za <code>type</code> s fasetami, ki so vsebovane v zapisu <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Vrne novo vrsto tabele, v kateri so vsi ključi zamenjani z navedenim seznamom ključev.",
        "Documentation.LongDescription": "Vrne novo vrsto tabele, v kateri so vsi ključi zamenjani z navedenim seznamom ključev.<br>\r\n    <br>\r\n    Vsak ključ je določen z zapisom v tej obliki:\r\n    <ul>\r\n      <li>\r\n        <code>Stolpci</code>: seznam imen stolpcev, ki določajo ključ\r\n      </li>\r\n      <li>\r\n        <code>Primarno</code>: <code>true</code>, če je ključ primarni ključ tabele; sicer <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Navedeni seznam ključev je preverjen. Na ta način je lahko določen le en primarni ključ in vsa imena stolpcev ključev so navedena v vrsti tabele.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte informacije o ključu v vrsti tabele.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Počistite informacije o ključu, ki so bili prej določene v vrsti tabele.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Vrne vrsto stolpca v tabeli.",
        "Documentation.LongDescription": "Vrne vrsto stolpca <code>column</code> v vrsti tabele <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Vrne absolutni URI, ki je kombinacija vhodnega osnovnega URI-ja in relativnega URI-ja.",
        "Documentation.LongDescription": "Vrne absolutni URI, ki je kombinacija vnosa <code>baseUri</code> in <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Vrne vsoto dveh vrednosti.",
        "Documentation.LongDescription": "Vrne vsoto vrednosti <code>value1</code> in <code>value2</code>. Določite lahko izbirni parameter <code>precision</code>; privzeto je uporabljen <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Vrne vrednost, če je združljiva z določeno vrsto.",
        "Documentation.LongDescription": "Vrne vrednost, če je združljiva z določeno vrsto. To je enakovredno operaterju \"as\" v M, z izjemo, da lahko sprejme sklice na vrsto identifikatorja, kot je Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Izvrzite število v število.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Poskusite izdati besedilno vrednost v število.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Vrne –1, 0 ali 1 glede na to, ali je prva vrednost manjša od, enaka ali večja od druge vrednosti.",
        "Documentation.LongDescription": "Vrne –1, 0 ali 1 glede na to, ali je prva vrednost manjša od, enaka ali večja od druge vrednosti.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Vrne rezultat deljenja prve vrednosti z drugo vrednostjo.",
        "Documentation.LongDescription": "Vrne rezultat deljenja vrednosti <code>value1</code> z vrednostjo <code>value2</code>. Določite lahko izbirni parameter <code>precision</code>; privzeto je uporabljen <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Vrne podatek, ali sta dve vrednosti enaki.",
        "Documentation.LongDescription": "Vrne »true«, če je vrednost <code>value1</code> enaka kot vrednost <code>value2</code>, sicer vrne »false«.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Določi, ali je vrednost združljiva z določeno vrsto.",
        "Documentation.LongDescription": "Določa, ali je vrednost združljiva z podano vrsto. To je enakovredno operaterju \"is\" v M, z izjemo, da lahko sprejme sklice na vrsto identifikatorja, kot je Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Primerjajte dva načina določanja, ali je število združljivo s številko tipa.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Vrne zmnožek dveh vrednosti.",
        "Documentation.LongDescription": "Vrne zmnožek vrednosti <code>value1</code> in <code>value2</code>. Določite lahko izbirni parameter <code>precision</code>; privzeto je uporabljen <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Ovrednoti poizvedbo v cilju.",
        "Documentation.LongDescription": "<p>Ovrednoti poizvedbo <code>query</code> v tabeli <code>target</code> s parametri, določenimi v <code>parameters</code>, in možnostmi, določenimi v <code>options</code>.</p>\r\n<p>Rezultat poizvedbe določa <code>target</code>.</p>\r\n<p><code>target</code> zagotavlja kontekst za postopek, ki ga opisuje <code>query</code>.</p>\r\n<p><code>query</code> opisuje poizvedbo, ki bo izvedena v tabeli <code>target</code>. <code>query</code> je izražen na način, ki je značilen za <code>target</code> (npr. poizvedba T-SQL).</p>\r\n<p>Izbirna vrednost <code>parameters</code> lahko vsebuje seznam ali zapis, kot je primerno, ki zagotavlja vrednosti parametrov, ki jih pričakuje <code>query</code>.</p>\r\n<p>Izbirni zapis <code>options</code> lahko vsebuje možnosti, ki vplivajo na način delovanja ovrednotenja poizvedbe <code>query</code> v tabeli <code>target</code>. Te možnosti so značilne za <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Vrne podatek, ali sta dve vrednosti enaki.",
        "Documentation.LongDescription": "Vrne »null«, če je argument »<code>value1</code>« ali »<code>value2</code>« ničeln, sicer je enako »Value.Equals«.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Zamenja informacije o metapodatkih vnosa.",
        "Documentation.LongDescription": "Zamenja informacije o metapodatkih vnosa.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Zamenja vrsto vrednosti.",
        "Documentation.LongDescription": "Zamenja vrsto <code>value</code> s podanim <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Zamenjajte privzeto vrsto zapisa z bolj določeno vrsto.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Vrne razliko dveh vrednosti.",
        "Documentation.LongDescription": "Vrne razliko vrednosti <code>value1</code> in <code>value2</code>. Določite lahko izbirni parameter <code>precision</code>; privzeto je uporabljen <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Ustvari dejanje, ki ob izvedbi vrne rezultate izvajanja zahteve HTTP v obliki dvojiške vrednosti.",
        "Documentation.LongDescription": "Ustvari dejanje, ki bo ob izvedbi vrnilo rezultate zahteve <code>method</code> zoper <code>url</code> prek protokola HTTP v dvojiški obliki zapisa.\r\n    Za namene določevanja dodatnih lastnosti bo morda na voljo izbiren parameter zapisa <code>options</code>. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>Query</code> : Programsko dodajte parametre poizvedbe v naslov URL, pri tem pa vam ni treba skrbeti za dodajanje ubežnih znakov.</li>\r\n<li><code>ApiKeyName</code> : Če je na ciljnem mestu omenjen ključ vmesnika API, lahko ta parameter uporabite za navedbo imena (ne vrednosti) parametra ključa, ki ga je treba uporabiti v naslovu URL. Dejanska vrednost ključa je navedena v poverilnici.</li>\r\n<li><code>Headers</code> : Če navedete to vrednost kot zapis, boste v zahtevo HTTP dodali dodatne glave.</li>\r\n<li><code>Timeout</code> : Če navedete to vrednost kot trajanje, boste spremenili časovno omejitev za zahtevo HTTP. Privzeta vrednost je 100 sekund.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Če navedete to vrednost kot seznam, bodo ti ključi glave HTTP izključeni iz dela izračuna za podatke predpomnjenja.</li>\r\n<li><code>IsRetry</code> : Če navedete to logično vrednost kot &#187;true&#171;, boste pri pridobivanju podatkov prezrli vse obstoječe odgovore v predpomnilniku.</li>\r\n<li><code>ManualStatusHandling</code> : Če navedete to vrednost kot seznam, boste preprečili vse vgrajeno obravnavanje zahtev HTTP, katerih odgovor vsebuje eno od teh kod stanja.</li>\r\n<li><code>RelativePath</code> : Če navedete to vrednost kot besedilo, ga dodate osnovnemu naslovu URL, predem pošljete zahtevo.</li>\r\n<li><code>Content</code> : Če navedete to vrednost, bo njegova vsebina postala telo zahteve HTTP.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Ta funkcija je v večini primerov onemogočena. Morda bi raje uporabili parameter Web.Contents ali Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Izvedite zahtevo GET za Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Vnesite URL končne točke vmesnika REST API za Azure Enterprise, ki je povezan z vašo včlanitvijo",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Vrne dvojiške rezultate klica naslova URL, ki je naveden za vmesnik API za Azure Enterprise.",
        "Documentation.Examples": [
          {
            "Description": "Uporabite funkcijo »AzureEnterprise.Contents«, da pridobite rezultate določenega poročila.",
            "Code": "        let\r\n            poročilo = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            preskoki = Table.Skip(report, 2),\r\n            razdelitev =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            povišano = Table.PromoteHeaders(split)\r\n        in\r\n            povišano",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Vrne vsebino navedene zbirke dvojiških podatkov iz trezorja shrambe Azure.",
        "Documentation.LongDescription": "Vrne vsebino zbirke dvojiških podatkov na URL-ju <code>url</code> iz trezorja shrambe Azure. <code>options</code> lahko določite za nadzor teh možnosti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Število bajtov, ki jih je treba prebrati pred čakanjem na uporabnika podatkov. Privzeta vrednost je 4 MB.</li>\r\n<li><code>RequestSize</code> : Število bajtov za poskus branja v eni zahtevi HTTP za strežnik. Privzeta vrednost je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnost &#187;ConcurrentRequests&#171; podpira hitrejše prenose podatkov tako, da navede število zahtev, ki jih je mogoče izvesti vzporedno na račun uporabe pomnilnika. Zahtevan je pomnilnik (ConcurrentRequest * RequestSize). Privzeta vrednost je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Vrne vsebino datoteke, določene v datotečnem sistemu shrambe Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vrne vsebino datoteke na URL-ju <code>url</code> iz datotečnega sistema Azure Data Lake Storage. <code>options</code> lahko določite za nadzor teh možnosti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Število bajtov, ki jih je treba prebrati pred čakanjem na uporabnika podatkov. Privzeta vrednost je 4 MB.</li>\r\n<li><code>RequestSize</code> : Število bajtov za poskus branja v eni zahtevi HTTP za strežnik. Privzeta vrednost je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnost &#187;ConcurrentRequests&#171; podpira hitrejše prenose podatkov tako, da navede število zahtev, ki jih je mogoče izvesti vzporedno na račun uporabe pomnilnika. Zahtevan je pomnilnik (ConcurrentRequest * RequestSize). Privzeta vrednost je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Vrnjena je približna dolžina binarne vrednosti.",
        "Documentation.LongDescription": "Vrnjena je približna dolžina vrednosti <code>binary</code> ali pa napaka, če vir podatkov ne podpira približne vrednosti.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Pridobite približno dolžino binarne vrednosti.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Shrani dvojiško vrednost v medpomnilnik.",
        "Documentation.LongDescription": "Shrani dvojiško vrednost v medpomnilnik. Rezultat tega klica je trajna dvojiška vrednost, kar pomeni, da bo imel določljivo dolžino in vrstni red bajtov.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite trajno različico dvojiške vrednosti.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Združi seznam dvojiških vrednosti v eno dvojiško vrednost.",
        "Documentation.LongDescription": "Združi seznam dvojiških vrednosti v eno dvojiško vrednost.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Ustvari dvojiško vrednost iz dane vrednosti",
        "Documentation.LongDescription": "Iz dane vrednosti <code>value</code> vrne vrednost <code>binary</code>. Če je dana vrednost <code>value</code> <code>null</code>, <code>Binary.From</code> vrne <code>null</code>.  Če je dana vrednost <code>value</code> <code>binary</code>, je vrnjena vrednost <code>value</code>. V vrednost <code>binary</code> lahko pretvorite vrednosti teh vrst:\r\n      <ul>\r\n        <li><code>text</code>: vrednost <code>binary</code> iz predstavitve v obliki besedila. Za podrobnosti glejte <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nČe je vrednost <code>value</code> katere koli druge vrste, je vrnjena napaka.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost <code>binary</code> za <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Pretvori seznam števil v dvojiško vrednost.",
        "Documentation.LongDescription": "Pretvori seznam števil v dvojiško vrednost.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Dekodira podatke iz besedilne oblike v dvojiško vrednost.",
        "Documentation.LongDescription": "Vrne rezultat pretvorbe besedilne vrednosti <code>text</code> v dvojiško vrednost (seznam <code>number</code>). <code>encoding</code> je lahko določen, da kaže kodiranje, ki se uporabi v besedilni vrednosti.\r\n      Naslednje vrednosti <code>BinaryEncoding</code> se lahko uporabijo za <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: kodiranje Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: šestnajstiško kodiranje</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekodirajte »1011« v dvojiško vrednost.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Dekodirajte »1011« v dvojiško vrednost s šestnajstiškim kodiranjem.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Prebere dvojiški tok ter poskusi določiti vrsto vsebine in oblikovati informacije toka.",
        "Documentation.LongDescription": "Vrne zapis s poljem »Content.Type«, ki vsebuje izpeljano vrsto MIME.\r\n    Če je izpeljana vrsta vsebine »besedilo/*« in je zaznana kodna stran za kodiranje, vrne tudi polje »Content.Encoding«, ki vsebuje kodiranje toka.\r\n    Če je izpeljana vrsta vsebine »besedilo/csv« in je oblika zapisa ločena z ločilom, vrne tudi polje »Csv.PotentialDelimiter«, ki vsebuje tabelo za analizo morebitnih ločil.\r\n    Če je izpeljana vrsta vsebine »besedilo/csv« in je oblika zapisa fiksne širine, vrne tudi polje »Csv.PotentialPositions«, ki vsebuje seznam za analizo morebitnih mest stolpcev s fiksno širino.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Vrne število znakov.",
        "Documentation.LongDescription": "Vrne število znakov.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Pretvori dvojiško vrednost v seznam števil.",
        "Documentation.LongDescription": "Pretvori dvojiško vrednost v seznam števil.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Kodira dvojiške podatke v besedilno obliko.",
        "Documentation.LongDescription": "Vrne rezultat pretvorbe dvojiškega seznama števil <code>binary</code> v besedilno vrednost. Izbirno se lahko določi <code>encoding</code>, da kaže kodiranje, ki naj se uporabi v ustvarjeni besedilni vrednosti\r\n      Naslednje vrednosti <code>BinaryEncoding</code> se lahko uporabijo za <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: kodiranje Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: šestnajstiško kodiranje</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Ustvari spremenjen zapis o napaki, ki ne bo sprožil rezervnega ukrepa, če ga vrne rutina, ki je definirana v pogledu (prek pogleda Binary.View).",
        "Documentation.LongDescription": "Ustvari spremenjen zapis o napaki iz <code>errorRecord</code>, ki ne bo sprožil rezervnega ukrepa, če ga vrne rutina, ki je definirana v pogledu (prek pogleda Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Ustvari funkcijo, ki jo lahko prestreže rutina za obravnavo, določena v pogledu (prek funkcije Binary.View).",
        "Documentation.LongDescription": "<p>Ustvari funkcijo na podlagi <code>function</code>, ki jo je mogoče obravnavati v pogledu, ustvarjenem s funkcijo <code>Table.View</code>.</p>\r\n<p>Rutino za obravnavo <code>OnInvoke</code> funkcije <code>Table.View</code> lahko uporabite za določitev rutine za obravnavo za funkcijo pogleda.</p>\r\n<p>Če ne določite rutine za obravnavo <code>OnInvoke</code>, če ta rutina ne obravnava funkcije pogleda ali če rutina za obravnavo prikaže sporočilo o napaki, je za pogled tako kot pri rutinah za obravnavo za vgrajene postopke uporabljen <code>function</code>.</p>\r\n<p>Podrobnejši opis funkcije <code>Table.View</code> in funkcij pogleda po meri najdete v objavljeni dokumentaciji za povezovalnik po meri Power Query.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Dvojiška oblika, ki bere 64-bitno celo število s predznakom, ki je bilo kodirano s 7-bitnim kodiranjem spremenljive dolžine.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere 64-bitno celo število s predznakom, ki je bilo kodirano s 7-bitnim kodiranjem spremenljive dolžine.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Dvojiška oblika, ki bere 64-bitno celo število brez predznaka, ki je bilo kodirano s 7-bitnim kodiranjem spremenljive dolžine.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere 64-bitno celo število brez predznaka, ki je bilo kodirano s 7-bitnim kodiranjem spremenljive dolžine.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Dvojiška oblika, ki bere 8-bitno celo število brez predznaka.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere 8-bitno celo število brez predznaka.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Dvojiška oblika, ki bere decimalno vrednost .NET s 16 bajti.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere decimalno vrednost .NET s 16 bajti.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Dvojiška oblika, ki bere vrednost .IEEE s plavajočo vejico dvojne natančnosti z 8 bajti.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere vrednost .IEEE s plavajočo vejico dvojne natančnosti z 8 bajti.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Vrne dvojiško obliko, ki bere zaporedje elementov in vrne seznam.",
        "Documentation.LongDescription": "Vrne dvojiško obliko, ki bere zaporedje elementov in vrne <code>seznam</code>. Parameter <code>binaryFormat</code> določa dvojiško obliko posameznega elementa. Možni so trije načini za določitev števila prebranih elementov: <ul><li>če <code>countOrCondition</code> ni določen, bo dvojiška oblika brala, dokler ne zmanjka elementov.</li><li>Če je <code>countOrCondition</code> število, bo dvojiška oblika prebrala toliko elementov.</li><li>Če je <code>countOrCondition</code> funkcija, bo ta funkcija priklicana za vsak prebran element. Ta funkcija vrne »true« za nadaljevanje in »false« za zaustavitev branja elementov.  Končni element je vključen na seznam.</li><li>Če je <code>countOrCondition</code> dvojiška oblika, se pričakuje, da bo pred seznamom število elementov, določena oblika zapisa pa bo uporabljena za branje števila.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Berite bajte do konca podatkov.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Preberite dva bajta.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Berite bajte, dokler ni vrednost bajtov večja ali enaka dva.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Dvojiška oblika, ki bere nič bajtov in vrne »null«.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere nič bajtov in vrne »null«.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Vrne dvojiško obliko, ki bere zapis.",
        "Documentation.LongDescription": "Vrne dvojiško obliko, ki bere zapis.  Parameter <code>record</code> določa obliko zapisa.  Vsako polje v zapisu lahko ima drugačno dvojiško obliko.  Če polje vsebuje vrednost, ki ni vrednost dvojiške oblike, se podatki za to polje ne berejo, v rezultatu pa se kot odmev prikaže vrednost polja.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Preberite zapis, ki vsebuje eno 16-bitno celo število in eno 32-bitno celo število.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Dvojiška oblika, ki bere 16-bitno celo število s predznakom.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere 16-bitno celo število s predznakom.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Dvojiška oblika, ki bere 32-bitno celo število s predznakom.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere 32-bitno celo število s predznakom.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Dvojiška oblika, ki bere 64-bitno celo število s predznakom.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere 64-bitno celo število s predznakom.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Dvojiška oblika, ki bere vrednost .IEEE s plavajočo vejico enojne natančnosti z 4 bajti.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere vrednost .IEEE s plavajočo vejico enojne natančnosti z 4 bajti.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Vrne dvojiško obliko, ki bere besedilno vrednost.",
        "Documentation.LongDescription": "Vrne dvojiško obliko, ki bere besedilno vrednost. <code>length</code> določa število bajtov za dekodiranje ali dvojiško obliko dolžine pred besedilom. Izbirna vrednost <code>encoding</code> določa kodiranje besedila. Če vrednost <code>encoding</code> ni določena, je kodiranje določeno na podlagi oznak za vrstni red bajtov Unicode. Če ni oznak za vrstni red bajtov, je uporabljen <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Dekodirajte dva bajta kot besedilo ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Dekodirajte besedilo ASCII, kjer se dolžina besedila v bajtih prikaže pred besedilom kot bajt.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Dvojiška oblika, ki bere 16-bitno celo število brez predznaka.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere 16-bitno celo število brez predznaka.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Dvojiška oblika, ki bere 32-bitno celo število brez predznaka.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere 32-bitno celo število brez predznaka.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Dvojiška oblika, ki bere 64-bitno celo število brez predznaka.",
        "Documentation.LongDescription": "Dvojiška oblika, ki bere 64-bitno celo število brez predznaka.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Iz navedene vrednosti ustvari 8-bitno celo število.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne 8-bitno celoštevilsko vrednost <code>number</code>. Če je navedena vrednost <code>value</code> vrste <code>null</code>, <code>Byte.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> vrste <code>number</code> v obsegu 8-bitnega celega števila in brez ulomka, je vrnjena vrednost <code>value</code>. Če ima ulomek, je število zaokroženo z določenim načinom zaokroževanja. Privzeti način zaokroževanja je <code>RoundingMode.ToEven</code>. Če je navedena vrednost <code>value</code> katere koli druge vrste, glejte <code>Number.FromText</code> in jo pretvorite v vrednost <code>number</code>. Glejte <code>Number.Round</code> za načine zaokroževanja, ki so na voljo. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite 8-bitno celoštevilsko vrednost <code>number</code> za <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Poiščite 8-bitno celoštevilsko vrednost <code>number</code> za <code>\"4.5\"</code> z načinom zaokroževanja <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Pretvori število v besedilni znak.",
        "Documentation.LongDescription": "Vrne znak, ki je enakovreden številu.<br>\r\n    <br>\r\n    Navedeni element <code>number</code> mora biti 21-bitna kodna točka Unicode.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Pretvori število v enakovredno znakovno vrednost.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Pretvorite znak v število in nato znova nazaj.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Pretvorite šestnajstiško kodno točko za čustveni simbol »režeči se obraz« v ustrezni nadomestni par UTF-16.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Pretvori znak v številsko vrednost.",
        "Documentation.LongDescription": "Vrne število, ki je enakovredno <code>character</code>.<br>\r\n    <br>\r\n    Rezultat bo 21-bitna kodna točka Unicode, ki jo predstavlja navedeni znak ali nadomestni par.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Pretvori znak v enakovredno številsko vrednost.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Pretvorite nadomestni par UTF-16 za čustveni simbol »režeči se obraz« v ustrezno šestnajstiško kodno točko.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Vrne funkcijo, ki združi seznam besedila z določenim ločilom.",
        "Documentation.LongDescription": "Vrne funkcijo, ki združi seznam besedilnih vrednosti v eno besedilno vrednost z uporabo določenega ločila.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Združite seznam besedilnih vrednosti z ločilnikom s podpičjem.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Združite besedilo dveh stolpcev z ločilom vejice in navedki s slogom CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Vrne funkcijo, ki združi seznam besedila z nizom ločil.",
        "Documentation.LongDescription": "Vrne funkcijo, ki združi seznam besedilnih vrednosti v eno besedilno vrednost z uporabo niza ločil.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Združite seznam besedilnih vrednosti z nizom ločil.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Vrne funkcijo, ki združuje seznam besedila z določenimi dolžinami.",
        "Documentation.LongDescription": "Vrne funkcijo, ki združi seznam besedilnih vrednosti v eno besedilno vrednost z uporabo določenih dolžin.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Združite seznam besedilnih vrednosti tako, da ekstrahirate določeno število znakov iz posamezne vhodne vrednosti.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Združite seznam besedilnih vrednosti tako, da ekstrahirate določeno število znakov po prvem vnaprejšnjem polnjenju rezultata z besedilom predloge.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Vrne funkcijo, ki združi seznam besedila z določenimi izhodnimi položaji.",
        "Documentation.LongDescription": "Vrne funkcijo, ki združi seznam besedilnih vrednosti v eno besedilno vrednost z uporabo določenih izhodnih položajev.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Združite seznam besedilnih vrednosti tako, da jih postavite na določena izhodna mesta.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Vrne funkcijo, ki združi seznam besedila z določenimi položaji in dolžinami.",
        "Documentation.LongDescription": "Vrne funkcijo, ki združi seznam besedilnih vrednosti v eno besedilno vrednost z uporabo določenih izhodnih položajev in dolžin. Dolžina »null« označuje, da je treba vključiti celotno besedilno vrednost.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Združite seznam besedilnih vrednosti z določenimi izhodnimi položaji in dolžinami.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Vrne funkcijo primerjalnika na podlagi določene kulture in razlikovanju med velikimi in malimi črkami.",
        "Documentation.LongDescription": "Vrne funkcijo primerjalnika, ki uporablja <code>culture</code> in razlikovanje med velikimi in malimi črkami, ki jo določa <code>ignoreCase</code>, za izvajanje primerjav.<br>\r\n      <br>\r\n      Funkcija primerjalnika sprejme dva argumenta in vrne –1, 0 ali 1 glede na to, ali je prva vrednost manjša od, enaka ali večja od druge.<br>\r\n      <br>\r\n      Privzeta vrednost za <code>ignoreCase</code> je »false«. Polje <code>culture</code> mora biti ena od območnih nastavitev, ki jih podpira ogrodje .NET framework (na primer »sl-SI«).\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Primerjajte »a« in »A« s področnimi nastavitvami »en-US« in določite, ali so vrednosti enake.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Primerjajte »a« in »A« s področnimi nastavitvami »en-US« in ne razlikujte med malimi in velikimi črkami ter nato določite, ali so vrednosti enake.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Vrne enolični identifikator člana iz vrednosti lastnosti članov.",
        "Documentation.LongDescription": "Vrne enolični identifikator člana iz vrednosti lastnosti člana. <code>attribute</code>. Vrne »null« za vse druge vrednosti.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Vrne ključ lastnosti.",
        "Documentation.LongDescription": "Vrne ključ lastnosti <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Dano vrednost pretvori v vrednost valute.",
        "Documentation.LongDescription": "Iz dane vrednosti<code>value</code> vrne vrednost <code>currency</code>. Če je navedena vrednost <code>value</code> <code>null</code>, <code>Currency.From</code> vrne vrednost <code>null</code>. Če je navedena vrednost <code>value</code> vrste <code>number</code> v obsegu valute, bo prikazan ulomek vrednosti <code>value</code>, zaokrožen na 4 decimalna mesta. Če je navedena vrednost <code>value</code> katere koli druge vrste, bo najprej pretvorjena v <code>number</code> s pomočjo <code>Number.FromText</code>. Veljaven obseg za valuto je od <code>-922,337,203,685,477.5808</code> do <code>922,337,203,685,477.5807</code>. Glejte <code>Number.Round</code> za načine zaokroževanja, ki so na voljo. Privzeti način zaokroževanja je <code>RoundingMode.ToEven</code>. Navedete lahko tudi dodatni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pridobite vrednost <code>currency</code> za <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Pridobite vrednost <code>currency</code> števila <code>\"1.23455\"</code> z načinom zaokroževanja <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Vrne komponento dneva.",
        "Documentation.LongDescription": "Vrne komponento dneva vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, iz katere se določi komponenta dneva.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pridobite komponento dneva vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki predstavlja datum in čas 5/14/2011 05:00:00 PM.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Vrne številko (od 0 do 6), ki označuje dan v tednu navedene vrednosti.",
        "Documentation.LongDescription": "Vrne številko (od 0 do 6), ki označuje prvi dan v tednu navedene vrednosti <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: vrednost <code>Day</code> označuje, kateri dan je uporabljen kot prvi dan v tednu. Dovoljene vrednosti so Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday ali Day.Saturday. Če tega ne navedete, je uporabljena privzeta vrednost, odvisna od kulture.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, na kateri dan v tednu je 21. februar 2011, pri čemer je nedelja prvi dan v tednu.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Ugotovite, na kateri dan v tednu je 21. februar 2011, pri čemer je ponedeljek prvi dan v tednu.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Vrne ime dneva v tednu.",
        "Documentation.LongDescription": "Vrne dan imena tedna za navedeno vrednost <code>date</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pridobite ime dneva v tednu.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Vrne število od 1 do 366, ki predstavlja dan v letu.",
        "Documentation.LongDescription": "Vrne število, ki predstavlja dan letu v podani vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dan v letu za 1. marec 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Vrne število od 28 do 31, ki kaže število dni v mesecu.",
        "Documentation.LongDescription": "Vrne število dni v mesecu v vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, za katero je vrnjeno število dni v mesecu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Število dni v mesecu decembru, kot ga predstavlja <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Vrne konec dneva.",
        "Documentation.LongDescription": "Vrne konec dneva, ki je prikazan kot <code>dateTime</code>. Informacije o časovnem pasu so ohranjene.\r\n      <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, na podlagi katere je izračunan konec dneva.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite konec dneva za 5/14/2011 05:00:00 PM.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Poiščite konec dneva za 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Vrne konec meseca.",
        "Documentation.LongDescription": "Vrne konec meseca, ki vsebuje <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, na podlagi katere je izračunan konec meseca.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite konec meseca za 5/14/2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Poiščite konec meseca za 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Vrne konec četrtletja.",
        "Documentation.LongDescription": "Vrne konec četrtletja, ki vsebuje <code>dateTime</code>. Informacije o časovnem pasu so ohranjene.\r\n      <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, na podlagi katere je izračunan konec četrtletja.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite konec četrtletja za 10. oktober 2011, 8.00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Vrne konec tedna.",
        "Documentation.LongDescription": "Vrne konec tedna, ki vsebuje <code>dateTime</code>.\r\n    Ta funkcija vzame izbirno vrednost <code>Day</code>, <code>firstDayOfWeek</code>, in jo nastavi kot prvi dan tedna za ta relativni izračun. Privzeta vrednost je <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, na podlagi katere je izračunan zadnji dan tedna</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[izbirno]</i> vrednost <code>Day.Type</code>, ki predstavlja prvi dan tedna. Možne vrednosti so <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> in <code>Day.Saturday.</code> . Privzeta vrednost je <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite konec tedna za 5/14/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Poiščite konec tedna za 5/17/2011 05:00:00 PM -7:00, pri čemer je prvi dan tedna nedelja.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Vrne konec leta.",
        "Documentation.LongDescription": "Vrne konec leta, ki vsebuje <code>dateTime</code> in vključuje z ulomki izražene sekunde. Informacije o časovnem pasu so ohranjene.\r\n      <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, na podlagi katere je izračunan konec leta.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite konec leta za 5/14/2011 05:00:00 PM.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Poiščite konec ure za 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Ustvari datum iz dane vrednosti.",
        "Documentation.LongDescription": "Vrne vrednost <code>date</code> iz navedene vrednosti <code>value</code>. Navedete lahko tudi dodatni parameter <code>culture</code> (na primer »sl-SI«).\r\nČe je navedena vrednost <code>value</code> <code>null</code>, <code>Date.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> <code>date</code>, je vrnjena vrednost <code>value</code>. V vrednost <code>date</code> lahko pretvorite vrednosti teh vrst:\r\n      <ul>\r\n        <li><code>text</code>: vrednost <code>date</code> iz predstavitve v obliki besedila. Za podrobnosti glejte <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: komponenta »date« za <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: komponenta »date« lokalnega ekvivalenta »datetime« za <code>value</code>.</li>\r\n        <li><code>number</code>: komponenta »date« vrednosti »datetime«, ki ustreza datumu avtomatizacije OLE, izraženem z <code>value</code>.</li>\r\n      </ul>\r\nČe je vrednost <code>value</code> katere koli druge vrste, je vrnjena napaka.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>43910</code> v vrednost <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Pretvorite <code>#datetime(1899, 12, 30, 06, 45, 12)</code> v vrednost <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Ustvari datum iz lokalnih, univerzalnih in datumskih oblik po meri.",
        "Documentation.LongDescription": "Ustvari vrednost <code>date</code> iz predstavitve podatkov v obliki besedila, <code>text</code>. Izbirni parameter <code>record</code>, <code>options</code>, je lahko naveden za določanje dodatnih lastnosti. <code>record</code> lahko vsebuje naslednja polja:\r\n<ul>\r\n   <li><code>Format</code>: vrednost <code>text</code> ponazarja obliko zapisa, ki jo želite uporabiti. Za več podrobnosti glejte https://go.microsoft.com/fwlink/?linkid=2180104 in https://go.microsoft.com/fwlink/?linkid=2180105. Če to polje izpustite ali navedete vrednost <code>null</code>, bo datum razčlenjen po najboljših močeh.</li>\r\n   <li><code>Culture</code> : če za <code>Format</code> ni izbrana vrednost nič, <code>Culture</code> nadzira nekatere določevalnike za obliko zapisa. Na primer <code>»en-US«</code> <code>»MMM«</code> je <code>»Jan«, »Feb«, »Mar« ...</code>, za <code>»ru-RU«</code> pa <code>»MMM«</code> prestavlja <code>»янв«, »фев«, »мар« ...</code>. Če je za <code>Format</code> izbrana vrednost <code>null</code>, <code>Culture</code> nadzira privzeto obliko zapisa, ki jo želite uporabiti. Če je za <code>Culture</code> izbrana vrednost <code>null</code> ali izpuščena, se uporabi <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa omogočanje podpore podedovanim potekom dela, je <code>options</code> morda lahko tudi besedilna vrednost. To je enako, kot za <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>2010-12-31</code> v vrednost <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Pretvorite z obliko zapisa po meri in uporabo nemške kulture.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Poiščite datum v gregorijanskem koledarju, ki ustreza začetku leta 1400 v koledarju Hijri.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v trenutnem dnevu, kot določa trenutni datum in čas v sistemu.",
        "Documentation.LongDescription": "Označuje, ali se podana vrednost »datetime« <code>dateTime</code> pojavi v trenutnem dnevu, kot določa trenutni datum in čas v sistemu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je trenutni čas sistema v trenutnem dnevu.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v trenutnem mesecu, kot določa trenutni datum in čas v sistemu.",
        "Documentation.LongDescription": "Označuje, ali se podana vrednost »datetime« <code>dateTime</code> pojavi v trenutnem mesecu, kot določa trenutni datum in čas v sistemu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je trenutni čas sistema v trenutnem mesecu.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v trenutnem četrtletju, kot določa trenutni datum in čas v sistemu.",
        "Documentation.LongDescription": "Označuje, ali se podana vrednost »datetime« <code>dateTime</code> pojavi v trenutnem četrtletju, kot določa trenutni datum in čas v sistemu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je trenutni čas sistema v trenutnem četrtletju.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v trenutnem tednu, kot določa trenutni datum in čas v sistemu.",
        "Documentation.LongDescription": "Označuje, ali se podana vrednost »datetime« <code>dateTime</code> pojavi v trenutnem tednu, kot določa trenutni datum in čas v sistemu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je trenutni čas sistema v trenutnem tednu.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v trenutnem letu, kot določa trenutni datum in čas v sistemu.",
        "Documentation.LongDescription": "Označuje, ali se podana vrednost »datetime« <code>dateTime</code> pojavi v trenutnem letu, kot določa trenutni datum in čas v sistemu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je trenutni čas sistema v trenutnem letu.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem dnevu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem dnevu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem dnevu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem dnevu.\r\n      <ul> <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime «</code> ali <code>datetimezone</code>, ki bo ovrednotena.\r\n      </li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je dan po trenutnem času sistema v naslednjem dnevu.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem mesecu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem mesecu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem mesecu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem mesecu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je mesec po trenutnem času sistema v naslednjem mesecu.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem četrtletju, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem četrtletju.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem četrtletju, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem četrtletju.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je četrtletje po trenutnem času sistema v naslednjem četrtletju.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem tednu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem tednu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem rednu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem tednu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je teden po trenutnem času sistema v naslednjem tednu.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v naslednjem letu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem letu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednjem letu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem letu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je leto po trenutnem času sistema v naslednjem letu.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem dnevu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem dnevu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem dnevu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem dnevu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je dan pred trenutnim časom sistema v predhodnem dnevu.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem mesecu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem mesecu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem mesecu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem mesecu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je mesec pred trenutnim časom sistema v predhodnem mesecu.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem četrtletju, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem četrtletju.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem četrtletju, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem četrtletju.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je četrtletje pred trenutnim časom sistema v predhodnem četrtletju.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem tednu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem tednu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem tednu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem tednu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je teden pred trenutnim časom sistema v predhodnem tednu.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v prejšnjem letu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem letu.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnjem letu, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutnem letu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je leto pred trenutnim časom sistema v predhodnem letu.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Označuje, ali se ta datum pojavi v trenutnem letu in je na trenutni dan ali pred njim, kot določa trenutni datum in čas v sistemu.",
        "Documentation.LongDescription": "Označuje, ali se podana vrednost »datetime« <code>dateTime</code> pojavi v trenutnem letu in je na trenutni dan ali pred njim, kot določa trenutni datum in čas v sistemu.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je trenutni čas sistema v letu do danes.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Pokaže, ali je datum v prestopnem letu.",
        "Documentation.LongDescription": "Pokaže, ali je podana vrednost »datetime« <code>dateTime</code> v prestopnem letu.\r\n <ul>\r\n        <li><code>dateTime</code>: vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je leto 2012, kot ga predstavlja <code>#date(2012, 01, 01)</code>, prestopno leto.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Vrne komponento meseca.",
        "Documentation.LongDescription": "Vrne komponento meseca podane vrednosti <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost meseca v #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Vrne ime komponente meseca.",
        "Documentation.LongDescription": "Vrne ime komponente meseca za navedeno vrednost <code>date</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pridobite ime meseca.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Vrne število, ki kaže, v katerem četrtletju je datum.",
        "Documentation.LongDescription": "Vrne število od 1 do 4, ki kaže, v katerem četrtletju je datum <code>dateTime</code>. <code>dateTime</code> je lahko vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite, v katerem četrtletju je datum #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Vrne začetek dneva.",
        "Documentation.LongDescription": "Vrne začetek dneva, ki je prikazan kot <code>dateTime</code>.\r\n    <code>dateTime</code> mora biti vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite začetek dneva za 10. oktober 2011, 8.00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Vrne začetek meseca.",
        "Documentation.LongDescription": "Vrne začetek meseca, ki vsebuje <code>dateTime</code>.\r\n    <code>dateTime</code> mora biti vrednost <code>date</code> ali <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite začetek meseca za 10. oktober 2011, 8:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Vrne začetek četrtletja.",
        "Documentation.LongDescription": "Vrne začetek četrtletja, ki vsebuje <code>dateTime</code>.\r\n    <code>dateTime</code> mora biti vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite začetek četrtletja za 10. oktober 2011, 8.00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Vrne začetek tedna.",
        "Documentation.LongDescription": "Vrne začetek tedna, ki vsebuje <code>dateTime</code>.\r\n    <code>dateTime</code> mora biti vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite začetek tedna za torek, 11. oktober 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Poiščite začetek tedna za torek, 11. oktober 2011, pri tem pa za začetek tedna uporabite ponedeljek.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Vrne začetek leta.",
        "Documentation.LongDescription": "Vrne začetek leta, ki vsebuje <code>dateTime</code>.\r\n    <code>dateTime</code> mora biti vrednost <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite začetek leta za 10. oktober 2011, 8:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Vrne zapis, ki vsebuje dele vrednosti »date«.",
        "Documentation.LongDescription": "Vrne zapis, ki vsebuje dele dane datumske vrednosti, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: vrednost <code>date</code>, iz katere bo izračunan zapis njenih delov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite vrednost <code>#date(2011, 12, 31)</code> v zapis, ki vsebuje dele datumske vrednosti.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Vrne predstavitev datumske vrednosti v obliki besedila.",
        "Documentation.LongDescription": "Vrne predstavitev podatkov <code>date</code>. Izbirni parameter <code>record</code>, <code>options</code>, je lahko naveden za določanje dodatnih lastnosti. <code>culture</code> se uporablja le za podedovane poteke dela. <code>record</code> lahko vsebuje naslednja polja:\r\n<ul>\r\n   <li><code>Format</code>: vrednost <code>text</code> ponazarja obliko zapisa, ki jo želite uporabiti. Za več podrobnosti glejte https://go.microsoft.com/fwlink/?linkid=2180104 in https://go.microsoft.com/fwlink/?linkid=2180105. Če to polje izpustite ali navedete vrednost <code>null</code>, bo datum zapisan v privzeti obliki, navedeni za <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Če za <code>Format</code> ni izbrana vrednost nič, <code>Culture</code> nadzira nekatere določevalnike za obliko zapisa. Na primer, v <code>»en-US«</code> <code>\"»MMM«</code> je <code>»Jan«, »Feb«, »Mar« ...</code>, za <code>»ru-RU«</code> pa <code>»MMM«</code> predstavlja <code>»янв«, »фев«, »мар« ...</code>. Če je za <code>Format</code> izbrana vrednost <code>null</code>, <code>Culture</code> nadzira privzeto obliko zapisa, ki jo želite uporabiti. Če je za <code>Culture</code> izbrana vrednost <code>null</code> ali izpuščena, se uporabi <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa omogočanje podpore podedovanim potekom dela, sta <code>options</code> in <code>culture</code> morda lahko tudi besedilni vrednosti. To je enako, kot za <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>#date(2010, 12, 31)</code> v vrednost <code>text</code>. <i>Rezultat se lahko razlikuje glede na trenutno kulturo.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Pretvorite z obliko zapisa po meri in uporabo nemške kulture.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Poiščite datum v koledarju Hijri, ki ustreza 1. januarju 2000 v gregorijanskem koledarju.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Vrne število od 1 do 6, ki kaže, v katerem tednu meseca je datum.",
        "Documentation.LongDescription": "Vrne število od 1 do 6, ki kaže, v katerem tednu meseca je datum <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: vrednost <code>datetime</code>, za katero se določi teden meseca.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, v katerem tednu je 15. marec v letu 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Vrne število od 1 do 54, ki kaže, v katerem tednu leta je datum.",
        "Documentation.LongDescription": "Vrne številko od 1 do 54, ki označuje, v katerem tednu leta je datum <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: vrednost <code>datetime</code>, za katero bo določen teden v letu.</li>\r\n        <li><code>firstDayOfWeek</code>: izbirna vrednost <code>Day.Type</code>, ki označuje, kateri dan je uporabljen za začetek novega tedna (na primer <code>Day.Sunday</code>). Če je ne navedete, je uporabljena privzeta vrednost, značilna za kulturo.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Določite, kateri teden v letu vsebuje 27. marec 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Ugotovite, v katerem tednu v letu je datum 27. marec 2011, pri tem pa uporabite ponedeljek kot začetek tedna.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Vrne komponento leta.",
        "Documentation.LongDescription": "Vrne komponento leta podane vrednosti <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost leta v #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Vrne komponento »date« navedene vrednosti »date«, »datetime« ali »datetimezone«.",
        "Documentation.LongDescription": "Vrne komponento »date« <code>dateTime</code>, dane vrednosti <code>date</code>, <code>datetime</code> ali <code>datetimezone</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Poiščite datumsko vrednost v »#datetime(2010, 12, 31, 11, 56, 02)«.",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Ustvari vrednost »datetime« iz dane vrednosti.",
        "Documentation.LongDescription": "Vrne vrednost <code>datetime</code> iz navedene vrednosti <code>value</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).\r\nČe je navedena vrednost <code>value</code> <code>null</code>, <code>DateTime.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> <code>datetime</code>, je vrnjena vrednost <code>value</code>. V vrednost <code>datetime</code> lahko pretvorite vrednosti teh vrst:\r\n      <ul>\r\n        <li><code>text</code>: vrednost <code>datetime</code> iz predstavitve v obliki besedila. Za podrobnosti glejte <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: <code>datetime</code> z vrednostjo <code>value</code> kot komponento »date« in <code>12:00:00 AM</code> kot komponento »time«.</li>\r\n        <li><code>datetimezone</code>: lokalni ekvivalent <code>datetime</code> za <code>value</code>.</li>\r\n        <li><code>time</code>: <code>datetime</code> z vrednostjo »date«, ki ustreza datumu avtomatizacije OLE <code>0</code> kot komponento »date« in <code>value</code> kot komponento »time«.</li>\r\n        <li><code>number</code>: <code>datetime</code> z vrednostjo, ki ustreza datumu avtomatizacije OLE, izraženo z <code>value</code>. </li>\r\n      </ul>\r\nČe je vrednost <code>value</code> katere koli druge vrste, je vrnjena napaka.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>#time(06, 45, 12)</code> v vrednost <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Pretvorite <code>#date(1975, 4, 4)</code> v vrednost <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Ustvari vrednost »datetime« iz 64 bitov dolgega števila.",
        "Documentation.LongDescription": "Ustvari vrednost <code>datetime</code> iz vrednosti <code>fileTime</code> in jo pretvori v lokalni časovni pas. Vrednost »filetime« je vrednost časa datoteke Windows, ki predstavlja 100-nanosekundne intervale, ki so pretekli od polnoči dne 1. januarja 1601 n. š. (C.E.) Coordinated Universal Time (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>129876402529842245</code> v vrednost »datetime«.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Ustvari »datetimezone« iz lokalnih in univerzalnih oblik »datetime«.",
        "Documentation.LongDescription": "Ustvari vrednost <code>datetime</code> iz predstavitve podatkov v obliki besedila, <code>text</code>. Izbirni parameter <code>record</code>, <code>options</code>, je lahko naveden za določanje dodatnih lastnosti. <code>record</code> lahko vsebuje naslednja polja:\r\n<ul>\r\n   <li><code>Format</code>: vrednost <code>text</code> ponazarja obliko zapisa, ki jo želite uporabiti. Za več podrobnosti glejte https://go.microsoft.com/fwlink/?linkid=2180104 in https://go.microsoft.com/fwlink/?linkid=2180105. Če to polje izpustite ali navedete vrednost <code>null</code>, bo datum razčlenjen po najboljših močeh.</li>\r\n   <li><code>Culture</code> : če za <code>Format</code> ni izbrana vrednost nič, <code>Culture</code> nadzira nekatere določevalnike za obliko zapisa. Na primer <code>»en-US«</code> <code>»MMM«</code> je <code>»Jan«, »Feb«, »Mar« ...</code>, za <code>»ru-RU«</code> pa <code>»MMM«</code> prestavlja <code>»янв«, »фев«, »мар« ...</code>. Če je za <code>Format</code> izbrana vrednost <code>null</code>, <code>Culture</code> nadzira privzeto obliko zapisa, ki jo želite uporabiti. Če je za <code>Culture</code> izbrana vrednost <code>null</code> ali izpuščena, se uporabi <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa omogočanje podpore podedovanim potekom dela, je <code>options</code> morda lahko tudi besedilna vrednost. To je enako, kot za <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>»2010-12-31T01:30:00«</code> v vrednost »datetime«.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Pretvorite <code>»2010-12-31T01:30:00.121212«</code> v vrednost »datetime«.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Pretvorite <code>»2010-12-31T01:30:00«</code> v vrednost »datetime«.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Pretvorite <code>\"20101231T013000\"</code> v vrednost »datetime«.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Označuje, ali se ta vrednost »datetime« pojavi v trenutni uri, kot določata trenutni sistemski datum in čas.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost »datetime« <code>dateTime</code> pojavi v trenutni uri, kot določata trenutni sistemski datum in čas.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je trenutni sistemski čas v trenutni uri.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Označuje, ali se ta vrednost »datetime« pojavi v trenutni minuti, kot določata trenutni sistemski datum in čas.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost »datetime« <code>dateTime</code> pojavi v trenutni minuti, kot določata trenutni sistemski datum in čas.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je trenutni sistemski čas v trenutni minuti.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Označuje, ali se ta vrednost »datetime« pojavi v trenutni sekundi, kot določata trenutni sistemski datum in čas.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost »datetime« <code>dateTime</code> pojavi v trenutni sekundi, kot določata trenutni sistemski datum in čas.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je trenutni sistemski čas v trenutni sekundi.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v naslednji uri, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni uri.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednji uri, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni uri.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je ura po trenutnem sistemskem času v naslednji uri.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v naslednji minuti, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni minuti.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednji minuti, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni minuti.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je minuta po trenutnem sistemskem času v naslednji minuti.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v naslednji sekundi, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni sekundi.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v naslednji sekundi, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni sekundi.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je sekunda po trenutnem sistemskem času v naslednji sekundi.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v prejšnji uri, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni uri.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnji uri, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni uri.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je ura pred trenutnim sistemskim časom v prejšnji uri.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v prejšnji minuti, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni minuti.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnji minuti, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni minuti.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je minuta pred trenutnim sistemskim časom v prejšnji minuti.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Označuje, ali se ta datetime pojavi v prejšnji sekundi, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni sekundi.",
        "Documentation.LongDescription": "Označuje, ali se navedena vrednost za »datetime« <code>dateTime</code> pojavi v prejšnji sekundi, kot je določeno s trenutnim datumom in uro v sistemu. Rezultat te funkcije je »false«, če navedete vrednost, ki se pojavi v trenutni sekundi.\r\n      <ul>\r\n      <li><code>dateTime</code>: vrednost za <code>datetime</code> ali <code>datetimezone</code>, ki bo ovrednotena.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je sekunda pred trenutnim sistemskim časom v prejšnji sekundi.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Vrne časovni del dane vrednosti »datetime«.",
        "Documentation.LongDescription": "Vrne časovni del dane vrednosti »datetime«, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Poiščite časovno vrednost v »#datetime(2010, 12, 31, 11, 56, 02)«.",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Vrne zapis, ki vsebuje dele vrednosti »datetime«.",
        "Documentation.LongDescription": "Vrne zapis, ki vsebuje dele dane vrednosti »datetime«, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: vrednost <code>datetime</code>, iz katere bo izračunan zapis njenih delov.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite vrednost <code>#datetime(2011, 12, 31, 11, 56, 2)</code> v zapis, ki vsebuje vrednosti »Date« in »Time«.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Vrne predstavitev vrednosti »datetime« v obliki besedila.",
        "Documentation.LongDescription": "Vrne predstavitev podatkov <code>dateTime</code>. Izbirni parameter <code>record</code>, <code>options</code>, je lahko naveden za določanje dodatnih lastnosti. <code>culture</code> se uporablja le za podedovane poteke dela. <code>record</code> lahko vsebuje naslednja polja:\r\n<ul>\r\n   <li><code>Format</code>: vrednost <code>text</code> ponazarja obliko zapisa, ki jo želite uporabiti. Za več podrobnosti glejte https://go.microsoft.com/fwlink/?linkid=2180104 in https://go.microsoft.com/fwlink/?linkid=2180105. Če to polje izpustite ali navedete vrednost <code>null</code>, bo datum zapisan v privzeti obliki, navedeni za <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Če za <code>Format</code> ni izbrana vrednost nič, <code>Culture</code> nadzira nekatere določevalnike za obliko zapisa. Na primer, v <code>»en-US«</code> <code>\"»MMM«</code> je <code>»Jan«, »Feb«, »Mar« ...</code>, za <code>»ru-RU«</code> pa <code>»MMM«</code> predstavlja <code>»янв«, »фев«, »мар« ...</code>. Če je za <code>Format</code> izbrana vrednost <code>null</code>, <code>Culture</code> nadzira privzeto obliko zapisa, ki jo želite uporabiti. Če je za <code>Culture</code> izbrana vrednost <code>null</code> ali izpuščena, se uporabi <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa omogočanje podpore podedovanim potekom dela, sta <code>options</code> in <code>culture</code> morda lahko tudi besedilni vrednosti. To je enako, kot za <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>#datetime(2010, 12, 31, 01, 30, 25)</code> v vrednost <code>text</code>. <i>Rezultat se lahko razlikuje glede na trenutno kulturo.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Pretvorite z obliko zapisa po meri in uporabo nemške kulture.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Pretvorite z vzorcem ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Ustvari vrednost »datetimezone« iz dane vrednosti.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne vrednost <code>datetimezone</code>. navedete lahko tudi izbirni parameter <code>culture</code> (na primer »en-US«).\r\nČe je za navedeni parameter <code>value</code> vrednost <code>null</code>, <code>DateTimeZone.From</code> vrne vrednost <code>null</code>. Če je za navedeni parameter <code>value</code> vrednost <code>datetimezone</code>, je vrnjena vrednost <code>value</code>. V vrednost <code>datetimezone</code> lahko pretvorite te vrste vrednosti:\r\n      <ul>\r\n        <li><code>text</code>: vrednost <code>datetimezone</code> iz predstavitve v obliki besedila. Za podrobnosti glejte <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: <code>datetimezone</code> z vrednostjo <code>value</code> kot komponento datuma, <code>12:00:00 AM</code> kot komponento časa in odmikom, ki ustreza lokalnemu časovnemu pasu.</li>\r\n        <li><code>datetime</code>: <code>datetimezone</code> z vrednostjo <code>value</code> kot datum in čas ter odmikom, ki ustreza lokalnemu časovnemu pasu.</li>\r\n        <li><code>time</code>: <code>datetimezone</code> z datumom, ki ustreza datumu avtomatizacije OLE <code>0</code>, kot komponento datuma, <code>value</code> kot komponento časa in odmikom, ki ustreza lokalnemu časovnemu pasu.</li>\r\n        <li><code>number</code>: <code>datetimezone</code> z datumom in časom, ki ustreza datumu avtomatizacije OLE, izraženem z vrednostjo <code>value</code>, in odmikom, ki ustreza lokalnemu časovnemu pasu.</li>\r\n      </ul>\r\nČe je vrednost <code>value</code> katere koli druge vrste, je vrnjena napaka.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>\"2020-10-30T01:30:00-08:00\"</code> v vrednost <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Ustvari vrednost »datetimezone« iz 64 bitov dolgega števila.",
        "Documentation.LongDescription": "Ustvari vrednost <code>datetimezone</code> iz vrednosti <code>fileTime</code> in jo pretvori v lokalni časovni pas. Vrednost »filetime« je vrednost časa datoteke Windows, ki predstavlja 100-nanosekundne intervale, ki so pretekli od polnoči dne 1. januarja 1601 n. š. (C.E.) Coordinated Universal Time (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>129876402529842245</code> v vrednost »datetimezone«.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Ustvari »datetimezone« iz lokalnih, univerzalnih in oblik »datetimezone« po meri.",
        "Documentation.LongDescription": "Ustvari vrednost <code>datetimezone</code> iz predstavitve podatkov v obliki besedila, <code>text</code>. Izbirni parameter <code>record</code>, <code>options</code>, je lahko naveden za določanje dodatnih lastnosti. <code>record</code> lahko vsebuje naslednja polja:\r\n<ul>\r\n   <li><code>Format</code>: vrednost <code>text</code> ponazarja obliko zapisa, ki jo želite uporabiti. Za več podrobnosti glejte https://go.microsoft.com/fwlink/?linkid=2180104 in https://go.microsoft.com/fwlink/?linkid=2180105. Če to polje izpustite ali navedete vrednost <code>null</code>, bo datum razčlenjen po najboljših močeh.</li>\r\n   <li><code>Culture</code> : če za <code>Format</code> ni izbrana vrednost nič, <code>Culture</code> nadzira nekatere določevalnike za obliko zapisa. Na primer <code>»en-US«</code> <code>»MMM«</code> je <code>»Jan«, »Feb«, »Mar« ...</code>, za <code>»ru-RU«</code> pa <code>»MMM«</code> prestavlja <code>»янв«, »фев«, »мар« ...</code>. Če je za <code>Format</code> izbrana vrednost <code>null</code>, <code>Culture</code> nadzira privzeto obliko zapisa, ki jo želite uporabiti. Če je za <code>Culture</code> izbrana vrednost <code>null</code> ali izpuščena, se uporabi <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa omogočanje podpore podedovanim potekom dela, je <code>options</code> morda lahko tudi besedilna vrednost. To je enako, kot za <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>\"2010-12-31T01:30:00-08:00\"</code> v vrednost »<code>datetimezone</code>«.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Pretvorite z obliko zapisa po meri in uporabo nemške kulture.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Pretvorite s protokolom ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Odstrani podatke o časovnem pasu iz dane vrednosti »datetimezone«.",
        "Documentation.LongDescription": "Vrne vrednost »#datetime« iz <code>dateTimeZone</code>, pri čemer so odstranjeni podatki o časovnem pasu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Odstranite podatke o časovnem pasu iz vrednosti »#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0)«.",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Pretvori komponento »timezone« v lokalni časovni pas.",
        "Documentation.LongDescription": "Spremeni podatke o časovnem pasu vrednosti »datetimezone« <code>dateTimeZone</code> na podatke o lokalnem časovnem pasu.\r\n    Če <code>dateTimeZone</code> nima komponente »timezone«, se dodajo podatki o lokalnem časovnem pasu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Spremenite podatke o časovnem pasu za »#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30)« na lokalni časovni pas (predvidevanje PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Vrne zapis, ki vsebuje dele vrednosti »datetimezone«.",
        "Documentation.LongDescription": "Vrne zapis, ki vsebuje dele dane vrednosti »datetimezone«, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: vrednost <code>datetimezone</code>, iz katere bo izračunan zapis njenih delov.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite vrednost <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> v zapis, ki vsebuje vrednosti »Date«, »Time« in »Zone«.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Vrne predstavitev vrednosti »datetimezone« v obliki besedila.",
        "Documentation.LongDescription": "Vrne predstavitev podatkov <code>dateTimeZone</code>. Izbirni parameter <code>record</code>, <code>options</code>, je lahko naveden za določanje dodatnih lastnosti. <code>culture</code> se uporablja le za podedovane poteke dela. <code>record</code> lahko vsebuje naslednja polja:\r\n<ul>\r\n   <li><code>Format</code>: vrednost <code>text</code> ponazarja obliko zapisa, ki jo želite uporabiti. Za več podrobnosti glejte https://go.microsoft.com/fwlink/?linkid=2180104 in https://go.microsoft.com/fwlink/?linkid=2180105. Če to polje izpustite ali navedete vrednost <code>null</code>, bo datum zapisan v privzeti obliki, navedeni za <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Če za <code>Format</code> ni izbrana vrednost nič, <code>Culture</code> nadzira nekatere določevalnike za obliko zapisa. Na primer, v <code>»en-US«</code> <code>\"»MMM«</code> je <code>»Jan«, »Feb«, »Mar« ...</code>, za <code>»ru-RU«</code> pa <code>»MMM«</code> predstavlja <code>»янв«, »фев«, »мар« ...</code>. Če je za <code>Format</code> izbrana vrednost <code>null</code>, <code>Culture</code> nadzira privzeto obliko zapisa, ki jo želite uporabiti. Če je za <code>Culture</code> izbrana vrednost <code>null</code> ali izpuščena, se uporabi <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa omogočanje podpore podedovanim potekom dela, sta <code>options</code> in <code>culture</code> morda lahko tudi besedilni vrednosti. To je enako, kot za <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> v vrednost <code>text</code>. <i>Rezultat se lahko razlikuje glede na trenutno kulturo.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Pretvorite z obliko zapisa po meri in uporabo nemške kulture.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Pretvorite z vzorcem ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Pretvori komponento »timezone« v časovni pas UTC.",
        "Documentation.LongDescription": "Spremeni podatke o časovnem pasu vrednosti »datetime« <code>dateTimeZone</code> na podatke o UTC ali univerzalnem času.\r\n    Če <code>dateTimeZone</code> nima komponente »timezone«, se dodajo podatki o časovnem pasu UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Spremenite podatke o časovnem pasu za »#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30)« na časovni pas UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Spremeni časovni pas vrednosti.",
        "Documentation.LongDescription": "Spremeni časovni pas vrednosti.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Spremeni časovni pas vrednosti.",
        "Documentation.LongDescription": "Spremeni časovni pas vrednosti.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Iz navedene vrednosti ustvari decimalno vrednost.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne vrednost s plavajočo vejico in dvojno natančnostjo <code>number</code>. Če je navedena vrednost <code>value</code> vrste <code>null</code>, <code>Double.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> vrste <code>number</code> v obsegu vrednosti s plavajočo vejico in dvojno natančnostjo, je vrnjena vrednost <code>value</code>, v nasprotnem primeru pa napaka. Če je navedena vrednost <code>value</code> katere koli druge vrste, glejte <code>Number.FromText</code> in jo pretvorite v vrednost <code>number</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite decimalno vrednost <code>number</code> za <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Vrne vsebino tabele Delta Lake.",
        "Documentation.LongDescription": "Vrne vsebino tabele Delta Lake.",
        "Documentation.Category": "Dostop do podatkov",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Iz navedene vrednosti ustvari vrednost s plavajočo vejico in dvojno natančnostjo.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne vrednost s plavajočo vejico in dvojno natančnostjo <code>number</code>. Če je navedena vrednost <code>value</code> vrste <code>null</code>, <code>Double.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> vrste <code>number</code> v obsegu vrednosti s plavajočo vejico in dvojno natančnostjo, je vrnjena vrednost <code>value</code>, v nasprotnem primeru pa napaka. Če je navedena vrednost <code>value</code> katere koli druge vrste, glejte <code>Number.FromText</code> in jo pretvorite v vrednost <code>number</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost s plavajočo vejico in dvojno natančnostjo <code>number</code> za <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Vrne del dni za trajanje.",
        "Documentation.LongDescription": "Vrne del dni za<code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Izvlecite število dni med dvema datumoma.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Ustvari trajanje iz dane vrednosti.",
        "Documentation.LongDescription": "Vrne vrednost <code>duration</code> iz dane vrednosti <code>value</code>. Če je dana vrednost <code>value</code> <code>null</code>, <code>Duration.From</code> vrne <code>null</code>.  Če je dana vrednost <code>value</code> <code>duration</code>, je vrnjena vrednost <code>value</code>. V vrednost <code>duration</code> lahko pretvorite vrednosti teh vrst:\r\n      <ul>\r\n        <li><code>text</code>: vrednost <code>duration</code> trajanja iz besedilnih oblik pretečenega časa (d.h:m:s). Za podrobnosti glejte <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>: ekvivalent <code>duration</code> za število celih dni in dni, izraženih z ulomki, predstavljen kot <code>value</code>.</li>\r\n      </ul>\r\nČe je vrednost <code>value</code> katere koli druge vrste, je vrnjena napaka.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>2.525</code> v vrednost <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Vrne vrednost trajanja iz besedilnih oblik pretečenega časa (d.h:m:s).",
        "Documentation.LongDescription": "Vrne vrednost trajanja določenega besedila, <code>text</code>. Ta funkcija omogoča razčlenitev teh oblik zapisov:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Vsi obsegi so vključeni)<br>\r\n        ddd: število dni.<br>\r\n        hh: število ur, med 0 in 23.<br>\r\n        mm: število minut, med 0 in 59.<br>\r\n        ss: število sekund, med 0 in 59.<br>\r\n        ff: stotinke, med 0 in 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>\"2.05:55:20\"</code> v vrednost <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Vrne del ur za trajanje.",
        "Documentation.LongDescription": "Vrne del ur za <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ekstrahirajte ure iz vrednosti trajanja.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Vrne del minut za trajanje.",
        "Documentation.LongDescription": "Vrne del minut za <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ekstrahirajte minute iz vrednosti trajanja.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Vrne del sekund za trajanje.",
        "Documentation.LongDescription": "Vrne del sekund za <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ekstrahirajte sekunde iz vrednosti trajanja.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Vrne zapis, ki vsebuje dele trajanja.",
        "Documentation.LongDescription": "Vrne zapis, ki vsebuje dele vrednosti trajanja, <code>duration</code>. \r\n  <ul>\r\n        <li><code>duration</code>: vrednost <code>duration</code>, iz katere se ustvari zapis.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>#duration(2, 5, 55, 20)</code> v zapis delov, vključno z dnevi, urami, minutami in sekundami, če je ustrezno.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Vrne besedilo oblike »d.h:m:s«.",
        "Documentation.LongDescription": "Vrne besedilno predstavitev v obliki »dan.ura:min:sek« iz navedene vrednosti trajanja <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: izračunana je parameter <code>duration</code> in besedilne predstavitve.</li>\r\n  <li><code>format</code>: <i>[Izbirno]</i> Ukinjeno, če ni nastavljena na nič, se prikaže sporočilo o napaki</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>#duration(2, 5, 55, 20)</code> v besedilno vrednost.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Vrne vse dni obsega trajanja.",
        "Documentation.LongDescription": "Vrne skupno št. dni, ki jih vključuje <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Poiščite skupno št. dni, ki jih vključuje vrednost trajanja.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Vrne vse ure obsega trajanja.",
        "Documentation.LongDescription": "Vrne skupno št. ur, ki jih vključuje <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Poiščite skupno št. ur, ki jih vključuje vrednost trajanja.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Vrne vse minute obsega trajanja.",
        "Documentation.LongDescription": "Vrne skupno št. minut, ki jih vključuje <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Poiščite skupno št. minut, ki jih vključuje vrednost trajanja.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Vrne vse sekunde obsega trajanja.",
        "Documentation.LongDescription": "Vrne skupno št. sekund, ki jih vključuje <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Poiščite skupno št. sekund, ki jih vključuje vrednost trajanja.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Vrne zapis o napaki iz podanih besedilnih vrednosti za razlog, sporočilo in podrobnosti.",
        "Documentation.LongDescription": "Vrne zapis o napaki iz podanih besedilnih vrednosti za razlog, sporočilo in podrobnosti.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Vrne predstavitev izvorne kode M vrednosti konstante.",
        "Documentation.LongDescription": "Vrne predstavitev izvorne kode M vrednosti konstante.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Pridobite predstavitev izvorne kode M številske vrednosti.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Pridobite predstavitev izvorne kode M datumske vrednosti.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Pridobite predstavitev izvorne kode M besedilne vrednosti.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Vrne rezultat ovrednotenja izraza M.",
        "Documentation.LongDescription": "Vrne rezultat ovrednotenja izraza M <code>document</code> z razpoložljivimi identifikatorji za sklicevanje, ki so določeni z <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Ovrednotite preprosto vsoto.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Ovrednotite bolj zapleteno vsoto.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Ovrednotite spojitev besedilne vrednosti z identifikatorjem.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Vrne predstavitev izvorne kode M identifikatorja.",
        "Documentation.LongDescription": "Vrne predstavitev izvorne kode M identifikatorja <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Pridobite predstavitev izvorne kode M identifikatorja.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Pridobite predstavitev izvorne kode M identifikatorja, ki vsebuje presledek.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Vrne vsebino določene datoteke kot dvojiško vrednost.",
        "Documentation.LongDescription": "Vrne vsebino datoteke, <code>path</code>, kot dvojiško vrednost. Parameter <code>options</code> je trenutno namenjen samo za notranjo uporabo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Vrne, ali je določena funkcija obravnavana kot vir podatkov.",
        "Documentation.LongDescription": "Vrne, ali je <code>function</code> obravnavan kot vir podatkov.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Prevede besedilo, ki predstavlja geografsko vrednost v obliki zapisa Well-Known Text (WKT), v strukturiran zapis.",
        "Documentation.LongDescription": "Prevede besedilo, ki predstavlja geografsko vrednost v obliki zapisa Well-Known Text (WKT), v strukturiran zapis. WKT je standardna oblika zapisa, ki jo opredeljuje Open Geospatial Consortium (OGC) in je običajna oblika zapisa serializacije, ki jo uporabljajo zbirke podatkov, vključno s strežnikom SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Prevede vrednost strukturirane geografske točke v svojo upodobitev Well-Known Text (WKT).",
        "Documentation.LongDescription": "Prevede vrednost strukturirane geografske točke v svojo upodobitev Well-Known Text (WKT), ki ga opredeljuje Open Geospatial Consortium (OGC), vključno z obliko serializacije, ki jo uporablja veliko zbirk podatkov, vključno s strežnikom SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Prevede besedilo, ki predstavlja geometrijsko vrednost v obliki zapisa Well-Known Text (WKT), v strukturiran zapis.",
        "Documentation.LongDescription": "Prevede besedilo, ki predstavlja geometrijsko vrednost v obliki zapisa Well-Known Text (WKT), v strukturiran zapis. WKT je standardna oblika zapisa, ki jo opredeljuje Open Geospatial Consortium (OGC) in je običajna oblika zapisa serializacije, ki jo uporabljajo zbirke podatkov, vključno s strežnikom SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Prevede vrednost strukturirane geometrijske točke v svojo upodobitev Well-Known Text (WKT).",
        "Documentation.LongDescription": "Prevede vrednost strukturirane geometrijske točke v svojo upodobitev Well-Known Text (WKT), ki ga opredeljuje Open Geospatial Consortium (OGC), vključno z obliko serializacije, ki jo uporablja veliko zbirk podatkov, vključno s strežnikom SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Vrne vrednost GUID navedene vrednosti.",
        "Documentation.LongDescription": "Vrne vrednost <code>Guid. Vrednost Type</code> iz navedene vrednosti <code>value</code>. Če je navedena vrednost <code>value</code> <code>null</code>, <code>Guid.From</code> vrne <code>null</code>. Izvedeno bo preverjanje, pri katerem bo preverjeno, ali je navedena vrednost <code>value</code> v sprejemljivi obliki zapisa. Sprejemljive oblike zapisa so navedene v primerih.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "GUID lahko navedete v obliki 32 sosednjih šestnajstiških števk.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID lahko navedete v obliki 32 sosednjih šestnajstiških števk, ločenih z vezaji v bloke po 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID lahko navedete v obliki 32 sosednjih šestnajstiških števk, ločenih z vezaji in vključenih v zavite oklepaje.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID lahko navedete v obliki 32 sosednjih šestnajstiških števk, ločenih z vezaji in vključenih v okrogle oklepaje.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Iz navedene vrednosti ustvari 16-bitno celo število.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne 16-bitno celoštevilsko vrednost <code>number</code>. Če je navedena vrednost <code>value</code> vrste <code>null</code>, <code>Int16.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> vrste <code>number</code> v obsegu 16-bitnega celega števila in brez ulomka, je vrnjena vrednost <code>value</code>. Če ima ulomek, je število zaokroženo z določenim načinom zaokroževanja. Privzeti način zaokroževanja je <code>RoundingMode.ToEven</code>. Če je navedena vrednost <code>value</code> katere koli druge vrste, glejte <code>Number.FromText</code> in jo pretvorite v vrednost <code>number</code>. Glejte <code>Number.Round</code> za načine zaokroževanja, ki so na voljo. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite 16-bitno celoštevilsko vrednost <code>number</code> za <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Poiščite 16-bitno celoštevilsko vrednost <code>number</code> za <code>\"4.5\"</code> z načinom zaokroževanja <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Iz navedene vrednosti ustvari 32-bitno celo število.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne 32-bitno celoštevilsko vrednost <code>number</code>. Če je navedena vrednost <code>value</code> vrste <code>null</code>, <code>Int32.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> vrste <code>number</code> v obsegu 32-bitnega celega števila in brez ulomka, je vrnjena vrednost <code>value</code>. Če ima ulomek, je število zaokroženo z določenim načinom zaokroževanja. Privzeti način zaokroževanja je <code>RoundingMode.ToEven</code>. Če je navedena vrednost <code>value</code> katere koli druge vrste, glejte <code>Number.FromText</code> in jo pretvorite v vrednost <code>number</code>. Glejte <code>Number.Round</code> za načine zaokroževanja, ki so na voljo. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite 32-bitno celoštevilsko vrednost <code>number</code> za <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Poiščite 32-bitno celoštevilsko vrednost <code>number</code> za <code>\"4.5\"</code> z načinom zaokroževanja <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Iz dane vrednosti ustvari 64-bitno celo število.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne 64-bitno celoštevilsko vrednost <code>number</code>. Če je navedena vrednost <code>value</code> vrste <code>null</code>, <code>Int64.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> vrste <code>number</code> v obsegu 64-bitnega celega števila in brez ulomka, je vrnjena vrednost <code>value</code>. Če ima ulomek, je število zaokroženo z določenim načinom zaokroževanja. Privzeti način zaokroževanja je <code>RoundingMode.ToEven</code>. Če je navedena vrednost <code>value</code> katere koli druge vrste, glejte <code>Number.FromText</code> in jo pretvorite v vrednost <code>number</code>. Glejte <code>Number.Round</code> za načine zaokroževanja, ki so na voljo. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite 64-bit celo število z vrednostjo <code>number</code> za <code>»4«</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Pridobite 64-bitno celoštevilsko vrednost <code>število</code> <code>\"4.5\"</code> z načinom zaokroževanja <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Iz navedene vrednosti ustvari podpisano 8-bitno celo število.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne 8-bitno celoštevilsko vrednost <code>number</code>. Če je navedena vrednost <code>value</code> vrste <code>null</code>, <code>Int8.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> vrste <code>number</code> v obsegu 8-bitnega celega števila in brez ulomka, je vrnjena vrednost <code>value</code>. Če ima ulomek, je število zaokroženo z določenim načinom zaokroževanja. Privzeti način zaokroževanja je <code>RoundingMode.ToEven</code>. Če je navedena vrednost <code>value</code> katere koli druge vrste, glejte <code>Number.FromText</code> in jo pretvorite v vrednost <code>number</code>. Glejte <code>Number.Round</code> za načine zaokroževanja, ki so na voljo. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite podpisano 8-bitno celoštevilsko vrednost <code>number</code> za <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Poiščite podpisano 8-bitno celoštevilsko vrednost <code>number</code> za <code>\"4.5\"</code> z načinom zaokroževanja <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Vrne abstraktno sintaksa drevo (AST) za telo funkcija.",
        "Documentation.LongDescription": "<p>Vrne drevo abstraktne sintakse (AST) za telo <code>function</code>, normalizirano v <i>izraz elementa</i>:\r\n<ul>\r\n  <li>Funkcija mora biti lambda z enim argumentom.</li>\r\n  <li>Vsi sklici na parameter funkcije so zamenjani z <code>ItemExpression.Item</code>.</li>\r\n  <li>Drevo AST bo poenostavljeno tako, da bo vsebovalo samo naslednje vrste vozlišč:\r\n    <ul>\r\n      <li><code>Konstanta</code></li>\r\n      <li><code>Priklic</code></li>\r\n      <li><code>Unarno</code></li>\r\n      <li><code>Dvojiško</code></li>\r\n      <li><code>Če</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Če izraza elementa AST ni mogoče vrniti za telo <code>function</code>, se prikaže sporočilo napaki.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vrne AST za telo funkcije <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Vrne vsebino dokumenta JSON.",
        "Documentation.LongDescription": "Vrne vsebino dokumenta JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Ustvari predstavitev zapisa JSON za navedeno vrednost.",
        "Documentation.LongDescription": "<p>Ustvari obliko zapisa JSON navedene vrednosti <code>value</code> s kodiranjem besedila, ki je določeno s parametrom <code>encoding</code>. Če parameter <code>encoding</code> izpustite, je uporabljena oblika UTF8. Vrednosti so predstavljene tako:</p>\r\n <ul>\r\n        <li>Ničelne, besedilne in logične vrednosti so predstavljene ko ustrezne vrste oblike zapisa JSON.</li>\r\n        <li>Števila so predstavljena kot števila v obliki zapisa JSON, le da so <code>#infinity</code>, <code>-#infinity</code> in <code>#nan</code> pretvorjene v ničelne vrednosti.</li>\r\n        <li>Seznami so predstavljeni kot polja strežnikov JSON.</li>\r\n        <li>Zapisi so predstavljeni kot predmeti JSON.</li>\r\n        <li>Tabele so predstavljene kot polja strežnikov predmetov</li>\r\n        <li>Datumi, ure, vrednosti »datetime«, vrednosti »datetimezone« in trajanja so predstavljeni kot besedilo ISO-8601.</li>\r\n        <li>Dvojiške vrednosti so predstavljene kot besedilo, kodirano s shemo base-64</li>\r\n        <li>Vrste in funkcije ustvarijo napako.</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite zapleteno vrednost v JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Pretvori dvojiško vrednost v seznam besedilnih vrednosti, ločenih pri prelomih vrstic. Če je določen slog narekovajev, se lahko prelomi vrstic prikažejo v narekovajih. Če je vrednost »includeLineSeparators« enaka »true«, so znaki za prelom vrstic vključeni v besedilo.",
        "Documentation.LongDescription": "Pretvori dvojiško vrednost v seznam besedilnih vrednosti, ločenih pri prelomih vrstic. Če je določen slog narekovajev, se lahko prelomi vrstic prikažejo v narekovajih. Če je vrednost »includeLineSeparators« enaka »true«, so znaki za prelom vrstic vključeni v besedilo.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Pretvori besedilno vrednost v seznam besedilnih vrednosti, ločenih pri prelomih vrstic. Če je vrednost »includeLineSeparators« enaka »true«, so znaki za prelom vrstic vključeni v besedilo.",
        "Documentation.LongDescription": "Pretvori besedilno vrednost v seznam besedilnih vrednosti, ločenih pri prelomih vrstic. Če je vrednost »includeLineSeparators« enaka »true«, so znaki za prelom vrstic vključeni v besedilo.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (privzeto) dodati ni treba nobenih narekovajev.</li>\r\n            <li><code>QuoteStyle.Csv:</code> narekovaji so dodani v skladu z obliko zapisa CSV. Dvojni narekovaj je uporabljen za razmejitev takih območij, s parom dvojnih narekovajev pa je označen en dvojni narekovaj v takem območju. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Pretvori seznam besedila v dvojiško vrednost z določenim kodiranjem in lineSeparator. Določeni lineSeparator je priložen vsaki vrstici.  Če ni določen, se uporabijo vrnitev prevoza in znaki za pomike v novo vrstico.",
        "Documentation.LongDescription": "Pretvori seznam besedila v dvojiško vrednost z določenim kodiranjem in lineSeparator. Določeni lineSeparator je priložen vsaki vrstici.  Če ni določen, se uporabijo vrnitev prevoza in znaki za pomike v novo vrstico.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Pretvori seznam besedil v eno besedilo.  Določeni lineSeparator je priložen vsaki vrstici.  Če ni določen, se uporabijo vrnitev prevoza in znaki za pomike v novo vrstico.",
        "Documentation.LongDescription": "Pretvori seznam besedil v eno besedilo.  Določeni lineSeparator je priložen vsaki vrstici.  Če ni določen, se uporabijo vrnitev prevoza in znaki za pomike v novo vrstico.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Vrne vrednost »true«, če so vsi izrazi »true«.",
        "Documentation.LongDescription": "Vrne vrednost »true«, če so vsi izrazi na seznamu <code>list</code> »true«.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali so vsi izrazi na seznamu {true, true, 2 > 0} »true«.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali so vsi izrazi na seznamu {true, true, 2 < 0} »true«.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Vrne vrednost »true«, če je kateri koli izraz »true«.",
        "Documentation.LongDescription": "Vrne vrednost »true«, če ja kateri koli izraz na seznamu <code>list</code> »true«.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali je kateri od izrazov na seznamu {true, false, 2 > 0} »true«.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali je kateri od izrazov na seznamu {2 = 0, false, 2 < 0} »true«.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Vrne povprečje vrednosti. Deluje z vrednostmi »number«, »date«, »datetime«, »datetimezone« in »duration«.",
        "Documentation.LongDescription": "Vrne povprečno vrednost za elemente na seznamu, <code>list</code>. Rezultat je prikazan v enaki vrsti podatkov kot vrednosti na seznamu. Deluje le z vrednostmi »number«, »date«, »time«, »datetime«, »datetimezone« in »duration«.\r\n    Če je seznam prazen, je vrnjena vrednost »null«.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Poiščite povprečje seznama števil, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Poiščite povprečje datumskih vrednosti 1. januar 2011, 2. januar 2011 in 3. januar 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Shrani seznam v medpomnilnik.",
        "Documentation.LongDescription": "Shrani seznam <code>list</code> v medpomnilnik. Rezultat tega klica je trajen seznam.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite trajno kopijo seznama {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Vrne en seznam, tako da združi več seznamov.",
        "Documentation.LongDescription": "Vzame seznam seznamov, <code>lists</code>, in jih spoji v en nov seznam.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Združite dva preprosta seznama {1, 2} in {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Združite dva seznama, {1, 2} in {3, {4, 5}}, pri čemer eden vsebuje ugnezdeni seznam.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Vrne število elementov na seznamu.",
        "Documentation.LongDescription": "Vrne število elementov na seznamu <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Poiščite število vrednosti na seznamu {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Vrne seznam vrednosti, iz katerega so odstranjeni dvojniki.",
        "Documentation.LongDescription": "Vrne seznam, ki vsebuje vse vrednosti na seznamu <code>list</code>, iz katerega so odstranjeni dvojniki. Če je seznam prazen, je rezultat prazen seznam.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Odstranite dvojnike iz seznama {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Vrne prvo vrednost seznama ali navedeno privzeto vrednost, če je seznam prazen.",
        "Documentation.LongDescription": "Vrne prvi element na seznamu <code>list</code> ali izbirno privzeto vrednost, <code>defaultValue</code>, če je seznam prazen.\r\n    Če je seznam prazen in privzeta vrednost ni določena, funkcija vrne <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite prvo vrednost na seznamu {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Poiščite prvo vrednost na seznamu {}. Če je seznam prazen, vrnite –1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Vrne presek vrednosti seznama, najdenih v vnosu.",
        "Documentation.LongDescription": "Vrne presek vrednosti seznama, najdenih na vhodnem seznamu <code>lists</code>. Določite lahko izbirni parameter, <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite presek seznamov {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Označuje, ali so na seznamu dvojniki.",
        "Documentation.LongDescription": "Vrne logično vrednost, če so dvojniki na seznamu <code>list</code>; <code>true</code>, če je seznam razlikovalen, <code>false</code>, če so vrednosti podvojene. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali je seznam {1, 2, 3} razlikovalen (tj. brez dvojnikov).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali je seznam {1, 2, 3, 3} razlikovalen (tj. brez dvojnikov).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Vrne »true«, če je seznam prazen.",
        "Documentation.LongDescription": "Vrne <code>true</code>, če seznam, <code>list</code>, ne vsebuje vrednosti (dolžina 0). Če seznam vsebuje vrednosti (dolžina > 0), vrne <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali je seznam {} prazen.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali je seznam {1, 2} prazen.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Vrne zadnjo vrednost seznama ali navedeno privzeto vrednost, če je seznam prazen.",
        "Documentation.LongDescription": "Vrne zadnji element na seznamu <code>list</code> ali izbirno privzeto vrednost, <code>defaultValue</code>, če je seznam prazen.\r\n    Če je seznam prazen in privzeta vrednost ni določena, funkcija vrne <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite zadnjo vrednost na seznamu {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Poiščite zadnjo vrednost na seznamu {} ali –1, če je seznam prazen.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Vrne zadnjo vrednost na seznamu.  Izbirno lahko določa število vrnjenih vrednosti ali ustrezen pogoj.",
        "Documentation.LongDescription": "Vrne zadnji element seznama <code>list</code>. Če je seznam prazen, pride do izjeme.\r\n Ta funkcija vzame izbirni parameter <code>countOrCondition</code> za podporo zbiranja več elementov ali filtriranja elementov. Parameter <code>countOrCondition</code> lahko določite na tri načine:\r\n <ul>\r\n  <li>Če navedete število, je vrnjenih največ toliko elementov. </li>\r\n  <li>Če navedete pogoj, so vrnjeni vsi elementi, ki prvotno izpolnjujejo pogoj (z začetkom na koncu seznama). Ko določen element ne izpolnjuje več pogoja, nadaljnji elementi niso upoštevani. </li>\r\n  <li>Če je ta parameter ničeln, je vrnjen zadnji element na seznamu.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite zadnjo vrednost na seznamu {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Poiščite zadnje vrednosti na seznamu {3, 4, 5, -1, 7, 8, 2}, ki so večje od 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Vrne največjo vrednost ali privzeto vrednost za prazen seznam.",
        "Documentation.LongDescription": "Vrne največji element na seznamu <code>list</code> ali izbirno privzeto vrednost <code>default</code>, če je seznam prazen.\r\n    Z izbirno vrednostjo »comparisonCriteria«, <code>comparisonCriteria</code>, lahko določite način primerjave elementov na seznamu. Če je ta parameter ničeln, se uporabi privzeti primerjalnik.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Poiščite največjo vrednost na seznamu {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Poiščite največjo vrednost na seznamu {} ali vrnite –1, če je seznam prazen. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Vrne mediano na seznamu.",
        "Documentation.LongDescription": "Vrne mediano elementa seznama <code>list</code>. Ta funkcija vrne <code>ničelno</code>vrednost, če seznam vsebuje vrednosti, ki niso <code>ničelne</code>.\r\n    Če je število elementov sodo, funkcija izbere manjšo od dveh median elementov, razen če je seznam\r\n    sestavljen v celoti iz datumov in ur, trajanj, številk ali časov – v tem primeru vrne povprečje dveh elementov.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Poiščite mediano seznama <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Vrne najmanjšo vrednost ali privzeto vrednost za prazen seznam.",
        "Documentation.LongDescription": "Vrne najmanjši element na seznamu <code>list</code> ali izbirno privzeto vrednost <code>default</code>, če je seznam prazen.\r\n    Z izbirno vrednostjo »comparisonCriteria«, <code>comparisonCriteria</code>, lahko določite način primerjave elementov na seznamu. Če je ta parameter ničeln, se uporabi privzeti primerjalnik.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Poiščite najmanjšo vrednost na seznamu {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Poiščite najmanjšo vrednost na seznamu {} ali vrnite –1, če je seznam prazen. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Vrne najpogostejšo vrednost na seznamu.",
        "Documentation.LongDescription": "Vrne element, ki je najpogosteje prikazan na seznamu, <code>list</code>. Če je seznam prazen, pride do izjeme. Če je prikazanih več elementov z enako največjo pogostostjo, je izbran zadnji element.\r\n    Določite lahko izbirno vrednost <code>comparisonCriteria</code>, <code>equationCriteria</code>, za nadzor preskušanja enakosti. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Poiščite element, ki je najpogosteje prikazan na seznamu <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Poiščite element, ki je najpogosteje prikazan na seznamu <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Vrne seznam najpogostejših vrednosti na seznamu.",
        "Documentation.LongDescription": "Vrne element, ki je najpogosteje prikazan na seznamu, <code>list</code>. Če je seznam prazen, pride do izjeme. Če je prikazanih več elementov z enako največjo pogostostjo, je izbran zadnji element.\r\n    Določite lahko izbirno vrednost <code>comparisonCriteria</code>, <code>equationCriteria</code>, za nadzor preskušanja enakosti. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Poiščite elemente, ki so najpogosteje prikazani na seznamu <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Vrne število neničelnih elementov na seznamu.",
        "Documentation.LongDescription": "Vrne število neničelnih elementov na seznamu <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Vrne seznam odmikov za vnos.",
        "Documentation.LongDescription": "Vrne seznam odmikov za vhodni seznam <code>list</code>.\r\n    Ko spreminjate seznam s funkcijo »List.Transform«, lahko uporabite seznam položajev, da omogočite pretvorbi dostop do položaja.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite odmike vrednosti na seznamu {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Vrne zmnožek števil na seznamu.",
        "Documentation.LongDescription": "Vrne zmnožek neničelnih števil na seznamu, <code>numbersList</code>. Vrne »null«, če na seznamu ni neničelnih vrednosti.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Poiščite zmnožek števil na seznamu <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Vrne seznam naključnih števil.",
        "Documentation.LongDescription": "Vrne seznam naključnih števil med 0 in 1, če navedete število vrednosti, ki bodo ustvarjene, in izbirno vrednost semena.\r\n<ul>\r\n   <li><code>count</code>: število naključnih vrednosti, ki bodo ustvarjene.</li>\r\n   <li><code>seed</code>:  <i>[izbirno]</i> številska vrednost za dodajanje ustvarjalnika naključnih števil.  Če to vrednost izpustite, je ob vsakem klicu funkcije ustvarjen enoličen seznam naključnih števil.  Če določite vrednost semena s številom, se za vsak klic v funkcijo ustvari enak seznam naključnih števil.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam 3 naključnih števil.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Ustvarite seznam 3 naključnih števil, tako da določite vrednost semena.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Vrne seznam, ki preskoči navedeno število elementov na začetku seznama.",
        "Documentation.LongDescription": "Vrne seznam, ki odstrani prvi element seznama <code>list</code>. Če je seznam <code>list</code> prazen seznam, je vrnjen prazen seznam.\r\nTa funkcija uporabi izbirni parameter, <code>countOrCondition</code>, da omogoči odstranjevanje več vrednosti, kot je navedeno spodaj.\r\n <ul>\r\n <li>Če je število določeno, je odstranjenih največ toliko elementov. </li>\r\n <li>Če je določen pogoj, bodo vsi sledeči ujemajoči se elementi na začetku seznama <code>list</code> odstranjeni.</li>\r\n <li>Če je ta parameter ničeln, se upošteva privzeto vedenje. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam iz {1, 2, 3, 4, 5} brez prvih 3 števil.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Ustvarite seznam iz {5, 4, 2, 6, 1}, ki se začne s številom, manjšim od 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Vrne seznam, ki odstrani navedeno število elementov na koncu seznama.",
        "Documentation.LongDescription": "Vrne seznam, ki odstrani zadnjih <code>countOrCondition</code> elementov na koncu seznama <code>list</code>. Če ima seznam <code>list</code> manj kot <code>countOrCondition</code> elementov, je vrnjen prazen seznam.\r\n <ul>\r\n <li>Če je število določeno, je odstranjenih največ toliko elementov. </li>\r\n <li>Če je določen pogoj, bodo vsi sledeči ujemajoči se elementi na koncu seznama <code>list</code> odstranjeni.</li>\r\n <li>Če je vrednost tega parametra ničelna, bo odstranjen le en element. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Ustvari seznam iz {1, 2, 3, 4, 5} brez zadnjih 3 števil.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Ustvari seznam iz {5, 4, 2, 6, 4}, ki se konča s številom, manjšim od 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Odstrani vse vrednosti »null« iz navedenega seznama.",
        "Documentation.LongDescription": "Odstrani vse pojavitve vrednosti »null« na seznamu <code>list</code>. Če na seznamu ni vrednosti »null«, je vrnjen izvirni seznam.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Odstranite vrednosti »null« iz seznama {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Obrne vrsti red vrednosti na seznamu.",
        "Documentation.LongDescription": "Vrne seznam z vrednostmi na seznamu <code>list</code> v obratnem vrstnem redu.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam iz {1..10} v obratnem vrstnem redu.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Vrne seznam z enim elementom za seznam z eno dolžino, sicer pride do izjeme.",
        "Documentation.LongDescription": "Če je na seznamu <code>list</code> le en element, vrne ta element.\r\n    Če je na seznamu več kot en element ali je seznam prazen, funkcija vrne izjemo.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite eno vrednost na seznamu {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Poiščite eno vrednost na seznamu {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Vrne seznam z enim elementom za seznam z eno dolžino in privzeto vrednost za prazen seznam.",
        "Documentation.LongDescription": "Če je na seznamu <code>list</code> le en element, vrne ta element.\r\n    Če je seznam prazen, funkcija vrne »null«, razen če določite izbirni parameter <code>default</code>. Če je na seznamu več kot en element, funkcija vrne napako.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite eno vrednost na seznamu {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Poiščite eno vrednost na seznamu {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Poiščite eno vrednost na seznamu {}. Če je seznam prazen, vrnite –1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Vrne seznam, ki preskoči navedeno število elementov na začetku seznama.",
        "Documentation.LongDescription": "Vrne seznam, ki preskoči prvi element seznama <code>list</code>. Če je seznam <code>list</code> prazen seznam, je vrnjen prazen seznam.\r\nTa funkcija uporabi izbirni parameter, <code>countOrCondition</code>, da omogoči preskok več vrednosti, kot je navedeno spodaj.\r\n <ul>\r\n <li>Če je število določeno, je preskočenih največ toliko elementov. </li>\r\n <li>Če je določen pogoj, bodo vsi sledeči ujemajoči se elementi na začetku seznama <code>list</code> preskočeni.</li>\r\n <li>Če je ta parameter ničeln, se upošteva privzeto vedenje. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam iz {1, 2, 3, 4, 5} brez prvih 3 števil.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Ustvarite seznam iz {5, 4, 2, 6, 1}, ki se začne s številom, manjšim od 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Razvrsti seznam podatkov glede na navedene kriterije.",
        "Documentation.LongDescription": "Razvrstite seznam podatkov, <code>list</code>, glede na navedene izbirne kriterije.\r\n    Kot kriterij primerjave lahko določite izbirni parameter <code>comparisonCriteria</code>. Funkcija lahko ima te vrednosti:\r\n    <ul>\r\n    <li> Kriterij primerjave za nadzor vrstnega reda je lahko vrednost »Order enum«. (<code>Order.Descending</code>, <code>Order.Ascending</code>) </li>\r\n    <li> Za izračun ključa za razvrščanje lahko uporabite funkcijo z 1 argumentom. </li> \r\n    <li> Če želite izbrati ključ in nadzorovati vrstni red, lahko kot kriterij primerjave določite seznam, ki vsebuje ključ in vrstni red (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Če želite v celoti nadzorovati primerjavo, lahko uporabite funkcijo z 2 argumentoma. Ta funkcija bo posredovana dvema elementoma s seznama (poljubna dva elementa v poljubem vrstnem redu). Funkcija mora vrniti eno od teh vrednosti:\r\n        <ul>\r\n            <li> <code>-1</code>: Prvi element je manjši od drugega elementa.</li>\r\n            <li> <code>0</code>: Elementi so enaki.</li>\r\n            <li> <code>1</code>: Prvi element je večji od drugega elementa.</li>\r\n        </ul>\r\n       Value.Compare je način, ki ga je mogoče uporabiti za dodeljevanje te logike. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Razvrstite seznam {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Razvrstite seznam {2, 3, 1} v padajočem vrstnem redu.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Razvrstite seznam {2, 3, 1} v padajočem vrstnem redu z metodo »Value.Compare«.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Vrne oceno standardnega odklona glede na vzorec.",
        "Documentation.LongDescription": "Vrne oceno standardnega odklona vrednosti na seznamu <code>numbersList</code> glede na vzorec.\r\n    Če je <code>numbersList</code> seznam števil, je vrnjeno število.\r\n    Če je seznam prazen ali vsebuje elemente, ki niso vrste <code>number</code>, pride do izjeme.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Poiščite standardni odklon števil od 1 do 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Vrne vsoto elementov na seznamu.",
        "Documentation.LongDescription": "Vrne vsoto neničelnih vrednosti na seznamu, <code>list</code>.  Vrne »null«, če na seznamu ni neničelnih vrednosti.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vsoto števil na seznamu <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Vrne zvezo vrednosti seznama, najdenih v vnosu.",
        "Documentation.LongDescription": "Vzame seznam seznamov <code>lists</code>, združi elemente na posameznih seznamih in jih vrne v izhodnem seznamu. Vrnjeni seznam vsebuje vse elemente na katerem koli vhodnem seznamu.\r\n    Ta postopek ohrani tradicionalno semantiko vrste bag, pri čemer se podvojene vrednosti povežejo med izračunom zveze.\r\n    Določite lahko izbirno vrednost meril enakosti <code>equationCriteria</code> za nadzor preskušanja enakosti. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite zvezo seznamov {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Vrne seznam tako, da združi elemente na istem mestu na več seznamih.",
        "Documentation.LongDescription": "Vzame seznam seznamov, <code>lists</code>, in vrne seznam seznamov tako, da združi elemente na istem mestu.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Stisne dva preprosta seznama, {1, 2} in {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Stisne dva preprosta seznama različnih dolžin, {1, 2} in {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Ustvari logično vrednost iz dane vrednosti.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne vrednost <code>logical</code>. Če je dana vrednost <code>value</code> <code>null</code>, <code>Logical.From</code> vrne <code>null</code>.  Če je dana vrednost <code>value</code> <code>logical</code>, je vrnjena vrednost <code>value</code>. V vrednost <code>logical</code> lahko pretvorite vrednosti teh vrst:\r\n      <ul>\r\n        <li><code>text</code>: vrednost <code>logical</code> iz besedilne vrednosti, ki je <code>\"true\"</code> ali <code>\"false\"</code>. Za podrobnosti glejte <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>false</code>, če je <code>value</code> enako <code>0</code>, sicer <code>true</code>.</li>\r\n      </ul>\r\nČe je vrednost <code>value</code> katere koli druge vrste, je vrnjena napaka.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>2</code> v vrednost <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Ustvari logično vrednost iz besedilnih vrednosti »true« in »false«.",
        "Documentation.LongDescription": "Ustvari logično vrednost iz besedilne vrednosti <code>text</code>, ki je »true« ali »false«. Če <code>text</code> vsebuje drugačen niz, pride do izjeme. Besedilna vrednost <code>text</code> ne razlikuje med velikimi in malimi črkami.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite logično vrednost iz besedilnega niza »true«.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Ustvarite logično vrednost iz besedilnega niza »a«.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Vrne besedilo »true« ali »false«, če navedete logično vrednost.",
        "Documentation.LongDescription": "Ustvari besedilno vrednost iz logične vrednosti <code>logicalValue</code>, ki je <code>true</code> ali <code>false</code>. Če <code>logicalValue</code> ni logična vrednost, pride do izjeme.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite besedilno vrednost iz logične vrednosti <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Vrne absolutno vrednost števila.",
        "Documentation.LongDescription": "Vrne absolutno vrednost števila <code>number</code>. Če ima <code>number</code> ničelno vrednost, <code>Number.Abs</code> vrne »null«.\r\n    <ul>\r\n        <li><code>number</code>: <code>number</code>, za katero bo izračunana absolutna vrednost.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Absolutna vrednost števila –3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Vrne arkus kosinus števila.",
        "Documentation.LongDescription": "Vrne arkus kosinus števila <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Vrne arkus sinus števila.",
        "Documentation.LongDescription": "Vrne arkus sinus števila <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Vrne arkus tangens števila.",
        "Documentation.LongDescription": "Vrne arkus tangens števila <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Vrne bajt, kjer je vsak bit nasprotje vnosa.",
        "Documentation.LongDescription": "Vrne rezultat izvajanja bitne operacije »Not« za <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Vrne kosinus števila.",
        "Documentation.LongDescription": "Vrne kosinus števila <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Poiščite kosinus kota 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Vrne hiperbolični kosinus števila.",
        "Documentation.LongDescription": "Vrne hiperbolični kosinus števila <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Potencira »e« na dani eksponent.",
        "Documentation.LongDescription": "Vrne rezultat potenciranja »e« na eksponent <code>number</code> (eksponentna funkcija).\r\n      <ul>\r\n        <li><code>number</code>: <code>number</code>, za katero bo izračunana eksponentna funkcija. Če ima <code>number</code> ničelno vrednost, <code>Number.Exp</code> vrne »null«. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Potencirajte »e« na eksponent 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Vrne fakulteto števila.",
        "Documentation.LongDescription": "Vrne fakulteto števila <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite fakulteto števila 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Ustvari številsko vrednost iz dane vrednosti.",
        "Documentation.LongDescription": "Vrne vrednost <code>number</code> iz navedene vrednosti <code>value</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).\r\nČe je navedena vrednost <code>value</code> <code>null</code>, <code>Number.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> <code>number</code>, je vrnjena vrednost <code>value</code>. V vrednost <code>number</code> lahko pretvorite vrednosti teh vrst:\r\n      <ul>\r\n        <li><code>text</code>: vrednost <code>number</code> iz predstavitve v obliki besedila. Obravnavane so običajne oblike besedila (»15«, »3,423.10«, »5.0E-10«). Za podrobnosti glejte <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: 1 za <code>true</code>, 0 za <code>false</code>.</li>   \r\n        <li><code>datetime</code>: število s plavajočo vejico z dvojno natančnostjo, ki vsebuje datumski ekvivalent avtomatizacije OLE.</li>\r\n        <li><code>datetimezone</code>: število s plavajočo vejico z dvojno natančnostjo, ki vsebuje datumski ekvivalent avtomatizacije OLE za lokalni datum in čas <code>value</code>.</li>\r\n        <li><code>date</code>: število s plavajočo vejico z dvojno natančnostjo, ki vsebuje datumski ekvivalent avtomatizacije OLE.</li>\r\n        <li><code>time</code>: predstavljeno kot dnevi, izraženi z ulomki.</li>\r\n        <li><code>duration</code>: predstavljeno v celoti in kot dnevi, izraženi z ulomki.</li>\r\n      </ul>\r\nČe je vrednost <code>value</code> katere koli druge vrste, je vrnjena napaka.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost <code>number</code> za <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Poiščite vrednost <code>number</code> za <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Pridobite vrednost <code>number</code> za <code>\"12.3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Ustvari števila iz običajnih oblik besedila (»15«, »3,423.10«, »5.0E-10«).",
        "Documentation.LongDescription": "Vrne vrednost <code>number</code> iz navedene besedilne vrednosti <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: predstavitev številske vrednosti v obliki besedila. Predstavitev mora biti v običajni obliki števila – »15«, »3,423.10«, »5.0E-10«.</li>\r\n  <li><code>culture</code>: izbirna kultura, ki nadzira način obravnave parametra <code>text</code> (na primer »sl-SI«).</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite številsko vrednost za <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Poiščite številsko vrednost za <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Označuje, ali je vrednost sodo število.",
        "Documentation.LongDescription": "Označuje, ali je vrednost <code>number</code> sodo število, tako da vrne <code>true</code>, če je število sodo, sicer vrne <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Preverite, ali je 625 sodo število.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Preverite, ali je 82 sodo število.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Označuje, ali je vrednost »NaN« (ni število).",
        "Documentation.LongDescription": "Označuje, ali je vrednost »NaN« (ni število). Vrne <code>true</code>, če je <code>number</code> enako <code>Number.IsNaN</code>, sicer vrne <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Preverite, ali je 0 deljeno z 0 »NaN«.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Preverite, ali je 1 deljeno z 0 »NaN«.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Označuje, ali je vrednost liho število.",
        "Documentation.LongDescription": "Označuje, ali je vrednost liho število. Vrne <code>true</code>, če je <code>number</code> liho število, sicer vrne <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Preverite, ali je 625 liho število.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Preverite, ali je 82 liho število.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Vrne naravni logaritem števila.",
        "Documentation.LongDescription": "Vrne naravni logaritem števila <code>number</code>. Če ima <code>number</code> ničelno vrednost, <code>Number.Ln</code> vrne »null«.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite naravni logaritem števila 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Vrne logaritem števila z določeno osnovo (privzeto »e«).",
        "Documentation.LongDescription": "Vrne logaritem števila <code>number</code> z določeno osnovo <code>base</code>. Če osnova <code>base</code> ni določena, je privzeta vrednost »Number.E«.\r\n    Če ima <code>number</code> ničelno vrednost, <code>Number.Log</code> vrne »null«.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite logaritem števila 2 z osnovo 10.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Poiščite logaritem števila 2 z osnovo »e«.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Vrne logaritem števila z osnovo 10.",
        "Documentation.LongDescription": "Vrne logaritem števila <code>number</code> z osnovo 10. Če ima <code>number</code> ničelno vrednost, <code>Number.Log10</code> vrne »null«.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite logaritem števila 2 z osnovo 10.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Vrne zaokroženo število. Določite lahko število števk in način zaokroževanja.",
        "Documentation.LongDescription": "Vrne rezultat zaokroževanja <code>number</code> na najbližjo številko. Če je <code>number</code> vrednost »null«, <code>Number.Round</code> vrne ničelno vrednost.<br>\r\n      <br>\r\n      Privzeto je element <code>number</code> zaokrožen na najbližje celo število in izenačene vrednosti so razdeljene z zaokroževanjem na najbližje sodo število (z uporabo parametra <code>RoundingMode.ToEven</code>, imenovanega tudi »zaokroževanje bankirja«).<br>\r\n      <br>\r\n      Te prevzete vrednosti lahko preglasite s temi privzetimi parametri.\r\n      <ul>\r\n        <li><code>digits</code>: element <code>number</code>je zaokrožen na določeno število decimalnih števk.</li>\r\n        <li><code>roundingMode</code>: privzeto vedenje razdelitve izenačenih vrednosti je preglašeno, ko ima element <code>number</code> srednjo vrednost med dvema potencialnima zaokroženima vrednostma\r\n      (za možne vrednosti glejte <code>RoundingMode.Type</code>).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrožite 1,234 na najbližje celo število.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokrožite 1,56 na najbližje celo število.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Zaokrožite 1,2345 na dve decimalni mesti.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Zaokrožite 1,2345 na tri decimalna mesta (navzgor).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Zaokrožite 1,2345 na tri decimalna mesta (navzdol).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Vrne rezultat zaokroževanja navzgor za pozitivna števila in navzdol za negativna števila. Določite lahko število števk.",
        "Documentation.LongDescription": "Vrne rezultat zaokroževanja <code>number</code> glede na predznak števila. Ta funkcija zaokroži pozitivna števila navzgor in negativna števila navzdol.\r\n    Če navedete <code>digits</code>, je <code>number</code> zaokrožen na število <code>digits</code> decimalnih mest.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrožite število –1,2 stran od nič.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Zaokrožite število 1,2 stran od nič.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Zaokroži število -1,234 na dve decimalni mesti stran od nič.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Vrne največje prejšnje število. Določite lahko število števk.",
        "Documentation.LongDescription": "Vrne rezultat zaokroževanja <code>number</code> navzdol na prejšnje največje celo število. Če ima <code>number</code> ničelno vrednost, funkcija vrne ničelno vrednost.\r\n\r\n    Če navedete <code>digits</code>, se <code>number</code> zaokroži na določeno število decimalnih števk.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrožite 1,234 navzdol na celo število.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokrožite 1,999 navzdol na celo število.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Zaokrožite 1,999 navzdol na dve decimalni mesti.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Vrne rezultat zaokroževanja navzdol za pozitivna števila in navzgor za negativna števila. Določite lahko število števk.",
        "Documentation.LongDescription": "Vrne rezultat zaokroževanja <code>number</code> glede na predznak števila. Ta funkcija zaokroži pozitivna števila navzdol in negativna števila navzgor.\r\n    Če navedete <code>digits</code>, je <code>number</code> zaokrožen na število <code>digits</code> decimalnih mest.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrožite število –1,2 proti nič.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Zaokrožite število 1,2 proti nič.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Zaokrožite število -1,234 na dve decimalni mesti proti nič.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Vrne naslednje največje število. Določite lahko število števk.",
        "Documentation.LongDescription": "Vrne rezultat zaokroževanja <code>number</code> navzgor na prejšnje največje celo število. Če ima <code>number</code> ničelno vrednost, funkcija vrne ničelno vrednost.\r\n    Če navedete <code>digits</code>, se <code>number</code> zaokroži na določeno število decimalnih števk.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrožite 1,234 navzgor na celo število.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Zaokrožite 1,999 navzgor na celo število.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Zaokrožite 1,234 navzgor na dve decimalni mesti.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Vrne 1, če je število pozitivno, –1, če je število negativno, in 0, če je število enako nič.",
        "Documentation.LongDescription": "Vrne 1, če je <code>number</code> pozitivno število, –1, če je negativno število, in 0, če je enako nič.\r\n    Če ima <code>number</code> ničelno vrednost, <code>Number.Sign</code> vrne »null«.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite predznak števila 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Ugotovite predznak števila –182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Ugotovite predznak števila 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Vrne sinus števila.",
        "Documentation.LongDescription": "Vrne sinus števila <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Poiščite sinus kota 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Vrne hiperbolični sinus števila.",
        "Documentation.LongDescription": "Vrne hiperbolični sinus števila <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Vrne kvadratni koren števila.",
        "Documentation.LongDescription": "Vrne kvadratni koren števila <code>number</code>.\r\n    Če ima <code>number</code> ničelno vrednost, <code>Number.Sqrt</code> vrne »null«. Če je negativna vrednost, je vrnjeno <code>Number.NaN</code> (ni število).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite kvadratni koren števila 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Poiščite kvadratni koren števila 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Vrne tangens števila.",
        "Documentation.LongDescription": "Vrne tangens števila <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Poiščite tangens kota 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Vrne hiperbolični tangens števila.",
        "Documentation.LongDescription": "Vrne hiperbolični tangens števila <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Pretvorite dano število v besedilo.",
        "Documentation.LongDescription": "Pretvori številsko vrednost <code>number</code> v besedilno vrednost glede na obliko zapisa, določeno s/z <code>format</code>.<br>\r\n    <br>\r\n    Oblika zapisa je besedilna vrednost, ki označuje način pretvorbe števila. Več podrobnosti o podprtih vrednostih oblike zapisa je na voljo na spletnem mestu https://go.microsoft.com/fwlink/?linkid=2241210 and https://go.microsoft.com/fwlink/?linkid=2240884<br>\r\n    <br>\r\n    Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«) za nadzor vedenja za <code>format</code>.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite število v besedilo brez navedbe oblike zapisa.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Pretvorite število v eksponentno obliko zapisa.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Pretvorite število v obliko zapisa odstotka z enim decimalnim mestom.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Vrne tabelo virov OData, ki jih ponuja storitev OData.",
        "Documentation.LongDescription": "Vrne tabelo virov OData, ki jih ponuja storitev OData iz uri <code>serviceUri</code>, glave <code>headers</code>. Logična vrednost, ki določa, ali naj se uporaba sočasne povezave ali izbiren parameter zapisa <code>options</code>, lahko določite za nadzor naslednjih možnosti:\r\n    <ul>\r\n    <li><code>Query</code>: programsko dodajte parametre poizvedbe URL-ju, pri tem pa vam ni treba skrbeti glede ubežnih znakov. </li>\r\n    <li> <code>Headers</code> : če navedete to vrednost kot zapis, omogočite dodatne glave za zahtevo HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: če navedete to vrednost v obliki seznama, ti ključi glave HTTP ne bodo del izračuna za predpomnjenje podatkov.</li>\r\n    <li> <code>ApiKeyName</code> : če je na ciljnem mestu omenjen ključ API, lahko s tem parametrom določite ime (ne vrednosti) parametra ključa, ki ga morate uporabiti v URL-ju. Dejanska vrednost ključa je navedena v poverilnicah.</li>\r\n    <li> <code>Timeout</code> : če določite to vrednost kot trajanje, boste spremenili časovno omejitev za zahtevo HTTP. Privzeta vrednost je 600 sekund.</li>\r\n    <li> <code>EnableBatch</code> : logična vrednost (true/false), s katero dovolite ustvarjanje zahteve OData $batch, če je prekoračena vrednost »MaxUriLength« (privzeta vrednost je »false«).</li>\r\n    <li> <code>MaxUriLength</code> : število, ki označuje največjo dovoljeno dolžino URI-ja, ki je poslan storitvi OData. Če to število prekoračite in je vrednost »EnableBatch« »true«, bo zahteva izvedena v končni točki OData $batch, v nasprotnem primeru pa je ne bo mogoče izvesti (privzeto število je 2048).</li>\r\n    <li> <code>Concurrent</code> : logična vrednost (true/false), ki hkrati pošlje zahteve storitvi, če je nastavljena na »true«. Če je nastavljena na »false«, bodo zahteve poslane zaporedoma. če te vrednosti ne določite, bo vrednost določena z opombo »AsynchronousRequestsSupported« storitve. Če storitev ne določa, ali je »AsynchronousRequestsSupported« podprt, bodo zahteve poslane zaporedoma.</li>\r\n    <li> <code>ODataVersion</code> : število (3 ali 4), ki določa različico protokola OData, ki bo uporabljena za to storitev OData. Če te vrednosti ne določite, bodo zahtevane vse podprte različice. Različica storitve bo določena z glavo »OData-Version«, ki jo vrne storitev.</li>\r\n    <li> <code>FunctionOverloads</code> : logična vrednost (true/false). Če je nastavljena na »true«, bodo preobremenitve uvoza funkcij navedene v krmarju kot ločeni vnosi. Če je nastavljena na »false«, bodo preobremenitve uvoza funkcij navedene v krmarju kot ena funkcija Union. Privzeta vrednost za V3 je: false. Privzeta vrednost za V4 je: true.</li>\r\n    <li> <code>MoreColumns</code> : ogična vrednost (true/false). Če jo nastavite na »true«, je stolpec »Več stolpcev« dodan vsakemu viru entitete, ki vsebuje odprte in polimorfne tipe. Ta stolpec bo vseboval polja, ki niso določena v osnovnem tipu. Če to vrednost nastavite na »false«, to polje ne bo prisotno. Ta vrednost je privzeto nastavljena na »false«.</li>\r\n    <li> <code>IncludeAnnotations</code> : z vejicami ločen seznam imen izrazov ali vzorcev, kvalificiranih za imenski prostor, ki jih je treba vključiti z \"*\" kot nadomestnim znakom. Privzeto ni vključen noben od pripisov.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: seznam imen ali vzorcev izrazov, določenih za imenski prostor, ločenih z vejico, ki jim bo dodan znak »*« kot nadomestni znak. Privzeto ni vključen noben zapis.</li>\r\n    <li> <code>OmitValues</code> : omogoča storitvi OData, da izpusti zapisovanje nekaterih vrednosti v odgovore. Če je ta možnost potrjena, bodo te vrednosti določene iz izpuščenih polj. Med možnosti spadajo:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : omogoča storitvi OData, da izpusti ničelne vrednosti.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : določa uvedbo priključka OData, ki bo uporabljen. Veljavni vrednosti sta »2.0« ali nič.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vzpostavite povezavo s storitev TripPin OData.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Vrne rezultat poskusa določanja zmogljivosti strežnika SQL za gonilnik ODBC.",
        "Documentation.LongDescription": "Vrne rezultat poskusa določanja zmogljivosti strežnika SQL z nizom povezave <code>connectionString</code>, ki uporablja ODBC. <code>connectionString</code> je lahko besedilo ali zapis para vrednosti lastnosti. Vrednosti lastnosti so lahko besedilo ali številka.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pridobite zmogljivosti SQL, ki so na voljo za niz povezave.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Vrne vsebino dokumenta Parquet v obliki tabele.",
        "Documentation.LongDescription": "Vrne vsebino dokumenta Parquet kot tabelo. Možnosti vključujejo:\n    <ul>\n    <li> <code>TypeMapping</code>: besedilna vrednost, ki nadzoruje privzeto preslikavo vrste med branjem in pisanjem datotek. Privzeta vrednost je »null« in poskuša ohraniti čim več ločljivosti izvirne vrste. Rezultat vrednosti »Sql« bo najbolj združljiv s strežnikom SQL Server.</li>\n    </ul>",
        "Documentation.Category": "Dostop do podatkov",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Dostop do podatkov",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Vrne odstotkovno vrednost navedene vrednosti.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne vrednost <code>percentage</code>. Če je navedena vrednost <code>value</code> <code>null</code>, <code>Percentage.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> <code>text</code> z znakom za simbol na koncu, bo vrnjeno pretvorjeno decimalno število. V nasprotnem primeru si oglejte <code>Number.From</code> za pretvorbo vrednosti v število <code>number</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pridobite vrednost <code>percentage</code> za <code>\"12.3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Vrne zapis podatkovnih okvirov iz datoteke RData.",
        "Documentation.LongDescription": "Vrne zapis podatkovnih okvirov iz datoteke RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Združi zapise na danem seznamu.",
        "Documentation.LongDescription": "Združi zapise na danem seznamu <code>records</code>. Če seznam <code>records</code> vsebuje vrednosti brez zapisov, je vrnjena napaka.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite združen zapis iz zapisov.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Vrne število polj v zapisu.",
        "Documentation.LongDescription": "Vrne število polj v zapisu <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Poiščite število polj v zapisu.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Vrne imena polj.",
        "Documentation.LongDescription": "Vrne imena polj v zapisu <code>record</code> kot besedilo.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite imena polj v zapisu.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Vrne seznam vrednosti polj.",
        "Documentation.LongDescription": "Vrne seznam vrednosti polj v zapisu <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednosti polj v zapisu.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Ustvari zapis iz tabele v obliki {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Vrne zapis iz tabele zapisov <code>table</code>, ki vsebuje imena polj in imena vrednosti <code>{[Name = name, Value = value]}</code>. Če imena polj niso enolična, pride do izjeme.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite zapis iz tabele v obliki Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Vrne seznam vrednosti, ki vsebuje vrednosti polj iz vhodnega zapisa.",
        "Documentation.LongDescription": "Vrne seznam vrednosti, ki vsebuje vrednosti polj iz vnosa <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Izvlecite vrednosti polj iz zapisa.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Vrne abstraktno sintaksa drevo (AST), ki predstavlja dostop do stolpca v izrazu vrstica.",
        "Documentation.LongDescription": "Vrne abstraktno sintaksa drevo (AST), ki predstavlja dostop do stolpec <code>columnName</code> vrstica znotraj izraza vrstica.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Ustvari AST, ki predstavlja dostop do stolpca »ImeStranke«.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Vrne abstraktno sintaksa drevo (AST) za telo funkcija.",
        "Documentation.LongDescription": "<p>Vrne drevo abstraktne sintakse (AST) za telo <code>function</code>, normalizirano v <i>izraz vrstice</i>:\r\n<ul>\r\n  <li>Funkcija mora biti lambda z enim argumentom.</li>\r\n  <li>Vsi sklici na parameter funkcije so zamenjani z <code>RowExpression.Row</code>.</li>\r\n  <li>Vsi sklici na stolpce so zamenjani z <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>Drevo AST bo poenostavljeno tako, da bo vsebovalo samo naslednje vrste vozlišč:\r\n    <ul>\r\n      <li><code>Konstanta</code></li>\r\n      <li><code>Priklic</code></li>\r\n      <li><code>Unarno</code></li>\r\n      <li><code>Dvojiško</code></li>\r\n      <li><code>Če</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Če izraza vrstice AST ni mogoče vrniti za telo <code>function</code>, se prikaže sporočilo o napaki.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vrne AST za telo funkcije <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Iz navedene vrednosti ustvari vrednost s plavajočo vejico in enojno natančnostjo.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne eno vrednost <code>number</code>. Če je navedena vrednost <code>value</code> vrste <code>null</code>, <code>Single.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> vrste <code>number</code> v obsegu enojne vrednosti, je vrnjena vrednost <code>value</code>, v nasprotnem primeru je vrnjena napaka. Če je navedena vrednost <code>value</code> katere koli druge vrste, glejte <code>Number.FromText</code> in jo pretvorite v vrednost <code>number</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Poiščite enojno vrednost <code>number</code> za <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Vrne tabelo s podatki iz končne točke indeksiranja storitve Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Pokliče vmesnik REST API storitve Smartsheet 2.0 na navedeni končni točki in pretvori vrnjen podatkovni element v tabelo.",
        "Documentation.Examples": [
          {
            "Description": "Pridobi tabelo s podatki o uporabnikih iz vmesnika API storitve Smartsheet",
            "Code": "Smartsheet.Content(\"uporabniki\")",
            "Result": "Tabela s podatki o uporabnikih, ki jo vrne vmesnik API storitve Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Vrne funkcijo, ki razdeli besedilo v seznam besedila pri katerem koli navedenem ločilu.",
        "Documentation.LongDescription": "Vrne funkcijo, ki razdeli besedilo v seznam besedila pri katerem koli navedenem ločilu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite vnos z vejica ali podpičjem, prezri narekovaje in narekovaje ter začnite od začetka vnosa.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Razdelite vnos z vejica ali podpičjem, prezri narekovaje in narekovaje ter začnite od konca vnosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Vrne funkcijo, ki razdeli besedilo v seznam besedila glede na navedeno ločilo.",
        "Documentation.LongDescription": "Vrne funkcijo, ki razdeli besedilo v seznam besedila glede na navedeno ločilo.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite vnos z vejica, pri tem pa prezri navedene vejice.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Vrne funkcijo, ki razdeli besedilo v seznam besedila pri vsakem navedenem ločilu v zaporedju.",
        "Documentation.LongDescription": "Vrne funkcijo, ki razdeli besedilo v seznam besedila pri vsakem navedenem ločilu v zaporedju.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite vnos z vejica in nato s podpičjem od začetka vnosa.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Razdelite vnos z vejica, nato podpičjem, obravnavajte narekovaje kot kateri koli drug znak in začnite od konca vnosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Vrne funkcijo, ki razdeli besedilo v seznam besedila za vsako navedeno dolžino.",
        "Documentation.LongDescription": "Vrne funkcijo, ki razdeli besedilo v seznam besedila za vsako navedeno dolžino.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite vnos v prva dva znaka, ki mu sledita naslednja tri znaka, in začnite od začetka vnosa.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Razdelite vnos v prve tri znake, ki jim sledita naslednja dva znaka, in začnite od konca vnosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Vrne funkcijo, ki razdeli besedilo v seznam besedila na vsakem navedenem položaju.",
        "Documentation.LongDescription": "Vrne funkcijo, ki razdeli besedilo v seznam besedila na vsakem navedenem položaju.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite vnos na navedenih mestih tako, da začnete od začetka vnosa.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Razdelite vnos na navedenih mestih tako, da začnete od konca vnosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Vrne funkcijo, ki razdeli besedilo v seznam besedila glede na navedene odmike in dolžine.",
        "Documentation.LongDescription": "Vrne funkcijo, ki razdeli besedilo v seznam besedila glede na navedene odmike in dolžine. Dolžina »null« označuje, da je treba vključiti vse preostale vnose.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Razdelite vnos glede na navedeni par položaj in dolžine, tako da začnete od začetka vnosa. Obsegi v tem primeru se prekriti.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Razdelite vnos glede na navedeni par položaj in dolžine, ki se začne od konca vnosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Razdelite vnos v poštno številko z nespremenljivo dolžino in nato ime mesta s spremenljivo dolžino.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Vrne funkcijo, ki večkrat razdeli besedilo v seznam besedila za navedeno dolžino.",
        "Documentation.LongDescription": "Vrne funkcijo, ki večkrat razdeli besedilo v seznam besedila za navedeno dolžino.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Večkrat razdelite vnos v dele treh znakov, in to od začetka vnosa.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Večkrat razdelite vnos v dele treh znakov, ki se začne od konca vnosa.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Vrne približno število vrstic v tabeli.",
        "Documentation.LongDescription": "Vrne približno število vrstice v <code>table</code>ali napako, če vir podatkov ne podpira približne vrednosti.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Ocenite število različnih kombinacij mest in stanje v veliki tabela, ki jih je mogoče uporabiti kot oceno kardinalnost za oznake stolpcev. Ocene kardinalnosti so dovolj pomembne, da različni viri podatki (na primer SQL Server) podpora ta približni približek, pogosto pa uporabljajo algoritem, imenovan HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Vrne število stolpcev v tabeli.",
        "Documentation.LongDescription": "Vrne število stolpcev v tabeli <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Poiščite število stolpcev v tabeli.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Vrne imena stolpcev kot seznam.",
        "Documentation.LongDescription": "Vrne imena stolpcev v tabeli <code>table</code> kot seznam besedila.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite imena stolpcev v tabeli.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Vrne prvo vrstico ali navedeno privzeto vrednost.",
        "Documentation.LongDescription": "Vrne prvo vrstico tabele <code>table</code> ali izbirno privzeto vrednost, <code>default</code>, če je tabela prazna.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite prvo vrstico tabele.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Poiščite prvo vrstico tabele <code>({})</code> ali vrnite [a = 0, b = 0], če je prazna.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Vrne prvi stolpec prve vrstice tabele ali določeno privzeto vrednost.",
        "Documentation.LongDescription": "Vrne prvi stolpec prve vrstice tabele <code>table</code> ali določeno privzeto vrednost.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Označuje, ali tabela vsebuje le razlikovalne vrstice (brez dvojnikov).",
        "Documentation.LongDescription": "Označuje, ali tabela <code>table</code> vsebuje le razlikovalne vrstice (brez dvojnikov). Vrne <code>true</code>, če so vrstice razlikovalne, sicer vrne <code>false</code>.\r\n    Izbirni parameter <code>comparisonCriteria</code> določa, v katerih stolpcih tabele bo preverjeno podvajanje. Če parameter <code>comparisonCriteria</code> ni določen, so preverjeni vsi stolpci.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali je tabela razlikovalna.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ugotovite, ali je tabela razlikovalna v stolpcu.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Označuje, ali tabela vsebuje vrstice.",
        "Documentation.LongDescription": "Označuje, ali tabela <code>table</code> vsebuje vrstice. Vrne <code>true</code>, če ni vrstic, (tj. tabela je prazna), sicer vrne <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, ali je tabela prazna.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ugotovite, ali je tabela <code>({})</code> prazna.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Vrne ključe navedene tabele.",
        "Documentation.LongDescription": "Vrne ključe navedene tabele.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pridobite seznam ključev za tabelo.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Vrne zadnjo vrstico ali navedeno privzeto vrednost.",
        "Documentation.LongDescription": "Vrne zadnjo vrstico tabele <code>table</code> ali izbirno privzeto vrednost, <code>default</code>, če je tabela prazna.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite zadnjo vrstico tabele.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Poiščite zadnjo vrstico tabele <code>({})</code> ali vrnite [a = 0, b = 0], če je prazna.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Vrne število vrstic v tabeli.",
        "Documentation.LongDescription": "Vrne število vrstic v tabeli <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Poiščite število vrstic v tabeli.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Vrne eno vrstico v tabeli.",
        "Documentation.LongDescription": "Vrne eno vrstico v tabeli <code>table</code> z eno vrstico. Če ima tabela <code>table</code> več kot eno vrstico, pride do izjeme.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vrnite eno vrstico v tabeli.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Ustvari seznam ugnezdenih seznamov vrednosti stolpcev iz tabele.",
        "Documentation.LongDescription": "Ustvari seznam ugnezdenih seznamov iz tabele, <code>table</code>.  Vsak element seznama je notranji seznam, ki vsebuje vrednosti stolpcev.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam z vrednostmi stolpcev iz tabele.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Pretvori tabelo v seznam, tako da uporabi določeno funkcijo združitve za vsako vrstico vrednosti v tabeli.",
        "Documentation.LongDescription": "Pretvori tabelo v seznam, tako da uporabi določeno funkcijo združitve za vsako vrstico vrednosti v tabeli.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Besedilo v posamezni vrstici združite z vejico",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Pretvori tabelo v seznam zapisov.",
        "Documentation.LongDescription": "Pretvori tabelo, <code>table</code>, v seznam zapisov.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite tabelo v seznam zapisov.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Ustvari seznam ugnezdenih seznamov vrednosti vrstic iz tabele.",
        "Documentation.LongDescription": "Ustvari seznam ugnezdenih seznamov iz tabele, <code>table</code>.  Vsak element seznama je notranji seznam, ki vsebuje vrednosti vrstic.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam z vrednostmi vrstic iz tabele.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Ustvari spremenjen zapis o napaki, ki ne bo sprožil rezervnega ukrepa, če ga vrne rutina, ki je definirana v pogledu (prek pogleda Table.View).",
        "Documentation.LongDescription": "Ustvari spremenjen zapis o napaki iz <code>errorRecord</code>, ki ne bo sprožil rezervnega ukrepa, če ga vrne rutina, ki je definirana v pogledu (prek pogleda Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Ustvari funkcijo, ki jo lahko prestreže rutina za obravnavo, določena v pogledu (prek funkcije Table.View).",
        "Documentation.LongDescription": "<p>Ustvari funkcijo na podlagi <code>function</code>, ki jo je mogoče obravnavati v pogledu, ustvarjenem s funkcijo <code>Table.View</code>.</p>\r\n<p>Rutino za obravnavo <code>OnInvoke</code> funkcije <code>Table.View</code> lahko uporabite za določitev rutine za obravnavo za funkcijo pogleda.</p>\r\n<p>Če ne določite rutine za obravnavo <code>OnInvoke</code>, če ta rutina ne obravnava funkcije pogleda ali če rutina za obravnavo prikaže sporočilo o napaki, je za pogled tako kot pri rutinah za obravnavo za vgrajene postopke uporabljen <code>function</code>.</p>\r\n<p>Podrobnejši opis funkcije <code>Table.View</code> in funkcij pogleda po meri najdete v objavljeni dokumentaciji za povezovalnik po meri Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Vrne besedilno vrednost, iz katere so odstranjeni vsi krmilni znaki.",
        "Documentation.LongDescription": "Vrne besedilno vrednost, iz katere so odstranjeni vsi krmilni znaki <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Iz besedilne vrednosti odstranite pomike v novo vrstico in druge krmilne znake.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Spoji seznam besedilnih vrednosti v eno besedilno vrednost.",
        "Documentation.LongDescription": "Vrne rezultat združevanja seznama besedilnih vrednosti <code>texts</code> v eno besedilno vrednost. Vse vrednosti <code>null</code>, ki so prisotne v <code>texts</code>, so prezrte.\r\n    Določite lahko nadomestni <code>separator</code>, ki bo uporabljen v končnem sestavljenem besedilu.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Združite besedilni vrednosti »Seattle« in »WA«.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Združite besedilni vrednosti »Seattle« in »WA«, ločeni z vejico in presledkom.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Združite vrednosti »Seattle«, <code>null</code> in »WA«, med seboj ločene z vejico in presledkom. (Upoštevajte, da je vrednost <code>null</code> prezrta.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Ustvari besedilno vrednost iz dane vrednosti.",
        "Documentation.LongDescription": "Vrne predstavitev <code>value</code> v obliki besedila. <code>value</code> je lahko vrednost <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> ali <code>binary</code>.\r\n    Če je dana vrednost ničelna, <code>Text.From</code> vrne »null«. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite besedilno vrednost iz števila 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Dekodira podatke iz dvojiške oblike v besedilo.",
        "Documentation.LongDescription": "Dekodira podatke <code>binary</code> iz dvojiške vrednosti v besedilno vrednost z vrsto <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Določi vrsto zrnatega števila (Int64.Type, Double.Type itd.) za število, ki je kodirano v besedilo.",
        "Documentation.LongDescription": "Določi vrsto zrnatega števila (Int64.Type, Double.Type itd.) za <code>text</code>. Če <code>text</code> ni število, se prikaže sporočilo o napaki. Navedete lahko tudi dodatni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Vrne število znakov.",
        "Documentation.LongDescription": "Vrne število znakov v besedilu <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Ugotovite, koliko znakov je v besedilu »Hello World«.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Pretvori vse znake v male črke.",
        "Documentation.LongDescription": "Vrne rezultat pretvorbe vseh znakov v <code>text</code> v male črke. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite besedilo »AbCd«, zapisano z malimi črkami.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Prvo črko vsake besede zapiše z veliko začetnico.",
        "Documentation.LongDescription": "Vrne rezultat, kjer je z veliko začetnico zapisana le prva črka vsake besede v besedilni vrednosti <code>text</code>. Preostale črke so zapisane kot male črke. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Uporabite <code>Text.Proper</code> za preprost stavek.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Obrne vrstni red navedenega <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obrnite vrstni red besedila »123«.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Kodira besedilo v dvojiško obliko.",
        "Documentation.LongDescription": "Kodira dano besedilno vrednost <code>text</code> v dvojiško vrednost z navedenim <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Vrne seznam vrednosti znakov iz dane besedilne vrednosti.",
        "Documentation.LongDescription": "Vrne seznam vrednosti znakov iz dane besedilne vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite seznam vrednosti znakov iz besedila »Hello World«.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Odstrani vse začetne in končne presledke.",
        "Documentation.LongDescription": "Vrne rezultat odstranitve vseh začetnih in končnih presledkov iz besedilne vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odstranite začetne in končne presledke iz »     a b c d    «.",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Odstrani vse končne presledke.",
        "Documentation.LongDescription": "Vrne rezultat odstranitve vseh končnih presledkov iz besedilne vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odstranite končne presledke iz »     a b c d    «.",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Odstrani vse začetne presledke.",
        "Documentation.LongDescription": "Vrne rezultat odstranitve vseh začetnih presledkov iz besedilne vrednosti <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odstranite začetne presledke iz »     a b c d    «.",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Pretvori vse znake v velike črke.",
        "Documentation.LongDescription": "Vrne rezultat pretvorbe vseh znakov v <code>text</code> v velike črke. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Poiščite besedilo »aBcD«, zapisano z velikimi črkami.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Vrne konec ure.",
        "Documentation.LongDescription": "Vrne konec ure, ki je prikazan kot <code>dateTime</code> in vključuje z ulomki izražene sekunde. Informacije o časovnem pasu so ohranjene.\r\n      <ul>\r\n        <li><code>dateTime</code>: vrednost <code>time</code>, <code>datetime</code> ali <code>datetimezone</code>, na podlagi katere je izračunan konec ure.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite konec ure za 5/14/2011 05:00:00 PM.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Poiščite konec ure za 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Ustvari časovno vrednost iz dane vrednosti.",
        "Documentation.LongDescription": "Iz navedene vrednosti <code>value</code> vrne vrednost <code>time</code>. Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).\r\nČe je navedena vrednost <code>value</code> <code>null</code>, <code>Time.From</code> vrne <code>null</code>. Če je navedena vrednost <code>value</code> <code>time</code>, je vrnjena vrednost <code>value</code>. V vrednost <code>time</code> lahko pretvorite vrednosti teh vrst:\r\n      <ul>\r\n        <li><code>text</code>: vrednost <code>time</code> iz predstavitve v obliki besedila. Za podrobnosti glejte <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: komponenta »time« za <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: komponenta »time« lokalnega ekvivalenta »datetime« za <code>value</code>.</li>\r\n        <li><code>number</code>: ekvivalent <code>time</code> za število dni, izraženih z ulomki, predstavljen kot <code>value</code>. Če je <code>value</code> negativno ali večje od oz. enako 1, je vrnjena napaka.</li>\r\n      </ul>\r\nČe je vrednost <code>value</code> katere koli druge vrste, je vrnjena napaka.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>0.7575</code> v vrednost <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Pretvorite <code>#datetime(1899, 12, 30, 06, 45, 12)</code> v vrednost <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Ustvari vrednost »Time« iz lokalnih in univerzalnih oblik »Time«.",
        "Documentation.LongDescription": "Ustvari vrednost <code>time</code> iz predstavitve podatkov v obliki besedila, <code>text</code>. Izbirni parameter <code>record</code>, <code>options</code>, je lahko naveden za določanje dodatnih lastnosti. <code>record</code> lahko vsebuje naslednja polja:\r\n<ul>\r\n   <li><code>Format</code>: vrednost <code>text</code> ponazarja obliko zapisa, ki jo želite uporabiti. Podrobnosti so na voljo na spletnih mestih https://go.microsoft.com/fwlink/?linkid=2180104 in https://go.microsoft.com/fwlink/?linkid=2180105. Če to polje izpustite ali navedete vrednost <code>null</code>, je čas ustrezno razčlenjen.</li>\r\n   <li><code>Culture</code>: če za <code>Format</code> ni izbrana vrednost »null«, <code>Culture</code> nadzira nekatere določitelje za obliko zapisa. Na primer <code>»en-US«</code> <code>»tt«</code> je <code>»AM« ali »PM«</code>, za <code>»ar-EG«</code> pa <code>»tt«</code> prestavlja <code>»ص« ali »م«</code>. Če je za <code>Format</code> izbrana vrednost <code>null</code>, <code>Culture</code> nadzira privzeto obliko zapisa, ki jo želite uporabiti. Če je za <code>Culture</code> izbrana vrednost <code>null</code> ali je ta izpuščena, je uporabljena vrednost <code>Culture.Current</code>.</li>\r\n</ul>\r\nZZa uporabo podedovanih potekov lahko element <code>options</code> prav tako vključuje besedilno vrednost. Vedenje je enako kot za <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>\"10:12:31am\"</code> v vrednost »Time«.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Pretvorite <code>\"1012\"</code> v vrednost »Time«.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Pretvorite <code>\"10\"</code> v vrednost »Time«.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Vrne komponento ure.",
        "Documentation.LongDescription": "Vrne komponento ure podane vrednosti <code>time</code>, <code>datetime</code>ali <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost ure v #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Vrne komponento minute.",
        "Documentation.LongDescription": "Vrne komponento minute podane vrednosti <code>time</code>, <code>datetime</code> ali <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost minute v #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Vrne komponento sekunde.",
        "Documentation.LongDescription": "Vrne komponento sekunde podane vrednosti <code>time</code>, <code>datetime</code> ali <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrednost sekunde v vrednosti »datetime«.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Vrne začetek ure.",
        "Documentation.LongDescription": "Vrne začetek ure, ki je prikazan kot <code>dateTime</code>.\r\n    <code>dateTime</code> mora biti vrednost <code>time</code>, <code>datetime</code> ali <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Poiščite začetek ure za 10. oktober 2011, 8:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Vrne zapis, ki vsebuje dele vrednosti »Time«.",
        "Documentation.LongDescription": "Vrne zapis, ki vsebuje dele dane vrednosti »Time«, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: vrednost <code>time</code>, iz katere bo izračunan zapis njenih delov.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite vrednost <code>#time(11, 56, 2)</code> v zapis, ki vsebuje vrednosti »Time«.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Vrne predstavitev časovne vrednosti v obliki besedila.",
        "Documentation.LongDescription": "Vrne predstavitev podatkov <code>time</code> v obliki besedila. Naveden je lahko izbirni parameter <code>record</code>, <code>options</code>, za določanje dodatnih lastnosti. <code>culture</code> je uporabljen le za podedovane poteke dela. <code>record</code> lahko vključuje ta polja:\r\n<ul>\r\n   <li><code>Format</code>: vrednost <code>text</code> označuje obliko zapisa, ki jo želite uporabiti. Več informacij je na voljo na spletnih mestih https://go.microsoft.com/fwlink/?linkid=2180104 in https://go.microsoft.com/fwlink/?linkid=2180105. Če to polje izpustite ali navedete vrednost <code>null</code>, je datum zapisan v privzeti obliki zapisa, določeni za <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: če za <code>Format</code> ni izbrana vrednost »null«, <code>Culture</code> nadzira nekatere določitelje oblike zapisa. V <code>»en-US«</code> je na primer <code>»tt«</code> zapisan kot <code>»AM« ali »PM«</code>, medtem ko je v <code>»ar-EG«</code> vrednost <code>»MMM«</code> zapisana kot <code>»ص« ali »م«</code>. When <code>Format</code> is <code>null</code>, <code>Culture</code> controls the default format to use. Če je za <code>Culture</code> izbrana vrednost <code>null</code> ali je ta izpuščena, je uporabljena vrednost <code>Culture.Current</code>.</li>\r\n</ul>\r\nZa uporabo podedovanih potekov lahko elementa <code>options</code> in <code>culture</code> prav tako vključujeta besedilni vrednosti. Vedenje je enako kot za <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pretvorite <code>#time(01, 30, 25)</code> v vrednost <code>text</code>. <i>Rezultat se lahko razlikuje glede na trenutno kulturo.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Pretvorite z obliko zapisa po meri in uporabo nemške kulture.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Pretvorite v standardni obliki zapisa ure.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Vrne zaprto različico dane vrste zapisa (ali isto vrsto, če je ta že zaprta).",
        "Documentation.LongDescription": "Vrne zaprto različico <code>zapisa</code> <code>type</code> (ali isto vrsto, če je ta že zaprta).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite zaprto različico <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Vrne fasete neke vrste.",
        "Documentation.LongDescription": "Vrne zapis, ki vsebuje fasete za <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Vrne zapis z vrednostmi polj, nastavljenimi na imena parametrov vrste funkcije, in njihovimi vrednostmi, nastavljenimi na ustrezne vrste.",
        "Documentation.LongDescription": "Vrne zapis z vrednostmi polj, nastavljenimi na ime parametrov <code>type</code>, in njihovimi vrednostmi, nastavljenimi na ustrezne vrste.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrste parametrov funkcije <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Vrne število, ki predstavlja najmanjše število parametrov, zahtevanih za poziv vrste funkcije.",
        "Documentation.LongDescription": "Vrne število, ki predstavlja najmanjše število parametrov, zahtevanih za poziv vhoda <code>type</code> funkcije.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Poiščite število zahtevanih parametrov funkcije <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Vrne vrsto, ki jo vrne vrsta funkcije.",
        "Documentation.LongDescription": "Vrne vrsto, ki jo vrne funkcija <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrsto vrnitve <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Vrne vrednost »true«, če gre za ničelno vrsto, v nasprotnem primeru pa »false«.",
        "Documentation.LongDescription": "Vrne <code>true</code>, če gre za <code>ničelno</code> vrsto; v nasprotnem primeru pa <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali ima <code>število</code> ničelno vrednost.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Določite, ali ima <code>število z ničelno vrednostjo</code> lahko vrednost nič.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Vrne rezultat, ali je vrsta zapisa odprta.",
        "Documentation.LongDescription": "Vrne <code>logično vrednost</code>, ki ponazarja, ali je zapis <code>type</code> odprt.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Določite, ali je zapis <code>type [ A = number, ...]</code> odprt.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Vrne vrsto elementa z vrste seznama.",
        "Documentation.LongDescription": "Vrne vrsto elementa s seznama <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Poiščite vrsto elementa s seznama <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Vrne vrsto, ki ni ničelna.",
        "Documentation.LongDescription": "Vrne vrsto, ki ni <code>ničelna</code> iz <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vrne vrsto, ki ni ničelna, od <code>števila z ničelno vrsto</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Vrne odprto različico dane vrste zapisa (ali isto vrsto, če je ta že odprta).",
        "Documentation.LongDescription": "Vrne odprto različico <code>zapisa</code> <code>type</code> (ali isto vrsto, če je ta že odprta).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Ustvarite odprto različico <code>vrste [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Vrne zapis, ki opisuje polja vrste zapisa s polji vrnjene vrste zapisa, ki imajo ustrezno ime in vrednost.",
        "Documentation.LongDescription": "Vrne zapis, ki opisuje polja zapisa <code>type</code>. Vsako polje vrnjene vrste zapisa ima ustrezno ime in vrednost v obliki zapisa <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Poiščite ime in vrednost zapisa <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Vrne seznam ključev za dano vrsto tabele, ki je morda prazen.",
        "Documentation.LongDescription": "Vrne seznam ključev za dano vrsto tabele, ki je morda prazen.<br>\r\n    <br>\r\n    Vsak ključ je določen z zapisom v tej obliki:\r\n    <ul>\r\n      <li>\r\n        <code>Stolpci</code>: seznam imen stolpcev, ki določajo ključ\r\n      </li>\r\n      <li>\r\n        <code>Primarno</code>: <code>true</code>, če je ključ primarni ključ tabele; sicer <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vrnite informacije o ključu za vrsto tabele.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Vrne vrsto vrstice vrste tabele.",
        "Documentation.LongDescription": "Vrne vrsto vrstice določene vrste tabele. Rezultat bo vedno vrsta zapisa.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vrne podatke vrste vrstice za preprosto tabelo.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Vrne unijo seznama vrst.",
        "Documentation.LongDescription": "Vrne unijo vrst v <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Sestavite zapis v niz poizvedbe URI.",
        "Documentation.LongDescription": "Sestavite zapis <code>query</code> niz poizvedbe URI in po potrebi ustvarite ubežne znake.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kodirajte niz poizvedbe, ki vsebuje nekaj posebnih znakov.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Kodira posebne znake v skladu s standardom RFC 3986.",
        "Documentation.LongDescription": "Kodira posebne znake v vnosu <code>data</code> v skladu s pravili standarda RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kodirajte posebne znake v »+money$«.",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Vrne dele vhodnega absolutnega URI-ja kot zapis.",
        "Documentation.LongDescription": "Vrne dele vnosa <code>absoluteUri</code> kot zapis, ki vsebuje vrednosti, kot so »Scheme«, »Host«, »Port«, »Path«, »Query«, »Fragment«, »UserName« in »Password«.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Poiščite dele absolutnega URI-ja »www.adventure-works.com«.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Dekodirajte niz, ki je kodiran z odstotkom.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Vnesite URL storitve Azure DevOps Analytics.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Vrne vsebino, preneseno z naslova URL storitve Azure DevOps Analytics, v obliki dvojiške vrednosti. Ta funkcija uporablja različne poverilnice za različne organizacije."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Vnesite URL storitve Azure DevOps Analytics.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Vrne vsebino, preneseno z naslova URL storitve Azure DevOps Analytics, v obliki dvojiške vrednosti. Ta funkcija uporablja globalne poverilnice za vse organizacije, do katerih lahko dostopate."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Prikaže nadomestne načrte poizvedb.",
        "Documentation.LongDescription": "Prikaže nadomestne načrte poizvedb v izrazu načrta poizvedbe, pridobljenem z ukazom Value.Expression(Value.Optimize(...)). Ni namenjeno za druge načine uporabe.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Vrne abstraktno sintaksa drevo (AST), ki predstavlja izraz vrednosti.",
        "Documentation.LongDescription": "Vrne abstraktno sintaksa drevo (AST), ki predstavlja izraz vrednosti",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Ustvari močno tipizirano vrednost iz predstavitve v obliki besedila.",
        "Documentation.LongDescription": "Dekodira vrednost iz predstavitve vrednosti <code>text</code> v obliki besedila in jo obravnava kot vrednost z ustrezno vrsto.\r\n    <code>Value.FromText</code> vzame besedilno vrednost in vrne število, logično vrednost, ničelno vrednost, datum/uro, trajanje ali besedilno vrednost. Prazna besedilna vrednost je obravnavana kot vrednost ničelna vrednost.\r\n    Navedete lahko tudi izbirni parameter <code>culture</code> (na primer »sl-SI«).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Vrne zapis, ki vsebuje metapodatke vnosa.",
        "Documentation.LongDescription": "Vrne zapis, ki vsebuje metapodatke vnosa.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Pošlje signal funkciji Value.Expression, naj vrne optimiziran izraz za vrednost.",
        "Documentation.LongDescription": "Če je uporabljen v funkciji Value.Expression in če <code>value</code> predstavlja poizvedbo, ki jo je mogoče optimizirati, ta funkcija označuje, da je treba vrniti optimiziran izraz. V nasprotnem primeru bo <code>value</code> naveden brez vpliva.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Odstrani vnos metapodatkov.",
        "Documentation.LongDescription": "Odstrani vnos metapodatkov.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Vrne vrsto dane vrednosti.",
        "Documentation.LongDescription": "Vrne vrsto dane vrednosti.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.LongDescription": "Ta funkcija je namenjena samo notranji uporabi.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Vrne HTML za navedeni URL, kot ga vidi spletni brskalnik.",
        "Documentation.LongDescription": "Vrne HTML za navedeni <code>url</code>, kot je prikazana v spletnem brskalniku. Določite lahko izbirni parameter zapisa <code>options</code>, s katerim določite dodatne lastnosti. Zapis lahko vsebuje ta polja::\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: če ciljno spletno mesto vsebuje zapis ključa vmesnika API, lahko s tem parametrom določite ime (ne vrednost) parametra ključa, ki mora biti uporabljeno v naslovu URL. Dejanska vrednost ključa je navedena v poverilnici.</li>\r\n        <li><code>WaitFor</code>: določa pogoj za čakanje pred prenosom HTML-ja poleg čakanja, da se stran naloži (kar je vedno izvedbo). Lahko je zapis, ki vsebuje polje »Timeout« in/ali »Selector«. Če je določena samo časovna omejitev, funkcija počaka navedeni čas in šele nato prenese HTML. Če sta določena izbirnik ter časovna omejitev in če časovna omejitev poteče, preden se izbirnik prikaže na strani, se prikaže sporočilo o napaki. Če je določen izbirnik brez časovne omejitve, je privzeto uporabljena 30-sekundna časovna omejitev.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Dostop do podatkov",
        "Documentation.Examples": [
          {
            "Description": "Vrne HTML za https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vrne HTML za https://microsoft.com, ko čaka, da se prikaže izbirnik sloga CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vrne HTML za https://microsoft.com, ko čaka deset sekund.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vrne HTML za https://microsoft.com, ko čaka največ deset sekund, da se prikaže izbirnik sloga CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Vrne vsebino, preneseno z URL-ja, kot dvojiško vrednost.",
        "Documentation.LongDescription": "Vrne vsebino, preneseno iz vira <code>url</code> v dvojiški obliki zapisa. Za namene določevanja dodatnih lastnosti bo morda na voljo izbiren parameter zapisa <code>options</code>. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>Query</code> : Programsko dodajte parametre poizvedbe v naslov URL, pri tem pa vam ni treba skrbeti za dodajanje ubežnih znakov.</li>\r\n<li><code>ApiKeyName</code> : Če je na ciljnem mestu omenjen ključ vmesnika API, lahko ta parameter uporabite za navedbo imena (ne vrednosti) parametra ključa, ki ga je treba uporabiti v naslovu URL. Dejanska vrednost ključa je navedena v poverilnici.</li>\r\n<li><code>Headers</code> : Če navedete to vrednost kot zapis, boste v zahtevo HTTP dodali dodatne glave.</li>\r\n<li><code>Timeout</code> : Če navedete to vrednost kot trajanje, boste spremenili časovno omejitev za zahtevo HTTP. Privzeta vrednost je 100 sekund.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Če navedete to vrednost kot seznam, bodo ti ključi glave HTTP izključeni iz dela izračuna za podatke predpomnjenja.</li>\r\n<li><code>IsRetry</code> : Če navedete to logično vrednost kot &#187;true&#171;, boste pri pridobivanju podatkov prezrli vse obstoječe odgovore v predpomnilniku.</li>\r\n<li><code>ManualStatusHandling</code> : Če navedete to vrednost kot seznam, boste preprečili vse vgrajeno obravnavanje zahtev HTTP, katerih odgovor vsebuje eno od teh kod stanja.</li>\r\n<li><code>RelativePath</code> : Če navedete to vrednost kot besedilo, ga dodate osnovnemu naslovu URL, predem pošljete zahtevo.</li>\r\n<li><code>Content</code> : Če navedete to vrednost, spremenite spletno zahtevo iz GET v POST tako, da uporabite vrednost možnosti kot vsebino zahteve POST.</li>\r\n</ul>\r\n\r\n    Zahteva HTTP je podana kot zahteva GET (če ni navedena nobena vsebina) ali kot zahteva POST (če je vsebina na voljo). Zahteve POST so lahko le anonimne.\r\n    <br>\r\n    Glave odziva HTTP so na voljo kot metapodatki rezultatov v dvojiški obliki zapisa. Izven konteksta povezovalnika za podatke po meri je na voljo le podmnožica glav (zaradi varnosti).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pridobite vsebino <code>\"https://bing.com/search?q=Power+Query\"</code> z možnostma RelativePath in Query. Ti možnosti lahko uporabite za dinamično poizvedovanje po statičnem osnovnem URL-ju.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Izvedite ukaz POST za URL, posredujte dvojiško koristno vsebino JSON in razčlenite odgovor kot JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Vzpostavite povezavo z varnim URL-jem, ki sprejme ključ za preverjanje pristnosti kot del niza poizvedbe. Namesto kodiranja skrivnega ključa v M (kar bi predstavljalo varnostno tveganje), \r\n lahko ključ varno navedete tako, da navedete njegovo ime (ne njegovo vrednost) v M, izberete preverjanje pristnosti spletnega vmesnika API in vnesete vrednost ključa kot del poverilnic spletnega vmesnika API.\r\n    Če ga uporabite na ta način, bo naslednji primer ustvaril zahtevo za <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Vrne glave HTTP, prenesene iz URL-ja, kot vrednost zapisa.",
        "Documentation.LongDescription": "Vrne glave, prenesene iz vira <code>url</code>, v obliki zapisa. Za namene določevanja dodatnih lastnosti bo morda na voljo izbiren parameter zapisa <code>options</code>. Zapis lahko vsebuje ta polja:\r\n    <ul>\r\n<li><code>Query</code> : Programsko dodajte parametre poizvedbe v naslov URL, pri tem pa vam ni treba skrbeti za dodajanje ubežnih znakov.</li>\r\n<li><code>ApiKeyName</code> : Če je na ciljnem mestu omenjen ključ vmesnika API, lahko ta parameter uporabite za navedbo imena (ne vrednosti) parametra ključa, ki ga je treba uporabiti v naslovu URL. Dejanska vrednost ključa je navedena v poverilnici.</li>\r\n<li><code>Headers</code> : Če navedete to vrednost kot zapis, boste v zahtevo HTTP dodali dodatne glave.</li>\r\n<li><code>Timeout</code> : Če navedete to vrednost kot trajanje, boste spremenili časovno omejitev za zahtevo HTTP. Privzeta vrednost je 100 sekund.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Če navedete to vrednost kot seznam, bodo ti ključi glave HTTP izključeni iz dela izračuna za podatke predpomnjenja.</li>\r\n<li><code>IsRetry</code> : Če navedete to logično vrednost kot &#187;true&#171;, boste pri pridobivanju podatkov prezrli vse obstoječe odgovore v predpomnilniku.</li>\r\n<li><code>ManualStatusHandling</code> : Če navedete to vrednost kot seznam, boste preprečili vse vgrajeno obravnavanje zahtev HTTP, katerih odgovor vsebuje eno od teh kod stanja.</li>\r\n<li><code>RelativePath</code> : Če navedete to vrednost kot besedilo, ga dodate osnovnemu naslovu URL, predem pošljete zahtevo.</li>\r\n</ul>\r\n\r\n    Zahteva HTTP je bila podana z metodo HEAD. Izven konteksta povezovalnika za podatke po meri je na voljo le podmnožica glav (zaradi varnosti).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pridobite glave HTTP za <code>\"https://bing.com/search?q=Power+Query\"</code> z možnostma »RelativePath« in »Query«.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Kontekst odobritve, ki je uporabljen za ovrednotenje pogoja vnosa nadzora dostopa (ACE).",
        "Documentation.LongDescription": "Kontekst odobritve, ki je uporabljen za ovrednotenje pogoja vnosa nadzora dostopa (ACE).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Tabela z vnosi za nadzor dostopa (ACE).",
        "Documentation.LongDescription": "Razvrščena tabela vnosov za nadzor dostopa (ACE), ki predstavlja pravila za odobritev. Vsaka vrstica je ovrednotena v trenutnem kontekstu odobritve (v vrstnem redu), prva vrstica, za katero izraz <code>Condition</code> vrne »true«, pa določa, katero pravilo bo uporabljeno. Stolpec <code>Action</code> predstavlja vrsto dejanja, za katero je uporabljeno pravilo. Stolpec <code>AccessControlKind</code> določa, ali je dostop za dejanje dovoljen oziroma zavrnjen.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Določa vrsto nadzora dostopa.",
        "Documentation.LongDescription": "Določa vrsto nadzora dostopa.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse vrednosti.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse dvojiške vrednosti.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse dvojiške vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Določa vrsto dvojiškega kodiranja.",
        "Documentation.LongDescription": "Določa vrsto dvojiškega kodiranja.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Določa, kolikokrat naj bi bil element prikazan v skupini.",
        "Documentation.LongDescription": "Določa, kolikokrat naj bi bil element prikazan v skupini.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Opisuje vrsto medpomnjenja, ki bo izvedeno.",
        "Documentation.LongDescription": "Opisuje vrsto medpomnjenja, ki bo izvedeno.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse bajte.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse bajte.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Določa vrstni red bajtov.",
        "Documentation.LongDescription": "Določa vrstni red bajtov.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse znake.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse znake.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Določa vrsto stiskanja.",
        "Documentation.LongDescription": "Določa vrsto stiskanja.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Določa pomembnost narekovajev v dokumentih CSV.",
        "Documentation.LongDescription": "Določa pomembnost narekovajev v dokumentih CSV.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vrednost valute.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vrednost valute.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse datumske vrednosti.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse datumske vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse datumske in časovne vrednosti brez povezanega časovnega pasu.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse datumske in časovne vrednosti brez povezanega časovnega pasu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse datumske in časovne vrednosti glede na časovni pas.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse datumske in časovne vrednosti glede na časovni pas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Določa dan v tednu.",
        "Documentation.LongDescription": "Določa dan v tednu.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Vrsta, ki predstavlja decimalno število z nepremično vejico.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja decimalno število z nepremično vejico.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Vrsta, ki predstavlja število s plavajočo vejico in dvojno natančnostjo.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja število s plavajočo vejico in dvojno natančnostjo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse vrednosti trajanja",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse vrednosti trajanja",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Določa pričakovano dejanje za dodatne vrednosti v vrstici, v katerih je več stolpcev, kot je bilo pričakovano.",
        "Documentation.LongDescription": "Določa pričakovano dejanje za dodatne vrednosti v vrstici, v katerih je več stolpcev, kot je bilo pričakovano.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse funkcije.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse funkcije.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Določa vrsto združevanja.",
        "Documentation.LongDescription": "Več lokalnih skupin je lahko ustvarjenih z enako vrednostjo ključa, vendar je za dano ključno vrednost ustvarjena le ena globalna skupina.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vrednost GUID.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vrednost GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Identiteta predstavlja uporabnika, skupino, napravo ali drugo stvar, ki jo je mogoče prepoznati.",
        "Documentation.LongDescription": "Identiteta predstavlja uporabnika, skupino, napravo ali drugo stvar, ki jo je mogoče prepoznati.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Določa obseg, v katerem so identitete ustvarjene in primerjane.",
        "Documentation.LongDescription": "Določa obseg, v katerem so identitete ustvarjene in primerjane.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Vrsta, ki predstavlja podpisano 16-bitno celo število.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja podpisano 16-bitno celo število.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Vrsta, ki predstavlja podpisano 32-bitno celo število.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja podpisano 32-bitno celo število.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Vrsta, ki predstavlja podpisano 64-bitno celo število.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja podpisano 64-bitno celo število.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Vrsta, ki predstavlja podpisano 8-bitno celo število.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja podpisano 8-bitno celo število.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Določa algoritem združevanja, ki bo uporabljen za postopek združevanja.",
        "Documentation.LongDescription": "Določa algoritem združevanja, ki bo uporabljen za postopek združevanja.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Določa vrsto postopka združevanja.",
        "Documentation.LongDescription": "Določa vrsto postopka združevanja.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Določa levo ali desno tabelo združevanja.",
        "Documentation.LongDescription": "Določa levo ali desno tabelo združevanja.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Opisuje vrsto omejitvenega stavka, ki ga podpira dialekt SQL, ki ga uporablja ta vir podatkov.",
        "Documentation.LongDescription": "Opisuje vrsto omejitvenega stavka, ki ga podpira dialekt SQL, ki ga uporablja ta vir podatkov.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse sezname.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse sezname.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse logične vrednosti.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse logične vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Določa pričakovano dejanje za manjkajoče vrednosti v vrstici, v kateri je manj stolpcev, kot je bilo pričakovano.",
        "Documentation.LongDescription": "Določa pričakovano dejanje za manjkajoče vrednosti v vrstici, v kateri je manj stolpcev, kot je bilo pričakovano.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Vrsta, ki predstavlja ničelno vrednost.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja ničelno vrednost.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vsa števila.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vsa števila.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Določa vrste vrednosti, ki jih lahko storitev OData izpusti.",
        "Documentation.LongDescription": "Določa vrste vrednosti, ki jih lahko storitev OData izpusti.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Določa pojavitev elementa v zaporedju.",
        "Documentation.LongDescription": "Določa pojavitev elementa v zaporedju.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Določa smer razvrščanja.",
        "Documentation.LongDescription": "Določa smer razvrščanja.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Vrsta, ki predstavlja besedilno geslo.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja besedilno geslo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Vrsta, ki predstavlja odstotkovno vrednost.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja odstotkovno vrednost.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Določa vrsto načina percentila.",
        "Documentation.LongDescription": "Določa vrsto načina percentila.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Določa natančnost primerjave.",
        "Documentation.LongDescription": "Določa natančnost primerjave.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Določa slog narekovajev.",
        "Documentation.LongDescription": "Določa slog narekovajev.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Navaja vrsto prihodka.",
        "Documentation.LongDescription": "Navaja vrsto prihodka.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse zapise.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse zapise.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Označuje, ali mora biti indeksiranje izvedeno od začetka ali konca vnosa.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Določa smer zaokroževanja, kadar je med številkami, na katere je mogoče zaokrožiti, vez.",
        "Documentation.LongDescription": "Določa smer zaokroževanja, kadar je med številkami, na katere je mogoče zaokrožiti, vez.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Veljavne možnosti za možnost načina izvajanja priključka SAP Business Warehouse.",
        "Documentation.LongDescription": "Veljavne možnosti za možnost načina izvajanja priključka SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Veljavne možnosti za možnost porazdelitve SAP HANA.",
        "Documentation.LongDescription": "Veljavne možnosti za možnost porazdelitve SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Operator obsega za vhodne parametre obsega SAP HANA.",
        "Documentation.LongDescription": "Operator obsega za vhodne parametre obsega SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Vrsta, ki predstavlja število s plavajočo vejico in enojno natančnostjo.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja število s plavajočo vejico in enojno natančnostjo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Protokol za uporabo pri povezovanju s primerkom Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse tabele.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse tabele.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse besedilne vrednosti.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse besedilne vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Določa vrsto kodiranja besedila.",
        "Documentation.LongDescription": "Določa vrsto kodiranja besedila.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse časovne vrednosti.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse časovne vrednosti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Določa raven sledi.",
        "Documentation.LongDescription": "Določa raven sledi.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Vrsta, ki predstavlja vse vrste.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja vse vrste.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Vrsta, ki predstavlja besedilni URI.",
        "Documentation.LongDescription": "Vrsta, ki predstavlja besedilni URI.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Določa način HTTP.",
        "Documentation.LongDescription": "Določa način HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
