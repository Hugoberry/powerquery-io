{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Gibt eine strukturelle Darstellung einer Access-Datenbank zurück.",
        "Documentation.LongDescription": "Gibt eine strukturelle Darstellung einer Access-Datenbank zurück: <code>database</code>. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden sollen (Standardwert: FALSE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = value1, option2 = value2...] angegeben.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Gibt die Analysis Services-Datenbanken auf einem bestimmten Host zurück.",
        "Documentation.LongDescription": "Gibt Datenbanken für die Analysis Services-Instanz \"<code>server</code>\" zurück. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Ein logischer Wert, der angibt, ob die im mehrdimensionalen oder tabellarischen Modell angegebenen Typen f&#252;r die Typen der hinzugef&#252;gten Measurespalten verwendet werden. Bei Festlegung auf FALSE wird f&#252;r alle Measurespalten der Typ &quot;number&quot; verwendet. Der Standardwert f&#252;r diese Option lautet FALSE.</li>\r\n<li><code>Culture</code> : Ein Kulturname, der die Kultur f&#252;r die Daten angibt. Dieser Wert entspricht der Eigenschaft &quot;Gebietsschema-ID&quot; der Verbindungszeichenfolge.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>SubQueries</code> : Eine Zahl (0, 1 oder 2), die den Wert der SubQueries-Eigenschaft in der Verbindungszeichenfolge festlegt. Hier&#252;ber wird das Verhalten berechneter Elemente in untergeordneten SELECT-Ausdr&#252;cken oder Teilcubes gesteuert (Standardwert: 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "AtScale-Cubes",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Hiermit werden Cubedaten aus AtScale importiert oder über DirectQuery abgefragt.",
        "Documentation.LongDescription": "\r\nGibt Cubedaten aus AtScale auf dem Server <code>server</code> zurück. Der optionale Datensatzparameter <code>options</code> kann angegeben werden, um die folgenden Optionen zu steuern:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: Ein logischer Wert, der angibt, ob die im mehrdimensionalen oder tabellarischen Modell angegebenen Typen für die Typen der hinzugefügten Measurespalten verwendet werden. Bei Festlegung auf \"false\" wird der Typ \"number\" für alle Measurespalten verwendet. Der Standardwert für diese Option lautet \"false\".</li>\r\n        <li><code>CommandTimeout</code>: Eine Zeitspanne (in Sekunden), die steuert, wie lange die serverseitige Abfrage ausgeführt werden darf, bevor sie abgebrochen wird. Der Standardwert ist vom Treiber abhängig. </li>\r\n        <li><code>ConnectionTimeout</code>: Eine Zeitspanne (in Sekunden), die steuert, wie lange ein Versuch zur Verbindungsherstellung mit dem Server dauern darf, bevor er abgebrochen wird. Der Standardwert ist vom Treiber abhängig. </li>\r\n\r\n</ul>\r\nDer Datensatzparameter wird als [option1 = value1, option2 = value2...] angegeben.",
        "Documentation.Examples": {
          "Description": "Hiermit werden die Cubedaten in einem AtScale-Cube aufgelistet.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importiert Daten aus Azure Data Explorer (Kusto).",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Hiermit werden Daten aus Ihrer Azure Data Explorer-Instanz (Kusto) importiert.",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle mit Storm Events-Informationen zurück.",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Eine Tabelle mit Storm-Ereignissen aus der Datenbank \"Samples\" im Cluster \"help\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Hiermit wird die URL für Ihren Azure DevOps Analytics-Dienst eingegeben.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Hiermit werden die über die Azure DevOps Analytics-Dienst-URL heruntergeladenen Inhalte als Binärwert zurückgegeben. Diese Funktion verwendet unterschiedliche Anmeldeinformationen für verschiedene Organisationen."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services-Feed",
        "Documentation.DisplayName": "Azure DevOps Services-Feed",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Hiermit wird eine Tabelle der über Azure DevOps bereitgestellten OData-Feeds zurückgegeben."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Geben Sie die URL des Azure Enterprise-REST-API-Endpunkts an, der Ihrer Registrierung zugeordnet ist.",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Gibt eine Liste der verfügbaren Berichte und Monate aus der Azure Enterprise-API zurück.",
        "Documentation.Name": "Daten aus Azure Enterprise importieren",
        "Documentation.Examples": [
          {
            "Description": "Verwendet die AzureEnterprise.Tables-Funktion und navigiert zu einem bestimmten Wert, um die Ergebnisse abzurufen.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tabelle"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Beispiele für Startabfragen finden Sie unter https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli.",
        "Documentation.Examples": [
          {
            "Description": "Zurückgeben einer Tabelle mit Abfrageergebnissen der Benutzerabfrage \"resources\"",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Liste der Tabellen in einer Azure Spark-Instanz.",
        "Documentation.LongDescription": "Liste der Tabellen in einer Azure Spark-Instanz.",
        "Documentation.Examples": [
          {
            "Description": "Liste der Tabellen in einer Azure Spark-Instanz.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Gibt eine Navigationstabelle mit den Containern des angegebenen Kontos aus einem Azure-Speichertresor zurück.",
        "Documentation.LongDescription": "Gibt eine Navigationstabelle mit je einer Zeile für die einzelnen Container unter der Konto-URL \"<code>account</code>\" aus einem Azure-Speichertresor zurück. Jede Zeile enthält einen Link zu den Containerblobs. <code>options</code> kann zum Steuern der folgenden Optionen angegeben werden:\r\n    <ul>\r\n<li><code>BlockSize</code> : Die Anzahl der Bytes, die vor dem Warten auf den Datenconsumer gelesen werden sollen. Der Standardwert ist 4 MB.</li>\r\n<li><code>RequestSize</code> : Die Anzahl von Bytes, die in einer einzigen HTTP-Anforderung an den Server gelesen werden sollen. Der Standardwert ist 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Die ConcurrentRequests-Option unterst&#252;tzt einen schnelleren Download von Daten, indem die Anzahl von Anforderungen angegeben wird, die parallel ausgef&#252;hrt werden sollen. Dies geht zulasten der Arbeitsspeichernutzung. Der erforderliche Arbeitsspeicher ist (GleichzeitigeAnforderungen ⋅ Anforderungsgr&#246;&#223;e). Der Standardwert ist 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Gibt eine Navigationstabelle mit den Dokumenten zurück, die im angegebenen Container und den zugehörigen Unterordnern der Azure Data Lake Storage-Instanz gefunden wurden.",
        "Documentation.LongDescription": "Gibt eine Navigationstabelle mit den Dokumenten zurück, die im angegebenen Container und den zugehörigen Unterordnern unter der Konto-URL <code>endpoint</code> in einem Azure Data Lake Storage-Dateisystem gefunden wurden. \"<code>options</code>\" kann zum Steuern der folgenden Optionen angegeben werden:\r\n    <ul>\r\n<li><code>BlockSize</code> : Die Anzahl der Bytes, die vor dem Warten auf den Datenconsumer gelesen werden sollen. Der Standardwert ist 4 MB.</li>\r\n<li><code>RequestSize</code> : Die Anzahl von Bytes, die in einer einzigen HTTP-Anforderung an den Server gelesen werden sollen. Der Standardwert ist 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Die ConcurrentRequests-Option unterst&#252;tzt einen schnelleren Download von Daten, indem die Anzahl von Anforderungen angegeben wird, die parallel ausgef&#252;hrt werden sollen. Dies geht zulasten der Arbeitsspeichernutzung. Der erforderliche Arbeitsspeicher ist (GleichzeitigeAnforderungen ⋅ Anforderungsgr&#246;&#223;e). Der Standardwert ist 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der steuert, ob die Dateien in einer Baumstruktur-Verzeichnisansicht oder als einfache Liste zur&#252;ckgegeben werden. Der Standardwert ist FALSE.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Gibt eine Navigationstabelle mit den im angegebenen Konto aus einem Azure-Speichertresor gefundenen Tabellen zurück.",
        "Documentation.LongDescription": "Gibt eine Navigationstabelle mit einer Zeile für jede Tabelle zurück, die über die Konto-URL <code>account</code> in einem Azure-Speichertresor gefunden wird. Jede Zeile enthält einen Link zur Azure-Tabelle. Optional kann ein Datensatzparameter \"<code>options</code>\" angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>Timeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor die Anforderung an den Server abgebrochen wird. Der Standardwert ist quellspezifisch.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight in AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Wird zum Abruf von Bloomberg-Daten genutzt"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Diese Funktion ist nicht verfügbar, weil Sie .NET 4.5 erfordert.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (Legacy)",
        "Documentation.Caption": "Common Data Service (Legacy)",
        "Documentation.LongDescription": "Hiermit stellen Sie eine Verbindung mit Ihrer Common Data Service-Instanz her (Dynamics 365 und PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Gibt den Inhalt des CSV-Dokuments als Tabelle zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt des CSV-Dokuments als Tabelle zurück.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> kann null, die Anzahl der Spalten, eine Liste von Spaltennamen, ein Tabellentyp oder ein Optionsdatensatz sein.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> kann ein einzelnes Zeichen, eine Liste von Zeichen oder der Wert <code>\"\"</code>, sein, der angibt, dass Zeilen durch aufeinanderfolgende Leerzeichen geteilt werden sollen. Standard: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Hier finden Sie <code>ExtraValues.Type</code> die unterstützten Werte von <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> Gibt den Textkodierungstyp an.\r\n      </li>\r\n    </ul>\r\n\r\n    Wenn ein Datensatz für <code>columns</code> angegeben wird (und <code>delimiter</code>, <code>extraValues</code>, und <code>encoding</code> sind null), können die folgenden Datensatzfelder bereitgestellt werden:\r\n    <ul>\r\n      <li>\r\n        <code>Trennzeichen</code>: Das Spaltentrennzeichen. Standard: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Spalten</code>: Kann null, die Anzahl der Spalten, eine Liste von Spaltennamen oder ein Tabellentyp sein. Wenn die Anzahl der Spalten geringer ist als die in der Eingabe gefundene Anzahl, werden die zusätzlichen Spalten ignoriert. Wenn die Anzahl der Spalten höher ist als die in der Eingabe gefundene Anzahl, sind die zusätzlichen Spalten null. Wenn nichts angegeben wird, wird die Anzahl der Spalten durch den Inhalt der Eingabe bestimmt.\r\n      </li>\r\n      <li>\r\n        <code>Kodierung</code>: Die Textkodierung der Datei. Standard: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Specifies how quotes are handled.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (Standard): Anführungszeichen in einem Feld sind nur unmittelbar nach dem Trennzeichen von Bedeutung.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Anführungszeichen in einem Feld sind immer von Bedeutung, unabhängig davon, wo sie erscheinen.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Gibt an, wie mit Zeilenumbrüchen in Anführungszeichen umgegangen wird.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (Standard): Zeilenumbrüche in Anführungszeichen werden als Teil der Daten und nicht als Ende der aktuellen Zeile behandelt.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Alle Zeilenumbrüche werden als Ende der aktuellen Zeile behandelt, auch wenn sie innerhalb eines in Anführungszeichen gesetzten Werts stehen.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Verarbeiten von CSV-Text mit Spaltenüberschriften.",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Gibt eine Tabelle zurück, die den Satz verfügbarer Dimensionen enthält.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die den Satz verfügbarer Dimensionen innerhalb von '<code>cube</code>' enthält. Jede Dimension entspricht einer Tabelle, die einen Satz von Dimensionsattributen enthält, und jedes Dimensionsattribut wird als eine Spalte in der Dimensionstabelle dargestellt. Die Dimensionen können mithilfe von 'Cube.AddAndExpandDimensionColumn' im Cube erweitert werden. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Gibt eine geschachtelte Tabellenstruktur zurück, die die Anzeigeordnerhierarchie der Objekte (z. B. Dimensionen und Measures) darstellt.",
        "Documentation.LongDescription": "Gibt eine geschachtelte Tabellenstruktur zurück, die die Anzeigeordnerhierarchie der Objekte (z. B. Dimensionen und Measures) darstellt, die für die Verwendung in <code>cube</code> verfügbar sind.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Gibt eine Tabelle mit dem Satz der verfügbaren Eigenschaften von Measures zurück, die im Cube erweitert sind.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit dem Satz der verfügbaren Eigenschaften für Measures zurück, die im Cube erweitert sind.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Gibt eine Tabelle zurück, die den Satz verfügbarer Measures enthält.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die den Satz verfügbarer Measures innerhalb von \"<code>cube</code>\" enthält.\r\n    Jedes Measure wird als Funktion dargestellt. Measures können mithilfe von \"Cube.AddMeasureColumn\" auf den Cube angewendet werden.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Gibt eine Tabelle zurück, die eine Sammlung von Parametern enthält, die auf den Cube angewendet werden können.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die eine Sammlung von Parametern enthält, die auf '<code>cube</code>' angewendet werden können. Jeder Parameter ist eine Funktion, die aufgerufen werden kann, um '<code>cube</code>' mit dem angewendeten Parameter und seinen Argumenten abzurufen.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Gibt eine Tabelle mit dem Satz der verfügbaren Eigenschaften für Dimensionen zurück, die im Cube erweitert sind.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit dem Satz der verfügbaren Eigenschaften für Dimensionen zurück, die im Cube erweitert sind.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Geben Sie die URL Ihres Azure Data Lake Storage Gen1-Kontos ein.",
        "Documentation.LongDescription": "Hiermit wird eine Tabelle aus Azure Data Lake Storage Gen1 zurückgegeben, die jeweils eine Zeile für jeden Ordner oder jede Datei enthält, der/die unter der Adresse <code>URL</code> gefunden wird. Jede Zeile enthält die Eigenschaften des Ordners/der Datei und einen Link zum zugehörigen Inhalt."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Geben Sie die URL Ihres Azure Data Lake Storage-Kontos ein.",
        "Documentation.LongDescription": "Hiermit wird eine Tabelle aus Azure Data Lake Storage Gen1 zurückgegeben, die jeweils eine Zeile für jede Datei enthält, die unter der Adresse <code>URL</code> gefunden wird. Jede Zeile enthält die Eigenschaften der Datei und einen Link zu deren Inhalt."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL-API)",
        "Documentation.Description": "Hiermit wird die URL eines Azure Cosmos DB-Kontos angegeben.",
        "Documentation.LongDescription": "Hiermit wird eine Tabelle mit Azure Cosmos DB-Datenbanken unter <code>url</code> zurückgegeben. Wenn <code>database</code> angegeben ist, wird stattdessen eine Tabelle mit Sammlungen zurückgegeben. Wenn außerdem das Feld <code>Query</code> im <code>options</code>-Datensatz angegeben wurde, werden die Ergebnisse der Abfrage zurückgegeben, die für die angegebene Datenbank oder Sammlung ausgeführt wird."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Geben Sie die URL für Ihren OData-Dienstendpunkt in Dynamics 365 Business Central (lokal) ein.",
        "Documentation.DisplayName": "Dynamics 365 Business Central (lokal)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (lokal)",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Daten aus Dynamics 365 Business Central (lokal) zurück. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Geben Sie die URL für Ihren Dynamics NAV-OData-Dienstendpunkt ein.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Dynamics NAV-Daten zurück. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Gibt die Cubes in einer Essbase-Instanz gruppiert nach Essbase-Server zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit Cubes gruppiert nach Essbase-Server aus einer Essbase-Instanz auf dem APS-Server \"<code>url</code>\" zurück. Ein optionaler Datensatzparameter \"<code>options</code>\" kann zum Steuern der folgenden Optionen angegeben werden:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Gibt den Inhalt der Excel-Arbeitsmappe zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt der Excel-Arbeitsmappe zurück.\r\n    <ul>\r\n     <li> „<code>useHeaders</code>“ kann NULL sein, ein logischer Wert (TRUE/FALSE), der angibt, ob die erste Zeile jeder zurückgegebenen Tabelle als Überschrift oder Optionsdatensatz behandelt werden soll. Standardwert: FALSE.</li>\r\n     <li> „<code>delayTypes</code>“ kann NULL oder ein logischer Wert (TRUE/FALSE) sein, der angibt, ob die Spalten der einzelnen zurückgegebenen Tabellen untypisiert bleiben sollen. Standardwert: FALSE.</li>\r\n    </ul>\r\n\r\n    Wenn für „<code>useHeaders</code>“ ein Datensatz angegeben wird (und „<code>delayTypes</code>“ NULL lautet), können die folgenden Datensatzfelder angegeben werden:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Kann NULL oder ein logischer Wert (TRUE/FALSE) sein, der angibt, ob die erste Zeile jeder zurückgegebenen Tabelle als Überschrift behandelt werden soll. Standardwert: FALSE.</li>\r\n     <li> <code>DelayTypes</code>: Kann NULL oder ein logischer Wert (TRUE/FALSE) sein, der angibt, ob die Spalten der einzelnen zurückgegebenen Tabellen untypisiert bleiben sollen. Standardwert: FALSE.</li>\r\n     <li> <code>InferSheetDimensions</code>: Kann NULL oder ein logischer Wert (TRUE/FALSE) sein, der angibt, ob der Bereich eines Arbeitsblatts, der Daten enthält, durch Lesen des Arbeitsblatts selbst abgeleitet werden soll, anstatt die Dimensionsmetadaten aus der Datei zu lesen. Dies kann in Fällen nützlich sein, in denen die Dimensionsmetadaten falsch sind. Hinweis: Diese Option wird nur für Open XML-Excel-Dateien und nicht für Legacy-Excel-Dateien unterstützt. Standardwert: FALSE.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Gibt den Inhalt von Sheet1 aus einer Excel-Arbeitsmappe zurück.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Gibt eine Tabelle mit den Eigenschaften und Inhalten der Dateien und Ordner zurück, die im angegebenen Ordner gefunden wurden.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die eine Zeile für jeden Ordner und jede Datei im Ordner <code>path</code> enthält. Jede Zeile enthält Eigenschaften des Ordners bzw. der Datei sowie einen Link zum jeweiligen Inhalt. Der <code>options</code>-Parameter ist derzeit nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Gibt eine Tabelle mit den Eigenschaften und Inhalten der Dateien des angegebenen Ordners und der Unterordner zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die eine Zeile für jede Datei im Ordner <code>path</code> und in allen zugehörigen Unterordnern enthält. Jede Zeile enthält Eigenschaften der Datei sowie einen Link zum jeweiligen Inhalt. Der <code>options</code>-Parameter ist derzeit nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Daten mithilfe von Azure AD aus einer Google BigQuery-Datenbank importieren",
        "Documentation.LongDescription": "\r\n      Gibt eine Tabelle an, in der die verfügbaren Projekte in Google BigQuery mit Azure AD für <code>Billing Project ID</code> aufgelistet sind. Ein optionaler Datensatzparameter <code>options</code> kann angegeben werden, um die folgenden Optionen zu steuern:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Eine Dauer, die steuert, wie lange gewartet werden soll, bevor ein Versuch abgebrochen wird, eine Verbindung mit dem Server herzustellen. Der Standardwert ist ODBC Connection Timeout value.</li>\r\n        <li><code>CommandTimeout</code>: Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgeführt werden darf, bevor sie abgebrochen wird.</li>\r\n        <li><code>UseStorageApi</code>: Gibt an, ob die BigQuery Storage-API für große Ergebnissets verwendet werden soll. Der Standardwert für die Verwendung der Speicher-API ist \"true\". Legen Sie diesen Wert auf FALSE fest, um die Speicher-API nicht zu verwenden</li>\r\n        <li><code>AudienceUri</code>: Dies ist der Zielgruppen-URI, den der ODBC-Treiber für seine Tokenaustauschanforderungen verwenden kann. Dieses Feld muss ein vollqualifizierter URI sein (d. h. \"iam.googleapis.com/locations/global/workforcePools/ ${pool_id}/providers/azuread\"), wobei pool_id ein global eindeutiger Name zum Identifizieren des Mitarbeiterpools ist.</li>\r\n      </ul>\r\n    Der Datensatzparameter wird als [option1 = value1, option2 = value2...] angegeben.\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Auflisten der verfügbaren Projekte in Google BigQuery mithilfe von Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Tabellen",
        "Documentation.Caption": "Google Tabellen",
        "Documentation.Description": "Importiert Daten aus „GoogleSheets“",
        "Documentation.LongDescription": "Importiert Daten aus „GoogleSheets“"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Gibt eine Navigationstabelle mit den Containern des angegebenen Kontos aus einem Azure-Speichertresor zurück.",
        "Documentation.LongDescription": "Gibt eine Navigationstabelle mit je einer Zeile für die einzelnen Container unter der Konto-URL '<code>account</code>' aus einem Azure-Speichertresor zurück. Jede Zeile enthält einen Link zu den Container-BLOBs.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Gibt eine Navigationstabelle mit den Containern des angegebenen Kontos aus einem Azure-Speichertresor zurück.",
        "Documentation.LongDescription": "Gibt eine Navigationstabelle mit je einer Zeile für die einzelnen Container unter der Konto-URL '<code>account</code>' aus einem Azure-Speichertresor zurück. Jede Zeile enthält einen Link zu den Container-BLOBs.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Gibt eine Tabelle mit den Eigenschaften und Inhalten der Dateien und Ordner des angegebenen Ordners aus einem Hadoop-Dateisystem zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit je einer Zeile für die einzelnen Ordner und Dateien unter der Ordner-URL \"<code>url</code>\" aus einem Hadoop-Dateisystem zurück. Jede Zeile enthält Eigenschaften des Ordners bzw. der Datei sowie einen Link zum jeweiligen Inhalt.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Gibt eine Tabelle mit den Eigenschaften und Inhalten der Dateien des angegebenen Ordners und der Unterordner aus einem Hadoop-Dateisystem zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit je einer Zeile für die einzelnen Dateien unter der Ordner-URL \"<code>url</code>\" (einschließlich Unterordner) aus einem Hadoop-Dateisystem zurück. Jede Zeile enthält Eigenschaften der Datei sowie einen Link zu ihrem Inhalt.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importiert Daten aus einem Impala-Cluster.",
        "Documentation.LongDescription": "Importiert Daten aus einem Impala-Cluster <code>server</code>. Wenn kein Port angegeben wurde, wird standardmäßig Port 21050 verwendet.",
        "Documentation.Examples": [
          {
            "Description": "Listet die Tabellen in einem Impala-Cluster auf.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Hiermit werden Daten aus Azure Data Explorer (Kusto) importiert.",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Hiermit werden Daten aus Ihrer Azure Data Explorer-Instanz (Kusto) importiert.",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle mit Storm Events-Informationen zurück.",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Eine Tabelle mit Storm-Ereignissen aus der Datenbank \"Samples\" im Cluster \"help\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Gibt eine Tabelle mit Daten von einem MailChimp-Endpunkt zurück.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Sendet einen Aufruf an die MailChimp-API und gibt das Ergebnisdataset als Tabelle zurück. Es werden automatisch alle Ergebnisse durchlaufen. Der optionale entityName-Parameter kann für API-Endpunkte verwendet werden, bei denen der Stammendpunkt und der Haupt-entityName in der JSON-Antwort nicht übereinstimmen.",
        "Documentation.Examples": [
          {
            "Description": "Ruft eine Tabelle mit Daten vom Endpunkt \"lists\" der MailChimp-API ab.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Eine Tabelle mit lists-Daten."
          },
          {
            "Description": "Ruft eine Tabelle mit Daten vom Endpunkt \"campaign-folders\" der MailChimp-API ab.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Eine Tabelle mit campaign-folders-Daten."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Gibt unverarbeitete Antwortergebnisse von einem MailChimp-API-Endpunkt zurück.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Sendet einen Aufruf an die MailChimp-API und gibt die unverarbeitete Antwort zurück.",
        "Documentation.Examples": [
          {
            "Description": "Gibt unverarbeitete Daten für eine vorgegebene Kampagne vom Endpunkt \"reports/click-details\" der MailChimp-API zurück.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Unverarbeitete Detaildaten zu Klicks für die vorgegebene Kampagne."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Hiermit werden erweiterte Abfragefunktionen bereitgestellt.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Hiermit werden erweiterte Abfragefunktionen bereitgestellt.",
        "Documentation.Examples": [
          {
            "Description": "Wenn heute der 15. Juni 2017 ist, dann werden zusammenfassende Daten für den Zeitraum zwischen dem 1. Mai 2017 und dem 15. Juni 2017 abgerufen.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Die Funktion gibt zusammenfassende Daten für den Zeitraum zwischen dem 1. Mai 2017 und dem 15. Juni 2017 zurück."
          },
          {
            "Description": "Wenn heute der 15. Juni 2017 ist, dann werden zusammenfassende Daten für April 2017 abgerufen.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Die Funktion gibt Daten für den Zeitraum zwischen dem 1. April 2017 und dem 30. April 2017 zurück."
          },
          {
            "Description": "Wenn heute der 15. Juni 2017 ist, dann werden zusammenfassende Daten für den Zeitraum von April 2017 bis heute abgerufen.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Die Funktion gibt Daten für den Zeitraum zwischen dem 1. April 2017 und dem 15. Juni 2017 zurück."
          },
          {
            "Description": "Wenn heute der 15. Juni 2017 ist, dann werden zusammenfassende Daten für den Zeitraum von Dezember 2016 bis Februar 2017 abgerufen.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Die Funktion gibt Daten für den Zeitraum zwischen dem 1. Dezember 2016 und dem 28. Februar 2017 zurück."
          },
          {
            "Description": "Wenn heute der 15. Juni 2017 ist, dann werden die Marketplace-Gebühren für die letzten 18 Monate abgerufen.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Die Funktion gibt Daten für den Zeitraum zwischen dem 1. Dezember 2015 und dem 15. Juni 2017 zurück."
          },
          {
            "Description": "Wenn heute der 15. Juni 2017 ist, dann werden detaillierte Gebühreninformationen für Juni 2017 und Mai 2017 abgerufen.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Die Funktion gibt Daten für den Zeitraum zwischen dem 1. Mai 2017 und dem 15. Juni 2017 zurück."
          },
          {
            "Description": "Angenommen, heute wäre der 3. Juli 2017. In diesem Fall würden detaillierte Gebühreninformationen für Juli 2016 abgerufen.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Die Funktion gibt Daten für den Zeitraum zwischen dem 1. Juli 2016 und dem 31. Juli 2016 zurück."
          },
          {
            "Description": "Wenn heute der 13. Juni 2017 ist, dann wird eine Saldozusammenfassung für die letzten 10 Monate plus 13 Tage für diesen Monat abgerufen.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Die Funktion gibt Daten für den Zeitraum zwischen dem 1. September 2016 und dem 13. Juli 2017 zurück."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Gibt eine Tabelle mit SQL-Tabellen und Ansichten aus der ODBC-Datenquelle zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit SQL-Tabellen und -Sichten aus der ODBC-Datenquelle zurück, die durch die Verbindungszeichenfolge \"<code>connectionString</code>\" angegeben wird. \"<code>connectionString</code>\" kann Text oder ein Datensatz mit Eigenschaft/Wert-Paaren sein. Eigenschaftswerte können entweder Text oder Zahlen enthalten. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n<li><code>ConnectionTimeout</code> : Ein Zeitraum, der steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist 15 Sekunden.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Ein logischer Wert (TRUE/FALSE), der angibt, ob SQL Server-kompatible Verbindungszeichenfolgenoptionen f&#252;r die Windows-Authentifizierung bereitgestellt werden sollen. Der Standardwert lautet TRUE.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Gibt die SQL-Tabellen und -Ansichten aus der angegebenen Verbindungszeichenfolge zurück.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Gibt eine Tabelle mit SQL-Tabellen und -Sichten aus der OLE DB-Datenquelle zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit SQL-Tabellen und -Sichten aus der OLE DB-Datenquelle zurück, die durch die Verbindungszeichenfolge \"<code>connectionString</code>\" angegeben wird. \"<code>connectionString</code>\" kann Text oder ein Datensatz mit Eigenschaft/Wert-Paaren sein. Eigenschaftswerte können entweder Text oder Zahlen sein. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden sollen (Standardwert: TRUE).</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Ein logischer Wert (TRUE/FALSE), der angibt, ob SQL Server-kompatible Verbindungszeichenfolgenoptionen f&#252;r die Windows-Authentifizierung bereitgestellt werden sollen. Der Standardwert lautet TRUE.</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = value1, option2 = value2...] oder als [Query = \"select ...\"] angegeben.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Gibt eine Tabelle mit SQL-Tabellen und Ansichten aus der Oracle-Datenbank zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit SQL-Tabellen und -Sichten aus der Oracle-Datenbank auf dem Server \"<code>server</code>\" zurück. Der Port kann optional mit dem Server (getrennt durch einen Doppelpunkt) angegeben werden. Der optionale Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = wert1, option2 = wert2...] oder [Query = \"select ...\"] angegeben.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Gibt alle Tabellen zurück, die in einer PDF-Datei gefunden wurden.",
        "Documentation.LongDescription": "Gibt Tabellen zurück, die in \"<code>pdf</code>\" gefunden wurden. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>Implementation</code> : Die Version des Algorithmus, die beim Identifizieren von Tabellen verwendet werden soll. Alte Versionen stehen nur zur Gew&#228;hrleistung von Abw&#228;rtskompatibilit&#228;t zur Verf&#252;gung, damit alte Abfragen nicht durch Algorithmus-Updates ung&#252;ltig werden. Die neueste Version sollte immer die besten Ergebnisse liefern. G&#252;ltige Werte sind „1.3“, „1.2“, „1.1“ oder NULL.</li>\r\n<li><code>StartPage</code> : Hiermit wird die erste Seite im zu untersuchenden Seitenbereich angegeben. Standardwert: 1.</li>\r\n<li><code>EndPage</code> : Hiermit wird die letzte Seite im zu untersuchenden Seitenbereich angegeben. Standardwert: die letzte Seite im Dokument.</li>\r\n<li><code>MultiPageTables</code> : Hiermit wird gesteuert, ob &#228;hnliche Tabellen auf aufeinanderfolgenden Seiten automatisch in einer einzigen Tabelle kombiniert werden. Standardwert: TRUE.</li>\r\n<li><code>EnforceBorderLines</code> : Hiermit wird gesteuert, ob Rahmenlinien immer als Zellbegrenzungen erzwungen (sofern TRUE) oder nur als ein Hinweis unter vielen zum Bestimmen von Zellbegrenzungen (sofern FALSE) verwendet werden. Standardwert: FALSE.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Datenzugriff",
        "Documentation.Examples": [
          {
            "Description": "Hiermit werden die in \"sample.pdf\" enthaltenen Tabellen zurückgegeben.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Geben Sie die URL für Ihr Planview Projectplace-Konto ein.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Planview Projektplace-Daten zurück."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þỳŧĥőņ śċŕíφт",
        "Documentation.Description": "Эхзςûťєѕ Þγţћοŋ šćѓĩρτ áňď řέţŭѓŉŝ đäţд ƒřåmęś",
        "Documentation.Examples": {
          "Description": "Эхзςûťєѕ Þγţћοŋ šćѓĩρτ áňď řέţŭѓŉŝ đäţд ƒřåmęś",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Ѓ šćŗϊþŧ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Gibt eine Tabelle zurück, in der jede Zeile ein Feldname und Wert des Eingabedatensatzes ist.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit den Spalten <code>Name</code> und <code>Value</code> sowie mit je einer Zeile für die einzelnen Felder in \"<code>record</code>\" zurück.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Gibt die Tabelle aus dem Datensatz zurück.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Gibt die in einer SAP HANA-Datenbank enthaltenen Pakete zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit mehrdimensionalen Paketen aus der SAP HANA-Datenbank \"<code>server</code>\" zurück. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>Distribution</code> : Eine SapHanaDistribution, die den Wert der Eigenschaft &quot;Distribution&quot; in der Verbindungszeichenfolge festlegt. Das Anweisungsrouting ist die Methode zum Auswerten des richtigen Serverknotens eines verteilten Systems vor der Anweisungsausf&#252;hrung. Der Standardwert lautet &quot;SapHanaDistribution.All&quot;.</li>\r\n<li><code>Implementation</code> : Hiermit wird die zu verwendende SAP HANA-Connectorimplementierung angegeben.</li>\r\n<li><code>EnableColumnBinding</code> : Bindet beim Abrufen von Daten Variablen an die Spalten einer SAP-HANA-Ergebnismenge. Kann m&#246;glicherweise die Leistung auf Kosten einer etwas h&#246;heren Speicherauslastung verbessern. Der Standardwert ist falsch.</li>\r\n<li><code>ConnectionTimeout</code> : Ein Zeitraum, der steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist 15 Sekunden.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Gibt eine Tabelle mit Inhalten einer SharePoint-Website zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die jeweils eine Zeile pro Ordner und Dokument enthält, der bzw. das in der angegebenen SharePoint-Website \"<code>url</code>\" gefunden wurde. Jede Zeile enthält Eigenschaften des Ordners bzw. der Datei sowie einen Link zum jeweiligen Inhalt. \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Nummer (14 oder 15) oder der Text &quot;Auto&quot;, die bzw. der die Version der SharePoint-API angibt, die f&#252;r diese Website verwendet werden soll. Wenn keine Angabe erfolgt, wird die API-Version 14 verwendet. Wenn &quot;Auto&quot; angegeben ist, wird die Serverversion (falls m&#246;glich) automatisch erkannt. Andernfalls wird f&#252;r die Version der Standardwert &quot;14&quot; verwendet. Nicht englischsprachige SharePoint-Websites erfordern mindestens Version 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Gibt eine Tabelle mit Dokumenten einer SharePoint-Website zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die jeweils eine Zeile pro Dokument enthält, das in der angegebenen SharePoint-Website \"<code>url</code>\" gefunden wurde (Unterordner eingeschlossen). Jede Zeile enthält Eigenschaften des Ordners bzw. der Datei sowie einen Link zum jeweiligen Inhalt. \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Nummer (14 oder 15) oder der Text &quot;Auto&quot;, die bzw. der die Version der SharePoint-API angibt, die f&#252;r diese Website verwendet werden soll. Wenn keine Angabe erfolgt, wird die API-Version 14 verwendet. Wenn &quot;Auto&quot; angegeben ist, wird die Serverversion (falls m&#246;glich) automatisch erkannt. Andernfalls wird f&#252;r die Version der Standardwert &quot;14&quot; verwendet. Nicht englischsprachige SharePoint-Websites erfordern mindestens Version 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Gibt eine Tabelle mit dem Inhalt einer SharePoint-Liste zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die jeweils eine Zeile für jedes Listenelement enthält, die in der angegebenen SharePoint-Liste \"<code>url</code>\" gefunden wurde. Jede Zeile enthält Eigenschaften der Liste. \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Nummer (14 oder 15) oder der Text &quot;Auto&quot;, die bzw. der die Version der SharePoint-API angibt, die f&#252;r diese Website verwendet werden soll. Wenn keine Angabe erfolgt, wird die API-Version 14 verwendet. Wenn &quot;Auto&quot; angegeben ist, wird die Serverversion (falls m&#246;glich) automatisch erkannt. Andernfalls wird f&#252;r die Version der Standardwert &quot;14&quot; verwendet. Nicht englischsprachige SharePoint-Websites erfordern mindestens Version 15.</li>\r\n<li><code>Implementation</code> : Optional. Gibt an, welche Version des SharePoint Connectors verwendet werden soll. Akzeptierte Werte sind &quot;2.0&quot; oder null. Wenn der Wert &quot;2.0&quot; ist, wird die 2.0-Implementierung des SharePoint Connectors verwendet. Wenn der Wert null ist, wird die urspr&#252;ngliche Implementierung des SharePoint-Connectors verwendet.</li>\r\n<li><code>ViewMode</code> : Optional. Diese Option ist nur f&#252;r die Implementierung 2.0 g&#252;ltig. Akzeptierte Werte sind &quot;Alle&quot; und &quot;Standard&quot;. Wenn kein Wert angegeben wird, wird der Wert auf &quot;Alle&quot; gesetzt. Wenn &quot;Alle&quot; angegeben ist, enth&#228;lt die Ansicht alle vom Benutzer erstellten und systemdefinierten Spalten. Wenn &quot;Standard&quot; angegeben ist, entspricht die Ansicht dem, was der Benutzer sieht, wenn er sich die Liste online in der Ansicht ansieht, die er in seinen Einstellungen als Standardansicht festgelegt hat. Wenn der Benutzer seine Standardansicht bearbeitet, um entweder benutzerdefinierte oder systemdefinierte Spalten hinzuzuf&#252;gen oder zu entfernen, oder wenn er eine neue Ansicht erstellt und diese als Standardansicht einstellt, werden diese &#196;nderungen &#252;ber den Connector &#252;bertragen.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Verhindert, dass der Connector einen separaten Endpunkt f&#252;r Notizspalten verwendet.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Gibt aus dem Inhalt an der angegebenen URL eine Tabelle zurück, die gemäß der SODA 2.0-API formatiert ist.",
        "Documentation.LongDescription": "Gibt aus dem Inhalt unter der angegebenen URL \"<code>url</code>\" eine Tabelle zurück, die gemäß der SODA 2.0-API formatiert ist. Die URL muss auf eine gültige mit SODA kompatible Quelle verweisen, die in einer CSV-Erweiterung endet.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Mithilfe dieser Funktion kann ein beliebiger der Endpunkte \"Lists\" aufgerufen werden, die von der SparkPost-API, Version 1, angeboten werden. Wenn Sie die SparkPost-API über diese Funktion aufrufen, denken Sie daran, dass für die SparkPost-API ein striktes API-Ratenlimit vorliegt. Wenn Ihnen vom SparkPost-Server ein Statuscode 429 zurückgegeben wird, haben Sie das Ratenlimit erreicht und müssen einige Minuten warten, bevor weitere Aufrufe möglich sind.",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle mit einer einzelnen Spalte zurück, die mit Daten aus einem der Endpunkte \"Lists\" der SparkPost-API, Version 1, aufgefüllt sind. (Informationen finden Sie in der SparkPost-Dokumentation.)",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Hiermit laden Sie die integrierten, vom SparkPost-Connector verfügbar gemachten Tabellen mit Daten, die über eine vom Benutzer angegebene Anzahl von Tagen aggregiert werden. Wenn Sie diese Tabellen aktualisieren oder die SparkPost-API über diesen Connector aufrufen, denken Sie daran, dass für die SparkPost-API ein striktes API-Ratenlimit vorliegt. Wenn Ihnen vom SparkPost-Server ein Statuscode 429 zurückgegeben wird, haben Sie das Ratenlimit erreicht und müssen einige Minuten warten, bevor weitere Aufrufe möglich sind. Beachten Sie beim Auswählen eines Werts für den Parameter \"Anzahl von Tagen\", dass die API nur Daten aus sechs Monaten speichert."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Gibt eine Tabelle mit Datenbanken auf einem Server mit SQL Server zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit Datenbanken auf dem angegebenen SQL-Server zurück: <code>server</code>. Ein optionaler Aufzeichnungsparameter, <code>options</code>, kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Eine Zahl, die den Wert der maxdop-Abfrageklausel in der generierten SQL-Abfrage festlegt.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n<li><code>MultiSubnetFailover</code> : Ein logischer Wert (TRUE/FALSE), der den Wert der Eigenschaft &quot;MultiSubnetFailover&quot; in der Verbindungszeichenfolge festlegt (Standardwert: FALSE).</li>\r\n<li><code>UnsafeTypeConversions</code> : Ein logischer Wert (TRUE/FALSE), der bei Festlegung auf TRUE versucht, Typkonvertierungen zu falten. Ein fehlerhafter Versuch kann dazu f&#252;hren, dass die gesamte Abfrage nicht erfolgreich ausgef&#252;hrt werden kann. Nicht f&#252;r die allgemeine Verwendung empfohlen.</li>\r\n<li><code>ContextInfo</code> : Ein Bin&#228;rwert, der verwendet wird, um vor dem Ausf&#252;hren der einzelnen Befehle die CONTEXT_INFO festzulegen.</li>\r\n<li><code>OmitSRID</code> : Ein logischer Wert (TRUE/FALSE), der bei Festlegung auf TRUE die SRID ausl&#228;sst, wenn Well-Known Text aus Geometrie- und Geografietypen generiert wird.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Ein logischer Wert (wahr/falsch), der bei WAHR das Query Folding von Datenbanken auf demselben Server zul&#228;sst. Der Standardwert ist FALSCH.</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = wert1, option2 = wert2...] angegeben.\r\n    <br>\r\n    Das Festlegen einer SQL-Abfrage für die Ausführung auf dem Server wird nicht unterstützt. <code>Sql.Database</code> sollte stattdessen zum Ausführen einer SQL-Abfrage verwendet werden.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Ruft die Stripe-API auf, mit der Option zur Einschränkung der Anzahl von API-Aufrufen.",
        "Documentation.LongDescription": "Ruft die Stripe-API unter https://api.stripe.com/v1/<code>method</code> auf, wobei der optionale Datensatz <code>query</code> als zusätzlicher Parameter und der optionale Wert <code>pageLimit</code> als Grenzwert für die Anzahl von API-Anforderungen übergeben werden. Die neuesten Daten werden zuerst zurückgegeben. Wenn <code>pageLimit</code> nicht angegeben wird, werden alle Daten zurückgegeben. Es wird Stripe-Version 2015-10-16 verwendet.",
        "Documentation.Examples": [
          {
            "Description": "Gibt alle Gebührendaten zurück.",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Eine Tabelle mit sämtlichen Gebührendaten für das aktuelle Stripe-Konto."
          },
          {
            "Description": "Gibt eine Seite mit Gebührendaten zurück.",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Eine Tabelle mit den neuesten Gebührendaten für das aktuelle Stripe-Konto."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Puffert eine Tabelle im Arbeitsspeicher und schützt sie so während der Auswertung vor externen Änderungen.",
        "Documentation.LongDescription": "Puffert eine Tabelle im Arbeitsspeicher und schützt sie so während der Auswertung von externen Änderungen.\r\n    Die Pufferung ist flach. Sie erzwingt die Auswertung beliebiger skalarer Zellwerte, behält jedoch nicht skalare Werte (Datensätze, Listen, Tabellen usw.) unverändert bei. \r\n    <br>\r\n    <br>\r\n    Beachten Sie, dass die Verwendung dieser Funktion dazu führen kann, dass Ihre Abfragen schneller ausgeführt werden. In einigen Fällen kann die Ausführung Ihrer Abfragen langsamer werden, aufgrund der hinzugefügten \r\n    Kosten für das Lesen aller Daten und deren Speicherung im Arbeitsspeicher sowie der Tatsache, dass die Pufferung das Nachschalten verhindert. Wenn die Daten nicht \r\n    gepuffert werden müssen, Sie aber Downstream Folding verhindern möchten, verwenden Sie stattdessen <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Lädt all Zeilen einer SQL-Tabelle in den Arbeitsspeicher, sodass Downstream-Vorgänge den SQL Server nicht mehr abfragen können.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Gibt eine Tabelle zurück, die durch Zusammenführen einer Liste von Tabellen entstanden ist.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die durch Zusammenführen einer Liste von Tabellen entstanden ist, <code>tables</code>. Die resultierende Tabelle weist eine Zeilentypstruktur auf, die durch \"<code>columns</code>\" bzw. durch eine Vereinigung der Eingabetypen definiert wird, wenn \"<code>columns</code>\" nicht angegeben wird.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mergt die drei Tabellen.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Führen Sie drei Tabellen mit unterschiedlichen Strukturen zusammen.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Führen Sie zwei Tabellen und ein Projekt auf den angegebenen Typ zusammen.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Stuft die Spaltenüberschriften zur ersten Zeile mit Werten herab.",
        "Documentation.LongDescription": "Stuft die Spaltenüberschriften (also die Spaltennamen) zur ersten Zeile mit Werten herab. Die standardmäßigen Spaltennamen lauten \"Column1\", \"Column2\" usw.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Stuft die erste Zeile mit Werten in der Tabelle tiefer.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Entfernt doppelte Zeilen aus der Tabelle.",
        "Documentation.LongDescription": "Entfernt doppelte Zeilen aus der Tabelle.\r\n    Ein optionaler Parameter <code>equationCriteria</code> gibt an, welche Spalten der Tabelle auf Duplizierung getestet werden. Wenn <code>equationCriteria</code> nicht angegeben ist, werden alle Spalten getestet.<br>\r\n    <br>\r\n    Da Power Query manchmal bestimmte Vorgänge an Back-End-Datenquellen auslagert (bekannt als „Faltung“), und manchmal auch Abfragen optimiert, indem \r\n     Vorgänge überspringen werden, die nicht unbedingt erforderlich sind, gibt es im Allgemeinen keine Garantie, welches bestimmte Duplikat beibehalten wird.\r\n     Sie können beispielsweise nicht davon ausgehen, dass die erste Zeile mit einem eindeutigen Satz von Spaltenwerten erhalten bleibt und Zeilen weiter unten in der Tabelle entfernt werden. \r\n    Wenn sich die Entfernung von Duplikaten vorhersehbar verhalten soll, puffern Sie zuerst die Tabelle mithilfe von <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Entfernt doppelte Zeilen aus der Tabelle.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Entfernt die doppelten Zeilen aus der Spalte \"[b]\" der Tabelle <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Erstellt eine Tabelle auf der Grundlage einer Liste mit Spalten und angegebenen Werten.",
        "Documentation.LongDescription": "Erstellt eine Tabelle vom Typ \"<code>columns</code>\" auf der Grundlage einer Liste (<code>lists</code>), die geschachtelte Listen mit Spaltennamen und -werten enthält.\r\n    Besitzen einige Spalten mehr Werte als andere, werden die fehlenden Werte mit dem Standardwert NULL ausgefüllt, sofern die Spalten NULL-Werte zulassen.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle aus einer Liste mit Kundennamen in einer Liste zurück. Jeder Wert im Kundenlistenelement wird zu einem Zeilenwert, und jede Liste wird zu einer Spalte.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Erstellt eine Tabelle auf der Grundlage einer angegebenen Liste mit Spalten und einer Liste mit Spaltennamen.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Erstellt eine Tabelle mit einer anderen Anzahl von Spalten pro Zeile. Der fehlende Zeilenwert ist NULL.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Konvertiert eine Liste in eine Tabelle, indem die angegebene Aufteilungsfunktion auf alle Elemente in der Liste angewendet wird.",
        "Documentation.LongDescription": "Konvertiert eine Liste (<code>list</code>) in eine Tabelle, indem die optionale Aufteilungsfunktion (<code>splitter</code>) auf alle Elemente in der Liste angewendet wird. Standardmäßig wird von einer Liste mit kommagetrennten Textwerten ausgegangen. Optional kann <code>columns</code> die Anzahl von Spalten, eine Liste von Spalten oder ein TableType sein. Optional können auch <code>default</code> und <code>extraValues</code> angegeben werden.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Tabelle aus einer Liste mithilfe des Standardteilers erstellen.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Tabelle aus einer Liste mithilfe eines benutzerdefinierten Splitters erstellen.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Tabelle aus der Liste mithilfe eines Record.FieldValues-Splitters erstellen.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Konvertiert eine Liste mit Datensätzen in eine Tabelle.",
        "Documentation.LongDescription": "Konvertiert \"<code>records</code>\" (eine Liste mit Datensätzen) in eine Tabelle.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Erstellen einer Tabelle aus Datensätzen mithilfe von Datensatz-Feldnamen als Spaltennamen.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Erstellen einer Tabelle mit typisierten Spalten Auswählen der Zahlenspalten.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Erstellt eine Tabelle auf der Grundlage einer Liste mit Zeilenwerten und optionalen Spalten.",
        "Documentation.LongDescription": "Erstellt eine Tabelle auf der Grundlage der Liste \"<code>rows</code>\", in der die einzelnen Elemente der Liste eine interne Liste mit den Spaltenwerten für eine einzelne Zeile bilden. Eine optionale Liste mit Spaltennamen, ein Tabellentyp oder eine Reihe von Spalten kann für \"<code>columns</code>\" angegeben werden.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle mit der Spalte [CustomerID] mit den Werten {1, 2}, der Spalte [Name] mit den Werten {\"Bob\", \"Jim\"} und der Spalte [Phone] mit den Werten {\"123-4567\", \"987-6543\"} zurück.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Gibt eine Tabelle mit der Spalte [CustomerID] mit den Werten {1, 2}, der Spalte [Name] mit den Werten {\"Bob\", \"Jim\"} und der Spalte [Phone] mit den Werten {\"123-4567\", \"987-6543\"} zurück. Dabei ist [CustomerID] ein Zahlentyp, [Name] und [Phone] sind Texttypen.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Erstellt eine Tabelle mit einer Spalte auf der Grundlage der angegebenen Werte.",
        "Documentation.LongDescription": "Erstellt eine Tabelle mit einer Spalte, die den angegebenen Wert oder die angegebene Werteliste (<code>value</code>) enthält. Ein optionaler Datensatzparameter (\"<code>options</code>\") kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: Der Spaltenname, der beim Generieren einer Tabelle aus einer Liste oder einem Skalarwert verwendet wird.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Tabelle auf der Grundlage des Werts 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Erstellt eine Tabelle aus der Liste.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Erstellt eine Tabelle mit einem benutzerdefinierten Spaltennamen auf der Grundlage des Werts 1.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Gibt Informationen zur Partitionierung einer Tabelle zurück.",
        "Documentation.LongDescription": "Gibt Informationen zur Partitionierung einer Tabelle zurück.  Es wird eine Tabelle zurückgegeben, in der jede Spalte einer Partitionsspalte und jede Zeile einer Partition in der ursprünglichen Tabelle entspricht.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Gibt ein Profil der Spalten einer Tabelle zurück.",
        "Documentation.LongDescription": "<p>Gibt ein Profil der Spalten in <code>table</code> zurück.</p>\r\n<p>Für jede Spalte werden die folgenden Informationen zurückgegeben (sofern zutreffend):\r\n<ul>\r\n  <li>Minimum</li>\r\n  <li>Maximum</li>\r\n  <li>Durchschnitt</li>\r\n  <li>Standardabweichung</li>\r\n  <li>Anzahl</li>\r\n  <li>NULL-Anzahl</li>\r\n  <li>Diskrete Anzahl</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Stuft die erste Zeile mit Werten zu den neuen Spaltenüberschriften herauf (z. B. Spaltennamen).",
        "Documentation.LongDescription": "Stuft die erste Zeile mit Werten zu den neuen Spaltenüberschriften (also Spaltennamen) herauf. Alle Zellen der ersten Zeile müssen Text- oder Zahlenwerte enthalten. Standardmäßig werden nur Text- oder Zahlenwerte zu Überschriften heraufgestuft. Gültige Optionen:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: Bei Festlegung auf <code>true</code> werden alle Skalarwerte in der ersten Zeile mithilfe von <code>Culture</code> zu Überschriften heraufgestuft, sofern angegeben (andernfalls wird das Gebietsschema für das Dokument verwendet).\r\n    Für Werte, die nicht in Text konvertiert werden können, wird ein standardmäßiger Spaltenname verwendet.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: Ein Kulturname, der die Kultur für die Daten angibt.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Stuft die erste Zeile mit Werten in der Tabelle höher.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Stuft alle Skalarwerte in der ersten Zeile der Tabelle zu Überschriften herauf.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Gibt eine Tabelle zurück, in der die ersten x Zeilen übersprungen wurden.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, in der die angegebene Anzahl von Zeilen (<code>countOrCondition</code>, beginnend von oben) der Tabelle \"<code>table</code>\" nicht enthalten ist.\r\n    Wie viele Zeilen entfernt werden, hängt vom optionalen Parameter \"<code>countOrCondition</code>\" ab.\r\n    <ul>\r\n    <li> Ohne Angabe von \"<code>countOrCondition</code>\" wird lediglich die erste Zeile entfernt. </li>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Zahl, wird die entsprechende Anzahl von Zeilen (beginnend von oben) entfernt. </li>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Bedingung, werden so lange Zeilen entfernt, die die Bedingung erfüllen, bis eine Zeile die Bedingung nicht erfüllt.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die erste Zeile der Tabelle.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Entfernt die ersten beiden Zeilen der Tabelle.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Entfernt die ersten Zeilen in der Tabelle, die die Bedingung '[CustomerID] <= 2' erfüllen.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Gibt eine Tabelle zurück, aus der die letzen N Zeilen entfernt wurden.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, in der die letzten <code>countOrCondition</code> Zeilen der Tabelle \"<code>table</code>\" nicht enthalten sind.\r\n        Wie viele Zeilen entfernt werden, hängt vom optionalen Parameter \"<code>countOrCondition</code>\" ab.\r\n    <ul>\r\n    <li> Ohne Angabe von \"<code>countOrCondition</code>\" wird lediglich die letzte Zeile entfernt. </li>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Zahl, wird die entsprechende Anzahl von Zeilen (beginnend von unten) entfernt. </li>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Bedingung, werden so lange Zeilen entfernt, die die Bedingung erfüllen, bis eine Zeile die Bedingung nicht erfüllt.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die letzte Zeile der Tabelle.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Entfernt die letzten Zeilen in der Tabelle, die die Bedingung '[CustomerID] > 2' erfüllen.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Gibt eine Tabelle ohne die Zeilen aus der Eingabetabelle zurück, die in mindestens einer der Zellen einen Fehler enthalten. Bei Angabe einer Spaltenliste werden nur die Zellen der angegebenen Spalten auf Fehler geprüft.",
        "Documentation.LongDescription": "Gibt eine Tabelle ohne die Zeilen aus der Eingabetabelle zurück, die in mindestens einer der Zellen einen Fehler enthalten. Bei Angabe einer Spaltenliste werden nur die Zellen der angegebenen Spalten auf Fehler geprüft.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Entfernen des Fehlerwerts aus der ersten Zeile.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Gibt eine Tabelle zurück, deren Zeilen in umgekehrter Reihenfolge sortiert wurden.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, bei der die Zeilen aus der Eingabe \"<code>table</code>\" in umgekehrter Reihenfolge sortiert wurden.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Kehrt die Reihenfolge der Zeilen in der Tabelle um.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Gibt eine Tabelle mit Beschreibungen der Spalten (d. h. das Schema) der angegebenen Tabelle zurück.",
        "Documentation.LongDescription": "<p>Gibt eine Tabelle zurück, welche die Spalten von <code>table</code> beschreibt.</p>\r\n<p>Jede Tabellenzeile beschreibt die Eigenschaften einer Spalte von <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Spaltenname</b></td>\r\n    <td><b>Beschreibung</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Der Name der Spalte.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>Die 0-basierte Position der Spalte <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Der Name des Spaltentyps.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Art</code></td>\r\n    <td>Die Art des Spaltentyps.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>ist nullwertig</code></td>\r\n    <td>Gibt an, ob die Spalte <code>NULL</code> Werte enthalten kann.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Die Zahlenbasis (z. B. Basis 2 oder Basis 10) der Felder <code>NumericPrecision</code> und <code>NumericScale</code>. </td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Die Genauigkeit einer numerischen Spalte, zu der durch <code>NumericPrecisionBase</code> angegebenen Basis. Dies ist die maximale Anzahl von Stellen (einschließlich Dezimalstellen), die durch einen Wert dieses Typs dargestellt werden kann.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Die Dezimalstellen der numerischen Spalte zu der durch <code>NumericPrecisionBase</code> angegebenen Basis. Dies ist die Anzahl von Dezimalstellen eines Werts dieses Typs. Der Wert <code>0</code> gibt eine Spalte ohne Dezimalstellen an. Der Wert <code>null</code> gibt an, dass die Anzahl der Dezimalstellen nicht bekannt ist (weil es sich um einen Gleitkommatyp handelt oder weil sie nicht definiert ist).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Die maximale Anzahl von Dezimalstellen, die im Sekundenanteil eines Datums- oder Uhrzeitwerts unterstützt wird.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Die maximale Anzahl von Zeichen, die in einer Spalte vom Typ <code>text</code> zulässig ist, bzw. die maximale Anzahl von Bytes, die in einer Spalte vom Typ<code>binary</code> zulässig ist.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Gibt an, ob die Spalte eine variable Länge (bis zu <code>MaxLength</code>) oder eine feste Größe hat.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Der Name des Spaltentyps im Typsystem der Quelle (z. B. <code>nvarchar</code> für SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Der Standardausdruck für einen Wert dieser Spalte in der systemeigenen Ausdruckssprache der Quelle (z. B. <code>42</code> or <code>newid()</code> für SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Die Beschreibung der Spalte.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Gibt eine Tabelle zurück, die nur die Zeilen aus der Eingabetabelle enthält, die in mindestens einer der Zellen einen Fehler enthalten. Bei Angabe einer Spaltenliste werden nur die Zellen der angegebenen Spalten auf Fehler geprüft.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die nur die Zeilen aus der Eingabetabelle enthält, die in mindestens einer der Zellen einen Fehler enthalten. Bei Angabe einer Spaltenliste werden nur die Zellen der angegebenen Spalten auf Fehler geprüft.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Auswählen von Namen von Kunden mit Fehlern in ihren Zeilen.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Gibt eine Tabelle zurück, in der die ersten x Zeilen übersprungen wurden.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, in der die angegebene Anzahl von Zeilen (<code>countOrCondition</code>; beginnend von oben) der Tabelle \"<code>table</code>\" nicht enthalten ist.\r\n    Wie viele Zeilen übersprungen werden, hängt vom optionalen Parameter \"<code>countOrCondition</code>\" ab.\r\n    <ul>\r\n    <li> Ohne Angabe von \"<code>countOrCondition</code>\" wird lediglich die erste Zeile übersprungen. </li>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Zahl, wird die entsprechende Anzahl von Zeilen (beginnend von oben) übersprungen. </li>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Bedingung, werden so lange Zeilen übersprungen, die die Bedingung erfüllen, bis eine Zeile die Bedingung nicht erfüllt.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Überspringt die erste Zeile der Tabelle.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Überspringt die ersten beiden Zeilen der Tabelle.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Überspringt die ersten Zeilen in der Tabelle, die die Bedingung \"[Price] > 25\" erfüllen.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Verhindert, dass Downstreamvorgänge für die ursprüngliche Quelle der Daten ausgeführt werden.",
        "Documentation.LongDescription": "Verhindert, dass Downstreamvorgänge für die ursprüngliche Quelle der Daten in <code>table</code> ausgeführt werden.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Ruft Daten aus einer SQL-Tabelle auf eine Weise ab, die verhindert, dass Downstreamvorgänge als Abfrage auf dem SQL Server ausgeführt werden.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Wandelt Spalten in Zeilen und Zeilen in Spalten um.",
        "Documentation.LongDescription": "Wandelt Spalten in Zeilen und Zeilen in Spalten um.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Wandelt die Zeilen der Tabelle mit Name-Wert-Paaren in Spalten um.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Ruft die Beziehungen zwischen einem Satz von Tabellen ab.",
        "Documentation.LongDescription": "Ruft die Beziehungen zwischen einem Satz von Tabellen ab. Es wird davon ausgegangen, dass der Satz \"<code>tables</code>\" eine ähnliche Struktur wie eine Navigationstabelle hat. Die durch <code>dataColumn</code> definierte Spalte enthalt die tatsächlichen Datentabellen.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Gibt eine Tabelle mit SQL-Tabellen und Ansichten aus der Teradata-Datenbank zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit SQL-Tabellen und -Sichten aus der Teradata-Datenbank auf dem Server \"<code>server</code>\" zurück. Der Port kann optional mit dem Server (getrennt durch einen Doppelpunkt) angegeben werden. Der optionale Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = wert1, option2 = wert2...] oder [Query = \"select ...\"] angegeben.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Geben Sie die Anzahl von Monaten ein, für die Twilio-Verlaufsdaten abgerufen werden sollen.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Twilio-Daten zurück."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Gibt eine Tabelle mit einer Beschreibung der Spalten (d. h. das Schema) des angegebenen Tabellentyps zurück.",
        "Documentation.LongDescription": "<p>Gibt eine Tabelle mit einer Beschreibung der Spalten von „<code>tableType</code>“ zurück.</p>\r\n<p>Eine Beschreibung der resultierenden Tabelle finden Sie in der Dokumentation zu <code>Table.Schema</code>.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services-Feed",
        "Documentation.DisplayName": "Azure DevOps Services-Feed",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Hiermit wird eine Tabelle der über Azure DevOps bereitgestellten OData-Feeds zurückgegeben."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Herstellen einer Verbindung mit Viva Insights-Daten",
        "Documentation.LongDescription": "Hiermit werden wöchentliche Metrikdaten und Attributdaten aus Workplace Analytics importiert.",
        "Documentation.Examples": [
          {
            "Description": "Hiermit wird eine Tabelle mit sichtbaren Attributen und wöchentlichen Metrikdaten für jeden erfassten Mitarbeiter in der Partition zurückgegeben.",
            "Code": "VivaInsights.Data(„5f142ea5-c08a-eb02-de68-41dccdefb141“)",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Gibt die Inhalte des HTML-Dokuments (aufgeschlüsselt nach den einzelnen Strukturen) sowie eine Darstellung des vollständigen Dokuments und des zugehörigen Texts nach dem Entfernen der Tags zurück.",
        "Documentation.LongDescription": "Gibt die Inhalte des HTML-Dokuments (aufgeschlüsselt nach den einzelnen Strukturen) sowie eine Darstellung des vollständigen Dokuments und des zugehörigen Texts nach dem Entfernen der Tags zurück.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Gibt eine Tabelle mit Webtrends-Schlüsselmetriken zurück.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Ruft den Webtrends KeyMetrics-Endpunkt auf und gibt alle Daten als Tabelle zurück.",
        "Documentation.Examples": [
          {
            "Description": "Ruft eine Tabelle der Schlüsselmetriken für Mandant 98765 für die letzten 30 Tage ab.",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Eine Tabelle mit Schlüsselmetriken"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Geben Sie die Profil-ID ein, die Ihrem Webtrends-Konto zugeordnet ist.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Webtrends-Daten zurück."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Herstellen einer Verbindung mit Viva Insights-Daten",
        "Documentation.LongDescription": "Hiermit werden wöchentliche Metrikdaten und Attributdaten aus Workplace Analytics importiert.",
        "Documentation.Examples": [
          {
            "Description": "Hiermit wird eine Tabelle mit sichtbaren Attributen und wöchentlichen Metrikdaten für jeden erfassten Mitarbeiter in der Partition zurückgegeben.",
            "Code": "VivaInsights.Data(„5f142ea5-c08a-eb02-de68-41dccdefb141“)",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Gibt den Inhalt des XML-Dokuments als hierarchische Tabelle zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt des XML-Dokuments als hierarchische Tabelle zurück.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Gibt den Inhalt des XML-Dokuments als geschachtelte Auflistung vereinfachter Tabellen zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt des XML-Dokuments als geschachtelte Auflistung vereinfachter Tabellen zurück.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Hiermit rufen Sie den Inhalt einer lokalen XML-Datei ab.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Geben Sie die URL Ihres Zendesk-Kontos ein.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Zendesk-Daten zurück."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Gibt die Schemasammlung für eine ADO.NET-Datenquelle zurück.",
        "Documentation.LongDescription": "Gibt die Schemasammlung für den ADO.NET-Datenquelle mit dem Anbieternamen \"<code>providerName</code>\" und der Verbindungszeichenfolge \"<code>connectionString</code>\" zurück. \"<code>connectionString</code>\" kann Text oder ein Datensatz mit Eigenschaft/Wert-Paaren sein. Eigenschaftswerte können entweder Text oder Zahlen enthalten. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Ein logischer Wert (TRUE/FALSE), der angibt, ob SQL Server-kompatible Verbindungszeichenfolgenoptionen f&#252;r die Windows-Authentifizierung bereitgestellt werden sollen. Der Standardwert lautet TRUE.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Hiermit importieren Sie Daten aus einer Amazon Redshift-Datenbank.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, in der die Tabellen auf dem Amazon Redshift Cluster <code>Server aufgelistet</code> in der Datenbank <code>Datenbank</code> sind.  Ein optionaler Datensatzparameter ( <code>Optionen</code> ) kann angegeben werden, um die folgenden Optionen zu steuern:\r\n<ul>\r\n<li><code>Anbietername</code>: Ein Textwert, der als Anbietername für die Verbindung verwendet werden soll. Wird verwendet, wenn Microsoft Authentication.</li>\r\n<li><code>Batchgröße</code> verwendet wird: die Anzahl von Zeilen, die in einem einzigen Aufruf an den Server abgerufen werden.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Gibt eine Tabelle mit mehrdimensionalen Cubes oder tabellarischen Modellen aus der Analysis Services-Datenbank zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit mehrdimensionalen Cubes oder tabellarischen Modellen aus der Analysis Services-Datenbank \"<code>database</code>\" auf dem Server \"<code>server</code>\" zurück. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>Query</code> : Eine native MDX-Abfrage, die zum Abrufen von Daten verwendet wird.</li>\r\n<li><code>TypedMeasureColumns</code> : Ein logischer Wert, der angibt, ob die im mehrdimensionalen oder tabellarischen Modell angegebenen Typen f&#252;r die Typen der hinzugef&#252;gten Measurespalten verwendet werden. Bei Festlegung auf FALSE wird f&#252;r alle Measurespalten der Typ &quot;number&quot; verwendet. Der Standardwert f&#252;r diese Option lautet FALSE.</li>\r\n<li><code>Culture</code> : Ein Kulturname, der die Kultur f&#252;r die Daten angibt. Dieser Wert entspricht der Eigenschaft &quot;Gebietsschema-ID&quot; der Verbindungszeichenfolge.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>SubQueries</code> : Eine Zahl (0, 1 oder 2), die den Wert der SubQueries-Eigenschaft in der Verbindungszeichenfolge festlegt. Hier&#252;ber wird das Verhalten berechneter Elemente in untergeordneten SELECT-Ausdr&#252;cken oder Teilcubes gesteuert (Standardwert: 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Gibt eine Tabellenauflistung der Tabellen auf dem angegebenen Spark-Cluster zurück.",
        "Documentation.LongDescription": "Gibt eine Tabellenauflistung der Tabellen auf dem angegebenen Spark-Cluster <code>host</code> mithilfe von <code>protocol</code> zurück.  Die folgenden Protokolle sind gültig:\r\nNr. [validProtocols]",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabellenauflistung der Tabellen auf dem angegebenen Spark-Cluster zurück.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Hiermit werden die Organisations- und Projektnamen eingegeben.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (nur Boards)",
        "Documentation.LongDescription": "Gibt eine Tabelle der Analytics-Ansichten zurück, die über Azure DevOps bereitgestellt werden."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Hiermit werden Daten aus HDInsight Interactive Query importiert.",
        "Documentation.LongDescription": "\r\nGibt eine Liste mit Tabellen aus HDInsight Interactive Query aus der Datenbank <code>database</code> auf dem HDInsight Interactive Query-Server <code>server</code> zurück. Der Port kann (getrennt durch einen Doppelpunkt) optional mit dem Server angegeben werden. Der optionale Parameter <code>options</code> kann angegeben werden, um die folgenden Optionen zu steuern:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Eine Zeitspanne, die steuert, wie lange ein Versuch zur Verbindungsherstellung mit dem Server dauern darf, bevor er abgebrochen wird. Der Standardwert ist vom Treiber abhängig.</li>\r\n        <li><code>CommandTimeout</code>: Eine Zeitspanne, die steuert, wie lange die serverseitige Abfrage ausgeführt werden darf, bevor sie abgebrochen wird. Der Standardwert ist vom Treiber abhängig.</li>\r\n</ul>\r\nDer Parameter <code>options</code> wird als [option1 = value1, option2 = value2...] angegeben."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Gibt eine Tabelle mit Spalten zurück, die den Attributen einer Entität im Common Data Model (einschließlich Datentypen) zugeordnet sind.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Gibt eine Tabelle mit Spalten zurück, die den Attributen einer Entität im Common Data Model (einschließlich Datentypen) zugeordnet sind. Spalten aus der Entitätsdefinition werden hinzugefügt, falls sie nicht zugeordnet sind, und alle nicht zugeordneten Spalten werden entfernt.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Gibt einen Cube zurück, nachdem ein Parameter darauf angewendet wurde.",
        "Documentation.LongDescription": "Gibt einen Cube zurück, nachdem '<code>parameter</code>' mit '<code>arguments</code>' auf '<code>cube</code>' angewendet wurde.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Ändert die Dimensionsgranularität des Filterkontexts für den Cube, indem die Ansicht der Attribute, die den angegebenen Spalten zugeordnet sind, reduziert wird.",
        "Documentation.LongDescription": "Ändert die Dimensionsgranularität des Filterkontexts für den Cube '<code>cube</code>', indem die Ansicht der Attribute, die den angegebenen <code>columnNames</code>-Spalten zugeordnet sind, reduziert wird. Die Spalten werden auch aus der tabellarischen Sicht des Cubes entfernt.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Ersetzt den von Cube.Dimensions zurückgegebenen Satz von Dimensionen.",
        "Documentation.LongDescription": "Ersetzt den von <code>Cube.Dimensions</code> zurückgegebenen Dimensionssatz.\r\n    Diese Funktion kann beispielsweise verwendet werden, um einem Dimensionsattribut eine ID-Spalte hinzuzufügen, sodass die Datenquelle anstelle des angezeigten Werts nach der ID gruppiert werden kann.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Wendet eine Liste von Cubefunktionen an.",
        "Documentation.LongDescription": "Wendet die Liste der Cubefunktionen '<code>transforms</code>' auf '<code>cube</code>' an.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Gibt eine Tabelle der SQL-Tabellen und Ansichten zurück, die in einer Db2-Datenbank verfügbar sind.",
        "Documentation.LongDescription": "Gibt eine Tabelle der SQL-Tabellen und -Sichten zurück, die in einer Db2-Datenbank auf dem Server \"<code>server</code>\" in der Datenbankinstanz mit dem Namen \"<code>database</code>\" verfügbar sind. Der Port kann optional mit dem Server (getrennt durch einen Doppelpunkt) angegeben werden. Der optionale Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n<li><code>Implementation</code> : Gibt die zu verwendende Implementierung des internen Datenbankanbieters an. G&#252;ltige Werte: &quot;IBM&quot; und &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Eine Zahl f&#252;r die CCSID (Coded Character Set Identifier, ID f&#252;r codierte Zeichens&#228;tze) zum Decodieren von Db2 FOR BIT-Bin&#228;rdaten in Zeichenfolgen. Gilt f&#252;r &quot;Implementation = &quot;Microsoft&quot;&quot;. Legen Sie &quot;0&quot; fest, um die Konvertierung zu deaktivieren (Standardwert). Legen Sie 1 fest, um basierend auf der Datenbankcodierung zu konvertieren. Legen Sie eine andere CCSID-Zahl fest, um in die Anwendungscodierung zu konvertieren.</li>\r\n<li><code>PackageCollection</code> : Gibt einen Zeichenfolgenwert f&#252;r die Paketsammlung an (Standardwert: &quot;NULLID&quot;), um die Verwendung freigegebener Pakete zu aktivieren, die zum Verarbeiten von SQL-Anweisungen erforderlich sind. Gilt f&#252;r &quot;Implementation = &quot;Microsoft&quot;&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Gibt an, ob die Verbindung &#252;ber ein DB2 Connect-Gateway hergestellt wird. Gilt f&#252;r Implementierung = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = wert1, option2 = wert2...] oder [Query = \"select ...\"] angegeben.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Hiermit wird ein Dataset aus Data.World abgerufen."
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Gibt eine Tabelle mit den Eigenschaften und Inhalten der BLOBs zurück, die in dem von einem Azure-Speichertresor angegebenen Container gefunden wurden.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit je einer Zeile für jede BLOB-Datei unter der Container-URL '<code>account</code>' aus einem Azure-Speichertresor zurück. Jede Zeile enthält Eigenschaften der Datei sowie einen Link zu ihrem Inhalt.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Gibt eine Tabelle zurück, die die Ergebnisse der Ausführung der angegebenen CSS-Selektoren für den bereitgestellten HTML-Code enthält.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit den Ergebnissen der Ausführung der angegebenen CSS-Selektoren für die Bereitstellung von \"<code>html</code>\" zurück. Ein optionaler Datensatzparameter, \"<code>options</code>\", kann zur Angabe zusätzlicher Eigenschaften angegeben werden. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Datenzugriff",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle aus einem HTML-Beispieltextwert zurück.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Hiermit werden alle href-Attribute aus einem HTML-Beispieltextwert extrahiert.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Gibt eine Tabelle der SQL-Tabellen und -Sichten zurück, die in einer Informix-Datenbank verfügbar sind.",
        "Documentation.LongDescription": "Gibt eine Tabelle der SQL-Tabellen und -Sichten zurück, die in einer Informix-Datenbank auf dem Server \"<code>server</code>\" in der Datenbankinstanz mit dem Namen \"<code>database</code>\" verfügbar sind. Der Port kann optional mit dem Server (getrennt durch einen Doppelpunkt) angegeben werden. Der optionale Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = wert1, option2 = wert2...] oder [Query = \"select ...\"] angegeben.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Gibt eine Tabelle mit Leaddetails zurück.",
        "Documentation.LongDescription": "Ruft den Marketo-REST-API-Endpunkt unter <code>url</code>/rest/v1/activities.json auf. Es werden alle Leads in Liste <code>leadIds</code> zurückgegeben.",
        "Documentation.Examples": [
          {
            "Description": "Ruft die Details für drei Leads ab.",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Eine Tabelle mit Details zu den bereitgestellten Leads."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Geben Sie die URL des Marketo-REST-API-Endpunkts ein, der Ihrem Konto zugeordnet ist.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Marketo-Daten zurück."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Gibt eine Tabelle der SQL-Tabellen, Ansichten und gespeicherten Skalarfunktionen zurück, die in einer MySQL-Datenbank verfügbar sind.",
        "Documentation.LongDescription": "Gibt eine Tabelle der SQL-Tabellen, -Sichten und gespeicherten Skalarfunktionen zurück, die in einer MySQL-Datenbank auf dem Server \"<code>server</code>\" in der Datenbankinstanz mit dem Namen \"<code>database</code>\" verfügbar sind. Der Port kann optional mit dem Server (getrennt durch einen Doppelpunkt) angegeben werden. Der optionale Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>Encoding</code> : Ein TextEncoding-Wert, der den Zeichensatz zum Codieren aller an den Server gesendeten Abfragen angibt (der Standardwert ist NULL).</li>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob tinyint-Spalten auf dem Server als logische Werte erzwungen werden. Der Standardwert lautet TRUE.</li>\r\n<li><code>OldGuids</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob char(36)-Spalten (bei FALSE) oder binary(16)-Spalten (bei TRUE) als GUIDs behandelt werden. Der Standardwert lautet FALSE.</li>\r\n<li><code>ReturnSingleDatabase</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob alle Tabellen aus s&#228;mtlichen Datenbanken (bei FALSE) oder Tabellen und Sichten der angegebenen Datenbank (bei TRUE) zur&#252;ckgegeben werden. Der Standardwert lautet FALSE.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = wert1, option2 = wert2...] oder [Query = \"select ...\"] angegeben.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Hiermit werden Daten aus einer IBM Netezza-Datenbank importiert.",
        "Documentation.LongDescription": "\r\nGibt eine Tabelle mit Netezza-Tabellen, -Sichten und gespeicherten Funktionen aus der Netezza-Serverdatenbank <code>database</code> auf dem Server <code>server</code> zurück. Der Port kann (getrennt durch einen Doppelpunkt) optional mit dem Server angegeben werden. Der optionale Datensatzparameter <code>options</code> kann angegeben werden, um die folgenden Optionen zu steuern:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: Ein logischer Wert (TRUE/FALSE), der festlegt, ob für die zurückgegebenen Werte Navigationseigenschaften generiert werden sollen (Standardwert: TRUE).</li>\r\n        <li><code>HierarchicalNavigation</code>: Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n        <li><code>ConnectionTimeout</code>: Eine Dauer, die steuert, wie lange ein Versuch zur Verbindungsherstellung mit dem Server dauern darf, bevor er abgebrochen wird. Der Standardwert ist vom Treiber abhängig.</li>\r\n        <li><code>CommandTimeout</code>: Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgeführt werden darf, bevor sie abgebrochen wird. Der Standardwert ist vom Treiber abhängig.</li>\r\n<li><code>NormalizeDatabaseName</code>: Ein logischer Wert (TRUE/FALSE), der festlegt, ob der Datenbankname in Großbuchstaben normalisiert oder buchstabengetreu interpretiert werden soll (Standardwert: TRUE).</li>\r\n</ul>\r\nDer Datensatzparameter wird als [option1 = wert1, option2 = wert2...] angegeben.",
        "Documentation.Examples": [
          {
            "Description": "Hiermit werden die Tabellen in einem IBM Netezza-Projekt aufgelistet.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Gibt das Ergebnis der Ausführung einer systemeigenen Abfrage für eine ODBC-Datenquelle zurück.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Ausführung von \"<code>query</code>\" mit der Verbindungszeichenfolge \"<code>connectionString</code>\" unter Verwendung von ODBC zurück. \"<code>connectionString</code>\" kann Text oder ein Datensatz mit Eigenschaft/Wert-Paaren sein. Eigenschaftswerte können entweder Text oder Zahlen enthalten. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Ein Zeitraum, der steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist 15 Sekunden.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Ein logischer Wert (TRUE/FALSE), der angibt, ob SQL Server-kompatible Verbindungszeichenfolgenoptionen f&#252;r die Windows-Authentifizierung bereitgestellt werden sollen. Der Standardwert lautet TRUE.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Gibt das Ergebnis einer einfachen Abfrage für die angegebene Verbindungszeichenfolge zurück.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Gibt das Ergebnis der Ausführung einer systemeigenen Abfrage für eine OLE DB-Datenquelle zurück.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Ausführung von \"<code>query</code>\" mit der Verbindungszeichenfolge \"<code>connectionString</code>\" unter Verwendung von OLE DB zurück. \"<code>connectionString</code>\" kann Text oder ein Datensatz mit Eigenschaft/Wert-Paaren sein. Eigenschaftswerte können entweder Text oder Zahlen enthalten. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Ein logischer Wert (TRUE/FALSE), der angibt, ob SQL Server-kompatible Verbindungszeichenfolgenoptionen f&#252;r die Windows-Authentifizierung bereitgestellt werden sollen. Der Standardwert lautet TRUE.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Gibt eine Tabelle der SQL-Tabellen und Ansichten zurück, die in einer PostgreSQL-Datenbank verfügbar sind.",
        "Documentation.LongDescription": "Gibt eine Tabelle der SQL-Tabellen und -Sichten zurück, die in einer PostgreSQL-Datenbank auf dem Server \"<code>server</code>\" in der Datenbankinstanz mit dem Namen \"<code>database</code>\" verfügbar sind. Der Port kann optional mit dem Server (getrennt durch einen Doppelpunkt) angegeben werden. Der optionale Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = wert1, option2 = wert2...] oder [Query = \"select ...\"] angegeben.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Importieren Sie Daten aus einem Snowflake Computing-Warehouse.",
        "Documentation.LongDescription": "Hiermit wird eine Tabelle zurückgegeben, in der die Tabellen im Snowflake Computing-<code>Warehouse</code> auf \"<code>server</code>\" aufgeführt werden. Der optionale Datensatzparameter <code>options</code> kann angegeben werden, um die folgenden Optionen zu steuern:\r\n<ul>\r\n<li><code>Role</code>: Ein Textwert, der als Rollenname für die Verbindung verwendet werden soll.</li>\r\n<li><code>CreateNavigationProperties</code>: Ein logischer Wert (TRUE/FALSE), der festlegt, ob für die zurückgegebenen Werte Navigationseigenschaften generiert werden sollen (Standardwert: TRUE).</li>\r\n<li><code>ConnectionTimeout</code>: Die Anzahl von Sekunden, die auf Netzwerkantworten von Snowflake gewartet wird.</li>\r\n<li><code>CommandTimeout</code>: Die Anzahl von Sekunden, die auf die Ausführung einer Abfrage gewartet wird.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Listen Sie die Tabellen in einem Snowflake-Warehouse auf.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Gibt eine Tabellenauflistung der Tabellen auf dem angegebenen Spark-Cluster zurück.",
        "Documentation.LongDescription": "Gibt eine Tabellenauflistung der Tabellen auf dem angegebenen Spark-Cluster <code>host</code> mithilfe von <code>protocol</code> zurück.  Die folgenden Protokolle sind gültig:\r\nNr. [validProtocols]",
        "Documentation.Examples": [
          {
            "Description": "Liste der Tabellen in einer Azure Spark-Instanz.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Gibt eine Tabelle mit SQL-Tabellen, Ansichten und gespeicherten Funktionen aus der SQL Server-Datenbank zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit SQL-Tabellen, -Sichten und gespeicherten Funktionen aus der SQL Server-Datenbank \"<code>database</code>\" auf dem Server \"<code>server</code>\" zurück. Der Port kann optional mit dem Server (getrennt durch einen Doppelpunkt oder ein Komma) angegeben werden. Der optionale Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Eine Zahl, die den Wert der maxdop-Abfrageklausel in der generierten SQL-Abfrage festlegt.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n<li><code>MultiSubnetFailover</code> : Ein logischer Wert (TRUE/FALSE), der den Wert der Eigenschaft &quot;MultiSubnetFailover&quot; in der Verbindungszeichenfolge festlegt (Standardwert: FALSE).</li>\r\n<li><code>UnsafeTypeConversions</code> : Ein logischer Wert (TRUE/FALSE), der bei Festlegung auf TRUE versucht, Typkonvertierungen zu falten. Ein fehlerhafter Versuch kann dazu f&#252;hren, dass die gesamte Abfrage nicht erfolgreich ausgef&#252;hrt werden kann. Nicht f&#252;r die allgemeine Verwendung empfohlen.</li>\r\n<li><code>ContextInfo</code> : Ein Bin&#228;rwert, der verwendet wird, um vor dem Ausf&#252;hren der einzelnen Befehle die CONTEXT_INFO festzulegen.</li>\r\n<li><code>OmitSRID</code> : Ein logischer Wert (TRUE/FALSE), der bei Festlegung auf TRUE die SRID ausl&#228;sst, wenn Well-Known Text aus Geometrie- und Geografietypen generiert wird.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Ein logischer Wert (wahr/falsch), der bei WAHR das Query Folding von Datenbanken auf demselben Server zul&#228;sst. Der Standardwert ist FALSCH.</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = wert1, option2 = wert2...] oder [Query = \"select ...\"] angegeben.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Gibt eine Tabelle der SQL-Tabellen und Sichten zurück, die in einer Sybase-Datenbank verfügbar sind.",
        "Documentation.LongDescription": "Gibt eine Tabelle der SQL-Tabellen und -Sichten zurück, die in einer Sybase-Datenbank auf dem Server \"<code>server</code>\" in der Datenbankinstanz mit dem Namen \"<code>database</code>\" verfügbar sind. Der Port kann optional mit dem Server (getrennt durch einen Doppelpunkt) angegeben werden. Der optionale Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden (Standardwert: TRUE).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Eine Funktion, die zur Erstellung von Namen f&#252;r Navigationseigenschaften verwendet wird.</li>\r\n<li><code>Query</code> : Eine native SQL-Abfrage, die zum Abrufen von Daten verwendet wird. Wenn die Abfrage mehrere Resultsets erzeugt, wird nur das erste zur&#252;ckgegeben.</li>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>ConnectionTimeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor ein Versuch zur Verbindungsherstellung mit dem Server abgebrochen wird. Der Standardwert ist treiberabh&#228;ngig.</li>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n</ul>\r\n\r\n    Der Datensatzparameter wird beispielsweise als [option1 = wert1, option2 = wert2...] oder [Query = \"select ...\"] angegeben.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Fügt eine Spalte mit expliziten Positionswerten an.",
        "Documentation.LongDescription": "Fügt \"<code>table</code>\" eine Spalte namens \"<code>newColumnName</code>\" mit expliziten Positionswerten an.\r\n    Der Ausgangsindex kann mithilfe des optionalen Werts \"<code>initialValue</code>\" angegeben werden. Die gewünschte Schrittweite für die einzelnen Indexwerte kann mithilfe des optionalen Werts \"<code>increment</code>\" angegeben werden.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Fügt der Tabelle eine Indexspalte namens \"Index\" hinzu.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Fügt der Tabelle eine Indexspalte namens \"index\" hinzu, die bei 10 beginnt und um 5 inkrementiert wird.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Erstellt auf der Grundlage einer Spalte mit Listen in einer Tabelle je eine Zeilenkopie für die einzelnen Werte in der Liste.",
        "Documentation.LongDescription": "Teilt die Liste auf der Grundlage eines Elements vom Typ \"<code>table</code>\" (wobei \"<code>column</code>\" eine Liste mit Werten ist) in jeweils eine Zeile pro Wert auf. Die Werte in den anderen Spalten werden in jeder neu erstellten Zeile dupliziert.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Teilt die Listenspalte \"[Name]\" in der Tabelle auf.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Verteilt den Wert einer vorherigen Zelle auf die darunter liegenden Zellen mit NULL-Wert in der Spalte.",
        "Documentation.LongDescription": "Gibt eine Tabelle auf der Grundlage des angegebenen Elements vom Typ '<code>table</code>' zurück, wobei der Wert einer vorherigen Zelle an die darunter liegenden Zellen mit NULL-Wert im angegebenen Element vom Typ '<code>columns</code>' weitergegeben wird.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle zurück, in der die NULL-Werte in der Spalte \"[Place]\" mit dem Wert darüber aus der Tabelle aufgefüllt wurden.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Gibt den Wert einer Zelle an die darüber liegenden Zellen mit NULL-Wert in der Spalte weiter.",
        "Documentation.LongDescription": "Gibt eine Tabelle auf der Grundlage des angegebenen Elements vom Typ '<code>table</code>' zurück, wobei der Wert der nächsten Zelle an die darüber liegenden Zellen mit NULL-Wert im angegebenen Element vom Typ '<code>columns</code>' weitergegeben wird.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle zurück, in der die NULL-Werte in der Spalte '[Column2]' mit dem unter ihnen liegenden Wert aus der Tabelle aufgefüllt wurden.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Gibt alle Zeilen zurück, die den angegebenen Text in der Tabelle enthalten.",
        "Documentation.LongDescription": "Gibt die Zeilen der Tabelle \"<code>table</code>\" zurück, die den Text \"<code>text</code>\" enthalten. Wird der Text nicht gefunden, wird eine leere Tabelle zurückgegeben.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Zeilen in der Tabelle, die \"Bob\" enthalten.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Gibt die ersten x Zeilen zurück.",
        "Documentation.LongDescription": "Gibt abhängig vom <code>countOrCondition</code>-Wert die erste(n) Zeile(n) aus der Tabelle '<code>table</code>' zurück:\r\n    <ul>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Zahl, wird die entsprechende Anzahl von Zeilen (beginnend von oben) zurückgegeben. </li>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Bedingung, werden so lange Zeilen zurückgegeben, die die Bedingung erfüllen, bis eine Zeile die Bedingung nicht erfüllt.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die ersten beiden Zeilen der Tabelle.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Ermittelt die ersten Zeilen in der Tabelle, die die Bedingung \"[a] > 0\" erfüllen.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Gibt eine Tabelle zurück, die durch Kombinieren einer Gruppe partitionierter Tabellen entstanden ist.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, die das Ergebnis der Kombination eines Satzes partitionierter Tabellen <code>partitions</code> ist. <code>partitionColumn</code> ist der Name der Spalte, die hinzugefügt werden soll. Der Typ der Spalte ist standardmäßig <code>any</code>, kann jedoch von <code>partitionColumnType</code> angegeben werden.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie einen Elementtyp in der Liste <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Gibt die angegebene Anzahl der letzten Zeilen zurück.",
        "Documentation.LongDescription": "Gibt abhängig vom <code>countOrCondition</code>-Wert die letzte(n) Zeile(n) aus der Tabelle '<code>table</code>' zurück:\r\n    <ul>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Zahl, wird die entsprechende Anzahl von Zeilen ab der Position \"(end - <code>countOrCondition</code>)\" zurückgegeben. </li>\r\n    <li> Ist \"<code>countOrCondition</code>\" eine Bedingung, werden in aufsteigender Richtung so lange Zeilen zurückgegeben, die die Bedingung erfüllen, bis eine Zeile die Bedingung nicht erfüllt.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die letzten beiden Zeilen der Tabelle.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Ermittelt die letzten Zeilen in der Tabelle, die die Bedingung \"[0] > a\" erfüllen.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Gibt eine Tabelle zurück, in der allen Spalten der angegebene Text als Präfix vorangestellt wurde.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, in der allen Spaltennamen aus dem angegebenen Element vom Typ \"<code>table</code>\" der angegebene Text (<code>prefix</code>) einschließlich eines Punkts als Präfix vorangestellt wurde: \"<code>prefix</code><code>.Spaltenname</code>\".",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Stellt den Spalten in der Tabelle das Präfix \"MyTable\" voran.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Gibt die Zeilen ab dem angegebenen Offset zurück.",
        "Documentation.LongDescription": "Gibt die Zeilen aus dem Element vom Typ \"<code>table</code>\" ab dem angegebenen Wert (<code>offset</code>) zurück. Die Anzahl der zurückzugebenden Zeilen kann mit dem optionalen Parameter \"<code>count</code>\" angegeben werden. Standardmäßig werden alle Zeilen nach dem Offset zurückgegeben.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Gibt alle Zeilen ab dem Offset 1 aus der Tabelle zurück.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Gibt eine Zeile ab dem Offset 1 aus der Tabelle zurück.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Entfernt die angegebenen Spalten.",
        "Documentation.LongDescription": "Entfernt das angegebene <code>columns</code> aus dem angegebenen <code>table</code>.\r\n    Wenn die angegebene Spalte nicht existiert, wird ein Fehler ausgelöst, es sei denn, der optionale Parameter <code>missingField</code> gibt ein alternatives Verhalten an (zum Beispiel, <code>MissingField.UseNull</code> oder <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die Spalte \"[Phone]\" aus der Tabelle.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Versuchen Sie, eine nicht vorhandene Spalte aus der Tabelle zu entfernen.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Entfernt alle Vorkommen der angegebenen Zeilen aus der Tabelle.",
        "Documentation.LongDescription": "Entfernt alle Vorkommen des angegebenen Elements vom Typ \"<code>rows</code>\" aus \"<code>table</code>\".\r\n    Der Vergleich zwischen den Zeilen der Tabelle kann mithilfe eines optionalen Parameters (<code>equationCriteria</code>) gesteuert werden.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Entfernt sämtliche Zeilen mit \"[a = 1]\" aus der Tabelle <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Entfernt die angegebene Anzahl von Zeilen.",
        "Documentation.LongDescription": "Entfernt <code>count</code> Zeilen vom Anfang des Elements vom Typ \"<code>table</code>\" ab dem angegebenen Wert (<code>offset</code>). Ohne Angabe des Parameters \"<code>count</code>\" wird als Standardanzahl der Wert 1 verwendet. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die erste Zeile aus der Tabelle.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Entfernt die Zeile an der Position 1 aus der Tabelle.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Entfernt zwei Zeilen ab der Position 1 aus der Tabelle.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Wendet Umbenennungen im Format \"{old, new}\" an.",
        "Documentation.LongDescription": "Nimmt die angegebenen Umbenennungen der Spalten in der Tabelle \"<code>table</code>\" vor. Ein Ersetzungsvorgang (<code>renames</code>) besteht aus einer Liste mit zwei Werten (alter und neuer Spaltenname), die in einer Liste bereitgestellt wird.\r\n    Ist die Spalte nicht vorhanden, wird eine Ausnahme ausgelöst, sofern nicht mithilfe des optionalen Parameters \"<code>missingField</code>\" eine Alternative angegeben wurde (beispielsweise <code>MissingField.UseNull</code> oder <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt den Spaltennamen \"CustomerNum\" in der Tabelle durch \"CustomerID\".",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Ersetzt den Spaltennamen \"CustomerNum\" in der Tabelle durch \"CustomerID\" und \"PhoneNum\" durch \"Phone\".",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Ersetzt den Spaltennamen \"NewCol\" in der Tabelle durch \"NewColumn\". Wenn die Spalte nicht vorhanden ist, wird der Vorgang ignoriert.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Gibt eine Tabelle mit den Spalten in der angegebenen Reihenfolge zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle auf der Grundlage der Eingabe '<code>table</code>' zurück, deren Spalten in der mithilfe von '<code>columnOrder</code>' angegebenen Reihenfolge sortiert sind. Spalten, die in der Liste nicht angegeben sind, werden nicht neu sortiert.\r\n     Wenn die Spalte nicht vorhanden ist, wird eine Ausnahme ausgelöst, sofern nicht mithilfe des optionalen Parameters '<code>missingField</code>' eine Alternative angegeben wurde (beispielsweise <code>MissingField.UseNull</code> oder <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vertauscht die Reihenfolge der Spalten \"[Phone]\" und \"[Name]\" in der Tabelle.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Vertauscht die Reihenfolge der Spalten \"[Phone]\" und \"[Address]\" oder verwendet \"MissingField.Ignore\" in der Tabelle. Die Tabelle wird nicht geändert, weil die Spalte \"[Address]\" nicht vorhanden ist.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Wiederholt die Zeilen der Tabellen so oft wie angegeben.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, für deren Zeilen aus der Eingabe \"<code>table</code>\" die angegebene Anzahl (<code>count</code>) von Wiederholungen erstellt wurde.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Wiederholt die Zeilen in der Tabelle zwei Mal.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Ersetzt die Fehlerwerte in den angegebenen Spalten durch den entsprechenden angegebenen Wert.",
        "Documentation.LongDescription": "Ersetzt die Fehlerwerte in den angegebenen Spalten von <code>table</code> durch die neuen Werte in der Liste <code>errorReplacement</code>. Das Format der Liste ist {{column1, value1}, …}. Es darf pro Spalte nur einen Ersatzwert geben. Wenn die Spalte mehrmals angegeben wird, führt dies zu einem Fehler.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt den Fehlerwert durch das Wort \"world\" in der Tabelle.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Ersetzt den Fehlerwert in der Spalte \"A\" durch den Text \"hello\" und in Spalte \"B\" durch den Text \"world\" in der Tabelle.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Ersetzt die Schlüssel der angegebenen Tabelle.",
        "Documentation.LongDescription": "Ersetzt die Schlüssel der angegebenen Tabelle.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ersetzen Sie die vorhandenen Schlüssel einer Tabelle.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Ersetzt alle angegebenen Zeilen durch die bereitgestellten Zeilen.",
        "Documentation.LongDescription": "Ersetzt alle angegebenen Zeilen im Element vom Typ \"<code>table</code>\" durch die bereitgestellten Zeilen. Die zu ersetzenden Zeilen und die Ersetzungen werden in \"<code>replacements</code>\" im Format \"{old, new}\" angegeben.\r\n    Der Vergleich zwischen den Zeilen der Tabelle kann mithilfe eines optionalen Parameters (<code>equationCriteria</code>) gesteuert werden.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt die Zeilen [a = 1, b = 2] und [a = 2, b = 3] durch [a = -1, b = -2],[a = -2, b = -3] in der Tabelle.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Gibt eine Tabelle zurück, die nur die angegebenen Spalten enthält.",
        "Documentation.LongDescription": "Gibt die <code>table</code> nur mit der angegebenen <code>columns</code> zurück.\r\n    <ul>\r\n       <li><code>table</code>: Die angegebene Tabelle.</li>\r\n       <li><code>columns</code>: Die Liste der Spalten aus der Tabelle <code>table</code>, die zurückgegeben werden. Spalten in der zurückgegebenen Tabelle befinden sich in der Reihenfolge, die in <code>columns</code> aufgeführt ist.</li>\r\n       <li><code>missingField</code>: <i>(Optional)</i> Vorgehensweise, wenn die Spalte nicht vorhanden ist.  Beispiele: <code>MissingField.UseNull</code> oder <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Einschließen nur der Spalte \"[Name]\".",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Einschließen nur der Spalten \"[CustomerID]\" und \"[Name]\".",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Wenn die eingeschlossene Spalte nicht existiert, ist das Standardergebnis ein Fehler.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Wenn die eingeschlossene Spalte nicht vorhanden ist, erstellt die Option <code>MissingField.UseNull</code> eine Spalte mit NULL-Werten.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Wählt die Zeilen aus, die die Bedingungsfunktion erfüllen.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit Zeilen aus dem Element vom Typ \"<code>table</code>\" zurück, das der Auswahl \"<code>condition</code>\" entspricht.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Auswählen der Zeilen in der Tabelle, in denen die Werte in der Spalte \"[CustomerID] \" größer als 2 sind.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Auswählen der Zeilen in der Tabelle, in denen die Namen keinen Buchstaben \"B\" enthalten.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Sortiert die Tabelle unter Verwendung von Spaltennamen und Vergleichskriterien.",
        "Documentation.LongDescription": "Sortiert das Element vom Typ \"<code>table</code>\" unter Verwendung der Liste mit mindestens einem Spaltennamen und \"<code>comparisonCriteria</code>\" (optional) im Format \"{ { col1, comparisonCriteria }, {col2} }\".",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Sortiert die Tabelle anhand der Spalte \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Sortiert die Tabelle anhand der Spalte \"OrderID\" in absteigender Reihenfolge.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Sortiert die Tabelle zunächst anhand der Spalte \"CustomerID\" und dann anhand der Spalte \"OrderID\" (dabei gilt für \"CustomerID\" die absteigende Reihenfolge).",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transformiert Spaltennamen unter Verwendung der angegebenen Funktion.",
        "Documentation.LongDescription": "Transformiert Spaltennamen mithilfe der angegebenen <code>nameGenerator</code>-Funktion. Gültige Optionen:\r\n    <div>\r\n      <code>MaxLength</code> gibt die maximale Länge neuer Spaltennamen an. Wenn die angegebene Funktion in einem längeren Spaltennamen resultiert, wird der lange Name gekürzt.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> (Vergleichsfunktion) wird verwendet, um den Vergleich beim Generieren neuer Spaltennamen zu steuern. Vergleichsfunktionen können verwendet werden, um Vergleiche ohne Berücksichtigung der Groß-/Kleinschreibung oder mit Berücksichtigung von Kultur und Gebietsschema bereitzustellen.\r\n    </div>\r\n    <div>\r\n      Die folgenden integrierten Vergleichsfunktionen sind in der Formelsprache verfügbar:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: Wird verwendet, um einen exakten Ordinalvergleich durchzuführen</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: Wird verwendet, um einen exakten Ordinalvergleich ohne Berücksichtigung der Groß-/Kleinschreibung durchzuführen</li>\r\n      <li> <code>Comparer.FromCulture</code>: Wird verwendet, um einen Vergleich mit Berücksichtigung der Kultur durchzuführen</li>\r\n    </ul>\r \n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Entfernen Sie das <code>#(tab)</code>-Zeichen aus Spaltennamen.",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Transformiert Spaltennamen, um Namen ohne Berücksichtigung von Groß-/Kleinschreibung der Länge 6 zu generieren.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Wendet Typtransformationen im Format \"{ column, type }\" unter Verwendung einer bestimmten Kultur an.",
        "Documentation.LongDescription": "Gibt eine Tabelle auf der Grundlage der Eingabe \"<code>table</code>\" zurück, indem der Transformationsvorgang unter Verwendung der im optionalen Parameter \"<code>typeTransformations</code>\" angegebenen Kultur auf die im Parameter \"<code>culture</code>\" (im Format \"{ column name, type name}\") angegebenen Spalten angewendet wird (Beispiel: \"de-DE\").\r\n    Ist die Spalte nicht vorhanden, wird eine Ausnahme ausgelöst.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformiert die numerischen Werte in Spalte \"[a]\" in Textwerte aus der Tabelle <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Transformiert die Werte einer oder mehrerer Spalten.",
        "Documentation.LongDescription": "Transformiert <code>table</code> durch Anwenden jedes spaltenbasierten Vorgangs, der in <code>transformOperations</code> aufgeführt ist (wobei das Format { column name, transformation } oder { column name, transformation, new column type } ist).\r\n Wenn eine <code>defaultTransformation</code> angegeben ist, wird sie auf alle Spalten angewendet, die nicht in <code>transformOperations</code> aufgeführt sind.\r\n Wenn keine Spalte in <code>transformOperations</code> vorhanden ist, wird eine Ausnahme ausgelöst, es sei denn, der optionale Parameter <code>missingField</code> gibt eine Alternative an (z. B. <code>MissingField.UseNull</code> oder <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Konvertieren Sie die Textwerte in Spalte [A] in Zahlenwerte und die Zahlenwerte in Spalte [B] in Textwerte.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Konvertieren Sie die numerischen Werte in der fehlenden Spalte [X] in Textwerte. Dabei werden Spalten ignoriert, die nicht vorhanden sind.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Konvertieren Sie die numerischen Werte in der fehlenden Spalte [X] in Textwerte mit dem Standardwert NULL für Spalten, die nicht vorhanden sind.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Erhöhen Sie die Zahlenwerte in Spalte [B], konvertieren Sie sie in Textwerte, und konvertieren Sie alle anderen Spalten in Zahlen.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Erstellt oder erweitert eine Tabelle mit benutzerdefinierten Handlern für Abfrage- und Aktionsvorgänge.",
        "Documentation.LongDescription": "<p>Gibt eine Ansicht von <code>table</code> zurück. Dabei werden die in <code>handlers</code> angegebenen Funktionen anstelle des Standardverhaltens eines Vorgangs verwendet, wenn der Vorgang auf die Ansicht angewendet wird.</p>\r\n<p>Wenn <code>table</code> angegeben ist, sind alle Handlerfunktionen optional. Wenn <code>table</code> nicht angegeben ist, sind die <code>GetType</code> and <code>GetRows</code> Handlerfunktionen erforderlich. Wenn eine Handlerfunktion für einen Vorgang nicht angegeben wird, wird stattdessen das Standardverhalten des Vorgangs auf <code>table</code> angewendet (mit Ausnahme von <code>GetExpression</code>). </p>\r\n<p>Handlerfunktionen müssen einen Wert zurückgeben, der semantisch dem Ergebnis der Anwendung des Vorgangs auf <code>table</code> (oder im Fall von <code>GetExpression</code> der sich ergebenden Ansicht) entspricht.</p>\r\n<p>Wenn eine Handlerfunktion einen Fehler auslöst, wird das Standardverhalten des Vorgangs auf die Ansicht angewendet.</p>\r\n<p><code>Table.View</code> kann zum Implementieren der Codefaltung für eine Datenquelle angewendet werden – die Übersetzung von M-Abfragen in quellspezifische Abfragen (z. B. zum Erstellen einer T-SQL-Anweisung aus M-Abfragen).</p>\r\n<p>Eine umfassendere Beschreibung von <code>Table.View</code> finden Sie in der veröffentlichten Dokumentation.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Erstellen Sie eine einfache Ansicht, für die kein Zugriff auf die Zeilen erforderlich ist, um den Typ oder die Zeilenanzahl zu bestimmen.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Hiermit werden die Organisations- und Projektnamen eingegeben.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (nur Boards)",
        "Documentation.LongDescription": "Gibt eine Tabelle der Analytics-Ansichten zurück, die über Azure DevOps bereitgestellt werden."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Hiermit importieren Sie Daten aus Vertica.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit Schemas zurück, die auf dem durch den Parameter <code>server</code> angegebenen Server in der durch den Parameter <code>database</code> angegebenen Datenbank verfügbar sind.\r\nEin optionaler Datensatzparameter <code>options</code> kann bereitgestellt werden, um weitere Eigenschaften anzugeben. Der Datensatz kann die folgenden Felder enthalten:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: eine Dauer zum Steuern der Wartezeit, nach der ein Versuch zur Verbindungsherstellung mit dem Server aufgegeben wird. Der Standardwert ist treiberabhängig.</li>\r\n    <li><code>CommandTimeout</code>: eine Dauer zum Steuern der zulässigen Ausführungszeit einer serverseitigen Abfrage, nach der die Abfrage abgebrochen wird. Der Standardwert ist treiberabhängig.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Tabellen in Vertica auflisten"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Gibt eine Tabelle mit Berichtsinhalten aus Webtrends zurück.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Ruft den angegebenen Endpunkt für die Webtrends-Berichterstellung auf, und gibt alle Daten als Tabelle zurück.",
        "Documentation.Examples": [
          {
            "Description": "Ruft die Daten der letzten 30 Tage vom Endpunkt für Webtrends-Besucherberichte ab.",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Eine Tabelle mit Besucherdaten"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Gibt den veröffentlichten Inhalt VisualQuery (vqr), Berichte oder Funktionen der HR-Software von Zucchetti zurück",
        "Documentation.Examples": [
          {
            "Description": "Anforderung der Mitarbeiterliste",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Gibt eine Liste von Active Directory-Domänen, die sich in derselben Gesamtstruktur wie die angegebene Domäne befinden, oder die Domäne des aktuellen Computers zurück, wenn keine Domäne angegeben ist.",
        "Documentation.LongDescription": "Gibt eine Liste von Active Directory-Domänen, die sich in derselben Gesamtstruktur wie die angegebene Domäne befinden, oder die Domäne des aktuellen Computers zurück, wenn keine Domäne angegeben ist.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Gibt das Ergebnis der Ausführung einer systemeigenen Abfrage für eine ADO.NET-Datenquelle zurück.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Ausführung von \"<code>query</code>\" mit der Verbindungszeichenfolge \"<code>connectionString</code>\" unter Verwendung des ADO.NET-Anbieters \"<code>providerName</code>\" zurück. Bei \"<code>connectionString</code>\" kann es sich um Text oder Eigenschaft/Wert-Paaren sein. Eigenschaftswerte können entweder Text oder Zahlen enthalten. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgef&#252;hrt werden darf, bevor sie abgebrochen wird. Der Standardwert betr&#228;gt zehn Minuten.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Ein logischer Wert (TRUE/FALSE), der angibt, ob SQL Server-kompatible Verbindungszeichenfolgenoptionen f&#252;r die Windows-Authentifizierung bereitgestellt werden sollen. Der Standardwert lautet TRUE.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Gibt die Report Suites in Adobe Analytics zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit mehrdimensionalen Paketen aus Adobe Analytics zurück. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob die Tabellen nach ihren Schemanamen gruppiert angezeigt werden (Standardwert: FALSE).</li>\r\n<li><code>MaxRetryCount</code> : Die Anzahl der Wiederholungsversuche, die beim Abrufen des Abfrageergebnisses ausgef&#252;hrt werden. Der Standardwert ist 120.</li>\r\n<li><code>RetryInterval</code> : Die Zeitdauer zwischen Wiederholungsversuchen. Der Standardwert ist 1 Sekunde.</li>\r\n<li><code>Implementation</code> : Gibt die Adobe Analytics-API-Version an. G&#252;ltige Werte sind: „2.0“. Standardm&#228;&#223;ig wird API-Version 1.4 verwendet.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Hiermit werden Daten aus Hive LLAP importiert.",
        "Documentation.LongDescription": "\r\nGibt eine Liste mit Tabellen aus Hive LLAP aus der Datenbank <code>database</code> auf dem Hive LLAP-Server <code>server</code> unter Verwendung des ausgewählten Protokolls <code>protocol</code> zurück. Der Port kann (getrennt durch einen Doppelpunkt) optional mit dem Server angegeben werden. Das Thrift-Transportprotokoll ist ein Aufzählungstyp mit den Werten \"Standard\" und \"HTTP\". Der optionale Parameter <code>options</code> kann angegeben werden, um die folgenden Optionen zu steuern:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Eine Zeitspanne, die steuert, wie lange ein Versuch zur Verbindungsherstellung mit dem Server dauern darf, bevor er abgebrochen wird. Der Standardwert ist vom Treiber abhängig.</li>\r\n        <li><code>CommandTimeout</code>: Eine Zeitspanne, die steuert, wie lange die serverseitige Abfrage ausgeführt werden darf, bevor sie abgebrochen wird. Der Standardwert ist vom Treiber abhängig.</li>\r\n</ul>\r\nDer Parameter <code>options</code> wird als [option1 = value1, option2 = value2...] angegeben."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Wenn heute der 15. Juni 2017 ist, dann werden zusammenfassende Daten für den Zeitraum zwischen dem 1. Mai 2017 und dem 15. Juni 2017 abgerufen.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Die Funktion gibt zusammenfassende Daten für den Zeitraum zwischen dem 1. Mai 2017 und dem 15. Juni 2017 zurück."
          },
          {
            "Description": "Wenn heute der 15. Juni 2017 ist, dann werden zusammenfassende Daten für April 2017 abgerufen.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Die Funktion gibt Daten für den Zeitraum zwischen dem 1. April 2017 und dem 30. April 2017 zurück."
          },
          {
            "Description": "Wenn heute der 15. Juni 2017 ist, dann werden zusammenfassende Daten für den Zeitraum von April 2017 bis heute abgerufen.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Die Funktion gibt Daten für den Zeitraum zwischen dem 1. April 2017 und dem 15. Juni 2017 zurück."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Hiermit werden die Organisations- und Projektnamen eingegeben.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Hiermit wird eine Tabelle der über Azure DevOps bereitgestellten OData-Feeds zurückgegeben."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Hiermit stellen Sie eine Verbindung mit Ihrer Dataverse-Instanz her (Dynamics 365 und PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Führt die angegebene Dimensionstabelle mit dem Filterkontext des Cubes zusammen und ändert die Dimensionsgranularität des Filterkontexts, indem der angegebene Satz von Dimensionsattributen erweitert wird.",
        "Documentation.LongDescription": "Führt die angegebene Dimensionstabelle '<code>dimensionSelector</code>' mit dem Filterkontext des Cubes '<code>cube</code>' zusammen und ändert die Dimensionsgranularität, indem der angegebene Satz '<code>attributeNames</code>' von Dimensionsattributen erweitert wird. Die Dimensionsattribute werden der tabellarischen Sicht mit dem Spaltennamen '<code>newColumnNames</code>' oder '<code>attributeNames</code>' hinzugefügt, falls keine angegeben wurde.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Fügt dem Cube, der die Ergebnisse des Measures enthält, das im Zeilenkontext jeder einzelnen Zeile angewendet wurde, eine Spalte hinzu.",
        "Documentation.LongDescription": "Fügt dem '<code>cube</code>', der die Ergebnisse des Measures '<code>measureSelector</code>' enthält, das im Zeilenkontext jeder einzelnen Zeile angewendet wurde, eine Spalte mit dem Namen '<code>column</code>' hinzu. Änderungen in Bezug auf die Dimensionsgranularität und die Slices wirken sich auf die Anwendung von Measures aus. Measurewerte werden angepasst, nachdem bestimmte Cubevorgänge ausgeführt wurden.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Geben Sie Ihre Dynamics 365 Business Central-Umgebung und Ihr Unternehmen ein.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Dynamics 365 Business Central-Daten zurück. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Geben Sie Ihre Dynamics 365 Business Central-Umgebung und Ihr Unternehmen ein.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Dynamics 365 Business Central-Daten zurück. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Geben Sie Ihre Dynamics 365 Business Central-Umgebung und Ihr Unternehmen ein.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Dynamics 365 Business Central-Daten zurück. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Geben Sie Ihre Dynamics 365 Business Central-Umgebung und Ihr Unternehmen ein.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Gibt eine Tabelle mit relevanten Dynamics 365 Business Central-Daten zurück. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Gibt den Inhalt der aktuellen Excel-Arbeitsmappe zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt der aktuellen Excel-Arbeitsmappe zurück. Gibt Tabellen, benannte Bereiche und dynamische Arrays zurück. Im Gegensatz zu <code>Excel.Workbook</code>, werden keine Blätter zurückgegeben.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Gibt eine Tabelle der Inhalte aus einem Microsoft Exchange-Konto zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle der Inhalte aus einem Microsoft Exchange-Konto '<code>mailboxAddress</code>' zurück. Wenn '<code>mailboxAddress</code>' nicht angegeben ist, wird das Standardkonto für die Anmeldeinformationen verwendet.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Warehouse",
        "Documentation.Caption": "Warehouse",
        "Documentation.Description": "Importiert Daten aus Warehouse",
        "Documentation.LongDescription": "Importiert Daten aus Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Gibt Google Analytics-Konten zurück.",
        "Documentation.LongDescription": "Gibt Google Analytics-Konten zurück, auf die mit den aktuellen Anmeldeinformationen zugegriffen werden kann.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Hiermit werden Daten aus einer Google BigQuery-Datenbank importiert.",
        "Documentation.LongDescription": "\r\n      Hiermit wird eine Tabelle der verfügbaren Projekte in Google BigQuery zurückgegeben. Der optionale Datensatzparameter <code>options</code> kann angegeben werden, um die folgenden Optionen zu steuern:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Ein Zeitraum, der steuert, wie lange ein Versuch zur Verbindungsherstellung mit dem Server dauern darf, bevor er abgebrochen wird. Der Standardwert ist der Timeoutwert für die ODBC-Verbindung.</li>\r\n        <li><code>CommandTimeout</code>: Eine Zeitraum, der steuert, wie lange eine serverseitige Abfrage ausgeführt werden darf, bevor sie abgebrochen wird.</li>\r\n        <li><code>BillingProject</code>: Die ID des Abrechnungsprojekts. Der Standardwert ist das erste verfügbare Projekt.</li>\r\n        <li><code>UseStorageApi</code>: Gibt an, ob für große Resultsets die BigQuery-Speicher-API verwendet werden soll. Der Standardwert lautet TRUE, was bedeutet, dass die Speicher-API verwendet wird. Legen Sie den Wert auf FALSE fest, damit die Speicher-API nicht verwendet wird.</li>\r\n      </ul>\r\n    Der Datensatzparameter wird als [option1 = value1, option2 = value2...] angegeben.\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Liste der verfügbaren Projekte in Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Daten aus einem Lakehouse importieren",
        "Documentation.Description": "Daten aus einem Lakehouse importieren",
        "Documentation.LongDescription": "Stellen Sie eine Verbindung mit allen Lakehouses her, auf die Sie zugreifen können, und wählen Sie die Entitäten, die Sie verwenden möchten"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Gibt eine Tabelle mit wichtigen MailChimp-Daten zurück.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Gibt eine Tabelle mit wichtigen MailChimp-Daten zurück.",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle mit wichtigen MailChimp-Daten zurück.",
            "Code": "MailChimp.Tables()",
            "Result": "Eine Tabelle mit wichtigen MailChimp-Daten."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Gibt eine Tabelle mit Leadaktivitäten zurück.",
        "Documentation.LongDescription": "Ruft den Marketo-REST-API-Endpunkt unter <code>url</code>/rest/v1/activities.json auf. Es werden alle Aktivitäten in Liste <code>activityIds</code> zurückgegeben, die seit <code>startTime</code> aufgetreten sind.",
        "Documentation.Examples": [
          {
            "Description": "Ruft eine Tabelle mit Besuchsaktivitäten auf Webseiten seit dem 1. November 2015 ab.",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Eine Tabelle mit Details zu Besuchsaktivitäten auf Webseiten seit dem 1. November."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI-Dataflows (Legacy)",
        "Documentation.Caption": "Daten aus einem Power BI-Dataflow importieren",
        "Documentation.LongDescription": "Stellen Sie eine Verbindung mit allen Power BI-Dataflows her, auf die Sie zugreifen können, und wählen Sie die Entitäten, die Sie verwenden möchten."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Datamarts",
        "Documentation.Caption": "Datamarts",
        "Documentation.Description": "Importiert Daten aus Datamarts.",
        "Documentation.LongDescription": "Importiert Daten aus Datamarts."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Dataflows",
        "Documentation.Caption": "Importieren von Daten aus einem Dataflow",
        "Documentation.Description": "Importieren von Daten aus einem Dataflow",
        "Documentation.LongDescription": "Stellen Sie eine Verbindung mit allen Dataflows her, auf die Sie zugreifen können, und wählen Sie die Entitäten, die Sie verwenden möchten"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Hiermit importieren Sie Daten aus QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Hiermit wird eine Tabelle der verfügbaren Tabellen in QuickBooks Online zurückgegeben. Der optionale Datensatzparameter <code>options</code> kann angegeben werden, um die folgenden Optionen zu steuern:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: Ein Zeitraum, der steuert, wie lange ein Versuch zur Verbindungsherstellung mit dem Server dauern darf, bevor er abgebrochen wird.</li>\r\n            <li><code>CommandTimeout</code>: Eine Dauer, die steuert, wie lange die serverseitige Abfrage ausgeführt werden darf, bevor sie abgebrochen wird.</li>\r\n          </ul>\r\n        Der Datensatzparameter wird als [option1 = value1, option2 = value2...] angegeben.\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Gibt die Objekte aus dem Salesforce-Konto zurück.",
        "Documentation.LongDescription": "Gibt die Objekte aus dem Salesforce-Konto zurück, das in den Anmeldeinformationen angegeben wurde. Das Konto wird über die bereitgestellte Umgebung \"<code>loginUrl</code>\" verbunden. Wenn keine Umgebung bereitgestellt wurde, wird das Konto mit der Produktionsumgebung (https://login.salesforce.com) verbunden. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Ein logischer Wert (TRUE/FALSE), der festlegt, ob f&#252;r die zur&#252;ckgegebenen Werte Navigationseigenschaften generiert werden sollen (Standardwert: FALSE).</li>\r\n<li><code>ApiVersion</code> : Die Salesforce-API-Version, die f&#252;r diese Abfrage verwendet werden soll. Falls keine Version festgelegt ist, wird die API-Version 29.0 verwendet.</li>\r\n<li><code>Timeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor die Anforderung an den Server abgebrochen wird. Der Standardwert ist quellspezifisch.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Gibt die Berichte aus dem Salesforce-Konto zurück.",
        "Documentation.LongDescription": "Gibt die Berichte aus dem Salesforce-Konto zurück, das in den Anmeldeinformationen angegeben wurde. Das Konto wird über die bereitgestellte Umgebung \"<code>loginUrl</code>\" verbunden. Wenn keine Umgebung bereitgestellt wurde, wird das Konto mit der Produktionsumgebung (https://login.salesforce.com) verbunden. Ein optionaler Datensatzparameter \"<code>options</code>\" kann angegeben werden, um zusätzliche Eigenschaften festzulegen. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Die Salesforce-API-Version, die f&#252;r diese Abfrage verwendet werden soll. Falls keine Version festgelegt ist, wird die API-Version 29.0 verwendet.</li>\r\n<li><code>Timeout</code> : Eine Dauer, die steuert, wie lange gewartet wird, bevor die Anforderung an den Server abgebrochen wird. Der Standardwert ist quellspezifisch.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Gibt die InfoCubes und Abfragen in einem SAP Business Warehouse-System gruppiert nach InfoArea zurück.",
        "Documentation.LongDescription": "Gibt eine nach InfoArea gruppierte Tabelle mit InfoCubes und Abfragen aus einer SAP Business Warehouse-Instanz auf dem Server \"<code>server</code>\" mit Systemnummer <code>systemNumberOrSystemId</code> und Client-ID \"<code>clientId</code>\" zurück. Ein optionaler Datensatzparameter \"<code>optionsOrLogonGroup</code>\" kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Gibt eine Tabelle mit Arbeitsblättern, Berichten, Ordnern und Arbeitsbereichen aus der Smartsheet-API zurück.",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Gibt eine geschachtelte Tabelle der verfügbaren Arbeitsblätter, Ordner und Arbeitsbereiche aus der Smartsheet-API zurück.",
        "Documentation.Examples": [
          {
            "Description": "Gibt Arbeitsblätter, Ordner, Berichte und Arbeitsbereiche zurück, die auf der obersten Ebene der Smartsheet-Hierarchie verfügbar sind.",
            "Code": "Smartsheet.Tables()",
            "Result": "Eine Tabelle mit Ordnern, Berichten und Arbeitsbereichen der obersten Ebene der Smartsheet-Hierarchie"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Gibt eine Tabelle der verfügbaren Daten aus der SparkPost-API, Version 1, zurück.",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Mithilfe dieser Funktion können Daten von einem bestimmten Endpunkt \"Metrics\" der SparkPost-API, Version 1, abgerufen werden. Wenn Sie diese Tabellen aktualisieren oder die SparkPost-API über diesen Connector aufrufen, denken Sie daran, dass für die SparkPost-API ein striktes API-Ratenlimit vorliegt. Wenn Ihnen vom SparkPost-Server ein Statuscode 429 zurückgegeben wird, haben Sie das Ratenlimit erreicht und müssen einige Minuten warten, bevor weitere Aufrufe möglich sind. Beachten Sie beim Auswählen eines Werts für den Parameter \"Anzahl von Tagen\", dass die API nur Daten aus sechs Monaten speichert.",
        "Documentation.Examples": [
          {
            "Description": "Ruft die Zustellbarkeitsmetriken \"count_sent\" und \"count_rejected\" für alle campaign_ids ab (aggregiert über die letzten drei Tage).",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "Tabelle"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Ruft die Stripe-API auf.",
        "Documentation.LongDescription": "Ruft die Stripe-API unter https://api.stripe.com/v1/<code>method</code> auf, wobei der Datensatz <code>additionalParameters</code> als zusätzlicher Parameter und die Liste <code>ColumnNames</code> mit erwarteten Spaltennamen übergeben wird. Es wird Stripe-Version 2015-10-16 verwendet.",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle mit Ereignissen zurück, die nach dem 1. November 2015 erstellt wurden.",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Eine Tabelle mit den angegebenen Ereignissen für das aktuelle Stripe-Konto."
          },
          {
            "Description": "Gibt eine Tabelle mit allen SKUs zurück.",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Eine Tabelle mit sämtlichen SKUs für das aktuelle Stripe-Konto."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Gibt eine Tabelle mit den verfügbaren Stripe-Tabellen und -Funktionen zurück.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit den verfügbaren Stripe-Tabellen und -Funktionen zurück."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Synapse Analytics-Arbeitsbereich",
        "Documentation.Caption": "Azure Synapse Analytics-Arbeitsbereich",
        "Documentation.LongDescription": "PQ-Connector für Azure Synapse Analytics Arbeitsbereich",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Fügt eine Spalte mit dem angegebenen Namen hinzu. Der Wert wird anhand der angegebenen Auswahlfunktion berechnet, wobei die einzelnen Zeilen jeweils als Eingabe herangezogen werden.",
        "Documentation.LongDescription": "Fügt der Tabelle \"<code>table</code>\" eine Spalte mit der Bezeichnung \"<code>newColumnName</code>\" hinzu. Die Werte für die Spalte werden anhand der angegebenen Auswahlfunktion \"<code>columnGenerator</code>\" berechnet, wobei die einzelnen Zeilen jeweils als Eingabe herangezogen werden.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Fügen Sie eine Zahlenspalte mit dem Namen „Gesamtpreis“ in die Tabelle hinzu, wobei jeder Wert die Summe der Spalten [Preis] und [Versand] entspricht.",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Hiermit wird eine neue Spalte mit repräsentativen Werten hinzugefügt, die durch Fuzzygruppierungswerte der angegebenen Spalte in der Tabelle abgerufen wurden.",
        "Documentation.LongDescription": "Fügt \"<code>table</code>\" eine neue Spalte \"<code>newColumnName</code>\" mit repräsentativen Werten von \"<code>columnName</code>\" hinzu, indem für jede Zeile Fuzzyübereinstimmungen der Werte in \"<code>columnName</code>\" gesucht werden.\r\n    <p>Ein optionaler <code>options</code>-Satz kann einbezogen werden, um anzugeben, wie die Schlüsselspalten verglichen werden sollen. Verfügbare Optionen: \r\n    <ul>\r\n<li><code>Culture</code> : Erm&#246;glicht das Gruppieren von Datens&#228;tzen basierend auf kulturspezifischen Regeln. Es kann sich um einen beliebigen g&#252;ltigen Kulturnamen handelt. Beispielsweise gruppiert die Culture-Option &quot;ja-JP&quot; Datens&#228;tze basierend auf der japanischen Kultur. Der Standardwert ist &quot;&quot;. Dieser Wert gruppiert Datens&#228;tze basierend auf der invarianten englischen Kultur.</li>\r\n<li><code>IgnoreCase</code> : Ein logischer Wert (TRUE/FALSE), der eine Schl&#252;sselgruppierung ohne Unterscheidung nach Gro&#223;-/Kleinschreibung erm&#246;glicht. Bei Festlegung auf TRUE wird z.&#160;B. &quot;Fliegen&quot; mit &quot;fliegen&quot; gruppiert. Der Standardwert ist TRUE.</li>\r\n<li><code>IgnoreSpace</code> : Ein logischer Wert (TRUE/FALSE), der das Kombinieren von Textteilen erm&#246;glicht, um Gruppen zu finden. Bei Festlegung auf TRUE wird z.&#160;B. &quot;Fliegen&quot; mit &quot;Flie gen&quot; gruppiert. Der Standardwert ist TRUE.</li>\r\n<li><code>SimilarityColumnName</code> : Ein Name f&#252;r die Spalte, die die &#196;hnlichkeit zwischen einem Eingabewert und dem repr&#228;sentativen Wert f&#252;r diese Eingabe angibt. Der Standardwert ist NULL. In diesem Fall wird keine neue Spalte f&#252;r &#196;hnlichkeiten hinzugef&#252;gt.</li>\r\n<li><code>Threshold</code> : Eine Zahl zwischen 0,00 und 1,00, welche den &#196;hnlichkeitswert angibt, bei dem zwei Werte gruppiert werden.\r\n    Beispiel: „Trauben“ und „Trauen“ (fehlendes „b“) werden nur dann gruppiert, wenn diese Option auf weniger als 0,90 festgelegt ist.\r\n    Ein Schwellenwert von 1,00 l&#228;sst nur exakte &#220;bereinstimmungen zu.\r\n    (Beachten Sie, dass eine unscharfe „exakte &#220;bereinstimmung“ Unterschiede wie Gro&#223;-/Kleinschreibung, Wortreihenfolge und Interpunktion ignorieren kann.)\r\n    Der Standardwert ist 0,80.</li>\r\n<li><code>TransformationTable</code> : Eine Tabelle, die das Gruppieren von Datens&#228;tzen basierend auf benutzerdefinierten Wertzuordnungen erm&#246;glicht. Sie sollte die Spalten &quot;Von&quot; und &quot;Bis&quot; enthalten. &quot;Fliegen&quot; wird z.&#160;B. mit &quot;M&#252;cken&quot; gruppiert, wenn eine Transformationstabelle bereitgestellt wird, deren Spalte &quot;Von&quot; das Wort &quot;Fliegen&quot; und deren Spalte &quot;Bis&quot; das Wort &quot;M&#252;cken&quot; enth&#228;lt. Beachten Sie, dass die Transformation auf alle Vorkommen des Texts in der Transformationstabelle angewendet wird. Bei der obigen Transformationstabelle wird &quot;Fliegen sind l&#228;stig&quot; auch mit &quot;M&#252;cken sind l&#228;stig&quot; gruppiert.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die repräsentativen Werte für den Standort der Mitarbeiter.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Führt für angegebene Spalten einen Join zwischen Tabellen aus und stellt das Join-Ergebnis in einer neuen Spalte bereit.",
        "Documentation.LongDescription": "Führt die Zeilen von \"<code>table1</code>\" mit den Zeilen von \"<code>table2</code>\" zusammen. Grundlage hierfür bildet die Übereinstimmung der Werte der Schlüsselspalten, die durch \"<code>key1</code>\" (für \"<code>table1</code>\") und \"<code>key2</code>\" (für \"<code>table2</code>\") ausgewählt wurden. Die Ergebnisse werden in die Spalte namens \"<code>newColumnName</code>\" eingefügt.\r\nDas Verhalten dieser Funktion gleicht \"Table.Join\" mit dem JoinKind-Typ \"LeftOuter\", allerdings werden hier die Join-Ergebnisse geschachtelt (und nicht vereinfacht) dargestellt.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Fügt \"({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]})\" eine Join-Spalte namens \"price/stock\" auf der Grundlage der Tabelle \"({[saleID = 1, price = 20], [saleID = 2, price = 10]})\" hinzu, für die ein Join für \"[saleID]\" ausgeführt wird.",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Fügt einer Tabelle einen Schlüssel hinzu.",
        "Documentation.LongDescription": "Fügt <code>table</code> einen Schlüssel hinzu, wobei <code>columns</code> die Liste der Spaltennamen ist, die den Schlüssel definiert, und <code>isPrimary</code> gibt an, ob es sich um den Primärschlüssel handelt.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Fügen Sie einer Tabelle einen einspaltigen Primärschlüssel hinzu.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Fügt eine Spalte mit der Rangfolge einer oder mehrerer anderer Spalten an.",
        "Documentation.LongDescription": "Fügt eine Spalte mit dem Namen <code>newColumnName</code> an die <code>table</code> mit der Rangfolge einer oder mehrerer anderer Spalten an, die von <code>comparisonCriteria</code> beschrieben werden.\r\nDie RankKind-Option in <code>options</code> kann von fortgeschrittenen Benutzern verwendet werden, um eine spezifischere Rangfolgemethode auszuwählen.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Fügen Sie der Tabelle eine Spalte mit dem Namen „Umsatzrangfolge“ hinzu, welche die Spalte „Umsatz“ vom höchsten zum niedrigsten Wert einstuft.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Aggregiert eine Spalte mit Tabellen zu mehreren Spalten in der enthaltenden Tabelle.",
        "Documentation.LongDescription": "Aggregiert Tabellen in \"<code>table</code>[<code>column</code>]\" zu mehreren Spalten mit Aggregatwerten für die Tabellen. \"<code>aggregations</code>\" dient zum Angeben der Spalten mit den zu aggregierenden Tabellen, der Aggregationsfunktionen, die zum Generieren der Werte auf die Tabellen angewendet werden sollen, sowie der Namen der zu erstellenden Aggregationsspalten.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Aggregiert Tabellenspalten in <code>[t]</code> in der Tabelle <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> zur Summe von <code>[t.a]</code>, zu den Mindest- und Höchstwerten von <code>[t.b]</code> sowie zur Werteanzahl in<code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Behält den Ausgangsoffset bei und wechselt dann zwischen Verwendung und Überspringung der anschließenden Zeilen.",
        "Documentation.LongDescription": "Behält den Ausgangsoffset bei und wechselt dann zwischen Verwendung und Überspringung der anschließenden Zeilen.\r\n    <ul>\r\n       <li><code>table</code>: Die Eingabetabelle.</li>\r\n       <li><code>offset</code>: Die Anzahl der beizubehaltenden Zeilen bis zum Beginn der Iterationen.</li>\r\n       <li><code>skip</code>: Die Anzahl von Zeilen, die pro Iteration entfernt werden sollen.</li>\r\n       <li><code>take</code>: Die Anzahl von Zeilen, die pro Iteration erhalten bleiben sollen.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Tabelle aus der Tabelle zurück, die in der ersten Zeile beginnt, einen Wert überspringt und dann einen Wert beibehält.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Fasst die angegebenen Spalten unter Verwendung der angegebenen Kombinationsfunktion in einer neuen Spalte zusammen.",
        "Documentation.LongDescription": "Fasst die angegebenen Spalten unter Verwendung der angegebenen Kombinationsfunktion in einer neuen Spalte zusammen.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kombinieren Sie die Nach- und Vornamen in einer neuen Spalte, getrennt durch ein Komma.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Kombiniert die angegebenen Spalten in einer neuen Spalte mit Datensatzwerten, in der jeder Datensatz Feldnamen und Werte enthält, die den Spaltennamen und Werten der kombinierten Spalten entsprechen.",
        "Documentation.LongDescription": "Kombiniert die angegebenen Spalten von \"<code>table</code>\" in einer neuen Spalte mit Datensatzwerten namens \"<code>newColumnName</code>\", in der jeder Datensatz Feldnamen und Werte enthält, die den Spaltennamen und Werten der kombinierten Spalten entsprechen. Wenn ein Datensatz für \"<code>options</code>\" angegeben wird, können die folgenden Optionen bereitgestellt werden:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: Bei Angabe als Text weist diese Option darauf hin, dass der angegebene Spaltenname als Anzeigename des Datensatzes behandelt werden soll. Hierbei muss es sich nicht um eine der Spalten im Datensatz selbst handeln.</li>\r\n     <li> <code>typeName</code>: Bei Angabe als Text wird der Name eines logischen Typs für den resultierenden Datensatz angegeben, der beim Datenladevorgang zum Festlegen des Verhaltens der Ladeumgebung verwendet werden kann.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Erstellt von einer Spalte mit dem angegebenen Namen ein Duplikat. Die Werte und der Typ werden aus der Quellspalte kopiert.",
        "Documentation.LongDescription": "Erstellt von der Spalte mit dem Namen '<code>columnName</code>' ein Duplikat in der Tabelle '<code>table</code>'. Die Werte und der Typ für die Spalte '<code>newColumnName</code>' werden aus der Spalte '<code>columnName</code>' kopiert.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Erstellt von Spalte 'a' in der Tabelle '<code>({[a = 1, b = 2], [a = 3, b = 4]})</code>' ein Duplikat mit dem Namen 'copied column'.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Erweitert eine Spalte mit Datensätzen in Spalten mit den einzelnen Werten.",
        "Documentation.LongDescription": "Erstellt auf der Grundlage des Elements vom Typ \"<code>column</code>\" mit Datensätzen aus der Eingabe \"<code>table</code>\" eine Tabelle mit Spalten für die einzelnen Felder des Datensatzes. Optional kann durch Angabe von \"<code>newColumnNames</code>\" die Verwendung eindeutiger Spaltennamen in der neuen Tabelle sichergestellt werden.\r\n    <ul>\r\n        <li><code>table</code>: Die ursprüngliche Tabelle mit der zu erweiternden Datensatzspalte. </li>\r\n        <li><code>column</code>: Die zu erweiternde Spalte.</li>\r\n        <li><code>fieldNames</code>: Die Liste mit Feldern, die zu Spalten in der Tabelle erweitert werden sollen.</li>\r\n        <li><code>newColumnNames</code>: Die Liste mit den Spaltennamen für die neuen Spalten. Die neuen Spaltennamen dürfen nicht zu Duplikaten der Spalten in der neuen Tabelle führen.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Erweitert die Spalte \"[a]\" in der Tabelle <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> zu drei Spalten: \"aa\", \"bb\" und \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Erweitert eine Spalte mit Datensätzen oder eine Spalte mit Tabellen zu mehreren Spalten in der enthaltenden Tabelle.",
        "Documentation.LongDescription": "Erweitert Tabellen in \"<code>table</code>[<code>column</code>]\" zu mehrere Zeilen und Spalten. \"<code>columnNames</code>\" dient zum Auswählen der zu erweiternden Spalten der internen Tabelle. Geben Sie \"<code>newColumnNames</code>\" an, um Konflikte zwischen vorhandenen und neuen Spalten zu vermeiden.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Erweitert Tabellenspalten in <code>[a]</code> in der Tabelle <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> zu drei Spalten: <code>[t.a]</code>, <code>[t.b]</code> und <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Gruppiert Zeilen in der Tabelle basierend auf der Fuzzyübereinstimmung von Schlüsseln.",
        "Documentation.LongDescription": "Gruppiert die Zeilen von \"<code>table</code>\", indem für jede Zeile Fuzzyübereinstimmungen der Werte in der angegebenen Spalte \"<code>key</code>\" gesucht werden.\r\n    Für jede Gruppe wird ein Datensatz erstellt, der die Schlüsselspalten (und ihre Werte) zusammen mit den von \"<code>aggregatedColumns</code>\" angegebenen aggregierten Spalten enthält.\r\n    Diese Funktion kann nicht garantieren, dass die Zeilen in einer bestimmten Reihenfolge zurückgegeben werden.\r\n    <p>Ein optionaler <code>options</code>-Satz kann einbezogen werden, um anzugeben, wie die Schlüsselspalten verglichen werden sollen. Verfügbare Optionen: \r\n    <ul>\r\n<li><code>Culture</code> : Erm&#246;glicht das Gruppieren von Datens&#228;tzen basierend auf kulturspezifischen Regeln. Es kann sich um einen beliebigen g&#252;ltigen Kulturnamen handelt. Beispielsweise gruppiert die Culture-Option &quot;ja-JP&quot; Datens&#228;tze basierend auf der japanischen Kultur. Der Standardwert ist &quot;&quot;. Dieser Wert gruppiert Datens&#228;tze basierend auf der invarianten englischen Kultur.</li>\r\n<li><code>IgnoreCase</code> : Ein logischer Wert (TRUE/FALSE), der eine Schl&#252;sselgruppierung ohne Unterscheidung nach Gro&#223;-/Kleinschreibung erm&#246;glicht. Bei Festlegung auf TRUE wird z.&#160;B. &quot;Fliegen&quot; mit &quot;fliegen&quot; gruppiert. Der Standardwert ist TRUE.</li>\r\n<li><code>IgnoreSpace</code> : Ein logischer Wert (TRUE/FALSE), der das Kombinieren von Textteilen erm&#246;glicht, um Gruppen zu finden. Bei Festlegung auf TRUE wird z.&#160;B. &quot;Fliegen&quot; mit &quot;Flie gen&quot; gruppiert. Der Standardwert ist TRUE.</li>\r\n<li><code>SimilarityColumnName</code> : Ein Name f&#252;r die Spalte, die die &#196;hnlichkeit zwischen einem Eingabewert und dem repr&#228;sentativen Wert f&#252;r diese Eingabe angibt. Der Standardwert ist NULL. In diesem Fall wird keine neue Spalte f&#252;r &#196;hnlichkeiten hinzugef&#252;gt.</li>\r\n<li><code>Threshold</code> : Eine Zahl zwischen 0,00 und 1,00, welche den &#196;hnlichkeitswert angibt, bei dem zwei Werte gruppiert werden.\r\n    Beispiel: „Trauben“ und „Trauen“ (fehlendes „b“) werden nur dann gruppiert, wenn diese Option auf weniger als 0,90 festgelegt ist.\r\n    Ein Schwellenwert von 1,00 l&#228;sst nur exakte &#220;bereinstimmungen zu.\r\n    (Beachten Sie, dass eine unscharfe „exakte &#220;bereinstimmung“ Unterschiede wie Gro&#223;-/Kleinschreibung, Wortreihenfolge und Interpunktion ignorieren kann.)\r\n    Der Standardwert ist 0,80.</li>\r\n<li><code>TransformationTable</code> : Eine Tabelle, die das Gruppieren von Datens&#228;tzen basierend auf benutzerdefinierten Wertzuordnungen erm&#246;glicht. Sie sollte die Spalten &quot;Von&quot; und &quot;Bis&quot; enthalten. &quot;Fliegen&quot; wird z.&#160;B. mit &quot;M&#252;cken&quot; gruppiert, wenn eine Transformationstabelle bereitgestellt wird, deren Spalte &quot;Von&quot; das Wort &quot;Fliegen&quot; und deren Spalte &quot;Bis&quot; das Wort &quot;M&#252;cken&quot; enth&#228;lt. Beachten Sie, dass die Transformation auf alle Vorkommen des Texts in der Transformationstabelle angewendet wird. Bei der obigen Transformationstabelle wird &quot;Fliegen sind l&#228;stig&quot; auch mit &quot;M&#252;cken sind l&#228;stig&quot; gruppiert.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Gruppieren Sie die Tabelle durch Hinzufügen einer aggregierten Spalte [Count], in der die Anzahl von Mitarbeitern an den einzelnen Standorten (\"each Table.RowCount(_))\") angegeben ist.",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Verknüpft die Zeilen aus den beiden Tabellen, die auf der Grundlage der angegebenen Schlüssel ungefähr übereinstimmen.",
        "Documentation.LongDescription": "<p>Verknüpft die Zeilen von \"<code>table1</code>\" mit den Zeilen von \"<code>table2</code>\", basierend auf Fuzzyübereinstimmungen der Werte der Schlüsselspalten, die durch \"<code>key1</code>\" (für \"<code>table1</code>\") und \"<code>key2</code>\" (für \"<code>table2</code>\") ausgewählt wurden.</p>\r\n<p>Eine Fuzzyübereinstimmung ist ein Vergleich, der auf Ähnlichkeit anstatt auf Gleichheit von Texten beruht.</p>\r\n<p>Standardmäßig wird ein innerer Join ausgeführt, mit der optionalen Angabe von \"<code>joinKind</code>\" kann die Art des Joins jedoch auch festgelegt werden. Verfügbare Optionen:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Ein optionaler <code>joinOptions</code>-Satz kann einbezogen werden, um anzugeben, wie die Schlüsselspalten verglichen werden sollen. Verfügbare Optionen:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Eine Zahl zwischen 1 und 8, die die Anzahl von parallelen Threads angibt, die f&#252;r Fuzzy&#252;bereinstimmungen verwendet werden sollen. Der Standardwert ist&#160;1.</li>\r\n<li><code>Culture</code> : Erm&#246;glicht den Abgleich von Datens&#228;tzen basierend auf kulturspezifischen Regeln. Es kann sich um einen beliebigen g&#252;ltigen Kulturnamen handelt. Die Culture-Option &quot;ja-JP&quot; beispielsweise gleicht Datens&#228;tze basierend auf der japanischen Kultur ab. Der Standardwert ist &quot;&quot;. Dieser Wert gruppiert Datens&#228;tze basierend auf der invarianten englischen Kultur.</li>\r\n<li><code>IgnoreCase</code> : Ein logischer Wert (TRUE/FALSE), der einen Schl&#252;sselabgleich ohne Unterscheidung nach Gro&#223;-/Kleinschreibung erm&#246;glicht. Bei Festlegung auf TRUE stimmt z.&#160;B. &quot;Fliegen&quot; mit &quot;fliegen&quot; &#252;berein. Der Standardwert ist TRUE.</li>\r\n<li><code>IgnoreSpace</code> : Ein logischer Wert (TRUE/FALSE), der das Kombinieren von Textteilen erm&#246;glicht, um &#220;bereinstimmungen zu finden. Bei Festlegung auf TRUE stimmt z.&#160;B. &quot;Fliegen&quot; mit &quot;Flie gen&quot; &#252;berein. Der Standardwert ist TRUE.</li>\r\n<li><code>NumberOfMatches</code> : Eine ganze Zahl, die die Angabe maximale Anzahl &#252;bereinstimmender Zeilen angibt, die f&#252;r jede Eingabezeile zur&#252;ckgegeben werden k&#246;nnen. Beispielsweise gibt der Wert&#160;1 f&#252;r jede Eingabezeile h&#246;chstens eine &#252;bereinstimmende Zeile zur&#252;ck. Wird diese Option nicht angegeben, werden alle &#252;bereinstimmenden Zeilen zur&#252;ckgegeben.</li>\r\n<li><code>SimilarityColumnName</code> : Ein Name f&#252;r die Spalte, die die &#196;hnlichkeit zwischen einem Eingabewert und dem repr&#228;sentativen Wert f&#252;r diese Eingabe angibt. Der Standardwert ist NULL. In diesem Fall wird keine neue Spalte f&#252;r &#196;hnlichkeiten hinzugef&#252;gt.</li>\r\n<li><code>Threshold</code> : Eine Zahl zwischen 0,00 und 1,00, welche den &#196;hnlichkeitswert angibt, bei dem zwei Werte verglichen werden.\r\n    Beispiel: „Trauben“ und „Trauen“ (fehlendes „b“) werden nur dann abgeglichen, wenn diese Option auf weniger als 0,90 festgelegt ist.\r\n    Ein Schwellenwert von 1,00 l&#228;sst nur exakte &#220;bereinstimmungen zu.\r\n    (Beachten Sie, dass eine unscharfe „exakte &#220;bereinstimmung“ Unterschiede wie Gro&#223;-/Kleinschreibung, Wortreihenfolge und Interpunktion ignorieren kann.)\r\n    Der Standardwert ist 0,80.</li>\r\n<li><code>TransformationTable</code> : Eine Tabelle, die den Abgleich von Datens&#228;tzen basierend auf benutzerdefinierten Wertzuordnungen erm&#246;glicht. Sie sollte die Spalten &quot;Von&quot; und &quot;Bis&quot; enthalten. &quot;Fliegen&quot; stimmt z.&#160;B. mit &quot;M&#252;cken&quot; &#252;berein, wenn eine Transformationstabelle bereitgestellt wird, deren Spalte &quot;Von&quot; das Wort &quot;Fliegen&quot; und deren Spalte &quot;Bis&quot; das Wort &quot;M&#252;cken&quot; enth&#228;lt. Beachten Sie, dass die Transformation auf alle Vorkommen des Texts in der Transformationstabelle angewendet wird. Bei der obigen Transformationstabelle stimmt &quot;Fliegen sind l&#228;stig&quot; auch mit &quot;M&#252;cken sind l&#228;stig&quot; &#252;berein.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Linker innerer Fuzzyjoin zweier Tabellen basierend auf [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Führt für angegebene Spalten einen Fuzzyjoin zwischen Tabellen aus und stellt das Join-Ergebnis in einer neuen Spalte bereit.",
        "Documentation.LongDescription": "<p>Verknüpft die Zeilen von \"<code>table1</code>\" mit den Zeilen von \"<code>table2</code>\". Grundlage hierfür bildet eine Fuzzyübereinstimmung der Werte der Schlüsselspalten, die durch \"<code>key1</code>\" (für \"<code>table1</code>\") und \"<code>key2</code>\" (für \"<code>table2</code>\") ausgewählt wurden. Die Ergebnisse werden in einer neuen Spalte namens \"<code>newColumnName</code>\" zurückgegeben.</p>\r\n<p>Die Fuzzyübereinstimmung ist ein Vergleich, der eher auf Ähnlichkeit als auf genauer Übereinstimmung des Texts beruht.</p>\r\n<p>\"<code>joinKind</code>\" (optional) legt die Art des durchzuführenden Joins fest. Standardmäßig wird ein linker äußerer Join durchgeführt, wenn \"<code>joinKind</code>\" nicht angegeben ist. Verfügbare Optionen:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Um festzulegen, wie die Schlüsselspalten verglichen werden sollen, kann ein optionaler <code>joinOptions</code>-Satz eingeschlossen werden. Verfügbare Optionen:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Eine Zahl zwischen 1 und 8, die die Anzahl von parallelen Threads angibt, die f&#252;r Fuzzy&#252;bereinstimmungen verwendet werden sollen. Der Standardwert ist&#160;1.</li>\r\n<li><code>Culture</code> : Erm&#246;glicht den Abgleich von Datens&#228;tzen basierend auf kulturspezifischen Regeln. Es kann sich um einen beliebigen g&#252;ltigen Kulturnamen handelt. Die Culture-Option &quot;ja-JP&quot; beispielsweise gleicht Datens&#228;tze basierend auf der japanischen Kultur ab. Der Standardwert ist &quot;&quot;. Dieser Wert gruppiert Datens&#228;tze basierend auf der invarianten englischen Kultur.</li>\r\n<li><code>IgnoreCase</code> : Ein logischer Wert (TRUE/FALSE), der einen Schl&#252;sselabgleich ohne Unterscheidung nach Gro&#223;-/Kleinschreibung erm&#246;glicht. Bei Festlegung auf TRUE stimmt z.&#160;B. &quot;Fliegen&quot; mit &quot;fliegen&quot; &#252;berein. Der Standardwert ist TRUE.</li>\r\n<li><code>IgnoreSpace</code> : Ein logischer Wert (TRUE/FALSE), der das Kombinieren von Textteilen erm&#246;glicht, um &#220;bereinstimmungen zu finden. Bei Festlegung auf TRUE stimmt z.&#160;B. &quot;Fliegen&quot; mit &quot;Flie gen&quot; &#252;berein. Der Standardwert ist TRUE.</li>\r\n<li><code>NumberOfMatches</code> : Eine ganze Zahl, die die Angabe maximale Anzahl &#252;bereinstimmender Zeilen angibt, die f&#252;r jede Eingabezeile zur&#252;ckgegeben werden k&#246;nnen. Beispielsweise gibt der Wert&#160;1 f&#252;r jede Eingabezeile h&#246;chstens eine &#252;bereinstimmende Zeile zur&#252;ck. Wird diese Option nicht angegeben, werden alle &#252;bereinstimmenden Zeilen zur&#252;ckgegeben.</li>\r\n<li><code>SimilarityColumnName</code> : Ein Name f&#252;r die Spalte, die die &#196;hnlichkeit zwischen einem Eingabewert und dem repr&#228;sentativen Wert f&#252;r diese Eingabe angibt. Der Standardwert ist NULL. In diesem Fall wird keine neue Spalte f&#252;r &#196;hnlichkeiten hinzugef&#252;gt.</li>\r\n<li><code>Threshold</code> : Eine Zahl zwischen 0,00 und 1,00, welche den &#196;hnlichkeitswert angibt, bei dem zwei Werte verglichen werden.\r\n    Beispiel: „Trauben“ und „Trauen“ (fehlendes „b“) werden nur dann abgeglichen, wenn diese Option auf weniger als 0,90 festgelegt ist.\r\n    Ein Schwellenwert von 1,00 l&#228;sst nur exakte &#220;bereinstimmungen zu.\r\n    (Beachten Sie, dass eine unscharfe „exakte &#220;bereinstimmung“ Unterschiede wie Gro&#223;-/Kleinschreibung, Wortreihenfolge und Interpunktion ignorieren kann.)\r\n    Der Standardwert ist 0,80.</li>\r\n<li><code>TransformationTable</code> : Eine Tabelle, die den Abgleich von Datens&#228;tzen basierend auf benutzerdefinierten Wertzuordnungen erm&#246;glicht. Sie sollte die Spalten &quot;Von&quot; und &quot;Bis&quot; enthalten. &quot;Fliegen&quot; stimmt z.&#160;B. mit &quot;M&#252;cken&quot; &#252;berein, wenn eine Transformationstabelle bereitgestellt wird, deren Spalte &quot;Von&quot; das Wort &quot;Fliegen&quot; und deren Spalte &quot;Bis&quot; das Wort &quot;M&#252;cken&quot; enth&#228;lt. Beachten Sie, dass die Transformation auf alle Vorkommen des Texts in der Transformationstabelle angewendet wird. Bei der obigen Transformationstabelle stimmt &quot;Fliegen sind l&#228;stig&quot; auch mit &quot;M&#252;cken sind l&#228;stig&quot; &#252;berein.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Linker innerer Fuzzyjoin zweier Tabellen basierend auf [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Gruppiert Tabellenzeilen mit dem gleichen Schlüssel.",
        "Documentation.LongDescription": "Gruppiert die Zeilen von <code>table</code> nach den Schlüsselspalten, die von <code>key</code> definiert werden. Bei <code>key</code> kann es sich entweder um einen einzelnen Spaltenname oder um eine Liste mit Spaltennamen handeln.\r\n    Für jede Gruppe wird ein Datensatz erstellt, der die Schlüsselspalten (und ihre Werte) sowie alle von <code>aggregatedColumns</code> angegebenen aggregierten Spalten enthält.\r\n    Optional können auch <code>groupKind</code> und <code>comparer</code> angegeben werden.<br>\r\n    <br>\r\n    Wenn die Daten bereits nach den Schlüsselspalten sortiert sind, kann ein <code>groupKind</code> von GroupKind.Local angegeben werden kann. Dies kann die Leistung der Gruppierung in bestimmten Fällen verbessern,\r\n    da angenommen wird, dass alle Zeilen mit einem angegebenen Satz von Schlüsselwerten zusammenhängend sind.<br>\r\n    <br>\r\n    Beim Übergeben eines <code>comparer</code> ist zu beachten, dass eine Zeile möglicherweise in einer Gruppe platziert wird, deren Schlüssel sich von ihren eigenen unterscheiden, wenn sie unterschiedliche Schlüssel als gleich behandelt.<br>\r\n    <br>\r\n    Diese Funktion garantiert nicht die Reihenfolge der Zeilen, die sie zurücksendet.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Gruppiert die Tabelle und fügt die aggregierte Spalte \"[total]\" hinzu, die die Summe der Preise (\"each List.Sum([price])\") enthält.",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Fügt an der angegebenen Position eine Liste mit Zeilen in die Tabelle ein.",
        "Documentation.LongDescription": "Gibt eine Tabelle zurück, bei der die Liste <code>rows</code> der Zeilen in <code>table</code> an der angegebenen Position <code>offset</code> eingefügt wurde. Jede Spalte in der einzufügenden Zeile muss den Spaltentypen der Tabelle entsprechen.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Fügt die Zeile an der Position 1 in die Tabelle ein.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Fügt zwei Zeilen an der Position 1 in die Tabelle ein.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Verknüpft die Zeilen aus den beiden Tabellen auf der Grundlage der angegebenen Schlüssel.",
        "Documentation.LongDescription": "<p>Führt die Zeilen von \"<code>table1</code>\" mit den Zeilen von \"<code>table2</code>\" zusammen. Grundlage hierfür bildet die Übereinstimmung der Werte der Schlüsselspalten, die durch \"<code>key1</code>\" (für \"<code>table1</code>\") und \"<code>key2</code>\" (für \"<code>table2</code>\") ausgewählt wurden.</p>\r\n<p>Standardmäßig wird ein innerer Join ausgeführt, mit der optionalen Angabe von \"<code>joinKind</code>\" kann jedoch auch die Art des Joins festgelegt werden. Verfügbare Optionen:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Um festzulegen, wie die Schlüsselspalten verglichen werden sollen, kann ein optionaler <code>keyEqualityComparers</code>-Satz eingeschlossen werden. Dieser Parameter ist zurzeit nur für die interne Verwendung vorgesehen.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Verknüpfen Sie zwei Tabellen mit einer einzelnen Schlüsselspalte.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Verknüpfen Sie zwei Tabellen mit in Konflikt stehenden Spaltennamen, indem Sie mehrere Schlüsselspalten verwenden.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Gibt anhand der angegebenen Kriterien die größten Zeilen zurück.",
        "Documentation.LongDescription": "Gibt die größten Zeilen im Element vom Typ \"<code>table</code>\" anhand von \"<code>comparisonCriteria</code>\" zurück.\r\n    Nach dem Sortieren der Zeilen muss zur weiteren Filterung des Ergebnisses der Parameter \"<code>countOrCondition</code>\" angegeben werden. Beachten Sie, dass der Sortieralgorithmus kein festes sortiertes Ergebnis gewährleisten kann. Mögliche Formate für den Parameter \"<code>countOrCondition</code>\":\r\n    <ul>\r\n        <li> Bei Angabe einer Zahl wird eine Liste mit bis zu <code>countOrCondition</code> Elementen in aufsteigender Reihenfolge zurückgegeben. </li>\r\n        <li> Bei Angabe einer Bedingung wird eine Liste mit Elementen zurückgegeben, die die Bedingung erfüllen. Erfüllt ein Element die Bedingung nicht, werden ab diesem Punkt keine weiteren Elemente berücksichtigt. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Zeile mit dem größten Wert in der Spalte \"[a]\" mit der Bedingung \"[a] > 0\" in der Tabelle. Die Zeilen werden vor dem Anwenden des Filters sortiert.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Ermittelt die Zeile mit dem größten Wert in der Spalte \"[a]\" mit der Bedingung \"[b] > 0\" in der Tabelle. Die Zeilen werden vor dem Anwenden des Filters sortiert.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Gibt anhand der angegebenen Kriterien die kleinsten Zeilen zurück.",
        "Documentation.LongDescription": "Gibt die kleinsten Zeilen im Element vom Typ \"<code>table</code>\" anhand von \"<code>comparisonCriteria</code>\" zurück. Nach dem Sortieren der Zeilen muss zur weiteren Filterung des Ergebnisses der Parameter \"<code>countOrCondition</code>\" angegeben werden. Beachten Sie, dass der Sortieralgorithmus kein festes sortiertes Ergebnis gewährleisten kann. Mögliche Formate für den Parameter \"<code>countOrCondition</code>\":\r\n    <ul>\r\n        <li>Bei Angabe einer Zahl wird eine Liste mit bis zu <code>countOrCondition</code> Elementen in aufsteigender Reihenfolge zurückgegeben. </li>\r\n        <li> Bei Angabe einer Bedingung wird eine Liste mit Elementen zurückgegeben, die die Bedingung erfüllen. Erfüllt ein Element die Bedingung nicht, werden ab diesem Punkt keine weiteren Elemente berücksichtigt. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Zeile mit dem kleinsten Wert in der Spalte \"[a]\" mit der Bedingung \"[a] < 3\" in der Tabelle. Die Zeilen werden vor dem Anwenden des Filters sortiert.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Ermittelt die Zeile mit dem kleinsten Wert in der Spalte \"[a]\" mit der Bedingung \"[b] < 0\" in der Tabelle. Die Zeilen werden vor dem Anwenden des Filters sortiert.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Führt für angegebene Spalten einen Join zwischen Tabellen aus und stellt das Join-Ergebnis in einer neuen Spalte bereit.",
        "Documentation.LongDescription": "<p>Führt die Zeilen von \"<code>table1</code>\" mit den Zeilen von \"<code>table2</code>\" zusammen. Grundlage hierfür bildet die Übereinstimmung der Werte der Schlüsselspalten, die durch \"<code>key1</code>\" (für \"<code>table1</code>\") und \"<code>key2</code>\" (für \"<code>table2</code>\") ausgewählt wurden. Die Ergebnisse werden in die Spalte namens \"<code>newColumnName</code>\" eingefügt.</p>\r\n<p>\"<code>joinKind</code>\" (optional) legt die Art des durchzuführenden Joins fest. Standardmäßig wird ein linker äußerer Join durchgeführt, wenn \"<code>joinKind</code>\" nicht angegeben ist.</p>\r\n<p>Um festzulegen, wie die Schlüsselspalten verglichen werden sollen, kann ein optionaler <code>keyEqualityComparers</code>-Satz eingeschlossen werden. Dieses Feature ist zurzeit nur für die interne Verwendung vorgesehen.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Verknüpfen Sie zwei Tabellen mit einer einzelnen Schlüsselspalte.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Wandelt bei Angabe eines Spaltenpaars, das Attribut-Wert-Paare darstellt, die Daten in der Attributspalte in Spaltenüberschriften um.",
        "Documentation.LongDescription": "Wandelt bei Angabe eines Spaltenpaars, das Attribut-Wert-Paare darstellt, die Daten in der Attributspalte in Spaltenüberschriften um.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pivotiert die Werte \"a\", \"b\" und \"c\" aus der Attributspalte der Tabelle <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> jeweils in eine eigene Spalte.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Pivotiert die Werte \"a\", \"b\" und \"c\" aus der Attributspalte der Tabelle <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> jeweils in eine eigene Spalte.  Da dem Attribut \"c\" für den Schlüssel \"x\" mehrere Werte zugeordnet sind, muss die Funktion \"List.Max\" verwendet werden, um den Konflikt zu lösen.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Ersetzt den angegebenen Zeilenbereich durch die bereitgestellten Zeilen.",
        "Documentation.LongDescription": "Ersetzt eine angegebene Anzahl von Zeilen (<code>count</code>) in der Eingabe \"<code>table</code>\" durch die Elemente vom Typ \"<code>rows</code>\" (beginnend ab \"<code>offset</code>\"). Der Parameter \"<code>rows</code>\" ist eine Liste mit Datensätzen.\r\n    <ul>\r\n       <li><code>table</code>: Die Tabelle, in der die Ersetzung ausgeführt wird.</li>\r\n       <li><code>offset</code>: Die Anzahl von Zeilen, die vor der Ersetzung übersprungen werden sollen.</li>\r\n       <li><code>count</code>: Die Anzahl der zu ersetzenden Zeilen.</li>\r\n       <li><code>rows</code>: Die Liste mit den Zeilendatensätzen, die an der durch \"<code>offset</code>\" angegebenen Position in \"<code>table</code>\" eingefügt werden sollen.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt ab Position 1 drei Zeilen in der Tabelle.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Ersetzt einen Wert in den angegebenen Spalten durch einen anderen.",
        "Documentation.LongDescription": "Ersetzt \"<code>oldValue</code>\" in den angegebenen Spalten des Elements vom Typ \"<code>table</code>\" durch \"<code>newValue</code>\".",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ersetzen Sie den Text \"goodbye\" durch \"world\" in Spalte B, der nur mit dem gesamten Wert übereinstimmt.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Ersetzen Sie den Text \"ur\" durch \"or\" in Spalte B, der mit einem beliebigen Teil des Werts übereinstimmt.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonymisieren Sie die Namen von Mitarbeitern in den USA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonymisieren Sie alle Spalten von Mitarbeitern in den USA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Teilt die angegebenen Spalten unter Verwendung der angegebenen Aufteilungsfunktion in eine Gruppe zusätzlicher Spalten auf.",
        "Documentation.LongDescription": "Teilt die angegebenen Spalten unter Verwendung der angegebenen Aufteilungsfunktion in eine Gruppe zusätzlicher Spalten auf.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Aufteilen der Spalte \"[Name]\" in zwei Spalten an der Position \"i\".",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Wandelt eine Spaltengruppe in einer Tabelle in Attribut-Wert-Paare um.",
        "Documentation.LongDescription": "Wandelt eine Spaltengruppe in einer Tabelle in Attribut-Wert-Paare um – kombiniert mit den restlichen Werten in den einzelnen Zeilen.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Entpivotiert die Spalten \"a\", \"b\" und \"c\" in der Tabelle <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> zu Attribut-Wert-Paaren.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Übersetzt alle Spalten außer einem angegebenen Satz in Attribut/Wert-Paare.",
        "Documentation.LongDescription": "Übersetzt alle Spalten mit Ausnahme eines angegebenen Satzes in Attribut-Wert-Paare in Kombination mit den restlichen Werten in jeder Zeile.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Übersetzt alle Spalten mit Ausnahme eines angegebenen Satzes in Attribut-Wert-Paare in Kombination mit den restlichen Werten in jeder Zeile.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams Personal Analytics",
        "Documentation.LongDescription": "<p>Der Teams Analytics-Connector bietet Ihnen Erkenntnisse zu Ihrer Nutzung von Teams. Es stehen sowohl Daten für Ihre persönliche Aktivität in Teams als auch Daten zu Ihrer Aktivität als Mitglied in Teams zur Verfügung.</p>\r\n<p>Die Daten decken die vergangenen 90 Tage ab. </p>\r\n<p> Informationen zu den verfügbaren Datentypen finden Sie in der folgenden Hilfedokumentation: </p>\r\n<ul>\r\n<li><b>Teams-Nutzung:</b> https://docs.microsoft.com/de-de/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Teams-Benutzeraktivität:</b> https://docs.microsoft.com/de-de/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Hiermit werden die Organisations- und Projektnamen eingegeben.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Hiermit wird eine Tabelle der über Azure DevOps bereitgestellten OData-Feeds zurückgegeben."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Gibt ein Binärformat zurück, das einen Binärwert liest.",
        "Documentation.LongDescription": "Gibt ein Binärformat zurück, das einen Binärwert liest.  Bei Angabe von <code>length</code> enthält der Binärwert diese Anzahl von Bytes.  Ist <code>length</code> nicht angegeben, enthält der Binärwert die restlichen Bytes.  Die <code>length</code> können entweder als Zahl oder als ein Binärformat der Länge angegeben werden, die den binären Daten vorausgeht.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Gibt einen logischen Wert basierend auf der Gleichheitsprüfung über die beiden angegebenen Werte zurück.",
        "Documentation.LongDescription": "Gibt einen <code>logischen</code> Wert basierend auf der Gleichheitsprüfung der beiden angegebenen Werte <code>x</code> und <code>y</code> mithilfe der Angabe von <code>comparer</code> zurück.\r\n      <div>\r\n        <code>comparer</code> ist ein <code>Comparer</code>, eine Vergleichsfunktion, die verwendet wird, um den Vergleich zu steuern.\r\n        Eine Vergleichsfunktion akzeptiert zwei Argumente und gibt -1, 0 oder 1 zurück, je nachdem, ob der erste Wert im Vergleich zum zweiten kleiner, gleich oder größer ist.\r\n        Vergleichsfunktionen können verwendet werden, um Vergleiche ohne Berücksichtigung der Groß-/Kleinschreibung oder mit Berücksichtigung von Kultur und Gebietsschema bereitzustellen.\r\n      </div>\r\n      <div>\r\n        Die folgenden integrierten Vergleichsfunktionen sind in der Formelsprache verfügbar:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Wird verwendet, um einen exakten Ordinalvergleich durchzuführen</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Wird verwendet, um einen exakten Ordinalvergleich ohne Berücksichtigung der Groß-/Kleinschreibung durchzuführen</li>\r\n        <li> <code>Comparer.FromCulture</code>: Wird verwendet, um einen Vergleich mit Berücksichtigung der Kultur durchzuführen</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Vergleichen Sie \"1\" und \"A\" mithilfe des Gebietsschemas \"en-US\", um festzustellen, ob die Werte gleich sind.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Gibt das aktuelle Datum und die aktuelle Uhrzeit in der lokalen Zeitzone zurück. Dies ist ein fester Wert, der sich bei aufeinander folgenden Aufrufen nicht ändert.",
        "Documentation.LongDescription": "Gibt einen <code>datetime</code>-Wert zurück, der auf das aktuelle Datum und die aktuelle Uhrzeit im System festgelegt ist. Dies ist ein fester Wert, der sich bei aufeinanderfolgenden Aufrufen nicht ändert. Im Gegensatz dazu kann 'DateTime.LocalNow' während der Ausführung eines Ausdrucks unterschiedliche Werte zurückgeben.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Gibt das aktuelle Datum und die aktuelle Uhrzeit in der lokalen Zeitzone zurück.",
        "Documentation.LongDescription": "Gibt einen <code>datetime</code>-Wert zurück, der auf das aktuelle Datum und die aktuelle Uhrzeit im System festgelegt ist.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Gibt das aktuelle Datum und die aktuelle Uhrzeit in der lokalen Zeitzone zurück. Dies ist ein fester Wert, der sich bei aufeinanderfolgenden Aufrufen nicht ändert.",
        "Documentation.LongDescription": "Gibt einen <code>datetime</code>-Wert zurück, der auf das aktuelle Datum und die aktuelle Uhrzeit im System festgelegt ist. Der zurückgegebene Wert enthält Zeitzoneninformationen für die lokale Zeitzone. Dies ist ein fester Wert, der sich bei aufeinanderfolgenden Aufrufen nicht ändert. Im Gegensatz dazu kann 'DateTimeZone.LocalNow' während der Ausführung eines Ausdrucks unterschiedliche Werte zurückgeben.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Gibt das aktuelle Datum und die aktuelle Uhrzeit in koordinierter Weltzeit (GMT-Zeitzone) zurück. Dies ist ein fester Wert, der sich bei aufeinanderfolgenden Aufrufen nicht ändert.",
        "Documentation.LongDescription": "Gibt das aktuelle Datum und die aktuelle Uhrzeit in koordinierter Weltzeit (GMT-Zeitzone) zurück. Dies ist ein fester Wert, der sich bei aufeinanderfolgenden Aufrufen nicht ändert.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Gibt das aktuelle Datum und die aktuelle Uhrzeit in der lokalen Zeitzone zurück.",
        "Documentation.LongDescription": "Gibt einen <code>datetimezone</code>-Wert zurück, der auf das aktuelle Datum und die aktuelle Uhrzeit im System festgelegt ist.\r\n    Der zurückgegebene Wert enthält Zeitzoneninformationen für die lokale Zeitzone.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Gibt das aktuelle Datum und die aktuelle Uhrzeit in koordinierter Weltzeit (GMT-Zeitzone) zurück.",
        "Documentation.LongDescription": "Gibt das aktuelle Datum und die aktuelle Uhrzeit in koordinierter Weltzeit (GMT-Zeitzone) zurück.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Ruft das aktuelle Datum und die aktuelle Uhrzeit in UTC ab.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Gibt einen opaque-Bezeichner für die derzeit ausgeführte Auswertung zurück.",
        "Documentation.LongDescription": "Gibt einen opaque-Bezeichner für die derzeit ausgeführte Auswertung zurück.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Gibt einen nicht transparenten Bezeichner zurück, um eingehende Anforderungen mit ausgehenden Anforderungen zu korrelieren.",
        "Documentation.LongDescription": "Gibt einen nicht transparenten Bezeichner zurück, um eingehende Anforderungen mit ausgehenden Anforderungen zu korrelieren.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Schreibt einen Ablaufverfolgungseintrag, wenn die Ablaufverfolgung aktiviert ist, und gibt den Wert zurück.",
        "Documentation.LongDescription": "Schreibt einen Ablaufverfolgungseintrag \"<code>message</code>\", wenn die Ablaufverfolgung aktiviert ist, und gibt \"<code>value</code>\" zurück. Ein optionaler Parameter \"<code>delayed</code>\" gibt an, ob die Auswertung von \"<code>value</code>\" verzögert werden soll, bis die Nachricht nachverfolgt wurde. \"<code>traceLevel</code>\" kann einen der folgenden Werte annehmen:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Verfolgen Sie die Nachricht, bevor die Text.From-Funktion aufgerufen wird, und geben Sie das Ergebnis zurück.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Der Standardidentitätsanbieter für den aktuellen Host.",
        "Documentation.LongDescription": "Der Standardidentitätsanbieter für den aktuellen Host.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Bildet einen Zusammenfassungswert auf der Grundlage der Elemente in der Liste.",
        "Documentation.LongDescription": "Bildet einen Zusammenfassungswert auf der Grundlage der Elemente in der Liste \"<code>list</code>\" (unter Verwendung von \"<code>accumulator</code>\").\r\n    Gegebenenfalls kann ein optionaler Seedparameter (<code>seed</code>) festgelegt werden.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Bildet den Zusammenfassungswert auf der Grundlage der Elemente in der Liste \"{1, 2, 3, 4, 5}\" unter Verwendung von \"((state, current) => state + current )\".",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Generiert eine Liste mit datetimezone-Werten auf der Grundlage eines Anfangswerts, einer Anzahl und eines inkrementellen duration-Werts.",
        "Documentation.LongDescription": "Gibt eine Liste mit <code>datetimezone</code>-Werten der Größe \"<code>count</code>\" ab \"<code>start</code>\" zurück. Das angegebene Inkrement (<code>step</code>) ist ein <code>duration</code>-Wert, der zu den einzelnen Werten addiert wird.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit zehn Werten. Die Liste beginnt fünf Minuten vor Neujahr (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) und besitzt eine Schrittweite von einer Minute (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Generiert eine Liste mit datetime-Werten auf der Grundlage eines Anfangswerts, einer Anzahl und eines inkrementellen duration-Werts.",
        "Documentation.LongDescription": "Gibt eine Liste mit <code>datetime</code>-Werten der Größe \"<code>count</code>\" ab \"<code>start</code>\" zurück. Das angegebene Inkrement (<code>step</code>) ist ein <code>duration</code>-Wert, der zu den einzelnen Werten addiert wird.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit zehn Werten. Die Liste beginnt fünf Minuten vor Neujahr (#datetime(2011, 12, 31, 23, 55, 0)) und besitzt eine Schrittweite von einer Minute (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Generiert eine Liste mit date-Werten auf der Grundlage eines Anfangswerts, einer Anzahl und eines inkrementellen duration-Werts.",
        "Documentation.LongDescription": "Gibt eine Liste mit <code>date</code>-Werten der Größe \"<code>count</code>\" ab \"<code>start</code>\" zurück. Das angegebene Inkrement (<code>step</code>) ist ein <code>duration</code>-Wert, der zu den einzelnen Werten addiert wird.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit 5 Werten. Die Liste beginnt mit dem 31. Dezember 2011 (#date(2011, 12, 31)) und besitzt eine Schrittweite von einem Tag (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Generiert eine Liste mit duration-Werten auf der Grundlage eines Anfangswerts, einer Anzahl und eines inkrementellen duration-Werts.",
        "Documentation.LongDescription": "Gibt eine Liste mit <code>count</code> <code>duration</code>-Werten zurück. Die Liste beginnt bei \"<code>start</code>\", und die Schrittweite entspricht dem angegebenen <code>duration</code>-Wert (<code>step</code>).",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit 5 Werten, beginnend mit 1 Stunde und einer Werteerhöhung von jeweils 1 Stunde.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Generiert eine Liste von Werten.",
        "Documentation.LongDescription": "Generiert eine Liste von Werten mithilfe der bereitgestellten Funktionen. Die Funktion <code>initial</code> generiert einen Startkandidatenwert, der dann gegen <code>condition</code> getestet wird.\r\n    Wenn der Kandidatenwert genehmigt wird, wird er als Teil der resultierenden Liste zurückgegeben, und der nächste Kandidatenwert wird generiert, indem der neu genehmigte Wert an <code>next</code> übergeben wird.\r\n    Sobald ein Kandidatenwert nicht mit <code>condition</code> übereinstimmt, wird der Listengenerierungsprozess beendet.\r\n    Ein optionaler Parameter <code>selector</code> kann ebenfalls bereitgestellt werden, um die Elemente in der resultierenden Liste zu transformieren.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Erstellen Sie eine Liste, indem Sie bei 10 beginnen, wiederholt um eins verringern und sicherstellen, dass jedes Element größer als Null ist.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Generiert eine Liste mit Datensätzen, die 'x' und 'y' enthalten, wobei 'x' einem Wert und 'y' einer Liste entspricht. 'x' sollte kleiner als 10 sein und die Anzahl der in der Liste 'y' enthaltenen Elemente darstellen. Nachdem die Liste generiert wurde, sollen nur die x-Werte zurückgegeben werden.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Fügt Werte am angegebenen Index in eine Liste ein.",
        "Documentation.LongDescription": "Gibt eine neue Liste zurück, die dadurch erzeugt wird, dass die Werte aus \"<code>values</code>\" bei \"<code>index</code>\" in \"<code>list</code>\" eingefügt werden. Die erste Position in der Liste befindet sich am Index 0.\r\n      <ul>\r\n        <li><code>list</code>: Die Zielliste, in die die Werte eingefügt werden sollen.</li>\r\n        <li><code>index</code>: Der Index der Zielliste (<code>list</code>), an dem die Werte eingefügt werden sollen. Die erste Position in der Liste befindet sich am Index 0.</li>\r\n        <li><code>values</code>: Die Liste mit Werten, die in \"<code>list</code>\" eingefügt werden sollen.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Fügt die Liste \"{3, 4}\" am Index 2 in die Zielliste \"{1, 2, 5}\" ein.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Fügt eine Liste mit einer geschachtelten Liste ({1, {1.1, 1.2}}) am Index 0 in eine Zielliste ({2, 3, 4}) ein.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Ersetzt die angegebene Anzahl von Werten ab einer bestimmten Position durch die Ersatzwerte.",
        "Documentation.LongDescription": "Ersetzt <code>count</code> Werte in \"<code>list</code>\" ab der angegebenen Position (<code>index</code>) durch die Liste \"<code>replaceWith</code>\".",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt \"{7, 8, 9}\" in der Liste \"{1, 2, 7, 8, 9, 5}\" durch \"{3, 4}\".",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Durchsucht eine Liste nach dem angegebenen Wert und ersetzt ihn.",
        "Documentation.LongDescription": "Durchsucht eine Liste mit Werten (<code>list</code>) nach dem Wert \"<code>oldValue</code>\" und ersetzt jedes Vorkommen durch den Ersatzwert \"<code>newValue</code>\".",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt alle a-Werte in der Liste \"{\"a\", \"B\", \"a\", \"a\"}\" durch \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Generiert eine Liste mit time-Werten auf der Grundlage eines Anfangswerts, einer Anzahl und eines inkrementellen duration-Werts.",
        "Documentation.LongDescription": "Gibt eine Liste mit <code>time</code>-Werten der Größe \"<code>count</code>\" ab \"<code>start</code>\" zurück. Das angegebene Inkrement (<code>step</code>) ist ein <code>duration</code>-Wert, der zu den einzelnen Werten addiert wird.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit vier Werten. Die Liste beginnt mittags (#time (12, 0, 0)) und besitzt eine Schrittweite von einer Stunde (#duration (0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Gibt eine Liste auf der Grundlage der Eingabeliste zurück, deren Elemente mithilfe der angegebenen Funktionen transformiert wurden.",
        "Documentation.LongDescription": "Gibt eine Liste zurück, deren Elemente aus der Eingabeliste projiziert werden.<br>\r\n    <br>\r\n    Die Funktion „<code>collectionTransform</code>“ transformiert jedes Element in eine Zwischenliste, und die Funktion „<code>resultTransform</code>“ empfängt das ursprüngliche Element sowie ein Element aus der Zwischenliste, um das endgültige Ergebnis zu erstellen. <br>\r\n    <br>\r\n    Die Funktion „<code>collectionTransform</code>“ besitzt die Signatur „<code>(x as any) as list => ...</code>“, wobei „<code>x</code>“ ein Element in <code>list</code> ist.\r\n    Die Funktion „<code>resultTransform</code>“ projiziert die Form des Ergebnisses und besitzt die Signatur „<code>(x as any, y as any) as any => ...</code>“, wobei „<code>x</code>“ ein Element in <code>list</code> und „<code>y</code>“ ein Element aus der Liste ist, das durch Übergeben von „<code>x</code>“ an <code>collectionTransform</code> generiert wird.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vereinfachen Sie eine Liste von Personen und ihren Haustieren.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Gibt eine Zufallszahl zurück.",
        "Documentation.LongDescription": "Gibt eine Zufallszahl zwischen 0 und 1 zurück.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Ruft eine Zufallszahl ab.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.LongDescription": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Fügt einem Datensatz ein Feld hinzu.",
        "Documentation.LongDescription": "Fügt einem Datensatz (<code>record</code>) auf der Grundlage des Feldnamens (<code>fieldName</code>) und -werts (<code>value</code>) ein Feld hinzu.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Fügt dem Datensatz das Feld \"Address\" hinzu.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Ersetzt Text innerhalb der angegebenen Eingabe.",
        "Documentation.LongDescription": "Ersetzt den Text \"<code>old</code>\" in der ursprünglichen Eingabe (<code>text</code>) durch den Text \"<code>new</code>\". Diese Ersetzungsfunktion kann in <code>List.ReplaceValue</code> und <code>Table.ReplaceValue</code> verwendet werden.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt den Text \"hE\" in der Zeichenfolge \"hEllo world\" durch \"He\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Ersetzt Werte innerhalb der angegebenen Eingabe.",
        "Documentation.LongDescription": "Ersetzt den Wert \"<code>old</code>\" in der ursprünglichen Eingabe \"<code>value</code>\" durch den Wert \"<code>new</code>\". Diese Ersetzungsfunktion kann in <code>List.ReplaceValue</code> und <code>Table.ReplaceValue</code> verwendet werden.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt den Wert 11 durch den Wert 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Gibt ein JSON-Ergebnis aus der Smartsheet-API zurück.",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Ruft die Smartsheet 2.0-REST-API am angegebenen Endpunkt auf und gibt die Ergebnisse als JSON-Datensatz zurück.",
        "Documentation.Examples": [
          {
            "Description": "Ruft unter Angabe zusätzlicher Argumente Daten vom Smartsheet-API-Endpunkt für Arbeitsblätter ab.",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Eine Tabelle mit Arbeitsblattinformationen, wie sie von der Smartsheet-API zurückgegeben werden"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Gibt eine Funktion ohne Aufteilung zurück. Das Argument wird als einzelne Elementliste zurückgegeben.",
        "Documentation.LongDescription": "Gibt eine Funktion ohne Aufteilung zurück. Das Argument wird als einzelne Elementliste zurückgegeben.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Gibt eine Funktion zurück, die Text an den Leerzeichen zu einer Liste mit Text aufteilt.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die Text an den Leerzeichen zu einer Liste mit Text aufteilt.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Teilen Sie die Eingabe durch Leerzeichen auf, und behandeln Sie Anführungszeichen wie alle anderen Zeichen.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Unterteilt die Tabelle auf der Grundlage der Gruppenanzahl und der angegebenen Spalte in eine Liste mit Tabellen.",
        "Documentation.LongDescription": "Unterteilt das Element vom Typ \"<code>table</code>\" in eine Liste mit der angegebenen Anzahl von Tabellen (<code>groups</code>) auf der Grundlage des Werts für \"<code>column</code>\" und einer Funktion vom Typ \"<code>hash</code>\".\r\n    Die Funktion \"<code>hash</code>\" wird auf den Wert der Zeile \"<code>column</code>\" angewendet, um einen Hashwert für die Zeile abzurufen. Das Hashwertmodulo \"<code>groups</code>\" bestimmt, in welcher der zurückgegebenen Tabellen die Zeile platziert wird.\r\n    <ul>\r\n       <li><code>table</code>: Die aufzuteilende Tabelle.</li>\r\n       <li><code>column</code>: Die Spalte, für die ein Hashwert erstellt werden soll, um zu bestimmen, in welcher zurückgegebenen Tabelle sich die Zeile befindet.</li>\r\n       <li><code>groups</code>: Die Anzahl von Tabellen, in die die Eingabetabelle unterteilt wird.</li>\r\n       <li><code>hash</code>: Die zum Erstellen eines Hashwerts angewendete Funktion.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Unterteilt die Tabelle <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> auf der Grundlage von Spalte \"[a]\" in zwei Tabellen, wobei der Wert der Spalten als Hashfunktion verwendet wird.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Gibt den Teil von \"<code>text</code>\" zwischen der Angabe von \"<code>startDelimiter</code>\" und \"<code>endDelimiter</code>\" zurück.\r\n    Ein optionaler numerischer Wert <code>startIndex</code> gibt an, welches Vorkommen von \"<code>startDelimiter</code>\" berücksichtigt werden soll.\r\n    Ein optionaler Listenwert \"<code>startIndex</code>\" gibt an, welches Vorkommen von \"<code>startDelimiter</code>\" berücksichtigt werden soll. Außerdem wird angegeben, ob die Indizierung vom Beginn oder vom Ende der Eingabe aus erfolgen soll.\r\n    \"<code>endIndex</code>\" ist ähnlich, die Indizierung erfolgt hier jedoch relativ zu \"<code>startIndex</code>\".",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Hiermit wird der Teil \"111 (222) 333 (444)\" zwischen der (ersten) öffnenden Klammer und der folgenden (zweiten) schließenden Klammer abgerufen.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Hiermit wird der Teil \"111 (222) 333 (444)\" zwischen der zweiten öffnenden Klammer und der folgenden ersten schließenden Klammer abgerufen.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Hiermit wird der Teil \"111 (222) 333 (444)\" zwischen der vom Ende aus gesehen zweiten öffnenden Klammer und der folgenden zweiten schließenden Klammer abgerufen.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Fügt einen Textwert an einer angegebenen Position in einen anderen Textwert ein.",
        "Documentation.LongDescription": "Gibt das Ergebnis zurück, das entsteht, wenn der Textwert \"<code>newText</code>\" an der Position <code>offset</code> in den Textwert \"<code>text</code>\" eingefügt wird. Positionen beginnen bei 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Fügt \"C\" zwischen \"B\" und \"D\" in \"ABD\" ein.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Gibt eine neue, zufällige GUID (Globally Unique Identifier) zurück.",
        "Documentation.LongDescription": "Gibt eine neue, zufällige GUID (Globally Unique Identifier) zurück.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Ersetzt alle Vorkommen der angegebenen Teilzeichenfolge im Text.",
        "Documentation.LongDescription": "Gibt das Ergebnis zurück, das entsteht, wenn alle Vorkommen des Textwerts \"<code>old</code>\" im Textwert \"<code>text</code>\" durch den Textwert \"<code>new</code>\" ersetzt werden. Bei dieser Funktion wird die Groß-/Kleinschreibung berücksichtigt.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt alle Vorkommen von \"the\" in einen Satz durch \"a\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Entfernt an einer angegebenen Position einen Bereich von Zeichen und fügt einen neuen Wert ein.",
        "Documentation.LongDescription": "Gibt das Ergebnis zurück, das entsteht, wenn eine Reihe von Zeichen (<code>count</code>) ab der Position <code>offset</code> aus dem Textwert \"<code>text</code>\" entfernt und anschließend der Textwert \"<code>newText</code>\" an der gleichen Position in \"<code>text</code>\" eingefügt wird.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Ersetzt ein einzelnes Zeichen an Position 2 des Textwerts \"ABGF\" durch den neuen Textwert \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Fügt dem angegebenen Tabellentyp einen Schlüssel hinzu.",
        "Documentation.LongDescription": "Fügt dem angegebenen Tabellentyp einen Schlüssel hinzu.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Gibt eine Liste der Identitäten zurück, die die Bedingung akzeptiert.",
        "Documentation.LongDescription": "<p>\"<code>condition</code>\" wird unter Verwendung der angegebenen \"<code>identityProvider</code>\" in die Liste der Identitäten konvertiert, für die \"<code>condition</code>\" in allen Autorisierungskontexten mit \"<code>identityProvider</code>\" als Identitätsanbieter <code>TRUE</code> zurückgeben würde. Es kommt zu einem Fehler, wenn es nicht möglich ist, \"<code>condition</code>\" in eine Liste mit Identitäten zu konvertieren, z. B. wenn \"<code>condition</code>\" andere Attribute als Benutzer- oder Gruppenidentitäten für die Entscheidungsfindung heranzieht.</p>\r\n    <p>Beachten Sie, dass die Liste die Identitäten darstellt, wie sie in \"<code>condition</code>\" erscheinen, und dass keine Normalisierung (z. B. eine Gruppenerweiterung) durchgeführt wird.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.LongDescription": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Komprimiert einen binären Wert mithilfe des angegebenen Komprimierungstyps.",
        "Documentation.LongDescription": "Komprimieren eines binären Werts mithilfe des angegebenen Komprimierungstyps. Das Ergebnis dieses Aufrufs ist eine komprimierte Kopie der Eingabe. Unter anderem sind die folgenden Komprimierungstypen verfügbar:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Komprimieren des binären Werts.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Dekomprimiert einen Binärwert mithilfe des angegebenen Komprimierungstyps.",
        "Documentation.LongDescription": "Dekomprimiert einen Binärwert mithilfe des angegebenen Komprimierungstyps.  Das Ergebnis dieses Aufrufs ist eine dekomprimierte Kopie der Eingabe. Unter anderem sind folgende Komprimierungstypen verfügbar:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekomprimiert den Binärwert.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Gibt eine Teilmenge des Binärwerts ab einem Offset zurück.",
        "Documentation.LongDescription": "Gibt eine Teilmenge des Binärwerts ab dem Offset \"<code>binary</code>\" zurück. Die maximale Länge der Teilmenge kann mithilfe eines optionalen Parameters (<code>offset</code>) festgelegt werden.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Gibt eine Teilmenge des Binärwerts ab Offset 6 zurück.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Gibt eine Teilmenge des Binärwerts mit der Länge 2 ab Offset 6 zurück.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Teilt die angegebene Binärdatei unter Verwendung der angegebenen Seitengröße in eine Liste von Binärdateien auf.",
        "Documentation.LongDescription": "Teilt <code>binary</code> in eine Liste von Binärdateien auf, wobei das erste Element der Ausgabeliste eine Binärdatei ist, welche die ersten <code>pageSize</code> Bytes aus\r\n    der Quellbinärdatei enthält. Das nächste Element der Ausgabeliste ist eine Binärdatei, welche die nächsten <code>pageSize</code> Bytes aus der Quellbinärdatei enthält, und so weiter.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Erstellt oder erweitert eine Binärdatei mit benutzerdefinierten Handlern für Abfrage- und Aktionsvorgänge.",
        "Documentation.LongDescription": "<p>Gibt eine Ansicht von <code>binary</code> zurück. Dabei werden die in <code>handlers</code> angegebenen Funktionen anstelle des Standardverhaltens eines Vorgangs verwendet, wenn der Vorgang auf die Ansicht angewendet wird.</p>\r\n<p>Wenn <code>binary</code> angegeben ist, sind alle Handlerfunktionen optional. Wenn <code>binary</code> nicht angegeben ist, ist die <code>GetStream</code>-Handlerfunktion erforderlich. Wenn eine Handlerfunktion für einen Vorgang nicht angegeben wird, wird stattdessen das Standardverhalten des Vorgangs auf <code>binary</code> angewendet (mit Ausnahme von <code>GetExpression</code>).</p>\r\n<p>Handlerfunktionen müssen einen Wert zurückgeben, der semantisch dem Ergebnis der Anwendung des Vorgangs auf <code>binary</code> (oder im Fall von <code>GetExpression</code> der sich ergebenden Ansicht) entspricht.</p>\r\n<p>Wenn eine Handlerfunktion einen Fehler auslöst, wird das Standardverhalten des Vorgangs auf die Ansicht angewendet.</p>\r\n<p><code>Binary.View</code> kann zum Implementieren der Faltung zu einer Datenquelle angewendet werden – die Übersetzung von M-Abfragen in quellspezifische Vorgänge (z. B. zum Herunterladen eines Abschnitts einer Datei).</p>\r\n<p>Eine umfassendere Beschreibung von <code>Binary.View</code> finden Sie in der veröffentlichten Dokumentation des benutzerdefinierter Power Query-Connectors.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Erstellen Sie eine Basisansicht, für die kein Zugriff auf die Daten erforderlich ist, um die Länge zu bestimmen.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Gibt ein Binärformat mit der durch eine Funktion angegebenen Bytereihenfolge zurück.",
        "Documentation.LongDescription": "Gibt ein Binärformat mit der durch \"<code>binaryFormat</code>\" angegebenen Bytereihenfolge zurück.  Die standardmäßige Bytereihenfolge lautet <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Gibt ein Binärformat zurück, das das nächste Binärformat auf der Grundlage eines bereits gelesenen Werts auswählt.",
        "Documentation.LongDescription": "Gibt ein Binärformat zurück, das das nächste Binärformat auf der Grundlage eines bereits gelesenen Werts auswählt.  Der Wert im Binärformat, der von dieser Funktion erzeugt wird, besitzt mehrere Phasen:<ul>\r\n<li>Das durch den Parameter '<code>binaryFormat</code>' angegebene Binärformat wird verwendet, um einen Wert zu lesen.</li>\r\n<li>Der Wert wird an die durch den Parameter '<code>chooseFunction</code>' angegebene Auswahlfunktion übergeben.</li>\r\n<li>Die Auswahlfunktion überprüft den Wert und gibt ein zweites Binärformat zurück.</li>\r\n<li>Das zweite Binärformat wird verwendet, um einen zweiten Wert zu lesen.</li>\r\n<li>Wenn die Zusammenfassungsfunktion angegeben ist, werden der erste und zweite Wert an die Zusammenfassungsfunktion übergeben und der resultierende Wert zurückgegeben.</li>\r\n<li>Wenn die Zusammenfassungsfunktion nicht angegeben ist, wird der zweite Wert zurückgegeben.</li>\r\n<li>Der zweite Wert wird zurückgegeben.</li>\r\n</ul>Der optionale Parameter '<code>type</code>' gibt die Art des Binärformats an, das von der Auswahlfunktion zurückgegeben wird.  Sie können entweder <code>type any</code>, <code>type list</code> oder <code>type binary</code> angeben.  Ohne Angabe des Parameters '<code>type</code>' wird <code>type any</code> verwendet.   Bei Verwendung von <code>type list</code> oder <code>type binary</code> kann vom System u. U. anstelle eines gepufferten Werts ein <code>binary</code>- oder <code>list</code>-Streamingwert zurückgegeben werden, wodurch sich ggf. der Arbeitsspeicherbedarf beim Lesen des Formats verringert.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Liest eine Liste mit Bytes, bei der die Anzahl von Elementen durch das erste Byte bestimmt wird.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Liest eine Liste mit Bytes, bei der die Anzahl von Elementen durch das erste Byte bestimmt wird, und behält das erste gelesene Byte bei.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Liest eine Liste mit Bytes, bei der die Anzahl von Elementen durch das erste Byte bestimmt wird, unter Verwendung einer Streamingliste.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Gibt ein Binärformat zurück, das eine Gruppe von Elementen liest.",
        "Documentation.LongDescription": "Die Parameter lauten wie folgt:\r\n<ul>\r\n<li>Der Parameter <code>binaryFormat</code> gibt das Binärformat des Schlüsselwerts an.</li>\r\n<li>Der Parameter <code>group</code> bietet Informationen zur Gruppe der bekannten Elemente.</li>\r\n<li>Der optionale Parameter <code>extra</code> kann verwendet werden, um eine Funktion anzugeben, die einen Binärformatwert für den Wert nach einem unerwarteten Schlüssel zurückgibt. Wenn der Parameter <code>extra</code> nicht angegeben wird, tritt bei unerwarteten Schlüsselwerten ein Fehler auf.</li>\r\n</ul>\r\nDer Parameter <code>group</code> gibt eine Liste mit Elementdefinitionen an. Jede Elementdefinition ist eine Liste mit 3 bis 5 Werten:\r\n<ul>\r\n<li>Schlüsselwert: Der Wert des Schlüssels, der dem Element entspricht. Dieser muss in der Gruppe von Elementen eindeutig sein.</li>\r\n<li>Elementformat. Das Binärformat, das dem Wert des Elements entspricht. Dies ermöglicht, dass jedes Element ein anderes Format aufweist. </li>\r\n<li>Elementvorkommen. Der <code>BinaryOccurrence.Type</code>-Wert, der angibt, wie oft das Element erwartungsgemäß in der Gruppe angezeigt wird. Erforderliche Elemente, die nicht vorhanden sind, verursachen einen Fehler. Erforderliche oder optionale Duplikatelemente werden wie nicht behandelte Schlüsselwerte behandelt.</li>\r\n<li>Standardelementwert (optional). Wenn der Standardelementwert in der Elementdefinitionsliste angezeigt wird und nicht NULL ist, wird dieser Wert anstelle des Standardwerts angezeigt. Der Standardwert für wiederkehrende oder optionale Elemente ist NULL. Der Standardwert für wiederkehrende Werte ist eine leere Liste { }.</li>\r\n<li>Elementwerttransformation (optional). Wenn die Funktion für die Elementwerttransformation in der Elementdefinitionsliste vorhanden und nicht NULL ist, wird sie aufgerufen, um den Elementwert zu transformieren, bevor er zurückgegeben wird. Die Transformationsfunktion wird nur aufgerufen, wenn das Element in der Eingabe vorhanden ist. (Es wird nie mit dem Standardwert aufgerufen.) </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Nachstehend wird von Folgendem ausgegangen: Schlüsselwert mit einem Byte und 4 erwarteten Elementen in der Gruppe, die nach dem Schlüssel ein Byte Daten aufweisen.  Die Elemente werden in der Eingabe wie folgt angezeigt:\r\n<ul>\r\n<li>Schlüssel 1 ist erforderlich und wird nicht mit Wert 11 angezeigt.</li>\r\n<li>Schlüssel 2 wird wiederholt, zweimal mit Wert 22 angezeigt und führt zu einem Wert von { 22, 22 }.</li>\r\n<li>Schlüssel 3 ist optional, wird nicht angezeigt und führt zum Wert NULL.</li>\r\n<li>Schlüssel 4 wird wiederholt, jedoch nicht angezeigt und führt zu einem Wert von { }.</li>\r\n<li>Schlüssel 5 ist nicht Teil der Gruppe, wird jedoch einmal mit Wert 55 angezeigt.  Die zusätzliche Funktion wird mit dem Schlüsselwert 5 aufgerufen und gibt das Format zurück, das diesem Wert entspricht (BinaryFormat.Byte).  Der Wert 55 wird gelesen und verworfen.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Das folgende Beispiel veranschaulicht die Elementwerttransformation und den Standardelementwert.   Das wiederkehrende Element mit Schlüssel 1 summiert die Liste der gelesenen Werte mit List.Sum.  Das optionale Element mit Schlüssel 2 weist einen Standardwert von 123 statt NULL auf.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Gibt ein Binärformat zurück, das die zu lesende Datenmenge einschränkt.",
        "Documentation.LongDescription": "Gibt ein Binärformat zurück, das die lesbare Datenmenge einschränkt.  Sowohl mit <code>BinaryFormat.List</code> als auch mit <code>BinaryFormat.Binary</code> kann bis zum Ende der Daten gelesen werden.  Mit <code>BinaryFormat.Length</code> kann die Anzahl der zu lesenden Bytes eingeschränkt werden.  Der Parameter <code>binaryFormat</code> gibt das einzuschränkende Binärformat an.  Der Parameter <code>length</code> gibt die Anzahl der zu lesenden Bytes an.  Der Parameter <code>length</code> kann entweder ein Zahlenwert oder ein Binärformatwert sein, der das Format des angezeigten Längenwerts angibt, der dem gelesenen Wert vorausgeht.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Beschränkt die Anzahl der zu lesenden Bytes beim Lesen einer Liste mit Bytes auf zwei.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Schränken Sie die Anzahl der gelesenen Byte beim Lesen einer Liste von Bytes auf den Byte-Wert ein, welcher der Liste vorausgeht.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Gibt ein Binärformat zurück, das die von einem anderen Binärformat gelesenen Werte transformiert.",
        "Documentation.LongDescription": "Gibt ein Binärformat zurück, das die von einem anderen Binärformat gelesenen Werte transformiert.  Der Parameter \"<code>binaryFormat</code>\" gibt das Binärformat an, das zum Lesen des Werts verwendet wird.  \"<code>function</code>\" wird mit dem gelesenen Wert aufgerufen und gibt den transformierten Wert zurück.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Liest ein Byte und fügt eins hinzu.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Gibt eine Vergleichsfunktion zurück, die Aufzählungsregeln für den Vergleich von Werten verwendet.",
        "Documentation.LongDescription": "Gibt eine Vergleichsfunktion zurück, die Ordinalregeln verwendet, um die angegebenen Werte <code>x</code> und <code>y</code> zu vergleichen.<br>\r\n        <br>\r\n        Eine Vergleichsfunktion akzeptiert zwei Argumente und gibt -1, 0 oder 1 zurück, je nachdem, ob der erste Wert im Vergleich zum zweiten kleiner, gleich oder größer ist.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Vergleichen Sie mithilfe von Aufzählungsregeln, ob \"encyclopædia\" und \"encyclopaedia\" äquivalent sind. Beachten Sie, dass sie bei Verwendung von <code>Comparer.FromCulture(\"en-US\")</code> äquivalent sind. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Gibt eine Vergleichsfunktion zurück, die Aufzählungsregeln für den Vergleich von Werten ohne Berücksichtigung der Groß-/Kleinschreibung verwendet.",
        "Documentation.LongDescription": "Gibt eine Vergleichsfunktion ohne Unterscheidung nach Groß-/Kleinschreibung zurück, die Ordinalregeln verwendet, um die angegebenen Werte <code>x</code> und <code>y</code> zu vergleichen.<br>\r\n        <br>\r\n        Eine Vergleichsfunktion akzeptiert zwei Argumente und gibt -1, 0 oder 1 zurück, je nachdem, ob der erste Wert im Vergleich zum zweiten kleiner, gleich oder größer ist.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Vergleichen Sie \"Abc\" mit \"abc\", und verwenden Sie dazu Aufzählungsregeln, die nicht zwischen Groß- und Kleinschreibung unterscheiden. Hinweis: Bei Verwendung von <code>Comparer.Ordinal</code> ist \"Abc\" kleiner als \"abc\". ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Gibt eine Eigenschaft eines Dimensionsattributs zurück.",
        "Documentation.LongDescription": "Gibt die Eigenschaft \"<code>propertyName</code>\" des Dimensionsattributs \"<code>attribute</code>\" zurück.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Gibt eine Eigenschaft eines Measures (Zelleigenschaft) zurück.",
        "Documentation.LongDescription": "Gibt die Eigenschaft \"<code>propertyName</code>\" des Measures \"<code>measure</code>\" zurück.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL-Abfragequelle",
        "Documentation.LongDescription": "Definieren einer Databricks-Datenquelle zum Ausführen von SQL-Abfragen"
      },
      "ReturnType": "Databricks-SQL-Abfrage",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL-Abfragequelle",
        "Documentation.LongDescription": "Definieren einer Databricks-Datenquelle zum Ausführen von SQL-Abfragen"
      },
      "ReturnType": "Databricks-SQL-Abfrage",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Addiert die angegebenen Tage zum Datum.",
        "Documentation.LongDescription": "Gibt das <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Ergebnis zurück, das sich aus der Addition von <code>numberOfDays</code> Tagen zum <code>datetime</code>-Wert '<code>dateTime</code>' ergibt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Der <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, zu dem Tage addiert werden.</li>\r\n      <li><code>numberOfDays</code>: Die Anzahl der zu addierenden Tage.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Addiert fünf Tage zum <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert für den 14.05.2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Addiert die angegebenen Monate zum Datum.",
        "Documentation.LongDescription": "Gibt das <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Ergebnis der Addition von <code>numberOfMonths</code> Monaten zum <code>datetime</code>-Wert \"<code>dateTime</code>\" zurück.\r\n      <ul>\r\n        <li><code>dateTime</code>: Der <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, zu dem Monate addiert werden.</li>\r\n        <li><code>numberOfMonths</code>: Die Anzahl der zu addierenden Monate.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Addiert fünf Monate zum <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert für den 14.05.2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Addiert 18 Monate zum <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert für den 14.05.2011, 08:15:22 Uhr.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Addiert die angegebenen Quartale zum Datum.",
        "Documentation.LongDescription": "Gibt das <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Ergebnis zurück, das sich aus der Addition von <code>numberOfQuarters</code> Quartalen zum <code>datetime</code>-Wert '<code>dateTime</code>' ergibt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Der <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, zu dem Quartale addiert werden.</li>\r\n      <li><code>numberOfQuarters</code>: Die Anzahl der zu addierenden Quartale.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Addiert ein Quartal zum <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert für den 14.05.2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Addiert die angegebenen Wochen zum Datum.",
        "Documentation.LongDescription": "Gibt das <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Ergebnis zurück, das sich aus der Addition von <code>numberOfWeeks</code> Wochen zum <code>datetime</code>-Wert '<code>dateTime</code>' ergibt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Der <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, zu dem Wochen addiert werden.</li>\r\n      <li><code>numberOfWeeks</code>: Die Anzahl der zu addierenden Wochen.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Addiert zwei Wochen zum <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert für den 14.05.2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Addiert die angegebenen Jahre zum Datum.",
        "Documentation.LongDescription": "Gibt das <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Ergebnis der Addition von <code>numberOfYears</code> Jahr(en) zum <code>datetime</code>-Wert \"<code>dateTime</code>\" zurück.\r\n      <ul>\r\n        <li><code>dateTime</code>: Der <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, zu dem Jahre addiert werden.</li>\r\n        <li><code>numberOfYears</code>: Die Anzahl der zu addierenden Jahre.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Addiert vier Jahre zum <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert für den 14.05.2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Addiert 10 Jahre zum <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert für den 14.05.2011, 08:15:22 Uhr.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der nächsten Anzahl von Tagen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Tags auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Anzahl von Tagen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Tags auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>days</code>: Die Anzahl von Tagen.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob der Tag nach der aktuellen Systemzeit innerhalb der nächsten zwei Tage liegt.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der nächsten Anzahl von Monaten auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Monats auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Anzahl von Monaten auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Monats auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>months</code>: Die Anzahl von Monaten.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob der Monat nach der aktuellen Systemzeit innerhalb der nächsten zwei Monate liegt.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der nächsten Anzahl von Quartalen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Quartals auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Anzahl von Quartalen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Quartals auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>quarters</code>: Die Anzahl von Quartalen.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob das Quartal nach der aktuellen Systemzeit innerhalb der nächsten zwei Quartale liegt.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der nächsten Anzahl von Wochen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Woche auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Anzahl von Wochen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Woche auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>weeks</code>: Die Anzahl von Wochen.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die Woche nach der aktuellen Systemzeit innerhalb der nächsten zwei Wochen liegt.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der nächsten Anzahl von Jahren auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Jahrs auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Anzahl von Jahren auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Jahrs auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>years</code>: Die Anzahl von Jahren.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob das Jahr nach der aktuellen Systemzeit innerhalb der nächsten zwei Jahre liegt.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der vorherigen Anzahl von Tagen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Tags auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Anzahl von Tagen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Tags auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>days</code>: Die Anzahl von Tagen.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob der Tag vor der aktuellen Systemzeit innerhalb der vergangenen zwei Tage liegt.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der vorherigen Anzahl von Monaten auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Monats auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Anzahl von Monaten auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Monats auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>months</code>: Die Anzahl von Monaten.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob der Monat vor der aktuellen Systemzeit innerhalb der vergangenen zwei Monate liegt.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der vorherigen Anzahl von Quartalen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Quartals auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Anzahl von Quartalen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Quartals auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>quarters</code>: Die Anzahl von Quartalen.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob das Quartal vor der aktuellen Systemzeit innerhalb der vergangenen zwei Quartale liegt.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der vorherigen Anzahl von Wochen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Woche auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Anzahl von Wochen auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Woche auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>weeks</code>: Die Anzahl von Wochen.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die Woche vor der aktuellen Systemzeit innerhalb der vergangenen zwei Wochen liegt.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der vorherigen Anzahl von Jahren auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Jahrs auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Anzahl von Jahren auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Jahrs auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      <li><code>years</code>: Die Anzahl von Jahren.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob das Jahr vor der aktuellen Systemzeit innerhalb der vergangenen zwei Jahre liegt.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Fügt dem Datum/Uhrzeit-Wert Zeitzoneninformationen hinzu.",
        "Documentation.LongDescription": "Fügt dem Wert <code>dateTime</code> Zeitzoneninformationen hinzu. Die Zeitzoneninformationen umfassen <code>timezoneHours</code> und optional <code>timezoneMinutes</code>, die den gewünschten Offset von der UTC-Zeit angeben.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Legen Sie die Zeitzone auf UTC+7:30 fest (7 Stunden und 30 Minuten nach UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der nächsten Anzahl von Stunden auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Stunde auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Anzahl von Stunden auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Stunde auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      <li><code>hours</code>: Die Anzahl der Stunden.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Stunde nach der aktuellen Systemzeit in den nächsten zwei Stunden liegt.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der nächsten Anzahl von Minuten auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Minute auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Anzahl von Minuten auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Minute auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      <li><code>minutes</code>: Die Anzahl der Minuten.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Minute nach der aktuellen Systemzeit in den nächsten zwei Minuten liegt.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der nächsten Anzahl von Sekunden auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Sekunde auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Anzahl von Sekunden auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Sekunde auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      <li><code>seconds</code>: Die Anzahl der Sekunden.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Sekunde nach der aktuellen Systemzeit in den nächsten zwei Sekunden liegt.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der vorherigen Anzahl von Stunden auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Stunde auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Anzahl von Stunden auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Stunde auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      <li><code>hours</code>: Die Anzahl der Stunden.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Stunde vor der aktuellen Systemzeit in den vorherigen zwei Stunden liegt.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der vorherigen Anzahl von Minuten auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Minute auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert <code>dateTime</code> während der vorherigen Anzahl von Minuten auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Minute auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      <li><code>minutes</code>: Die Anzahl der Minuten.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Minute vor der aktuellen Systemzeit in den vorherigen zwei Minuten liegt.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der vorherigen Anzahl von Sekunden auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Sekunde auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert <code>dateTime</code> während der vorherigen Anzahl von Sekunden auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Sekunde auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      <li><code>seconds</code>: Die Anzahl der Sekunden.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Sekunde vor der aktuellen Systemzeit in den vorherigen zwei Sekunden liegt.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Ändert die Zeitzone des Werts.",
        "Documentation.LongDescription": "Ändert die Zeitzoneninformationen des datetimezone-Werts \"<code>dateTimeZone</code>\" in die neuen Zeitzoneninformationen, die von \"<code>timezoneHours</code>\" (und optional von \"<code>timezoneMinutes</code>\") angegeben wurden.\r\n    Besitzt \"<code>dateTimeZone</code>\" keine Zeitzonenkomponente, wird eine Ausnahme ausgelöst.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Ändert die Zeitzoneninformationen für \"#datetimezone (2010, 12, 31, 11, 56, 02, 7, 30)\" in 8 Stunden.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Ändert die Zeitzoneninformationen für '#datetimezone (2010, 12, 31, 11, 56, 02, 7, 30)' in -30 Minuten.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Greift anhand des Namens auf einen Wert in einem eingebetteten Mashup zu.",
        "Documentation.LongDescription": "Greift anhand des Namens auf einen Wert in einem eingebetteten Mashup zu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Erstellt eine Funktion mit einer bestimmten Parametersignatur basierend auf einer Funktion, die ein einzelnes Listenargument verwendet.",
        "Documentation.LongDescription": "Erstellt anhand einer unären Funktion \"<code>function</code>\" eine neue Funktion des Typs \"<code>functionType</code>\", die eine Liste aus ihren Argumenten zusammenstellt und an \"<code>function</code>\" übergibt.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert \"List.Sum\" in eine Funktion mit zwei Argumenten, deren Argumente addiert werden.",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Konvertiert eine Funktion, die eine Liste verwendet, in eine Funktion mit zwei Argumenten.",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Ruft die angegebene Funktion auf.",
        "Documentation.LongDescription": "Ruft die angegebene Funktion unter Verwendung der angegebenen Liste mit Argumenten auf und gibt das Ergebnis zurück.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Ruft \"Record.FieldNames\" mit einem Argument ([A=1,B=2]) auf.",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Ruft die angegebene Funktion auf, nachdem die angegebene Dauer verstrichen ist.",
        "Documentation.LongDescription": "Gibt das Ergebnis des Aufrufs von '<code>function</code>' nach dem Ablauf der Dauer <code>delay</code> zurück.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.LongDescription": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Hiermit wird eine Skalarfunktion basierend auf einer Vektorfunktion erstellt, sodass mehrere Aufrufe in einem Batch zusammengefasst werden.",
        "Documentation.LongDescription": "<p>Hiermit wird eine Skalarfunktion vom Typ \"<code>scalarFunctionType</code>\" zurückgegeben, die \"<code>vectorFunction</code>\" mit einer einzigen Zeile mit Argumenten aufruft und eine einzelne Ausgabe zurückgibt. Wenn die Skalarfunktion wiederholt auf jede Zeile einer Tabelle mit Eingaben angewendet wird (z. B. \"Table.AddColumn\"), wird \"<code>vectorFunction</code>\" stattdessen einmalig für alle Eingaben angewendet.</p>\r\n<p>An \"<code>vectorFunction</code>\" wird eine Tabelle übergeben, deren Spalten im Hinblick auf Name und Position den Parametern von \"<code>scalarFunctionType</code>\" entsprechen. Jede Zeile dieser Tabelle enthält die Argumente für einen Aufruf der Skalarfunktion, wobei die Spalten den Parametern von \"<code>scalarFunctionType</code>\" entsprechen.</p>\r\n<p>\"<code>vectorFunction</code>\" muss eine Liste der gleichen Länge zurückgeben wie die Eingabetabelle, deren Element an jeder Position das gleiche Ergebnis aufweisen muss wie die Auswertung der Skalarfunktion für die Eingabezeile derselben Position.</p>\r\n<p>Die Eingabetabelle wird als Streamingtabelle vorausgesetzt, deshalb wird für \"<code>vectorFunction</code>\" erwartet, dass die zugehörige Ausgabe zeitgleich mit dem Empfang der Eingabe gestreamt wird. Hierbei werden die einzelnen Eingabeblöcke nacheinander verarbeitet. Insbesondere darf \"<code>vectorFunction</code>\" die zugehörige Eingabetabelle nicht mehrfach auflisten.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Hiermit wird ein Datensatz erstellt, der einen geografischen Punkt anhand seiner Bestandteile darstellt.",
        "Documentation.LongDescription": "Hiermit wird ein Datensatz erstellt, der einen geografischen Punkt anhand seiner Bestandteile darstellt, z. B. Längengrad, Breitengrad und – sofern vorhanden – Höhe über NN (Z) und Maßeinheit (M). Anstelle des Standardwerts (4326) kann eine optionale Raumbezugskennung (SRID) angegeben werden.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Hiermit wird ein Datensatz erstellt, der einen geometrischen Punkt anhand seiner Bestandteile darstellt.",
        "Documentation.LongDescription": "Hiermit wird ein Datensatz erstellt, der einen geometrischen Punkt anhand seiner Bestandteile darstellt, z. B. X-Koordinate, Y-Koordinate und – sofern vorhanden – Z-Koordinate (Z) und Maßeinheit (M). Anstelle des Standardwerts (0) kann eine optionale Raumbezugskennung (SRID) angegeben werden.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Erstellt eine Identität.",
        "Documentation.LongDescription": "Erstellt eine Identität.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Bestimmt, ob eine Identität ein Mitglied einer Identitätssammlung ist.",
        "Documentation.LongDescription": "Bestimmt, ob eine Identität ein Mitglied einer Identitätssammlung ist.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Gibt eine Liste mit allen ungeraden Offsetelementen einer Liste zurück.",
        "Documentation.LongDescription": "Gibt eine Liste mit allen ungeraden Offsetelementen einer Liste zurück. Wechselt zwischen Verwendung und Überspringung von Werten aus der Liste \"<code>list</code>\" in Abhängigkeit von den Parametern.\r\n    <ul>\r\n    <li><code>count</code>: Gibt die Anzahl von Werten an, die bei jeder Ausführung übersprungen werden.</li>\r\n    <li><code>repeatInterval</code>: Ein optionales Wiederholungsintervall, um anzugeben, wie viele Werte zwischen den übersprungenen Werten hinzugefügt werden.</li>\r\n    <li><code>offset</code>: Ein optionaler Offsetparameter, um mit der Überspringung der Werte am ursprünglichen Offset zu beginnen.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste auf der Grundlage von \"{1..10}\", bei der die erste Zahl übersprungen wird.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Erstellt eine Liste auf der Grundlage von \"{1..10}\", bei der jede zweite Zahl übersprungen wird.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Erstellt eine Liste auf der Grundlage von \"{1..10}\", bei der mit 1 begonnen und jede zweite Zahl übersprungen wird.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Erstellt eine Liste auf der Grundlage von \"{1..10}\", die mit 1 beginnt, einen Wert überspringt, zwei Werte behält usw.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Gibt an, ob die Liste den Wert enthält.",
        "Documentation.LongDescription": "Gibt an, ob die Liste \"<code>list</code>\" den Wert \"<code>value</code>\" enthält.\r\n    Gibt TRUE zurück, wenn der Wert in der Liste gefunden wird. Andernfalls wird FALSE zurückgegeben. Zum Steuern der Gleichheitsüberprüfung kann ein optionales Gleichungskriterium (<code>equationCriteria</code>) angegeben werden. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Liste \"{1, 2, 3, 4, 5}\" die Zahl 3 enthält.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Liste \"{1, 2, 3, 4, 5}\" die Zahl 6 enthält.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Gibt an, ob eine Liste alle Werte aus einer anderen Liste enthält.",
        "Documentation.LongDescription": "Gibt an, ob die Liste \"<code>list</code>\" alle Werte aus einer anderen Liste (<code>values</code>) enthält.\r\n    Gibt \"true\" zurück, wenn der Wert in der Liste gefunden wird. Andernfalls wird \"false\" zurückgegeben. Zum Steuern der Gleichheitsüberprüfung kann ein optionales Gleichungskriterium (<code>equationCriteria</code>) angegeben werden. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Liste \"{1, 2, 3, 4, 5}\" die Zahlen 3 und 4 enthält.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Liste \"{1, 2, 3, 4, 5}\" die Zahlen 5 und 6 enthält.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Gibt an, ob eine Liste mindestens einen der Werte aus einer anderen Liste enthält.",
        "Documentation.LongDescription": "Gibt an, ob die Liste \"<code>list</code>\" mindestens einen der Werte aus einer anderen Liste (<code>values</code>) enthält.\r\n        Gibt \"true\" zurück, wenn der Wert in der Liste gefunden wird. Andernfalls wird \"false\" zurückgegeben. Zum Steuern der Gleichheitsüberprüfung kann ein optionales Gleichungskriterium (<code>equationCriteria</code>) angegeben werden. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Liste \"{1, 2, 3, 4, 5}\" die Zahl 3 oder 9 enthält.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Liste \"{1, 2, 3, 4, 5}\" die Zahl 6 oder 7 enthält.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Gibt die Kovarianz zwischen den beiden Zahlenlisten zurück.",
        "Documentation.LongDescription": "Gibt die Kovarianz zwischen zwei Listen (\"<code>numberList1</code>\" und \"<code>numberList2</code>\") zurück. \"<code>numberList1</code>\" und \"<code>numberList2</code>\" müssen die gleiche Anzahl von <code>number</code>-Werten enthalten.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Berechnet die Kovarianz zwischen zwei Listen.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Gibt den Unterschied zwischen den beiden angegebenen Listen zurück.",
        "Documentation.LongDescription": "Gibt die Elemente aus der Liste \"<code>list1</code>\" zurück, die nicht in der Liste \"<code>list2</code>\" enthalten sind. Doppelte Werte werden unterstützt.\r\n    Zum Steuern der Gleichheitsüberprüfung kann ein optionales Gleichungskriterium (<code>equationCriteria</code>) angegeben werden. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Elemente der Liste „{1, 2, 3, 4, 5}“, die nicht in der Liste „{4, 5, 3}“ enthalten sind.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Ermittelt die Elemente der Liste \"{1, 2}\", die nicht in der Liste \"{1, 2, 3}\" enthalten sind.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Gibt eine Liste mit Werten (einschließlich Datensatzfelder) zurück, die den angegebenen Text enthalten.",
        "Documentation.LongDescription": "Gibt eine Liste mit den Werten aus der Liste \"<code>list</code>\" zurück, die den Wert \"<code>text</code>\" enthalten.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Textwerte in der Liste \"{\"a\", \"b\", \"ab\"}\", die den Wert \"a\" enthalten. ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Gibt die erste Gruppe von Elementen in der Liste zurück. Hierzu wird entweder die zurückzugebende Anzahl oder eine qualifizierende Bedingung angegeben.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Bei Angabe einer Zahl wird die entsprechende Anzahl von Elementen zurückgegeben. </li>\r\n  <li>Bei Angabe einer Bedingung werden alle Elemente zurückgegeben, die die Bedingung erfüllen. Erfüllt ein Element die Bedingung nicht, werden ab diesem Punkt keine weiteren Elemente berücksichtigt. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die ersten Werte in der Liste \"{3, 4, 5, -1, 7, 8, 2}\", die größer 0 sind.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Gibt \"true\" zurück, wenn die Bedingungsfunktion von alle Werten in der Liste erfüllt wird.",
        "Documentation.LongDescription": "Gibt <code>true</code> zurück, wenn die Bedingungsfunktion \"<code>condition</code>\" von allen Werten in der Liste \"<code>list</code>\" erfüllt wird. Andernfalls wird <code>false</code> zurückgegeben.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob alle Werte in der Liste \"{11, 12, 13}\" größer zehn sind.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob alle Werte in der Liste \"{1, 2, 3}\" größer zehn sind.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Gibt \"true\" zurück, wenn die Bedingungsfunktion durch einen beliebigen Wert erfüllt wird.",
        "Documentation.LongDescription": "Gibt <code>true</code> zurück, wenn die Bedingungsfunktion \"<code>condition</code>\" von beliebigen Werten in der Liste \"<code>list</code>\" erfüllt wird. Andernfalls wird <code>false</code> zurückgegeben.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob ein beliebiger Wert in der Liste \"{9, 10, 11}\" größer zehn ist.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob ein beliebiger Wert in der Liste \"{1, 2, 3}\" größer zehn ist.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Gibt die größten Werte in der Liste zurück. Hierzu muss die Anzahl der zurückzugebenden Werte oder eine Filterbedingung angegeben werden.",
        "Documentation.LongDescription": "Gibt die größten Werte in der Liste \"<code>list</code>\" zurück.\r\n    Nach dem Sortieren der Zeilen können optionale Parameter zur weiteren Filterung des Ergebnisses angegeben werden. Der optionale Parameter \"<code>countOrCondition</code>\" gibt die zurückzugebende Anzahl von Werten oder eine Filterbedingung an. Der optionale Parameter \"<code>comparisonCriteria</code>\" gibt an, wie Werte in der Liste verglichen werden sollen.\r\n <ul>\r\n        <li> <code>list</code>: Die Liste mit den Werten.</li>\r\n        <li> <code>countOrCondition</code>:  Bei Angabe einer Zahl wird eine Liste mit bis zu <code>countOrCondition</code> Elementen in aufsteigender Reihenfolge zurückgegeben. Bei Angabe einer Bedingung wird eine Liste mit Elementen zurückgegeben, die die Bedingung erfüllen. Erfüllt ein Element die Bedingung nicht, werden ab diesem Punkt keine weiteren Elemente berücksichtigt.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opional]</i> Ein optionaler <code>comparisonCriteria</code>-Wert kann angeben werden, um zu bestimmen, wie die Elemente in der Liste verglichen werden sollen. Ist dieser Parameter NULL, wird die standardmäßige Vergleichsfunktion verwendet.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Gibt die kleinsten Werte in der Liste zurück. Hierzu kann die Anzahl der zurückzugebenden Werte oder eine Filterbedingung angegeben werden.",
        "Documentation.LongDescription": "Gibt die kleinsten Werte in der Liste \"<code>list</code>\" zurück.\r\n    Der Parameter \"<code>countOrCondition</code>\" gibt die zurückzugebende Anzahl von Werten oder eine Filterbedingung an. Der optionale Parameter \"<code>comparisonCriteria</code>\" gibt an, wie Werte in der Liste verglichen werden sollen.\r\n <ul>\r\n        <li> <code>list</code>: Die Liste mit den Werten.</li>\r\n        <li> <code>countOrCondition</code>:  Bei Angabe einer Zahl wird eine Liste mit bis zu <code>countOrCondition</code> Elementen in aufsteigender Reihenfolge zurückgegeben. Bei Angabe einer Bedingung wird eine Liste mit Elementen zurückgegeben, die die Bedingung erfüllen. Erfüllt ein Element die Bedingung nicht, werden ab diesem Punkt keine weiteren Elemente berücksichtigt. Ist dieser Parameter NULL, wird der allerkleinste Wert in der Liste zurückgegeben.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opional]</i> Ein optionaler <code>comparisonCriteria</code>-Wert kann angeben werden, um zu bestimmen, wie die Elemente in der Liste verglichen werden sollen. Ist dieser Parameter NULL, wird die standardmäßige Vergleichsfunktion verwendet.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die fünf kleinsten Werte in der Liste <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Gibt auf der Grundlage eines Anfangswerts, einer Anzahl und eines optionalen inkrementellen Werts eine Liste mit Zahlen zurück.",
        "Documentation.LongDescription": "Gibt auf der Grundlage eines Anfangswerts, einer Anzahl und eines optionalen inkrementellen Werts eine Liste mit Zahlen zurück. Der inkrementelle Standardwert lautet 1.\r\n<ul>\r\n   <li><code>start</code>: Der Anfangswert in der Liste.</li>\r\n   <li><code>count</code>: Die Anzahl der zu erstellenden Werte.</li>\r\n   <li><code>increment</code>: <i>[Optional]</i> Der Wert für die Schrittweite. Ohne Angabe dieses Werts werden die Werte jeweils um eins erhöht. </li>.\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Generiert eine bei 1 beginnende Liste mit 10 fortlaufenden Zahlen.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Generiert eine bei 1 beginnende Liste mit 10 Zahlen und einer Schrittweite von 2 für jede weitere Zahl.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Gibt mindestens ein Stichprobenperzentil zurück, das den angegebenen Wahrscheinlichkeiten entspricht.",
        "Documentation.LongDescription": "Gibt mindestens ein Stichprobenperzentil der Liste \"<code>list</code>\" zurück. Wenn der Wert \"<code>percentiles</code>\" eine Zahl zwischen 0,0 und 1,0 ist, wird er als Perzentil behandelt, und das Ergebnis ist\r\n    ein einzelner Wert, der dieser Wahrscheinlichkeit entspricht. Wenn der Wert \"<code>percentiles</code>\" eine Zahlenliste mit Werten zwischen 0,0 und 1,0 ist, ist das Ergebnis eine Liste von Perzentilen\r\n    entsprechend der Wahrscheinlichkeit der Eingabe. Die PercentileMode-Option in \"<code>options</code>\" kann von fortgeschrittenen Benutzern verwendet werden, um eine spezifischere Interpolationsmethode auszuwählen, wird aber für die meisten Verwendungszwecke nicht empfohlen.\r\n    Die vordefinierten Symbole <code>PercentileMode.ExcelInc</code> und <code>PercentileMode.ExcelExc</code> entsprechen den von den Excel-Funktionen verwendeten Interpolationsmethoden\r\n    <code>PERCENTILE.INC</code> und <code>PERCENTILE.EXC</code>. Das Standardverhalten entspricht <code>PercentileMode.ExcelInc</code>. Die Symbole\r\n    <code>PercentileMode.SqlCont</code> und <code>PercentileMode.SqlDisc</code> entsprechen dem SQL Server-Verhalten für <code>PERCENTILE_CONT</code> bzw.\r\n    <code>PERCENTILE_DISC</code>.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ermitteln Sie das erste Quartil der Liste <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Ermitteln Sie die Quartile der Liste <code> {5, 3, 1, 7, 9} </code> mithilfe einer Interpolationsmethode, die der Excel-Methode <code>PERCENTILE.EXC</code> entspricht.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Gibt die Offsets eines Werts in einer Liste zurück.",
        "Documentation.LongDescription": "Gibt den Offset zurück, an dem der Wert \"<code>value</code>\" in der Liste \"<code>list</code>\" erscheint. Ist der Wert nicht vorhanden, wird \"-1\" zurückgegeben.\r\n    Ein optionaler occurrence-Parameter (<code>occurrence</code>) kann angegeben werden.\r\n<ul>\r\n   <li><code>occurrence</code>: Die maximale Anzahl der zu meldenden Vorkommen.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Position in der Liste \"{1, 2, 3}\", an der der Wert 3 erscheint.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Gibt den ersten Offset eines Werts in einer Liste zurück.",
        "Documentation.LongDescription": "Gibt den Offset in der Liste \"<code>list</code>\" für das erste Vorkommen eines Werts in einer Liste (<code>values</code>) zurück. Wird kein Vorkommen gefunden, wird \"-1\" zurückgegeben.\r\n    Ein optionaler occurrence-Parameter (<code>occurrence</code>) kann angegeben werden.\r\n<ul>\r\n   <li><code>occurrence</code>: Die maximale Anzahl von Vorkommen, die zurückgegeben werden können.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die erste Position in der Liste \"{1, 2, 3}\", an der der Wert 2 oder 3 erscheint.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Gibt eine Teilmenge der Liste ab einem Offset zurück.",
        "Documentation.LongDescription": "Gibt eine Teilmenge der Liste ab dem Offset \"<code>list</code>\" zurück. Die maximale Anzahl von Elementen in der Teilmenge kann mithilfe eines optionalen Parameters (<code>offset</code>) festgelegt werden.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Teilmenge ab dem Offset 6 in der Zahlenliste von 1 bis 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Ermittelt die Teilmenge mit der Länge 2 ab dem Offset 6 in der Zahlenliste von 1 bis 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Entfernt in der Liste vorhandene Elemente aus \"list1\".",
        "Documentation.LongDescription": "Entfernt alle Vorkommen der angegebenen Werte in \"<code>list2</code>\" aus \"<code>list1</code>\". Sind die Werte aus \"<code>list2</code>\" in \"<code>list1</code>\" nicht vorhanden, wird die ursprüngliche Liste zurückgegeben.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die Elemente in der Liste \"{2, 4, 6}\" aus der Liste \"{1, 2, 3, 4, 2, 5, 5}\".",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Entfernt alle Vorkommen der Eingabewerte.",
        "Documentation.LongDescription": "Entfernt alle Vorkommen der in \"<code>list2</code>\" angegebenen Werte aus der Liste \"<code>list1</code>\". Sind die Werte aus \"<code>list2</code>\" in \"<code>list1</code>\" nicht vorhanden, wird die ursprüngliche Liste zurückgegeben.\r\n    Zum Steuern der Gleichheitsüberprüfung kann ein optionales Gleichungskriterium (<code>equationCriteria</code>) angegeben werden. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste auf der Grundlage von \"{1, 2, 3, 4, 5, 5}\" ohne \"{1, 5}\".",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Entfernt die angegebene Anzahl von Werten ab der angegebenen Position.",
        "Documentation.LongDescription": "Entfernt <code>count</code> Werte ab der angegebenen Position (<code>index</code>) aus \"<code>list</code>\".",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Entfernt drei Werte ab Index 4 aus der Liste \"{1, 2, 3, 4, -6, -2, -1, 5}\".",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Gibt eine Liste mit der angegebenen Anzahl von Wiederholungen der ursprünglichen Liste zurück.",
        "Documentation.LongDescription": "Gibt eine Liste mit <code>count</code> Wiederholungen der ursprünglichen Liste (<code>list</code>) zurück.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit drei Wiederholungen von \"{1, 2}\".",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Wendet jede Ersetzung vom Typ \"{ old, new }\" an.",
        "Documentation.LongDescription": "Nimmt die angegebenen Ersetzungen in der Liste \"<code>list</code>\" vor. Ein Ersetzungsvorgang (<code>replacements</code>) besteht aus einer Liste mit zwei Werten (alter und neuer Wert), die in einer Liste bereitgestellt wird.\r\n    Zum Steuern der Gleichheitsüberprüfung kann ein optionales Gleichungskriterium (<code>equationCriteria</code>) angegeben werden.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste auf der Grundlage von \"{1, 2, 3, 4, 5}\", in der der Wert 5 durch -5 und der Wert 1 durch -1 ersetzt wird.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Gibt eine Liste mit Werten zurück, die die Bedingung erfüllen.",
        "Documentation.LongDescription": "Gibt eine Liste mit Werten aus der Liste \"<code>list</code>\" zurück, die die Auswahlbedingung \"<code>selection</code>\" erfüllen.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Werte in der Liste \"{1, -3, 4, 9, -2}\", die größer null sind.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Unterteilt die angegebene Liste anhand der angegebenen Seitengröße in eine Liste von Listen.",
        "Documentation.LongDescription": "Unterteilt <code>list</code> in eine Liste von Listen. Hierbei ist das erste Element der Ausgabeliste eine Liste, die die ersten <code>pageSize</code> Elemente aus\r\n    der Quellliste enthält. Das nächste Element der Ausgabeliste ist eine Liste mit den nächsten <code>pageSize</code> Elementen aus der Quellliste usw..",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Gibt eine neue Liste mit Werten zurück, die auf der Grundlage dieser Liste berechnet wurden.",
        "Documentation.LongDescription": "Gibt durch Anwenden der Transformationsfunktion \"<code>transform</code>\" auf die Liste \"<code>list</code>\" eine neue Liste mit Werten zurück.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Addiert zu jedem Wert in der Liste \"{1, 2}\" den Wert 1.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Gibt den Arkustangens der Division der beiden Zahlen zurück.",
        "Documentation.LongDescription": "Gibt den Arkustangens der Division der beiden Zahlen (<code>y</code> und <code>x</code>) zurück. Die Division wird als \"<code>y</code>/<code>x</code>\" konstruiert.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Gibt das Ergebnis der Ausführung eines bitweisen UND-Vorgangs zwischen den beiden Eingaben zurück.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Ausführung eines bitweisen UND-Vorgangs zwischen \"<code>number1</code>\" und \"<code>number2</code>\" zurück.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Gibt das Ergebnis der Ausführung eines bitweisen ODER-Vorgangs zwischen den beiden Eingaben zurück.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Ausführung eines bitweisen ODER-Vorgangs zwischen \"<code>number1</code>\" und \"<code>number2</code>\" zurück.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Nimmt eine Verschiebung nach links um die festgelegten Bits vor.",
        "Documentation.LongDescription": "Gibt für \"<code>number1</code>\" das Ergebnis einer bitweisen Verschiebung nach links um die angegebene Anzahl von Bits (<code>number2</code>) zurück.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Nimmt eine Verschiebung nach rechts um die festgelegten Bits vor.",
        "Documentation.LongDescription": "Gibt für \"<code>number1</code>\" das Ergebnis einer bitweisen Verschiebung nach rechts um die angegebene Anzahl von Bits (<code>number2</code>) zurück.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Gibt das Ergebnis der Ausführung eines bitweisen XOR-Vorgangs (ausschließendes ODER) zwischen den beiden Eingaben zurück.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Ausführung eines bitweisen XOR-Vorgangs (ausschließendes ODER) zwischen \"<code>number1</code>\" und \"<code>number2</code>\" zurück.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Gibt die Anzahl eindeutiger Kombinationen zurück.",
        "Documentation.LongDescription": "Gibt die Anzahl eindeutiger Kombinationen aus einer Liste mit Elementen (<code>setSize</code>) mit der angegebenen Kombinationsgröße (<code>combinationSize</code>) zurück.\r\n<ul>\r\n    <li><code>setSize</code>: Die Anzahl von Elementen in der Liste.</li>\r\n    <li><code>combinationSize</code>: Die Anzahl von Elementen in jeder Kombination.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Anzahl von Kombinationen auf der Grundlage von insgesamt fünf Elementen, wenn es sich bei jeder Kombination um eine Dreiergruppe handelt.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Dividiert zwei Zahlen und gibt den ganzzahligen Teil des Ergebnisses zurück.",
        "Documentation.LongDescription": "Gibt den ganzzahligen Teil des Ergebnisses der Division einer Zahl (<code>number1</code>) durch eine andere Zahl (<code>number2</code>) zurück.\r\n    Ist <code>number1</code> oder <code>number2</code> NULL, gibt <code>Number.IntegerDivide</code> NULL zurück.\r\n      <ul>\r\n        <li><code>number1</code>: Der Dividend.</li>\r\n        <li><code>number2</code>: Der Divisor.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Teilt 6 durch 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Teilt 8,3 durch 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Eine ganze Zahl dividiert zwei Zahlen und gibt den Restwert zurück.",
        "Documentation.LongDescription": "Gibt den Rest zurück, der sich aus der ganzzahligen Division von <code>number</code> durch <code>divisor</code> ergibt.\r\n    Ist <code>number</code> oder <code>divisor</code> NULL, gibt <code>Number.Mod</code> NULL zurück.\r\n      <ul>\r\n        <li><code>number</code>: Der Dividend.</li>\r\n        <li><code>divisor</code>: Der Divisor.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Rest der Division von 5 durch 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Gibt die Anzahl von Permutationen zurück.",
        "Documentation.LongDescription": "Gibt die Anzahl von Permutationen zurück, die auf der Grundlage einer Reihe von Elementen (<code>setSize</code>) mit einer angegebenen Permutationsgröße (<code>permutationSize</code>) generiert werden können.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Anzahl von Permutationen auf der Grundlage von insgesamt fünf Elementen in Dreiergruppen.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Potenziert eine Zahl mit dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Potenzierung von \"<code>number</code>\" mit \"<code>power</code>\" zurück.\r\n    Ist <code>number</code> oder <code>power</code> NULL, gibt <code>Number.Power</code> NULL zurück.\r\n      <ul>\r\n        <li><code>number</code>: Die Basis.</li>\r\n        <li><code>power</code>: Der Exponent.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Wert von 5 hoch 3 (5 zum Kubik).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Gibt eine Zufallszahl zwischen zwei Zahlen zurück.",
        "Documentation.LongDescription": "Gibt eine Zufallszahl zwischen <code>bottom</code> und <code>top</code> zurück.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Ruft eine Zufallszahl zwischen 1 und 5 ab.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Gibt den Wert des angegebenen Felds in einem Datensatz zurück.",
        "Documentation.LongDescription": "Gibt den Wert des angegebenen Elements vom Typ \"<code>field</code>\" in \"<code>record</code>\" zurück. Wird das Feld nicht gefunden, wird eine Ausnahme ausgelöst.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Wert des Felds 'CustomerID' im Datensatz.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Gibt den Wert des angegebenen Felds in einem Datensatz zurück. Wird das Feld nicht gefunden, wird der Standardwert zurückgegeben.",
        "Documentation.LongDescription": "Gibt den Wert des angegebenen Felds (<code>field</code>) im Datensatz \"<code>record</code>\" zurück. Wird das Feld nicht gefunden, wird der optionale Wert \"<code>defaultValue</code>\" zurückgegeben.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Wert des Felds \"Phone\" im Datensatz oder gibt NULL zurück, wenn das Feld nicht vorhanden ist.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Ermittelt den Wert des Felds \"Phone\" im Datensatz oder gibt den Standardwert zurück, wenn das Feld nicht vorhanden ist.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Gibt einen Datensatz basierend auf einer Liste von Feldwerten und einer Gruppe von Feldern zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz basierend auf einem/r <code>list</code> von Feldwerten und einer Gruppe von Feldern zurück.  <code>fields</code> kann entweder durch eine Liste von Textwerten oder einen Datensatztyp angegeben werden.  Ein Fehler wird ausgegeben, wenn die Felder nicht eindeutig sind.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Erstellen Sie einen Datensatz aus einer Liste von Feldwerten und einer Liste von Feldnamen.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Erstellen Sie einen Datensatz aus einer Liste von Feldwerten und einem Datensatztyp.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Gibt an, ob der Datensatz die angegebenen Felder enthält.",
        "Documentation.LongDescription": "Gibt durch Rückgabe eines logischen Werts (\"true\" oder \"false\") an, ob der Datensatz \"<code>record</code>\" die in \"<code>fields</code>\" angegebenen Felder enthält.\r\n    Mehrere Feldwerte können in Listenform angegeben werden.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Überprüft, ob der Datensatz das Feld \"CustomerID\" enthält.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Überprüft, ob der Datensatz die Felder \"CustomerID\" und \"Address\" enthält.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Entfernt die angegebenen Felder aus dem Eingabedatensatz.",
        "Documentation.LongDescription": "Gibt einen Datensatz zurück, in dem alle in der Liste \"<code>fields</code>\" angegebenen Felder aus der Eingabe \"<code>record</code>\" entfernt wurden. Ist das angegebene Feld nicht vorhanden, wird eine Ausnahme ausgelöst.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Entfernt das Feld \"Price\" aus dem Datensatz.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Entfernt die Felder \"Price\" und \"Item\" aus dem Datensatz.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Wendet Umbenennungen aus einer Liste im Format \"{ old, new }\" an.",
        "Documentation.LongDescription": "Gibt einen Datensatz zurück, nachdem Felder aus der Eingabe \"<code>record</code>\" mit den neuen Feldnamen aus der Liste \"<code>renames</code>\" versehen wurden. Für mehrere Umbenennungen kann eine geschachtelte Liste { {old1, new1}, {old2, new2} } verwendet werden.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Benennt das Feld \"UnitPrice\" aus dem Datensatz in \"Price\" um.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Benennt die Felder \"UnitPrice\" aus dem Datensatz in \"Price\" und \"OrderNum\" in \"OrderID\" um.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Ändert die Reihenfolge der angegebenen Felder in die neue Reihenfolge.",
        "Documentation.LongDescription": "Gibt einen Datensatz zurück, nachdem die Felder in \"<code>record</code>\" gemäß der Reihenfolge der Liste \"<code>fieldOrder</code>\" angeordnet wurden. Die Feldwerte bleiben erhalten. Die Position von Feldern, die nicht in \"<code>fieldOrder</code>\" enthalten sind, bleibt unverändert.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Sortiert einige der Felder im Datensatz neu.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Gibt einen Datensatz zurück, der ausschließlich die angegebenen Felder enthält.",
        "Documentation.LongDescription": "Gibt einen Datensatz zurück, der ausschließlich die in der Liste \"<code>fields</code>\" angegebenen Felder aus der Eingabe \"<code>record</code>\" enthält.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Wählt die Felder \"Item\" und \"Price\" des Datensatzes aus.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Gibt einen Datensatz nach Anwendung der angegebenen Transformationen zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz zurück, nachdem die in der Liste \"<code>transformOperations</code>\" angegebenen Transformationen auf \"<code>record</code>\" angewendet wurden.\r\n    Mehrere Felder können gleichzeitig transformiert werden.\r\n      <div>Wird nur ein einzelnes Feld transformiert, wird für \"<code>transformOperations</code>\" eine Liste mit zwei Elementen erwartet. Das erste Element in \"<code>transformOperations</code>\" gibt einen Feldnamen an. Das zweite Element in \"<code>transformOperations</code>\" gibt die gewünschte Transformationsfunktion an. Beispiel: <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Werden mehrere Felder transformiert, wird für \"<code>transformOperations</code>\" eine Liste mit Listen erwartet, wobei es sich bei den enthaltenen Listen jeweils um ein Paar aus Feldname und Transformationsvorgang handeln muss. Beispiel: <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Konvertieren des Felds \"Preis\" in eine Zahl.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Konvertieren der Felder \"OrderID\" und \"Preis\" in Zahlen.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Gibt eine Funktion zurück, die Text anhand eines Übergangs von einer Zeichenart in eine andere in eine Liste von Text aufteilt. Die Parameter \"{0}\" und \"{1}\" können entweder eine Liste mit Zeichen oder eine Funktion sein, die ein Zeichen verwendet und TRUE/FALSE zurückgibt.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die Text anhand eines Übergangs von einer Zeichenart in eine andere in eine Liste von Text aufteilt. Die Parameter \"<code>before</code>\" und \"<code>after</code>\" können entweder eine Liste mit Zeichen oder eine Funktion sein, die ein Zeichen verwendet und TRUE/FALSE zurückgibt.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Teilen Sie die Eingabe immer auf, wenn auf einen Groß- oder Kleinbuchstaben eine Ziffer folgt.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Konvertiert die bereitgestellte SQL-Abfrage in M-Code. Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Konvertiert die angegebene <code>sql</code>-Abfrage in M-Code, wobei die verfügbaren Bezeichner durch <code>environment</code> definiert werden. Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Gibt eine angegebene Spalte mit Daten aus der Tabelle als Liste zurück.",
        "Documentation.LongDescription": "Gibt die durch \"<code>column</code>\" angegebene Spalte mit Daten aus der Tabelle \"<code>table</code>\" als Liste zurück.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Gibt die Werte aus der Spalte \"[Name]\" in der Tabelle zurück.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Gibt eine Liste mit den Namen der Spalten zurück, die mit dem angegebenen Typ übereinstimmen.",
        "Documentation.LongDescription": "Gibt eine Liste mit den Namen der Spalten aus Tabelle \"<code>table</code>\" zurück, die mit den in \"<code>listOfTypes</code>\" angegebenen Typen übereinstimmen.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Gibt die Namen von Spalten vom Typ \"Number.Type\" aus der Tabelle zurück.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Gibt an, ob der angegebene Datensatz als Zeile in der Tabelle vorkommt.",
        "Documentation.LongDescription": "Gibt an, ob der angegebene Datensatz (<code>row</code>) als Zeile in \"<code>table</code>\" vorkommt.\r\n    Der Vergleich zwischen den Zeilen der Tabelle kann mithilfe eines optionalen Parameters (<code>equationCriteria</code>) gesteuert werden.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Tabelle die Zeile enthält.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Tabelle die Zeile enthält.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ermittelt, ob die Tabelle die Zeile enthält, wobei lediglich die Spalte \"[Name]\" verglichen wird.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Gibt an, ob alle angegebenen Datensätze als Zeilen in der Tabelle vorkommen.",
        "Documentation.LongDescription": "Gibt an, ob alle angegebenen Datensätze in der Liste mit Datensätzen (<code>rows</code>) als Zeilen in \"<code>table</code>\" vorkommen.\r\n    Der Vergleich zwischen den Zeilen der Tabelle kann mithilfe eines optionalen Parameters (<code>equationCriteria</code>) gesteuert werden.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Tabelle alle Zeilen enthält. Dabei wird nur die Spalte [CustomerID] verglichen.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Tabelle alle Zeilen enthält.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Gibt an, ob mindestens einer der angegebenen Datensätze als Zeile in der Tabelle vorkommt.",
        "Documentation.LongDescription": "Gibt an, ob mindestens einer der angegebenen Datensätze in der Liste mit Datensätzen (<code>rows</code>) als Zeile in \"<code>table</code>\" vorkommt.\r\n    Der Vergleich zwischen den Zeilen der Tabelle kann mithilfe eines optionalen Parameters (<code>equationCriteria</code>) gesteuert werden.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Tabelle <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> die Zeile <code>[a = 1, b = 2]</code> oder <code>[a = 3, b = 5]</code> enthält.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Tabelle <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> die Zeile <code>[a = 1, b = 3]</code> oder <code>[a = 3, b = 5]</code> enthält.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ermittelt, ob die Tabelle <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> die Zeile <code>[a = 1, b = 3]</code> oder <code>[a = 3, b = 5]</code> enthält, wobei lediglich die Spalte \"[a]\" verglichen wird.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Gibt an, ob die Tabelle die angegebene(n) Spalte(n) enthält.",
        "Documentation.LongDescription": "Gibt an, ob die <code>table</code> die angegebene(n) Spalte(n) <code>columns</code> enthält. Gibt <code>true</code> zurück, falls die Tabelle die Spalte(n) enthält. Andernfalls wird <code>false</code> zurückgegeben.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Tabelle die Spalte \"[Name]\" enthält.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Tabelle die Spalten \"[Name]\" und \"[PhoneNumber]\" enthält.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Gibt an, ob alle Zeilen in der Tabelle die angegebene Bedingung erfüllen.",
        "Documentation.LongDescription": "Gibt an, ob alle Zeilen im Element vom Typ \"<code>table</code>\" die Angabe \"<code>condition</code>\" erfüllen. Gibt <code>true</code> zurück, falls alle Zeilen die Bedingung erfüllen. Andernfalls wird <code>false</code> zurückgegeben.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob es sich bei allen Zeilenwerten in der Spalte \"[a]\" der Tabelle um gerade Werte handelt.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob es sich bei allen Zeilenwerten der Tabelle <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> um \"[a = 1, b = 2]\" handelt.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Gibt an, ob mindestens eine der Zeilen in der Tabelle die angegebene Bedingung erfüllt.",
        "Documentation.LongDescription": "Gibt an, ob mindestens eine der Zeilen im Element vom Typ \"<code>table</code>\" die Angabe \"<code>condition</code>\" erfüllt. Gibt <code>true</code> zurück, falls mindestens eine der Zeilen die Bedingung erfüllt. Andernfalls wird <code>false</code> zurückgegeben.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob es sich bei mindestens einem Zeilenwert in Spalte \"[a]\" der Tabelle <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> um einen geraden Wert handelt.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ermittelt, ob es sich bei mindestens einem Zeilenwert der Tabelle <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> um \"[a = 1, b = 2]\" handelt.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Gibt anhand der angegebenen Kriterien die größte Zeile oder den Standardwert zurück.",
        "Documentation.LongDescription": "Gibt die größte Zeile im Element vom Typ \"<code>table</code>\" anhand von \"<code>comparisonCriteria</code>\" zurück. Ist die Tabelle leer, wird der optionale Wert \"<code>default</code>\" zurückgegeben. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt in der Tabelle <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> die Zeile mit dem größten Wert in Spalte \"[a]\".",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Ermittelt in der Tabelle <code>({})</code> die Zeile mit dem größten Wert in Spalte \"[a]\". Ist die Tabelle leer, wird \"-1\" zurückgegeben.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Gibt anhand der angegebenen Kriterien die kleinste Zeile oder den Standardwert zurück.",
        "Documentation.LongDescription": "Gibt die kleinste Zeile im Element vom Typ \"<code>table</code>\" anhand von \"<code>comparisonCriteria</code>\" zurück. Ist die Tabelle leer, wird der optionale Wert \"<code>default</code>\" zurückgegeben.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt in der Tabelle die Zeile mit dem kleinsten Wert in der Spalte \"[a]\".",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Ermittelt in der Tabelle die Zeile mit dem kleinsten Wert in der Spalte \"[a]\". Ist die Spalte leer, wird \"-1\" zurückgegeben.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Gibt die Position(en) der Zeile innerhalb der Tabelle zurück.",
        "Documentation.LongDescription": "Gibt die Zeilenposition des ersten Vorkommens von \"<code>row</code>\" im angegebenen Element vom Typ \"<code>table</code>\" zurück. Wird kein Vorkommen gefunden, wird \"-1\" zurückgegeben.\r\n    <ul>\r\n       <li><code>table</code>: Die Eingabetabelle.</li>\r\n       <li><code>row</code>: Die Zeile in der Tabelle, deren Position ermittelt werden soll.</li>\r\n       <li><code>occurrence</code>: <i>[Optional]</i> Gibt an, welche Vorkommen der Zeile zurückgegeben werden sollen.</li>\r\n       <li><code>equationCriteria</code>: <i>[Optional]</i> Steuert den Vergleich der Tabellenzeilen.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Position des ersten Vorkommens von \"[a = 2, b = 4]\" in der Tabelle <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Ermittelt die Position des zweiten Vorkommens von \"[a = 2, b = 4]\" in der Tabelle <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Ermittelt die Position aller Vorkommen von \"[a = 2, b = 4]\" in der Tabelle <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Gibt die Position(en) von angegebenen Zeilen innerhalb der Tabelle zurück.",
        "Documentation.LongDescription": "Gibt die Zeilenposition(en) des ersten Vorkommens der <code>rows</code>-Liste aus dem Element vom Typ \"<code>table</code>\" zurück. Wird kein Vorkommen gefunden, wird \"-1\" zurückgegeben.\r\n    <ul>\r\n    <li><code>table</code>: Die Eingabetabelle.</li>\r\n       <li><code>rows</code>: Die Liste mit den Zeilen in der Tabelle, deren Positionen ermittelt werden sollen.</li>\r\n       <li><code>occurrence</code>: <i>[Optional]</i> Gibt an, welche Vorkommen der Zeile zurückgegeben werden sollen.</li>\r\n       <li><code>equationCriteria</code>: <i>[Optional]</i> Steuert den Vergleich der Tabellenzeilen.</li>\r\n    </ul>\r\n      ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Position des ersten Vorkommens von \"[a = 2, b = 4]\" oder \"[a = 6, b = 8]\" in der Tabelle <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Ermittelt die Position aller Vorkommen von \"[a = 2, b = 4]\" oder \"[a = 6, b = 8]\" in der Tabelle <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.LongDescription": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Unterteilt die angegebene Tabelle anhand der angegebenen Seitengröße in eine Liste von Tabellen.",
        "Documentation.LongDescription": "Unterteilt <code>table</code> in eine Liste von Tabellen. Hierbei ist das erste Element der Liste eine Tabelle, die die ersten <code>pageSize</code> Zeilen aus\r\n    der Quelltabelle enthält. Das nächste Element der Liste ist eine Tabelle mit den nächsten <code>pageSize</code> Zeilen aus der Quelltabelle usw..",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Unterteilen Sie eine Tabelle mit fünf Datensätzen in Tabellen mit je zwei Datensätze.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Gibt eine Liste zurück, welche die ersten angegebenen zu zählenden Zeilen und die restlichen Zeilen enthält.",
        "Documentation.LongDescription": "Gibt eine Liste mit zwei Tabellen zurück: eine Tabelle mit den ersten N Zeilen von <code>table</code> (wie in <code>count</code> angegeben) und eine Tabelle, welche die restlichen Zeilen von <code>table</code> enthält.\r\n\r\nWenn die Tabellen der resultierenden Liste genau einmal und in der Reihenfolge aufgezählt werden, zählt die Funktion <code>table</code> nur einmal auf.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Geben Sie die ersten zwei Zeilen der Tabelle zurück und die restlichen Zeilen der Tabelle.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Transformiert die Zeilen der Tabelle unter Verwendung der angegebenen Transformationsfunktion.",
        "Documentation.LongDescription": "Erstellt eine <code>Liste</code>, indem der <code>transform</code>-Vorgang auf jede Zeile in <code>table</code> angewendet wird.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformieren Sie die Zeilen einer Tabelle in eine Liste mit Zahlen.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Transformieren Sie die Zeilen einer numerischen Tabelle in Textdatensätze.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.LongDescription": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Gibt den Teil von \"<code>text</code>\" nach Angabe von \"<code>delimiter</code>\" zurück.\r\n    Ein optionaler numerischer Wert <code>index</code> gibt an, welches Vorkommen von \"<code>delimiter</code>\" berücksichtigt werden soll.\r\n    Ein optionaler Listenwert \"<code>index</code>\" gibt an, welches Vorkommen von \"<code>delimiter</code>\" berücksichtigt werden soll. Außerdem wird angegeben, ob die Indizierung vom Beginn oder vom Ende der Eingabe aus erfolgen soll.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Hiermit wird der Teil \"111-222-333\" nach dem (ersten) Bindestrich abgerufen.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Hiermit wird der Teil \"111-222-333\" nach dem zweiten Bindestrich abgerufen.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Hiermit wird der Teil \"111-222-333\" nach dem vom Ende aus gesehen zweiten Bindestrich abgerufen.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Gibt das Zeichen an der angegebenen Position zurück.",
        "Documentation.LongDescription": "Gibt das Zeichen im Textwert (<code>text</code>) an der Position <code>index</code> zurück. Das erste Zeichen im Text befindet sich an Position 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt das Zeichen an Position 4 in der Zeichenfolge \"Hello, World\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Gibt den Teil von \"<code>text</code>\" vor Angabe von \"<code>delimiter</code>\" zurück.\r\n    Ein optionaler numerischer Wert <code>index</code> gibt an, welches Vorkommen von \"<code>delimiter</code>\" berücksichtigt werden soll.\r\n     Ein optionaler Listenwert \"<code>index</code>\" gibt an, welches Vorkommen von \"<code>delimiter</code>\" berücksichtigt werden soll. Außerdem wird angegeben, ob die Indizierung vom Beginn oder vom Ende der Eingabe aus erfolgen soll.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Hiermit wird der Teil \"111-222-333\" vor dem (ersten) Bindestrich abgerufen.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Hiermit wird der Teil \"111-222-333\" vor dem zweiten Bindestrich abgerufen.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Hiermit wird der Teil \"111-222-333\" vor dem vom Ende aus gesehen zweiten Bindestrich abgerufen.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Gibt zurück, ob der Text die Teilzeichenfolge enthält.",
        "Documentation.LongDescription": "Erkennt, ob <code>text</code> den Wert <code>substring</code> enthält. Gibt TRUE zurück, wenn der Wert gefunden wird. Diese Funktion unterstützt keine Platzhalter oder regulären Ausdrücke.\r\n      <br>\r\n      <br>\r\n      Das optionale Argument <code>comparer</code> kann verwendet werden, um Vergleiche ohne Berücksichtigung der Groß-/Kleinschreibung oder mit Berücksichtigung von Kultur und Gebietsschema anzugeben.\r\n      Die folgenden integrierten Vergleichsfunktionen sind in der Formelsprache verfügbar:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Wird verwendet, um einen Ordinalvergleich mit Berücksichtigung der Groß-/Kleinschreibung durchzuführen</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Wird verwendet, um einen Ordinalvergleich ohne Berücksichtigung der Groß-/Kleinschreibung durchzuführen</li>\r\n        <li> <code>Comparer.FromCulture</code>: Wird verwendet, um einen Vergleich mit Berücksichtigung der Kultur durchzuführen</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob der Text \"Hello World\" den Text \"Hello\" enthält.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob der Text \"Hello World\" den Text \"hello\" enthält.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Ermittelt, ob der Text „Hallo Welt“ „hallo“ enthält, mithilfe eines Vergleichs unter Berücksichtigung der Groß-/Kleinschreibung.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Gibt die letzten Zeichen des Texts zurück.",
        "Documentation.LongDescription": "Gibt einen <code>text</code>-Wert zurück, bei dem es sich um die letzten <code>count</code> Zeichen des <code>text</code>-Werts \"<code>text</code>\" handelt.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Ruft die letzten fünf Zeichen des Texts \"Hello, World\" ab.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Gibt an, ob der Text auf den angegebenen Wert endet.",
        "Documentation.LongDescription": "Gibt an, ob der angegebene Text <code>text</code> mit dem angegebenen Wert <code>substring</code> endet. Die Groß-/Kleinschreibung wird berücksichtigt.\r\n\r\n      <div>\r\n        <code>comparer</code> ist ein <code>Comparer</code> (eine Vergleichsfunktion), der verwendet wird, um den Vergleich zu steuern. Vergleichsfunktionen können verwendet werden, um Vergleiche ohne Berücksichtigung der Groß-/Kleinschreibung oder mit Berücksichtigung von Kultur und Gebietsschema bereitzustellen.\r\n      </div>\r\n      <div>\r\n        Die folgenden integrierten Vergleichsfunktionen sind in der Formelsprache verfügbar:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Wird verwendet, um einen exakten Ordinalvergleich durchzuführen</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Wird verwendet, um einen exakten Ordinalvergleich ohne Berücksichtigung der Groß-/Kleinschreibung durchzuführen</li>\r\n        <li> <code>Comparer.FromCulture</code>: Wird verwendet, um einen Vergleich mit Berücksichtigung der Kultur durchzuführen</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Überprüft, ob \"Hello, World\" mit \"world\" endet.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Überprüft, ob \"Hello, World\" mit \"World\" endet.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Gibt formatierten Text aus einer Formatzeichenfolge und Argumenten zurück.",
        "Documentation.LongDescription": "Gibt formatierten Text zurück, der durch das Anwenden von <code>arguments</code> aus einer Liste oder einem Datensatz auf eine Formatzeichenfolge <code>formatString</code> angewendet wird. Optional kann auch ein Element vom Typ \"<code>culture</code>\" angegeben werden (Beispiel: \"de-DE\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Formatieren Sie eine Liste mit Zahlen.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Formatieren Sie unterschiedliche Datentypen aus einem Datensatz entsprechend der Kultur \"Vereinigte Staaten (Englisch)\".",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Gibt die Teilzeichenfolge bis zu einer bestimmten Länge zurück.",
        "Documentation.LongDescription": "Gibt <code>count</code> Zeichen oder alle bis zum Ende <code>text</code> zurück; beim Offset <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Teilzeichenfolge aus dem Text \"Hello World\", die bei Index 6 beginnt und 5 Zeichen umfasst.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Ermittelt die Teilzeichenfolge aus dem Text \"Hello World\", die bei Index 6 beginnt, bis zum Ende.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Gibt Text mit einer bestimmten Länge zurück. Hierzu wird das Ende des angegebenen Texts aufgefüllt.",
        "Documentation.LongDescription": "Gibt einen <code>text</code>-Wert zurück, der durch Einfügen von Leerzeichen am Ende des Textwerts \"<code>text</code>\" auf die Länge <code>count</code> aufgefüllt wird.\r\n    Das zum Auffüllen verwendete Zeichen kann mithilfe eines optionalen Zeichens (<code>character</code>) angegeben werden. Das standardmäßige Auffüllzeichen ist ein Leerzeichen.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Füllt das Ende eines Textwerts auf, sodass der Wert zehn Zeichen lang wird.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Füllt das Ende eines Textwerts mit \"|\" auf, sodass der Wert zehn Zeichen lang wird.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Gibt Text mit einer bestimmten Länge zurück. Hierzu wird der Anfang des angegebenen Texts aufgefüllt.",
        "Documentation.LongDescription": "Gibt einen <code>text</code>-Wert zurück, der durch Einfügen von Leerzeichen am Beginn des Textwerts \"<code>text</code>\" auf die Länge <code>count</code> aufgefüllt wird.\r\n    Das zum Auffüllen verwendete Zeichen kann mithilfe eines optionalen Zeichens (<code>character</code>) angegeben werden. Das standardmäßige Auffüllzeichen ist ein Leerzeichen.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Füllt den Beginn eines Textwerts auf, sodass der Wert zehn Zeichen lang wird.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Füllt den Beginn eines Textwerts mit \"|\" auf, sodass der Wert zehn Zeichen lang wird.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Gibt die erste Position des Werts zurück (oder \"- 1\", falls der Wert nicht gefunden wird).",
        "Documentation.LongDescription": "Gibt die Position des angegebenen Vorkommens des in <code>text</code> gefundenen Textwerts <code>substring</code> zurück.\r\n    Ein optionaler Parameter <code>occurrence</code> kann verwendet werden, um anzugeben, welche Vorkommensposition zurückgegeben werden soll (standardmäßig das erste Vorkommen).\r\n    Gibt -1 zurück, wenn <code>substring</code> nicht gefunden wurde.\r\n\r\n      <div>\r\n        <code>comparer</code> ist ein <code>Comparer</code> (eine Vergleichsfunktion), der verwendet wird, um den Vergleich zu steuern. Vergleichsfunktionen können verwendet werden, um Vergleiche ohne Berücksichtigung der Groß-/Kleinschreibung oder mit Berücksichtigung von Kultur und Gebietsschema bereitzustellen.\r\n      </div>\r\n      <div>\r\n        Die folgenden integrierten Vergleichsfunktionen sind in der Formelsprache verfügbar:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Wird verwendet, um einen exakten Ordinalvergleich durchzuführen</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Wird verwendet, um einen exakten Ordinalvergleich ohne Berücksichtigung der Groß-/Kleinschreibung durchzuführen</li>\r\n        <li> <code>Comparer.FromCulture</code>: Wird verwendet, um einen Vergleich mit Berücksichtigung der Kultur durchzuführen</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ruft die Position des ersten Vorkommens von \"World\" im Text \"Hello, World! Hello, World!\" ab.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Ruft die Position des letzten Vorkommens von \"World\" im Text \"Hello, World! Hello, World!\" ab.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Gibt die erste Position aufgeführter Zeichen im Textwert zurück (oder \"-1\", falls keine gefunden wird).",
        "Documentation.LongDescription": "Gibt die erste Position eines beliebigen Zeichens in der Liste <code>characters</code> zurück, das sich in <code>text</code> befindet.\n    Ein optionaler Parameter <code>occurrence</code> kann verwendet werden, um anzugeben, welche Vorkommensposition zurückgegeben werden soll.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie die erste Positionen von „W“ und „H“ im Text „Hallo, Welt!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Suchen Sie alle Positionen von „W“ und „H“ im Text „Hallo, Welt!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Gibt die am Offset gefundene Teilzeichenfolge zurück.",
        "Documentation.LongDescription": "Gibt die am Offset <code>offset</code> gefundene Teilzeichenfolge aus dem Text \"<code>text</code>\" zurück.\r\n    Mithilfe eines optionalen Parameters (<code>count</code>) kann die Anzahl der zurückzugebenden Zeichen angegeben werden. Löst einen Fehler aus, wenn nicht genug Zeichen vorhanden sind.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Teilzeichenfolge aus dem Text \"Hello World\", die bei Index 6 beginnt.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Ermittelt die Teilzeichenfolge aus dem Text \"Hello World Hello\", die bei Index 6 beginnt und fünf Zeichen umfasst.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Entfernt alle Vorkommen des angegebenen Zeichens oder der angegebenen Liste mit Zeichen aus dem Eingabetextwert.",
        "Documentation.LongDescription": "Gibt eine Kopie des Textwerts \"<code>text</code>\" zurück, in der alle Zeichen aus \"<code>removeChars</code>\" entfernt wurden.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die Zeichen \",\" und \";\" aus dem Textwert.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Entfernt die angegebene Anzahl von Zeichen ab dem angegebenen Offset.",
        "Documentation.LongDescription": "Gibt eine Kopie des Textwerts \"<code>text</code>\" zurück, in der alle Zeichen ab Position <code>offset</code> entfernt wurden.\r\n    Die Anzahl der zu entfernenden Zeichen kann mithilfe des optionalen Parameters \"<code>count</code>\" angegeben werden. Der Standardwert von \"<code>count</code>\" lautet 1. Positionswerte beginnen bei 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Entfernt an Position 2 ein Zeichen aus dem Textwert \"ABEFC\".",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Entfernt ab Position 2 zwei Zeichen aus dem Textwert \"ABEFC\"",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Gibt einen Textwert mit der angegebenen Anzahl von Wiederholungen des Eingabetexts zurück.",
        "Documentation.LongDescription": "Gibt einen Textwert zurück, der <code>count</code> Wiederholungen des Eingabetexts \"<code>text</code>\" enthält.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Wiederholt den Text \"a\" fünf Mal.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Wiederholt den Text \"helloworld\" drei Mal.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Hiermit werden alle Vorkommen des angegebenen Zeichens oder einer Liste von Zeichen aus dem Eingabetextwert ausgewählt.",
        "Documentation.LongDescription": "Gibt eine Kopie des Textwerts \"<code>text</code>\" zurück, in der alle nicht in \"<code>selectChars</code>\" enthaltenen Zeichen entfernt wurden.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Wählen Sie aus dem Textwert alle Zeichen im Bereich von \"a\" bis \"z\" aus.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Teilt Text auf der Grundlage eines angegebenen Trennzeichens in eine Liste mit Textwerten auf.",
        "Documentation.LongDescription": "Gibt eine Liste mit Textwerten zurück, für die ein Textwert (<code>text</code>) auf der Grundlage des angegebenen Trennzeichens (<code>separator</code>) aufgeteilt wurde.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste auf der Grundlage des Textwerts \"Name|Address|PhoneNumber\" mit dem Trennzeichen \"|\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Gibt eine Liste mit Textwerten zurück – geteilt an jedem der Zeichen des Trennzeichens.",
        "Documentation.LongDescription": "Gibt eine Liste mit Textwerten zurück, für die ein Textwert (<code>text</code>) auf der Grundlage der Zeichen des angegebenen Trennzeichens (<code>separators</code>) aufgeteilt wurde.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste auf der Grundlage des Textwerts \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Gibt den Beginn des Texts zurück.",
        "Documentation.LongDescription": "Gibt die ersten <code>count</code> Zeichen von \"<code>text</code>\" als Textwert zurück.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Ruft die ersten fünf Zeichen von \"Hello, World\" ab.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Gibt an, ob der Text mit einem angegebenen Wert beginnt.",
        "Documentation.LongDescription": "Gibt TRUE zurück, wenn der Textwert <code>text</code> mit dem Textwert <code>substring</code> beginnt.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Ein <code>text</code>-Wert, der durchsucht werden soll</li>\r\n        <li><code>substring</code>: <i></i> Ein <code>text</code>-Wert, der die Teilzeichenfolge ist, nach der in <code>substring</code> gesucht werden soll</li>\r\n        <li><code>comparer</code>: <i>[Optional]</i> Ein <code>Comparer</code> (eine Vergleichsfunktion), der zum Steuern des Vergleichs verwendet wird. Beispielsweise kann <code>Comparer.OrdinalIgnoreCase</code> verwendet werden, um Suchvorgänge ohne Berücksichtigung der Groß-/Kleinschreibung durchzuführen</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> ist ein <code>Comparer</code>, der verwendet wird, um den Vergleich zu steuern. Vergleichsfunktionen können verwendet werden, um Vergleiche ohne Berücksichtigung der Groß-/Kleinschreibung oder mit Berücksichtigung von Kultur und Gebietsschema bereitzustellen.\r\n      </div>\r\n      <div>\r\n        Die folgenden integrierten Vergleichsfunktionen sind in der Formelsprache verfügbar:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Wird verwendet, um einen exakten Ordinalvergleich durchzuführen</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Wird verwendet, um einen exakten Ordinalvergleich ohne Berücksichtigung der Groß-/Kleinschreibung durchzuführen</li>\r\n        <li> <code>Comparer.FromCulture</code>: Wird verwendet, um einen Vergleich mit Berücksichtigung der Kultur durchzuführen</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Überprüft, ob der Text \"Hello, World\" mit dem Text \"hello\" beginnt.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Überprüft, ob der Text \"Hello, World\" mit dem Text \"Hello\" beginnt.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Gibt einen Typ zurück, der für Funktionen mit bestimmten Parameter- und Rückgabetypeinschränkungen steht.",
        "Documentation.LongDescription": "Erstellt einen <code>Funktionstyp</code> aus <code>signature</code>, einen Datensatz von <code>ReturnType</code> und <code>Parameter</code> und <code>min</code>, die minimale Anzahl von Argumenten, die zum Aufrufen der Funktion erforderlich ist.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Erstellt den Typ für eine Funktion, die einen Zahlenparameter namens X verwendet und eine Zahl zurückgibt.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Gibt einen Typ zurück, der für Datensätze mit bestimmten Typeinschränkungen für Felder steht.",
        "Documentation.LongDescription": "Gibt einen Typ zurück, der für Datensätze mit bestimmten Typeinschränkungen für Felder steht.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Generieren Sie dynamisch einen Tabellentyp.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Bestimmt, ob ein Wert des ersten Typs immer mit dem zweiten Typ kompatibel ist.",
        "Documentation.LongDescription": "Bestimmt, ob ein Wert <code>type1</code> immer mit <code>type2</code> kompatibel ist.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Bestimmen Sie, ob ein Wert vom Typ „number“ immer auch als Typ „any“ behandelt werden kann.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Bestimmen Sie, ob ein Wert vom Typ „any“ immer auch als Typ „number“ behandelt werden kann.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Ersetzt die Facets eines Typs.",
        "Documentation.LongDescription": "Ersetzt die Facets von <code>type</code> durch die Facets, die im Datensatz <code>facets</code> enthalten sind.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Gibt einen neuen Tabellentyp zurück, in dem alle Schlüssel durch die Schlüssel aus der angegebenen Liste ersetzt wurden.",
        "Documentation.LongDescription": "Gibt einen neuen Tabellentyp zurück, in dem alle Schlüssel durch die Schlüssel aus der angegebenen Liste ersetzt wurden.<br>\r\n    <br>\r\n    Jeder Schlüssel wird mithilfe eines Datensatzes in der folgenden Form definiert:\r\n    <ul>\r\n      <li>\r\n        <code>Spalten</code>: eine Liste der Spaltennamen, die den Schlüssel definieren.\r\n      </li>\r\n      <li>\r\n        <code>Primär</code>: <code>true</code>, wenn der Schlüssel der Primärschlüssel der Tabelle ist; andernfalls <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Die angegebene Schlüsselliste wird überprüft, um sicherzustellen, dass nicht mehr als ein Primärschlüssel definiert ist und dass alle Schlüsselspaltennamen für den Tabellentyp vorhanden sind.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Ersetzen Sie die Schlüsselinformationen für einen Tabellentyp.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Löschen Sie die Schlüsselinformationen, die zuvor für einen Tabellentyp definiert wurden.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Gibt den Typ einer Spalte in einer Tabelle zurück.",
        "Documentation.LongDescription": "Gibt den Typ der Spalte '<code>column</code>' in der Tabelle vom Typ '<code>tableType</code>' zurück.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Gibt den absoluten URI (Kombination des Eingabebasis-URI und des relativen URI) zurück.",
        "Documentation.LongDescription": "Gibt den absoluten URI (Kombination aus der Eingabe \"<code>baseUri</code>\" und \"<code>relativeUri</code>\") zurück.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Gibt die Summe der beiden Werte zurück.",
        "Documentation.LongDescription": "Gibt die Summe von <code>value1</code> und <code>value2</code> zurück. Ein optionaler Parameter (<code>precision</code>) kann angegeben werden. Standardmäßig wird <code>Precision.Double</code> verwendet.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Gibt den Wert zurück, wenn er mit dem angegebenen Typ kompatibel ist.",
        "Documentation.LongDescription": "Gibt den Wert zurück, wenn er mit dem angegebenen Typ kompatibel ist. Dies entspricht dem Operator „as“ in M, mit der Ausnahme, dass er Verweise des Bezeichnertyps wie „Number.Type“ akzeptieren kann.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Wandeln Sie eine Zahl in eine Zahl um.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Versuchen Sie, einen Textwert in eine Zahl umzuwandeln.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Gibt -1, 0 oder 1 zurück, je nachdem, ob der erste Wert im Vergleich zum zweiten kleiner, gleich oder größer ist.",
        "Documentation.LongDescription": "Gibt -1, 0 oder 1 zurück, je nachdem, ob der erste Wert im Vergleich zum zweiten kleiner, gleich oder größer ist.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Gibt das Ergebnis der Division des ersten Werts durch den zweiten zurück.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Division von <code>value1</code> durch <code>value2</code> zurück. Ein optionaler Parameter (<code>precision</code>) kann angegeben werden. Standardmäßig wird <code>Precision.Double</code> verwendet.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Gibt zurück, ob zwei Werte gleich sind.",
        "Documentation.LongDescription": "Gibt \"true\" zurück, wenn der Wert <code>value1</code> gleich dem Wert <code>value2</code> ist. Andernfalls wird \"false\" zurückgegeben.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Bestimmt, ob ein Wert mit dem angegebenen Typ kompatibel ist.",
        "Documentation.LongDescription": "Bestimmt, ob ein Wert mit dem angegebenen Typ kompatibel ist. Dies entspricht dem Operator „is“ in M, mit der Ausnahme, dass er Verweise des Bezeichnertyps wie „Number.Type“ akzeptieren kann.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Vergleichen Sie zwei Möglichkeiten, um festzustellen, ob eine Zahl mit dem Typ „number“ kompatibel ist.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Gibt das Produkt der beiden Werte zurück.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Multiplikation von <code>value1</code> mit <code>value2</code> zurück. Ein optionaler Parameter (<code>precision</code>) kann angegeben werden. Standardmäßig wird <code>Precision.Double</code> verwendet.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Hiermit wird eine Abfrage für ein Ziel ausgewertet.",
        "Documentation.LongDescription": "<p>Wertet <code>query</code> gegen <code>target</code> mithilfe der in <code>parameters</code> angegebenen Parameter und der in <code>options</code> angegebenen Optionen aus.</p>\r\n<p>Die Ausgabe der Abfrage wird durch <code>target</code> definiert.</p>\r\n<p><code>target</code> stellt den Kontext für den durch <code>query</code> beschriebenen Vorgang bereit.</p>\r\n<p><code>query</code> beschreibt die für <code>target</code> auszuführende Abfrage. <code>query</code> wird in einer für <code>target</code> spezifischen Art ausgedrückt (z. B. als T-SQL-Anweisung).</p>\r\n<p>Der optionale <code>parameters</code>-Wert kann entweder eine Liste oder einen Datensatz enthalten, um die von <code>query</code> erwarteten Parameterwerte bereitzustellen.</p>\r\n<p>Der optionale <code>options</code>-Datensatz kann Optionen enthalten, die sich auf das Ausführungsverhalten von <code>query</code> für <code>target</code> auswirken. Diese Optionen sind spezifisch für <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Gibt zurück, ob zwei Werte gleich sind.",
        "Documentation.LongDescription": "Gibt NULL zurück, wenn beide Argumente ('<code>value1</code>'/'<code>value2</code>') NULL sind, andernfalls gleichwertig mit Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Ersetzt die Metadateninformationen der Eingabe.",
        "Documentation.LongDescription": "Ersetzt die Metadateninformationen der Eingabe.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Ersetzt den Typ des Werts.",
        "Documentation.LongDescription": "Ersetzt den Typ des <code>value</code> durch den bereitgestellten <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Ersetzen Sie den Standardtyp eines Datensatzes durch einen spezifischeren Typ.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Gibt die Differenz der beiden Werte zurück.",
        "Documentation.LongDescription": "Gibt die Differenz zwischen <code>value1</code> und <code>value2</code> zurück. Ein optionaler Parameter (<code>precision</code>) kann angegeben werden. Standardmäßig wird <code>Precision.Double</code> verwendet.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Erstellt eine Aktion, die bei Ausführung die Ergebnisse einer HTTP-Anforderung als Binärwert zurückgibt.",
        "Documentation.LongDescription": "Erstellt eine Aktion, die bei Ausführung die Ergebnisse einer <code>method</code>-Anforderung für <code>url</code> zurückgibt, die HTTP als binären Wert verwendet.\r\n Ein optionaler Datensatzparameter, <code>options</code>, kann bereitgestellt werden, um zusätzliche Eigenschaften anzugeben. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>Query</code> : F&#252;gen Sie der URL programmgesteuert Abfrageparameter hinzu, ohne sich um Escapezeichen Gedanken zu machen.</li>\r\n<li><code>ApiKeyName</code> : Wenn die Zielwebsite einen Hinweis auf einen API-Schl&#252;ssel umfasst, kann dieser Parameter verwendet werden, um den Namen (nicht den Wert) des Schl&#252;sselparameters anzugeben, der in der URL verwendet werden muss. Der tats&#228;chliche Schl&#252;sselwert wird in den Anmeldeinformationen angegeben.</li>\r\n<li><code>Headers</code> : Durch das Angeben dieses Werts als Datensatz werden zus&#228;tzliche Header f&#252;r eine HTTP-Anforderung bereitgestellt.</li>\r\n<li><code>Timeout</code> : Durch das Angeben dieses Werts als Dauer wird das Timeout f&#252;r eine HTTP-Anforderung ge&#228;ndert. Der Standardwert betr&#228;gt 100&#160;Sekunden.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Durch das Angeben dieses Wert als Liste werden die betreffenden HTTP-Headerschl&#252;ssel nicht in die Berechnung der Daten f&#252;r die Zwischenspeicherung einbezogen.</li>\r\n<li><code>IsRetry</code> : Durch das Angeben dieses logischen Werts als TRUE werden m&#246;glicherweise im Cache vorhandene Antworten beim Abrufen von Daten ignoriert.</li>\r\n<li><code>ManualStatusHandling</code> : Durch das Angeben dieses Werts als Liste wird eine integrierte Verarbeitung von HTTP-Anforderungen verhindert, deren Antwort einen dieser Statuscodes umfasst.</li>\r\n<li><code>RelativePath</code> : Durch das Angeben dieses Werts als Text wird dieser vor dem Ausf&#252;hren der Anforderung an die Basis-URL angef&#252;gt.</li>\r\n<li><code>Content</code> : Durch das Angeben dieses Werts werden die zugeh&#246;rigen Inhalte als Textk&#246;rper der HTTP-Anforderung verwendet.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Beachten Sie, dass diese Funktion in den meisten Kontexten deaktiviert ist. Erwägen Sie stattdessen die Verwendung von Web.Contents.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Führen Sie eine GET-Anforderung für Bing aus.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Geben Sie die URL des Azure Enterprise-REST-API-Endpunkts an, der Ihrer Registrierung zugeordnet ist.",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Gibt die binären Ergebnisse des Aufrufs an die URL zurück, die für die Azure Enterprise-API angegeben wurde.",
        "Documentation.Examples": [
          {
            "Description": "Verwendet die AzureEnterprise.Contents-Funktion, um die Ergebnisse eines bestimmten Berichts zurückzugeben.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabelle"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Gibt den Inhalt des angegebenen Blobs aus einem Azure-Speichertresor zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt des Blobs an der URL (<code>url</code>) aus einem Azure-Speichertresor zurück. \"<code>options</code>\" kann zum Steuern der folgenden Optionen angegeben werden:\r\n    <ul>\r\n<li><code>BlockSize</code> : Die Anzahl der Bytes, die vor dem Warten auf den Datenconsumer gelesen werden sollen. Der Standardwert ist 4 MB.</li>\r\n<li><code>RequestSize</code> : Die Anzahl von Bytes, die in einer einzigen HTTP-Anforderung an den Server gelesen werden sollen. Der Standardwert ist 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Die ConcurrentRequests-Option unterst&#252;tzt einen schnelleren Download von Daten, indem die Anzahl von Anforderungen angegeben wird, die parallel ausgef&#252;hrt werden sollen. Dies geht zulasten der Arbeitsspeichernutzung. Der erforderliche Arbeitsspeicher ist (GleichzeitigeAnforderungen ⋅ Anforderungsgr&#246;&#223;e). Der Standardwert ist 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Gibt den Inhalt der angegebenen Datei aus einem Azure Data Lake Storage-Dateisystem zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt der Datei an der URL (<code>url</code>) aus einem Azure Data Lake Storage-Dateisystem zurück. \"<code>options</code>\" kann zum Steuern der folgenden Optionen angegeben werden:\r\n    <ul>\r\n<li><code>BlockSize</code> : Die Anzahl der Bytes, die vor dem Warten auf den Datenconsumer gelesen werden sollen. Der Standardwert ist 4 MB.</li>\r\n<li><code>RequestSize</code> : Die Anzahl von Bytes, die in einer einzigen HTTP-Anforderung an den Server gelesen werden sollen. Der Standardwert ist 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Die ConcurrentRequests-Option unterst&#252;tzt einen schnelleren Download von Daten, indem die Anzahl von Anforderungen angegeben wird, die parallel ausgef&#252;hrt werden sollen. Dies geht zulasten der Arbeitsspeichernutzung. Der erforderliche Arbeitsspeicher ist (GleichzeitigeAnforderungen ⋅ Anforderungsgr&#246;&#223;e). Der Standardwert ist 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Gibt die ungefähre Länge der Binärdatei zurück.",
        "Documentation.LongDescription": "Gibt die ungefähre Länge von <code>binary</code> oder einen Fehler zurück, wenn die Datenquelle keine ungefähre Länge unterstützt.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Ruft die ungefähre Länge des binären Werts ab.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Puffert den Binärwert im Arbeitsspeicher.",
        "Documentation.LongDescription": "Puffert den Binärwert im Arbeitsspeicher. Das Ergebnis dieses Aufrufs ist ein stabiler binärer Wert. Das bedeutet, er hat eine deterministische Länge und Bytereihenfolge.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Erstellen Sie eine stabile Version des binären Werts.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Fasst eine Liste mit Binärwerten in einem einzelnen Binärwert zusammen.",
        "Documentation.LongDescription": "Fasst eine Liste mit Binärwerten in einem einzelnen Binärwert zusammen.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Erstellt einen Binärwert auf der Grundlage des angegebenen Werts.",
        "Documentation.LongDescription": "Gibt einen <code>binary</code>-Wert auf der Grundlage des angegebenen Elements vom Typ „<code>value</code>“ zurück. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>NULL</code>, wird von <code>Binary.From</code> der Wert <code>NULL</code> zurückgegeben.  Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>binary</code>, wird „<code>value</code>“ zurückgegeben. Werte folgender Art können in einen <code>binary</code>-Wert konvertiert werden:\r\n      <ul>\r\n        <li><code>text</code>: Ein <code>binary</code>-Wert aus der Textdarstellung. Ausführlichere Informationen finden Sie unter <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nHandelt es sich bei „<code>value</code>“ um einen anderen Typ, wird ein Fehler zurückgegeben.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Ruft den <code>binary</code>-Wert von <code>\"1011\"</code> ab.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Konvertiert eine Liste mit Zahlen in einen Binärwert.",
        "Documentation.LongDescription": "Konvertiert eine Liste mit Zahlen in einen Binärwert.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Decodiert Daten aus einem Textformat in das Binärformat.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Konvertierung des Textwerts \"<code>text</code>\" in einen Binärwert (Liste vom Typ <code>number</code>) zurück. Mit \"<code>encoding</code>\" kann die für den Textwert verwendete Codierung angegeben werden.\r\n      Für \"<code>encoding</code>\" können folgende <code>BinaryEncoding</code>-Werte verwendet werden.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base64-Codierung</li>\r\n        <li><code>BinaryEncoding.Hex</code>: hexadezimale Codierung</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Decodiert \"1011\" ins Binärformat.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Decodiert \"1011\" mit hexadezimaler Codierung ins Binärformat.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Liest den binären Datenstrom und versucht, den Inhaltstyp und die Formatinformationen des Datenstroms zu ermitteln.",
        "Documentation.LongDescription": "Gibt einen Datensatz mit dem Feld \"Content.Type\" zurück, das den abgeleiteten MIME-Typ enthält.\r\n    Wenn der abgeleitete Inhaltstyp \"text/*\" lautet und eine Codierungscodepage erkannt wird, wird zusätzlich das Feld \"Content.Encoding\" mit der Codierung des Datenstroms zurückgegeben.\r\n    Wenn der abgeleitete Inhaltstyp \"text/csv\" lautet und ein Format mit Trennzeichen vorliegt, wird außerdem das Feld \"Csv.PotentialDelimiter\" zurückgegeben, das eine Tabelle für die Analyse möglicher Trennzeichen enthält.\r\n    Wenn der abgeleitete Inhaltstyp \"text/csv\" lautet und ein Format mit fester Breite vorliegt, wird außerdem das Feld \"Csv.PotentialPositions\" zurückgegeben, das eine Liste für die Analyse der potenziellen Spaltenpositionen bei fester Breite enthält.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Gibt die Zeichenanzahl zurück.",
        "Documentation.LongDescription": "Gibt die Zeichenanzahl zurück.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Konvertiert einen Binärwert in eine Liste mit Zahlen.",
        "Documentation.LongDescription": "Konvertiert einen Binärwert in eine Liste mit Zahlen.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Codiert Binärdaten in ein Textformat.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Konvertierung einer Binärliste mit Zahlen (<code>binary</code>) in einen Textwert zurück. Optional kann mit \"<code>encoding</code>\" die gewünschte Codierung für den erzeugten Textwert angegeben werden.\r\n      Für \"<code>encoding</code>\" können folgende <code>BinaryEncoding</code>-Werte verwendet werden.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base64-Codierung</li>\r\n        <li><code>BinaryEncoding.Hex</code>: hexadezimale Codierung</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Erstellt einen geänderten Fehlerdatensatz, der keinen Fallback auslöst, wenn er von einem Handler ausgelöst wird, der für eine Sicht definiert ist (über Binary.View).",
        "Documentation.LongDescription": "Erstellt einen geänderten Fehlerdatensatz von <code>errorRecord</code>, der keinen Fallback auslöst, wenn er von einem Handler ausgelöst wird, der für eine Sicht definiert ist (über Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Erstellt eine Funktion, die von einem Handler abgefangen werden kann, der (über Binary.View) in einer Ansicht definiert wurde.",
        "Documentation.LongDescription": "<p>Erstellt eine auf <code>function</code> basierende Ansichtsfunktion, die in einer von <code>Binary.View</code> erstellten Ansicht verarbeitet werden kann.</p>\r\n<p>Der <code>OnInvoke</code>-Handler von <code>Binary.View</code> kann zum Definieren eines Handlers für die Ansichtsfunktion verwendet werden.</p>\r\n<p>Ebenso wie bei den Handlern für integrierte Vorgänge wird <code>function</code> zusätzlich zur Ansicht angewendet, wenn kein <code>OnInvoke</code>-Handler angegeben wurde oder wenn dieser die Ansichtsfunktion nicht verarbeitet oder einen Fehler ausgibt.</p>\r\n<p>Eine umfassendere Beschreibung von <code>Binary.View</code> und benutzerdefinierten Ansichtsfunktionen finden Sie in der veröffentlichten Dokumentation des benutzerdefinierter Power Query-Connectors.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Ein Binärformat, das eine 64-Bit-Ganzzahl mit Vorzeichen liest, die mit einer 7-Bit-Codierung mit variabler Länge codiert wurde.",
        "Documentation.LongDescription": "Ein Binärformat, das eine 64-Bit-Ganzzahl mit Vorzeichen liest, die mit einer 7-Bit-Codierung mit variabler Länge codiert wurde.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Ein Binärformat, das eine 64-Bit-Ganzzahl ohne Vorzeichen liest, die mit einer 7-Bit-Codierung mit variabler Länge codiert wurde.",
        "Documentation.LongDescription": "Ein Binärformat, das eine 64-Bit-Ganzzahl ohne Vorzeichen liest, die mit einer 7-Bit-Codierung mit variabler Länge codiert wurde.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Ein Binärformat, das eine 8-Bit-Ganzzahl ohne Vorzeichen liest.",
        "Documentation.LongDescription": "Ein Binärformat, das eine 8-Bit-Ganzzahl ohne Vorzeichen liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Ein Binärformat, das einen .NET-16-Byte-Dezimalwert liest.",
        "Documentation.LongDescription": "Ein Binärformat, das einen .NET-16-Byte-Dezimalwert liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Ein Binärformat, das einen 8-Byte-IEEE-Gleitkommawert mit doppelter Genauigkeit liest.",
        "Documentation.LongDescription": "Ein Binärformat, das einen 8-Byte-IEEE-Gleitkommawert mit doppelter Genauigkeit liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Gibt ein Binärformat zurück, das eine Reihe von Elementen liest und eine Liste zurückgibt.",
        "Documentation.LongDescription": "Gibt ein Binärformat zurück, das eine Reihe von Elementen liest und ein <code>list</code>-Element zurückgibt.  Der Parameter <code>binaryFormat</code> gibt das Binärformat der einzelnen Elemente an.  Die Anzahl der zu lesenden Elemente kann auf drei Arten bestimmt werden: <ul><li>Ohne Angabe von <code>countOrCondition</code> liest das Binärformat so lange, bis keine weiteren Elemente vorhanden sind.</li><li>Ist <code>countOrCondition</code> eine Zahl, werden entsprechend viele Elemente gelesen.</li><li>Ist <code>countOrCondition</code> eine Funktion, wird diese für jedes gelesene Element aufgerufen.  Die Funktion gibt \"true\" zurück, um den Vorgang fortzusetzen, oder \"false\", um das Lesen von Elementen zu beenden.  Das finale Element ist in der Liste enthalten.</li><li>Wenn <code>countOrCondition</code> ein Binärformat ist, wird erwartet, dass die Anzahl der Elemente der Liste vorausgeht, und das angegebene Format wird zum Lesen der Anzahl verwendet.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Liest Bytes bis zum Ende der Daten.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Liest zwei Bytes.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Liest Bytes, bis der Bytewert größer oder gleich zwei ist.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Ein Binärformat, durch das 0 (null) Bytes gelesen werden und NULL zurückgegeben wird.",
        "Documentation.LongDescription": "Ein Binärformat, durch das 0 (null) Bytes gelesen werden und NULL zurückgegeben wird.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Gibt ein Binärformat zurück, das einen Datensatz liest.",
        "Documentation.LongDescription": "Gibt ein Binärformat zurück, das einen Datensatz liest.  Der Parameter \"<code>record</code>\" gibt das Format des Datensatzes an.  Jedes Feld im Datensatz kann ein anderes Binärformat besitzen.  Enthält ein Feld einen Wert, bei dem es sich nicht um einen Binärformatwert handelt, werden für dieses Feld keine Daten gelesen, und der Feldwert wird im Ergebnis ausgegeben.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Liest einen Datensatz mit einer 16-Bit-Ganzzahl und einer 32-Bit-Ganzzahl.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Ein Binärformat, das eine 16-Bit-Ganzzahl mit Vorzeichen liest.",
        "Documentation.LongDescription": "Ein Binärformat, das eine 16-Bit-Ganzzahl mit Vorzeichen liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Ein Binärformat, das eine 32-Bit-Ganzzahl mit Vorzeichen liest.",
        "Documentation.LongDescription": "Ein Binärformat, das eine 32-Bit-Ganzzahl mit Vorzeichen liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Ein Binärformat, das eine 64-Bit-Ganzzahl mit Vorzeichen liest.",
        "Documentation.LongDescription": "Ein Binärformat, das eine 64-Bit-Ganzzahl mit Vorzeichen liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Ein Binärformat, das einen 4-Byte-IEEE-Gleitkommawert mit einfacher Genauigkeit liest.",
        "Documentation.LongDescription": "Ein Binärformat, das einen 4-Byte-IEEE-Gleitkommawert mit einfacher Genauigkeit liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Gibt ein Binärformat zurück, das einen Textwert liest.",
        "Documentation.LongDescription": "Gibt ein Binärformat zurück, das einen Textwert liest.  <code>length</code> gibt die Anzahl von Bytes zum Decodieren an, oder das Binärformat der Länge, die dem Text vorausgeht.  Der optionale Wert <code>encoding</code> gibt die Codierung des Texts an.  Ohne Angabe von <code>encoding</code> wird die Codierung anhand der Unicode-Bytereihenfolge-Marken bestimmt.  Sind keine Bytereihenfolge-Marken vorhanden, wird <code>TextEncoding.Utf8</code> verwendet.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Decodiert zwei Bytes als ASCII-Text.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Decodieren Sie ASCII-Text, in dem die Länge des Texts in Bytes vor dem Text als Byte angezeigt wird.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Ein Binärformat, das eine 16-Bit-Ganzzahl ohne Vorzeichen liest.",
        "Documentation.LongDescription": "Ein Binärformat, das eine 16-Bit-Ganzzahl ohne Vorzeichen liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Ein Binärformat, das eine 32-Bit-Ganzzahl ohne Vorzeichen liest.",
        "Documentation.LongDescription": "Ein Binärformat, das eine 32-Bit-Ganzzahl ohne Vorzeichen liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Ein Binärformat, das eine 64-Bit-Ganzzahl ohne Vorzeichen liest.",
        "Documentation.LongDescription": "Ein Binärformat, das eine 64-Bit-Ganzzahl ohne Vorzeichen liest.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Erstellt einen ganzzahligen 8-Bit-Wert aus dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt einen ganzzahligen 8-Bit-<code>number</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>null</code> ist, gibt <code>Byte.From</code> <code>null</code> zurück. Wenn der angegebene <code>value</code>-Wert ein <code>number</code>-Wert aus dem 8-Bit-Ganzzahlbereich ohne Bruchteil ist, wird „<code>value</code>“ zurückgegeben. Wenn ein Bruchteil vorhanden ist, wird der Wert mit dem angegebenen Rundungsmodus gerundet. Der Standardrundungsmodus ist <code>RoundingMode.ToEven</code>. Wenn „<code>value</code>“ einen anderen Typ aufweist, wird der Wert erst mit <code>Number.FromText</code> in einen <code>number</code>-Wert konvertiert. Die verfügbaren Rundungsmodi finden Sie unter <code>Number.Round</code>. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ruft den ganzzahligen 8-Bit-<code>number</code>-Wert <code>\"4\"</code> ab.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ruft den ganzzahligen 8-Bit-<code>number</code>-Wert <code>\"4,5\"</code> mithilfe von <code>RoundingMode.AwayFromZero</code> ab.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Konvertiert eine Zahl in ein Textzeichen.",
        "Documentation.LongDescription": "Gibt die Zeichenentsprechung der Nummer zurück.<br>\r\n    <br>\r\n    Die bereitgestellte <code>number</code> sollte ein 21-Bit-Unicode-Codepunkt sein.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert eine Zahl in den entsprechenden Zeichenwert.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Konvertiert ein Zeichen in eine Zahl und wieder zurück.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Konvertieren Sie den Hexadezimalcodepunkt für das Emoticon \"grinsendes Gesicht\" in das entsprechende UTF-16-Ersatzzeichenpaar.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Konvertiert ein Zeichen in einen Zahlenwert.",
        "Documentation.LongDescription": "Gibt die Zahlenentsprechung der <code>character</code> zurück.<br>\r\n    <br>\r\n    Das Ergebnis ist der 21-Bit-Unicode-Codepunkt, der durch das angegebene Zeichen- oder Ersatzzeichenpaar dargestellt wird.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert ein Zeichen in den entsprechenden Zahlenwert.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Konvertieren Sie das UTF-16-Ersatzzeichenpaar für das Emoticon \"grinsendes Gesicht\" in den entsprechenden hexadezimalen Codepunkt.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Gibt eine Funktion zurück, die eine Liste von Text mithilfe des angegebenen Trennzeichens kombiniert.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die eine Liste mit Textwerten unter Verwendung des angegebenen Trennzeichens zu einem einzelnen Textwert zusammenfasst.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinieren Sie eine Liste von Textwerten mithilfe eines Semikolons.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Kombinieren Sie den Text von zwei Spalten mithilfe eines Komma-Trennzeichens und CSV-Anführungszeichens.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Gibt eine Funktion zurück, die eine Liste von Text mithilfe einer Sequenz von Trennzeichen kombiniert.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die eine Liste von Textwerten mithilfe einer Sequenz von Trennzeichen zu einem einzelnen Textwert kombiniert.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinieren Sie eine Liste von Textwerten mithilfe einer Sequenz von Trennzeichen.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Gibt eine Funktion zurück, die eine Liste von Text mit den angegebenen Längen kombiniert.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die eine Liste von Textwerten unter Verwendung der angegebenen Längen zu einem einzelnen Textwert kombiniert.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinieren Sie eine Liste von Textwerten, indem Sie die angegebene Anzahl von Zeichen aus jedem Eingabewert extrahieren.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Kombinieren Sie eine Liste von Textwerten, indem Sie die angegebene Anzahl von Zeichen extrahieren, nachdem Sie das Ergebnis zuerst mit dem Vorlagentext ausgefüllt haben.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Gibt eine Funktion zurück, die eine Liste von Text unter Verwendung der angegebenen Ausgabepositionen kombiniert.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die eine Liste von Textwerten unter Verwendung der angegebenen Ausgabepositionen zu einem einzelnen Textwert kombiniert.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinieren Sie eine Liste von Textwerten, indem Sie sie an den angegebenen Positionen in der Ausgabe platzieren.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Gibt eine Funktion zurück, die eine Liste von Text unter Verwendung der angegebenen Positionen und Längen kombiniert.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die eine Liste von Textwerten unter Verwendung der angegebenen Ausgabepositionen und -längen zu einem einzelnen Textwert kombiniert. Eine NULL-Länge gibt an, dass der gesamte Textwert eingeschlossen werden soll.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinieren Sie eine Liste von Textwerten mithilfe der angegebenen Ausgabepositionen und -längen.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Gibt eine Vergleichsfunktion basierend auf der angegebenen Berücksichtigung von Kultur und Groß-/Kleinschreibung zurück.",
        "Documentation.LongDescription": "Gibt eine Vergleichsfunktion zurück, die die Angabe \"<code>culture</code>\" und die durch <code>ignoreCase</code> angegebene Berücksichtigung von Groß-/Kleinschreibung zum Ausführen von Vergleichen verwendet. <br>\r\n      <br>\r\n      Eine Vergleichsfunktion akzeptiert zwei Argumente und gibt -1, 0 oder 1 zurück, je nachdem, ob der erste Wert im Vergleich zum zweiten kleiner, gleich oder größer ist.<br>\r\n      <br>\r\n      Der Standardwert für \"<code>ignoreCase</code>\" ist FALSE. \"<code>culture</code>\" muss eines der von .NET Framework unterstützten Gebietsschemas sein (z. B. \"de-DE\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Vergleichen Sie \"a\" und \"A\" mithilfe des Gebietsschemas \"en-US\", um festzustellen, ob die Werte gleich sind.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Vergleichen Sie \"a\" und \"A\" mithilfe des Gebietsschemas \"en-US\", und ignorieren Sie die Groß-/Kleinschreibung, um festzustellen, ob die Werte gleich sind.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Gibt den eindeutigen Mitgliederbezeichner des Mitglieder-Eigenschaftswerts zurück.",
        "Documentation.LongDescription": "Gibt den eindeutigen Mitgliederbezeichner des Mitglieder-Eigenschaftswerts zurück. <code>attribute</code>. Gibt für andere Werte null zurück.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Gibt den Schlüssel einer Eigenschaft zurück.",
        "Documentation.LongDescription": "Gibt den Schlüssel der Eigenschaft \"<code>property</code>\" zurück.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Gibt einen currency-Wert aus dem angegebenen Wert zurück.",
        "Documentation.LongDescription": "Gibt einen <code>currency</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>null</code> ist, gibt <code>Currency.From</code> <code>null</code> zurück. Wenn der angegebene <code>value</code>-Wert <code>number</code> innerhalb des Währungsbereichs ist, wird der Bruchteil von „<code>value</code>“ auf 4 Dezimalstellen gerundet und zurückgegeben. Wenn der angegebene <code>value</code>-Wert einen anderen Typ aufweist, wird er erst mit <code>Number.FromText</code> in einen <code>number</code>-Wert konvertiert. Der gültige Währungsbereich ist <code>-922.337.203.685.477,5808</code> bis <code>922.337.203.685.477,5807</code>. Die verfügbaren Rundungsmodi finden Sie unter <code>Number.Round</code>. Die Standardeinstellung lautet <code>RoundingMode.ToEven</code>. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>currency</code>-Wert von <code>\"1,23455\"</code> abrufen.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Rufen Sie den <code>currency</code>-Wert von <code>\"1,23455\"</code> mithilfe von <code>RoundingMode.Down</code> ab.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Gibt die Tageskomponente zurück.",
        "Documentation.LongDescription": "Gibt die Tageskomponente eines <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Werts zurück.\r\n      <ul>\r\n        <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, aus dem die Tageskomponente extrahiert wird.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ruft die Tageskomponente eines <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Werts für den 14.05.2011, 17:00:00 Uhr ab.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Hiermit wird eine Zahl (zwischen 0 und 6) zurückgegeben, die den Tag der Woche für den angegebenen Wert darstellt.",
        "Documentation.LongDescription": "Hiermit wird eine Zahl (zwischen 0 und 6) zurückgegeben, die den Tag der Woche für den angegebenen Wert \"<code>dateTime</code>\" darstellt.\r\n  <ul>\r\n        <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n        <li><code>firstDayOfWeek</code>: Ein <code>Day</code>-Wert, der angibt, welcher Tag als erster Tag der Woche betrachtet werden soll. Zulässige Werte: Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, Day.Saturday. Sofern nicht angegeben, wird der kulturabhängige Standardwert verwendet.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ruft den Tag der Woche für \"Montag, 21. Februar 2011\" ab. Der Sonntag wird als erster Tag der Woche betrachtet.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Ruft den Tag der Woche für \"Montag, 21. Februar 2011\" ab. Der Montag wird als erster Tag der Woche betrachtet.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Gibt den Namen des Wochentags zurück.",
        "Documentation.LongDescription": "Gibt den Namen des Wochentags für die Angabe \"<code>date</code>\" zurück. Optional kann auch ein Element vom Typ \"<code>culture</code>\" angegeben werden (Beispiel: \"de-DE\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ruft den Namen des Wochentags ab.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Gibt eine Zahl zwischen eins und 366 zurück, die für den Tag des Jahres steht.",
        "Documentation.LongDescription": "Gibt eine Zahl zurück, die für den Tag des Jahres im angegebenen <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert \"<code>dateTime</code>\" steht.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Der Tag des Jahres für den 1. März 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Gibt eine Zahl zwischen 28 und 31 zurück, um die Anzahl von Tagen des Monats anzugeben.",
        "Documentation.LongDescription": "Gibt die Anzahl von Tagen im Monat für den <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert \"<code>dateTime</code>\" zurück.\r\n <ul>\r\n        <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, für den die Anzahl von Tagen im Monat zurückgegeben wird.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Die Anzahl von Tagen im Monat Dezember (dargestellt als <code>#date(2011, 12, 01)></code>).",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Gibt das Ende des Tages zurück.",
        "Documentation.LongDescription": "Gibt das Ende des Tages, das durch <code>dateTime</code> dargestellt wird, zurück. Zeitzoneninformationen werden beibehalten.\r\n      <ul>\r\n        <li><code>dateTime</code>: A <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, auf dessen Grundlage das Tagesende berechnet wird.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ruft das Ende des Tags für den 14.05.2011, 17:00:00 Uhr ab.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Ruft das Ende des Tags für den 17.05.2011, 17:00:00 Uhr (-7:00) ab.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Gibt das Ende des Monats zurück.",
        "Documentation.LongDescription": "Gibt das Ende des Monats, das <code>dateTime</code> enthält, zurück.\r\n      <ul>\r\n        <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, auf dessen Grundlage das Ende des Monats berechnet wird.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ruft das Ende des Monats für den 14.05.2011 ab.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Ruft das Ende des Monats für den 17.05.2011, 17:00:00 Uhr (-7:00) ab.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Gibt das Ende des Quartals zurück.",
        "Documentation.LongDescription": "Gibt das Ende des Quartals, das <code>dateTime</code> enthält, zurück. Zeitzoneninformationen werden beibehalten.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>- Wert, auf dessen Grundlage das Quartalsende berechnet wird.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie das Quartalsende für den 10. Oktober 2011, 8:00 Uhr.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Gibt das Ende der Woche zurück.",
        "Documentation.LongDescription": "Gibt das Ende der Woche, das <code>dateTime</code> enthält, zurück.\r\nDiese Funktion akzeptiert einen optionalen <code>Day</code>-Wert (<code>firstDayOfWeek</code>), um den ersten Tag der Woche für diese relative Berechnung festzulegen. Der Standardwert lautet <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, auf dessen Grundlage der letzte Tag der Woche berechnet wird.</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Optional]</i> Ein <code>Day.Type</code>-Wert, der für den ersten Tag der Woche steht. Mögliche Werte: <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> und <code>Day.Saturday.</code> Der Standardwert lautet<code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ruft das Ende der Woche für den 14.05.2011 ab.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Ruft das Ende der Woche für den 17.05.2011, 17:00:00 Uhr (-7:00) ab, wobei Sonntag als erster Wochentag festgelegt ist.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Gibt das Ende des Jahres zurück.",
        "Documentation.LongDescription": "Gibt das Ende des Jahres, das <code>dateTime</code> enthält, zurück (einschließlich Sekundenbruchteilen). Die Zeitzoneninformationen bleiben erhalten.\r\n      <ul>\r\n        <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, auf dessen Grundlage das Ende des Jahres berechnet wird.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ruft das Ende des Jahres für den 14.05.2011, 17:00:00 Uhr ab.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Ruft das Ende der Stunde für den 17.05.2011, 17:00:00 Uhr (-7:00) ab.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Erstellt ein Datum auf der Grundlage des angegebenen Werts.",
        "Documentation.LongDescription": "Gibt einen <code>date</code>-Wert auf der Grundlage des angegebenen Elements vom Typ „<code>value</code>“ zurück. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).\r\nBesitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>NULL</code>, wird von <code>Date.From</code> der Wert <code>NULL</code> zurückgegeben. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>date</code>, wird „<code>value</code>“ zurückgegeben. Werte folgender Art können in einen <code>date</code>-Wert konvertiert werden:\r\n      <ul>\r\n        <li><code>text</code>: Ein <code>date</code>-Wert auf der Grundlage einer Textdarstellung. Ausführlichere Informationen finden Sie unter <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: Die Datumskomponente des Elements vom Typ „<code>value</code>“.</li>\r\n        <li><code>datetimezone</code>: Die Datumskomponente der lokalen datetime-Entsprechung von „<code>value</code>“.</li>\r\n        <li><code>number</code>: Die Datumskomponente der durch „<code>value</code>“ ausgedrückten datetime-Entsprechung des OLE-Automatisierungsdatums.</li>\r\n      </ul>\r\nHandelt es sich bei „<code>value</code>“ um einen anderen Typ, wird ein Fehler zurückgegeben.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>43910</code> in einen <code>date</code>-Wert.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Konvertiert <code>#datetime(1899, 12, 30, 06, 45, 12)</code> in einen <code>date</code>-Wert.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Erstellt ein Datum aus lokalen, universellen und benutzerdefinierten Datumsformaten.",
        "Documentation.LongDescription": "Erstellt einen <code>date</code>-Wert aus einer Textdarstellung, <code>text</code>. Ein optionaler <code>record</code>-Parameter (<code>options</code>) kann angegeben werden, um zusätzliche Eigenschaften anzugeben. <code>record</code> kann die folgenden Felder enthalten:\r\n<ul>\r\n   <li><code>Format</code>: Ein <code>text</code>-Wert, der das zu verwendende Format angibt. Weitere Details finden Sie unter https://go.microsoft.com/fwlink/?linkid=2180104 und https://go.microsoft.com/fwlink/?linkid=2180105 für Details. Wenn Sie dieses Feld auslassen oder <code>null</code> angeben, wird das Datum nach bestem Wissen geparst.</li>\r\n   <li><code>Culture</code>: Wenn <code>Format</code> nicht null ist, definiert <code>Culture</code> einige Formatspezifikationen. Zum Beispiel, ist in <code>\"en-US\"</code> <code>\"MMM\"</code> <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, während in <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> ist. Wenn <code>Format</code> <code>null</code> ist, bestimmt <code>Culture</code> das zu verwendende Standardformat. Wenn <code>Culture</code> <code>null</code> ist oder weggelassen wird, wird <code>Culture.Current</code> verwendet.</li>\r\n</ul>\r\nZur Unterstützung von Legacyworkflows kann <code>options</code> auch ein Textwert sein. Dies führt zum gleichen Verhalten wie <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertiertieren Sie <code>“2010-12-31“</code> in einen <code>date</code>-Wert.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Führen Sie eine Konvertierung unter Verwendung eines benutzerdefinierten Formats und der Kultur „Deutsch“ durch.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Ermittelt Sie das Datum im gregorianischen Kalender, das dem Anfang des Jahres 1400 im Hijri-Kalender entspricht.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum dem aktuellen Tag entspricht.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert '<code>dateTime</code>' dem aktuellen Tag entspricht.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die aktuelle Systemzeit im aktuellen Tag liegt.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum im aktuellen Monat liegt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert '<code>dateTime</code>' im aktuellen Monat liegt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die aktuelle Systemzeit im aktuellen Monat liegt.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum im aktuellen Quartal liegt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert '<code>dateTime</code>' im aktuellen Quartal liegt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die aktuelle Systemzeit im aktuellen Quartal liegt.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum in der aktuellen Woche liegt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert '<code>dateTime</code>' in der aktuellen Woche liegt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die aktuelle Systemzeit in der aktuellen Woche liegt.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum im aktuellen Jahr liegt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert '<code>dateTime</code>' im aktuellen Jahr liegt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die aktuelle Systemzeit im aktuellen Jahr liegt.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während des nächsten Tags auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Tags auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während des nächsten Tags auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Tags auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob der Tag nach der aktuellen Systemzeit dem nächsten Tag entspricht.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während des nächsten Monats auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Monats auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während des nächsten Monats auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Monats auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob der Monat nach der aktuellen Systemzeit dem nächsten Monat entspricht.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während des nächsten Quartals auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Quartals auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während des nächsten Quartals auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Quartals auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob das Quartal nach der aktuellen Systemzeit dem nächsten Quartal entspricht.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der nächsten Woche auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Woche auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Woche auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Woche auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die Woche nach der aktuellen Systemzeit der nächsten Woche entspricht.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während des nächsten Jahrs auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Jahrs auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während des nächsten Jahrs auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Jahrs auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob das Jahr nach der aktuellen Systemzeit dem nächsten Jahr entspricht.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während des vorherigen Tags auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Tags auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während des vorherigen Tags auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Tags auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob der Tag vor der aktuellen Systemzeit dem vorherigen Tag entspricht.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während des vorherigen Monats auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Monats auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während des vorherigen Monats auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Monats auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob der Monat vor der aktuellen Systemzeit dem vorherigen Monat entspricht.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während des vorherigen Quartals auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Quartals auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während des vorherigen Quartals auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Quartals auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob das Quartal vor der aktuellen Systemzeit dem vorherigen Quartal entspricht.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während der vorherigen Woche auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Woche auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Woche auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Woche auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die Woche vor der aktuellen Systemzeit der vorherigen Woche entspricht.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum während des vorherigen Jahrs auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Jahrs auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während des vorherigen Jahrs auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb des aktuellen Jahrs auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob das Jahr vor der aktuellen Systemzeit dem vorherigen Jahr entspricht.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieses Datum im aktuellen Jahr liegt und dem aktuellen Tag oder Vortag entspricht.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert '<code>dateTime</code>' im aktuellen Jahr liegt und dem aktuellen Tag oder Vortag entspricht.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob die aktuelle Systemzeit im Jahr-bis-heute liegt.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Gibt an, ob dieses Datum in einem Schaltjahr liegt.",
        "Documentation.LongDescription": "Gibt an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" in einem Schaltjahr liegt.\r\n <ul>\r\n        <li><code>dateTime</code>: Ein auszuwertender <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmt, ob das als <code>#date(2012, 01, 01)</code> dargestellte Jahr 2012 ein Schaltjahr ist.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Gibt die Monatskomponente zurück.",
        "Documentation.LongDescription": "Gibt die Monatskomponente des angegebenen <code>datetime</code>-Werts \"<code>dateTime</code>\" zurück.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Monat in \"#datetime(2011, 12, 31, 9, 15, 36)\".",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Gibt den Namen der Monatskomponente zurück.",
        "Documentation.LongDescription": "Gibt den Namen der Monatskomponente für die Angabe \"<code>date</code>\" zurück. Optional kann auch ein Element vom Typ \"<code>culture</code>\" angegeben werden (Beispiel: \"de-DE\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ruft den Namen des Monats ab.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Gibt eine Zahl zurück, die angibt, in welchem Quartal des Jahres das Datum liegt.",
        "Documentation.LongDescription": "Gibt eine Zahl zwischen eins und vier zurück, die angibt, in welchem Quartal des Jahres das Datum \"<code>dateTime</code>\" liegt. \"<code>dateTime</code>\" kann ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert sein.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt das Quartal des Jahres, in dem das Datum \"#date(2011, 12, 31)\" liegt.",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Gibt den Beginn des Tages zurück.",
        "Documentation.LongDescription": "Gibt den Beginn des Tags, der durch <code>dateTime</code> dargestellt wird, zurück.\r\n    <code>dateTime</code> muss ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert sein.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie dem Beginn des Tages für den 10. Oktober 2011, 8:00 Uhr.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Gibt den Beginn des Monats zurück.",
        "Documentation.LongDescription": "Gibt den Beginn des Monats, der <code>dateTime</code> enthält, zurück.\r\n    <code>dateTime</code> muss ein <code>date</code>- oder <code>datetime</code>-Wert sein.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie dem Beginn des Monats für den 10. Oktober 2011, 8:10:32 Uhr.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Gibt den Beginn des Quartals zurück.",
        "Documentation.LongDescription": "Gibt den Beginn des Quartals, der <code>dateTime</code> enthält, zurück.\r\n      <code>dateTime</code> muss ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert sein.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie den Beginn des Quartals für den 10. Oktober 2011, 8:00 Uhr.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Gibt den Wochenanfang zurück.",
        "Documentation.LongDescription": "Gibt den Beginn der Woche, der <code>dateTime</code> enthält, zurück.\r\n      <code>dateTime</code> muss ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert sein.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie den Wochenanfang für die Woche vom Dienstag, 11. Oktober 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Suchen Sie den Wochenanfang für die Woche vom Dienstag, den 11. Oktober 2011, mithilfe von Montag als Beginn der Woche.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Gibt den Beginn des Jahres zurück.",
        "Documentation.LongDescription": "Gibt den Beginn des Jahres, der <code>dateTime</code> enthält, zurück.\r\n      <code>dateTime</code> muss ein <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert sein.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie den Beginn des Jahres für den 10. Oktober 2011, 8:10:32 Uhr.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Gibt einen Datensatz mit Teilen des Datumswerts zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz mit den Teilen des angegebenen Datumswerts (<code>date</code>) zurück.\r\n <ul>\r\n        <li><code>date</code>: Ein <code>date</code>-Wert, auf dessen Grundlage der Datensatz mit den zugehörigen Teilen berechnet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert den Wert <code>#date(2011, 12, 31)</code> in einen Datensatz mit Teilen aus dem Datumswert.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Gibt eine Textdarstellung des Datumswerts zurück.",
        "Documentation.LongDescription": "Gibt eine Textdarstellung von <code>date</code> zurück. Ein optionaler <code>record</code>-Parameter, <code>options</code>, kann angegeben werden, um zusätzliche Eigenschaften anzugeben. <code>culture</code> wird nur für Legacyworkflows verwendet. <code>record</code> kann die folgenden Felder enthalten:\r\n<ul>\r\n   <li><code>Format</code>: Ein <code>text</code>-Wert, der das zu verwendende Format angibt. Weitere Details finden Sie unter https://go.microsoft.com/fwlink/?linkid=2180104 und https://go.microsoft.com/fwlink/?linkid=2180105. Wenn Sie dieses Feld auslassen oder <code>null</code> angeben, wird das Datum mit dem durch <code>Culture</code> definierten Standard formatiert.</li>\r\n   <li><code>Culture</code>: Wenn <code>Format</code> nicht null ist, bestimmt <code>Culture</code> manche Formatbezeichner. Zum Beispiel, ist in <code>\"en-US\"</code> <code>\"MMM\"</code>  <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, whärend in <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> ist. Wenn <code>Format</code> <code>null</code> ist, bestimmt <code>Culture</code> das zu verwendende Standardformat. Wenn <code>Culture</code> <code>null</code> ist oder ausgelassen wird, wird <code>Culture.Current</code> verwendet.</li>\r\n</ul>\r\nZur Unterstützung von Legacyworkflows können <code>options</code> und <code>culture</code> auch Textwerte sein. Dies führt zum gleichen Verhalten wie <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertieren Sie <code>#date(2010, 12, 31)</code> in einen <code>text</code>-Wert. <i>Das ausgegebene Ergebnis variiert in Abhängigkeit der aktuell ausgewählten Kultur.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Führen Sie eine Konvertierung unter Verwendung eines benutzerdefinierten Formats und der Kultur „Deutsch“ durch.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Ermittelt Sie das Datum im Hijri-Kalender, das dem 1. Januar 2000 im gregorianischen Kalender entspricht.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Gibt eine Zahl zwischen 1 und 6 zurück, die angibt, in welcher Woche des Monats dieses Datum liegt.",
        "Documentation.LongDescription": "Gibt eine Zahl zwischen 1 und 6 zurück, die angibt, in welcher Woche des Monats das Datum <code>dateTime</code> liegt.\r\n <ul>\r\n <li><code>dateTime</code>: Ein <code>datetime</code>Wert, für den die Woche des Monats bestimmt wird.</li>\r\n</ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmen Sie, auf welche Woche im März 2011 der 15. März fällt.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Gibt eine Zahl zwischen eins und 54 zurück, die angibt, in welcher Woche des Jahres das Datum liegt.",
        "Documentation.LongDescription": "Gibt eine Zahl zwischen 1 und 54 zurück, die angibt, in welche Woche des Jahres das Datum <code>dateTime</code> fällt.\r\n <ul>\r\n        <li><code>dateTime</code>: Ein <code>datetime</code>-Wert, für den die Woche des Jahres ermittelt wird.</li>\r\n        <li><code>firstDayOfWeek</code>: Ein optionaler <code>Day.Type</code>-Wert, der angibt, welcher Tag als Beginn einer neuen Woche gilt (z. B. <code>\"Day.Sunday\"</code>). Falls dieser Wert nicht angegeben wird, wird der kulturspezifische Standardwert verwendet.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Bestimmen Sie, welche Woche des Jahres den 27. März 2011 enthält.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Bestimmen Sie, welche Woche des Jahres den 27. März 2011 enthält, wobei Sie Montag als Beginn der Woche verwenden.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Gibt die Jahreskomponente zurück.",
        "Documentation.LongDescription": "Gibt die Jahreskomponente des angegebenen <code>datetime</code>-Werts \"<code>dateTime</code>\" zurück.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt das Jahr in \"#datetime(2011, 12, 31, 9, 15, 36)\".",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Gibt die Datumskomponente des angegebenen date-, datetime- oder datetimezone-Werts zurück.",
        "Documentation.LongDescription": "Gibt die Datumskomponente von \"<code>dateTime</code>\" (der angegebene <code>date</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert) zurück.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Datumswert von \"#datetime(2010, 12, 31, 11, 56, 02)\".",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Erstellt einen datetime-Wert auf der Grundlage des angegebenen Werts.",
        "Documentation.LongDescription": "Gibt einen <code>datetime</code>-Wert auf der Grundlage des angegebenen Elements vom Typ „<code>value</code>“ zurück. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).\r\nBesitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>NULL</code>, wird von <code>DateTime.From</code> der Wert <code>NULL</code> zurückgegeben. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>datetime</code>, wird „<code>value</code>“ zurückgegeben. Werte folgender Art können in einen <code>datetime</code>-Wert konvertiert werden:\r\n      <ul>\r\n        <li><code>text</code>: Ein <code>datetime</code>-Wert auf der Grundlage einer Textdarstellung. Ausführlichere Informationen finden Sie unter <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: Ein <code>datetime</code>-Wert mit „<code>value</code>“ als Datumskomponente und <code>12:00:00 AM</code> als Uhrzeitkomponente.</li>\r\n        <li><code>datetimezone</code>: Die lokale <code>datetime</code>-Entsprechung von „<code>value</code>“.</li>\r\n        <li><code>time</code>: Ein <code>datetime</code>-Wert mit der Datumsentsprechung des OLE-Automatisierungsdatums von <code>0</code> als Datumskomponente und „<code>value</code>“ als Uhrzeitkomponente.</li>\r\n        <li><code>number</code>: Eine durch „<code>value</code>“ ausgedrückte <code>datetime</code>-Entsprechung des OLE-Automatisierungsdatums. </li>\r\n      </ul>\r\nHandelt es sich bei „<code>value</code>“ um einen anderen Typ, wird ein Fehler zurückgegeben.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>#time(06, 45, 12)</code> in einen <code>datetime</code>-Wert.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Konvertiert <code>#date(1975, 4, 4)</code> in einen <code>datetime</code>-Wert.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Erstellt einen datetime-Wert auf der Grundlage einer 64-Bit-Zahl.",
        "Documentation.LongDescription": "Erstellt einen <code>datetime</code>-Wert auf der Grundlage des Werts \"<code>fileTime</code>\" und konvertiert ihn in die lokale Zeitzone. Die Dateizeit ist ein Windows-Dateizeitwert und steht für die Anzahl der verstrichenen 100-Nanosekunden-Intervalle seit dem 1. Januar 1601 n.Chr., 0:00 Uhr (christliche Zeitrechnung), koordinierte Weltzeit (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>129876402529842245</code> in einen datetime-Wert.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Erstellt einen datetimezone-Wert auf der Grundlage lokaler und universeller datetime-Formate.",
        "Documentation.LongDescription": "Erstellt einen <code>datetime</code>-Wert aus einer Textdarstellung, <code>text</code>. Ein optionaler <code>record</code>-Parameter, <code>options</code>, kann angegeben werden, um zusätzliche Eigenschaften anzugeben. <code>record</code> kann die folgenden Felder enthalten:\r\n<ul>\r\n   <li><code>Format</code>: Ein <code>text</code>-Wert, der das zu verwendende Format angibt. Weitere Details finden Sie unter https://go.microsoft.com/fwlink/?linkid=2180104 und https://go.microsoft.com/fwlink/?linkid=2180105. Wenn Sie dieses Feld auslassen oder <code>null</code> angeben, wird das Datum nach bestem Wissen geparst.</li>\r\n   <li><code>Culture</code>: Wenn <code>Format</code> nicht null ist, bestimmt <code>Culture</code> einige Formatspezifikationen. Zum Beispiel, ist in <code>\"en-US\"</code> <code>\"MMM\"</code> <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, während in <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> ist. Wenn <code>Format</code> <code>null</code> ist, bestimmt <code>Culture</code> das zu verwendende Standardformat. Wenn <code>Culture</code> <code>null</code> ist oder weggelassen wird, wird <code>Culture.Current</code> verwendet.</li>\r\n</ul>\r\nZur Unterstützung von Legacyworkflows kann <code>options</code> auch ein Textwert sein. Dies führt zum gleichen Verhalten wie <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertieren Sie <code>\"2010-12-31T01:30:00\"</code> in einen datetime-Wert.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Konvertieren Sie <code>\"2010-12-31T01:30:00.121212\"</code> in einen datetime-Wert.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Konvertieren Sie <code>\"2010-12-31T01:30:00\"</code> in einen datetime-Wert.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Konvertieren Sie <code>\"20101231T013000\"</code> in einen datetime-Wert.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Gibt an, ob dieser datetime-Wert während der aktuellen Stunde auftritt, die vom aktuellen Datum und der aktuellen Uhrzeit des Systems festgelegt wird.",
        "Documentation.LongDescription": "Gibt an, ob der angegebene datetime-Wert <code>dateTime</code> während der aktuellen Stunde auftritt, die vom aktuellen Datum und der aktuellen Uhrzeit des Systems festgelegt wird.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die aktuelle Systemzeit die aktuelle Stunde ist.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Gibt an, ob dieser datetime-Wert während der aktuellen Minute auftritt, die vom aktuellen Datum und der aktuellen Uhrzeit des Systems festgelegt wird.",
        "Documentation.LongDescription": "Gibt an, ob der angegebene datetime-Wert <code>dateTime</code> während der aktuellen Minute auftritt, die vom aktuellen Datum und der aktuellen Uhrzeit des Systems festgelegt wird.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die aktuelle Systemzeit die aktuelle Minute ist.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Gibt an, ob dieser datetime-Wert während der aktuellen Sekunde auftritt, die vom aktuellen Datum und der aktuellen Uhrzeit des Systems festgelegt wird.",
        "Documentation.LongDescription": "Gibt an, ob der angegebene datetime-Wert <code>dateTime</code> während der aktuellen Sekunde auftritt, die vom aktuellen Datum und der aktuellen Uhrzeit des Systems festgelegt wird.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein auszuwertender <code>datetime</code>- oder <code>datetimezone</code>-Wert.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die aktuelle Systemzeit die aktuelle Sekunde ist.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der nächsten Stunde auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Stunde auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Stunde auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Stunde auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Stunde nach der aktuellen Systemzeit in der nächsten Stunde liegt.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der nächsten Minute auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Minute auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Minute auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Minute auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Minute nach der aktuellen Systemzeit in der nächsten Minute liegt.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der nächsten Sekunde auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Sekunde auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der nächsten Sekunde auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Sekunde auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Sekunde nach der aktuellen Systemzeit in der nächsten Sekunde liegt.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der vorherigen Stunde auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Stunde auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Stunde auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Stunde auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Stunde vor der aktuellen Systemzeit in der vorherigen Stunde liegt.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der vorherigen Minute auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Minute auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Minute auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Minute auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Minute vor der aktuellen Systemzeit in der vorherigen Minute liegt.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob dieser datetime-Wert während der vorherigen Sekunde auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Sekunde auftritt.",
        "Documentation.LongDescription": "Gibt auf Grundlage des aktuellen Systemdatums und der aktuellen Systemzeit an, ob der angegebene datetime-Wert \"<code>dateTime</code>\" während der vorherigen Sekunde auftritt. Beachten Sie, dass diese Funktion FALSE zurückgibt, wenn der übergebene Wert innerhalb der aktuellen Sekunde auftritt.\r\n      <ul>\r\n      <li><code>dateTime</code>: Ein <code>datetime</code>- oder <code>datetimezone</code>-Wert, der ausgewertet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Sekunde vor der aktuellen Systemzeit in der vorherigen Sekunde liegt.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Gibt den Uhrzeitanteil des angegebenen datetime-Werts zurück.",
        "Documentation.LongDescription": "Gibt den Uhrzeitanteil des angegebenen datetime-Werts (<code>dateTime</code>) zurück.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Uhrzeitwert von \"#datetime(2010, 12, 31, 11, 56, 02)\".",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Gibt einen Datensatz mit den Teilen des datetime-Werts zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz mit den Teilen des angegebenen datetime-Werts (<code>dateTime</code>) zurück.\r\n <ul>\r\n        <li><code>dateTime</code>: Ein <code>datetime</code>-Wert, auf dessen Grundlage der Datensatz mit den zugehörigen Teilen berechnet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert den Wert <code>#datetime(2011, 12, 31, 11, 56, 2)</code> in einen Datensatz mit Datums- und Uhrzeitwerten.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Gibt eine Textdarstellung des datetime-Werts zurück.",
        "Documentation.LongDescription": "Gibt eine Textdarstellung von <code>dateTime</code> zurück. Ein optionaler <code>record</code>-Parameter, <code>options</code>, kann angegeben werden, um zusätzliche Eigenschaften anzugeben. <code>culture</code> wird nur für Legacyworkflows verwendet. <code>record</code> kann die folgenden Felder enthalten:\r\n<ul>\r\n   <li><code>Format</code>: Ein <code>text</code>-Wert, der das zu verwendende Format angibt. Weitere Details finden Sie unter https://go.microsoft.com/fwlink/?linkid=2180104 und https://go.microsoft.com/fwlink/?linkid=2180105. Wenn Sie dieses Feld auslassen oder <code>null</code> angeben, wird das Datum mit dem durch <code>Culture</code> definierten Standard formatiert.</li>\r\n   <li><code>Culture</code>: Wenn <code>Format</code> nicht null ist, bestimmt <code>Culture</code> manche Formatbezeichner. Zum Beispiel, ist in <code>\"en-US\"</code> <code>\"MMM\"</code>  <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, whärend in <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> ist. Wenn <code>Format</code> <code>null</code> ist, bestimmt <code>Culture</code> das zu verwendende Standardformat. Wenn <code>Culture</code> <code>null</code> ist oder ausgelassen wird, wird <code>Culture.Current</code> verwendet.</li>\r\n</ul>\r\nZur Unterstützung von Legacyworkflows können <code>options</code> und <code>culture</code> auch Textwerte sein. Dies führt zum gleichen Verhalten wie <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertieren Sie <code>#datetime(2010, 12, 31, 01, 30, 25)</code> in einen <code>text</code>-Wert. <i>Das ausgegebene Ergebnis variiert in Abhängigkeit der aktuell ausgewählten Kultur.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Führen Sie eine Konvertierung unter Verwendung eines benutzerdefinierten Formats und der Kultur „Deutsch“ durch.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Führen Sie eine Konvertierung gemäß dem ISO 8601-Muster durch.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Erstellt einen datetimezone-Wert auf der Grundlage des angegebenen Werts.",
        "Documentation.LongDescription": "Gibt einen <code>datetimezone</code>-Wert auf der Grundlage des angegebenen Elements vom Typ <code>value</code> zurück. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).\r\nBesitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>NULL</code>, wird von <code>DateTimeZone.From</code> der Wert <code>NULL</code> zurückgegeben. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>datetimezone</code>, wird „<code>value</code>“ zurückgegeben. Werte folgender Art können in einen <code>datetimezone</code>-Wert konvertiert werden:\r\n      <ul>\r\n        <li><code>text</code>: Ein <code>datetimezone</code>-Wert auf der Grundlage einer Textdarstellung. Ausführlichere Informationen finden Sie unter <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: Ein <code>datetimezone</code>-Wert mit „<code>value</code>“ als Datumskomponente, <code>12:00:00 AM</code> als Uhrzeitkomponente und einem entsprechenden Offset für die lokale Zeitzone.</li>\r\n        <li><code>time</code>: Ein <code>datetimezone</code>-Wert mit „<code>value</code>“ als datetime-Element und einem entsprechenden Offset für die lokale Zeitzone.</li>\r\n        <li><code>time</code>: Ein <code>datetimezone</code>-Wert mit der Datumsentsprechung des OLE-Automatisierungsdatums von <code>0</code> als Datumskomponente, mit „<code>value</code>“ als Uhrzeitkomponente und mit dem entsprechenden Offset für die lokale Zeitzone.</li>\r\n        <li><code>number</code>: Ein <code>datetimezone</code>-Wert mit der durch „<code>value</code>“ ausgedrückten datetime-Entsprechung des OLE-Automatisierungsdatums und dem entsprechenden Offset für die lokale Zeitzone.</li>\r\n      </ul>\r\nHandelt es sich bei „<code>value</code>“ um einen anderen Typ, wird ein Fehler zurückgegeben.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>\"2020-10-30T01:30:00-08:00\"</code> in einen <code>datetimezone</code>-Wert.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Erstellt einen datetimezone-Wert auf der Grundlage einer 64-Bit-Zahl.",
        "Documentation.LongDescription": "Erstellt einen <code>datetimezone</code>-Wert auf der Grundlage des Werts \"<code>fileTime</code>\" und konvertiert ihn in die lokale Zeitzone. Die Dateizeit ist ein Windows-Dateizeitwert und steht für die Anzahl der verstrichenen 100-Nanosekunden-Intervalle seit dem 1. Januar 1601 n.Chr., 0:00 Uhr (christliche Zeitrechnung), koordinierte Weltzeit (UTC).\r\n",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>129876402529842245</code> in einen datetimezone-Wert.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Erstellt einen datetimezone-Wert aus lokalen, universellen und benutzerdefinierten datetimezone-Formaten.",
        "Documentation.LongDescription": "Erstellt einen <code>datetimezone</code>-Wert aus einer Textdarstellung, <code>text</code>. Ein optionaler <code>record</code>-Parameter (<code>options</code>) kann angegeben werden, um zusätzliche Eigenschaften anzugeben. <code>record</code> kann die folgenden Felder enthalten:\r\n<ul>\r\n   <li><code>Format</code>: Ein <code>text</code>-Wert, der das zu verwendende Format angibt. Weitere Informationen erhalten Sie unter https://go.microsoft.com/fwlink/?linkid=2180104 und https://go.microsoft.com/fwlink/?linkid=2180105. Wenn Sie dieses Feld auslassen oder <code>null</code> angeben, wird das Datum nach bestem Wissen geparst.</li>\r\n   <li><code>Culture</code>: Wenn <code>Format</code> nicht null ist, definiert <code>Culture</code> einige Formatspezifikationen. Zum Beispiel, ist in <code>\"en-US\"</code> <code>\"MMM\"</code> <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, während in <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> ist. Wenn <code>Format</code> <code>null</code> ist, bestimmt <code>Culture</code> das zu verwendende Standardformat. Wenn <code>Culture</code> <code>null</code> ist oder weggelassen wird, wird <code>Culture.Current</code> verwendet.</li>\r\n</ul>\r\nZur Unterstützung von Legacyworkflows kann <code>options</code> auch ein Textwert sein. Dies führt zum gleichen Verhalten wie <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertieren Sie <code>\"2010-12-31T01:30:00-08:00\"</code> in einen <code>datetimezone</code>-Wert.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Führen Sie eine Konvertierung unter Verwendung eines benutzerdefinierten Formats und der Kultur „Deutsch“ durch.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Führen Sie eine Konvertierung gemäß ISO 8601 durch.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Entfernt Zeitzoneninformationen aus dem angegebenen datetimezone-Wert.",
        "Documentation.LongDescription": "Gibt einen #datetime-Wert aus \"<code>dateTimeZone</code>\" mit entfernten Zeitzoneninformationen zurück.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Entfernt Zeitzoneninformationen aus dem Wert \"#datetimezone (2011, 12, 31, 9, 15, 36, -7, 0)\".",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Konvertiert die Zeitzonenkomponente in die lokale Zeitzone.",
        "Documentation.LongDescription": "Ändert die Zeitzoneninformationen des datetimezone-Werts \"<code>dateTimeZone</code>\" in die lokalen Zeitzoneninformationen.\r\n    Besitzt \"<code>dateTimeZone</code>\" keine Zeitzonenkomponente, werden die lokalen Zeitzoneninformationen hinzugefügt.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Ändert die Zeitzoneninformationen für \"#datetimezone (2010, 12, 31, 11, 56, 02, 7, 30)\" in die lokale Zeitzone (PST vorausgesetzt).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Gibt einen Datensatz mit den Teilen des datetimezone-Werts zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz mit den Teilen des angegebenen datetimezone-Werts (<code>dateTimeZone</code>) zurück.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: Ein <code>datetimezone</code>-Wert, auf dessen Grundlage der Datensatz mit den zugehörigen Teilen berechnet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert den Wert <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> in einen Datensatz mit Datums-, Uhrzeit- und Zeitzonenwerten.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Gibt eine Textdarstellung des datetimezone-Werts zurück.",
        "Documentation.LongDescription": "Gibt eine Textdarstellung von <code>dateTimeZone</code> zurück. Ein optionaler <code>record</code>-Parameter, <code>options</code>, kann angegeben werden, um zusätzliche Eigenschaften anzugeben. <code>culture</code> wird nur für Legacyworkflows verwendet. <code>record</code> kann die folgenden Felder enthalten:\r\n<ul>\r\n   <li><code>Format</code>: Ein <code>text</code>-Wert, der das zu verwendende Format angibt. Weitere Details finden Sie unter https://go.microsoft.com/fwlink/?linkid=2180104 und https://go.microsoft.com/fwlink/?linkid=2180105. Wenn Sie dieses Feld auslassen oder <code>null</code> angeben, wird das Datum mit dem durch <code>Culture</code> definierten Standard formatiert.</li>\r\n   <li><code>Culture</code>: Wenn <code>Format</code> nicht null ist, bestimmt <code>Culture</code> manche Formatbezeichner. Zum Beispiel, ist in <code>\"en-US\"</code> <code>\"MMM\"</code>  <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, whärend in <code>\"ru-RU\"</code> <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> ist. Wenn <code>Format</code> <code>null</code> ist, bestimmt <code>Culture</code> das zu verwendende Standardformat. Wenn <code>Culture</code> <code>null</code> ist oder ausgelassen wird, wird <code>Culture.Current</code> verwendet.</li>\r\n</ul>\r\nZur Unterstützung von Legacyworkflows können <code>options</code> und <code>culture</code> auch Textwerte sein. Dies führt zum gleichen Verhalten wie <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertieren Sie <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> in einen <code>text</code>-Wert. <i>Das ausgegebene Ergebnis variiert in Abhängigkeit der aktuell ausgewählten Kultur.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Führen Sie eine Konvertierung unter Verwendung eines benutzerdefinierten Formats und der Kultur „Deutsch“ durch.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Führen Sie eine Konvertierung gemäß dem ISO 8601-Muster durch.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Konvertiert die Zeitzonenkomponente in die UTC-Zeitzone.",
        "Documentation.LongDescription": "Ändert die Zeitzoneninformationen des datetime-Werts \"<code>dateTimeZone</code>\" in die Zeitzoneninformationen für UTC oder Universalzeit.\r\n    Besitzt \"<code>dateTimeZone</code>\" keine Zeitzonenkomponente, werden die UTC-Zeitzoneninformationen hinzugefügt.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Ändert die Zeitzoneninformationen für \"#datetimezone (2010, 12, 31, 11, 56, 02, 7, 30)\" in die UTC-Zeitzone.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Ändert die Zeitzone des Werts.",
        "Documentation.LongDescription": "Ändert die Zeitzone des Werts.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Ändert die Zeitzone des Werts.",
        "Documentation.LongDescription": "Ändert die Zeitzone des Werts.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Erstellt einen Dezimalwert aus dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt einen Dezimal-<code>number</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>null</code> ist, gibt <code>Decimal.From</code> <code>null</code> zurück. Wenn der angegebene <code>value</code>-Wert <code>number</code> im Bereich von „Dezimal“ liegt, wird „<code>value</code>“ zurückgegeben. Andernfalls wird ein Fehler zurückgegeben. Wenn der <code>value</code>-Wert einen anderen Typ aufweist, wird er erst mit <code>Number.FromText</code> in einen <code>number</code>-Wert konvertiert. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ruft den <code>number</code>-Wert <code>\"4,5\"</code> ab.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Gibt den Inhalt der Delta Lake-Tabelle zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt der Delta Lake-Tabelle zurück.",
        "Documentation.Category": "Datenzugriff",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Erstellt einen Double-Wert aus dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt einen Double-<code>number</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>null</code> ist, gibt <code>Double.From</code> <code>null</code> zurück. Wenn der angegebene <code>value</code>-Wert <code>number</code> im Bereich von „Double“ liegt, wird „<code>value</code>“ zurückgegeben. Andernfalls wird ein Fehler zurückgegeben. Wenn der <code>value</code>-Wert einen anderen Typ aufweist, wird er erst mit <code>Number.FromText</code> in einen <code>number</code>-Wert konvertiert. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ruft den Double-<code>number</code>-Wert <code>\"4\"</code> ab.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Gibt den Tageanteil einer Dauer zurück.",
        "Documentation.LongDescription": "Gibt den Tageanteil von <code>duration</code> zurück.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrahieren Sie die Anzahl der Tage zwischen zwei Datumsangaben.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Erstellt eine Dauer auf der Grundlage des angegebenen Werts.",
        "Documentation.LongDescription": "Gibt einen <code>duration</code>-Wert auf der Grundlage des angegebenen Elements vom Typ „<code>value</code>“ zurück. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>NULL</code>, wird von <code>Duration.From</code> der Wert <code>NULL</code> zurückgegeben. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>duration</code>, wird „<code>value</code>“ zurückgegeben. Werte folgender Art können in einen <code>duration</code>-Wert konvertiert werden:\r\n      <ul>\r\n        <li><code>text</code>: Ein <code>duration</code>-Wert auf der Grundlage verstrichener Zeit im Textformat (d.h:m:s). Ausführlichere Informationen finden Sie unter <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>: Eine <code>duration</code>-Entsprechung für die durch „<code>value</code>“ ausgedrückte Anzahl ganzer und anteiliger Tage.</li>\r\n      </ul>\r\nHandelt es sich bei „<code>value</code>“ um einen anderen Typ, wird ein Fehler zurückgegeben.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>2.525</code> in einen <code>duration</code>-Wert.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Gibt einen duration-Wert auf der Grundlage von verstrichener Zeit zurück, die im Textformat (d.h:m:s) angegeben wurde.",
        "Documentation.LongDescription": "Gibt einen duration-Wert auf der Grundlage des angegebenen Texts \"<code>text</code>\" zurück. Folgende Formate können von dieser Funktion analysiert werden:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Alle Bereiche eingeschlossen)<br>\r\n        ddd: Anzahl von Tagen.<br>\r\n        hh: Anzahl von Stunden, zwischen 0 und 23.<br>\r\n        mm: Anzahl von Minuten, zwischen 0 und 59.<br>\r\n        ss: Anzahl von Sekunden, zwischen 0 und 59.<br>\r\n        ff: Sekundenbruchteil, zwischen 0 und 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>\"2.05:55:20\"</code> in einen <code>duration</code>-Wert.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Gibt den Stundenanteil einer Dauer zurück.",
        "Documentation.LongDescription": "Gibt den Stundenbereich von <code>duration</code> zurück.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Die Stunden aus einem Dauerwert extrahieren.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Gibt den Minutenanteil einer Dauer zurück.",
        "Documentation.LongDescription": "Gibt den Minutenanteil von <code>duration</code> zurück.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Die Minuten aus einem Dauerwert extrahieren.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Gibt den Sekundenanteil einer Dauer zurück.",
        "Documentation.LongDescription": "Gibt den Sekundenanteil von <code>duration</code> zurück.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Die Sekunden aus einem Dauerwert extrahieren.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Gibt einen Datensatz mit den Teilen der Dauer zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz mit den Teilen des duration-Werts \"<code>duration</code>\" zurück.\r\n  <ul>\r\n        <li><code>duration</code>: Ein <code>duration</code>-Wert, auf dessen Grundlage der Datensatz erstellt wird.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>#duration(2, 5, 55, 20)</code> in einen Datensatz mit den zugehörigen Teilen (einschließlich Tage, Minuten und Sekunden, sofern zutreffend).",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Gibt den Text im Format \"d.h:m:s\" zurück.",
        "Documentation.LongDescription": "Gibt eine Textdarstellung im Format \"day.hour:mins:sec\" des angegebenen Werts für die Dauer (<code>duration</code>) zurück.\r\n <ul>\r\n        <li><code>duration</code>: Eine Dauer (<code>duration</code>), aus der die Textdarstellung berechnet wird.</li>\r\n  <li><code>format</code>: <i>[Optional]</i> Veraltet. Bei einem Wert ungleich NULL wird ein Fehler ausgelöst.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>#duration(2, 5, 55, 20)</code> in einen Textwert.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Gibt die Gesamtanzahl von Tagen für diese Dauer zurück.",
        "Documentation.LongDescription": "Gibt die Gesamtzahl der Tage zurück, die von <code>duration</code> umfasst werden.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Die Gesamtzahl der Tage suchen, die sich über einen Dauerwert erstrecken.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Gibt die Gesamtanzahl von Stunden für diese Dauer zurück.",
        "Documentation.LongDescription": "Gibt die Gesamtstunden zurück, die <code>duration</code> umfasst.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Die Gesamtstunden suchen, die sich über einen Dauerwert erstrecken.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Gibt die Gesamtanzahl von Minuten für diese Dauer zurück.",
        "Documentation.LongDescription": "Gibt die Gesamtanzahl von Minuten zurück, die von <code>duration</code> umfasst werden.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Die Gesamtanzahl von Minuten suchen, die sich über einen Dauerwert erstrecken.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Gibt die Gesamtanzahl von Sekunden für diese Dauer zurück.",
        "Documentation.LongDescription": "Gibt die Gesamtzahl der Sekunden zurück, die von <code>duration</code> umfasst werden.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Die Gesamtanzahl der Sekunden suchen, die sich über einen Dauerwert erstrecken.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Gibt auf der Grundlage der angegebenen Textwerte für Ursache, Nachricht und Details einen Fehlerdatensatz zurück.",
        "Documentation.LongDescription": "Gibt auf der Grundlage der angegebenen Textwerte für Ursache, Nachricht und Details einen Fehlerdatensatz zurück.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.LongDescription": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Gibt die M-Quellcodedarstellung eines konstanten Werts zurück.",
        "Documentation.LongDescription": "Gibt die M-Quellcodedarstellung eines konstanten Werts zurück.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Hiermit wird die M-Quellcodedarstellung eines Zahlenwerts abgerufen.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Hiermit wird die M-Quellcodedarstellung eines Datumswerts abgerufen.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Hiermit wird die M-Quellcodedarstellung eines Textwerts abgerufen.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Gibt das Ergebnis der Auswertung eines M-Ausdrucks zurück.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Auswertung eines M-Ausdrucks \"<code>document</code>\" mit den verfügbaren Bezeichnern zurück, auf die durch <code>environment</code> verwiesen werden kann.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Hiermit wird eine einfache Summe ausgewertet.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Hiermit wird eine komplexere Summe ausgewertet.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Hiermit wird die Verkettung eines Textwerts mit einem Bezeichner ausgewertet.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Gibt die M-Quellcodedarstellung eines Bezeichners zurück.",
        "Documentation.LongDescription": "Gibt die M-Quellcodedarstellung eines Bezeichners \"<code>name</code>\" zurück.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Hiermit wird die M-Quellcodedarstellung eines Bezeichners abgerufen.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Hiermit wird die M-Quellcodedarstellung eines Bezeichners abgerufen, der ein Leerzeichen enthält.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Gibt den Inhalt der angegebenen Datei im Binärformat zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt der Datei <code>path</code> als Binärdatei zurück. Der <code>options</code>-Parameter ist derzeit nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Gibt an, ob eine bestimmte Funktion als Datenquelle betrachtet wird oder nicht.",
        "Documentation.LongDescription": "Gibt an, ob \"<code>function</code>\" als Datenquelle betrachtet wird oder nicht.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Hiermit wird Text, der einen geografischen Wert im WKT-Format (Well-Known Text) repräsentiert, in einen strukturierten Datensatz übersetzt.",
        "Documentation.LongDescription": "Hiermit wird Text, der einen geografischen Wert im WKT-Format (Well-Known Text) darstellt, in einen strukturierten Datensatz übersetzt. WKT ist ein vom Open Geospatial Consortium (OGC) definiertes Standardformat. Es ist das typische Serialisierungsformat, das von Datenbanken einschließlich SQL Server verwendet wird.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Hiermit wird ein strukturierter geografischer Punkt in die zugehörige WKT-Darstellung (Well-Known Text) übersetzt.",
        "Documentation.LongDescription": "Hiermit wird ein strukturierter geografischer Punkt in die zugehörige WKT-Darstellung (Well-Known Text) übersetzt. WKT ist ein vom Open Geospatial Consortium (OGC) definiertes Standardformat. Es ist das Serialisierungsformat, das von vielen Datenbanken einschließlich SQL Server verwendet wird.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Hiermit wird Text, der einen geometrischen Wert im WKT-Format (Well-Known Text) darstellt, in einen strukturierten Datensatz übersetzt.",
        "Documentation.LongDescription": "Hiermit wird Text, der einen geometrischen Wert im WKT-Format (Well-Known Text) darstellt, in einen strukturierten Datensatz übersetzt. WKT ist ein vom Open Geospatial Consortium (OGC) definiertes Standardformat. Es ist das typische Serialisierungsformat, das von Datenbanken einschließlich SQL Server verwendet wird.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Hiermit wird ein strukturierter geometrischer Punkt in die zugehörige WKT-Darstellung (Well-Known Text) übersetzt.",
        "Documentation.LongDescription": "Hiermit wird ein strukturierter geometrischer Punkt in die zugehörige WKT-Darstellung (Well-Known Text) übersetzt. WKT ist ein vom Open Geospatial Consortium (OGC) definiertes Standardformat. Es ist das Serialisierungsformat, das von vielen Datenbanken einschließlich SQL Server verwendet wird.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Gibt einen GUID-Wert aus dem angegebenen Wert zurück.",
        "Documentation.LongDescription": "Gibt einen <code>Guid.Type</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Ist der angegebene <code>value</code>-Wert <code>NULL</code>, gibt <code>Guid.From</code> den Wert <code>NULL</code> zurück. Eine Prüfung wird durchgeführt, um zu ermitteln, ob der angegebene <code>value</code>-Wert in einem akzeptablen Format vorliegt. Zulässige Formate werden in den Beispielen aufgeführt.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Die GUID kann als 32 aufeinander folgende Hexadezimalziffern angegeben werden.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Die GUID kann als 32 Hexadezimalziffern angegeben werden, die durch Bindestriche in Blöcke von 8-4-4-4-12 unterteilt sind.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Die GUID kann als 32 Hexadezimalziffern angegeben werden, die durch Bindestriche getrennt und in geschweifte Klammern eingeschlossen sind.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Die GUID kann als 32 Hexadezimalziffern angegeben werden, die durch Bindestriche getrennt und in Klammern eingeschlossen sind.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Erstellt einen ganzzahligen 16-Bit-Wert aus dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt einen ganzzahligen 16-Bit-<code>number</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>null</code> ist, gibt <code>Int16.From</code> <code>null</code> zurück. Wenn der angegebene <code>value</code>-Wert ein <code>number</code>-Wert aus dem 16-Bit-Ganzzahlbereich ohne Bruchteil ist, wird <code>value</code> zurückgegeben. Wenn ein Bruchteil vorhanden ist, wird der Wert mit dem angegebenen Rundungsmodus gerundet. Der Standardrundungsmodus ist <code>RoundingMode.ToEven</code>. Wenn der <code>value</code>-Wert einen anderen Typ aufweist, wird er erst mit <code>Number.FromText</code> in einen <code>number</code>-Wert konvertiert. Die verfügbaren Rundungsmodi finden Sie unter <code>Number.Round</code>. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ruft den ganzzahligen 16-Bit-<code>number</code>-Wert <code>\"4\"</code> ab.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ruft den ganzzahligen 16-Bit-<code>number</code>-Wert <code>\"4,5\"</code> mithilfe von <code>RoundingMode.AwayFromZero</code> ab.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Erstellt einen ganzzahligen 32-Bit-Wert aus dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt einen ganzzahligen 32-Bit-<code>number</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>null</code> ist, gibt <code>Int32.From</code> <code>null</code> zurück. Wenn der angegebene <code>value</code>-Wert ein <code>number</code>-Wert aus dem 32-Bit-Ganzzahlbereich ohne Bruchteil ist, wird <code>value</code> zurückgegeben. Wenn ein Bruchteil vorhanden ist, wird der Wert mit dem angegebenen Rundungsmodus gerundet. Der Standardrundungsmodus ist <code>RoundingMode.ToEven</code>. Wenn der <code>value</code>-Wert einen anderen Typ aufweist, wird er erst mit <code>Number.FromText</code> in einen <code>number</code>-Wert konvertiert. Die verfügbaren Rundungsmodi finden Sie unter <code>Number.Round</code>. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ruft den ganzzahligen 32-Bit-<code>number</code>-Wert <code>\"4\"</code> ab.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ruft den ganzzahligen 32-Bit-<code>number</code>-Wert <code>\"4,5\"</code> mithilfe von <code>RoundingMode.AwayFromZero</code> ab.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Erstellt eine 64-Bit-Ganzzahl aus dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt einen ganzzahligen 64-Bit-<code>number</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>null</code> ist, gibt <code>Int64.From</code> <code>null</code> zurück. Wenn der angegebene <code>value</code>-Wert eine <code>number</code> aus dem 64-Bit-Ganzzahlbereich ohne Bruchteil ist, wird <code>value</code> zurückgegeben. Wenn ein Bruchteil vorhanden ist, wird der Wert mit dem angegebenen Rundungsmodus gerundet. Der Standardrundungsmodus ist <code>RoundingMode.ToEven</code>. Wenn der <code>value</code>-Wert einen anderen Typ aufweist, wird er erst mit <code>Number.FromText</code> in einen <code>number</code>-Wert konvertiert. Die verfügbaren Rundungsmodi finden Sie unter <code>Number.Round</code>. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ruft den ganzzahligen 64-Bit-<code>number</code> Wert von <code>\"4\"</code> ab.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Rufen Sie den ganzzahligen 64-Bit-Wert <code>number</code>, <code>\"4,5\"</code>, mithilfe von <code>RoundingMode.AwayFromZero</code> ab.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Erstellt einen signierten ganzzahligen 8-Bit-Wert aus dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt einen signierten ganzzahligen 8-Bit-<code>number</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>null</code> ist, gibt <code>Int8.From</code> <code>null</code> zurück. Wenn der angegebene <code>value</code>-Wert ein <code>number</code>-Wert aus dem signierten 8-Bit-Ganzzahlbereich ohne Bruchteil ist, wird <code>value</code> zurückgegeben. Wenn ein Bruchteil vorhanden ist, wird der Wert mit dem angegebenen Rundungsmodus gerundet. Der Standardrundungsmodus ist <code>RoundingMode.ToEven</code>. Wenn der <code>value</code>-Wert einen anderen Typ aufweist, wird er erst mit <code>Number.FromText</code> in einen <code>number</code>-Wert konvertiert. Die verfügbaren Rundungsmodi finden Sie unter <code>Number.Round</code>. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ruft den signierten ganzzahligen 8-Bit-<code>number</code>-Wert <code>\"4\"</code> ab.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ruft den signierten ganzzahligen 8-Bit-<code>number</code>-Wert <code>\"4,5\"</code> mithilfe von <code>RoundingMode.AwayFromZero</code> ab.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Gibt die abstrakte Syntaxstruktur (Abstract Syntax Tree, AST) für den Text einer Funktion zurück.",
        "Documentation.LongDescription": "<p>Gibt die abstrakte Syntaxstruktur (Abstract Syntax Tree, AST) für den Text von <code>function</code> zurück, normalisiert in einen <i>Elementausdruck</i>:\r\n<ul>\r\n  <li>Die Funktion muss ein Lambdaausdruck mit einem Argument sein.</li>\r\n  <li>Alle Verweise auf den Funktionsparameter werden durch <code>ItemExpression.Item</code> ersetzt.</li>\r\n  <li>Die AST-Angabe wird vereinfacht, damit sie nur Knoten der folgenden Typen enthält:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Ein Fehler wird ausgelöst, wenn keine Zeilenausdruck-AST-Angabe für den Textkörper von <code>function</code> zurückgegeben werden kann.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Gibt die AST-Angabe für den Textkörper der Funktion <code>each _ <> null</code> zurück.",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Gibt den Inhalt des JSON-Dokuments zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt des JSON-Dokuments zurück.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Generiert eine JSON-Darstellung für einen vorgegebenen Wert.",
        "Documentation.LongDescription": "<p>Generiert eine JSON-Darstellung eines angegebenen Werts \"<code>value</code>\" mit der durch \"<code>encoding</code>\" angegebenen Textcodierung. Wenn \"<code>encoding</code>\" nicht angegeben wird, wird UTF8 verwendet. Werte werden wie folgt dargestellt:</p>\r\n <ul>\r\n        <li>NULL-, Text- und logische Werte werden als die entsprechenden JSON-Typen dargestellt.</li>\r\n        <li>Zahlen werden als Zahlen in JSON dargestellt. Nur <code>#infinity</code>, <code>-#infinity</code> und <code>#nan</code> werden in NULL konvertiert.</li>\r\n        <li>Listen werden als JSON-Arrays dargestellt.</li>\r\n        <li>Datensätze werden als JSON-Objekte dargestellt</li>\r\n        <li>Tabellen werden als ein Array von Objekten dargestellt.</li>\r\n        <li>Datums- und Uhrzeitangaben, datetime-, datetimezones-Werte und Dauerangaben werden als ISO-8601-Text dargestellt.</li>\r\n        <li>Binärwerte werden als base-64-codierter Text dargestellt.</li>\r\n        <li>Typen und Funktionen generieren einen Fehler.</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert einen komplexen Wert in einen JSON-Wert.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Konvertiert einen Binärwert in eine Liste mit Textwerten, die an Zeilenumbrüchen geteilt werden. Bei Angabe eines Anführungszeichenstils stehen die Zeilenumbrüche unter Umständen in Anführungszeichen. Wenn \"includeLineSeparators\" den Wert \"true\" aufweist, sind die Zeilenumbruchzeichen Teil des Texts.",
        "Documentation.LongDescription": "Konvertiert einen Binärwert in eine Liste mit Textwerten, die an Zeilenumbrüchen geteilt werden. Bei Angabe eines Anführungszeichenstils stehen die Zeilenumbrüche unter Umständen in Anführungszeichen. Wenn \"includeLineSeparators\" den Wert \"true\" aufweist, sind die Zeilenumbruchzeichen Teil des Texts.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Konvertiert einen Textwert in eine Liste mit Textwerten, die an Zeilenumbrüchen geteilt werden. Wenn \"includeLineSeparators\" den Wert \"true\" besitzt, sind die Zeilenumbruchzeichen Teil des Texts.",
        "Documentation.LongDescription": "Konvertiert einen Textwert in eine Liste mit Textwerten, die an Zeilenumbrüchen geteilt werden. Wenn \"includeLineSeparators\" den Wert \"true\" besitzt, sind die Zeilenumbruchzeichen Teil des Texts.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (Standardwert) Es sind keine Anführungszeichen erforderlich.</li>\r\n            <li><code>QuoteStyle.Csv:</code> Die Anführungszeichen entsprechen der CSV-Datei. Ein doppeltes Anführungszeichen wird verwendet, um solche Bereiche abzugrenzen, und ein Paar aus doppelten Anführungszeichen wird zum Angeben eines einzelnen doppelten Anführungszeichens in einem solchen Bereich verwendet. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Konvertiert eine Liste mit Text unter Verwendung der angegebenen Codierung und des angegebenen Zeilentrennzeichens in einen Binärwert. Das angegebene Zeilentrennzeichen wird an jede Zeile angefügt.  Ohne Angabe werden das Wagenrücklauf- und das Zeilenvorschubzeichen verwendet.",
        "Documentation.LongDescription": "Konvertiert eine Liste mit Text unter Verwendung der angegebenen Codierung und des angegebenen Zeilentrennzeichens in einen Binärwert. Das angegebene Zeilentrennzeichen wird an jede Zeile angefügt.  Ohne Angabe werden das Wagenrücklauf- und das Zeilenvorschubzeichen verwendet.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Konvertiert eine Liste mit Text in einen einzelnen Text.  Das angegebene Zeilentrennzeichen wird an jede Zeile angefügt.  Ohne Angabe werden das Wagenrücklauf- und das Zeilenvorschubzeichen verwendet.",
        "Documentation.LongDescription": "Konvertiert eine Liste mit Text in einen einzelnen Text.  Das angegebene Zeilentrennzeichen wird an jede Zeile angefügt.  Ohne Angabe werden das Wagenrücklauf- und das Zeilenvorschubzeichen verwendet.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Gibt \"true\" zurück, wenn alle Ausdrücke zutreffen.",
        "Documentation.LongDescription": "Gibt \"true\" zurück, wenn alle Ausdrücke in der Liste \"<code>list</code>\" zutreffen.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob alle Ausdrücke in der Liste \"{true, true, 2 > 0}\" zutreffen.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob alle Ausdrücke in der Liste \"{true, true, 2 < 0}\" zutreffen.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Gibt \"true\" zurück, wenn ein beliebiger Ausdruck zutrifft.",
        "Documentation.LongDescription": "Gibt \"true\" zurück, wenn ein beliebiger Ausdruck in der Liste \"<code>list</code>\" zutrifft.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob einer der Ausdrücke in der Liste \"{true, false, 2 > 0}\" zutrifft.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob einer der Ausdrücke in der Liste \"{2 = 0, false, 2 < 0}\" zutrifft.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Gibt den Mittelwert der Werte zurück. Kann mit number-, date-, datetime-, datetimezone- und duration-Werten verwendet werden.",
        "Documentation.LongDescription": "Gibt den Durchschnittswert für die Elemente in der Liste \"<code>list</code>\" zurück. Das Ergebnis wird im gleichen Datentyp angegeben wie die Werte in der Liste. Kann nur mit number-, date-, time-, datetime-, datetimezone- und duration-Werten verwendet werden.\r\n    Ist die Liste leer, wird NULL zurückgegeben.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Mittelwert der Zahlenliste <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Ermittelt den Mittelwert der folgenden Datumswerte: 1. Januar 2011, 2. Januar 2011 und 3. Januar 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Puffert eine Liste.",
        "Documentation.LongDescription": "Puffert die Liste \"<code>list</code>\" im Arbeitsspeicher. Das Ergebnis dieses Aufrufs ist eine stabile Liste.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine stabile Kopie der Liste \"{1..10}\".",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Fasst mehrere Listen zusammen, um eine einzelne Liste zurückzugeben.",
        "Documentation.LongDescription": "Führt eine Liste mit Listen (<code>lists</code>) zu einer einzelnen neuen Liste zusammen.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kombiniert die beiden einfachen Listen \"{1, 2}\" und \"{3, 4}\".",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Kombiniert die beiden Listen \"{1, 2}\" und \"{3, {4, 5}}\", wobei eine der Listen eine geschachtelte Liste enthält.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Gibt die Anzahl von Elementen in der Liste zurück.",
        "Documentation.LongDescription": "Gibt die Anzahl von Elementen in der Liste \"<code>list</code>\" zurück.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Anzahl von Werten in der Liste \"{1, 2, 3}\".",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Gibt eine Liste mit Werten ohne Duplikate zurück.",
        "Documentation.LongDescription": "Gibt eine Liste mit allen Werten aus der Liste \"<code>list</code>\" (aber ohne Duplikate) zurück. Ist die Liste leer, entsteht eine leere Liste.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die Duplikate aus der Liste \"{1, 1, 2, 3, 3, 3}\".",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Gibt den ersten Wert der Liste zurück. Ist die Liste leer, wird der angegebene Standardwert zurückgegeben.",
        "Documentation.LongDescription": "Gibt das erste Element in der Liste \"<code>list</code>\" zurück. Ist die Liste leer, wird der optionale Standardwert \"<code>defaultValue</code>\" zurückgegeben.\r\n    Ist die Liste leer und kein Standardwert angegeben, gibt die Funktion <code>null</code> zurück.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den ersten Wert in der Liste \"{1, 2, 3}\".",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Ermittelt den ersten Wert in der Liste \"{}\". Ist die Liste leer, wird \"-1\" zurückgegeben.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Gibt die Schnittmenge der Listenwerte aus der Eingabe zurück.",
        "Documentation.LongDescription": "Gibt die Schnittmenge der Listenwerte aus der Eingabeliste <code>lists</code> zurück. Ein optionaler Parameter (<code>equationCriteria</code>) kann angegeben werden.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Schnittmenge der Listen \"{1..5}\", \"{2..6}\" und \"{3..7}\".",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Gibt an, ob die Liste Duplikate enthält.",
        "Documentation.LongDescription": "Gibt einen logischen Wert zurück, der angibt, ob die Liste \"<code>list</code>\" Duplikate enthält: <code>true</code>, falls die Liste eindeutige Werte enthält, <code>false</code>, falls Duplikatwerte vorhanden sind. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Liste \"{1, 2, 3}\" eindeutige Werte (also keine Duplikate) enthält.",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Liste \"{1, 2, 3, 3}\" eindeutige Werte (also keine Duplikate) enthält.",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Gibt \"true\" zurück, falls die Liste leer ist.",
        "Documentation.LongDescription": "Gibt <code>true</code> zurück, falls die Liste \"<code>list</code>\" keine Werte enthält (also die Länge 0 besitzt). Enthält die Liste Werte (Länge > 0), wird <code>false</code> zurückgegeben.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Liste \"{}\" leer ist.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Liste \"{1, 2}\" leer ist.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Gibt den letzten Wert der Liste zurück. Ist die Liste leer, wird der angegebene Standardwert zurückgegeben.",
        "Documentation.LongDescription": "Gibt das letzte Element in der Liste \"<code>list</code>\" zurück. Ist die Liste leer, wird der optionale Standardwert \"<code>defaultValue</code>\" zurückgegeben.\r\n    Ist die Liste leer und kein Standardwert angegeben, gibt die Funktion <code>null</code> zurück.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den letzten Wert in der Liste \"{1, 2, 3}\".",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Ermittelt den letzten Wert in der Liste \"{}\". Ist die Liste leer, wird \"-1\" zurückgegeben.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Gibt den letzten Wert in der Liste zurück.  Optional kann die zurückzugebende Anzahl oder eine qualifizierende Bedingung angegeben werden.",
        "Documentation.LongDescription": "Gibt das letzte Element der Liste \"<code>list</code>\" zurück. Ist die Liste leer, wird eine Ausnahme ausgelöst.\r\n Diese Funktion akzeptiert einen optionalen Parameter (<code>countOrCondition</code>), um das Sammeln mehrerer Elemente oder das Filtern von Elementen zu unterstützen. \"<code>countOrCondition</code>\" kann auf drei Arten angegeben werden:\r\n <ul>\r\n  <li>Bei Angabe einer Zahl wird die entsprechende Anzahl von Elementen zurückgegeben. </li>\r\n  <li>Bei Angabe einer Bedingung werden alle Elemente zurückgegeben, die die Bedingung erfüllen. Die Überprüfung beginnt am Ende der Liste. Erfüllt ein Element die Bedingung nicht, werden ab diesem Punkt keine weiteren Elemente berücksichtigt. </li>\r\n  <li>Ist dieser Parameter NULL, wird das letzte Element in der Liste zurückgegeben.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den letzten Wert in der Liste \"{3, 4, 5, -1, 7, 8, 2}\".",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Ermittelt die letzten Werte in der Liste \"{3, 4, 5, -1, 7, 8, 2}\", die größer null sind.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Gibt den größten Wert zurück. Ist die Liste leer, wird der Standardwert zurückgegeben.",
        "Documentation.LongDescription": "Gibt das größte Element in der Liste \"<code>list</code>\" zurück. Ist die Liste leer, wird der optionale Standardwert \"<code>default</code>\" zurückgegeben.\r\n    Ein optionaler comparisonCriteria-Wert (<code>comparisonCriteria</code>) kann angegeben werden, um zu bestimmen, wie die Elemente in der Liste verglichen werden sollen. Ist dieser Parameter NULL, wird die standardmäßige Vergleichsfunktion verwendet.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den größten Wert in der Liste \"{1, 4, 7, 3, -2, 5}\".",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Ermittelt den größten Wert in der Liste \"{}\". Ist die Liste leer, wird \"-1\" zurückgegeben. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Gibt den Median in der Liste zurück.",
        "Documentation.LongDescription": "Gibt das Medianelement der Liste \"<code>list</code>\" zurück. Diese Funktion gibt <code>NULL</code>zurück, wenn die Liste keine Nicht-<code>NULL</code>-Werte enthält.\r\n    Wenn eine gerade Anzahl von Elementen vorhanden ist, wählt die Funktion das kleinere der beiden Medianelemente aus, es sei denn, die Liste ist\r\n besteht vollständig aus Datumswerten, Werten für die Dauer, Zahlen oder Uhrzeiten. In diesem Fall gibt die Funktion den Durchschnittswert der beiden Elemente zurück.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Median in der Liste <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Gibt den kleinsten Wert zurück. Ist die Liste leer, wird der Standardwert zurückgegeben.",
        "Documentation.LongDescription": "Gibt das kleinste Element in der Liste \"<code>list</code>\" zurück. Ist die Liste leer, wird der optionale Standardwert \"<code>default</code>\" zurückgegeben.\r\n    Ein optionaler comparisonCriteria-Wert (<code>comparisonCriteria</code>) kann angegeben werden, um zu bestimmen, wie die Elemente in der Liste verglichen werden sollen. Ist dieser Parameter NULL, wird die standardmäßige Vergleichsfunktion verwendet.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den kleinsten Wert in der Liste \"{1, 4, 7, 3, -2, 5}\".",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Ermittelt den kleinsten Wert in der Liste \"{}\". Ist die Liste leer, wird \"-1\" zurückgegeben. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Gibt den am häufigsten vorkommenden Wert in der Liste zurück.",
        "Documentation.LongDescription": "Gibt das Element zurück, das in der Liste \"<code>list</code>\" am häufigsten vorkommt. Ist die Liste leer, wird eine Ausnahme ausgelöst. Sind mehrere Elemente mit der gleichen maximalen Häufigkeit vorhanden, wird das letzte Element ausgewählt.\r\n    Die Gleichheitsüberprüfung kann mit einem optionalen <code>comparisonCriteria</code>-Wert (<code>equationCriteria</code>) gesteuert werden. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt das Element, das in der Liste <code>{\"A\", 1, 2, 3, 3, 4, 5}</code> am häufigsten vorkommt.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Ermittelt das Element, das in der Liste <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> am häufigsten vorkommt.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Gibt eine Liste mit den Werten zurück, die in der Liste am häufigsten vorkommen.",
        "Documentation.LongDescription": "Gibt das Element zurück, das in der Liste \"<code>list</code>\" am häufigsten vorkommt. Ist die Liste leer, wird eine Ausnahme ausgelöst. Sind mehrere Elemente mit der gleichen maximalen Häufigkeit vorhanden, wird das letzte Element ausgewählt.\r\n    Die Gleichheitsüberprüfung kann mit einem optionalen <code>comparisonCriteria</code>-Wert (<code>equationCriteria</code>) gesteuert werden. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Elemente, die in der Liste <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> am häufigsten vorkommen.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Gibt die Anzahl von Elementen ungleich NULL in der Liste zurück.",
        "Documentation.LongDescription": "Gibt die Anzahl von Elementen ungleich NULL in der Liste \"<code>list</code>\" zurück.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Gibt eine Liste mit Offsets für die Eingabe zurück.",
        "Documentation.LongDescription": "Gibt eine Liste mit Offsets für die Eingabeliste \"<code>list</code>\" zurück.\r\n    Wird eine Liste mithilfe von \"List.Transform\" geändert, kann der Transformation über die Positionenliste der Zugriff auf die Position ermöglicht werden.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Offsets der Werte in der Liste \"{1, 2, 3, 4, null, 5}\".",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Gibt das Produkt der Zahlen in der Liste zurück.",
        "Documentation.LongDescription": "Gibt das Produkt der Zahlen ungleich null in der Liste \"<code>numbersList</code>\" zurück. Enthält die Liste keine Werte ungleich null, wird NULL zurückgegeben.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt das Produkt der Zahlen in der Liste <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Gibt eine Liste mit Zufallszahlen zurück.",
        "Documentation.LongDescription": "Gibt auf der Grundlage der Anzahl der zu generierenden Werte und eines optionalen Seedwerts eine Liste mit Zufallszahlen zwischen 0 und 1 zurück.\r\n<ul>\r\n   <li><code>count</code>: Die Anzahl der zu generierenden Zufallswerte.</li>\r\n   <li><code>seed</code>:  <i>[Optional]</i> Ein numerischer Wert, der als Seed für den Zufallszahlen-Generator fungiert. Ohne diese Angabe wird bei jedem Aufruf dieser Funktion eine eindeutige Liste mit Zufallszahlen generiert. Bei Angabe eines numerischen Seedwerts wird bei jedem Aufruf der Funktion die gleiche Liste mit Zufallszahlen generiert.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit drei Zufallszahlen.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Erstellt eine Liste mit drei Zufallszahlen unter Verwendung eines Seedwerts.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Gibt eine Liste zurück, in der die angegebene Anzahl von Elementen am Listenanfang übersprungen wird.",
        "Documentation.LongDescription": "Gibt eine Liste zurück, in der das erste Element der Liste <code>list</code> entfernt wird. Wenn <code>list</code> eine leere Liste ist, wird eine leere Liste zurückgegeben.\r\nDiese Funktion verwendet den optionalen Parameter <code>countOrCondition</code>, um das Entfernen mehrerer Werte zu unterstützen, wie unten aufgeführt.\r\n <ul>\r\n <li>Wenn eine Anzahl angegeben wird, werden Elemente bis zu der Anzahl entfernt. </li>\r\n <li>Wenn eine Bedingung angegeben wird, werden alle aufeinander folgenden übereinstimmenden Elemente am Anfang von <code>list</code> entfernt.</li>\r\n <li>Wenn dieser Parameter NULL ist, wird das Standardverhalten beobachtet. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste auf der Grundlage von '{1, 2, 3, 4, 5}' ohne die ersten drei Zahlen.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Erstellt eine Liste auf der Grundlage von \"{5, 4, 2, 6, 1}\", die mit einer Zahl kleiner 3 beginnt.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Gibt eine Liste zurück, in der die angegebene Anzahl von Elementen vom Listenende entfernt wird.",
        "Documentation.LongDescription": "Gibt eine Liste zurück, in der die letzten <code>countOrCondition</code> Elemente am Ende der Liste <code>list</code> entfernt werden. Wenn <code>list</code> weniger als <code>countOrCondition</code> Elemente enthält, wird eine leere Liste zurückgegeben.\r\n <ul>\r\n <li>Wenn eine Anzahl angegeben wird, werden Elemente bis zu der Anzahl entfernt. </li>\r\n <li>Wenn eine Bedingung angegeben wird, werden alle aufeinander folgenden übereinstimmenden Elemente am Ende von <code>list</code> entfernt.</li>\r\n <li>Wenn dieser Parameter NULL ist, wird nur ein Element entfernt. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste auf der Grundlage von '{1, 2, 3, 4, 5}' ohne die letzten drei Zahlen.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Erstellt eine Liste auf der Grundlage von '{5, 4, 2, 6, 4}', die mit einer Zahl kleiner als 3 endet.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Entfernt alle NULL-Werte aus der angegebenen Liste.",
        "Documentation.LongDescription": "Entfernt alle Vorkommen von NULL-Werten aus \"<code>list</code>\". Enthält die Liste keine NULL-Werte, wird die ursprüngliche Liste zurückgegeben.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die NULL-Werte aus der Liste \"{1, 2, 3, null, 4, 5, null, 6}\".",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Kehrt die Reihenfolge der Werte in der Liste um.",
        "Documentation.LongDescription": "Gibt eine Liste mit den Werten aus der Liste \"<code>list</code>\" in umgekehrter Reihenfolge zurück.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Erstellt auf der Grundlage von \"{1..10}\" eine Liste in umgekehrter Reihenfolge.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Gibt das Listenelement für eine Liste mit der Länge 1 zurück. Andernfalls wird eine Ausnahme ausgelöst.",
        "Documentation.LongDescription": "Enthält die Liste \"<code>list</code>\" nur ein Element, wird dieses zurückgegeben.\r\n    Enthält die Liste mehrere oder gar keine Elemente, löst die Funktion eine Ausnahme aus.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den einzelnen Wert in der Liste \"{1}\".",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Ermittelt den einzelnen Wert in der Liste \"{1, 2, 3}\".",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Gibt das Listenelement für eine Liste mit der Länge 1 zurück. Ist die Liste leer, wird der Standardwert zurückgegeben.",
        "Documentation.LongDescription": "Enthält die Liste \"<code>list</code>\" nur ein Element, wird dieses zurückgegeben.\r\n    Ist die Liste leer, gibt die Funktion NULL zurück, sofern kein optionaler Wert (<code>default</code>) angegeben wurde. Enthält die Liste mehrere Elemente, gibt die Funktion einen Fehler zurück.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den einzelnen Wert in der Liste \"{1}\".",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Ermittelt den einzelnen Wert in der Liste \"{}\".",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Ermittelt den einzelnen Wert in der Liste \"{}\". Ist die Liste leer, wird \"1\" zurückgegeben.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Gibt eine Liste zurück, in der die angegebene Anzahl von Elementen am Listenanfang übersprungen wird.",
        "Documentation.LongDescription": "Gibt eine Liste zurück, in der das erste Element der Liste <code>list</code> übersprungen wird. Wenn <code>list</code> eine leere Liste ist, wird eine leere Liste zurückgegeben.\r\nDiese Funktion verwendet den optionalen Parameter <code>countOrCondition</code>, um das Überspringen mehrerer Werte zu unterstützen, wie unten aufgeführt.\r\n <ul>\r\n <li>Wenn eine Anzahl angegeben wird, werden Elemente bis zu der Anzahl übersprungen. </li>\r\n <li>Wenn eine Bedingung angegeben wird, werden alle aufeinander folgenden übereinstimmenden Elemente am Anfang von <code>list</code> übersprungen.</li>\r\n <li>Wenn dieser Parameter NULL ist, wird das Standardverhalten beobachtet. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste auf der Grundlage von '{1, 2, 3, 4, 5}' ohne die ersten drei Zahlen.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Erstellt eine Liste auf der Grundlage von \"{5, 4, 2, 6, 1}\", die mit einer Zahl kleiner 3 beginnt.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Sortiert eine Liste mit Daten gemäß den angegebenen Kriterien.",
        "Documentation.LongDescription": "Sortiert eine Liste mit Daten (<code>list</code>) gemäß den angegebenen optionalen Kriterien.\r\n    Als Vergleichskriterium kann ein optionaler Parameter (<code>comparisonCriteria</code>) angegeben werden. Dieser akzeptiert folgende Werte:\r\n    <ul>\r\n    <li> Zum Steuern der Reihenfolge kann als Vergleichskriterium ein Order-Enumerationswert angegeben werden. (<code>Order.Descending</code>, <code>Order.Ascending</code>) </li>\r\n    <li> Zum Berechnen eines Schlüssels für die Sortierung kann eine Funktion mit einem einzelnen Argument verwendet werden. </li>\r\n    <li> Um sowohl einen Schlüssel auszuwählen als auch die Reihenfolge zu steuern, kann das Vergleichskriterium als Liste mit Schlüssel und Reihenfolge (<code>{each 1 / _, Order.Descending}</code>) angegeben werden. </li>\r\n    <li> Zur vollständigen Steuerung des Vergleichs kann eine Funktion mit zwei Argumenten verwendet werden. Dieser Funktion werden zwei Elemente aus der Liste übergeben (zwei beliebige Elemente in beliebiger Reihenfolge). Die Funktion sollte einen der folgenden Werte zurückgeben:\r\n        <ul>\r\n            <li> <code>-1</code>: Das erste Element ist kleiner als das zweite Element.</li>\r\n            <li> <code>0</code>: Die Elemente sind gleichwertig.</li>\r\n            <li> <code>1</code>: Das erste Element ist größer als das zweite Element.</li>\r\n        </ul>\r\n        \"Value.Compare\" ist eine Methode, mit der diese Logik delegiert werden kann. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Sortiert die Liste \"{2, 3, 1}\".",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Sortiert die Liste \"{2, 3, 1}\" in absteigender Reihenfolge.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Sortiert die Liste \"{2, 3, 1}\" in absteigender Reihenfolge unter Verwendung der Value.Compare-Methode.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Gibt eine stichprobenbasierte Schätzung der Standardabweichung zurück.",
        "Documentation.LongDescription": "Gibt eine stichprobenbasierte Schätzung der Standardabweichung der Werte in der Liste \"<code>numbersList</code>\" zurück.\r\n    Ist \"<code>numbersList</code>\" eine Liste mit Zahlen, wird eine Zahl zurückgegeben.\r\n    Im Fall einer leeren Liste oder einer Liste mit Elementen, bei denen es sich nicht um Werte vom Typ <code>number</code> handelt, wird eine Ausnahme ausgelöst.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Standardabweichung der Zahlen 1 bis 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Gibt die Summe der Elemente in der Liste zurück.",
        "Documentation.LongDescription": "Gibt die Summe der Werte ungleich null in der Liste \"<code>list</code>\" zurück.  Enthält die Liste keine Werte ungleich null, wird NULL zurückgegeben.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Summe der Zahlen in der Liste <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Gibt die Vereinigungsmenge der Listenwerte aus der Eingabe zurück.",
        "Documentation.LongDescription": "Akzeptiert eine Liste mit Listen (<code>lists</code>), vereinigt die Elemente der einzelnen Listen und gibt sie in der Ausgabeliste zurück. Das Ergebnis ist eine Liste mit allen Elementen aus sämtlichen Eingabelisten.\r\n    Da bei diesem Vorgang die herkömmliche Behältersemantik erhalten bleibt, werden Duplikatwerte im Rahmen der Vereinigung abgeglichen.\r\n    Zum Steuern der Gleichheitsüberprüfung kann ein optionales Gleichungskriterium (<code>equationCriteria</code>) angegeben werden. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Vereinigungsmenge der Listen \"{1..5}\", \"{2..6}\" und \"{3..7}\".",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Gibt eine Liste von Listen zurück, indem Elemente an der gleichen Position in mehreren Listen kombiniert werden.",
        "Documentation.LongDescription": "Akzeptiert eine Liste von Listen, <code>lists</code>, und gibt eine Liste von Listen zurück, indem Elemente an derselben Position kombiniert werden.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zippt die beiden einfachen Listen \"{1, 2}\" und \"{3, 4}\".",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Zippt die beiden einfachen Listen unterschiedlicher Länge \"{1, 2}\" und \"{3}\".",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Erstellt einen logischen Wert auf der Grundlage des angegebenen Werts.",
        "Documentation.LongDescription": "Gibt einen <code>logical</code>-Wert auf der Grundlage des angegebenen Elements vom Typ „<code>value</code>“ zurück. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>NULL</code>, wird von <code>Logical.From</code> der Wert <code>NULL</code> zurückgegeben. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>logical</code>, wird „<code>value</code>“ zurückgegeben. Werte folgender Art können in einen <code>logical</code>-Wert konvertiert werden:\r\n      <ul>\r\n        <li><code>text</code>: Ein <code>logical</code>-Wert auf der Grundlage des Textwerts (entweder <code>TRUE</code> oder <code>FALSE</code>). Ausführlichere Informationen finden Sie unter <code>Logical.FromText</code>.</li>        \r\n        <li><code>number</code>: <code>false</code>, falls „<code>value</code>“ den Wert <code>0</code> besitzt, andernfalls <code>true</code>.</li>\r\n      </ul>\r\nHandelt es sich bei „<code>value</code>“ um einen anderen Typ, wird ein Fehler zurückgegeben.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>2</code> in einen <code>logical</code>-Wert.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Erstellt einen logischen Wert auf der Grundlage der Textwerte \"true\" und \"false\".",
        "Documentation.LongDescription": "Erstellt einen logischen Wert auf der Grundlage des Textwerts \"<code>text</code>\" (entweder \"true\" oder \"false\"). Enthält \"<code>text</code>\" eine andere Zeichenfolge, wird eine Ausnahme ausgelöst. Beim Textwert \"<code>text</code>\" wird nicht zwischen Groß-/Kleinschreibung unterschieden.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Erstellt einen logischen Wert auf der Grundlage der Textzeichenfolge \"true\".",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Erstellt einen logischen Wert auf der Grundlage der Textzeichenfolge \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Gibt auf der Grundlage eines logischen Werts den Text \"true\" oder \"false\" zurück.",
        "Documentation.LongDescription": "Erstellt einen Textwert auf der Grundlage des logischen Werts \"<code>logicalValue</code>\" (entweder <code>true</code> oder <code>false</code>). Ist \"<code>logicalValue</code>\" kein logischer Wert, wird eine Ausnahme ausgelöst.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Erstellt einen Textwert auf der Grundlage des logischen Werts <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Gibt den absoluten Wert der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den absoluten Wert von \"<code>number</code>\" zurück. Ist \"<code>number</code>\" NULL, gibt <code>Number.Abs</code> NULL zurück.\r\n    <ul>\r\n        <li><code>number</code>: Ein <code>number</code>-Wert, dessen absoluter Wert berechnet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Absoluter Wert von -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Gibt den Arkuskosinus der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den Arkuskosinus von <code>number</code> zurück.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Gibt den Arkussinus der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den Arkussinus von <code>number</code> zurück.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Gibt den Arkustangens der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den Arkustangens von <code>number</code> zurück.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Gibt ein Byte zurück, bei dem jedes Bit das Gegenteil der Eingabe ist.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Ausführung eines bitweisen NICHT-Vorgangs für \"<code>number</code>\" zurück.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Gibt den Kosinus der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den Kosinus von <code>number</code> zurück.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Kosinus des Winkels 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Gibt den hyperbolischen Kosinus der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den hyperbolischen Kosinus von <code>number</code> zurück.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Potenziert \"e\" mit dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Potenzierung von \"e\" mit <code>number</code> (Exponentialfunktion) zurück.\r\n      <ul>\r\n        <li><code>number</code>: Ein <code>number</code>-Wert, für den die Exponentialfunktion berechnet werden soll. Wenn <code>number</code> NULL ist, gibt <code>Number.Exp</code> NULL zurück. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Setzt \"e\" in die dritte Potenz.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Gibt die Fakultät der Zahl zurück.",
        "Documentation.LongDescription": "Gibt die Fakultät der Zahl <code>number</code> zurück.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Fakultät von 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Erstellt eine Zahl auf der Grundlage des angegebenen Werts.",
        "Documentation.LongDescription": "Gibt einen <code>number</code>-Wert auf der Grundlage des angegebenen Elements vom Typ „<code>value</code>“ zurück. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).\r\nBesitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>NULL</code>, wird von <code>Number.From</code> der Wert <code>NULL</code> zurückgegeben. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>number</code>, wird „<code>value</code>“ zurückgegeben. Werte folgender Art können in einen <code>number</code>-Wert konvertiert werden:\r\n      <ul>\r\n        <li><code>text</code>: Ein <code>number</code>-Wert auf der Grundlage einer Textdarstellung. Behandelt werden allgemeine Textformate („15“, „3.423,10“, „5.0E-10“). Ausführlichere Informationen finden Sie unter <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: 1 für <code>true</code>, 0 für <code>false</code>.</li>\r\n        <li><code>datetime</code>: Eine Gleitkommazahl mit doppelter Genauigkeit, die eine Entsprechung des OLE-Automatisierungsdatums enthält.</li>\r\n        <li><code>datetimezone</code>: Eine Gleitkommazahl mit doppelter Genauigkeit, die eine Entsprechung des OLE-Automatisierungsdatums für das lokale Datum und die lokale Uhrzeit von „<code>value</code>“ enthält.</li>\r\n        <li><code>date</code>: Eine Gleitkommazahl mit doppelter Genauigkeit, die eine Entsprechung des OLE-Automatisierungsdatums enthält.</li>\r\n        <li><code>time</code>: Ausgedrückt in anteiligen Tagen.</li>\r\n        <li><code>duration</code>: Ausgedrückt in ganzen und anteiligen Tagen.</li>  \r\n      </ul>\r\nHandelt es sich bei „<code>value</code>“ um einen anderen Typ, wird ein Fehler zurückgegeben.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ruft den <code>number</code>-Wert von <code>\"4\"</code> ab.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ruft den <code>number</code>-Wert von <code>#datetime(2020, 3, 20, 6, 0, 0)</code> ab.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Hiermit rufen Sie den <code>Zahlenwert</code> von <code>\"12,3 %\"</code> ab.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Erstellt Zahlen auf der Grundlage allgemeiner Textformate (\"15\", \"3.423,10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Gibt einen <code>number</code>-Wert auf der Grundlage des angegebenen Textwerts (<code>text</code>) zurück.\r\n <ul>\r\n  <li><code>text</code>: Die Textdarstellung eines Zahlenwerts. Die Darstellung muss ein allgemeines Zahlenformat wie \"15\", \"3.423,10\" oder \"5.0E-10\" aufweisen.</li>\r\n  <li><code>culture</code>: Eine optionale Kultur, die steuert, wie \"<code>text</code>\" interpretiert wird (Beispiel: \"de-DE\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Zahlenwert von <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ermittelt den Zahlenwert von <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Gibt an, ob es sich um einen geraden Wert handelt.",
        "Documentation.LongDescription": "Gibt an, ob es sich bei dem Wert \"<code>number</code>\" um einen geraden Wert handelt (<code>true</code>) oder nicht (<code>false</code>).",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Überprüft, ob 625 eine gerade Zahl ist.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Überprüft, ob 82 eine gerade Zahl ist.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Gibt an, ob es sich um einen nicht numerischen Wert (NaN-Wert) handelt.",
        "Documentation.LongDescription": "Gibt an, ob es sich um einen nicht numerischen Wert (NaN-Wert) handelt. Gibt <code>true</code> zurück, wenn \"<code>number</code>\" nicht numerisch (<code>Number.IsNaN</code>) ist. Andernfalls wird <code>false</code> zurückgegeben.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Überprüft, ob das Ergebnis der Division von 0 durch 0 nicht numerisch ist.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Überprüft, ob das Ergebnis der Division von 1 durch 0 nicht numerisch ist.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Gibt an, ob es sich um einen ungeraden Wert handelt.",
        "Documentation.LongDescription": "Gibt an, ob es sich um einen ungeraden Wert handelt. Gibt <code>true</code> zurück, wenn \"<code>number</code>\" eine ungerade Zahl ist. Andernfalls wird <code>false</code> zurückgegeben.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Überprüft, ob 625 eine ungerade Zahl ist.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Überprüft, ob 82 eine ungerade Zahl ist.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Gibt den natürlichen Logarithmus der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den natürlichen Logarithmus einer Zahl (<code>number</code>) zurück. Ist <code>number</code> NULL, gibt <code>Number.Ln</code> NULL zurück.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den natürlichen Logarithmus von 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Gibt den Logarithmus der Zahl zur angegebenen Basis (standardmäßig \"e\") zurück.",
        "Documentation.LongDescription": "Gibt den Logarithmus einer Zahl (<code>number</code>) zur angegebenen Basis (<code>base</code>) zurück. Ohne Angabe von \"<code>base</code>\" wird standardmäßig \"Number.E\" verwendet.\r\n    Ist <code>number</code> NULL, gibt <code>Number.Log</code> NULL zurück.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Logarithmus von 2 zur Basis 10.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Ermittelt den Logarithmus von 2 zur Basis \"e\".",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Gibt den Logarithmus der Zahl zur Basis 10 zurück.",
        "Documentation.LongDescription": "Gibt den Logarithmus einer Zahl (<code>number</code>) zur Basis 10 zurück. Ist <code>number</code> null, gibt <code>Number.Log10</code> null zurück.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Logarithmus von 2 zur Basis 10.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Gibt die gerundete Zahl zurück. Dezimalstellenanzahl und Rundungsmodus können angegeben werden.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Rundung von <code>number</code> auf die nächste Zahl zurück. Wenn <code>number</code> NULL ist, gibt <code>Number.Round</code> NULL zurück.<br>\r\n      <br>\r\n      Standardmäßig wird <code>number</code> auf die nächste ganze Zahl gerundet, und Gleichstände werden durch Rundung auf die nächste gerade Zahl aufgelöst (unter Verwendung von <code>RoundingMode.ToEven</code>, auch bekannt als „unverzerrte Rundung“).<br>\r\n      <br>\r\n      Diese Standardwerte können jedoch über die folgenden optionalen Parameter überschrieben werden. \r\n      <ul>\r\n        <li><code>digits</code>: Bewirkt, dass <code>number</code> auf die angegebene Anzahl von Dezimalstellen gerundet wird.</li>\r\n        <li><code>roundingMode</code>: Überschreibt das Standardverhalten zur Auflösung von Gleichständen, wenn sich <code>number</code> in der Mitte zwischen zwei möglichen gerundeten Werten befindet.\r\n      (siehe <code>RoundingMode.Type</code> für mögliche Werte).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rundet 1,234 auf die nächste ganze Zahl.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Rundet 1,56 auf die nächste ganze Zahl.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Rundet 1,2345 auf zwei Dezimalstellen.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Rundet 1,2345 auf drei Dezimalstellen (Aufrundung).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Rundet 1,2345 auf drei Dezimalstellen (Abrundung).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Gibt das Ergebnis der Aufrundung positiver Zahlen und der Abrundung negativer Zahlen zurück. Die Anzahl der Dezimalstellen kann angegeben werden.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Rundung von <code>number</code> auf der Grundlage des Vorzeichens zurück. Positive Zahlen werden aufgerundet, negative Zahlen abgerundet.\r\n    Wenn <code>digits</code> angegeben wird, wird <code>number</code> auf die Anzahl <code>digits</code> der Dezimalstellen gerundet.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rundet die Zahl -1,2 von null weg.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Rundet die Zahl 1,2 von null weg.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Rundet die Zahl -1,234 auf zwei Dezimalstellen von null weg.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Gibt die nächstniedrigere Zahl zurück. Die Anzahl der Dezimalstellen kann angegeben werden.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Rundung von <code>number</code> auf die vorherige höchste ganze Zahl aus. Wenn <code>number</code> NULL ist, gibt diese Funktion NULL aus.\r\n\r\n    Wenn <code>digits</code> angegeben wird, wird <code>number</code> auf die angegebene Anzahl von Dezimalstellen gerundet.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rundet 1,234 auf eine ganze Zahl ab.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Rundet 1,999 auf eine ganze Zahl ab.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Rundet 1,999 auf zwei Dezimalstellen ab.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Gibt das Ergebnis der Abrundung positiver Zahlen und der Aufrundung negativer Zahlen zurück. Die Anzahl der Dezimalstellen kann angegeben werden.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Rundung von <code>number</code> auf der Grundlage des Vorzeichens zurück. Positive Zahlen werden abgerundet, negative Zahlen aufgerundet.\r\n    Wenn <code>digits</code> angegeben wird, wird <code>number</code> auf die Anzahl <code>digits</code> der Dezimalstellen gerundet.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rundet die Zahl -1,2 Richtung null.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Rundet die Zahl 1,2 Richtung null.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Rundet die Zahl -1,234 auf zwei Dezimalstellen gegen null.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Gibt die nächsthöhere ganze Zahl zurück. Die Anzahl der Dezimalstellen kann angegeben werden.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Rundung von <code>number</code> auf die nächste höchste ganze Zahl aus. Wenn <code>number</code> NULL ist, gibt diese Funktion NULL aus.\r\n    Wenn <code>digits</code> angegeben wird, wird <code>number</code> auf die angegebene Anzahl von Dezimalstellen gerundet.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Rundet 1,234 auf eine ganze Zahl auf.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Rundet 1,999 auf eine ganze Zahl auf.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Rundet 1,234 auf zwei Dezimalstellen auf.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Gibt \"1\" zurück, wenn die Zahl positiv ist, \"-1\", wenn sie negativ ist, und \"0\", wenn die Zahl null ist.",
        "Documentation.LongDescription": "Gibt 1 zurück, wenn <code>number</code> eine positive Zahl ist, -1, wenn es sich um eine negative Zahl handelt, und 0, wenn die Zahl null ist.\r\n    Ist <code>number</code> NULL, gibt <code>Number.Sign</code> NULL zurück.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt das Vorzeichen von 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Ermittelt das Vorzeichen von -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Ermittelt das Vorzeichen von 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Gibt den Sinus der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den Sinus von <code>number</code> zurück.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Sinus des Winkels 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Gibt den hyperbolischen Sinus der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den hyperbolischen Sinus von <code>number</code> zurück.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Gibt die Quadratwurzel der Zahl zurück.",
        "Documentation.LongDescription": "Gibt die Quadratwurzel von <code>number</code> zurück.\r\n    Ist <code>number</code> NULL, gibt <code>Number.Sqrt</code> NULL zurück. Handelt es sich um einen negativen Wert, wird <code>Number.NaN</code> (kein numerischer Wert) zurückgegeben.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Quadratwurzel von 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Ermittelt die Quadratwurzel von 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Gibt den Tangens der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den Tangens von <code>number</code> zurück.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den Tangens des Winkels 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Gibt den hyperbolischen Tangens der Zahl zurück.",
        "Documentation.LongDescription": "Gibt den hyperbolischen Tangens von <code>number</code> zurück.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Konvertiert die angegebene Zahl in Text.",
        "Documentation.LongDescription": "Konvertiert den numerischen Wert <code>number</code> in einen Textwert entsprechend dem von <code>format</code> vorgegebenen Format.<br>\r\n    <br>\r\n    Das Format ist ein Textwert, der angibt, wie die Zahl konvertiert werden soll. Weitere Informationen zu den unterstützten Formatwerten finden Sie unter https://go.microsoft.com/fwlink/?linkid=2241210 und https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Optional kann auch <code>culture</code> angegeben werden (z. B. „en-US”), um das kulturabhängige Verhalten von <code>format</code> zu steuern.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert eine Zahl in Text ohne Angabe eines Formats.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Konvertiert eine Zahl in ein exponentielles Format.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Konvertiert eine Zahl in ein Prozentformat mit nur einer Dezimalstelle.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Gibt eine Tabelle mit OData-Feeds zurück, die von einem OData-Dienst bereitgestellt werden.",
        "Documentation.LongDescription": "Gibt eine Tabelle mit OData-Feeds zurück, die von einem OData-Dienst von einem URI <code>serviceUri</code>, Header <code>headers</code>, angeboten werden. Ein boolescher Wert, der angibt, ob gleichzeitige Verbindungen verwendet werden sollen, oder ein optionaler Datensatzparameter <code>options</code> kann angegeben werden, um die folgenden Optionen zu steuern:\r\n    <ul>\r\n    <li><code>Query</code>: Fügt der URL programmgesteuert Abfrageparameter hinzu, ohne dass Sie sich um Escapezeichen kümmern müssen. </li>\r\n    <li> <code>Headers</code>: Durch Angabe dieses Werts als Datensatz werden für eine HTTP-Anforderung zusätzliche Header bereitgestellt.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Wenn dieser Wert als Liste angegeben wird, werden diese HTTP-Headerschlüssel nicht in die Berechnung für das Zwischenspeichern von Daten einbezogen.</li>\r\n    <li> <code>ApiKeyName</code>: Wenn auf der Zielwebsite ein API-Schlüssel vorhanden ist, kann dieser Parameter verwendet werden, um den Namen (nicht den Wert) des Schlüsselparameters anzugeben, der in der URL verwendet werden muss. Der tatsächliche Schlüsselwert wird in den Anmeldeinformationen bereitgestellt.</li>\r\n    <li> <code>Timeout</code>: Durch Angabe dieses Werts als Dauer wird die Zeitüberschreitung für eine HTTP-Anforderung geändert. Der Standardwert beträgt 600 Sekunden.</li>\r\n    <li> <code>EnableBatch</code>: Ein logischer Wert (TRUE/FALSE), durch den festgelegt wird, ob die Generierung einer OData $batch-Anforderung zugelassen werden soll, wenn die MaxUriLength überschritten wird (der Standardwert ist FALSE).</li>\r\n    <li> <code>MaxUriLength</code>: Eine Zahl, durch welche die maximale Länge eines zulässigen URI angegeben wird, der an einen OData-Dienst gesendet wird. Wenn dieser Wert überschritten wird und EnableBatch TRUE ist, erfolgt die Anforderung an einen OData $batch-Endpunkt. Andernfalls tritt ein Fehler auf (der Standardwert ist 2048).</li>\r\n    <li> <code>Concurrent</code>: Ein logischer Wert (TRUE/FALSE). Wenn auf TRUE festgelegt, werden Anforderungen an den Diensts gleichzeitig verarbeitet. Wenn auf FALSE festgelegt, werden Anforderungen sequentiell verarbeitet. Wenn dieser Wert nicht angegeben ist, wird er durch die AsynchronousRequestsSupported-Anmerkung des Diensts bestimmt. Wenn der Dienst nicht angibt, ob AsynchronousRequestsSupported unterstützt wird, werden Anforderungen sequenziell verarbeitet.</li>\r\n    <li> <code>ODataVersion</code>: Eine Zahl (3 oder 4), welche die für diesen OData-Dienst zu verwendende OData-Protokollversion angibt. Wenn nicht angegeben, werden alle unterstützten Versionen angefordert. Die Dienstversion wird vom OData-Versionsheader festgelegt, der vom Dienst zurückgegeben wurde.</li>\r\n    <li> <code>FunctionOverloads</code>: Ein logischer Wert (TRUE/FALSE). Wenn auf TRUE festgelegt, werden Funktionsimportüberladungen im Navigator als separate Einträge aufgelistet. Wenn auf FALSE festgelegt, werden Funktionsimportüberladungen im Navigator als eine Vereinigungsfunktion aufgelistet. Standardwert für V3: FALSE. Standardwert für V4: TRUE.</li>\r\n    <li> <code>MoreColumns</code>: Ein logischer Wert (TRUE/FALSE). Wenn auf TRUE festgelegt, wird jedem Entitätsfeed mit offenen Typen und polymorphen Typen eine Spalte „Weitere Spalten“ hinzugefügt. Diese enthält die Felder, die im Basistyp nicht deklariert sind. Wenn auf FALSE festgelegt, ist dieses Feld nicht vorhanden. Der Standardwert ist FALSE.</li>\r\n    <li> <code>IncludeAnnotations</code>: Eine durch Kommas getrennte Liste von Namespace-qualifizierten Begriffsnamen oder -mustern, die mit „*“ als Platzhalterzeichen einbezogen werden. Standardmäßig werden keine Anmerkungen einbezogen.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: Eine durch Kommas getrennte Liste von Namespace-qualifizierten Begriffsnamen oder -mustern, die in Anforderungen für Metadatendokumente einbezogen werden, mit „*“ als Platzhalter. Umfasst standardmäßig dieselben Anmerkungen wie IncludeAnnotations.</li>\r\n<li> <code>OmitValues</code>: Hiermit kann der OData-Dienst das Ausschreiben bestimmter Werte in Antworten vermeiden. Bei Bestätigung durch den Dienst werden diese Werte aus den ausgelassenen Feldern abgeleitet. Die Optionen umfassen:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : Ermöglicht dem OData-Service NULL-Werte auszulassen.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : Gibt die Implementierung des zu verwendenden OData-Connectors an. Gültige Werte sind „2.0“ oder NULL.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Stellen Sie eine Verbindung mit dem TripPin-OData-Dienst her.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Gibt das Ergebnis des Versuchs zurück, SQL-Funktionen für einen ODBC-Treiber abzuleiten.",
        "Documentation.LongDescription": "Gibt das Ergebnis des Versuchs zurück, SQL-Funktionen mit der Verbindungszeichenfolge \"<code>connectionString</code>\" unter Verwendung von ODBC abzuleiten. \"<code>connectionString</code>\" kann Text oder ein Datensatz mit Eigenschaft/-Wert-Paaren sein. Eigenschaftswerte können Text oder eine Zahl sein.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Gibt die abgeleiteten SQL-Funktionen für eine Verbindungszeichenfolge zurück.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Gibt den Inhalt des Parquet-Dokuments als Tabelle zurück.",
        "Documentation.LongDescription": "Gibt den Inhalt des Parquet-Dokuments als Tabelle zurück. Zu den Optionen gehören:\n    <ul>\n    <li> <code>TypeMapping</code>: Ein Textwert, der die Standardtypzuordnung beim Lesen und Schreiben von Dateien steuert. Der Standardwert ist NULL. Damit wird versucht, für den ursprünglichen Typ eine möglichst große Originaltreue beizubehalten. Der Wert „Sql“ erzeugt Ergebnisse, die am besten mit SQL Server kompatibel sind.</li>\n    </ul>",
        "Documentation.Category": "Datenzugriff",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.LongDescription": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.Category": "Datenzugriff",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Gibt einen Prozentwert aus dem angegebenen Wert zurück.",
        "Documentation.LongDescription": "Gibt einen <code>Prozentwert</code> aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>NULL</code> lautet, gibt <code>Percentage.From</code> den Wert <code>NULL</code> zurück. Wenn der angegebene <code>value</code>-Wert <code>Text</code> mit einem nachfolgenden Prozentzeichen ist, wird die konvertierte Dezimalzahl zurückgegeben. Andernfalls wird der Wert mit <code>Number.From</code> in einen <code>number</code>-Wert konvertiert. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Hiermit rufen Sie den <code>Prozentwert</code> aus <code>\"12,3 %\"</code> ab.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Gibt einen Datensatz mit Datenrahmen aus der RData-Datei zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz mit Datenrahmen aus der RData-Datei zurück.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Fasst die Datensätze in der angegebenen Liste zusammen.",
        "Documentation.LongDescription": "Fasst die Datensätze im angegebenen Element vom Typ \"<code>records</code>\" zusammen. Enthält das Element vom Typ \"<code>records</code>\" datensatzfremde Werte, wird ein Fehler zurückgegeben.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Erstellt einen zusammengefassten Datensatz auf der Grundlage der Datensätze.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Gibt die Anzahl von Feldern im Datensatz zurück.",
        "Documentation.LongDescription": "Gibt die Anzahl von Feldern im Datensatz \"<code>record</code>\" zurück.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Anzahl von Feldern im Datensatz.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Gibt die Namen der Felder zurück.",
        "Documentation.LongDescription": "Gibt die Namen der Felder im Datensatz \"<code>record</code>\" als Text zurück.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Namen der Felder im Datensatz.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Gibt eine Liste mit den Feldwerten zurück.",
        "Documentation.LongDescription": "Gibt eine Liste mit den Feldwerten im Datensatz \"<code>record</code>\" zurück.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Feldwerte im Datensatz.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Erstellt einen Datensatz auf der Grundlage einer Tabelle im Format \"{[Name = name, Value = value]}\".",
        "Documentation.LongDescription": "Gibt einen Datensatz auf der Grundlage einer Datensatztabelle (<code>table</code>) mit Feld- und Wertnamen (<code>{[Name = name, Value = value]}</code>) zurück. Sind die Feldnamen nicht eindeutig, wird eine Ausnahme ausgelöst.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Erstellt einen Datensatz auf der Grundlage der Tabelle im Format 'Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]})'.",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Gibt eine Liste von Werten mit den Feldwerten des Eingabedatensatzes zurück.",
        "Documentation.LongDescription": "Gibt eine Liste von Werten mit den Feldwerten aus der Eingabe <code>record</code> zurück.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Extrahieren Sie die Feldwerte aus einem Datensatz.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Gibt eine abstrakte Syntaxstruktur (Abstract Syntax Tree, AST) zurück, welche den Zugriff auf eine Spalte innerhalb eines Zeilenausdrucks darstellt.",
        "Documentation.LongDescription": "Gibt eine abstrakte Syntaxstruktur (Abstract Syntax Tree, AST) zurück, die den Zugriff auf die Spalte <code>columnName</code> der Zeile innerhalb eines Zeilenausdrucks darstellt.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine AST-Angabe, die den Zugriff auf die Spalte \"CustomerName\" darstellt.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Gibt die abstrakte Syntaxstruktur (Abstract Syntax Tree, AST) für den Text einer Funktion zurück.",
        "Documentation.LongDescription": "<p>Gibt die abstrakte Syntaxstruktur (Abstract Syntax Tree, AST) für den Text von <code>function</code> zurück, normalisiert in einen <i>Zeilenausdruck</i>:\r\n<ul>\r\n  <li>Die Funktion muss ein Lambdaausdruck mit einem Argument sein.</li>\r\n  <li>Alle Verweise auf den Funktionsparameter werden durch <code>RowExpression.Row</code> ersetzt.</li>\r\n  <li>Alle Verweise auf Spalten werden durch <code>RowExpression.Column(<i>columnName</i>)</code> ersetzt.</li>\r\n  <li>Die AST-Angabe wird vereinfacht, damit sie nur Knoten der folgenden Typen enthält:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Es wird ein Fehler ausgelöst, wenn keine Zeilenausdruck-AST-Angabe für den Textkörper von <code>function</code> zurückgegeben werden kann.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Gibt die AST-Angabe für den Textkörper der Funktion <code>each [CustomerID] = \"ALFKI\"</code> zurück.",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Erstellt einen Single-Wert aus dem angegebenen Wert.",
        "Documentation.LongDescription": "Gibt einen Single-<code>number</code>-Wert aus dem angegebenen <code>value</code>-Wert zurück. Wenn der angegebene <code>value</code>-Wert <code>null</code> ist, gibt <code>Single.From</code> <code>null</code> zurück. Wenn der angegebene <code>value</code>-Wert <code>number</code> im Bereich von „Single“ liegt, wird „<code>value</code>“ zurückgegeben. Andernfalls wird ein Fehler zurückgegeben. Wenn der <code>value</code>-Wert einen anderen Typ aufweist, wird er erst mit <code>Number.FromText</code> in einen <code>number</code>-Wert konvertiert. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ruft den Single-<code>number</code>-Wert <code>\"1,5\"</code> ab.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Gibt eine Tabelle mit Daten von einem Smartsheet-Indexendpunkt zurück.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Ruft die Smartsheet 2.0-REST-API am angegebenen Endpunkt auf und transformiert das zurückgegebene Datenelement in eine Tabelle.",
        "Documentation.Examples": [
          {
            "Description": "Ruft eine Tabelle mit Benutzerinformationen aus der Smartsheet-API ab.",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Eine Tabelle mit Benutzerinformationen, wie sie von der Smartsheet-API zurückgegeben werden"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Gibt eine Funktion zurück, die Text an den angegebenen Trennzeichen in eine Liste mit Text aufteilt.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die Text an den angegebenen Trennzeichen in eine Liste mit Text aufteilt.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Teilen Sie die Eingabe durch Kommas oder Strichpunkte auf, wobei Anführungszeichen und Trennzeichen in Anführungszeichen ignoriert werden, und beginnen Sie am Anfang der Eingabe.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Teilen Sie die Eingabe durch Kommas oder Strichpunkte auf, ignorieren Sie Anführungszeichen und Trennzeichen in Anführungszeichen, und beginnen Sie am Ende der Eingabe.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Gibt eine Funktion zurück, die Text auf der Grundlage des angegebenen Trennzeichens in eine Liste mit Text aufteilt.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die Text auf der Grundlage des angegebenen Trennzeichens in eine Liste mit Text aufteilt.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Teilen Sie die Eingabe durch Kommas auf, ignorieren Sie in Anführungszeichen gesetzte Kommas.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Gibt eine Funktion zurück, die Text nacheinander an den angegebenen Trennzeichen in eine Liste mit Text aufteilt.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die Text nacheinander an den angegebenen Trennzeichen in eine Liste mit Text aufteilt.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Teilen Sie die Eingabe durch Kommas und dann durch Strichpunkte auf, beginnend am Anfang der Eingabe.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Teilen Sie die Eingabe durch Kommas und dann durch Strichpunkte auf, und behandeln Sie Anführungszeichen wie alle anderen Zeichen, und beginnen Sie am Ende der Eingabe.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Gibt eine Funktion zurück, die Text anhand der angegebenen Längenwerte in eine Liste mit Text aufteilt.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die Text anhand der angegebenen Längenwerte in eine Liste mit Text aufteilt.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Teilen Sie die Eingabe in die ersten zwei Zeichen auf, gefolgt von den nächsten drei Zeichen, beginnend am Anfang der Eingabe.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Teilen Sie die Eingabe in die ersten drei Zeichen auf, gefolgt von den nächsten zwei Zeichen, beginnend am Ende der Eingabe.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Gibt eine Funktion zurück, die Text an den angegebenen Positionen in eine Liste mit Text aufteilt.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die Text an den angegebenen Positionen in eine Liste mit Text aufteilt.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Teilen Sie die Eingabe an den angegebenen Positionen auf, beginnend am Anfang der Eingabe.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Teilen Sie die Eingabe an den angegebenen Positionen auf, beginnend am Ende der Eingabe.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Gibt eine Funktion zurück, die Text auf der Grundlage der angegebenen Offset- und Längenwerte in eine Liste mit Text aufteilt.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die Text entsprechend den angegebenen Offsets und Längen in eine Liste von Texten aufteilt. Eine NULL-Länge gibt an, dass alle verbleibenden Eingaben eingeschlossen werden sollen.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Teilen Sie die Eingabe durch die angegebenen Positions- und Längenpaare auf, beginnend am Anfang der Eingabe. Beachten Sie, dass sich die Bereiche in diesem Beispiel überlappen.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Teilen Sie die Eingabe durch die angegebenen Positions- und Längenpaare auf, beginnend am Ende der Eingabe.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Teilen Sie die Eingabe in eine Postleitzahl mit fester Länge auf, gefolgt von einem Ortsnamen mit variabler Länge.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Gibt eine Funktion zurück, die Text nach der angegebenen Länge wiederholt in eine Textliste aufteilt.",
        "Documentation.LongDescription": "Gibt eine Funktion zurück, die Text nach der angegebenen Länge wiederholt in eine Textliste aufteilt.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Teilen Sie die Eingabe wiederholt in Blöcke mit drei Zeichen auf, beginnend am Anfang der Eingabe.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Teilen Sie die Eingabe wiederholt in Blöcke mit drei Zeichen auf, beginnend am Ende der Eingabe.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Gibt die ungefähre Anzahl der Zeilen in der Tabelle zurück.",
        "Documentation.LongDescription": "Gibt die ungefähre Anzahl von Zeilen im <code>table</code> zurück, oder einen Fehler, wenn die Datenquelle keine Näherung unterstützt.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Schätzen Sie die Anzahl unterschiedlicher Kombinationen aus Stadt und Bundesland in einer großen Tabelle, die als Kardinalitätsschätzung für die Spalten verwendet werden kann. Kardinalitätsschätzungen sind wichtig genug, sodass verschiedene Datenquellen (z. B. SQL Server) diese spezifische Näherung unterstützen und häufig einen Algorithmus namens HyperLogLog verwenden.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Gibt die Anzahl von Spalten in der Tabelle zurück.",
        "Documentation.LongDescription": "Gibt die Anzahl von Spalten in der Tabelle \"<code>table</code>\" zurück.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Anzahl von Spalten in der Tabelle.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Gibt die Spaltennamen als Liste zurück.",
        "Documentation.LongDescription": "Gibt die Spaltennamen in der Tabelle \"<code>table</code>\" als Liste mit Text zurück.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Spaltennamen der Tabelle.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Gibt die erste Zeile oder einen angegebenen Standardwert zurück.",
        "Documentation.LongDescription": "Gibt die erste Zeile des Elements vom Typ \"<code>table</code>\" zurück. Ist die Tabelle leer, wird ein optionaler Standardwert (<code>default</code>) zurückgegeben.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die erste Zeile der Tabelle.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Ermittelt die erste Zeile der Tabelle <code>({})</code> oder gibt \"[a = 0, b = 0]\" zurück, falls die Tabelle leer ist.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Gibt die erste Spalte der ersten Zeile der Tabelle oder einen angegebenen Standardwert zurück.",
        "Documentation.LongDescription": "Gibt die erste Spalte der ersten Zeile der Tabelle <code>table</code> oder einen angegebenen Standardwert zurück.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Gibt an, ob die Tabelle nur eindeutige Zeilen (also keine Duplikate) enthält.",
        "Documentation.LongDescription": "Gibt an, ob das Element vom Typ \"<code>table</code>\" nur eindeutige Zeilen (also keine Duplikate) enthält. Gibt <code>true</code> zurück, wenn die Zeilen eindeutig sind. Andernfalls wird <code>false</code> zurückgegeben.\r\n    Mit einem optionalen Parameter (<code>comparisonCriteria</code>) kann angegeben werden, welche Spalten aus der Tabelle auf mehrfache Vorkommen überprüft werden sollen. Ohne Angabe von \"<code>comparisonCriteria</code>\" werden alle Spalten überprüft.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Tabelle eindeutig ist.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ermittelt, ob die Tabelle in der Spalte eindeutig ist.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Gibt an, ob die Tabelle Zeilen enthält.",
        "Documentation.LongDescription": "Gibt an, ob das Element vom Typ \"<code>table</code>\" Zeilen enthält. Gibt <code>true</code> zurück, falls keine Zeilen vorhanden sind (die Tabelle also leer ist). Andernfalls wird <code>false</code> zurückgegeben.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt, ob die Tabelle leer ist.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ermittelt, ob die Tabelle <code>({})</code> leer ist.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Gibt die Schlüssel der angegebenen Tabelle zurück.",
        "Documentation.LongDescription": "Gibt die Schlüssel der angegebenen Tabelle zurück.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rufen Sie die Liste der Schlüssel für eine Tabelle ab.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Gibt die letzte Zeile oder einen angegebenen Standardwert zurück.",
        "Documentation.LongDescription": "Gibt die letzte Zeile des Elements vom Typ \"<code>table</code>\" zurück. Ist die Tabelle leer, wird ein optionaler Standardwert (<code>default</code>) zurückgegeben.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die letzte Zeile der Tabelle.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Ermittelt die letzte Zeile der Tabelle <code>({})</code> oder gibt \"[a = 0, b = 0]\" zurück, falls die Tabelle leer ist.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Gibt die Anzahl von Zeilen in der Tabelle zurück.",
        "Documentation.LongDescription": "Gibt die Anzahl von Zeilen im Element vom Typ \"<code>table</code>\" zurück.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Anzahl von Zeilen in der Tabelle.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Gibt die einzelne Zeile in der Tabelle zurück.",
        "Documentation.LongDescription": "Gibt die einzelne Zeile im einzeiligen Element vom Typ \"<code>table</code>\" zurück. Enthält das Element vom Typ \"<code>table</code>\" mehrere Zeilen, wird eine Ausnahme ausgelöst.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Gibt die einzelne Zeile in der Tabelle zurück.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Erstellt eine Liste mit geschachtelten Listen mit Spaltenwerten aus einer Tabelle.",
        "Documentation.LongDescription": "Erstellt eine Liste mit geschachtelten Listen aus der Tabelle \"<code>table</code>\".  Jedes Listenelement ist eine innere Liste mit den Spaltenwerten.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit den Spaltenwerten aus der Tabelle.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Konvertiert eine Tabelle in eine Liste, indem die angegebene Kombinationsfunktion auf die einzelnen Zeilen mit Werten in der Tabelle angewendet wird.",
        "Documentation.LongDescription": "Konvertiert eine Tabelle in eine Liste, indem die angegebene Kombinationsfunktion auf die einzelnen Zeilen mit Werten in der Tabelle angewendet wird.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Kombinieren des Texts jeder Zeile mit einem Komma.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Konvertiert eine Tabelle in eine Liste mit Datensätzen.",
        "Documentation.LongDescription": "Konvertiert eine Tabelle (<code>table</code>) in eine Liste mit Datensätzen.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert die Tabelle in eine Liste mit Datensätzen.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Erstellt eine Liste mit geschachtelten Listen mit Zeilenwerten aus einer Tabelle.",
        "Documentation.LongDescription": "Erstellt eine Liste mit geschachtelten Listen aus der Tabelle \"<code>table</code>\".  Jedes Listenelement ist eine innere Liste mit den Zeilenwerten.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit den Zeilenwerten aus der Tabelle.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Erstellt einen geänderten Fehlerdatensatz, der keinen Fallback auslöst, wenn er von einem Handler ausgelöst wird, der für eine Sicht definiert ist (über Table.View).",
        "Documentation.LongDescription": "Erstellt einen geänderten Fehlerdatensatz von <code>errorRecord</code>, der keinen Fallback auslöst, wenn er von einem Handler ausgelöst wird, der für eine Sicht definiert ist (über Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Erstellt eine Funktion, die von einem Handler abgefangen werden kann, der (über Table.View) in einer Ansicht definiert wurde.",
        "Documentation.LongDescription": "<p>Erstellt eine auf <code>function</code> basierende Ansichtsfunktion, die in einer von <code>Table.View</code> erstellten Ansicht verarbeitet werden kann.</p>\r\n<p>Der <code>OnInvoke</code>-Handler von <code>Table.View</code> kann zum Definieren eines Handlers für die Ansichtsfunktion verwendet werden.</p>\r\n<p>Ebenso wie bei den Handlern für integrierte Vorgänge wird <code>function</code> zusätzlich zur Ansicht angewendet, wenn kein <code>OnInvoke</code>-Handler angegeben wurde oder wenn dieser die Ansichtsfunktion nicht verarbeitet oder einen Fehler ausgibt.</p>\r\n<p>Eine umfassendere Beschreibung von <code>Table.View</code> und benutzerdefinierten Ansichtsfunktionen finden Sie in der veröffentlichten Dokumentation für benutzerdefinierte Power Query-Connectors.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Gibt den Textwert ohne jegliche Steuerzeichen zurück.",
        "Documentation.LongDescription": "Gibt einen Textwert ohne jegliche Steuerzeichen von \"<code>text</code>\" zurück.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Entfernt Zeilenvorschübe und andere Steuerzeichen aus einem Textwert.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Verkettet eine Liste mit Textwerten zu einem einzelnen Textwert.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Kombination der Liste der Textwerte (<code>texts</code>) zu einem einzelnen Textwert zurück. Alle in <code>texts</code> vorhandenen <code>null-</code>-Werte werden ignoriert.\r\n    Eine optionale <code>separator</code>, die im abschließenden kombinierten Text verwendet wird, kann angegeben werden.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Fasst die Textwerte \"Seattle\" und \"WA\"zusammen.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Fasst die Textwerte \"Seattle\" und \"WA\" zu einem durch ein Komma und ein Leerzeichen getrennten Wert zusammen.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Kombinieren Sie die Werte \"Seattle\", <code>null</code> und \"WA\", getrennt durch ein Komma und ein Leerzeichen. (Beachten Sie, dass <code>null</code> ignoriert wird.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Erstellt einen Textwert auf der Grundlage des angegebenen Werts.",
        "Documentation.LongDescription": "Gibt die Textdarstellung von \"<code>value</code>\" zurück. Bei \"<code>value</code>\" kann es sich um einen <code>number</code>-, <code>date</code>-, <code>time</code>-, <code>datetime</code>-, <code>datetimezone</code>-, <code>logical</code>-, <code>duration</code>- oder <code>binary</code>-Wert handeln.\r\n    Ist der angegebene Wert NULL, gibt <code>Text.From</code> NULL zurück. Optional kann auch ein Element vom Typ \"<code>culture</code>\" angegeben werden (Beispiel: \"de-DE\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Erstellt einen Textwert auf der Grundlage der Zahl 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Decodiert Daten aus einem Binärformat in Text.",
        "Documentation.LongDescription": "Decodiert Daten (<code>binary</code>) aus einem Binärwert unter Verwendung des Typs \"<code>encoding</code>\" in einen Textwert.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Leitet den granularen Zahlentyp (Int64.Type, Double.Type usw.) einer im Text codierten Zahl ab.",
        "Documentation.LongDescription": "Leitet den granularen Zahlentyp (Int64.Type, Double.Type usw.) von <code>text</code> ab. Ein Fehler wird ausgelöst, wenn <code>text</code> keine Zahl ist. Optional kann auch ein Element vom Typ <code>culture</code> angegeben werden (Beispiel: \"en-US\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Gibt die Zeichenanzahl zurück.",
        "Documentation.LongDescription": "Gibt die Anzahl von Zeichen im Text \"<code>text</code>\" zurück.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Anzahl von Zeichen im Text \"Hello World\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Konvertiert alle Zeichen in Kleinschreibung.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Konvertierung aller Zeichen in \"<code>text</code>\" in Kleinbuchstaben zurück. Optional kann auch ein Element vom Typ \"<code>culture</code>\" angegeben werden (Beispiel: \"de-DE\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ruft die klein geschriebene Version von \"AbCd\" ab.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Schreibt den ersten Buchstaben jedes Worts groß.",
        "Documentation.LongDescription": "Gibt das Ergebnis zurück, das entsteht, wenn lediglich der erste Buchstabe jedes Worts im Textwert \"<code>text</code>\" großgeschrieben wird. Alle anderen Buchstaben werden in Kleinschreibung zurückgegeben. Optional kann auch ein Element vom Typ \"<code>culture</code>\" angegeben werden (Beispiel: \"de-DE\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Wendet <code>Text.Proper</code> auf einen einfachen Satz an.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Kehrt die Angabe von \"<code>text</code>\" um.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kehrt den Text \"123\" um.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Codiert Text in ein Binärformat.",
        "Documentation.LongDescription": "Codiert den angegebenen Textwert (<code>text</code>) unter Verwendung der Angabe für \"<code>encoding</code>\" in einen Binärwert.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Gibt eine Liste mit Zeichenwerten auf der Grundlage des angegebenen Textwerts zurück.",
        "Documentation.LongDescription": "Gibt eine Liste mit Zeichenwerten auf der Grundlage des angegebenen Textwerts (<code>text</code>) zurück.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Erstellt eine Liste mit Zeichenwerten auf der Grundlage des Texts \"Hello World\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Entfernt alle führenden und nachfolgenden Leerzeichen.",
        "Documentation.LongDescription": "Gibt das Ergebnis des Entfernens aller führenden und nachfolgenden Leerzeichen aus dem Textwert \"<code>text</code>\" zurück.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die führenden und nachfolgenden Leerzeichen aus \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Entfernt alle nachfolgenden Leerzeichen.",
        "Documentation.LongDescription": "Gibt das Ergebnis des Entfernens aller nachfolgenden Leerzeichen aus dem Textwert \"<code>text</code>\" zurück.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die nachfolgenden Leerzeichen aus \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Entfernt alle führenden Leerzeichen.",
        "Documentation.LongDescription": "Gibt das Ergebnis des Entfernens aller führenden Leerzeichen aus dem Textwert \"<code>text</code>\" zurück.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Entfernt die führenden Leerzeichen aus \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Konvertiert alle Zeichen in Großschreibung.",
        "Documentation.LongDescription": "Gibt das Ergebnis der Konvertierung aller Zeichen in \"<code>text</code>\" in Großbuchstaben zurück. Optional kann auch ein Element vom Typ \"<code>culture</code>\" angegeben werden (Beispiel: \"de-DE\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ruft die groß geschriebene Version von \"aBcD\" ab.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Gibt das Ende der Stunde zurück.",
        "Documentation.LongDescription": "Gibt das Ende der Stunde, das durch <code>dateTime</code> dargestellt wird, zurück (einschließlich Sekundenbruchteilen). Die Zeitzoneninformationen bleiben erhalten.\r\n      <ul>\r\n        <li><code>dateTime</code>: Ein <code>time</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert, auf dessen Grundlage das Ende der Stunde berechnet wird.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ruft das Ende der Stunde für den 14.05.2011, 17:00:00 Uhr ab.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Ruft das Ende der Stunde für den 17.05.2011, 17:00:00 Uhr (-7:00) ab.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Erstellt eine Uhrzeit auf der Grundlage des angegebenen Werts.",
        "Documentation.LongDescription": "Gibt einen <code>time</code>-Wert auf der Grundlage des angegebenen Elements vom Typ „<code>value</code>“ zurück. Optional kann auch ein Element vom Typ „<code>culture</code>“ angegeben werden (Beispiel: „de-DE“).\r\nBesitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>NULL</code>, wird von <code>Time.From</code> der Wert <code>NULL</code> zurückgegeben. Besitzt das angegebene Element vom Typ „<code>value</code>“ den Wert <code>time</code>, wird „<code>value</code>“ zurückgegeben. Werte folgender Art können in einen <code>time</code>-Wert konvertiert werden:\r\n      <ul>\r\n        <li><code>text</code>: Ein <code>time</code>-Wert auf der Grundlage einer Textdarstellung. Ausführlichere Informationen finden Sie unter <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: Die Uhrzeitkomponente von „<code>value</code>“.</li>\r\n        <li><code>datetimezone</code>: Die Uhrzeitkomponente der lokalen datetime-Entsprechung von „<code>value</code>“.</li>\r\n        <li><code>number</code>: Eine <code>time</code>-Entsprechung für die durch „<code>value</code>“ ausgedrückte Anzahl anteiliger Tage. Ist „<code>value</code>“ negativ oder größer/gleich 1, wird ein Fehler zurückgegeben.</li>\r\n      </ul>\r\nHandelt es sich bei „<code>value</code>“ um einen anderen Typ, wird ein Fehler zurückgegeben.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>0.7575</code> in einen <code>time</code>-Wert.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Konvertiert <code>#datetime(1899, 12, 30, 06, 45, 12)</code> in einen <code>time</code>-Wert.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Erstellt einen Zeitwert auf der Grundlage lokaler, universeller und benutzerdefinierter Zeitformate.",
        "Documentation.LongDescription": "Erstellt einen <code>time</code>-Wert aus einer Textdarstellung, <code>text</code>. Ein optionaler <code>record</code>-Parameter, <code>options</code>, kann angegeben werden, um zusätzliche Eigenschaften anzugeben. <code>record</code> kann die folgenden Felder enthalten:\r\n<ul>\r\n   <li><code>Format</code>: Ein <code>text</code>-Wert, der das zu verwendende Format angibt. Gehen Sie zu https://go.microsoft.com/fwlink/?linkid=2180104 und https://go.microsoft.com/fwlink/?linkid=2180105 für Details. Wenn Sie dieses Feld auslassen oder <code>null</code> angeben, wird das Datum nach bestem Wissen geparst.</li>\r\n   <li><code>Culture</code>: Wenn <code>Format</code> nicht null ist, definiert <code>Culture</code> einige Formatspezifikationen. Zum Beispiel ist in <code>\"en-US\"</code> <code>\"tt\"</code> <code>\"AM\" oder \"PM\"</code>, währen in <code>\"ar-EG\"</code> <code>\"tt\"</code> <code>\"ص\" oder \"م\"</code> ist. Wenn <code>Format</code> <code>null</code> ist, bestimmt <code>Culture</code> das zu verwendende Standardformat. Wenn <code>Culture</code> <code>null</code> ist oder weggelassen wird, wird <code>Culture.Current</code> verwendet.</li>\r\n</ul>\r\nZur Unterstützung von Legacyworkflows kann <code>options</code> auch ein Textwert sein. Dies führt zum gleichen Verhalten wie <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert <code>\"10:12:31am\"</code> in einen time-Wert.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "<code>\"1012\"</code> in einen Zeitwert konvertieren.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "<code>\"10\"</code> in einen Zeitwert konvertieren.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Gibt die Stundenkomponente zurück.",
        "Documentation.LongDescription": "Gibt die Stundenkomponente des angegebenen <code>time</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Werts \"<code>dateTime</code>\" zurück.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Stunde in \"#datetime(2011, 12, 31, 9, 15, 36)\".",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Gibt die Minutenkomponente zurück.",
        "Documentation.LongDescription": "Gibt die Minutenkomponente des angegebenen <code>time</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Werts \"<code>dateTime</code>\" zurück.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Minute in \"#datetime(2011, 12, 31, 9, 15, 36)\".",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Gibt die Sekundenkomponente zurück.",
        "Documentation.LongDescription": "Gibt die Sekundenkomponente des angegebenen <code>time</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Werts \"<code>dateTime</code>\" zurück.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt den zweiten Wert aus einem datetime-Wert.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Gibt den Anfang der Stunde zurück.",
        "Documentation.LongDescription": "Gibt den Beginn der Stunde, der durch <code>dateTime</code> dargestellt wird, zurück.\r\n    <code>dateTime</code> muss ein <code>time</code>-, <code>datetime</code>- oder <code>datetimezone</code>-Wert sein.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie den Anfang der Stunde für den 10. Oktober 2011, 8:10:32 Uhr.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Gibt einen Datensatz mit den Teilen des time-Werts zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz mit den Teilen des angegebenen time-Werts (<code>time</code>) zurück.\r\n <ul>\r\n        <li><code>time</code>: Ein <code>time</code>-Wert, auf dessen Grundlage der Datensatz mit den zugehörigen Teilen berechnet werden soll.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertiert den Wert <code>#time(11, 56, 2)</code> in einen Datensatz mit time-Werten.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Gibt eine Textdarstellung des time-Werts zurück.",
        "Documentation.LongDescription": "Gibt eine Textdarstellung von <code>time</code> zurück. Ein optionaler <code>record</code>-Parameter, <code>options</code>, kann angegeben werden, um zusätzliche Eigenschaften anzugeben. <code>culture</code> wird nur für Legacyworkflows verwendet. <code>record</code> kann die folgenden Felder enthalten:\r\n<ul>\r\n   <li><code>Format</code>: Ein <code>text</code>-Wert, der das zu verwendende Format angibt. Weitere Details finden Sie unter https://go.microsoft.com/fwlink/?linkid=2180104 und https://go.microsoft.com/fwlink/?linkid=2180105. Wenn Sie dieses Feld auslassen oder <code>null</code> angeben, wird das Datum mit dem durch <code>Culture</code> definierten Standard formatiert.</li>\r\n   <li><code>Culture</code>: Wenn <code>Format</code> nicht null ist, bestimmt <code>Culture</code> manche Formatbezeichner. Zum Beispiel, ist in <code>\"en-US\"</code> <code>\"tt\"</code>  <code>\"AM\" oder \"PM\"</code>, whärend in <code>\"ar-EG\"</code> <code>\"tt\"</code> <code>\"ص\" oder \"م\"</code> ist. Wenn <code>Format</code> <code>null</code> ist, bestimmt <code>Culture</code> das zu verwendende Standardformat. Wenn <code>Culture</code> <code>null</code> ist oder ausgelassen wird, wird <code>Culture.Current</code> verwendet.</li>\r\n</ul>\r\nZur Unterstützung von Legacyworkflows können <code>options</code> und <code>culture</code> auch Textwerte sein. Dies führt zum gleichen Verhalten wie <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertieren Sie <code>#time(01, 30, 25)</code> in einen <code>text</code>-Wert. <i>Das ausgegebene Ergebnis variiert in Abhängigkeit der aktuell ausgewählten Kultur.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Führen Sie eine Konvertierung unter Verwendung eines benutzerdefinierten Formats und der Kultur „Deutsch“ durch.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Führen Sie eine Konvertierung unter Verwendung des Standardzeitformats durch.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Gibt eine geschlossene Version des angegebenen Datensatztyps zurück (bzw. denselben Typ, wenn dieser bereits geschlossen ist).",
        "Documentation.LongDescription": "Gibt eine geschlossene Version des angegebenen <code>Datensatzes</code> <code>type</code> zurück (bzw. denselben Typ, wenn dieser bereits geschlossen ist).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Erstellen Sie eine geschlossene Version von <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Gibt die Facets eines Typs zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz mit den Facets von <code>type</code> zurück.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Gibt einen Datensatz zurück, bei dem Feldwerte auf den Namen der Parameter eines Funktionstyps festgelegt sind und deren Werte auf ihre entsprechenden Typen festgelegt sind.",
        "Documentation.LongDescription": "Gibt einen Datensatz zurück, bei dem Feldwerte auf den Namen der Parameter von <code>type</code> festgelegt sind und deren Werte auf deren entsprechenden Typen festgelegt sind.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie die Typen der Parameter für die Funktion <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Gibt eine Zahl zurück, die die minimale Anzahl von Parametern angibt, die zum Aufrufen des Funktionstyps erforderlich sind.",
        "Documentation.LongDescription": "Gibt eine Zahl zurück, die die minimale Anzahl von Parametern angibt, die zum Aufrufen von <code>type</code> (Eingabe) der Funktion erforderlich sind.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie die Anzahl erforderlicher Parameter für die Funktion <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Gibt einen von einem Funktionstyp zurückgegebenen Typ an.",
        "Documentation.LongDescription": "Gibt einen von einer Funktion <code>type</code> zurückgegebenen Typ an.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie den Rückgabetyp von <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Gibt 'true' zurück, wenn ein Typ NULL-Werte zulässt; andernfalls 'false'.",
        "Documentation.LongDescription": "Gibt <code>true</code> zurück, wenn ein Typ ein <code>Nullable</code>-Typ ist, der NULL-Werte zulässt; andernfalls <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Bestimmen Sie, ob <code>number</code> NULL-Werte zulässt.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Bestimmen Sie, ob <code>type nullable number</code> NULL-Werte zulässt.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Gibt zurück, ob ein Datensatztyp geöffnet ist.",
        "Documentation.LongDescription": "Gibt einen <code>logischen</code> Wert zurück, der angibt, ob ein Datensatz <code>type</code> geöffnet ist.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Bestimmen Sie, ob der Datensatz <code>type [ A = number, ...]</code> geöffnet ist.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Gibt einen Elementtyp aus einem Listentyp zurück.",
        "Documentation.LongDescription": "Gibt einen Elementtyp aus einer Liste <code>type</code> zurück.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie einen Elementtyp in der Liste <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Gibt von einem Typ den Typ zurück, der keine NULL-Werte zulässt.",
        "Documentation.LongDescription": "Gibt von <code>type</code> den Typ zurück, der keine <code>NULL-Werte</code> zulässt.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Geben Sie den Typ von <code>type nullable number</code> zurück, der keine NULL-Werte zulässt.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Gibt eine geöffnete Version des angegebenen Datensatztyps zurück (bzw. denselben Typ, wenn dieser bereits geöffnet ist).",
        "Documentation.LongDescription": "Gibt eine geöffnete Version des angegebenen <code>Datensatzes</code> <code>type</code> zurück (bzw. denselben Typ, wenn dieser bereits geöffnet ist).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Erstellen Sie eine geöffnete Version von <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Gibt einen Datensatz zurück, der die Felder eines Datensatztyps beschreibt, wobei jedes Feld des zurückgegebenen Datensatztyps einen entsprechenden Namen und Wert aufweist.",
        "Documentation.LongDescription": "Gibt einen Datensatz zurück, der die Felder eines Datensatzes <code>type</code> beschreibt. Jedes Feld des zurückgegebenen Datensatztyps weist einen entsprechenden Namen und Wert in der Form des Datensatzes <code>[ Type = type, Optional = logical ]</code> auf.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Suchen Sie den Namen und Wert des Datensatzes <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Gibt die möglicherweise leere Liste mit Schlüsseln für den angegebenen Tabellentyp zurück.",
        "Documentation.LongDescription": "Gibt die möglicherweise leere Liste mit Schlüsseln für den angegebenen Tabellentyp zurück.<br>\r\n    <br>\r\n    Jeder Schlüssel wird mithilfe eines Datensatzes in der folgenden Form definiert:\r\n    <ul>\r\n      <li>\r\n        <code>Spalten</code>: eine Liste der Spaltennamen, die den Schlüssel definieren.\r\n      </li>\r\n      <li>\r\n        <code>Primär</code>: <code>true</code>, wenn der Schlüssel der Primärschlüssel der Tabelle ist; andernfalls <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Gibt die Schlüsselinformationen für einen Tabellentyp zurück.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Gibt den Zeilentyp des Tabellentyps zurück.",
        "Documentation.LongDescription": "Gibt den Zeilentyp des angegebenen Tabellentyps zurück. Das Ergebnis ist immer ein Datensatztyp.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Gibt die Zeilentypinformationen für eine einfache Tabelle zurück.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Gibt die Union einer Liste von Typen zurück.",
        "Documentation.LongDescription": "Gibt die Vereinigungsmenge der Typen in \"<code>types</code>\" zurück.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Datensatz als URI-Abfragezeichenfolge zusammenstellen.",
        "Documentation.LongDescription": "Stellen Sie den Datensatz '<code>query</code>' als URI-Abfragezeichenfolge zusammen, und kommentieren Sie Zeichen dabei wie erforderlich aus.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kodieren einer Abfragezeichenfolge, die Sonderzeichen enthält.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Codiert Sonderzeichen entsprechend RFC 3986.",
        "Documentation.LongDescription": "Codiert Sonderzeichen in der Eingabe '<code>data</code>' entsprechend den RFC 3986-Richtlinien.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codieren der Sonderzeichen in \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Gibt die Teile des absoluten Eingabe-URI als Datensatz zurück.",
        "Documentation.LongDescription": "Gibt die Teile der Eingabe \"<code>absoluteUri</code>\" als Datensatz mit Werten wie Schema, Host, Port, Pfad, Abfrage, Fragment, Benutzername und Kennwort zurück.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Ermittelt die Teile des absoluten URI \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Decodiert eine als Prozentwert codierte Zeichenfolge.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Hiermit wird die URL für Ihren Azure DevOps Analytics-Dienst eingegeben.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Hiermit werden die über die Azure DevOps Analytics-Dienst-URL heruntergeladenen Inhalte als Binärwert zurückgegeben. Diese Funktion verwendet unterschiedliche Anmeldeinformationen für verschiedene Organisationen."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Hiermit wird die URL für Ihren Azure DevOps Analytics-Dienst eingegeben.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Hiermit werden die über die Azure DevOps Analytics-Dienst-URL heruntergeladenen Inhalte als Binärwert zurückgegeben. Diese Funktion verwendet globale Anmeldeinformationen für alle zugänglichen Organisationen."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Ausdruck für alternative Abfragepläne.",
        "Documentation.LongDescription": "Ausdruck für alternative Abfragepläne innerhalb eines Abfrageplanausdrucks, der über \"Value.Expression(Value.Optimize(...))\" abgerufen wurde. Nicht für andere Verwendungszwecke vorgesehen.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Gibt eine abstrakte Syntaxstruktur (Abstract Syntax Tree, AST) zurück, die den Ausdruck des Werts darstellt.",
        "Documentation.LongDescription": "Gibt eine abstrakte Syntaxstruktur (Abstract Syntax Tree, AST) zurück, die den Ausdruck des Werts darstellt.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Erstellt einen stark typisierten Wert auf der Grundlage einer Textdarstellung.",
        "Documentation.LongDescription": "Decodiert einen Wert aus einer Textdarstellung (<code>text</code>) und interpretiert ihn als Wert mit einem geeigneten Typ.\r\n    <code>Value.FromText</code> akzeptiert einen Textwert und gibt eine Zahl, einen logischen Wert, einen NULL-Wert, einen datetime-Wert, einen duration-Wert oder einen Textwert zurück. Der leere Textwert wird als NULL-Wert interpretiert.\r\n    Optional kann auch ein Element vom Typ \"<code>culture</code>\" angegeben werden (Beispiel: \"de-DE\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Gibt einen Datensatz mit den Metadaten der Eingabe zurück.",
        "Documentation.LongDescription": "Gibt einen Datensatz mit den Metadaten der Eingabe zurück.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Signalisiert \"Value.Expression\" die Rückgabe des optimierten Ausdrucks für einen Wert.",
        "Documentation.LongDescription": "Wenn \"<code>value</code>\" eine optimierbare Abfrage darstellt, gibt diese Funktion bei Verwendung in \"Value.Expression\" an, dass der optimierte Ausdruck zurückgegeben werden soll. Andernfalls wird \"<code>value</code>\" ohne Auswirkung übergeben.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Entfernt die Metadaten aus der Eingabe.",
        "Documentation.LongDescription": "Entfernt die Metadaten aus der Eingabe.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Gibt den Typ des angegebenen Werts zurück.",
        "Documentation.LongDescription": "Gibt den Typ des angegebenen Werts zurück.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.LongDescription": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.LongDescription": "Diese Funktion ist nur für den internen Gebrauch bestimmt.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.LongDescription": "Diese Funktion ist nur für die interne Verwendung vorgesehen.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Gibt den HTML-Code für die angegebene URL, wie von einem Webbrowser angezeigt, zurück.",
        "Documentation.LongDescription": "Gibt den HTML-Code für die angegebene <code>url</code> zurück, wie von einem Webbrowser angezeigt. Ein optionaler Datensatzparameter, <code>options</code>, kann zur Angabe zusätzlicher Eigenschaften angegeben werden. Der Datensatz kann die folgenden Felder enthalten:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: Wenn die Zielwebsite über einen API-Schlüssel verfügt, kann dieser Parameter verwendet werden, um den Namen (nicht den Wert) des Schlüsselparameters anzugeben, der in der URL verwendet werden muss. Der tatsächliche Schlüsselwert wird in der Anmeldeinformation angegeben.</li>\r\n        <li><code>WaitFor</code>: Gibt eine Bedingung an, auf die vor dem Herunterladen des HTML-Codes gewartet werden soll, zusätzlich zum Warten auf das Laden der Seite (was immer geschieht). Kann ein Datensatz sein, der Timeout- und/oder Selektor-Felder enthält.  Wenn nur ein Timeout angegeben ist, wartet die Funktion die angegebene Zeitspanne ab, bevor der HTML-Code heruntergeladen wird. Wenn sowohl ein Selektor als auch ein Timeout angegeben wird und das Timeout abläuft, bevor der Selektor auf der Seite vorhanden ist, wird ein Fehler ausgelöst. Wenn Selektor ohne Timeout angegeben wird, wird ein Standardtimeout von 30 Sekunden angewendet.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Datenzugriff",
        "Documentation.Examples": [
          {
            "Description": "Gibt den HTML-Code für https://microsoft.com zurück.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Gibt den HTML-Code für https://microsoft.com zurück, nachdem auf eine CSS-Auswahl gewartet wurde.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Gibt den HTML-Code für https://microsoft.com zurück, nachdem zehn Sekunden lang gewartet wurde.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Gibt den HTML-Code für https://microsoft.com zurück, nachdem für bis zu zehn Sekunden auf eine CSS-Auswahl gewartet wurde.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Gibt die unter der URL heruntergeladenen Inhalte im Binärformat zurück.",
        "Documentation.LongDescription": "Gibt die von <code>url</code> heruntergeladenen Inhalte als Binärdatei zurück. Ein optionaler Datensatzparameter (<code>options</code>) kann angegeben werden, um zusätzliche Eigenschaften anzugeben. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>Query</code> : F&#252;gen Sie der URL programmgesteuert Abfrageparameter hinzu, ohne sich um Escapezeichen Gedanken zu machen.</li>\r\n<li><code>ApiKeyName</code> : Wenn die Zielwebsite einen Hinweis auf einen API-Schl&#252;ssel umfasst, kann dieser Parameter verwendet werden, um den Namen (nicht den Wert) des Schl&#252;sselparameters anzugeben, der in der URL verwendet werden muss. Der tats&#228;chliche Schl&#252;sselwert wird in den Anmeldeinformationen angegeben.</li>\r\n<li><code>Headers</code> : Durch das Angeben dieses Werts als Datensatz werden zus&#228;tzliche Header f&#252;r eine HTTP-Anforderung bereitgestellt.</li>\r\n<li><code>Timeout</code> : Durch das Angeben dieses Werts als Dauer wird das Timeout f&#252;r eine HTTP-Anforderung ge&#228;ndert. Der Standardwert betr&#228;gt 100&#160;Sekunden.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Durch das Angeben dieses Wert als Liste werden die betreffenden HTTP-Headerschl&#252;ssel nicht in die Berechnung der Daten f&#252;r die Zwischenspeicherung einbezogen.</li>\r\n<li><code>IsRetry</code> : Durch das Angeben dieses logischen Werts als TRUE werden m&#246;glicherweise im Cache vorhandene Antworten beim Abrufen von Daten ignoriert.</li>\r\n<li><code>ManualStatusHandling</code> : Durch das Angeben dieses Werts als Liste wird eine integrierte Verarbeitung von HTTP-Anforderungen verhindert, deren Antwort einen dieser Statuscodes umfasst.</li>\r\n<li><code>RelativePath</code> : Durch das Angeben dieses Werts als Text wird dieser vor dem Ausf&#252;hren der Anforderung an die Basis-URL angef&#252;gt.</li>\r\n<li><code>Content</code> : Durch das Angeben dieses Werts wird die Webanforderung von GET in POST ge&#228;ndert. Hierbei wird der Wert der Option als Inhalt der POST-Anforderung verwendet.</li>\r\n</ul>\r\n\r\n    Die HTTP-Anforderung wird entweder als GET (wenn kein Inhalt angegeben wird) oder als POST (wenn Inhalt vorhanden ist) ausgeführt. POST-Anforderungen dürfen nur anonym ausgeführt werden.\r\n    <br>\r\n    Die Header der HTTP-Antwort sind als Metadaten für das binäre Ergebnis verfügbar. Außerhalb eines benutzerdefinierten Datenconnectors ist (aus Sicherheitsgründen) nur eine Teilmenge der Antwortheader verfügbar.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Hiermit werden die Inhalte von <code>\"https://bing.com/search?q=Power+Query\"</code> mithilfe der Optionen \"RelativePath\" und \"Query\" abgerufen. Diese Optionen können zum dynamischen Abfragen einer statischen Basis-URL verwendet werden.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Hiermit wird ein POST für eine URL ausgeführt, indem binäre JSON-Nutzdaten übergeben werden und die Antwort als JSON analysiert wird.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Stellen Sie eine Verbindung mit einer sicheren URL her, die einen Authentifizierungsschlüssel als Teil ihrer Abfragezeichenfolge akzeptiert. Anstatt den geheimen Schlüssel in M hart zu codieren (was ein Sicherheitsrisiko darstellen würde), \r\n    kann der Schlüssel sicher bereitgestellt werden, indem der Name (nicht sein Wert) in M angegeben wird, die Web-API-Authentifizierung ausgewählt und der Schlüsselwert als Teil der Web-API-Anmeldeinformationen eingegeben wird.\r\n    Bei dieser Verwendung generiert das folgende Beispiel eine Anforderung an <code>„https://contoso.com/api/customers/get?api_key=******“</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Gibt die von der URL heruntergeladenen HTTP-Header als Datensatzwert zurück.",
        "Documentation.LongDescription": "Gibt die von <code>url</code> heruntergeladenen Header als Datensatz zurück. Ein optionaler Datensatzparameter, <code>options</code>, kann angegeben werden, um zusätzliche Eigenschaften anzugeben. Der Datensatz kann die folgenden Felder enthalten:\r\n    <ul>\r\n<li><code>Query</code> : F&#252;gen Sie der URL programmgesteuert Abfrageparameter hinzu, ohne sich um Escapezeichen Gedanken zu machen.</li>\r\n<li><code>ApiKeyName</code> : Wenn die Zielwebsite einen Hinweis auf einen API-Schl&#252;ssel umfasst, kann dieser Parameter verwendet werden, um den Namen (nicht den Wert) des Schl&#252;sselparameters anzugeben, der in der URL verwendet werden muss. Der tats&#228;chliche Schl&#252;sselwert wird in den Anmeldeinformationen angegeben.</li>\r\n<li><code>Headers</code> : Durch das Angeben dieses Werts als Datensatz werden zus&#228;tzliche Header f&#252;r eine HTTP-Anforderung bereitgestellt.</li>\r\n<li><code>Timeout</code> : Durch das Angeben dieses Werts als Dauer wird das Timeout f&#252;r eine HTTP-Anforderung ge&#228;ndert. Der Standardwert betr&#228;gt 100&#160;Sekunden.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Durch das Angeben dieses Wert als Liste werden die betreffenden HTTP-Headerschl&#252;ssel nicht in die Berechnung der Daten f&#252;r die Zwischenspeicherung einbezogen.</li>\r\n<li><code>IsRetry</code> : Durch das Angeben dieses logischen Werts als TRUE werden m&#246;glicherweise im Cache vorhandene Antworten beim Abrufen von Daten ignoriert.</li>\r\n<li><code>ManualStatusHandling</code> : Durch das Angeben dieses Werts als Liste wird eine integrierte Verarbeitung von HTTP-Anforderungen verhindert, deren Antwort einen dieser Statuscodes umfasst.</li>\r\n<li><code>RelativePath</code> : Durch das Angeben dieses Werts als Text wird dieser vor dem Ausf&#252;hren der Anforderung an die Basis-URL angef&#252;gt.</li>\r\n</ul>\r\n\r\n    Die HTTP-Anforderung wird mit der Methode HEAD ausgeführt. Außerhalb eines benutzerdefinierten Datenconnectors ist nur eine Teilmenge der Antwortheader verfügbar (aus Sicherheitsgründen).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Rufen Sie die HTTP-Header für <code>\"https://bing.com/search?q=Power+Query\"</code> mithilfe der Optionen \"RelativePath\" und \"Query\" ab.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Der Autorisierungskontext, anhand dessen eine Bedingung für den Zugriffssteuerungseintrag (ACE) ausgewertet wird.",
        "Documentation.LongDescription": "Der Autorisierungskontext, anhand dessen eine Bedingung für den Zugriffssteuerungseintrag (ACE) ausgewertet wird.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Eine Tabelle mit Zugriffssteuerungseinträgen (ACEs).",
        "Documentation.LongDescription": "Eine geordnete Tabelle mit Zugriffssteuerungseinträgen (ACEs), die Autorisierungsregeln darstellen. Jede Zeile wird anhand des aktuellen Berechtigungskontexts (der Reihenfolge nach) ausgewertet, und die erste Zeile, für die der Ausdruck <code>Condition</code> TRUE zurückgibt, legt die angewendete Regel fest. Die Spalte <code>Action</code> stellt die Art der Aktion dar, für die die Regel gilt. Die Spalte <code>AccessControlKind</code> bestimmt, ob der Zugriff für die Aktion erteilt oder verweigert werden soll.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Gibt die Art der Zugriffsteuerung an.",
        "Documentation.LongDescription": "Gibt die Art der Zugriffsteuerung an.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Der Typ, der alle Werte darstellt.",
        "Documentation.LongDescription": "Der Typ, der alle Werte darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Der Typ, der für alle Binärwerte steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Binärwerte steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Gibt den Typ für die binäre Codierung an.",
        "Documentation.LongDescription": "Gibt den Typ für die binäre Codierung an.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Gibt an, wie häufig das Vorkommen des Elements in der Gruppe erwartet wird.",
        "Documentation.LongDescription": "Gibt an, wie häufig das Vorkommen des Elements in der Gruppe erwartet wird.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Beschreibt den Typ der auszuführenden Pufferung.",
        "Documentation.LongDescription": "Beschreibt den Typ der auszuführenden Pufferung.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Der Typ, der für alle Bytes steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Bytes steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Gibt die Bytereihenfolge an.",
        "Documentation.LongDescription": "Gibt die Bytereihenfolge an.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Der Typ, der für alle Zeichen steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Zeichen steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Gibt den Typ der Komprimierung an.",
        "Documentation.LongDescription": "Gibt den Typ der Komprimierung an.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Gibt die Signifikanz von Anführungszeichen in CSV-Dokumenten an.",
        "Documentation.LongDescription": "Gibt die Signifikanz von Anführungszeichen in CSV-Dokumenten an.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Der Typ, der den Währungswert darstellt.",
        "Documentation.LongDescription": "Der Typ, der den Währungswert darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Der Typ, der für alle Datumswerte steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Datumswerte steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Der Typ, der für alle Datums- und Uhrzeitwerte ohne zugeordnete Zeitzone steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Datums- und Uhrzeitwerte ohne zugeordnete Zeitzone steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Der Typ, der für alle Datums- und Uhrzeitwerte relativ zu einer Zeitzone steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Datums- und Uhrzeitwerte relativ zu einer Zeitzone steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Gibt einen Tag der Woche an.",
        "Documentation.LongDescription": "Gibt einen Tag der Woche an.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Der Typ, der die Festkommadezimalzahl darstellt.",
        "Documentation.LongDescription": "Der Typ, der die Festkommadezimalzahl darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Der Typ, der das Gleitkommazahlenformat mit doppelter Genauigkeit darstellt.",
        "Documentation.LongDescription": "Der Typ, der das Gleitkommazahlenformat mit doppelter Genauigkeit darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Der Typ, der für alle duration-Werte steht.",
        "Documentation.LongDescription": "Der Typ, der für alle duration-Werte steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Gibt die erwartete Aktion für zusätzliche Werte in einer Zeile an, die mehr Spalten als die erwartete Anzahl enthält.",
        "Documentation.LongDescription": "Gibt die erwartete Aktion für zusätzliche Werte in einer Zeile an, die mehr Spalten als die erwartete Anzahl enthält.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Der Typ, der für alle Funktionen steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Funktionen steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Gibt die Art der Gruppierung an.",
        "Documentation.LongDescription": "Mehrere lokale Gruppen können mit demselben Schlüsselwert erstellt werden, aber nur eine einzelne globale Gruppe wird für einen bestimmten Schlüsselwert erstellt.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Der Typ, der einen GUID-Wert darstellt.",
        "Documentation.LongDescription": "Der Typ, der einen GUID-Wert darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Eine Identität repräsentiert einen Benutzer, eine Gruppe, ein Gerät oder ein anderes identifizierbares Element.",
        "Documentation.LongDescription": "Eine Identität repräsentiert einen Benutzer, eine Gruppe, ein Gerät oder ein anderes identifizierbares Element.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Definiert einen Bereich, in dem Identitäten erstellt und verglichen werden.",
        "Documentation.LongDescription": "Definiert einen Bereich, in dem Identitäten erstellt und verglichen werden.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Der Typ, der einen signierten ganzzahligen 16-Bit-Wert darstellt.",
        "Documentation.LongDescription": "Der Typ, der einen signierten ganzzahligen 16-Bit-Wert darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Der Typ, der einen signierten ganzzahligen 32-Bit-Wert darstellt.",
        "Documentation.LongDescription": "Der Typ, der einen signierten ganzzahligen 32-Bit-Wert darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Der Typ, der einen signierten ganzzahligen 64-Bit-Wert darstellt.",
        "Documentation.LongDescription": "Der Typ, der einen signierten ganzzahligen 64-Bit-Wert darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Der Typ, der einen signierten ganzzahligen 8-Bit-Wert darstellt.",
        "Documentation.LongDescription": "Der Typ, der einen signierten ganzzahligen 8-Bit-Wert darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Gibt den Join-Algorithmus an, der im Join-Vorgang verwendet werden soll.",
        "Documentation.LongDescription": "Gibt den Join-Algorithmus an, der im Join-Vorgang verwendet werden soll.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Gibt die Art des Join-Vorgangs an.",
        "Documentation.LongDescription": "Gibt die Art des Join-Vorgangs an.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Hiermit wird die linke oder rechte Tabelle für eine Verknüpfung angegeben.",
        "Documentation.LongDescription": "Hiermit wird die linke oder rechte Tabelle für eine Verknüpfung angegeben.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Beschreibt den Typ der Begrenzungsklausel, die von dem von dieser Datenquelle unterstützten SQL-Dialekt verwendet wird.",
        "Documentation.LongDescription": "Beschreibt den Typ der Begrenzungsklausel, die von dem von dieser Datenquelle unterstützten SQL-Dialekt verwendet wird.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Der Typ, der für alle Listen steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Listen steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Der Typ, der für alle logischen Werte steht.",
        "Documentation.LongDescription": "Der Typ, der für alle logischen Werte steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Gibt die erwartete Aktion für fehlende Werte in einer Zeile an, die weniger Spalten als die erwartete Anzahl enthält.",
        "Documentation.LongDescription": "Gibt die erwartete Aktion für fehlende Werte in einer Zeile an, die weniger Spalten als die erwartete Anzahl enthält.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Der Typ, der für NULL steht.",
        "Documentation.LongDescription": "Der Typ, der für NULL steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Der Typ, der für alle Zahlen steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Zahlen steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Gibt die Art der Werte an, die von einem OData-Dienst ausgelassen werden können.",
        "Documentation.LongDescription": "Gibt die Art der Werte an, die von einem OData-Dienst ausgelassen werden können.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Gibt das Vorkommen eines Elements in einer Sequenz an.",
        "Documentation.LongDescription": "Gibt das Vorkommen eines Elements in einer Sequenz an.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Gibt die Richtung der Sortierung an.",
        "Documentation.LongDescription": "Gibt die Richtung der Sortierung an.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Der Typ, der ein Textkennwort darstellt.",
        "Documentation.LongDescription": "Der Typ, der ein Textkennwort darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Der Typ, der den Prozentwert darstellt.",
        "Documentation.LongDescription": "Der Typ, der den Prozentwert darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Gibt den Typ des Perzentilmodus an.",
        "Documentation.LongDescription": "Gibt den Typ des Perzentilmodus an.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Gibt die Genauigkeit des Vergleichs an.",
        "Documentation.LongDescription": "Gibt die Genauigkeit des Vergleichs an.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Gibt den Stil der Anführungszeichen an.",
        "Documentation.LongDescription": "Gibt den Stil der Anführungszeichen an.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Gibt den Typ der Rangfolge an.",
        "Documentation.LongDescription": "Gibt den Typ der Rangfolge an.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Der Typ, der für alle Datensätze steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Datensätze steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Gibt an, ob die Indizierung vom Start oder vom Ende der Eingabe aus erfolgen soll.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Gibt die Rundungsrichtung an, wenn eine Verbindung zwischen den möglichen Zahlen besteht, auf die gerundet wird.",
        "Documentation.LongDescription": "Gibt die Rundungsrichtung an, wenn eine Verbindung zwischen den möglichen Zahlen besteht, auf die gerundet wird.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Gültige Optionen für die SAP Business Warehouse-Option für den Ausführungsmodus.",
        "Documentation.LongDescription": "Gültige Optionen für die SAP Business Warehouse-Option für den Ausführungsmodus.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Gültige Verteilungsoptionen für SAP HANA.",
        "Documentation.LongDescription": "Gültige Verteilungsoptionen für SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Ein Bereichsoperator für SAP HANA-Bereichseingabeparameter.",
        "Documentation.LongDescription": "Ein Bereichsoperator für SAP HANA-Bereichseingabeparameter.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Der Typ, der das Gleitkommazahlenformat mit einfacher Genauigkeit darstellt.",
        "Documentation.LongDescription": "Der Typ, der das Gleitkommazahlenformat mit einfacher Genauigkeit darstellt.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Das Protokoll, das zum Herstellen einer Verbindung mit einer Instanz von Spark verwendet werden soll.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Der Typ, der für alle Tabellen steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Tabellen steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Der Typ, der für alle Textwerte steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Textwerte steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Gibt den Textcodierungstyp an.",
        "Documentation.LongDescription": "Gibt den Textcodierungstyp an.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Der Typ, der für alle time-Werte steht.",
        "Documentation.LongDescription": "Der Typ, der für alle time-Werte steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Gibt die Ablaufverfolgungsebene an.",
        "Documentation.LongDescription": "Gibt die Ablaufverfolgungsebene an.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Der Typ, der für alle Typen steht.",
        "Documentation.LongDescription": "Der Typ, der für alle Typen steht.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Der Typ, der einen Text-URI repräsentiert.",
        "Documentation.LongDescription": "Der Typ, der einen Text-URI repräsentiert.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Gibt eine HTTP-Methode an.",
        "Documentation.LongDescription": "Gibt eine HTTP-Methode an.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
