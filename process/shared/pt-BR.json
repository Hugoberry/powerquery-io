{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Retorna uma representação estrutural de um banco de dados do Access.",
        "Documentation.LongDescription": "Retorna uma representação estrutural de um banco de dados do Access, <code>database</code>. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n</ul>\r\n\r\n    O parâmetro do registro é especificado como [option1 = value1, option2 = value2...], por exemplo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Retorna os bancos de dados do Analysis Services em um host especificado.",
        "Documentation.LongDescription": "Retorna bancos de dados em uma instância do Analysis Services, <code>server</code>. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Um valor l&#243;gico que indica se os tipos especificados no modelo multidimensional ou tabular ser&#227;o usados para os tipos das colunas de medi&#231;&#227;o adicionadas. Quando definido como false, o tipo &quot;number&quot; ser&#225; usado para todas as colunas de medi&#231;&#227;o. O valor padr&#227;o para essa op&#231;&#227;o &#233; false.</li>\r\n<li><code>Culture</code> : Um nome de cultura que especifica a cultura para os dados. Isso corresponde &#224; propriedade da cadeia de conex&#227;o &#39;ID de Localidade&#39;.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>SubQueries</code> : Um n&#250;mero (0, 1 ou 2) que define o valor da propriedade &quot;SubQueries&quot; na cadeia de conex&#227;o. Essa op&#231;&#227;o controla o comportamento de membros calculados em subsele&#231;&#245;es ou subcubos. (O valor padr&#227;o &#233; 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Cubos do AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Dados do cubo de importação/DirectQuery de um AtScale.",
        "Documentation.LongDescription": "\r\nRetorna dados de cubo do AtScale no servidor <code>server</code>. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: um valor lógico que indica se os tipos especificados no modelo de tabela ou multidimensional serão usados para os tipos das colunas de medida adicionadas. Quando definido como falso, o tipo \"número\" será usado para todas as colunas de medida. O valor padrão dessa opção é falso</li>\r\n        <li><code>CommandTimeout</code>: uma duração (em segundos) que controla por quanto tempo a consulta do servidor pode ser executada antes de ser cancelada. O valor padrão depende do driver. </li>\r\n        <li><code>ConnectionTimeout</code>: uma duração (em segundos) que controla quanto tempo aguardar antes de anular uma tentativa de conectar-se com o servidor. O valor padrão depende do driver. </li>\r\n\r\n</ul>\r\nO parâmetro de registro é especificado como [option1 = value1, option2 = value2...].",
        "Documentation.Examples": {
          "Description": "Lista os dados do cubo em um cubo do AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importar dados do Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importa dados da sua instância do Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Retorna uma tabela de informações dos Storm Events",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Uma tabela com Eventos do Storm do banco de dados de \"Amostras\" no cluster de \"ajuda\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Insira a URL do Serviço Analítico do Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Retorna os conteúdos baixados da URL do Serviço Analítico do Azure DevOps como um valor binário. Essa função usa credenciais diferentes para organizações diferentes."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Feed do Azure DevOps Services",
        "Documentation.DisplayName": "Feed do Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Retorna uma tabela de feeds OData oferecidos pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Digite a URL do ponto de extremidade da API REST do Azure Enterprise associada ao seu registro",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Retorna uma lista de relatórios e meses disponíveis da API do Azure Enterprise",
        "Documentation.Name": "Importar dados do Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Usando a função AzureEnterprise.Tables e navegando até um determinado valor para obter os resultados.",
            "Code": "Fonte\r\n    de let = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Sumário = Fonte{[Key=\"Contents\"]}[Data]\r\nem\r\n    Sumário",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "See https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli for starter query samples.",
        "Documentation.Examples": [
          {
            "Description": "Return a table with query results of user query 'resources'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Lista as tabelas em uma instância do Azure Spark.",
        "Documentation.LongDescription": "Lista as tabelas em uma instância do Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Lista as tabelas em uma instância do Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Retorna uma tabela navegacional contendo os contêineres encontrados na conta especificada de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Retorna uma tabela de navegação que contém uma linha para cada contêiner encontrado na URL da conta, <code>account</code>, de um cofre do Armazenamento do Azure. Cada linha contém um link para os blobs do contêiner. É possível especificar <code>options</code> para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>BlockSize</code> : O n&#250;mero de bytes a serem lidos antes de aguardar o consumidor de dados. O valor padr&#227;o &#233; 4 MB.</li>\r\n<li><code>RequestSize</code> : O n&#250;mero de bytes cuja leitura ser&#225; tentada em uma &#250;nica solicita&#231;&#227;o HTTP para o servidor. O valor padr&#227;o &#233; 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : A op&#231;&#227;o ConcurrentRequests d&#225; suporte ao download mais r&#225;pido de dados por meio da especifica&#231;&#227;o do n&#250;mero de solicita&#231;&#245;es a serem feitas em paralelo, ao custo da utiliza&#231;&#227;o de mem&#243;ria. A mem&#243;ria necess&#225;ria &#233; (ConcurrentRequest * RequestSize). O valor padr&#227;o &#233; 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Retorna uma tabela navegacional contendo os documentos localizados no contêiner especificado e nas suas subpastas do Azure Data Lake Storage.",
        "Documentation.LongDescription": "Retorna uma tabela de navegação que contém os documentos localizados no contêiner especificado e nas suas subpastas na URL da conta, <code>endpoint</code>, de um sistema de arquivos do Azure Data Lake Storage. É possível especificar <code>options</code> para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>BlockSize</code> : O n&#250;mero de bytes a serem lidos antes de aguardar o consumidor de dados. O valor padr&#227;o &#233; 4 MB.</li>\r\n<li><code>RequestSize</code> : O n&#250;mero de bytes cuja leitura ser&#225; tentada em uma &#250;nica solicita&#231;&#227;o HTTP para o servidor. O valor padr&#227;o &#233; 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : A op&#231;&#227;o ConcurrentRequests d&#225; suporte ao download mais r&#225;pido de dados por meio da especifica&#231;&#227;o do n&#250;mero de solicita&#231;&#245;es a serem feitas em paralelo, ao custo da utiliza&#231;&#227;o de mem&#243;ria. A mem&#243;ria necess&#225;ria &#233; (ConcurrentRequest * RequestSize). O valor padr&#227;o &#233; 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que controla se os arquivos s&#227;o retornados em um modo de exibi&#231;&#227;o de diret&#243;rio semelhante ao de &#225;rvore ou em uma lista plana. O valor padr&#227;o &#233; false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Retorna uma tabela navegacional com as tabelas encontradas na conta especificada de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Retorna uma tabela de navegação contendo uma linha para cada tabela encontrada na URL da conta, <code>account</code>, de um cofre de armazenamento do Azure. Cada linha contém um link para a tabela do Azure. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar mais propriedades. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>Timeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que a solicita&#231;&#227;o para o servidor seja abandonada. O valor padr&#227;o &#233; espec&#237;fico da origem.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight no AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Dados e análises Bloomberg  v1.1.3",
        "Documentation.Description": "Utilizado para obter dados Bloomberg"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Esta função não está disponível porque exige o .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (Herdado)",
        "Documentation.Caption": "Common Data Service (Herdado)",
        "Documentation.LongDescription": "Conecte-se à instância do seu Common Data Service (Dynamics 365 e PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Retorna o conteúdo do documento CSV como uma tabela.",
        "Documentation.LongDescription": "Retorna o conteúdo do documento CSV como uma tabela.\r\n    <ul>\r\n      <li>\r\n         <code>columns</code> pode ser nulo, o número de colunas, uma lista de nomes de colunas, um tipo de tabela ou um registro de opções.\r\n      </li>\r\n      <li>\r\n         <code>delimiter</code> pode ser um único caractere, uma lista de caracteres ou o valor <code>\"\"</code>, que indica que as linhas devem ser divididas por caracteres de espaço em branco consecutivos. Padrão: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Consulte <code>ExtraValues.Type</code> para obter os valores suportados de <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n         <code>encoding</code> especifica o tipo de codificação de texto.\r\n      </li>\r\n    </ul>\r\n\r\n    Se um registro for especificado para <code>columns</code> (e <code>delimiter</code>, <code>extraValues</code>, e <code>encoding</code>são nulos), os seguintes campos de registro podem ser fornecidos:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: O delimitador da coluna. Padrão: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: pode ser nulo, o número de colunas, uma lista de nomes de colunas ou um tipo de tabela. Se o número de colunas for menor que o número encontrado na entrada, as colunas adicionais serão ignoradas. Se o número de colunas for maior que o número encontrado na entrada, as colunas adicionais serão nulas. Quando não especificado, o número de colunas será determinado pelo que for encontrado na entrada.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: A codificação de texto do arquivo. Padrão: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: especifica como as aspas são tratadas.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (padrão): as aspas em um campo são significativas apenas imediatamente após o delimitador.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: as aspas em um campo são sempre significativas, independentemente de onde aparecem.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Especifica como as quebras de linha entre aspas são tratadas.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (padrão): As quebras de linha entre aspas são tratadas como parte dos dados, não como o final da linha atual.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Todas as quebras de linha são tratadas como o fim da linha atual, mesmo quando ocorrem dentro de um valor entre aspas.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Processa texto CSV com cabeçalhos de coluna",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Retorna a tabela que contém o conjunto de dimensões disponíveis.",
        "Documentation.LongDescription": "Retorna a tabela que contém o conjunto de dimensões disponíveis no <code>cube</code>. Cada dimensão é uma tabela que contém um conjunto de atributos de dimensão, e cada atributo de dimensão é representado como uma coluna na tabela de dimensão. As dimensões podem ser expandidas no cubo usando Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Retorna uma árvore de tabelas aninhada que representa a hierarquia da pasta de exibição dos objetos (por exemplo, dimensões e medidas).",
        "Documentation.LongDescription": "Retorna uma árvore de tabelas aninhada que representa a hierarquia de pastas de exibição dos objetos (por exemplo, dimensões e medidas) disponíveis para uso no <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Retorna uma tabela contendo o conjunto de propriedades de medida disponíveis que são expandidas no cubo.",
        "Documentation.LongDescription": "Retorna uma tabela contendo o conjunto de propriedades disponíveis para medidas que são expandidas no cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Retorna a tabela que contém o conjunto de medidas disponíveis.",
        "Documentation.LongDescription": "Retorna a tabela que contém o conjunto de medidas disponíveis no <code>cube</code>.\r\n    Cada medida é representada como uma função. As medidas podem ser aplicadas ao cubo usando Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Retorna uma tabela contendo o conjunto de parâmetros que pode ser aplicado ao cubo.",
        "Documentation.LongDescription": "Retorna uma tabela contendo o conjunto de parâmetros que pode ser aplicado a <code>cube</code>. Cada parâmetro é uma função que pode ser invocada para obter <code>cube</code> com o parâmetro e os argumentos aplicados.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Retorna uma tabela que contém o conjunto de propriedades disponíveis para dimensões expandidas no cubo.",
        "Documentation.LongDescription": "Retorna uma tabela que contém o conjunto de propriedades disponíveis para dimensões expandidas no cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Insira a URL da sua conta do Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada pasta e arquivo localizados na <code>URL</code> do Azure Data Lake Storage Gen1. Cada linha contém as propriedades da pasta ou do arquivo e um link para o seu conteúdo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Insira a URL da sua conta do Azure Data Lake Storage.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada arquivo localizado na <code>URL</code> do Azure Data Lake Storage Gen1. Cada linha contém as propriedades do arquivo e um link para o seu conteúdo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (API do SQL)",
        "Documentation.Description": "Insira a URL de uma conta do Azure Cosmos DB.",
        "Documentation.LongDescription": "Retorna uma tabela de bancos de dados do Azure Cosmos DB em <code>URL</code>. Em vez disso, se o <code>database</code> for especificado, uma tabela de coleções será retornada. Além disso, se o campo <code>Query</code> for especificado no registro <code>options</code>, os registros dos resultados da consulta em execução no banco de dados especificado e/ou na coleção serão retornados."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Insira a URL do ponto de extremidade de serviço do OData do Dynamics 365 Business Central (local).",
        "Documentation.DisplayName": "Central do Microsoft Dynamics 365 Business (local)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Central do Microsoft Dynamics 365 Business (local)",
        "Documentation.LongDescription": "Retorna uma tabela com os dados relevantes do Dynamics 365 Business Central (local). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Insira a URL do ponto de extremidade de serviço do Dynamics NAV OData.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Retorna uma tabela com os dados relevantes do Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Retorna os cubos em uma instância do Essbase agrupados por servidor Essbase.",
        "Documentation.LongDescription": "Retorna uma tabela de cubos agrupados por servidor Essbase de uma instância do Essbase no servidor do APS <code>url</code>. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Retorna o conteúdo da pasta de trabalho do Excel.",
        "Documentation.LongDescription": "Retorna o conteúdo da pasta de trabalho do Excel.\r\n    <ul>\r\n     <li> O <code>useHeaders</code> pode ser nulo, um valor lógico (true/false) que indica se a primeira linha de cada tabela retornada deve ser tratada como um cabeçalho ou um registro de opções.  Padrão: false.</li>\r\n     <li> O <code>delayTypes</code> pode ser nulo ou um valor lógico (true/false) que indica se as colunas de cada tabela retornada devem ser deixadas sem tipo. Padrão: false.</li>\r\n    </ul>\r\n\r\n    Se um registro é especificado para <code>useHeaders</code> (e <code>delayTypes</code> é nulo), os seguintes campos de registro podem ser fornecidos:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: pode ser nulo ou um valor lógico (true/false) que indica se a primeira linha de cada tabela retornada deve ser tratada como um cabeçalho. Padrão: false.</li>\r\n     <li> <code>DelayTypes</code>: pode ser nulo ou um valor lógico (true/false) que indica se as colunas de cada tabela retornada devem ser deixadas sem tipo. Padrão: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: pode ser nulo ou um valor lógico (true/false) que indica se a área de uma planilha que contém dados deve ser inferida pela leitura da própria planilha, em vez da leitura dos metadados de dimensões do arquivo. Isso pode ser útil em casos em que os metadados de dimensões estão incorretos. Observe que essa opção só tem suporte para arquivos Open XML do Excel, não para arquivos herdados do Excel. Padrão: false.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Retornar o conteúdo de Sheet1 de uma pasta de trabalho do Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Retorna uma tabela que contém as propriedades e o conteúdo dos arquivos e das pastas encontrados na pasta especificada.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada pasta e arquivo encontrado na pasta <code>path</code>. Cada linha contém propriedades da pasta ou arquivo e um link para seu conteúdo. O parâmetro <code>options</code> é atualmente destinado apenas para uso interno.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Retorna uma tabela contendo as propriedades e o conteúdo dos arquivos encontrados na pasta especificada e respectivas subpastas.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada arquivo encontrado na pasta <code>path</code> e todas as suas subpastas. Cada linha contém propriedades do arquivo e um link para seu conteúdo. O parâmetro <code>options</code> é atualmente destinado apenas para uso interno.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Importar dados de um banco de dados do Google BigQuery usando o Azure AD",
        "Documentation.LongDescription": "\r\n      Retorna uma tabela listando os projetos disponíveis no Google BigQuery usando o Azure AD para <code>ID do Projeto de Cobrança</code>. Um parâmetro de registro opcional, <code>opções</code>, pode ser especificado para controlar as seguintes opções:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: uma duração que controla quanto tempo esperar antes de abandonar uma tentativa de fazer uma conexão com o servidor. O valor padrão é o valor de Tempo Limite de Conexão ODBC.</li>\r\n        <li><code>CommandTimeout</code>: uma duração que controla por quanto tempo a consulta do lado do servidor pode ser executada antes de ser cancelada.</li>\r\n        <li><code>UseStorageApi</code>: Especifica se a API de Armazenamento do BigQuery deve ser usada para grandes conjuntos de resultados. O valor padrão é true para usar a API de armazenamento. Defina como falso para não usar a API de armazenamento</li>\r\n        <li><code>AudienceUri</code>: Este é o URI do público que o driver ODBC pode usar para suas solicitações de troca de token. Este campo deve ser um URI totalmente qualificado (i.e. //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread) onde pool_id é um nome globalmente exclusivo para identificar o pool de força de trabalho.</li>\r\n      </ul>\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Listar os projetos disponíveis no Google BigQuery usando o Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Planilhas Google",
        "Documentation.Caption": "Planilhas Google",
        "Documentation.Description": "Importar dados do GoogleSheets",
        "Documentation.LongDescription": "Importar dados do GoogleSheets"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Retorna uma tabela navegacional contendo os contêineres encontrados na conta especificada de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Retorna uma tabela de navegação contendo uma linha para cada contêiner encontrado na URL da conta, <code>account</code>, em um cofre de armazenamento do Azure. Cada linha contém um link para os blobs do contêiner.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Retorna uma tabela navegacional contendo os contêineres encontrados na conta especificada de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Retorna uma tabela navegacional contendo uma linha para cada contêiner encontrado na URL da conta, <code>account</code>, em um cofre de armazenamento do Azure. Cada linha contém um link para os blobs do contêiner.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Retorna uma tabela contendo as propriedades e o conteúdo dos arquivos e das pastas encontrados na pasta especificada de um sistema de arquivos Hadoop.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada pasta e arquivo encontrados na URL da pasta, <code>url</code>, em um sistema de arquivos Hadoop. Cada linha contém as propriedades da pasta ou do arquivo e um link para seu conteúdo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Retorna uma tabela contendo as propriedades e o conteúdo dos arquivos encontrados na pasta especificada e respectivas subpastas em um sistema de arquivos Hadoop.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada arquivo encontrado na URL da pasta, <code>url</code>, e respectivas subpastas em um sistema de arquivos Hadoop. Cada linha contém as propriedades do arquivo e um link para seu conteúdo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importar dados de um cluster do Impala",
        "Documentation.LongDescription": "Importar dados de um cluster do Impala <code>server</code>. Se uma porta não for especificada, a porta padrão 21050 será usada.",
        "Documentation.Examples": [
          {
            "Description": "Listar as tabelas em um cluster do Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Importa dados do Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importa dados da sua instância do Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Retorna uma tabela de informações dos Storm Events",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Uma tabela com Eventos do Storm do banco de dados de \"Amostras\" no cluster de \"ajuda\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "Navegador de Vendas do LinkedIn",
        "Documentation.LongDescription": "Navegador de Vendas do LinkedIn",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Retorna uma tabela com os dados de um ponto de extremidade do MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Faz uma chamada para a API do MailChimp e retorna o conjunto de dados resultante como uma tabela. Passa automaticamente por todos os resultados. O parâmetro opcional entityName pode ser usado para pontos de extremidade da API onde o ponto de extremidade raiz e o entityName principal na resposta JSON não correspondem.",
        "Documentation.Examples": [
          {
            "Description": "Efetua pull de uma tabela de dados do ponto de extremidade de listas da API do MailChimp.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Uma tabela com os dados da lista."
          },
          {
            "Description": "Efetua pull de uma tabela de dados do ponto de extremidade de pastas de campanha da API do MailChimp.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Uma tabela com os dados de pastas de campanha."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Retorna resultados brutos de resposta de um ponto de extremidade de API do MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Faz uma chamada para a API do MailChimp e retorna a resposta bruta.",
        "Documentation.Examples": [
          {
            "Description": "Retorna dados brutos do ponto de extremidade de API do MailChimp de relatórios/detalhes do clique para uma determinada campanha.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Dados brutos de detalhes de clique da campanha determinada."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy para Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Forneça funções de consulta avançada.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Forneça funções de consulta avançada.",
        "Documentation.Examples": [
          {
            "Description": "Supondo que hoje seja 15/6/2017, obter dados de resumos entre 1/5/2017 e 15/6/2017",
            "Code": "\r\n      permitir    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          resultado = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      no     \r\n          resultado\r\n    ",
            "Result": "A função retornará dados de resumos entre 1/5/2017 e 15/6/2017"
          },
          {
            "Description": "Supondo que hoje seja 15/6/2017, obter dados de resumos de abril de 2017.",
            "Code": "\r\n      permitir    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          resultado = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      no     \r\n          resultado\r\n    ",
            "Result": "A função retornará dados entre 1/4/2017 e 30/4/2017"
          },
          {
            "Description": "Supondo que hoje seja 15/6/2017, obter dados de resumos de abril de 2017 até o momento.",
            "Code": "\r\n      permitir    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          resultado = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      no     \r\n          resultado\r\n    ",
            "Result": "A função retornará dados entre 1/4/2017 e 15/6/2017"
          },
          {
            "Description": "Supondo que hoje seja 15/6/2017, obter dados de resumos de dezembro passado até este mês de fevereiro ",
            "Code": "\r\n      permitir    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          resultado = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      no     \r\n          resultado\r\n    ",
            "Result": "A função retornará dados entre 1/12/2016 e 28/2/2017"
          },
          {
            "Description": "Supondo que hoje seja 15/6/2017, obter encargos do marketplace para os últimos 18 meses",
            "Code": "\r\n      permitir    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          resultado = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      no     \r\n          resultado\r\n    ",
            "Result": "A função retornará dados entre 1/12/2015 e 15/6/2017"
          },
          {
            "Description": "Supondo que hoje seja 15/6/2017, obter encargos detalhados para junho de 2017 e maio de 2017",
            "Code": "\r\n      permitir    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          resultado = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      no     \r\n          resultado\r\n    ",
            "Result": "A função retornará dados entre 1/5/2017 e 15/6/2017"
          },
          {
            "Description": "Supondo que hoje seja 03/07/2017, obtenha encargos em detalhes para Julho de 2016",
            "Code": "\r\n      permitir  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          resultado = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      no     \r\n          resultado\r\n    ",
            "Result": "A função retornará dados entre 01/07/2016 e 31/07/2016"
          },
          {
            "Description": "Supondo que hoje seja 13/07/2017, obter resumos de saldo para os últimos 10 meses mais 13 dias deste mês",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "A função retornará dados entre 1/9/2016 e 13/7/2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Retorna uma tabela de tabelas SQL e exibições da fonte de dados ODBC. ",
        "Documentation.LongDescription": "Retorna uma tabela de tabelas SQL e exibições da fonte de dados ODBC especificada pela cadeia de conexão <code>connectionString</code>. <code>connectionString</code> pode ser texto ou um registo de pares de valores da propriedade. Os valores da propriedade podem ser texto ou número. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o &#233; 15 segundos.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Um valor l&#243;gico (true/false) que determina se as op&#231;&#245;es de cadeia de conex&#227;o compat&#237;veis com o SQL Server devem ser produzidas para a autentica&#231;&#227;o do Windows. O valor padr&#227;o &#233; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Retorna as tabelas e exibições SQL da cadeia de conexão fornecida.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Retorna uma tabela de tabelas e visualizações SQL da fonte de dados OLE DB.",
        "Documentation.LongDescription": "Retorna uma tabela das tabelas e visualizações do SQL da fonte de dados OLE DB especificada pela cadeia de conexão <code>connectionString</code>. O <code>connectionString</code> pode ser texto ou um registro de pares de valor da propriedade. Os valores da propriedade podem ser texto ou número. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter um dos seguintes dos campos:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se as tabelas agrupadas pelos respectivos nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; true).</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Um valor l&#243;gico (true/false) que determina se as op&#231;&#245;es de cadeia de conex&#227;o compat&#237;veis com o SQL Server devem ser produzidas para a autentica&#231;&#227;o do Windows. O valor padr&#227;o &#233; true.</li>\r\n</ul>\r\n\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"], por exemplo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Retorna uma tabela de tabelas e exibições SQL do Oracle database.",
        "Documentation.LongDescription": "Retorna uma tabela de tabelas e exibições SQL disponíveis em um Oracle database, no servidor <code>server</code>. Como alternativa, a porta pode ser especificada com o servidor, separada por uma vírgula. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n</ul>\r\n\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"], por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Retorna todas as tabelas encontradas em um arquivo PDF.",
        "Documentation.LongDescription": "Retorna tabelas encontradas em <code>pdf</code>. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>Implementation</code> : A vers&#227;o do algoritmo a ser usada ao identificar tabelas. As vers&#245;es antigas est&#227;o dispon&#237;veis apenas para compatibilidade com vers&#245;es anteriores, para evitar que consultas antigas sejam quebradas por atualiza&#231;&#245;es de algoritmo. A vers&#227;o mais recente sempre deve fornecer os melhores resultados. Os valores v&#225;lidos s&#227;o &quot;1,3&quot;, &quot;1,2&quot;, &quot;1,1&quot; ou nulo.</li>\r\n<li><code>StartPage</code> : Especifica a primeira p&#225;gina no intervalo de p&#225;ginas a ser analisado. Padr&#227;o: 1.</li>\r\n<li><code>EndPage</code> : Especifica a &#250;ltima p&#225;gina no intervalo de p&#225;ginas a ser analisado. Padr&#227;o: a &#250;ltima p&#225;gina do documento.</li>\r\n<li><code>MultiPageTables</code> : Controla se tabelas semelhantes em p&#225;ginas consecutivas ser&#227;o automaticamente combinadas em uma &#250;nica tabela. Padr&#227;o: true.</li>\r\n<li><code>EnforceBorderLines</code> : Controla se linhas de borda s&#227;o sempre impostas como limites da c&#233;lula (quando for true) ou simplesmente usadas como uma dica dentre muitas para determinar os limites da c&#233;lula (quando for false). Padr&#227;o: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Dados acessados",
        "Documentation.Examples": [
          {
            "Description": "Retorna as tabelas contidas em sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Insira a URL da sua conta do Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Retorna uma tabela que tem dados relevantes do Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þγŧћθŋ ŝćŗΐρŧ",
        "Documentation.Description": "Êжέсůтęş Ργŧнǿπ šçřìþτ ǻňđ гêťűяňš ðǻţã ƒяāмέŝ",
        "Documentation.Examples": {
          "Description": "Êжέсůтęş Ργŧнǿπ šçřìþτ ǻňđ гêťűяňš ðǻţã ƒяāмέŝ",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Г ѕςґΐφţ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Retorna uma tabela com cada linha sendo um nome de campo e valor do registro de entrada.",
        "Documentation.LongDescription": "Retorna uma tabela que contém as colunas <code>Name</code> e <code>Value</code> com uma linha para cada campo em <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Retornar a tabela a partir do registro.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Retorna os pacotes em um banco de dados SAP HANA.",
        "Documentation.LongDescription": "Retorna uma tabela de pacotes multidimensionais do banco de dados SAP HANA <code>server</code>. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as opções a seguir:\r\n    <ul>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>Distribution</code> : Uma SapHanaDistribution que define o valor da propriedade &quot;Distribution&quot; na cadeia de conex&#227;o. O roteamento de instru&#231;&#227;o &#233; o m&#233;todo para avaliar o n&#243; de servidor correto de um sistema distribu&#237;do antes da execu&#231;&#227;o da instru&#231;&#227;o. O valor padr&#227;o &#233; SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Especifica a implementa&#231;&#227;o do conector SAP HANA a ser usada.</li>\r\n<li><code>EnableColumnBinding</code> : Vincula vari&#225;veis ​​&#224;s colunas de um conjunto de resultados do SAP HANA ao buscar dados. Pode melhorar potencialmente o desempenho ao custo de uma utiliza&#231;&#227;o de mem&#243;ria um pouco maior. O valor padr&#227;o &#233; falso.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o &#233; 15 segundos.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Retorna uma tabela com o conteúdo de um site do SharePoint.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada pasta e documento encontrado no site especificado do SharePoint, <code>url</code>. Cada linha contém as propriedades da pasta ou do arquivo e um link para o respectivo conteúdo. O <code>options</code> pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Um n&#250;mero (14 ou 15) ou o texto &quot;Auto&quot;, que especifica a vers&#227;o da API do SharePoint a ser usada para este site. Quando n&#227;o houver especifica&#231;&#227;o, a vers&#227;o 14 da API ser&#225; usada. Quando Auto for especificado, a vers&#227;o do servidor ser&#225; automaticamente descoberta, se poss&#237;vel. Caso contr&#225;rio, a vers&#227;o 14 ser&#225; usada por padr&#227;o. Sites do SharePoint em idiomas diferentes do ingl&#234;s exigem pelo menos a vers&#227;o 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Retorna uma tabela com os documentos de um site do SharePoint.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada documento encontrado no site especificado do SharePoint, <code>url</code>, e as subpastas. Cada linha contém as propriedades da pasta ou do arquivo e um link para o respectivo conteúdo. O <code>options</code> pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Um n&#250;mero (14 ou 15) ou o texto &quot;Auto&quot;, que especifica a vers&#227;o da API do SharePoint a ser usada para este site. Quando n&#227;o houver especifica&#231;&#227;o, a vers&#227;o 14 da API ser&#225; usada. Quando Auto for especificado, a vers&#227;o do servidor ser&#225; automaticamente descoberta, se poss&#237;vel. Caso contr&#225;rio, a vers&#227;o 14 ser&#225; usada por padr&#227;o. Sites do SharePoint em idiomas diferentes do ingl&#234;s exigem pelo menos a vers&#227;o 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Retorna uma tabela com o conteúdo de uma Lista do SharePoint.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada item de Lista encontrado na lista especificada do SharePoint, <code>url</code>. Cada linha contém as propriedades da Lista. O <code>options</code> pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Um n&#250;mero (14 ou 15) ou o texto &quot;Auto&quot;, que especifica a vers&#227;o da API do SharePoint a ser usada para este site. Quando n&#227;o houver especifica&#231;&#227;o, a vers&#227;o 14 da API ser&#225; usada. Quando Auto for especificado, a vers&#227;o do servidor ser&#225; automaticamente descoberta, se poss&#237;vel. Caso contr&#225;rio, a vers&#227;o 14 ser&#225; usada por padr&#227;o. Sites do SharePoint em idiomas diferentes do ingl&#234;s exigem pelo menos a vers&#227;o 15.</li>\r\n<li><code>Implementation</code> : Opcional. Especifica qual vers&#227;o do conector do SharePoint usar. Os valores aceitos s&#227;o &quot;2.0&quot; ou nulos. Se o valor for &quot;2.0&quot;, a implementa&#231;&#227;o 2.0 do conector do SharePoint ser&#225; usada. Se o valor for nulo, a implementa&#231;&#227;o original do conector do SharePoint ser&#225; usada.</li>\r\n<li><code>ViewMode</code> : Opcional. Esta op&#231;&#227;o &#233; v&#225;lida apenas para implementa&#231;&#227;o 2.0. Os valores aceitos s&#227;o &quot;todos&quot; e &quot;padr&#227;o&quot;. Se nenhum valor for especificado, o valor ser&#225; definido como &quot;tudo&quot;. Quando o &quot;All&quot; &#233; especificado, a visualiza&#231;&#227;o inclui todas as colunas criadas e definidas pelo sistema. Quando o &quot;padr&#227;o&quot; &#233; especificado, a visualiza&#231;&#227;o corresponde ao que o usu&#225;rio v&#234; ao analisar a lista online em qualquer visualiza&#231;&#227;o que o usu&#225;rio definir como padr&#227;o em suas configura&#231;&#245;es. Se o usu&#225;rio editar sua visualiza&#231;&#227;o padr&#227;o para adicionar ou remover colunas criadas pelo usu&#225;rio ou definidas pelo sistema ou criando uma nova visualiza&#231;&#227;o e configurando-a como padr&#227;o, essas altera&#231;&#245;es se propagam atrav&#233;s do conector.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Impede que o conector use um ponto final separado para colunas de notas.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Retorna uma tabela do conteúdo na URL especificada formatada de acordo com a API SODA 2.0.",
        "Documentation.LongDescription": "Retorna uma tabela do conteúdo na URL <code>url</code> especificada formatada de acordo com a API SODA 2.0. A URL deve apontar para uma fonte válida, compatível com SODA, que termina em uma extensão .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Essa função pode ser usada para chamar qualquer um dos pontos de extremidade de \"Listas\" oferecidos pela API do SparkPost v1. Ao fazer chamadas à API do SparkPost usando essa função, lembre-se de que ela tem um limite de taxa de API estrito. Se o código de status 429 for retornado pelo servidor SparkPost você terá atingido o limite de taxa e precisará esperar um pouco para fazer mais chamadas.",
        "Documentation.Examples": [
          {
            "Description": "Retorna uma tabela com uma única coluna populada pelos dados de um dos pontos de extremidade de \"Listas\" da API do SparkPost v1 (confira a documentação do SparkPost para obter detalhes).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Recupere as tabelas internas expostas pelo conector SparkPost com os dados agregados em um número de dias especificado pelo usuário. Ao atualizar essas tabelas ou fazer chamadas à API do SparkPost usando esse conector, lembre-se de que a API do SparkPost tem um limite de taxa de API estrito. Se um código de status 429 for retornado do servidor SparkPost, você terá atingido o limite de taxa e precisará aguardar alguns minutos para fazer mais chamadas. Ao escolher um valor para o parâmetro de Número de dias, observe que a API armazena apenas 6 meses de dados válidos."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Retorna uma tabela de bancos de dados em um SQL Server.",
        "Documentation.LongDescription": "Retorna uma tabela de bancos de dados no SQL Server especificado, <code>server</code>. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Um n&#250;mero que define o valor da cl&#225;usula de consulta &quot;maxdop&quot; na consulta SQL gerada.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n<li><code>MultiSubnetFailover</code> : Uma l&#243;gica (true/false) que define o valor da propriedade &quot;MultiSubnetFailover&quot; na cadeia de conex&#227;o (o padr&#227;o &#233; false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Uma l&#243;gica (true/false) que, se for true, tentar&#225; dobrar as convers&#245;es de tipo, o que poder&#225; falhar e causar a falha da consulta inteira. N&#227;o recomendado para uso geral.</li>\r\n<li><code>ContextInfo</code> : Um valor bin&#225;rio usado para definir a CONTEXT_INFO antes de executar cada comando.</li>\r\n<li><code>OmitSRID</code> : Uma l&#243;gica (true/false) que, se for true, omitir&#225; o SRID ao produzir um Texto Bem Conhecido de tipos geom&#233;tricos e geogr&#225;ficos.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Um valor l&#243;gico (verdadeiro/falso) que, se verdadeiro, permite consultar bancos de dados de hectare dobrados no mesmo servidor. O valor padr&#227;o &#233; falso.</li>\r\n</ul>\r\n\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...], por exemplo.\r\n    <br>\r\n    Não dá suporte para definir a execução de uma consulta SQL no servidor. <code>Sql.Database</code> deve ser usado em seu lugar para executar uma consulta SQL.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Realiza uma chamada para a API da Faixa, com opção de limitar o número de chamadas realizadas à API.",
        "Documentation.LongDescription": "Realiza uma chamada para a API da Faixa em https://api.stripe.com/v1/<code>método</code>, com o registro eficaz <code>consultar</code> considerado como parâmetros adicionais e <code>pageLimit</code> eficaz como um limite ao número de solicitações à API. Os dados mais recentes são retornados primeiro. Se <code>pageLimit</code> não for especificado, todos os dados serão retornados. A Versão da Faixa 2015-10-16 é usada.",
        "Documentation.Examples": [
          {
            "Description": "Retorna todos os dados de encargos",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Uma tabela com todos os dados de encargos para a conta atual da Faixa"
          },
          {
            "Description": "Retorna uma página de dados de encargos",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Uma tabela com os dados de encargos mais recentes para a conta atual da Faixa"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Armazena uma tabela em buffer na memória, isentando-a de alterações externas durante a avaliação.",
        "Documentation.LongDescription": "Buffers de uma tabela na memória, isolando-a de alterações externas durante a avaliação.\r\n    O armazenamento em buffer é superficial. Ele força a avaliação de  células escalares, mas deixa valores não escalares (registros, listas, tabelas e assim por diante) como estão.\r\n    <br>\r\n    <br>\r\n    Observe que o uso dessa função pode ou não fazer com que suas consultas sejam executadas mais rapidamente. Em alguns casos, ele pode fazer com que suas consultas sejam executadas mais lentamente devido ao custo \r\n    adicionado de ler todos os dados e armazená-los na memória, bem como o fato de que o armazenamento em buffer impede o dobramento downstream. Se os dados não precisarem estar\r\n armazenados em buffer, mas você quer prevenir o dobramento downstream, use <code>Table.StopFolding</code> no lugar.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Carregar todas as linhas de uma tabela SQL na memória, de modo que quaisquer operações posteriores não serão mais capazes de consultar o SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Retorna uma tabela que é o resultado da mesclagem de uma lista de tabelas.",
        "Documentation.LongDescription": "Retorna uma tabela que é o resultado da mesclagem de uma lista de tabelas, <code>tables</code>. A tabela resultante terá uma estrutura de tipo de linha definida por <code>columns</code> ou por uma união dos tipos de entrada se <code>columns</code> não foi especificado.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mesclar as três tabelas.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Mescle três tabelas com estruturas diferentes.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Mescle duas tabelas e o projeto para o tipo fornecido.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Rebaixa os cabeçalhos de coluna para a primeira linha de valores.",
        "Documentation.LongDescription": "Rebaixa os cabeçalhos de coluna (por exemplo, os nomes de coluna) para a primeira linha de valores. Os nomes de coluna padrão são \"Coluna1\", \"Coluna2\" e assim por diante.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Rebaixar a primeira linha de valores da tabela.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Remove linhas duplicadas da tabela.",
        "Documentation.LongDescription": "Remove linhas duplicadas da tabela.\r\n    Um parâmetro opcional, <code>equationCriteria</code>, especifica quais colunas da tabela são testadas quanto à duplicação. Se <code>equationCriteria</code> não for especificado, todas as colunas serão testadas.<br>\r\n    <br>\r\n    Como o Power Query às vezes descarrega determinadas operações para fontes de dados de back-end (conhecidas como \"dobragem\"), e às vezes otimiza as consultas por \r\n    ignorando operações que não são estritamente necessárias. Em geral, não há garantia de qual duplicata específica será preservada.\r\n    Por exemplo, você não pode presumir que a primeira linha com um conjunto exclusivo de valores de coluna permanecerá e as linhas mais abaixo na tabela serão removidas.\r\n    Se desejar que a remoção de duplicatas se comporte de forma previsível, primeiro faça o buffer da tabela usando <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Remover as linhas duplicadas da tabela.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Remova as linhas duplicadas da coluna [b] na tabela <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Cria uma tabela a partir de uma lista de colunas e valores especificado.",
        "Documentation.LongDescription": "Cria uma tabela do tipo <code>columns</code> por meio de uma lista <code>lists</code> que contém listas aninhadas com os nomes e valores de coluna.\r\n    Se algumas colunas tiverem mais valores que outras, os valores ausentes serão preenchidos com o valor padrão, 'null', se as colunas permitirem valores nulos.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Retornar uma tabela a partir de uma lista de nomes de clientes em uma lista. Todos os valores da lista de clientes se tornam um valor de linha, e todas as listas se tornam uma coluna.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Crie uma tabela a partir de uma lista de colunas especificada e de uma lista de nomes de coluna.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Criar uma tabela com um número diferente de colunas por linha. O valor da coluna ausente é nulo.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Converte uma lista em tabela aplicando a função de divisão especificada a cada item da lista.",
        "Documentation.LongDescription": "Converte uma lista, <code>list</code>, em tabela aplicando a função de divisão opcional, <code>splitter</code>, a cada item da lista. Por padrão, a lista é considerada uma lista de valores de texto divididos por vírgula. O <code>columns</code> opcional pode ser o número de colunas, uma lista de colunas ou um TableType. <code>default</code> e <code>extraValues</code> opcionais também podem ser especificados.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Crie uma tabela a partir de uma lista usando o divisor padrão.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Crie uma tabela a partir de uma lista usando um divisor personalizado.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Crie uma tabela da lista usando o divisor Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Converte uma lista de registros em uma tabela.",
        "Documentation.LongDescription": "Converte <code>records</code>, uma lista de registros, em uma tabela.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Cria uma tabela a partir dos registros usando os nomes de campo dos registros como nomes de coluna.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Cria uma tabela a partir dos registros com colunas de tipo e seleciona as colunas de número.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Cria uma tabela usando uma lista de valores de linha e colunas opcionais",
        "Documentation.LongDescription": "Cria uma tabela usando a lista <code>rows</code> em que cada elemento da lista é uma lista interna que contém os valores de coluna para uma única linha. Uma lista opcional de nomes de coluna, um tipo de tabela ou um número de colunas pode ser fornecido para <code>columns</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Retornar uma tabela com a coluna [CustomerID] com valores {1, 2}, a coluna [Name] com valores {\"Bob\", \"Jim\"} e a coluna [Phone] com valores {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Retornar uma tabela com a coluna [CustomerID] com valores {1, 2}, a coluna [Name] com valores {\"Bob\", \"Jim\"} e a coluna [Phone] com valores {\"123-4567\", \"987-6543\"}, em que [CustomerID] é um tipo de número e [Name] e [Phone] são tipos de texto.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Cria uma tabela com uma coluna a partir dos valores fornecidos.",
        "Documentation.LongDescription": "Cria uma tabela com uma coluna contendo o valor fornecido ou a lista de valores, <code>value</code>. Um parâmetro opcional de registro, <code>options</code>, especificado para controlar as seguintes opções:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : O nome da coluna usada ao criar uma tabela a partir de uma lista ou valor escalar.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Crie uma tabela a partir do valor 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Criar uma tabela a partir da lista.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Criar uma coluna do valor 1, com um nome de coluna personalizado.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Retorna informações sobre como uma tabela está particionada.",
        "Documentation.LongDescription": "Retorna informações sobre como uma tabela está particionada.  Uma tabela é retornada em que cada coluna é uma coluna de partição na tabela original e cada linha corresponde a uma partição na tabela original.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Retorna um perfil das colunas de uma tabela.",
        "Documentation.LongDescription": "<p>Retorna um perfil para as colunas em <code>table</code>.</p>\r\n<p>As informações a seguir são retornadas para cada coluna (quando aplicável):\r\n<ul>\r\n  <li>mínimo</li>\r\n  <li>máximo</li>\r\n  <li>média</li>\r\n  <li>desvio padrão</li>\r\n  <li>contagem</li>\r\n  <li>contagem nula</li>\r\n  <li>contagem distinta</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Promove a primeira linha de valores como novos cabeçalhos de coluna (por exemplo, nomes de coluna).",
        "Documentation.LongDescription": "Promove a primeira linha de valores como novos cabeçalhos de coluna (por exemplo, nomes de coluna). Por padrão, somente valores de texto ou número são promovidos a cabeçalhos. Opções válidas:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: se definido como <code>true</code>, todos os valores escalares da primeira linha são promovidos a cabeçalhos usando o <code>Culture</code>, se especificado (ou localidade do documento atual).\r\n    Para valores que não podem ser convertidos em texto, um nome de coluna padrão será usado.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: um nome de cultura especificando a cultura para os dados.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Promover a primeira linha de valores na tabela.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Promova todos os escalares na primeira linha da tabela a cabeçalhos.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Retorna uma tabela com as primeiras linhas de contagem ignoradas.",
        "Documentation.LongDescription": "Retorna uma tabela que não contém o primeiro número especificado de linhas, <code>countOrCondition</code>, da tabela <code>table</code>.\r\n    O número de linhas removidas depende do parâmetro opcional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for omitido, somente a primeira linha será removida. </li>\r\n    <li> Se <code>countOrCondition</code> for um número, essas várias linhas (começando na parte superior) serão removidas. </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, as linhas que atenderem à condição serão removidas até que uma linha não esteja em conformidade com a condição.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Remover a primeira linha da tabela.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Remover as duas primeiras linhas da tabela.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Remover da tabela as primeiras linhas em que [CustomerID] <=2.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Retorna uma tabela com as N últimas linhas removidas.",
        "Documentation.LongDescription": "Retorna uma tabela que não contém as <code>countOrCondition</code> últimas linhas da tabela <code>table</code>.\r\n        O número de linhas removidas depende do parâmetro opcional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for omitido, somente a última linha será removida. </li>\r\n    <li> Se <code>countOrCondition</code> for um número, essas várias linhas (começando na parte inferior) serão removidas. </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, as linhas que atenderem à condição serão removidas até que uma linha não esteja em conformidade com a condição.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Remover a última linha da tabela.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Remover da tabela as últimas linhas em que [CustomerID] > 2.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Retorna uma tabela com as linhas removidas da tabela de entrada que contém um erro em, pelo menos, uma das células. Se uma lista de colunas for especificada, apenas as células das colunas especificadas serão inspecionadas quanto a erros.",
        "Documentation.LongDescription": "Retorna uma tabela com as linhas removidas da tabela de entrada que contém um erro em, pelo menos, uma das células. Se uma lista de colunas for especificada, apenas as células das colunas especificadas serão inspecionadas quanto a erros.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Remove um valor de erro da primeira linha.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Retorna uma tabela com as linhas na ordem inversa.",
        "Documentation.LongDescription": "Retorna uma tabela com as linhas da entrada <code>table</code> na ordem inversa.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Inverter as linhas da tabela.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Retorna uma tabela contendo uma descrição das colunas (ou seja, o esquema) da tabela especificada.",
        "Documentation.LongDescription": "<p>Retorna uma tabela descrevendo as colunas de <code>table</code>.</p>\r\n<p>Cada linha na tabela descreve as propriedades de uma coluna de <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Nome da Coluna</b></td>\r\n    <td><b>Descrição</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>O nome da coluna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>A posição baseada em 0 da coluna em <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>O nome do tipo da coluna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>A variante do tipo da coluna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Se a coluna pode conter valores <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>A base numérica (por exemplo, base 2 ou base 10) dos campos <code>NumericPrecision</code> and <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>A precisão de uma coluna numérica é especificada por base por <code>NumericPrecisionBase</code>. Esse é o número máximo de dígitos que podem ser representados por um valor desse tipo (incluindo dígitos fracionais).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>A escala de uma coluna numérica é especificada por base por <code>NumericPrecisionBase</code>. Esse é o número de dígitos na parte fracionária de um valor desse tipo. Um valor de <code>0</code> indica uma escala fixa sem dígitos fracionais. Um valor <code>null</code> indica que a escala não é conhecida (porque está flutuando ou não é definida).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>O número máximo de dígitos fracionais com suporte na parte dos segundos de um valor de data ou temporal.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>O número máximo de caracteres permitido de caracteres permitido em uma coluna <code>text</code> ou o número máximo de bytes permitidos em uma coluna <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Indica se essa coluna pode variar em comprimento (até <code>MaxLength</code>) ou se este estiver no tamanho fixo.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>O nome do tipo de coluna no sistema tipo nativo da fonte (por exemplo, <code>nvarchar</code> para SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>A expressão padrão de um valor dessa coluna é a linguagem de expressão nativa da fonte (por exemplo, <code>42</code> ou <code>newid()</code> para SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>A descrição da coluna.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Retorna uma tabela apenas com as linhas da tabela de entrada que contêm um erro em, pelo menos, uma das células. Se uma lista de colunas for especificada, apenas as células das colunas especificadas serão inspecionadas quanto a erros.",
        "Documentation.LongDescription": "Retorna uma tabela apenas com as linhas da tabela de entrada que contêm um erro em, pelo menos, uma das células. Se uma lista de colunas for especificada, apenas as células das colunas especificadas serão inspecionadas quanto a erros.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Seleciona os nomes de clientes com erros nas linhas.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Retorna uma tabela com as primeiras linhas de contagem ignoradas.",
        "Documentation.LongDescription": "Retorna uma tabela que não contenha o primeiro número especificado de linhas, <code>countOrCondition</code>, da tabela <code>table</code>.\r\n    O número de linhas ignoradas depende do parâmetro opcional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for omitido, somente a primeira linha será ignorada. </li>\r\n    <li> Se <code>countOrCondition</code> for um número, essas várias linhas (começando na parte superior) serão ignoradas. </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, as linhas que atenderem à condição serão ignoradas até que uma linha não esteja em conformidade com a condição.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ignorar a primeira linha da tabela.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Ignorar as duas primeiras linhas da tabela.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Ignorar as primeiras linhas em que [Price] > 25 na tabela.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Impede que operações downstream sejam executadas em relação à fonte original dos dados.",
        "Documentation.LongDescription": "Impede que operações downstream sejam executadas em relação à fonte original dos dados no <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Busca dados de uma tabela SQL de uma forma que impede a execução de operações downstream como uma consulta no SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Transforma colunas em linhas e linhas em colunas.",
        "Documentation.LongDescription": "Transforma colunas em linhas e linhas em colunas.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transforme as linhas da tabela de pares de nome/valor em colunas.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Obtém os relacionamentos entre um conjunto de tabelas.",
        "Documentation.LongDescription": "Obtém os relacionamentos entre um conjunto de tabelas. O conjunto <code>tables</code> tem uma estrutura semelhante à da tabela de navegação. A coluna definida por <code>dataColumn</code> contém as tabelas de dados reais.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Retorna uma tabela de tabelas e exibições SQL do banco de dados Teradata.",
        "Documentation.LongDescription": "Retorna uma tabela de tabelas e exibições SQL disponíveis em um banco de dados Teradata, no servidor <code>server</code>. Como alternativa, a porta pode ser especificada com o servidor, separada por uma vírgula. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n</ul>\r\n\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"], por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Insira o número de meses dos dados históricos do Twilio a serem recuperados.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Retorna uma tabela com dados relevantes do Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Retorna uma tabela que contém uma descrição das colunas (p.ex., o esquema) do tipo de tabela especificado.",
        "Documentation.LongDescription": "<p>Retorna uma tabela que descreve as colunas de <code>tableType</code>.</p>\r\n<p>Confira a documentação de <code>Table.Schema</code> para obter uma descrição da tabela resultante.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Feed do Azure DevOps Services",
        "Documentation.DisplayName": "Feed do Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Retorna uma tabela de feeds OData oferecidos pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Conectar-se aos Dados do Insights do Viva",
        "Documentation.LongDescription": "Importe métricas e dados de atributos semanais do Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Retorna uma tabela com atributos visíveis e métricas por semana de cada funcionário medido na partição.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "advancedParameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Retorna o conteúdo do documento HTML decomposto em suas estruturas constitutivas, bem como uma representação do documento completo e respectivo texto após a remoção das marcas.",
        "Documentation.LongDescription": "Retorna o conteúdo do documento HTML decomposto em suas estruturas constitutivas, bem como uma representação do documento completo e respectivo texto após a remoção das marcas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Retorna uma tabela com métricas-chave do Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Efetua uma chamada ao ponto de extremidade KeyMetrics do Webtrends e retorna todos os dados como uma tabela.",
        "Documentation.Examples": [
          {
            "Description": "Efetua pull de uma tabela de métricas-chave do locatário 98765 nos últimos 30 dias",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Uma tabela de métricas-chave"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Insira a ID do Perfil associada à sua conta do Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Retorna uma tabela com dados relevantes do Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Conectar-se aos Dados do Insights do Viva",
        "Documentation.LongDescription": "Importe métricas e dados de atributos semanais do Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Retorna uma tabela com atributos visíveis e métricas por semana de cada funcionário medido na partição.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Retorna o conteúdo do documento XML como uma tabela hierárquica.",
        "Documentation.LongDescription": "Retorna o conteúdo do documento XML como uma tabela hierárquica.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Retorna o conteúdo do documento XML como uma coleção aninhada de tabelas niveladas.",
        "Documentation.LongDescription": "Retorna o conteúdo do documento XML como uma coleção aninhada de tabelas niveladas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Recupere o conteúdo de um arquivo xml local.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Digite a URL da sua conta do Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Retorna uma tabela com dados relevantes do Zendesk."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Retorna a coleção de esquema para uma fonte de dados do ADO.NET.",
        "Documentation.LongDescription": "Retorna a coleção de esquema da fonte de dados ADO.NET com o nome de provedor <code>providerName</code> e a cadeia de conexão <code>connectionString</code>. <code>connectionString</code> pode ser texto ou um registo de pares de valores da propriedade. Os valores da propriedade podem ser texto ou número. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Um valor l&#243;gico (true/false) que determina se as op&#231;&#245;es de cadeia de conex&#227;o compat&#237;veis com o SQL Server devem ser produzidas para a autentica&#231;&#227;o do Windows. O valor padr&#227;o &#233; true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Importar dados do banco de dados do Amazon Redshift.",
        "Documentation.LongDescription": "Retorna uma tabela listando no cluster do Amazon Redshift <code>servidor</code> no banco de dados <code>banco de dados</code>. Um parâmetro de registro opcional, <code>opções</code>, pode ser especificado para controlar as seguintes opções:\r\n<ul>\r\n<li><code>Nome do Provedor</code>: um valor de texto a ser usado como o Nome do Provedor para a conexão. Isso é usado ao usar a Autenticação da Microsoft.</li>\r\n<li><code>Tamanho do Lote</code>: o número de linhas buscadas em uma única chamada para o servidor.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Retorna uma tabela de cubos multidimensionais ou modelos de tabela do banco de dados do Analysis Services.",
        "Documentation.LongDescription": "Retorna uma tabela de cubos multidimensionais ou modelos tabulares do banco de dados <code>database</code> do Analysis Services no servidor <code>server</code>. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>Query</code> : Uma consulta MDX nativa usada para recuperar dados.</li>\r\n<li><code>TypedMeasureColumns</code> : Um valor l&#243;gico que indica se os tipos especificados no modelo multidimensional ou tabular ser&#227;o usados para os tipos das colunas de medi&#231;&#227;o adicionadas. Quando definido como false, o tipo &quot;number&quot; ser&#225; usado para todas as colunas de medi&#231;&#227;o. O valor padr&#227;o para essa op&#231;&#227;o &#233; false.</li>\r\n<li><code>Culture</code> : Um nome de cultura que especifica a cultura para os dados. Isso corresponde &#224; propriedade da cadeia de conex&#227;o &#39;ID de Localidade&#39;.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>SubQueries</code> : Um n&#250;mero (0, 1 ou 2) que define o valor da propriedade &quot;SubQueries&quot; na cadeia de conex&#227;o. Essa op&#231;&#227;o controla o comportamento de membros calculados em subsele&#231;&#245;es ou subcubos. (O valor padr&#227;o &#233; 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Retorna uma tabela que lista as tabelas do cluster do Spark especificado.",
        "Documentation.LongDescription": "Retorna uma tabela que lista as tabelas do cluster <code>host</code> do Spark usando <code>protocol</code>. Os protocolos válidos são:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Retorna uma tabela que lista as tabelas do cluster do Spark especificado.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Insira os nomes da organização e do projeto.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (somente para o Boards)",
        "Documentation.LongDescription": "Retorna uma tabela das exibições de Análise oferecidas pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Interactive Query do HDInsight",
        "Documentation.Caption": null,
        "Documentation.Description": "Importar dados do Interactive Query do HDInsight",
        "Documentation.LongDescription": "\r\nRetorna uma lista de tabelas do Interactive Query do HDInsight especificada pelo <code>banco de dados</code> no <code>servidor</code> do Interactive Query do HDInsight. Um número da porta pode ser especificado opcionalmente com o servidor, separado por dois-pontos. Um parâmetro de <code>opções</code> opcional pode ser especificado para controlar as seguintes opções:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: uma duração que controla quanto tempo esperar antes de abandonar uma tentativa de estabelecer uma conexão com o servidor. O valor padrão é dependente do driver.</li>\r\n        <li><code>CommandTimeout</code>: uma duração que controla quanto tempo a consulta do lado do servidor tem permissão para ser executada antes de ser cancelada. O valor padrão é dependente do driver.</li>\r\n</ul>\r\nO parâmetro de <code>opções</code> é especificado como [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Retorna uma tabela com colunas mapeadas para os atributos de uma entidade no Common Data Model, incluindo os tipos de dados.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Retorna uma tabela com colunas mapeadas para os atributos de uma entidade no Common Data Model, incluindo os tipos de dados. As colunas da definição de entidade serão adicionadas se não estiverem mapeadas e as colunas não mapeadas serão removidas.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "Retrieve all pages of data",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Retorna um cubo após a aplicação de um parâmetro.",
        "Documentation.LongDescription": "Retorna um cubo após a aplicação de <code>parameter</code> com <code>arguments</code> a <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Altera a granularidade dimensional do contexto de filtro do cubo, recolhendo os atributos mapeados para as colunas especificadas.",
        "Documentation.LongDescription": "Altera a granularidade dimensional do contexto de filtro do <code>cube</code>, recolhendo os atributos mapeados para as colunas especificadas <code>columnNames</code>. As colunas também são removidas da exibição tabular do cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Substitui o conjunto de dimensões retornado pelo Cube.Dimensions.",
        "Documentation.LongDescription": "Substitui o conjunto de dimensões retornado pelo <code>Cube.Dimensions</code>.\r\n    Por exemplo, essa função pode ser usada para adicionar uma coluna de ID a um atributo de dimensão, para que a fonte de dados possa agrupar na ID em vez do valor exibido.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Aplica uma lista de funções de cubo.",
        "Documentation.LongDescription": "Aplica as funções de cubo da lista, <code>transforms</code>, ao <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Retorna uma tabela de tabelas e exibições SQL disponíveis em um banco de dados Db2.",
        "Documentation.LongDescription": "Retorna uma tabela de tabelas e exibições SQL disponíveis em um banco de dados Db2 no servidor <code>server</code>, na instância de banco de dados chamada <code>database</code>. A porta pode ser especificada opcionalmente com o servidor, separada por uma vírgula. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n<li><code>Implementation</code> : Especifica a implementa&#231;&#227;o do provedor de banco de dados interno a ser usado. Os valores v&#225;lidos s&#227;o &quot; IBM&quot; e &quot; Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Um n&#250;mero para o CCSID (Identificador do Conjunto de Caracteres Codificados) para decodificar dados bin&#225;rios FOR BITS do Db2 em cadeias de caracteres. Aplica-se &#224; Implementa&#231;&#227;o = “Microsoft”. Defina 0 para desabilitar a convers&#227;o (padr&#227;o). Defina 1 para converter com base em uma codifica&#231;&#227;o de banco de dados. Defina outro n&#250;mero do CCSID para converter em codifica&#231;&#227;o de aplicativo.</li>\r\n<li><code>PackageCollection</code> : Especifica um valor de cadeia para a cole&#231;&#227;o de pacotes (o padr&#227;o &#233; &quot;NULLID&quot;) para habilitar o uso de pacotes compartilhados necess&#225;rios para processar instru&#231;&#245;es SQL. Aplica-se a Implementa&#231;&#227;o = &quot; Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Especifica se a conex&#227;o est&#225; sendo estabelecida por meio de um gateway do DB2 Connect. Aplica-se &#224; Implementa&#231;&#227;o = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Por exemplo, o parâmetro de registro é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Recupera um conjunto de dados do Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Retorna uma tabela contendo as propriedades e conteúdos dos blobs encontrados no contêiner especificado de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Retorna uma tabela contendo uma linha para cada arquivo de blob encontrado na URL do contêiner, <code>account</code>, de um cofre de armazenamento do Azure. Cada linha contém propriedades do arquivo e um link para seu conteúdo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Retorna uma tabela que contém os resultados da execução dos seletores CSS especificados em relação ao HTML fornecido.",
        "Documentation.LongDescription": "Retorna uma tabela contendo os resultados da execução dos seletores de CSS em relação ao <code>html</code> fornecido. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Acessando dados",
        "Documentation.Examples": [
          {
            "Description": "Retorna uma tabela de um valor de texto de html de amostra.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Gerente</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Extrai todos os hrefs de um valor de texto de html de exemplo.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Teste</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Retorna uma tabela de exibições e tabelas SQL disponíveis em um banco de dados Informix.",
        "Documentation.LongDescription": "Retorna uma tabela de tabelas e exibições SQL disponíveis em um banco de dados Informix, no servidor <code>server</code>, na instância de banco de dados chamada <code>database</code>. Como alternativa, a porta pode ser especificada com o servidor, separada por uma vírgula. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n</ul>\r\n\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"], por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Retorna uma tabela de detalhes de lead.",
        "Documentation.LongDescription": "Realiza uma chamada para o ponto de extremidade da API REST Marketo em <code>url</code>/rest/v1/leads.json. Todos os leads na lista <code>leadIds</code> são retornados.",
        "Documentation.Examples": [
          {
            "Description": "Acessa os detalhes de três leads",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Uma tabela com detalhes dos leads fornecidos"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Insira a URL do ponto de extremidade da API REST Marketo associada a sua conta.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Retorna uma tabela com dados Marketo relevantes."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Retorna uma tabela de tabelas, exibições e funções escalares armazenadas do SQL disponíveis em um banco de dados MySQL.",
        "Documentation.LongDescription": "Retorna uma tabela de tabelas, exibições e funções escalares armazenadas do SQL disponíveis em um banco de dados MySQL, no servidor <code>server</code>, na instância de banco de dados chamada <code>database</code>. Como alternativa, a porta pode ser especificada com o servidor, separada por uma vírgula. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>Encoding</code> : Um valor de TextEncoding que especifica o conjunto de caracteres usado para codificar todas as consultas enviadas ao servidor (o padr&#227;o &#233; nulo).</li>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Uma l&#243;gica (true/false) que determina se ser&#225; necess&#225;rio for&#231;ar as colunas tinyint no servidor como valores l&#243;gicos. O valor padr&#227;o &#233; true.</li>\r\n<li><code>OldGuids</code> : Uma l&#243;gica (true/false) que define se as colunas char(36) (em caso de false) ou binary(16) (em caso de true) ser&#227;o tratadas como GUIDs. O valor padr&#227;o &#233; false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Uma l&#243;gica (true/false) que define se todas as tabelas de todos os banco de dados ser&#227;o retornadas (em caso de false) ou se as tabelas e visualiza&#231;&#245;es do banco de dados especificado ser&#227;o retornadas (em caso de true). O valor padr&#227;o &#233; false.</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n</ul>\r\n\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"], por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Importe dados de um banco de dados do IBM Netezza.",
        "Documentation.LongDescription": "\r\nRetorna uma tabela de modos de exibição, funções armazenadas e tabelas do Netezza do banco de dados do Servidor do Netezza <code>database</code> no servidor <code>server</code>. A porta pode ser especificada opcionalmente com o servidor, separada por dois-pontos. Um parâmetro de gravação opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: um lógico (true/false) que define se é necessário gerar propriedades de navegação nos valores retornados (o padrão é true)</li>\r\n        <li><code>HierarchicalNavigation</code>: um lógico (true/false) que define se é necessário exibir as tabelas agrupadas pelos nomes de esquema (o padrão é false)</li>\r\n        <li><code>ConnectionTimeout</code>: uma duração que controla quanto tempo aguardar antes de abandonar uma tentativa de estabelecer uma conexão com o servidor. O valor padrão é dependente de driver.</li>\r\n        <li><code>CommandTimeout</code>: uma duração que controla por quanto tempo a consulta do lado do servidor tem permissão para ser executada antes de ser cancelada. O valor padrão é dependente de driver.</li>\r\n<li><code>NormalizeDatabaseName</code>: um lógico (true/false) que define se o nome do banco de dados será normalizado para letras maiúsculas ou interpretado literalmente (o padrão é true).</li>\r\n</ul>\r\nO parâmetro de registro está especificado como [option1 = value1, option2 = value2...].",
        "Documentation.Examples": [
          {
            "Description": "Liste as tabelas em um projeto do IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Retorna o resultado da execução de uma consulta nativa em uma fonte de dados ODBC.",
        "Documentation.LongDescription": "Retorna o resultado de <code>query</code> em execução com uma cadeia de conexão <code>connectionString</code> usando ODBC. <code>connectionString</code> pode ser texto ou um registo de pares de valores da propriedade. Os valores da propriedade podem ser texto ou número. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o &#233; 15 segundos.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Um valor l&#243;gico (true/false) que determina se as op&#231;&#245;es de cadeia de conex&#227;o compat&#237;veis com o SQL Server devem ser produzidas para a autentica&#231;&#227;o do Windows. O valor padr&#227;o &#233; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Retorna o resultado da execução de uma consulta simples em relação à cadeia de conexão fornecida.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Retorna o resultado da execução de uma consulta nativa em uma fonte de dados do OLE DB.",
        "Documentation.LongDescription": "Retorna o resultado de <code>query</code> em execução com uma cadeia de conexão <code>connectionString</code> usando OLE DB. <code>connectionString</code> pode ser texto ou um registo de pares de valores da propriedade. Os valores da propriedade podem ser texto ou número. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter um dos seguintes dos campos:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Um valor l&#243;gico (true/false) que determina se as op&#231;&#245;es de cadeia de conex&#227;o compat&#237;veis com o SQL Server devem ser produzidas para a autentica&#231;&#227;o do Windows. O valor padr&#227;o &#233; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Retorna uma tabela de tabelas e exibições SQL disponíveis em um banco de dados PostgreSQL.",
        "Documentation.LongDescription": "Retorna uma tabela de tabelas e exibições SQL disponíveis em um banco de dados PostgreSQL no servidor <code>server</code> na instância de banco de dados <code>database</code>. Como alternativa, a porta pode ser especificada com o servidor, separada por vírgula. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n</ul>\r\n\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"], por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Importe dados de um warehouse do Snowflake Computing.",
        "Documentation.LongDescription": "Retorna uma tabela que lista as tabelas no <code>warehouse</code> do Snowflake Computing, localizado no <code>server</code>. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções\r\n<ul>\r\n<li><code>Função</code>: um valor de texto a ser usado como o Nome da função para a conexão.</li>\r\n<li><code>CreateNavigationProperties</code>: um valor lógico (true/false) que define se as propriedades de navegação devem ser geradas nos valores retornados (o padrão é true)</li>\r\n<li><code>ConnectionTimeout</code>: o número de segundos de espera das respostas de rede do Snowflake.</li>\r\n<li><code>CommandTimeout</code>: o número de segundos de espera até que uma consulta seja executada.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Liste as tabelas em um warehouse do Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Retorna uma tabela que lista as tabelas do cluster do Spark especificado.",
        "Documentation.LongDescription": "Retorna uma tabela que lista as tabelas do cluster <code>host</code> do Spark usando <code>protocol</code>. Os protocolos válidos são:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Lista as tabelas em uma instância do Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Retorna uma tabela de tabelas SQL, exibições e funções armazenadas do banco de dados do SQL Server.",
        "Documentation.LongDescription": "Retorna uma tabela de tabelas, exibições e funções armazenadas do SQL de um banco de dados do SQL Server <code>database</code> no servidor <code>server</code>. Como alternativa, a porta pode ser especificada com o servidor, separada por uma vírgula. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Um n&#250;mero que define o valor da cl&#225;usula de consulta &quot;maxdop&quot; na consulta SQL gerada.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n<li><code>MultiSubnetFailover</code> : Uma l&#243;gica (true/false) que define o valor da propriedade &quot;MultiSubnetFailover&quot; na cadeia de conex&#227;o (o padr&#227;o &#233; false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Uma l&#243;gica (true/false) que, se for true, tentar&#225; dobrar as convers&#245;es de tipo, o que poder&#225; falhar e causar a falha da consulta inteira. N&#227;o recomendado para uso geral.</li>\r\n<li><code>ContextInfo</code> : Um valor bin&#225;rio usado para definir a CONTEXT_INFO antes de executar cada comando.</li>\r\n<li><code>OmitSRID</code> : Uma l&#243;gica (true/false) que, se for true, omitir&#225; o SRID ao produzir um Texto Bem Conhecido de tipos geom&#233;tricos e geogr&#225;ficos.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Um valor l&#243;gico (verdadeiro/falso) que, se verdadeiro, permite consultar bancos de dados de hectare dobrados no mesmo servidor. O valor padr&#227;o &#233; falso.</li>\r\n</ul>\r\n\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"], por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Retorna uma tabela de tabelas e exibições SQL disponíveis em um banco de dados Sybase.",
        "Documentation.LongDescription": "Retorna uma tabela de tabelas e exibições SQL disponíveis em um banco de dados Sybase, no servidor <code>server</code>, na instância de banco de dados <code>database</code>. Como alternativa, a porta pode ser especificada com o servidor, separada por uma vírgula. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o usada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa usada para recuperar dados. Se a consulta produzir v&#225;rios conjuntos de resultados, somente o primeiro ser&#225; retornado.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que uma tentativa de fazer uma conex&#227;o com o servidor seja abandonada. O valor padr&#227;o depende do driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n</ul>\r\n\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"], por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Acrescente uma coluna com valores de posição explícitos.",
        "Documentation.LongDescription": "Acrescente uma coluna denominada <code>newColumnName</code> a <code>table</code> com valores de posição explícitos.\r\n    Um valor opcional, <code>initialValue</code>, o valor de índice inicial. Um valor opcional, <code>increment</code>, especifica quanto cada valor de índice deve ser incrementado.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adicionar uma coluna de índice denominada \"Index\" à tabela.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Adicionar uma coluna de índice denominada \"Index\", que começa no valor 10 e aumenta de 5 em 5, à tabela.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Dada uma coluna de listas em uma tabela, crie a cópia de uma linha para cada valor na lista.",
        "Documentation.LongDescription": "Dado um <code>table</code>, em que <code>column</code> é uma lista de valores, divida a lista em uma linha para cada valor. Os valores nas outras colunas são duplicados em cada nova linha criada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dividir a coluna de lista [Name] na tabela.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Propaga o valor de uma célula anterior para as células com valor nulo abaixo da coluna.",
        "Documentation.LongDescription": "Retorna uma tabela do <code>table</code> especificado em que o valor de uma célula anterior é propagado para as células de valor nulo abaixo no <code>columns</code> especificado.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Retornar uma tabela com os valores nulos da coluna [Place] preenchidos com o valor acima deles na tabela.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Propaga o valor de uma célula para as células de valor nulo acima na coluna.",
        "Documentation.LongDescription": "Retorna uma tabela do <code>table</code> especificado em que o valor da próxima célula é propagado para as células de valor nulo acima no <code>columns</code> especificado.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Retornar uma tabela com os valores nulos da coluna [Column2] preenchidos com o valor abaixo deles na tabela.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Retorna todas as linhas que contêm o texto especificado na tabela.",
        "Documentation.LongDescription": "Retorna as linhas da tabela <code>table</code> que contêm o texto <code>text</code>. Se o texto não for encontrado, uma tabela vazia será retornada.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar as linhas da tabela que contém \"Bob\".",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Retorna as primeiras linhas de contagem especificadas.",
        "Documentation.LongDescription": "Retorna as primeiras linhas da tabela <code>table</code>, dependendo do valor de <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for um número, essas várias linhas (começando na parte superior) serão retornadas. </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, as linhas que atenderem à condição serão retornadas até que uma linha não esteja em conformidade com a condição.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar as duas primeiras linhas da tabela.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Localizar as primeiras linhas em que [a] > 0 na tabela.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Retorna uma tabela que é o resultado da combinação de um conjunto de tabelas particionadas.",
        "Documentation.LongDescription": "Retorna uma tabela que é o resultado da combinação de um conjunto de tabelas particionadas, <code>partitions</code>. <code>partitionColumn</code> é o nome da coluna a ser adicionada. O tipo da coluna assumirá como padrão <code>qualquer um</code>, mas pode ser especificada por <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Encontre o tipo de item a partir da lista <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Retorna o último número especificado de linhas.",
        "Documentation.LongDescription": "Retorna as últimas linhas da tabela <code>table</code>, dependendo do valor de <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for um número, essas várias linhas serão retornados, começando na posição - <code>countOrCondition</code>). </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, as linhas que atenderem à condição serão retornadas na posição crescente até que uma linha não atenda à condição.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar as duas últimas linhas da tabela.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Localizar as últimas linhas em que [a] > 0 na tabela.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Retorna uma tabela em que todas as colunas sejam prefixadas com o texto especificado.",
        "Documentation.LongDescription": "Retorna uma tabela em que todos os nomes de coluna da <code>table</code> fornecida são prefixados com o texto determinado, <code>prefix</code>, mais um ponto final, na forma <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Prefixar as colunas com \"MyTable\" na tabela.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Retorna as linhas que começam no deslocamento especificado.",
        "Documentation.LongDescription": "Retorna as linhas da <code>table</code> que começam no <code>offset</code> especificado. Um parâmetro opcional, <code>count</code>, especifica quantas linhas serão retornadas. Por padrão, todas as linhas após o deslocamento são retornadas.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Retornar todas as linhas que começam no deslocamento 1 da tabela.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Retornar uma linha que começa no deslocamento 1 da tabela.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Remove as colunas especificadas.",
        "Documentation.LongDescription": "Remove o <code>columns</code> especificado do <code>table</code> fornecido.\r\n    Se a coluna especificada não existir, será gerado um erro, a menos que o parâmetro <code>missingField</code> opcional especifique um comportamento alternativo (por exemplo, <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Remover a coluna [Phone] da tabela.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Tente remover uma coluna não existente da tabela.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Remove todas as ocorrências das linhas especificadas da tabela.",
        "Documentation.LongDescription": "Remove todas as ocorrências da <code>rows</code> especificada da <code>table</code>.\r\n    Um parâmetro <code>equationCriteria</code> opcional pode ser especificado para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Remova qualquer linha onde [a = 1] da tabela <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Remove o número especificado de linhas.",
        "Documentation.LongDescription": "Remove <code>count</code> de linhas desde o início da <code>table</code>, começando na <code>offset</code> especificada. Uma contagem padrão 1 será usada se o parâmetro <code>count</code> não for fornecido. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Remover a primeira linha da tabela.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Remover a linha na posição 1 da tabela.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Remover duas linhas começando na posição 1 da tabela.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Aplica renomeações do formulário {old, new}.",
        "Documentation.LongDescription": "Executa a renomeação especificadas nas colunas da tabela <code>table</code>. Uma operação de substituição <code>renames</code> consiste em uma lista de dois valores, os nomes de coluna antigo e novo, fornecidos em uma lista.\r\n    Se a coluna não existir, uma exceção será lançada, a menos que o parâmetro <code>missingField</code> opcional especifique uma alternativa (por exemplo, <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Substituir o nome de coluna \"CustomerNum\" por \"CustomerID\" na tabela.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Substituir o nome de coluna \"CustomerNum\" por \"CustomerID\" e \"PhoneNum\" por \"Phone\" na tabela.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Substituir o nome de coluna \"NewCol\" por \"NewColumn\" na tabela e ignorar se a coluna não existir.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Retorna uma tabela com as colunas na ordem especificada.",
        "Documentation.LongDescription": "Retorna uma tabela da entrada <code>table</code>, com as colunas na ordem especificada por <code>columnOrder</code>. As colunas que não estiverem especificadas na lista não serão reordenadas.\r\n     Se a coluna não existir, uma exceção será lançada, a menos que o parâmetro <code>missingField</code> opcional especifique uma alternativa (por exemplo, <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Alternar a ordem das colunas [Phone] e [Name] na tabela.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Alternar a ordem das colunas [Phone] e [Address] ou usar \"MissingField.Ignore\" na tabela. Isso não altera a tabela porque a coluna [Address] não existe.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Repete as linhas das tabelas um número de vezes especificado.",
        "Documentation.LongDescription": "Retorna uma tabela com as linhas da entrada <code>table</code> repetidas as <code>count</code> vezes especificadas.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Repetir as linhas da tabela duas vezes.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Substitui os valores de erro nas colunas especificadas com o valor especificado correspondente.",
        "Documentation.LongDescription": "Substitui os valores de erro nas colunas especificadas de <code>table</code> com os novos valores na lista de <code>errorReplacement</code>. O formato da lista é {{column1, value1}, …}. O formato da lista é {{column1, value1}, …}. Pode apenas haver um valor de substituição por coluna, a especificação da coluna mais de uma vez resultará em um erro.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Substituir o valor de erro pelo texto \"mundo\" na tabela.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Substituir o valor de erro na coluna A pelo texto \"olá\" e na coluna B pelo texto \"mundo\" na tabela.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Substitui as chaves da tabela especificada.",
        "Documentation.LongDescription": "Substitui as chaves da tabela especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Substitui as chaves existentes de uma tabela.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Substitui todas as linhas especificadas pelas linhas fornecidas.",
        "Documentation.LongDescription": "Substitui todas as linhas especificadas na <code>table</code> pelas linhas fornecidas. As linhas a serem substituídas e as substituições serão especificadas em <code>replacements</code>, usando o formato {old, new}.\r\n    Um parâmetro <code>equationCriteria</code> opcional pode ser especificado para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Substituir as linhas [a = 1, b = 2] e [a = 2, b = 3] por [a = -1, b = -2],[a = -2, b = -3] na tabela.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Retorna uma tabela apenas com as colunas especificadas.",
        "Documentation.LongDescription": "Retorna o <code>table</code> apenas com o <code>columns</code> especificado.\r\n    <ul>\r\n       <li><code>table</code>: a tabela fornecida.</li>\r\n       <li><code>columns</code>:  a lista de colunas da tabela <code>table</code> a serem retornadas. As colunas na tabela retornada estão na ordem listada em <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Opcional)</i> O que fazer se a coluna não existir.  Exemplo: <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Inclui apenas a coluna [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Inclui apenas as colunas [CustomerID] e [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Se a coluna incluída não existir, o resultado padrão será um erro.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Se a coluna incluída não existir, a opção <code>MissingField.UseNull</code> criará uma coluna de valores nulos.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Seleciona as linhas que atendem à função condition.",
        "Documentation.LongDescription": "Retorna uma tabela de linhas da <code>table</code> que corresponde à seleção <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Seleciona as linhas da tabela em que os valores da coluna [CustomerID] são maiores que 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Seleciona as linhas da tabela em que os nomes não contêm um \"B\".",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Classifica a tabela usando um ou mais nomes de coluna e critérios de comparação.",
        "Documentation.LongDescription": "Classifica a <code>table</code> usando a lista de um ou mais nomes de coluna e o <code>comparisonCriteria</code> opcional no formato { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Classificar a tabela na coluna \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Classificar a tabela na coluna \"OrderID\" em ordem decrescente.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Classificar a tabela na coluna \"CustomerID\" e depois em \"OrderID\", com \"CustomerID\" em ordem crescente.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transforma nomes de colunas ao usar a função fornecida.",
        "Documentation.LongDescription": "Transforma os nomes das colunas usando a função <code>nameGenerator</code> fornecida. Opções válidas:\r\n    <div>\r\n      <code>MaxLength</code> especifica o comprimento máximo dos novos nomes de coluna. Se a função fornecida resultar em um nome de coluna mais longo, o nome longo será cortado.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> é usado para controlar a comparação enquanto gera novos nomes de coluna. Os comparadores podem ser usados ​​para fornecer comparações sem diferenciar maiúsculas de minúsculas ou com reconhecimento de cultura e localidade.\r\n    </div>\r\n    <div>\r\n      Os seguintes comparadores internos estão disponíveis na linguagem da fórmula:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: usado para realizar uma comparação ordinal exata</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: usado para realizar uma comparação ordinal exata sem diferenciar maiúsculas de minúsculas</li>\r\n      <li> <code>Comparer.FromCulture</code>: usado para realizar uma comparação com reconhecimento de cultura</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Remove o caractere <code>#(tab)</code> dos nomes de colunas",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Transforme nomes de coluna para gerar nomes de comprimento 6 sem diferenciação de maiúsculas e minúsculas.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Aplica transformações de tipo no formato { column, type } usando uma cultura específica.",
        "Documentation.LongDescription": "Retorna uma tabela com base na entrada <code>table</code> aplicando a operação de transformação às colunas especificadas no parâmetro <code>typeTransformations</code> (cujo formato é { column name, type name}) usando a cultura especificada no parâmetro opcional <code>culture</code> (por exemplo, \"en-US\").\r\n    Se a coluna não existir, uma exceção será lançada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transforme os valores numéricos da coluna [a] em valores de texto a partir da tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Transforma os valores de uma ou mais colunas.",
        "Documentation.LongDescription": "Transforma <code>table</code> aplicando cada operação de coluna listada em <code>transformOperations</code> (em que o formato é { column name, transformation } ou { column name, transformation, new column type }).\r\n    Se um <code>defaultTransformation</code> for especificado, ele será aplicado a todas as colunas não listas em <code>transformOperations</code>. \r\n    Se uma coluna listada em <code>transformOperations</code> não existe, uma exceção será lançada, a menos que o parâmetro opcional <code>missingField</code> especifique uma alternativa (por exemplo, <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Converta os valores de texto da coluna [A] em valores numéricos e os valores numéricos na coluna [B]~em valores de texto.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Converta os valores numéricos da coluna ausente [X] em valores de texto, ignorando colunas inexistentes.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Converte os valores numéricos da coluna ausente [X] em valores de texto, usando nulo como padrão em colunas inexistentes.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Incremente os valores numéricos da coluna [B], converta-os em valores de texto e converta todas as outras colunas em números.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Cria ou estende uma tabela com manipuladores definidos pelo usuário para operações de consulta e ação.",
        "Documentation.LongDescription": "<p>Retorna uma exibição de <code>table</code> em que as funções especificadas em <code>handlers</code> são usadas no lugar do comportamento padrão de uma operação quando esta é aplicada à exibição.</p>\r\n<p>Se <code>table</code> for fornecido, todas as funções de manipulador serão opcionais. Se <code>table</code> não for fornecido, as funções de manipulador <code>GetType</code> e <code>GetRows</code> serão necessárias. Se uma função de manipulador não for especificada para uma operação, o comportamento padrão da operação será aplicado a <code>table</code> (exceto no caso de <code>GetExpression</code>).</p>\r\n<p>As funções de manipulador precisam retornar um valor que seja semanticamente equivalente ao resultado de se aplicar a operação contra <code>table</code> (ou a exibição resultante no caso de <code>GetExpression</code>).</p>\r\n<p>Se uma função de manipulador gera um erro, o comportamento padrão da operação é aplicado à exibição.</p>\r\n<p><code>Table.View</code> pode ser usado para implementar dobras a uma fonte de dados - a tradução de consultas M em consultas de origem específica (por exemplo, para criar instruções T-SQL de consultas M).</p>\r\n<p>Confira a documentação publicada do conector personalizado do Power Query para obter uma descrição mais completa de <code>Table.View</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Crie uma exibição básica que não exija o acesso às linhas para determinar o tipo ou a contagem de linhas.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Insira os nomes da organização e do projeto.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (somente para o Boards)",
        "Documentation.LongDescription": "Retorna uma tabela das exibições de Análise oferecidas pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Importe dados do Vertica",
        "Documentation.LongDescription": "Retorna uma tabela de esquemas disponíveis no servidor nomeada pelo parâmetro <code>server</code> no banco de dados nomeado pelo parâmetro <code>database</code>.\r\nUm parâmetro de registro opcional <code>options</code> pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: uma duração que controla o tempo de espera antes de abandonar uma tentativa conexão com o servidor. O valor padrão é dependente do driver.</li>\r\n    <li><code>CommandTimeout </code>: uma duração que controla por quanto tempo a consulta do lado do servidor pode ser executada antes de ser cancelada. O valor padrão é dependente do driver.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Liste as tabelas no Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Retorna uma tabela com o conteúdo do relatório do Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Efetua uma chamada ao ponto de extremidade de relatório especificado do Webtrends e retorna todos os dados como uma tabela.",
        "Documentation.Examples": [
          {
            "Description": "Efetua uma chamada ao ponto de extremidade do relatório de visitantes do Webtrends para dados nos últimos 30 dias",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Uma tabela de dados de visitantes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Retorna o conteúdo de VisualQuery (vqr), relatórios ou funções publicadas pelo software RH Zucchetti",
        "Documentation.Examples": [
          {
            "Description": "Lista de Solicitações para colaboradores",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Retorna uma lista de domínios do Active Directory na mesma floresta do domínio especificado ou do domínio do computador atual, caso nenhuma tenha sido especificada.",
        "Documentation.LongDescription": "Retorna uma lista de domínios do Active Directory na mesma floresta do domínio especificado ou do domínio do computador atual, caso nenhuma tenha sido especificada.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Retorna o resultado da execução de uma consulta nativa em uma fonte de dados ADO.NET.",
        "Documentation.LongDescription": "Retorna o resultado de <code>query</code> em execução com uma cadeia de conexão <code>connectionString</code> usando o provedor ADO.NET <code>providerName</code>. <code>connectionString</code> pode ser texto ou um registo de pares de valores da propriedade. Os valores da propriedade podem ser texto ou número. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla por quanto tempo a consulta do servidor tem permiss&#227;o para ser executada at&#233; que seja cancelada. O valor padr&#227;o &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Um valor l&#243;gico (true/false) que determina se as op&#231;&#245;es de cadeia de conex&#227;o compat&#237;veis com o SQL Server devem ser produzidas para a autentica&#231;&#227;o do Windows. O valor padr&#227;o &#233; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Retorna os conjuntos de relatórios ao Adobe Analytics.",
        "Documentation.LongDescription": "Retorna uma tabela de pacotes multidimensionais do Adobe Analytics. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as opções a seguir:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Um l&#243;gica (true/false) que define se as tabelas agrupadas por seus nomes de esquema ser&#227;o exibidas (o padr&#227;o &#233; false).</li>\r\n<li><code>MaxRetryCount</code> : O n&#250;mero de tentativas a serem executadas ao sondar o resultado da consulta. O valor padr&#227;o &#233; 120.</li>\r\n<li><code>RetryInterval</code> : A dura&#231;&#227;o do tempo entre as tentativas de nova tentativa. O valor padr&#227;o &#233; 1 segundo.</li>\r\n<li><code>Implementation</code> : Especifica a vers&#227;o da API do Adobe Analytics. Os valores v&#225;lidos s&#227;o: &quot;2.0&quot;. O padr&#227;o usa a vers&#227;o 1.4 da API.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "LLAP do Hive",
        "Documentation.Caption": null,
        "Documentation.Description": "Importar dados de um LLAP do Hive",
        "Documentation.LongDescription": "\r\nRetorna uma lista de tabelas do LLAP do Hive especificada pelo <code>database</code> no <code>server</code> do LLAP do Hive usando o <code>protocol</code> selecionado. Um número da porta pode ser especificado opcionalmente com o servidor, separado por dois-pontos. O Protocolo de Transporte Thrift é um tipo enumerado com os valores \"Standard\" e \"HTTP\". Um parâmetro <code>options</code> opcional pode ser especificado para controlar as seguintes opções:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: uma duração que controla quanto tempo esperar antes de abandonar uma tentativa de estabelecer uma conexão com o servidor. O valor padrão é dependente do driver.</li>\r\n        <li><code>CommandTimeout</code>: uma duração que controla quanto tempo a consulta do lado do servidor tem permissão para ser executada antes de ser cancelada. O valor padrão é dependente do driver.</li>\r\n</ul>\r\nO parâmetro <code>options</code> é especificado como [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Supondo que hoje seja 15/6/2017, obter dados de resumos entre 1/5/2017 e 15/6/2017",
            "Code": "deixe\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          resultado = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      em\r\n          resultado",
            "Result": "A função retornará dados de resumos entre 1/5/2017 e 15/6/2017"
          },
          {
            "Description": "Supondo que hoje seja 15/6/2017, obter dados de resumos de abril de 2017.",
            "Code": "deixe\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          resultado = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      em\r\n          resultado",
            "Result": "A função retornará dados entre 1/4/2017 e 30/4/2017"
          },
          {
            "Description": "Supondo que hoje seja 15/6/2017, obter dados de resumos de abril de 2017 até o momento.",
            "Code": "deixe\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Resumos\" ],\r\n          resultado = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      em\r\n          resultado",
            "Result": "A função retornará dados entre 1/4/2017 e 15/6/2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Gerenciamento de Custos do Azure",
        "Documentation.Description": "Gerenciamento de Custos do Azure",
        "Documentation.DisplayName": "Gerenciamento de Custos do Azure",
        "Documentation.LongDescription": "Gerenciamento de Custos do Azure",
        "Documentation.Name": "Gerenciamento de Custos do Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Insira os nomes da organização e do projeto.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Retorna uma tabela de feeds OData oferecidos pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Conecte-se com a sua instância do Dataverse (Dynamics 365 e PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Mescla a tabela de dimensão especificada no contexto de filtro do cubo e altera a granularidade dimensional do contexto do filtro, expandindo o conjunto especificado de atributos de dimensão.",
        "Documentation.LongDescription": "Mescla a tabela de dimensão especificada <code>dimensionSelector</code> no contexto de filtro <code>cube</code> do cubo e altera a granularidade dimensional do contexto de filtro, expandindo o conjunto especificado <code>attributeNames</code> de atributos de dimensão. Os atributos de dimensão são adicionados à exibição tabular com as colunas <code>newColumnNames</code>, ou <code>attributeNames</code> se não forem especificados.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Adiciona uma coluna ao cubo que contém os resultados da medida aplicada ao contexto de cada linha.",
        "Documentation.LongDescription": "Adiciona uma coluna com o nome <code>column</code> ao <code>cube</code> que contém os resultados da medida <code>measureSelector</code> aplicada ao contexto de cada linha. A aplicação de medida é afetada por alterações feitas na granularidade da dimensão e na divisão. Os valores de medida serão ajustados após determinadas operações de cubo serem executadas.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Insira o seu ambiente ou a sua empresa do Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Retorna uma tabela em que há dados relevantes do Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Insira o seu ambiente ou a sua empresa do Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Retorna uma tabela em que há dados relevantes do Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Insira o seu ambiente ou a sua empresa do Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Retorna uma tabela em que há dados relevantes do Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Insira o seu ambiente ou a sua empresa do Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Retorna uma tabela em que há dados relevantes do Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Retorna o conteúdo da pasta de trabalho atual do Excel.",
        "Documentation.LongDescription": "Retorna o conteúdo da pasta de trabalho atual do Excel. Retorna tabelas, intervalos nomeados e matrizes dinâmicas. Ao contrário de <code>Excel.Workbook</code>, ela não retorna planilhas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Retorna um sumário de uma conta do Microsoft Exchange.",
        "Documentation.LongDescription": "Retorna um sumário da conta do Microsoft Exchange <code>mailboxAddress</code>. Se <code>mailboxAddress</code> não for especificado, a conta padrão para a credencial será usada.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Warehouse",
        "Documentation.Caption": "Warehouse",
        "Documentation.Description": "Importa dados do Warehouse",
        "Documentation.LongDescription": "Importa dados do Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Retorna contas do Google Analytics.",
        "Documentation.LongDescription": "Retorna contas do Google Analytics que são acessíveis pela credencial atual.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Importe dados de um banco de dados Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Retorna uma tabela listando os projetos disponíveis no Google BigQuery. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: uma duração que controla quanto tempo esperar antes de abandonar uma tentativa de fazer uma conexão com o servidor. O valor padrão é o valor de Tempo Limite de Conexão ODBC.</li>\r\n        <li><code>CommandTimeout</code>: uma duração que controla por quanto tempo a consulta do lado do servidor pode ser executada antes de ser cancelada.</li>\r\n        <li><code>BillingProject</code>: ID do projeto de cobrança. O valor padrão é o primeiro projeto disponível.</li>\r\n        <li><code>UseStorageApi</code>: especifica se a API de Armazenamento do BigQuery deve ser usada para grandes conjuntos de resultados. O valor padrão é true para usar a API de Armazenamento. Defina como false para não usar a API de Armazenamento</li>\r\n      </ul>\r\n    O parâmetro de registro é especificado como [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Liste os projetos disponíveis no Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Importar dados de um Lakehouse",
        "Documentation.Description": "Importar dados de um Lakehouse",
        "Documentation.LongDescription": "Conecte-se a todos os fluxos de dados que você tem acesso e escolha as entidades que deseja usar"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Retorna uma tabela com os dados-chave do MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Retorna uma tabela com os dados-chave do MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Retorna uma tabela com os dados-chave do MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Uma tabela com os dados-chave do MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Retorna uma tabela de atividades de lead.",
        "Documentation.LongDescription": "Realiza uma chamada ao ponto de extremidade da API REST de Marketo em <code>url</code>/rest/v1/activities.json. Todas as atividades na lista <code>activityIds</code> ocorridas desde <code>startTime</code> são retornadas.",
        "Documentation.Examples": [
          {
            "Description": "Acessa uma tabela das atividades de \"Visitas à pagina da Web\" desde 1º de novembro de 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Uma tabela com detalhes de todas as atividades de \"Visitas à pagina da Web\" desde 1º de novembro"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"selecionar * de PVE_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI fluxos de dados (Herdado)",
        "Documentation.Caption": "Importar dados de um fluxo de dados do Power BI",
        "Documentation.LongDescription": "Conecte-se a todos os fluxos de dados do Power BI que você tem acesso e escolha as entidades que deseja usar."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Datamarts",
        "Documentation.Caption": "Datamarts",
        "Documentation.Description": "Importa dados do Datamarts",
        "Documentation.LongDescription": "Importa dados do Datamarts"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Fluxos de dados",
        "Documentation.Caption": "Importar dados de um fluxo de dados",
        "Documentation.Description": "Importar dados de um fluxo de dados",
        "Documentation.LongDescription": "Conecte-se a todos os fluxos de dados que você tem acesso e escolha as entidades que deseja usar"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importar dados do QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Retorna uma lista de tabela nas tabelas disponíveis no QuickBooks Online. Um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: uma duração que controla quanto tempo esperar antes de abandonar uma tentativa de fazer uma conexão com o servidor.</li>\r\n            <li><code>CommandTimeout</code>: uma duração que controla por quanto tempo uma consulta de lado do servidor pode ser executada antes de ser cancelada.</li>\r\n          </ul>\r\n        O parâmetro de registro é especificado como [option1 = value1, option2 = value2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Retorna os objetos da conta do Salesforce.",
        "Documentation.LongDescription": "Retorna os objetos na conta do Salesforce fornecidos nas credenciais. A conta será conectada por meio do ambiente <code>loginUrl</code> fornecido. Se nenhum ambiente for fornecido, então a conta será conectada à produção (https://login.salesforce.com). Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se as propriedades de navega&#231;&#227;o nos valores retornados ser&#227;o geradas (o padr&#227;o &#233; false).</li>\r\n<li><code>ApiVersion</code> : A vers&#227;o da API do Salesforce a ser usada nesta consulta. Quando n&#227;o houver especifica&#231;&#227;o, a vers&#227;o 29.0 da API ser&#225; usada.</li>\r\n<li><code>Timeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que a solicita&#231;&#227;o para o servidor seja abandonada. O valor padr&#227;o &#233; espec&#237;fico da origem.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Retorna os relatórios da conta do Salesforce.",
        "Documentation.LongDescription": "Retorna os relatórios na conta do Salesforce fornecidos nas credenciais. A conta será conectada por meio do ambiente <code>loginUrl</code> fornecido. Se nenhum ambiente for fornecido, então a conta será conectada à produção (https://login.salesforce.com). Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>ApiVersion</code> : A vers&#227;o da API do Salesforce a ser usada nesta consulta. Quando n&#227;o houver especifica&#231;&#227;o, a vers&#227;o 29.0 da API ser&#225; usada.</li>\r\n<li><code>Timeout</code> : Uma dura&#231;&#227;o que controla o tempo de espera at&#233; que a solicita&#231;&#227;o para o servidor seja abandonada. O valor padr&#227;o &#233; espec&#237;fico da origem.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Retorna InfoCubes e consultas em um sistema SAP Business Warehouse agrupado por InfoArea.",
        "Documentation.LongDescription": "Retorna uma tabela de InfoCubes e consultas agrupadas por InfoArea de uma instância do SAP Business Warehouse no servidor <code>server</code> com o número do sistema <code>systemNumberOrSystemId</code> e a ID do Cliente <code>clientId</code>. Um parâmetro de registro opcional, <code>optionsOrLogonGroup</code>, pode ser especificado para controlar as opções a seguir:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Retorna uma tabela de planilhas, relatórios, pastas e workspaces da API do Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Retorna uma tabela aninhada das planilhas, relatórios, pastas e workspaces disponíveis da API do Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Retorna planilhas, pastas, relatórios e workspaces disponíveis no nível superior da hierarquia do Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Uma tabela de pastas, relatórios e workspaces do nível superior da hierarquia do Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Retorna uma tabela de métricas disponíveis da API do SparkPost v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Essa função pode ser usada para recuperar dados de um determinado ponto de extremidade de \"Métricas\" da API do SparkPost v1. Ao atualizar essas tabelas ou fazer chamadas à API do SparkPost usando esse conector, lembre-se de que a API do SparkPost tem um limite de taxa de API estrito. Se o código de status 429 for retornado pelo servidor SparkPost, você terá atingido o limite de taxa e precisará esperar um pouco para fazer mais chamadas. Ao escolher um valor para o parâmetro de Número de dias, observe que a API armazena apenas 6 meses de dados válidos.",
        "Documentation.Examples": [
          {
            "Description": "Recupera as métricas de capacidade de entrega count_sent e count_rejected de todas as campaign_ids agregadas nos últimos três dias. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabela"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Realiza uma chamada à API da Faixa.",
        "Documentation.LongDescription": "Realiza uma chamada para a API da faixa em https://api.stripe.com/v1/<code>método</code>, com registro <code>additionalParameters</code> considerado como parâmetros aditcionais e lista <code>ColumnNames</code> de nomes de coluna esperados. A Versão da Faixa 2015-10-16 é usada.",
        "Documentation.Examples": [
          {
            "Description": "Retorna uma tabela de eventos criados após 1º de novembro de 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Uma tabeta com os eventos especificados para a conta atual da Faixa"
          },
          {
            "Description": "Retorna uma tabela com todos os SKUs",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Uma tabela com todos os SKUs para a conta atual da Faixa"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Retorna uma tabela listando as tabelas e funções disponíveis para a Faixa.",
        "Documentation.LongDescription": "Retorna uma tabela listando as tabelas e funções disponíveis para a Faixa."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Workspace do Azure Synapse Analytics",
        "Documentation.Caption": "Workspace do Azure Synapse Analytics",
        "Documentation.LongDescription": "Conector PQ para o workspace do Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Adiciona uma coluna com o nome especificado. O valor é computado usando a função de seleção especificada com cada linha assumida como entrada.",
        "Documentation.LongDescription": "Adiciona uma coluna denominada <code>newColumnName</code> à tabela <code>table</code>. Os valores da coluna são computados por meio da função de seleção especificada <code>columnGenerator</code> com cada linha assumida como entrada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adicione uma coluna numérica chamada \"TotalPrice\" à tabela, com cada valor sendo a soma das colunas [Preço] e [Remessa].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Adiciona uma nova coluna com valores representativos obtidos pelos valores de agrupamento difuso da coluna especificada na tabela.",
        "Documentation.LongDescription": "Adiciona uma nova coluna <code>newColumnName</code> a <code>table</code> com valores representantes de <code>columnName</code>. Os representantes são obtidos pela correspondência difusa de valores em <code>columnName</code>, para cada linha.\r\n    <p>Um conjunto opcional de <code>options</code> pode ser incluído para especificar como comparar as colunas de chave. As opções incluem: \r\n    <ul>\r\n<li><code>Culture</code> : Permite agrupar registros com base em regras espec&#237;ficas da cultura. Pode ser qualquer nome de cultura v&#225;lido. Por exemplo, a op&#231;&#227;o de Cultura &quot;ja-JP&quot; agrupa registros com base na cultura Japonesa. O valor padr&#227;o &#233; &quot;&quot;, que agrupa registros com base na cultura Ingl&#234;s Invari&#225;vel.</li>\r\n<li><code>IgnoreCase</code> : Um valor l&#243;gico (true/false) que permite o agrupamento de chaves sem diferenciar mai&#250;sculas de min&#250;sculas. Por exemplo, quando &#233; true, &quot;Uvas&quot; &#233; agrupado com &quot;uvas&quot;. O valor padr&#227;o &#233; true.</li>\r\n<li><code>IgnoreSpace</code> : Um valor l&#243;gico (true/false) que permite a combina&#231;&#227;o de partes de texto para encontrar grupos. Por exemplo, quando &#233; true, &quot;U vas&quot; &#233; agrupado com &quot;Uvas&quot;. O valor padr&#227;o &#233; true.</li>\r\n<li><code>SimilarityColumnName</code> : Um nome para a coluna que mostra a similaridade entre um valor de entrada e o valor representativo dessa entrada. O valor padr&#227;o &#233; nulo e, nesse caso, n&#227;o ser&#225; adicionada uma nova coluna de similaridades.</li>\r\n<li><code>Threshold</code> : Um n&#250;mero entre 0,00 e 1,00 que especifica a pontua&#231;&#227;o de similaridade na qual dois valores ser&#227;o agrupados.\r\n    Por exemplo, &quot;Uvas&quot; e &quot;Uas&quot; (sem o &quot;v&quot;) s&#227;o agrupados apenas se esta op&#231;&#227;o estiver definida para menos de 0,90.\r\n    Um limite de 1,00 permite apenas correspond&#234;ncias exatas.\r\n    (Observe que uma &quot;correspond&#234;ncia exata&quot; difusa pode ignorar diferen&#231;as como mai&#250;sculas, ordem das palavras e pontua&#231;&#227;o.)\r\n    O valor padr&#227;o &#233; 0,80.</li>\r\n<li><code>TransformationTable</code> : Uma tabela que permite agrupar registros com base em mapeamentos de valores personalizados. Ela deve conter as colunas &quot;De&quot; e &quot;At&#233;&quot;. Por exemplo, &quot;Uvas&quot; &#233; agrupado com &quot;Passas&quot; quando uma tabela de transforma&#231;&#227;o &#233; fornecida com a coluna &quot;De&quot; contendo &quot;Uvas&quot; e a coluna &quot;At&#233;&quot; contendo &quot;Passas&quot;. Observe que a transforma&#231;&#227;o ser&#225; aplicada a todas as ocorr&#234;ncias do texto na tabela de transforma&#231;&#227;o. Com a tabela de transforma&#231;&#227;o acima, &quot;Uvas s&#227;o doces&quot; tamb&#233;m ser&#225; agrupado com &quot;Passas s&#227;o doces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Encontre os valores representativos para a localização dos funcionários.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Executa uma junção entre tabelas nas colunas fornecidas e produz o resultado de junção em uma nova coluna.",
        "Documentation.LongDescription": "Une as linhas de <code>table1</code> às linhas de <code>table2</code> com base na igualdade dos valores das colunas de chave selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>). Os resultados são inseridos na coluna denominada <code>newColumnName</code>.\r\nEssa função se comporta de maneira similar a Table.Join com um JoinKind de LeftOuter; a diferença é que os resultados de junção são apresentados de forma aninhada, e não nivelada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adicione uma coluna de junção a ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) denominada \"preço/estoque\" a partir da tabela ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) associada em [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Adiciona uma chave ao tipo de tabela especificado.",
        "Documentation.LongDescription": "Adicione uma chave a <code>table</code>, em que <code>columns</code> é a lista de nomes de coluna que define a chave e <code>isPrimary</code> especifica se a chave é primária.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adiciona uma chave primária de coluna única a uma tabela.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Acrescenta uma coluna com a classificação de uma ou mais colunas.",
        "Documentation.LongDescription": "Acrescenta uma coluna chamada <code>newColumnName</code> ao <code>table</code> com a classificação de uma ou mais colunas descritas por <code>comparisonCriteria</code>.\r\nA opção RankKind em <code>options</code> pode ser usada por usuários avançados para escolher um método de classificação mais específico.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Adicione uma coluna chamada \"RevenueRank\" à tabela que classifica a coluna \"Receita\" do mais alto para o mais baixo.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Agrega uma coluna de tabelas em várias colunas na tabela que as contém.",
        "Documentation.LongDescription": "Agrega tabelas em <code>table</code>[<code>column</code>] em várias colunas que contêm valores de agregação para as tabelas. <code>aggregations</code> é usado para especificar as colunas que contêm as tabelas a serem agregadas, as funções de agregação a serem aplicadas às tabelas para gerar seus valores, e os nomes das colunas agregadas a serem criadas.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agregue colunas de tabelas em <code>[t]</code> na tabela <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> na soma de <code>[t.a]</code>, os valores mínimo e máximo de <code>[t.b]</code>, e a contagem de valores em <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Mantém o deslocamento inicial, e alterna o uso e não uso das linhas a seguir.",
        "Documentation.LongDescription": "Mantém o deslocamento inicial, e alterna o uso e não uso das linhas a seguir.\r\n    <ul>\r\n       <li><code>table</code>: A tabela de entrada.</li>\r\n       <li><code>offset</code>: O número de linhas a serem mantidos antes de iniciar as iterações.</li>\r\n       <li><code>skip</code>: O número de linhas a serem removidos em cada iteração.</li>\r\n       <li><code>take</code>: O número de linhas a serem mantidos em cada iteração.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Retornar uma tabela a partir da tabela que, começando na primeira linha, ignora 1 valor e depois mantém 1 valor.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Combina as colunas especificadas em uma nova coluna usando a função de combinação especificada.",
        "Documentation.LongDescription": "Combina as colunas especificadas em uma nova coluna usando a função de combinação especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Combinar o sobrenome e o primeiro nome em uma nova coluna, separados por uma vírgula.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Combina as colunas especificadas em uma nova coluna com valor de registro, na qual cada registro tem nomes e valores de campo correspondentes aos nomes e valores de coluna das colunas combinadas.",
        "Documentation.LongDescription": "Combina as colunas especificadas de <code>table</code> em uma nova coluna com valor de registro chamada <code>newColumnName</code> em que cada registro tem nomes de campos e valores correspondentes aos nomes de coluna e aos valores das colunas combinadas. Se um registro for especificado para <code>options</code>, as seguintes opções poderão ser fornecidas: \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: quando especificado como texto, indica que o nome de coluna especificado deve ser tratado como o nome de exibição do registro. Isso não precisa ser uma das colunas no próprio registro. </li>\r\n     <li> <code>TypeName</code>: quando especificado como texto, fornece um nome de tipo lógico para o registro resultante que pode ser usado durante o carregamento de dados para o comportamento de unidade pelo ambiente de carregamento. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Duplica uma coluna com o nome especificado. Os valores e o tipo são copiados da coluna de origem.",
        "Documentation.LongDescription": "Duplica a coluna denominada <code>columnName</code> para a tabela <code>table</code>. Os valores e o tipo da coluna <code>newColumnName</code> são copiados da coluna <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Duplique a coluna \"a\" para uma coluna denominada \"copied column\" na tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Expande uma coluna de registros em colunas com cada um dos valores.",
        "Documentation.LongDescription": "Dada a <code>column</code> de registros na entrada <code>table</code>, crie uma tabela com uma coluna para cada campo no registro. Opcionalmente, <code>newColumnNames</code> pode ser especificado para assegurar nomes exclusivos para as colunas da nova tabela.\r\n    <ul>\r\n        <li><code>table</code>: A tabela original com a coluna de registro a ser expandida. </li>\r\n        <li><code>column</code>: A coluna a ser expandida.</li>\r\n        <li><code>fieldNames</code>: A lista de campos a ser expandida em colunas na tabela.</li>\r\n        <li><code>newColumnNames</code>: A lista de nomes de coluna a serem atribuídos às novas colunas. Os novos nomes de coluna não podem duplicar nenhuma coluna na nova tabela.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Expanda a coluna [a] na tabela <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> em três colunas: \"aa\", \"bb\" e \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Expande uma coluna de registros ou uma coluna de tabelas em várias colunas na tabela que as contém.",
        "Documentation.LongDescription": "Expande tabelas em <code>table</code>[<code>column</code>] em várias linhas e colunas. <code>columnNames</code> é usado para selecionar as colunas a serem expandidas na tabela interna. Especifique <code>newColumnNames</code> para evitar conflitos entre as colunas existentes e as colunas novas.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Expanda as colunas de tabela em <code>[a]</code> na tabela <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> em três colunas: <code>[t.a]</code>, <code>[t.b]</code> e <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Agrupa linhas na tabela com base na correspondência difusa de chaves.",
        "Documentation.LongDescription": "Agrupa as linhas de <code>table</code> pela correspondência difusa de valores na coluna especificada, <code>key</code>, para cada linha.\r\n    Para cada grupo, um registro é construído contendo as colunas de chave (e seus valores) juntamente com as colunas agregadas especificadas por <code>aggregatedColumns</code>.\r\n    Essa função não pode garantir o retorno de uma ordem fixa de linhas.\r\n    <p>Um conjunto opcional de <code>options</code> pode ser incluído para especificar como comparar as colunas de chave. As opções incluem: \r\n    <ul>\r\n<li><code>Culture</code> : Permite agrupar registros com base em regras espec&#237;ficas da cultura. Pode ser qualquer nome de cultura v&#225;lido. Por exemplo, a op&#231;&#227;o de Cultura &quot;ja-JP&quot; agrupa registros com base na cultura Japonesa. O valor padr&#227;o &#233; &quot;&quot;, que agrupa registros com base na cultura Ingl&#234;s Invari&#225;vel.</li>\r\n<li><code>IgnoreCase</code> : Um valor l&#243;gico (true/false) que permite o agrupamento de chaves sem diferenciar mai&#250;sculas de min&#250;sculas. Por exemplo, quando &#233; true, &quot;Uvas&quot; &#233; agrupado com &quot;uvas&quot;. O valor padr&#227;o &#233; true.</li>\r\n<li><code>IgnoreSpace</code> : Um valor l&#243;gico (true/false) que permite a combina&#231;&#227;o de partes de texto para encontrar grupos. Por exemplo, quando &#233; true, &quot;U vas&quot; &#233; agrupado com &quot;Uvas&quot;. O valor padr&#227;o &#233; true.</li>\r\n<li><code>SimilarityColumnName</code> : Um nome para a coluna que mostra a similaridade entre um valor de entrada e o valor representativo dessa entrada. O valor padr&#227;o &#233; nulo e, nesse caso, n&#227;o ser&#225; adicionada uma nova coluna de similaridades.</li>\r\n<li><code>Threshold</code> : Um n&#250;mero entre 0,00 e 1,00 que especifica a pontua&#231;&#227;o de similaridade na qual dois valores ser&#227;o agrupados.\r\n    Por exemplo, &quot;Uvas&quot; e &quot;Uas&quot; (sem o &quot;v&quot;) s&#227;o agrupados apenas se esta op&#231;&#227;o estiver definida para menos de 0,90.\r\n    Um limite de 1,00 permite apenas correspond&#234;ncias exatas.\r\n    (Observe que uma &quot;correspond&#234;ncia exata&quot; difusa pode ignorar diferen&#231;as como mai&#250;sculas, ordem das palavras e pontua&#231;&#227;o.)\r\n    O valor padr&#227;o &#233; 0,80.</li>\r\n<li><code>TransformationTable</code> : Uma tabela que permite agrupar registros com base em mapeamentos de valores personalizados. Ela deve conter as colunas &quot;De&quot; e &quot;At&#233;&quot;. Por exemplo, &quot;Uvas&quot; &#233; agrupado com &quot;Passas&quot; quando uma tabela de transforma&#231;&#227;o &#233; fornecida com a coluna &quot;De&quot; contendo &quot;Uvas&quot; e a coluna &quot;At&#233;&quot; contendo &quot;Passas&quot;. Observe que a transforma&#231;&#227;o ser&#225; aplicada a todas as ocorr&#234;ncias do texto na tabela de transforma&#231;&#227;o. Com a tabela de transforma&#231;&#227;o acima, &quot;Uvas s&#227;o doces&quot; tamb&#233;m ser&#225; agrupado com &quot;Passas s&#227;o doces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agrupar a tabela adicionando uma coluna de agregação [Count] que contém o número de funcionários em cada local (\"cada Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Une as linhas das duas tabelas com correspondência difusa com base nas chaves fornecidas.",
        "Documentation.LongDescription": "<p>Une as linhas de <code>table1</code> com as linhas de <code>table2</code> com base em uma correspondência difusa dos valores das colunas de chave selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>).</p>\r\n<p>A correspondência difusa é uma comparação com base na similaridade do texto, não em sua igualdade.</p>\r\n<p>Por padrão, é executada uma junção interna, porém um <code>joinKind</code> opcional pode ser incluído para especificar o tipo de junção. As opções incluem:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Um conjunto opcional de <code>joinOptions</code> pode ser incluído para especificar como comparar as colunas de chave. As opções incluem:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Um n&#250;mero entre 1 e 8 que especifica o n&#250;mero de threads paralelos a serem usados para a correspond&#234;ncia difusa. O valor padr&#227;o &#233; 1.</li>\r\n<li><code>Culture</code> : Permite corresponder registros com base em regras espec&#237;ficas da cultura. Pode ser qualquer nome de cultura v&#225;lido. Por exemplo, a op&#231;&#227;o de Cultura &quot;ja-JP&quot; corresponde registros com base na cultura Japonesa. O valor padr&#227;o &#233; &quot;&quot;, que corresponde registros com base na cultura Ingl&#234;s Invari&#225;vel.</li>\r\n<li><code>IgnoreCase</code> : Um valor l&#243;gico (true/false) que permite a correspond&#234;ncia de chaves sem diferenciar mai&#250;sculas de min&#250;sculas. Por exemplo, quando &#233; true, &quot;Uvas&quot; &#233; correspondido com &quot;uvas&quot;. O valor padr&#227;o &#233; true.</li>\r\n<li><code>IgnoreSpace</code> : Um valor l&#243;gico (true/false) que permite a combina&#231;&#227;o de partes de texto para encontrar correspond&#234;ncias. Por exemplo, quando &#233; true, &quot;U vas&quot; &#233; agrupado com &quot;Uvas&quot;. O valor padr&#227;o &#233; true.</li>\r\n<li><code>NumberOfMatches</code> : Um n&#250;mero inteiro que especifica o n&#250;mero m&#225;ximo de linhas correspondentes que podem ser retornadas para cada linha de entrada. Por exemplo, o valor 1 retornar&#225; no m&#225;ximo uma linha correspondente para cada linha de entrada. Se essa op&#231;&#227;o n&#227;o for fornecida, todas as linhas correspondentes ser&#227;o retornadas.</li>\r\n<li><code>SimilarityColumnName</code> : Um nome para a coluna que mostra a similaridade entre um valor de entrada e o valor representativo dessa entrada. O valor padr&#227;o &#233; nulo e, nesse caso, n&#227;o ser&#225; adicionada uma nova coluna de similaridades.</li>\r\n<li><code>Threshold</code> : Um n&#250;mero entre 0,00 e 1,00 que especifica a pontua&#231;&#227;o de similaridade na qual dois valores ser&#227;o correspondidos.\r\n    Por exemplo, &quot;Uvas&quot; e &quot;Uas&quot; (sem o &quot;v&quot;) s&#227;o correspondidos apenas se esta op&#231;&#227;o estiver definida para menos de 0,90.\r\n    Um limite de 1,00 permite apenas correspond&#234;ncias exatas.\r\n    (Observe que uma &quot;correspond&#234;ncia exata&quot; difusa pode ignorar diferen&#231;as como mai&#250;sculas e min&#250;sculas, ordem das palavras e pontua&#231;&#227;o.)\r\n    O valor padr&#227;o &#233; 0,80.</li>\r\n<li><code>TransformationTable</code> : Uma tabela que permite corresponder registros com base em mapeamentos de valores personalizados. Ela deve conter as colunas &quot;De&quot; e &quot;At&#233;&quot;. Por exemplo, &quot;Uvas&quot; &#233; correspondido com &quot;Passas&quot; quando uma tabela de transforma&#231;&#227;o &#233; fornecida com a coluna &quot;De&quot; contendo &quot;Uvas&quot; e a coluna &quot;At&#233;&quot; contendo &quot;Passas&quot;. Observe que a transforma&#231;&#227;o ser&#225; aplicada a todas as ocorr&#234;ncias do texto na tabela de transforma&#231;&#227;o. Com a tabela de transforma&#231;&#227;o acima, &quot;Uvas s&#227;o doces&quot; tamb&#233;m ser&#225; correspondido com &quot;Passas s&#227;o doces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Junção difusa interna esquerda das duas tabelas com base em [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Executa uma junção difusa entre as tabelas nas colunas fornecidas e insere o resultado da junção em uma nova coluna.",
        "Documentation.LongDescription": "<p>Une as linhas de <code>table1</code> com as linhas de <code>table2</code> com base na correspondência difusa dos valores das colunas de chave selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>). Os resultados são retornados em uma nova coluna chamada <code>newColumnName</code>.</p>\r\n<p>A correspondência difusa é uma comparação com base na similaridade do texto, não na igualdade.</p>\r\n<p>O <code>joinKind</code> opcional especifica o tipo de junção a ser executado. Por padrão, uma junção externa esquerda é executada quando não há um <code>joinKind</code> especificado. As opções incluem:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Um conjunto opcional de <code>joinOptions</code> pode ser incluído para especificar como comparar as colunas de chave. As opções incluem:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Um n&#250;mero entre 1 e 8 que especifica o n&#250;mero de threads paralelos a serem usados para a correspond&#234;ncia difusa. O valor padr&#227;o &#233; 1.</li>\r\n<li><code>Culture</code> : Permite corresponder registros com base em regras espec&#237;ficas da cultura. Pode ser qualquer nome de cultura v&#225;lido. Por exemplo, a op&#231;&#227;o de Cultura &quot;ja-JP&quot; corresponde registros com base na cultura Japonesa. O valor padr&#227;o &#233; &quot;&quot;, que corresponde registros com base na cultura Ingl&#234;s Invari&#225;vel.</li>\r\n<li><code>IgnoreCase</code> : Um valor l&#243;gico (true/false) que permite a correspond&#234;ncia de chaves sem diferenciar mai&#250;sculas de min&#250;sculas. Por exemplo, quando &#233; true, &quot;Uvas&quot; &#233; correspondido com &quot;uvas&quot;. O valor padr&#227;o &#233; true.</li>\r\n<li><code>IgnoreSpace</code> : Um valor l&#243;gico (true/false) que permite a combina&#231;&#227;o de partes de texto para encontrar correspond&#234;ncias. Por exemplo, quando &#233; true, &quot;U vas&quot; &#233; agrupado com &quot;Uvas&quot;. O valor padr&#227;o &#233; true.</li>\r\n<li><code>NumberOfMatches</code> : Um n&#250;mero inteiro que especifica o n&#250;mero m&#225;ximo de linhas correspondentes que podem ser retornadas para cada linha de entrada. Por exemplo, o valor 1 retornar&#225; no m&#225;ximo uma linha correspondente para cada linha de entrada. Se essa op&#231;&#227;o n&#227;o for fornecida, todas as linhas correspondentes ser&#227;o retornadas.</li>\r\n<li><code>SimilarityColumnName</code> : Um nome para a coluna que mostra a similaridade entre um valor de entrada e o valor representativo dessa entrada. O valor padr&#227;o &#233; nulo e, nesse caso, n&#227;o ser&#225; adicionada uma nova coluna de similaridades.</li>\r\n<li><code>Threshold</code> : Um n&#250;mero entre 0,00 e 1,00 que especifica a pontua&#231;&#227;o de similaridade na qual dois valores ser&#227;o correspondidos.\r\n    Por exemplo, &quot;Uvas&quot; e &quot;Uas&quot; (sem o &quot;v&quot;) s&#227;o correspondidos apenas se esta op&#231;&#227;o estiver definida para menos de 0,90.\r\n    Um limite de 1,00 permite apenas correspond&#234;ncias exatas.\r\n    (Observe que uma &quot;correspond&#234;ncia exata&quot; difusa pode ignorar diferen&#231;as como mai&#250;sculas e min&#250;sculas, ordem das palavras e pontua&#231;&#227;o.)\r\n    O valor padr&#227;o &#233; 0,80.</li>\r\n<li><code>TransformationTable</code> : Uma tabela que permite corresponder registros com base em mapeamentos de valores personalizados. Ela deve conter as colunas &quot;De&quot; e &quot;At&#233;&quot;. Por exemplo, &quot;Uvas&quot; &#233; correspondido com &quot;Passas&quot; quando uma tabela de transforma&#231;&#227;o &#233; fornecida com a coluna &quot;De&quot; contendo &quot;Uvas&quot; e a coluna &quot;At&#233;&quot; contendo &quot;Passas&quot;. Observe que a transforma&#231;&#227;o ser&#225; aplicada a todas as ocorr&#234;ncias do texto na tabela de transforma&#231;&#227;o. Com a tabela de transforma&#231;&#227;o acima, &quot;Uvas s&#227;o doces&quot; tamb&#233;m ser&#225; correspondido com &quot;Passas s&#227;o doces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Junção difusa interna esquerda das duas tabelas com base em [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Agrupa linhas na tabela que têm a mesma chave.",
        "Documentation.LongDescription": "Agrupar as linhas de <code>table</code> pelas colunas-chave definidas por <code>key</code>. O <code>key</code> pode ser um único nome de coluna ou uma lista de nomes de coluna.\r\n    Para cada grupo, um registro é construído contendo as colunas-chave (e seus valores), junto com quaisquer colunas agregadas especificadas por <code>aggregatedColumns</code>.\r\n    Opcionalmente, <code>groupKind</code> e <code>comparer</code> também podem ser especificadas.<br>\r\n    <br>\r\n    Se os dados já estiverem classificados pelas colunas-chave, então um <code>groupKind</code> de GroupKind.Local pode ser fornecido. Isso pode melhorar o desempenho do agrupamento em certos casos,\r\n    uma vez que todas as linhas com um determinado conjunto de valores-chave são consideradas contíguas.<br>\r\n    <br>\r\n    Ao passar por um <code>comparer</code>, observe que se ele trata chaves diferentes como iguais, uma linha pode ser colocada em um grupo cujas chaves diferem das suas.<br>\r\n    <br>\r\n    Essa função não garante a ordem das linhas que retorna.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agrupar a tabela adicionando uma coluna agregada [total] que contém a soma de preços (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Insira uma lista de linhas na tabela na posição especificada.",
        "Documentation.LongDescription": "Retorna uma tabela com a lista de linhas, <code>rows</code>, inseridas em <code>table</code> na posição especificada, <code>offset</code>. Cada coluna na linha a ser inserida deve corresponder aos tipos de coluna da tabela.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Inserir a linha na tabela na posição 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Inserir duas linhas na tabela na posição 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Une as duas linhas das duas tabelas correspondentes com base nas chaves especificadas.",
        "Documentation.LongDescription": "<p>Une as linhas de <code>table1</code> com as linhas de <code>table2</code> com base na igualdade dos valores das colunas de chave selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>).</p>\r\n<p>Por padrão, uma junção interna é executada, mas uma opcional <code>joinKind</code> pode ser incluída para especificar o tipo de junção. As opções incluem:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Um conjunto opcional de <code>keyEqualityComparers</code> pode ser incluído para especificar como comparar as colunas de chave. Esse recurso é somente para fins de uso interno.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Unir duas tabelas usando uma única coluna de chave.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Ingresse em duas tabelas com nomes de coluna em conflito, usando várias colunas de chave.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Retorna as linhas maiores usando os critérios especificados.",
        "Documentation.LongDescription": "Retorna as linhas maiores na <code>table</code>, com base na <code>comparisonCriteria</code>.\r\n    Depois que as linhas forem classificadas, o parâmetro <code>countOrCondition</code> deverá ser especificado para filtrar ainda mais o resultado. Observe que o algoritmo de classificação não garante um resultado fixo classificado. O parâmetro <code>countOrCondition</code> pode assumir vários formatos:\r\n    <ul>\r\n        <li> Se um número for especificado, uma lista de até <code>countOrCondition</code> itens em ordem crescente será retornada. </li>\r\n        <li> Se uma condição for especificada, uma lista dos itens que atenderem inicialmente à condição será retornada. Quando um item não atender à condição, nenhum outro item será considerado. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localizar a linha com o maior valor na coluna [a] com a condição [a] > 0 na tabela. As linhas são classificadas antes que o filtro seja aplicado.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Localizar a linha com o maior valor na coluna [a] com a condição [b] > 0 na tabela. As linhas são classificadas antes que o filtro seja aplicado.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Retorna as linhas menores usando os critérios especificados.",
        "Documentation.LongDescription": "Retorna as linhas menores na <code>table</code>, com base na <code>comparisonCriteria</code>. Depois que as linhas forem classificadas, o parâmetro <code>countOrCondition</code> deverá ser especificado para filtrar ainda mais o resultado. Observe que o algoritmo de classificação não garante um resultado fixo classificado. O parâmetro <code>countOrCondition</code> pode assumir vários formatos:\r\n    <ul>\r\n        <li> Se um número for especificado, uma lista de até <code>countOrCondition</code> itens em ordem crescente será retornada. </li>\r\n        <li> Se uma condição for especificada, uma lista dos itens que atenderem inicialmente à condição será retornada. Quando um item não atender à condição, nenhum outro item será considerado. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localizar a linha com o menor valor na coluna [a] com a condição [a] < 3 na tabela. As linhas são classificadas antes que o filtro seja aplicado.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Localizar a linha com o menor valor na coluna [a] com a condição [b] < 0 na tabela. As linhas são classificadas antes que o filtro seja aplicado.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Executa uma junção entre tabelas nas colunas fornecidas e produz o resultado de junção em uma nova coluna.",
        "Documentation.LongDescription": "<p>Une as linhas de <code>table1</code> com as linhas de <code>table2</code> com base na igualdade dos valores das colunas de chave selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>). Os resultados são inseridos na coluna denominada <code>newColumnName</code>.</p>\r\n<p>O <code>joinKind</code> opcional especifica o tipo de junção a ser executado. Por padrão, uma junção externa esquerda é executada se um <code>joinKind</code> não é especificado.</p>\r\n<p>Um conjunto opcional de <code>keyEqualityComparers</code> pode ser incluído para especificar como comparar as colunas de chave. No momento, este recurso é somente para fins de uso interno.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Unir duas tabelas usando uma única coluna de chave.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Dado um par de colunas que representam pares de atributo/valor, gira os dados na coluna de atributo para um título de coluna.",
        "Documentation.LongDescription": "Dado um par de colunas que representam pares de atributo/valor, gira os dados na coluna de atributo para um título de coluna.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Transforme os valores \"a\", \"b\" e \"c\" na coluna de atributo da tabela <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> em sua própria coluna.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Transforme os valores \"a\", \"b\" e \"c\" na coluna de atributo da tabela <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> em sua própria coluna.  O atributo \"c\" da chave \"x\" possui vários valores associados a ela; portanto, use a função List.Max para resolver o conflito.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Substitui o intervalo de linhas especificado pelas linhas fornecidas.",
        "Documentation.LongDescription": "Substitui um número especificado de linhas, <code>count</code>, na entrada <code>table</code> pelo <code>rows</code> especificado, iniciando após a <code>offset</code>. O parâmetro <code>rows</code> é uma lista de registros.\r\n    <ul>\r\n       <li><code>table</code>: A tabela em que a substituição é executada.</li>\r\n       <li><code>offset</code>: O número de linhas a serem ignoradas antes de fazer a substituição.</li>\r\n       <li><code>count</code>: O número de linhas a serem substituídas.</li>\r\n       <li><code>rows</code>: A lista de registros de linha a serem inseridos no <code>table</code> no local especificado pelo <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Começando na posição 1, substituir três linhas.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Substitui um valor por outro nas colunas especificadas.",
        "Documentation.LongDescription": "Substitui <code>oldValue</code> por <code>newValue</code> nas colunas especificadas da <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Substitua o texto \"adeus\" por \"mundo\" na coluna B, correspondendo apenas ao valor inteiro.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Substitua o texto \"seu\" por \"ou\" na coluna B, correspondendo a qualquer parte do valor.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimize os nomes dos funcionários dos EUA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimize todas as colunas de funcionários dos EUA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Divide as colunas especificadas em um conjunto de colunas adicionais usando a função de divisão especificada.",
        "Documentation.LongDescription": "Divide as colunas especificadas em um conjunto de colunas adicionais usando a função de divisão especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Divide a coluna [Name] em duas na posição do \"i\"",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Converte um conjunto de colunas de uma tabela em pares de atributo/valor.",
        "Documentation.LongDescription": "Converte um conjunto de colunas de uma tabela em pares de atributo/valor, combinados com o restante dos valores em cada linha.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Transforme as colunas \"a\", \"b\" e \"c\" da tabela <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> em pares de atributo/valor.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Converte todas as colunas que não sejam um conjunto especificado em pares de atributo/valor.",
        "Documentation.LongDescription": "Converte todas as colunas que não sejam um conjunto especificado em pares de atributo/valor, combinados com o restante dos valores em cada linha.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Converte todas as colunas que não sejam um conjunto especificado em pares de atributo/valor, combinados com o restante dos valores em cada linha.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Análise Pessoal do Microsoft Teams",
        "Documentation.LongDescription": "<p>O conector de Análise do Teams permite obter insights sobre o uso que você faz do Teams. Estão disponíveis os dados da sua atividade pessoal no Teams, bem como das atividades nas Equipes das quais você é membro.</p>\r\n<p>Estão disponíveis os dados dos últimos 90 dias. </p>\r\n<p> Para obter detalhes sobre os tipos de dados disponíveis, confira a seguinte documentação da ajuda: </p>\r\n<ul>\r\n<li><b>Uso do Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Atividade do Usuário do Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Insira os nomes da organização e do projeto.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Retorna uma tabela de feeds OData oferecidos pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Retorna um formato binário que lê um valor binário.",
        "Documentation.LongDescription": "Retorna um formato binário que lê um valor binário.  Se <code>length</code> for especificado, o valor binário conterá esse número de bytes.  Se <code>length</code> não for especificado, o valor binário conterá os bytes restantes.  O <code>length</code> pode ser especificado como um número ou como um formato binário do comprimento que precede os dados binários.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Retorna um valor lógico baseado na verificação de igualdade sobre os dois valores fornecidos.",
        "Documentation.LongDescription": "Retorna um valor <code>logical</code> com base na verificação de igualdade dos dois valores fornecidos, <code>x</code> e <code>y</code>, usando o <code>x</code> fornecido<code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> é um <code>Comparer</code> que é usado para controlar a comparação.\r\n        Um comparador é uma função que aceita dois argumentos e retorna -1, 0 ou 1 se o primeiro valor for menor, igual ou maior que o segundo.\r\n        Os comparadores podem ser usados ​​para fornecer comparações sem diferenciar maiúsculas de minúsculas ou com reconhecimento de cultura e localidade.\r\n      </div>\r\n      <div>\r\n        Os seguintes comparadores internos estão disponíveis na linguagem da fórmula:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: usado para realizar uma comparação ordinal exata</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: usado para realizar uma comparação ordinal exata sem diferenciar maiúsculas de minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: usado para realizar uma comparação de reconhecimento de cultura</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Comparar \"1\" e \"A\" usando a localidade \"pt-BR\" para determinar se os valores são iguais.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Retorna a data e a hora atuais no fuso horário local. Esse valor é fixo e não será alterado com sucessivas chamadas.",
        "Documentation.LongDescription": "Retorna um valor <code>datetime</code> definido como a data e a hora atuais no sistema. Esse valor é fixo e não será alterado com as chamadas sucessivas, diferentemente de DateTime.LocalNow, que poderá retornar valores diferentes no decorrer da execução de uma expressão.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Retorna a data e a hora atuais no fuso horário local.",
        "Documentation.LongDescription": "Retorna um valor <code>datetime</code> definido como a data e a hora atuais no sistema.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Retorna a data e a hora atuais no fuso horário local. Esse valor é fixo e não será alterado com as chamadas sucessivas.",
        "Documentation.LongDescription": "Retorna um valor <code>datetime</code> definido como a data e a hora atuais no sistema. O valor retornado contém informações de fuso horário que representam o fuso horário local. Esse valor é fixo e não será alterado com as chamadas sucessivas, diferentemente de DateTimeZone.LocalNow, que poderá retornar valores diferentes no decorrer da execução de uma expressão.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Retorna a data e a hora atuais em UTC (fuso horário GMT). Esse valor é fixo e não será alterado com as chamadas sucessivas.",
        "Documentation.LongDescription": "Retorna a data e a hora atuais em UTC (fuso horário GMT). Esse valor é fixo e não será alterado com as chamadas sucessivas.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Retorna a data e a hora atuais no fuso horário local.",
        "Documentation.LongDescription": "Retorna um valor <code>datetimezone</code> definido como a data e a hora atuais no sistema.\r\n    O valor retornado contém informações de fuso horário que representam o fuso horário local.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Retorna a data e a hora atuais em UTC (fuso horário GMT).",
        "Documentation.LongDescription": "Retorna a data e a hora atuais em UTC (fuso horário GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a data e a hora atuais em UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Retorna um identificador opaco para a avaliação atualmente em execução.",
        "Documentation.LongDescription": "Retorna um identificador opaco para a avaliação atualmente em execução.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Retorna um identificador opaco para correlacionar as solicitações recebidas com as enviadas.",
        "Documentation.LongDescription": "Retorna um identificador opaco para correlacionar as solicitações recebidas com as enviadas.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Grava uma entrada de rastreamento, se o rastreamento estiver habilitado, e retorna o valor.",
        "Documentation.LongDescription": "Se o rastreamento está habilitado, grava um rastreamento <code>message</code> e retorna <code>value</code>. Um parâmetro opcional <code>delayed</code> especifica se a avaliação de <code>value</code> deve ser atrasada até que a mensagem seja rastreada. <code>traceLevel</code> pode assumir um dos seguintes valores:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code> e\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Rastreie a mensagem antes de invocar a função Text.From e retornar o resultado.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "O provedor de identidade padrão para o host atual.",
        "Documentation.LongDescription": "O provedor de identidade padrão para o host atual.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Acumula um valor de resumo a partir dos itens da lista.",
        "Documentation.LongDescription": "Acumula um valor de resumo a partir dos itens da lista <code>list</code>, usando <code>accumulator</code>.\r\n    Um parâmetro de semente opcional, <code>seed</code>, pode ser definido.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Acumula o valor de resumo a partir dos itens na lista {1, 2, 3, 4, 5} usando ((state, current) => state + current ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Gera uma lista de valores datetimezone a partir de um valor inicial, uma contagem e um valor de duração incremental.",
        "Documentation.LongDescription": "Retorna uma lista de valores <code>datetimezone</code> de tamanho <code>count</code>, iniciando em <code>start</code>. O incremento especificado, <code>step</code>, é um valor <code>duration</code> adicionado a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista de dez valores que comece em 5 minutos antes do dia do ano novo (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) e cujos valores sejam incrementados em um minuto (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Gera uma lista de valores datetime a partir de um valor inicial, uma contagem e um valor de duração incremental.",
        "Documentation.LongDescription": "Retorna uma lista de valores <code>datetime</code> de tamanho <code>count</code>, iniciando em <code>start</code>. O incremento especificado, <code>step</code>, é um valor <code>duration</code> adicionado a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista de dez valores que comece em cinco minutos antes do dia do ano novo (#datetime(2011, 12, 31, 23, 55, 0)) e cujos valores sejam incrementados em um minuto (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Gera uma lista de valores date a partir de um valor inicial, uma contagem e um valor de duração incremental.",
        "Documentation.LongDescription": "Retorna uma lista de valores <code>date</code> de tamanho <code>count</code>, iniciando em <code>start</code>. O incremento especificado, <code>step</code>, é um valor <code>duration</code> adicionado a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista de 5 valores que comece na véspera do ano novo (#date(2011, 12, 31)) e cujos valores sejam incrementados em um dia (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Gere uma lista de valores duration a partir de um valor inicial, uma contagem e um valor duration incremental.",
        "Documentation.LongDescription": "Retorna uma lista de valores <code>duration</code> <code>count</code>, que começa em <code>start</code> e é incrementada pelo valor <code>duration</code> <code>step</code> especificado.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista de 5 valores que comece em uma hora e cujos valores sejam incrementados em uma hora.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Gera uma lista de valores.",
        "Documentation.LongDescription": "Gera uma lista de valores usando as funções fornecidas. A função <code>initial</code> gera um valor candidato inicial, que é então testado em relação a <code>condition</code>.\r\n    Se o valor candidato for aprovado, ele será retornado como parte da lista resultante e o próximo valor candidato será gerado passando o valor recém-aprovado para <code>next</code>.\r\n    Uma vez que um valor candidato não corresponda com <code>condition</code>, o processo de geração de lista será interrompido.\r\n    Um parâmetro opcional, <code>selector</code>, também pode ser fornecido para transformar os itens na lista resultante.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista começando em dez, diminuindo repetidamente até um e garantindo que cada item seja maior que zero.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Gere uma lista de registros que contenha x e y, onde x é um valor e y é uma lista. x deverá ser inferior a 10 e representa o número de itens na lista y. Após a geração da lista, retorna apenas os valores x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Insere valores em uma lista no índice especificado.",
        "Documentation.LongDescription": "Retorna uma nova lista gerada através da inserção dos valores em <code>values</code> em <code>list</code> em <code>index</code>. A primeira posição na lista está no índice 0.\r\n      <ul>\r\n        <li><code>list</code>: A lista de destino em que os valores serão inseridos.</li>\r\n        <li><code>index</code>: O índice da lista de destino (<code>list</code>) em que os valores serão inseridos. A primeira posição na lista está no índice 0.</li>\r\n        <li><code>values</code>: A lista de valores que serão inseridos em <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Insira a lista ({3, 4}) na lista de destino ({1, 2, 5}) no índice. 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Insira uma lista com uma lista aninhada ({1, {1.1, 1.2}}) em uma lista de destino ({2, 3, 4}) no índice 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Substitui o número de contagem de valores começando na posição com os valores de substituição.",
        "Documentation.LongDescription": "Substitui os valores <code>count</code> na <code>list</code> pela lista <code>replaceWith</code>, começando na posição especificada, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Substitua {7, 8, 9} na lista {1, 2, 7, 8, 9, 5} por {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Procura o valor especificado em uma lista e a substitui.",
        "Documentation.LongDescription": "Procura o valor <code>oldValue</code> em uma lista de valores, <code>list</code>, e substitui cada ocorrência pelo valor de substituição <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Substitua todos os valores \"a\" na lista {\"a\", \"B\", \"a\", \"a\"} por \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Gera uma lista de valores time a partir de um valor inicial, uma contagem e um valor de duração incremental.",
        "Documentation.LongDescription": "Retorna uma lista de valores <code>time</code> de tamanho <code>count</code>, iniciando em <code>start</code>. O incremento especificado, <code>step</code>, é um valor <code>duration</code> adicionado a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista de quatro valores começando ao meio-dia (#time(12, 0, 0)) e cujos valores sejam incrementados em uma hora (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Retorna uma lista cujos elementos serão transformados na lista de entrada usando funções especificadas.",
        "Documentation.LongDescription": "Retorna uma lista cujos elementos são projetados da lista de entrada.<br>\r\n    <br>\r\n    A função <code>collectionTransform</code> transforma cada elemento em uma lista intermediária, e a função <code>resultTransform</code> recebe o elemento original e também um item da lista intermediária para construir o resultado final.<br>\r\n    <br>\r\n    A função <code>collectionTransform</code> tem a assinatura <code>(x como qualquer) como lista => ...</code>, onde <code>x</code> é um elemento em <code>list</code>.\r\n    A função <code>resultTransform</code> projeta a forma do resultado e tem a assinatura <code>(x como qualquer, y como qualquer) como qualquer => ...</code>, onde <code>x</code> é um elemento em <code>list</code> e <code>y</code> é um elemento da lista gerada passando <code>x</code> para <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Nivele uma lista de pessoas e seus animais de estimação.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Retorna um número aleatório.",
        "Documentation.LongDescription": "Retorna um número aleatório entre 0 e 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Obtenha um número aleatório.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Adiciona um campo a um registro.",
        "Documentation.LongDescription": "Adiciona um campo a um registro <code>record</code> a partir do nome do campo <code>fieldName</code> e do valor <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Adicionar o campo Address ao registro.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Substitui o texto na entrada fornecida.",
        "Documentation.LongDescription": "Substitui o texto <code>old</code> no <code>text</code> original pelo texto <code>new</code>. Essa função substituta pode ser usada em <code>List.ReplaceValue</code> e em <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Substitua o texto \"oL\" por \"Ol\" na cadeia de caracteres \"oLá, mundo\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Substitui valores na entrada fornecida.",
        "Documentation.LongDescription": "Substitui o valor <code>old</code> no <code>value</code> original pelo valor <code>new</code>. Essa função substituta pode ser usada em <code>List.ReplaceValue</code> e em <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Substitua o valor 11 pelo valor 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Retorna um resultado JSON da API do Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Efetua uma chamada à API REST do Smartsheet 2.0 no ponto de extremidade especificado e retorna resultados como um registro JSON.",
        "Documentation.Examples": [
          {
            "Description": "Efetua pull de dados do ponto de extremidade de API do Smartsheet das planilhas com argumentos adicionais especificados",
            "Code": "Smartsheet.Content(\"planilhas\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Uma tabela com informações de planilhas conforme retornadas pela API do Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.TestContents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Retorna uma função que não oferece divisão, retornando seu argumento como uma única lista de elementos.",
        "Documentation.LongDescription": "Retorna uma função que não oferece divisão, retornando seu argumento como uma única lista de elementos.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Retorna uma função que divide o texto em uma lista de texto em espaço em branco.",
        "Documentation.LongDescription": "Retorna uma função que divide o texto em uma lista de texto em espaço em branco.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada por caracteres de espaço em branco, tratando aspas como qualquer outro caractere.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Particiona a tabela em uma lista de tabelas com base no número de grupos e de coluna especificados.",
        "Documentation.LongDescription": "Particiona a <code>table</code> em uma lista de <code>groups</code> número de tabelas, com base no valor do <code>column</code> e em uma função <code>hash</code>.\r\n    A função <code>hash</code> é aplicada ao valor da linha <code>column</code> para obter um valor de hash para a linha. O módulo de valor de hash <code>groups</code> determina em qual tabela retornada a linha será colocada.\r\n    <ul>\r\n       <li><code>table</code>: A tabela a ser particionada.</li>\r\n       <li><code>column</code>: A coluna de hash para determinar em qual tabela retornada a linha está.</li>\r\n       <li><code>groups</code>: O número de tabelas em que a tabela de entrada será particionada.</li>\r\n       <li><code>hash</code>: A função aplicada para obter um valor de hash.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Particione a tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> em duas tabelas na coluna [a], usando o valor das colunas como função de hash.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Retorna a porção de <code>text</code> entre <code>startDelimiter</code> e <code>endDelimiter</code> especificados.\r\n    Um valor numérico opcional <code>startIndex</code> indica qual ocorrência do <code>startDelimiter</code> deve ser considerada.\r\n    Uma lista opcional <code>startIndex</code> indica a ocorrência do <code>startDelimiter</code> que deve ser considerada, assim como se a indexação deve ser feita a partir do início ou do final da entrada.\r\n    O <code>endIndex</code> é semelhante, exceto pelo fato que é realizada indexação relativa ao <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a porção de \"111 (222) 333 (444)\" entre o (primeiro) parêntese de abertura e o (primeiro) parêntese de fechamento que o segue.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Obtenha a porção de \"111 (222) 333 (444)\" entre o segundo parêntese de abertura e o primeiro parêntese de fechamento que o segue.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Obtenha a porção de \"111 (222) 333 (444)\" entre o segundo parêntese de abertura do final e o segundo parêntese de fechamento que o segue.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Insira um valor de texto em outro na posição especificada.",
        "Documentation.LongDescription": "Retorna o resultado da inserção do valor de texto <code>newText</code> no valor de texto <code>text</code> na posição <code>offset</code>. As posições começam no número 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Insira \"C\" entre \"B\" e \"D\" em \"ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Retorna um novo identificador global exclusivo (GUID) aleatório.",
        "Documentation.LongDescription": "Retorna um novo identificador global exclusivo (GUID) aleatório.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Substitui todas as ocorrências da subcadeia de caracteres especificada no texto.",
        "Documentation.LongDescription": "Retorna o resultado da substituição de todas as ocorrências do valor de texto <code>old</code> no valor de texto <code>text</code> pelo valor de texto <code>new</code>. Essa função diferencia maiúsculas de minúsculas.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Substitua cada ocorrência de \"o\" em uma frase por \"um.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Remove um intervalo de caracteres e insere um valor em uma posição especificada.",
        "Documentation.LongDescription": "Retorna o resultado da remoção de um número de caracteres, <code>count</code>, do valor de texto <code>text</code> começando na posição <code>offset</code> e inserindo o valor de texto <code>newText</code> na mesma posição em <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Substitua um único caractere na posição 2 do valor de texto \"ABGF\" pelo novo valor de texto \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Adiciona uma chave ao tipo de tabela especificado.",
        "Documentation.LongDescription": "Adiciona uma chave ao tipo de tabela especificado.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Retorna uma lista de identidades que a condição aceitará.",
        "Documentation.LongDescription": "<p>Usando o <code>identityProvider</code> especificado, converte o <code>condition</code> na lista de identidades para a qual o <code>condition</code> retornaria <code>true</code> em todos os contextos de autorização com o <code>identityProvider</code> como o provedor de identidade. Um erro será gerado se não for possível converter o <code>condition</code> em uma lista de identidades, por exemplo, se o <code>condition</code> consultar os atributos diferentes das identidades de usuário ou grupo para tomar decisões.</p>\r\n    <p>Observe que a lista de identidades representa as identidades conforme elas aparecem no <code>condition</code>, e nenhuma normalização (por exemplo, expansão de grupo) é executada nelas.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Comprime um valor binário usando o tipo de compressão indicado.",
        "Documentation.LongDescription": "Comprime um valor binário usando o tipo de compressão indicado. O resultado desta chamada é uma cópia compactada da entrada. Os tipos de compactação incluem:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Comprime o valor binário.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Descompacta um valor binário usando o tipo de compactação especificado.",
        "Documentation.LongDescription": "Descompacta um valor binário usando o tipo de compactação especificado. O resultado desta chamada é uma cópia descompactada da entrada. Os tipos de compactação incluem:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Descompacta o valor binário.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Retorna um subconjunto do valor binário começando em um deslocamento.",
        "Documentation.LongDescription": "Retorna um subconjunto do valor binário começando no deslocamento <code>binary</code>. Um parâmetro opcional, <code>offset</code>, define o comprimento máximo do subconjunto.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Retorna um subconjunto do valor binário começando no deslocamento 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Retorna um subconjunto de comprimento 2 do deslocamento 6 do valor binário.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Divide o binário especificado em uma lista de binários utilizando o tamanho de página especificado.",
        "Documentation.LongDescription": "Divide <code>binary</code> em uma lista de binários onde o primeiro elemento da lista de saída é um binário contendo os primeiros <code>pageSize</code> bytes de\r\n    o binário de origem, o próximo elemento da lista de saída é um binário contendo os próximos <code>pageSize</code> bytes do binário de origem, e assim por diante.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Cria ou estende um binário com manipuladores definidos pelo usuário para operações de consulta e ação.",
        "Documentation.LongDescription": "<p>Retorna uma visualização de <code>binary</code> onde as funções especificadas em <code>handlers</code> são usadas no lugar do comportamento padrão de uma operação quando a operação é aplicada à visualização.</p>\r\n<p>Se <code>binary</code> for fornecido, todas as funções do manipulador serão opcionais. Se <code>binary</code> não for fornecido, a função de manipulador <code>GetStream</code> será necessária. Se uma função de manipulador não for especificada para uma operação, o comportamento padrão da operação será aplicado a <code>binary</code> (exceto no caso de <code>GetExpression</code>).</p>\r\n<p>Funções de manipulador deve retornar um valor que seja semanticamente equivalente ao resultado da aplicação da operação em <code>binary</code> (ou a exibição resultante no caso de <code>GetExpression</code>).</p>\r\n<p>Se uma função de manipulador aumentar um erro, o comportamento padrão da operação é aplicado à visualização.</p>\r\n<p><code>Binary.View</code> pode ser usado para implementar a dobra para uma fonte de dados – a tradução de M consultas em operações específicas de origem (por exemplo, para baixar uma seção de um arquivo).</p>\r\n<p>Consulte a documentação publicada do conector personalizado do Power Query para obter uma descrição mais completa de <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Crie uma visualização básica que não exija o acesso aos dados para determinar o comprimento.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Retorna um formato binário com a ordem de bytes especificada por uma função.",
        "Documentation.LongDescription": "Retorna um formato binário com a ordem de bytes especificada por <code>binaryFormat</code>.  A ordem de byte padrão é <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Retorna um formato binário que escolhe o próximo formato binário com base em um valor que já tenha sido lido.",
        "Documentation.LongDescription": "Retorna um formato binário que escolhe o próximo formato binário com base em um valor que já tenha sido lido.  O valor de formato binário gerado por essa função opera em fases:<ul>\r\n<li>O formato binário especificado pelo parâmetro <code>binaryFormat</code> é usado para ler um valor.</li>\r\n<li>O valor é passado para a função choice especificada pelo parâmetro <code>chooseFunction</code>.</li>\r\n<li>A função choice inspeciona o valor e retorna um segundo formato binário.</li>\r\n<li>O segundo formato binário é usado para ler um segundo valor.</li>\r\n<li>Se a função de combinação for especificada, o primeiro e o segundo valores serão passados para essa função e o valor resultante será retornado.</li>\r\n<li>Se a função de combinação não for especificada, o segundo valor será retornado.</li>\r\n<li>O segundo valor é retornado.</li>\r\n</ul>O parâmetro <code>type</code> opcional indica o tipo de formato binário que será retornado pela função choice.  <code>type any</code>, <code>type list</code> ou <code>type binary</code> pode ser especificado.  Se o parâmetro <code>type</code> não for especificado, <code>type any</code> será usado.   Se <code>type list</code> o <code>type binary</code> for usado, o sistema poderá retornar um valor de fluxo <code>binary</code> ou <code>list</code>, em vez de um valor armazenado em buffer, o que pode reduzir a quantidade de memória necessária para ler o formato.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Leia uma lista de bytes onde o número de elementos é determinado pelo primeiro byte.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Leia uma lista de bytes em que o número de elementos seja determinado pelo primeiro byte e preserve o primeiro byte lido.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Leia uma lista de bytes em que o número de elementos seja determinado pelo primeiro byte usando uma lista de fluxo.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Retorna um formato binário que lê um grupo de itens.",
        "Documentation.LongDescription": "Os parâmetros são os seguintes:\r\n<ul>\r\n<li>O parâmetro <code>binaryFormat</code> especifica o formato binário do valor de chave.</li>\r\n<li>O parâmetro <code>group</code> fornece informações sobre o grupo de itens conhecidos.</li>\r\n<li>O parâmetro opcional <code>extra</code> pode ser usado para especificar uma função que retornará um valor de formato binário para o valor depois de qualquer chave inesperada.  Se o parâmetro <code>extra</code> não for especificado, será gerado um erro se houver valores de chave inesperados.</li>\r\n</ul>\r\nO parâmetro <code>group</code> especifica uma lista de definições de item. Cada definição do item é uma lista, que contém 3 a 5 valores, da seguinte forma:\r\n<ul>\r\n<li>Valor de chave.  O valor da chave correspondente ao item. Ele deve ser exclusivo no conjunto de itens.</li>\r\n<li>Formato de item. O formato binário correspondente ao valor do item. Isso permite que cada item tenha um formato diferente. </li>\r\n<li>Ocorrência do item. O valor <code>BinaryOccurrence.Type</code> para quantas vezes o item deve aparecer no grupo. Os itens necessários que não estão presentes causam um erro.  Os itens necessários ou opcionais duplicados são tratados como valores de chave inesperados.</li>\r\n<li>Valor de item padrão (opcional). Se o valor do item padrão aparecer na lista de definições de item e não for nulo, ele será usado, em vez do padrão. O padrão para itens repetidos ou opcionais é nulo e o padrão para valores repetidos é uma lista vazia { }.</li>\r\n<li>Transformação de valor de item (opcional).   Se a função de transformação do valor de item estiver presente na lista de definições de item e não for nula, ela será chamada para transformar o valor do item antes de ser retornado. A função de transformação será chamada somente se o item aparecer na entrada (ela nunca será chamada com o valor padrão). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "O item a seguir pressupõe um valor de chave de um único byte, com 4 itens esperados no grupo, sendo que todos têm um byte de dados após a chave.  Os itens aparecem na entrada da seguinte forma:\r\n<ul>\r\n<li>A chave 1 é necessária e aparece com o valor 11.</li>\r\n<li>A chave 2 se repete e aparece duas vezes com o valor 22 e resulta em um valor de { 22, 22 }.</li>\r\n<li>A chave 3 é opcional e não aparece e resulta em um valor nulo.</li>\r\n<li>A chave 4 se repete, mas não aparece e resulta em um valor de { }.</li>\r\n<li>A chave 5 não faz parte do grupo, mas aparece uma vez com o valor 55.  A função extra é chamada com o valor de chave 5 e retorna o formato correspondente a esse valor (BinaryFormat.Byte).  O valor 55 é lido e descartado.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "O exemplo a seguir mostra a transformação do valor do item e o valor do item padrão.   O item repetido com a chave 1 soma a lista de valores lidos usando List.Sum.  O item opcional com a chave 2 tem um valor padrão 123, em vez de nulo.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Retorna um formato binário que limita a quantidade de dados que podem ser lidos.",
        "Documentation.LongDescription": "Retorna um formato binário que limita a quantidade de dados que podem ser lidos. Tanto <code>BinaryFormat.List</code> quanto <code>BinaryFormat.Binary</code> podem ser usados para ler até o final dos dados. <code>BinaryFormat.Length</code> pode ser usado para limitar o número de bytes que são lidos.  O parâmetro <code>binaryFormat</code> especifica o formato binário a ser limitado.  O parâmetro <code>length</code> especifica o número de bytes a serem lidos.  O parâmetro <code>length</code> pode ser um valor numérico ou um valor de formato binário que especifica o formato do valor de comprimento que aparece antes do valor que está sendo lido.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Limite o número de bytes lido a 2 ao ler uma lista de bytes.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Limite o número de bytes lidos ao ler uma lista de bytes ao valor do byte que precede a lista.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Retorna um formato binário que transformará os valores lidos por outro formato binário.",
        "Documentation.LongDescription": "Retorna um formato binário que transformará os valores lidos por outro formato binário.  O parâmetro <code>binaryFormat</code> especifica o formato binário que será usado para ler o valor.  O <code>function</code> é chamado com o valor lido e retorna o valor transformado.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Leia um byte e adicione-o a ele.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Retorna uma função de comparador que usa regras do Ordinal para comparar valores.",
        "Documentation.LongDescription": "Retorna uma função de comparador que usa regras Ordinais para comparar os valores <code>x</code> e <code>y</code> fornecidos.<br>\r\n      <br>\r\n      Uma função de comparador aceita dois argumentos e retorna -1, 0 ou 1 se o primeiro valor for menor, igual ou maior que o segundo.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Usando regras do Ordinal, compare se “encyclopædia” e “encyclopaedia” são equivalentes. Observe que são equivalentes usando <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Retorna a função do comparador sem diferenciação de maiúsculas e minúsculas que utiliza as regras Ordinais para comparar valores.",
        "Documentation.LongDescription": "Retorna uma função comparador sem diferenciação de maiúsculas e minúsculas que usa regras Ordinais para comparar os valores <code>x</code> e <code>y</code> fornecidos.<br>\r\n        <br>\r\n        Uma função de comparador aceita dois argumentos e retorna -1, 0 ou 1 se o primeiro valor for menor, igual ou maior que o segundo.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Usando as regras Ordinais sem diferenciação de maiúsculas e minúsculas, compare \"Abc\" com \"abc\". Observe que \"Abc\" é menor do que \"abc\" usando o <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Retorna uma propriedade de um atributo de dimensão.",
        "Documentation.LongDescription": "Retorna a propriedade <code>propertyName</code> do atributo de dimensão <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Retorna uma propriedade de uma medida (propriedade de célula).",
        "Documentation.LongDescription": "Retorna a propriedade <code>propertyName</code> da medida <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Origem da consulta SQL do Databricks",
        "Documentation.LongDescription": "Definir uma fonte de dados do Databricks para executar consultas SQL"
      },
      "ReturnType": "Consulta SQL do Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Origem da consulta SQL do Databricks",
        "Documentation.LongDescription": "Definir uma fonte de dados do Databricks para executar consultas SQL"
      },
      "ReturnType": "Consulta SQL do Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Adiciona os dias especificados à data.",
        "Documentation.LongDescription": "Retorna o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> após adicionar <code>numberOfDays</code> dias ao valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: O valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual os dias estão sendo adicionados.</li>\r\n      <li><code>numberOfDays</code>: O número de dias a serem adicionados.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicione 5 dias ao valor <code>datetime</code>, <code>datetimezone</code> ou <code>date</code> que representa a data 14/5/2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Adiciona os meses especificados à data.",
        "Documentation.LongDescription": "Retorna o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> após adicionar <code>numberOfMonths</code> meses ao valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: o valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual os meses estão sendo adicionados.</li>\r\n        <li><code>numberOfMonths</code>: o número de meses a serem adicionados.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicione 5 meses ao valor <code>datetime</code>, <code>datetimezone</code> ou <code>date</code> que representa a data 14/5/2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Adicione 18 meses ao valor <code>datetime</code>, <code>datetimezone</code> ou <code>date</code> que representa a data e a hora 14/5/2011 08:15:22 AM.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Adiciona os trimestres especificados à data.",
        "Documentation.LongDescription": "Retorna o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> após adicionar <code>numberOfQuarters</code> trimestres ao valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: O valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual os trimestres estão sendo adicionados.</li>\r\n      <li><code>numberOfQuarters</code>: O número de trimestres a serem adicionados.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicione 1 trimestre ao valor <code>datetime</code>, <code>datetimezone</code> ou <code>date</code> que representa a data 14/5/2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Adiciona as semanas especificadas à data.",
        "Documentation.LongDescription": "Retorna o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> após adicionar <code>numberOfWeeks</code> semanas ao valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: O valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual as semanas estão sendo adicionadas.</li>\r\n      <li><code>numberOfWeeks</code>: O número de semanas a serem adicionadas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicione 2 semanas ao valor <code>datetime</code>, <code>datetimezone</code> ou <code>date</code> que representa a data 14/5/2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Adiciona os anos especificados à data.",
        "Documentation.LongDescription": "Retorna o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> após adicionar <code>numberOfYears</code> a um valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: o valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual os anos são adicionados.</li>\r\n        <li><code>numberOfYears</code>: o número de anos a serem adicionados.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicione 4 anos ao valor <code>datetime</code>, <code>datetimezone</code> ou <code>date</code> que representa a data 14/5/2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Adicione 10 anos ao valor <code>datetime</code>, <code>datetimezone</code> ou <code>date</code> que representa a data e a hora 14/5/2011 08:15:22 AM.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Indica se esta data ocorre durante o próximo número de dias, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no dia atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o próximo número de dias, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no dia atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>days</code>: o número de dias.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o dia após a hora atual do sistema é nos próximos dois dias.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Indica se esta data ocorre durante o próximo número de meses, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no mês atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o próximo número de meses, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no mês atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>months</code>: o número de meses.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o mês após a hora atual do sistema é nos próximos dois meses.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Indica se esta data ocorre durante o próximo número de trimestres, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no trimestre atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o próximo número de trimestres, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no trimestre atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>quarters</code>: o número de trimestres.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o trimestre após a hora atual do sistema é nos próximos dois trimestres.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Indica se esta data ocorre durante o próximo número de semanas, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na semana atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o próximo número de semanas, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na semana atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>weeks</code>: o número de semanas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o semana após a hora atual do sistema é nas próximas duas semanas.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Indica se esta data ocorre durante o próximo número de anos, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no ano atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o próximo número de anos, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no ano atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>years</code>: o número de anos.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o ano após a hora atual do sistema é nos próximos dois anos.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Indica se esta data ocorre durante o número de dias anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no dia atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o número de dias anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no dia atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>days</code>: o número de dias.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o dia anterior à hora atual do sistema é nos dois dias anteriores.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Indica se esta data ocorre durante o número de meses anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no mês atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o número de meses anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no mês atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>months</code>: o número de meses.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o mês anterior à hora atual do sistema é nos dois meses anteriores.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Indica se esta data ocorre durante o número de trimestres anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no trimestre atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o número de trimestres anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no trimestre atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>quarters</code>: o número de trimestres.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o trimestre anterior à hora atual do sistema é nos dois trimestres anteriores.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Indica se esta data ocorre durante o número de semanas anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na semana atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o número de semanas anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na semana atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>weeks</code>: o número de semanas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se a semana anterior à hora atual do sistema é nas duas semanas anteriores.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Indica se esta data ocorre durante o número de anos anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no ano atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o número de anos anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no ano atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>years</code>: o número de anos.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o ano anterior à hora atual do sistema é nos dois anos anteriores.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Adiciona informações de fuso horário ao valor datetime.",
        "Documentation.LongDescription": "Adiciona informações de fuso horário ao valor <code>dateTime</code>. As informações de fuso horário incluem <code>timezoneHours</code> e, opcionalmente, <code>timezoneMinutes</code>, que especificam o deslocamento desejado do horário UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Defina o fuso horário para UTC+7:30 (7 horas e 30 minutos após o UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Indica se este datetime ocorre durante o próximo número de horas, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na hora atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o próximo número de horas, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na hora atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>hours</code>: o número de horas.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora após o horário atual do sistema está nas próximas duas horas.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Indica se este datetime ocorre durante o próximo número de minutos, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no minuto atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o próximo número de minutos, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no minuto atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>minutes</code>: o número de minutos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o minuto após o horário atual do sistema está nos próximos dois minutos.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Indica se este datetime ocorre durante o próximo número de segundos, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no segundo atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o próximo número de segundos, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no segundo atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>seconds</code>: o número de segundos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o segundo após o horário atual do sistema está nos próximos dois segundos.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Indica se este datetime ocorre durante o número de horas anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na hora atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o número de horas anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na hora atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>hours</code>: o número de horas.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora antes do horário atual do sistema está nas duas horas anteriores.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Indica se este datetime ocorre durante o número de minutos anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no minuto atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o número de minutos anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no minuto atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>minutes</code>: o número de minutos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o minuto antes do horário atual do sistema está nos dois minutos anteriores.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Indica se este datetime ocorre durante o número de segundos anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no segundo atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o número de segundos anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no segundo atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>seconds</code>: o número de segundos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o segundo antes do horário atual do sistema está nos dois segundos anteriores.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Altera o fuso horário do valor.",
        "Documentation.LongDescription": "Altera as informações de fuso horário no valor datetimezone <code>dateTimeZone</code> para as novas informações de fuso horário fornecidas por <code>timezoneHours</code> e, opcionalmente, <code>timezoneMinutes</code>.\r\n    Se <code>dateTimeZone</code> não tiver um componente de fuso horário, uma exceção será lançada.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Altere as informações de fuso horário de #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) para 8 horas.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Altere as informações de fuso horário de #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) para -30 minutos.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Acessa um valor por nome em um mashup inserido.",
        "Documentation.LongDescription": "Acessa um valor por nome em um mashup inserido.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Cria uma função com uma assinatura de parâmetro específica na parte superior de uma função que leva um único argumento de lista",
        "Documentation.LongDescription": "Usa uma função unária <code>function</code> e cria uma nova função com o tipo <code>functionType</code>, que cria uma lista dos seus argumentos e a transfere para <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Converte List.Sum em uma função de dois argumentos que são adicionados de modo conjunto",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Converte uma função que leva uma lista para uma função de dois argumentos",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Chama a função fornecida",
        "Documentation.LongDescription": "Chama a função fornecida usando a lista de argumentos especificada e retorna o resultado.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Chama Record.FieldNames com um argumento [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Invoca a função determinada depois da duração especificada ter decorrido.",
        "Documentation.LongDescription": "Retorna o resultado da invocação de <code>function</code> depois da duração <code>delay</code> ter decorrido.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Cria uma função escalar na parte superior de uma função de vetor, com o envio em lote de várias invocações.",
        "Documentation.LongDescription": "<p>Retorna uma função escalar do tipo <code>scalarFunctionType</code> que invoca <code>vectorFunction</code> com uma única linha de argumentos e retorna sua única saída. Além disso, quando a função escalar é repetidamente aplicada para cada linha de uma tabela de entradas, como em Table.AddColumn, em vez disso, <code>vectorFunction</code> será aplicado uma vez para todas as entradas.</p>\r\n<p><code>vectorFunction</code> será transmitida uma tabela cujas colunas correspondem em nome e posicionar os parâmetros de <code>scalarFunctionType</code>. Cada linha desta tabela contém os argumentos para uma chamada à função escalar, com as colunas correspondentes aos parâmetros de <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> deve retornar uma lista do mesmo tamanho da tabela de entrada, cujo item em cada posição deve ser o mesmo resultado que avaliar a função escalar na linha de entrada da mesma posição.</p>\r\n<p>Espera-se que a tabela de entrada seja transmitida, portanto espera-se que <code>vectorFunction</code> transmita os resultados assim que a entrada for apresentada, trabalhando somente com um bloco de entrada por vez. Em particular, <code>vectorFunction</code> não deve enumerar sua tabela de entrada mais de uma vez.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Cria um registro que representa um ponto geográfico das partes.",
        "Documentation.LongDescription": "Cria um registro que representa um ponto geográfico das partes constituintes, como longitude, latitude e, se estiver presente, Z (elevação) e M (medida). Um SRID (identificador de referência espacial) opcional poderá ser fornecido quando for diferente do valor padrão (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Cria um registro que representa um ponto geométrico das partes.",
        "Documentation.LongDescription": "Cria um registro que representa um ponto geométrico das partes constituintes, como coordenada X, coordenada Y e, se estiver presente, coordenada Z e M (medida). Um SRID (identificador de referência espacial) opcional poderá ser fornecido se for diferente do valor padrão (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Cria uma identidade.",
        "Documentation.LongDescription": "Cria uma identidade.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Determina se uma identidade é um membro de uma coleção de identidades.",
        "Documentation.LongDescription": "Determina se uma identidade é um membro de uma coleção de identidades.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Retorna uma lista composta por todos os elementos de deslocamento de número ímpar em uma lista.",
        "Documentation.LongDescription": "Retorna uma lista composta por todos os elementos de deslocamento de número ímpar em uma lista. Alterna entre o uso e não uso de valores na lista <code>list</code>, dependendo dos parâmetros.\r\n    <ul>\r\n    <li><code>count</code>: Especifica o número de valores que foram ignorados cada vez.</li>\r\n    <li><code>repeatInterval</code>: Um intervalo de repetição opcional para indicar quantas valores são adicionados entre os valores ignorados.</li>\r\n    <li><code>offset</code>: Um parâmetro de deslocamento opcional para começar a ignorar os valores no deslocamento inicial.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista a partir de {1..10} que ignore o primeiro número.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Crie uma lista a partir de {1..10} que ignore todos os outros números.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Crie uma lista a partir de {1..10} que comece em 1 e ignore todos os outros números.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Crie uma lista a partir de {1..10} que comece em 1, ignore um valor, mantenha dois valores e assim por diante.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Indica se a lista contém o valor.",
        "Documentation.LongDescription": "Indica se a lista <code>list</code> contém o valor <code>value</code>.\r\n    Retorna true se o valor é encontrado na lista; do contrário, retorna false. Um valor de critérios de equação opcional, <code>equationCriteria</code>, pode ser especificado para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Descubra se a lista {1, 2, 3, 4, 5} contém 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Descubra se a lista {1, 2, 3, 4, 5} contém 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Indica em que local uma lista inclui todos os valores em outra lista.",
        "Documentation.LongDescription": "Indica se a lista <code>list</code> inclui todos os valores em outra lista, <code>values</code>.\r\n    Retornará true se o valor for encontrado na lista; do contrário, retornará false. Um valor de critérios de equação opcional, <code>equationCriteria</code>, pode ser especificado para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Descubra se a lista {1, 2, 3, 4, 5} contém 3 e 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Descubra se a lista {1, 2, 3, 4, 5} contém 5 e 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Indica em que local uma lista inclui qualquer um dos valores em outra lista.",
        "Documentation.LongDescription": "Indica se a lista <code>list</code> inclui qualquer um dos valores em outra lista, <code>values</code>.\r\n        Retornará true se o valor for encontrado na lista; do contrário, retornará false. Um valor de critérios de equação opcional, <code>equationCriteria</code>, pode ser especificado para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Descubra se a lista {1, 2, 3, 4, 5} contém 3 ou 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Descubra se a lista {1, 2, 3, 4, 5} contém 6 ou 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Retorna a covariância entre as duas listas de números.",
        "Documentation.LongDescription": "Retorna a covariância entre as duas listas, <code>numberList1</code> e <code>numberList2</code>. <code>numberList1</code> e <code>numberList2</code> deve conter o mesmo número de valores <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Calcule a covariância entre as duas listas.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Retorna a diferença das duas listas especificadas.",
        "Documentation.LongDescription": "Retorna os itens na lista <code>list1</code> que não aparecem na lista <code>list2</code>. Valores duplicados não são compatíveis.\r\n    Um valor de critérios de equação opcional, <code>equationCriteria</code>, pode ser especificado para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Localize os itens na lista {1, 2, 3, 4, 5} que não aparecem em {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Localize os itens na lista {1, 2} que não aparecem em {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Retorna uma lista de valores (incluindo os campos de registro) que contêm o texto especificado.",
        "Documentation.LongDescription": "Retorna uma lista de valores da lista <code>list</code> que continha o valor <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize os valores de texto da lista {\"a\", \"b\", \"ab\"} que correspondam a \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Retorna o primeiro conjunto de itens da lista especificando quantos itens serão retornados ou uma condição de qualificação.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Se um número for especificado, essa será a quantidade de itens retornados. </li>\r\n  <li>Se uma condição for especificada, todos os itens que atenderem inicialmente à condição serão retornados. Quando um item não atender à condição, nenhum outro item será considerado. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize os valores iniciais na lista {3, 4, 5, -1, 7, 8, 2} que sejam maiores que 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Retornará true se a função condition for atendida por todos os valores da lista.",
        "Documentation.LongDescription": "Retornará <code>true</code> se a função condition <code>condition</code> for atendida por todos os valores da lista <code>list</code>; do contrário, <code>false</code> será retornado.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determine se todos os valores da lista {11, 12, 13} serão maiores que 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Determine se todos os valores da lista {1, 2, 3} serão maiores que 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Retornará true se a função condition for atendida por qualquer valor.",
        "Documentation.LongDescription": "Retornará <code>true</code> se a função condition <code>condition</code> for atendida por qualquer valor da lista <code>list</code>; do contrário, <code>false</code> será retornado.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Descubra se algum valor da lista {9, 10, 11} é maior que 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Descubra se algum valor da lista {1, 2, 3} é maior que 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Retorna os valores máximos na lista. O número de valores a serem retornados ou a condição de filtragem devem ser especificados.",
        "Documentation.LongDescription": "Retorna o(s) valor(es) máximo(s) na lista, <code>list</code>.\r\n    Depois que as linhas são classificadas, parâmetros opcionais podem ser especificados para filtrar ainda mais o resultado. O parâmetro opcional <code>countOrCondition</code> especifica o número de valores a serem retornados ou uma condição de filtragem. O parâmetro opcional <code>comparisonCriteria</code> especifica como comparar valores na lista.\r\n <ul>\r\n        <li> <code>list</code>: a lista de valores.</li>\r\n        <li> <code>countOrCondition</code>: Se um número for especificado, uma lista de até <code>countOrCondition</code> itens em ordem crescente será retornada. Se uma condição for especificada, uma lista de itens que atendem inicialmente à condição será retornada. Quando um item falha na condição, nenhum outro item é considerado.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcional]</i> Um valor <code>comparisonCriteria</code> opcional pode ser especificado para determinar como comparar os itens na lista. Se este parâmetro for nulo, o comparador padrão será usado.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Retorna os valores mínimos na lista. O número de valores a serem retornados ou a condição de filtragem podem ser especificados.",
        "Documentation.LongDescription": "Retorna os valores mínimos na lista, <code>list</code>.\r\n O parâmetro, <code>countOrCondition</code>, especifica o número de valores a serem retornados ou uma condição de filtragem. O parâmetro opcional, <code>comparisonCriteria</code>, especifica como comparar valores na lista.\r\n <ul>\r\n <li> <code>list</code>: a lista de valores.</li>\r\n <li> <code>countOrCondition</code>: Se um número for especificado, uma lista de até <code>countOrCondition</code> itens em ordem crescente será retornada. Se uma condição for especificada, uma lista de itens que atendem inicialmente à condição será retornada. Quando um item falha na condição, nenhum outro item é considerado. Se esse parâmetro for nulo, o menor valor único na lista será retornado.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcional]</i> Um valor <code>comparisonCriteria</code> opcional pode ser especificado para determinar como comparar os itens na lista. Se este parâmetro for nulo, o comparador padrão será usado.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localize os cinco menores valores da lista <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Retorna uma lista de números a partir de um valor inicial, uma contagem e um valor de incremento opcional.",
        "Documentation.LongDescription": "Retorna uma lista de números a partir de um valor inicial, uma contagem e um valor de incremento opcional. O valor de incremento padrão é 1.\r\n<ul>\r\n   <li><code>start</code>: O valor inicial da lista.</li>\r\n   <li><code>count</code>: O número de valores a ser criado.</li>\r\n   <li><code>increment</code>: <i>[Opcional]</i> O valor que servirá de base para o incremento. Se omitido, os valores serão incrementados em 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Gere uma lista de dez números consecutivos começando por 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Gere uma lista de dez números começando por 1, com um incremento de 2 para cada número subsequente.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Retorna um ou mais percentis de amostra correspondentes às probabilidades fornecidas.",
        "Documentation.LongDescription": "Retorna um ou mais percentis de amostra da lista <code>list</code>. Se o valor <code>percentiles</code> for um número entre 0,0 e 1,0, ele será tratado como um percentil e o resultado será\r\n    um valor correspondente a essa probabilidade. Se o valor <code>percentiles</code> for uma lista de números com valores entre 0,0 e 1,0, o resultado será uma lista de percentis\r\n    correspondentes à probabilidade de entrada. A opção PercentileMode no <code>options</code> pode ser usada por usuários avançados para escolher um método de interpolação mais específico, mas não é recomendada para a maioria dos tipos de uso.\r\n    Os símbolos predefinidos <code>PercentileMode.ExcelInc</code> e <code>PercentileMode.ExcelExc</code> correspondem aos métodos de interpolação usados pelas funções do Excel\r\n    <code>PERCENTILE.INC</code> e <code>PERCENTILE.EXC</code>. O comportamento padrão corresponde a <code>PercentileMode.ExcelInc</code>. Os símbolos\r\n    <code>PercentileMode.SqlCont</code> e <code>PercentileMode.SqlDisc</code> correspondem ao comportamento do SQL Server para <code>PERCENTILE_CONT</code> e\r\n    <code>PERCENTILE_DISC</code>, respectivamente.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localize o primeiro quartil da lista <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Localize os quartis da lista <code>{5, 3, 1, 7, 9}</code> usando um método de interpolação correspondente ao <code>PERCENTILE.EXC</code> do Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Retorna os deslocamentos de um valor em uma lista.",
        "Documentation.LongDescription": "Retorna o deslocamento em que o valor <code>value</code> aparece na lista <code>list</code>. Retorna -1 caso o valor não apareça.\r\n    Um parâmetro de ocorrência <code>occurrence</code> opcional pode ser especificado.\r\n<ul>\r\n   <li><code>occurrence</code>: o número máximo de ocorrências para o relatório.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Localize a posição na lista {1, 2, 3} em que o valor 3 aparece.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Retorna o primeiro deslocamento de um valor em uma lista.",
        "Documentation.LongDescription": "Retorna o deslocamento na lista <code>list</code> da primeira ocorrência de um valor em uma lista <code>values</code>. Retorna -1 caso nenhuma ocorrência seja encontrada.\r\n    Um parâmetro de ocorrência <code>occurrence</code> opcional pode ser especificado.\r\n<ul>\r\n   <li><code>occurrence</code>: o número máximo de ocorrências que podem ser retornadas.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Localize a primeira posição na lista {1, 2, 3} em que o valor 2 ou 3 aparece.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Retorna um subconjunto da lista começando em um deslocamento.",
        "Documentation.LongDescription": "Retorna um subconjunto da lista começando no deslocamento <code>list</code>. Um parâmetro opcional, <code>offset</code>, define o número máximo de itens no subconjunto.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize o subconjunto começando no deslocamento 6 da lista de números de 1 a 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Localize o subconjunto de comprimento 2 no deslocamento 6, na lista de números de 1 a 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Remove itens de list1 que estão presentes na lista.",
        "Documentation.LongDescription": "Remove todas as ocorrências dos valores especificados no <code>list2</code> em <code>list1</code>. Se os valores em <code>list2</code> não existirem em <code>list1</code>, a lista original será retornada.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Remova os itens na lista {2, 4, 6} da lista {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Remove todas as ocorrências dos valores de entrada.",
        "Documentation.LongDescription": "Remove todas as ocorrências dos valores especificados em <code>list2</code> na lista <code>list1</code>. Se os valores em <code>list2</code> não existirem em <code>list1</code>, a lista original será retornada.\r\n    Um valor de critérios de equação opcional, <code>equationCriteria</code>, pode ser especificado para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista em {1, 2, 3, 4, 5, 5} sem {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Remove o número de contagem de valores começando na posição especificada.",
        "Documentation.LongDescription": "Remove os valores <code>count</code> na <code>list</code> começando na posição especificada, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Remova três valores na lista {1, 2, 3, 4, -6, -2, -1, 5} começando no índice. 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Retorna uma lista que representa as repetições de contagem da lista original.",
        "Documentation.LongDescription": "Retorna uma lista que representa as repetições de <code>count</code> da lista original, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista que tenha 3 repetições de {1, 2}.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Aplica substituição de { old, new }.",
        "Documentation.LongDescription": "Executa as substituições especificadas na lista <code>list</code>. Uma operação de substituição <code>replacements</code> consiste em uma lista de dois valores, o valor antigo e o valor novo, fornecida em uma lista.\r\n    Um valor de critérios de equação opcional, <code>equationCriteria</code>, pode ser especificado para controlar o teste de igualdade.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista em {1, 2, 3, 4, 5} substituindo o valor 5 por -5, e o valor 1 por -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Retorna uma lista de valores correspondentes à condição.",
        "Documentation.LongDescription": "Retorna uma lista de valores da lista <code>list</code>, que corresponde à condição de seleção <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize os valores da lista {1, -3, 4, 9, -2} que sejam maiores que 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Divide a lista especificada em uma lista de listas usando o tamanho da página especificado.",
        "Documentation.LongDescription": "Divide <code>list</code> em uma lista de listas em que o primeiro elemento da lista de saída é uma lista que contém os primeiros <code>pageSize</code> elementos da\r\n    lista de origem, o próximo elemento da lista de saída é uma lista que contém os próximos <code>pageSize</code> elementos da lista de origem, etc.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Retorna uma nova lista de valores computados nesta lista.",
        "Documentation.LongDescription": "Retorna uma nova lista de valores aplicando a função transform <code>transform</code> à lista <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Adicione 1 a cada valor na lista {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Retorna o arco tangente da divisão dos dois números.",
        "Documentation.LongDescription": "Retorna o arco tangente da divisão dos dois números, <code>y</code> e <code>x</code>. A divisão será criada como <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Retorna o resultado da execução de uma operação bit a bit \"And\" entre as duas entradas.",
        "Documentation.LongDescription": "Retorna o resultado da execução de uma operação bit a bit \"And\" entre <code>number1</code> e <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Retorna o resultado da execução de uma operação bit a bit \"Or\" entre as duas entradas.",
        "Documentation.LongDescription": "Retorna o resultado da execução de uma operação bit a bit \"Or\" entre <code>number1</code> e <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Desloca os bits definidos para a esquerda.",
        "Documentation.LongDescription": "Retorna o resultado da execução de um deslocamento bit a bit para a esquerda em <code>number1</code>, com base no número especificado de bits <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Desloca os bits definidos para a direita.",
        "Documentation.LongDescription": "Retorna o resultado da execução de um deslocamento bit a bit para a direita em <code>number1</code>, com base no número especificado de bits <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Retorna o resultado da execução de uma operação bit a bit \"XOR\" (Exclusive-OR) entre as duas entradas.",
        "Documentation.LongDescription": "Retorna o resultado da execução de uma operação bit a bit \"XOR\" (Exclusive-OR) entre <code>number1</code> e <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Retorna o número de combinações exclusivas.",
        "Documentation.LongDescription": "Retorna o número de combinações exclusivas em uma lista de itens, <code>setSize</code> com o tamanho de combinação especificado, <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: O número de itens na lista.</li>\r\n    <li><code>combinationSize</code>: O número de itens em cada combinação.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Localize o número de combinações de um total de cinco itens quando cada combinação for um grupo de 3.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Divide dois números e retorna a parte inteira do resultado.",
        "Documentation.LongDescription": "Retorna a parte inteira do resultado de divisão de um número, <code>number1</code>, por outro número, <code>number2</code>.\r\n    Se <code>number1</code> ou <code>number2</code> forem nulos, <code>Number.IntegerDivide</code> retornará nulo.\r\n      <ul>\r\n        <li><code>number1</code>: o dividendo.</li>\r\n        <li><code>number2</code>: o divisor.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Divide 6 por 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Divide 8,3 por 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "O número inteiro divide dois números e retorna o resto.",
        "Documentation.LongDescription": "Retorna o resto da divisão inteira de <code>number</code> por <code>divisor</code>.\r\n    Se <code>number</code> ou <code>divisor</code> forem nulos, <code>Number.Mod</code> retornará nulo.\r\n      <ul>\r\n        <li><code>number</code>: o dividendo.</li>\r\n        <li><code>divisor</code>: o divisor.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Localize o resto ao dividir 5 por 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Retorna o número de permutações.",
        "Documentation.LongDescription": "Retorna o número de permutações que podem ser geradas a partir de um número de itens, <code>setSize</code>, com um tamanho de permutação especificado, <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Localize o número de permutações em um total de cinco itens em grupos de três.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Eleva um número à potência especificada.",
        "Documentation.LongDescription": "Retorna o resultado de elevar <code>number</code> à <code>power</code>ª potência.\r\n    Se <code>number</code> ou <code>power</code> forem nulos, <code>Number.Power</code> retornará nulo.\r\n      <ul>\r\n        <li><code>number</code>: a base.</li>\r\n        <li><code>power</code>: o expoente.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Localize o valor 5 elevado à potência 3 (5 cúbico).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Retorna um número aleatório entre dois números.",
        "Documentation.LongDescription": "Retorna um número aleatório entre <code>bottom</code> e <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Obtenha um número aleatório entre 1 e 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Retorna o valor do campo especificado em um registro.",
        "Documentation.LongDescription": "Retorna o valor do <code>field</code> especificado no <code>record</code>. Se o campo não for encontrado, uma exceção será lançada.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localizar o valor do campo \" CustomerID \" no registro.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Retorna o valor do campo especificado em um registro ou o valor padrão se o campo não for encontrado.",
        "Documentation.LongDescription": "Retorna o valor do campo <code>field</code> especificado no registro <code>record</code>. Se o campo não for encontrado, o <code>defaultValue</code> opcional será retornado.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localizar o valor do campo \"Phone\" no registro, ou retornar nulo, caso não exista.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Localizar o valor do campo \"Phone\" no registro, ou retornar o padrão, caso não exista.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Retorna um registro de acordo com uma lista de valores de campos e um conjunto de campos.",
        "Documentation.LongDescription": "Retorna um registro de acordo com <code>list</code> de valores de campos e um conjunto de campos.  É possível especificar <code>fields</code> por uma lista de valores de texto ou por um tipo de registro.  Um erro será lançado se os campos não forem exclusivos.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Crie um registro com base em uma lista de valores de campos e uma lista de nomes de campos.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Crie um registro com base em uma lista de valores de campos e um tipo de registro.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Indica se o registro tem os campos especificados.",
        "Documentation.LongDescription": "Indica se o registro <code>record</code> os campos especificados em <code>fields</code>, retornando um valor lógico (true ou false).\r\n    Vários valores de campo podem ser especificados por meio de uma lista.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificar se o registro tem o campo \"CustomerID\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Verificar se o registro tem os campos \"CustomerID\" e \"Address\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Remove os campos especificados no registro de entrada.",
        "Documentation.LongDescription": "Retorna um registro que remove todos os campos especificados na lista <code>fields</code> da entrada <code>record</code>. Se o campo especificado não existir, uma exceção será lançada.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remover o campo \"Price\" do registro.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Remover os campos \"Price\" e \"Item\" do registro.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Aplica renomeações de uma lista no formato { old, new }.",
        "Documentation.LongDescription": "Retorna um registro após renomear campos na entrada <code>record</code> para novos nomes de campo especificados na lista <code>renames</code>. No caso de várias renomeações, uma lista aninhada pode ser usada ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Renomear o campo \"UnitPrice\" para \"Price\" no registro.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Renomear o campo \"UnitPrice\" para \"Price\" e \"OrderNum\" para \"OrderID\" no registro.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Reorganiza os campos especificados na nova ordem.",
        "Documentation.LongDescription": "Retorna um registro após reordenar os campos em <code>record</code> na ordem dos campos especificados na lista <code>fieldOrder</code>. Os valores de campo são mantidos, e os campos não listados em <code>fieldOrder</code> são deixados na posição original.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Reordenar alguns dos campos do registro.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Retorna um registro que contém somente os campos especificados.",
        "Documentation.LongDescription": "Retorna um registro que inclui somente os campos especificados na lista <code>fields</code> da entrada <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Selecionar os campos \"Item\" e \"Price\" no registro.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Retorna um registro após aplicar as transformações especificadas.",
        "Documentation.LongDescription": "Retorna um registro após aplicar as transformações especificadas na lista <code>transformOperations</code> a <code>record</code>.\r\n    Um ou mais campos podem ser transformados em um dado momento. \r\n      <div>Se um único campo estiver sendo transformado, espera-se que <code>transformOperations</code> seja uma lista com dois itens. O primeiro item em <code>transformOperations</code> especifica um nome de campo, enquanto o segundo item em <code>transformOperations</code> específica a função a ser usada na transformação. Por exemplo, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Se vários campos estiverem sendo transformados, espera-se que <code>transformOperations</code> seja uma lista de listas, em que cada lista interna seja um par de nome de campo e operação de transformação. Por exemplo, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Converte o campo \"Price\" em número.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Converte os campos \"OrderID\" e \"Price\" em números.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Retorna uma função que divide o texto em uma lista de texto de acordo com uma transição de um tipo de caractere para outro. Os parâmetros {0} e {1} podem ser uma lista de caracteres ou uma função que usa um caractere e retorna true/false.",
        "Documentation.LongDescription": "Retorna uma função que divide o texto em uma lista de texto de acordo com uma transição de um tipo de caractere para outro. Os parâmetros <code>before</code> e <code>after</code> podem ser uma lista de caracteres ou uma função que usa um caractere e retorna true/false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada sempre que uma letra maiúscula ou minúscula for seguida por um dígito.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Converte a consulta SQL fornecida em código M. Esta função está destinada somente para uso interno.",
        "Documentation.LongDescription": "Converte a consulta <code>sql</code> fornecida para o código M, com os identificadores disponíveis definidos por <code>environment</code>. Esta função é destinada apenas para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Retorna uma coluna especificada de dados da tabela como uma lista.",
        "Documentation.LongDescription": "Retorna a coluna de dados especificada por <code>column</code> da tabela <code>table</code> como uma lista.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Retornar os valores da coluna [Name] da tabela.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Retorna uma lista com os nomes das colunas que correspondem aos tipos especificados.",
        "Documentation.LongDescription": "Retorna uma lista com os nomes das colunas na tabela <code>table</code> que correspondem aos tipos especificados no <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Retornar os nomes de colunas do tipo Number.Type da tabela.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Indica se o registro especificado é exibido como uma linha na tabela.",
        "Documentation.LongDescription": "Indica se o registro especificado, <code>row</code>, é exibido como uma linha na <code>table</code>.\r\n    Um parâmetro <code>equationCriteria</code> opcional pode ser especificado para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela contém a linha.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar se a tabela contém a linha.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinar se a tabela contém a linha comparando apenas a coluna [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Indica se todos os registros especificados serão exibidos como linhas na tabela.",
        "Documentation.LongDescription": "Indica se todos os registros especificados da lista de registros <code>rows</code> serão exibidos como linhas na <code>table</code>.\r\n    Um parâmetro <code>equationCriteria</code> opcional pode ser especificado para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela contém todas as linhas comparando apenas a coluna [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar se a tabela contém todas as linhas.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Indica se algum registro especificado será exibido como linha na tabela.",
        "Documentation.LongDescription": "Indica se algum registro especificado da lista de registros <code>rows</code> será exibido como linha na <code>table</code>.\r\n    Um parâmetro <code>equationCriteria</code> opcional pode ser especificado para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determine se a tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> contém as linhas <code>[a = 1, b = 2]</code> ou <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determine se a tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> contém as linhas <code>[a = 1, b = 3]</code> ou <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determine se a tabela <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> contém as linhas <code>[a = 1, b = 3]</code> ou <code>[a = 3, b = 5]</code> comparando apenas a coluna [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Indica se a tabela contém as colunas especificadas.",
        "Documentation.LongDescription": "Indica se a <code>table</code> contém as colunas especificadas, <code>columns</code>. Retorna <code>true</code> se a tabela contiver as colunas; do contrário, <code>false</code> será retornado.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela tem a coluna [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Localizar se a tabela tem as colunas [Name] e [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Indica se todas as linhas da tabela atendem à condição especificada.",
        "Documentation.LongDescription": "Indica se todas as linhas da <code>table</code> correspondem à <code>condition</code> especificada. Retornará <code>true</code> se todas as linhas forem correspondentes; do contrário, <code>false</code> será retornado.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar se todos os valores de linha na coluna [a] são pares na tabela.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Localize se todos os valores de linha são [a = 1, b = 2], na tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Indica se qualquer linha da tabela atende à condição especificada.",
        "Documentation.LongDescription": "Indica se qualquer linha da <code>table</code> corresponde à <code>condition</code> especificada. Retornará <code>true</code> se qualquer linha for correspondente; do contrário, <code>false</code> será retornado.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determine se algum valor de linha da coluna [a] será par na tabela <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determine se algum valor de linha será [a = 1, b = 2] na tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Retorna a linha maior ou o valor padrão, usando os critérios especificados.",
        "Documentation.LongDescription": "Retorna a linha maior na <code>table</code>, com base na <code>comparisonCriteria</code>. Se a tabela estiver vazia, o valor <code>default</code> opcional será retornado. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localize a linha com o maior valor na coluna [a] da tabela <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Localize a linha com o maior valor na coluna [a] da tabela <code>({})</code>. Retorne -1 se ela estiver vazia.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Retorna a linha menor ou um valor padrão, usando os critérios especificados.",
        "Documentation.LongDescription": "Retorna a linha menor na <code>table</code>, com base na <code>comparisonCriteria</code>. Se a tabela estiver vazia, o valor <code>default</code> opcional será retornado.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localizar a linha com o menor valor na coluna [a] da tabela.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Localizar a linha com o menor valor na coluna [a] da tabela. Retorna -1 se vazia.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Retorna uma ou mais posições da linha na tabela.",
        "Documentation.LongDescription": "Retorna a posição de linha da primeira ocorrência da <code>row</code> na <code>table</code> especificada. Retorna -1 caso nenhuma ocorrência seja encontrada.\r\n    <ul>\r\n       <li><code>table</code>: a tabela de entrada.</li>\r\n       <li><code>row</code>: a linha da tabela cuja posição será localizada.</li>\r\n       <li><code>occurrence</code>: <i>[opcional]</i> especifica quais ocorrências da linha serão retornadas.</li>\r\n       <li><code>equationCriteria</code>: <i>[opcional]</i> controla a comparação entre as linhas da tabela.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Localize a posição da primeira ocorrência de [a = 2, b = 4] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Localize a posição da segunda ocorrência de [a = 2, b = 4] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Localize a posição de todas as ocorrências de [a = 2, b = 4] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Retorna uma ou mais posições de qualquer linha especificada na tabela.",
        "Documentation.LongDescription": "Retorna as posições de linha da <code>table</code> da primeira ocorrência da lista de <code>rows</code>. Retorna -1 caso nenhuma ocorrência seja encontrada.\r\n    <ul>\r\n    <li><code>table</code>: a tabela de entrada.</li>\r\n       <li><code>rows</code>:  a lista de linhas da tabela cujas posições serão localizadas.</li>\r\n       <li><code>occurrence</code>: <i>[opcional]</i> especifica quais ocorrências da linha serão retornadas.</li>\r\n       <li><code>equationCriteria</code>: <i>[opcional]</i> controla a comparação entre as linhas da tabela.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Localize a posição da primeira ocorrência de [a = 2, b = 4] ou [a = 6, b = 8] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Localize a posição de todas as ocorrências de [a = 2, b = 4] ou [a = 6, b = 8] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Divide a tabela especificada em uma lista de tabelas usando o tamanho da página especificado.",
        "Documentation.LongDescription": "Divide <code>table</code> em uma lista de tabelas em que o primeiro elemento da lista é uma tabela que contém as primeiras <code>pageSize</code> linhas da\r\n    tabela de origem, o próximo elemento da lista é uma tabela que contém as próximas <code>pageSize</code> linhas da tabela de origem, etc.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Divida uma tabela de cinco registros em tabelas com dois registros cada.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Retorna uma lista contendo as primeiras linhas de contagem especificadas e as linhas restantes.",
        "Documentation.LongDescription": "Retorna uma lista contendo duas tabelas: uma tabela com as primeiras N linhas de <code>table</code> (conforme especificado por <code>count</code>) e uma tabela contendo as linhas restantes de <code>table</code>.\r\n\r\nSe as tabelas da lista resultante forem enumeradas exatamente uma vez e na ordem, a função enumerará <code>table</code> apenas uma vez.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Retorna as duas primeiras linhas da tabela e as linhas restantes da tabela.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Transforma as linhas da tabela que usa a função de transformação especificada.",
        "Documentation.LongDescription": "Cria uma <code>lista</code> aplicando a operação <code>transform</code> a cada linha em <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transforme as linhas de uma tabela em uma lista de números.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Transforme as linhas de uma tabela numérica em registros textuais.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Retorna a porção de <code>text</code> depois do <code>delimiter</code> especificado.\r\n    Um valor numérico opcional <code>index</code> indica a ocorrência do <code>delimiter</code> que deve ser considerada.\r\n    Uma lista opcional <code>index</code> indica a ocorrência do <code>delimiter</code> que deve ser considerada, assim como se a indexação deve ser feita a partir do início ou do final da entrada.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a porção de \"111-222-333\" depois do (primeiro) hífen.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Obtenha a porção de \"111-222-333\" depois do segundo hífen.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Obtenha a porção de \"111-222-333\" depois do segundo hífen a partir do fim.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Retorna o caractere na posição especificada.",
        "Documentation.LongDescription": "Retorna o caractere no valor de texto <code>text</code> na posição <code>index</code>. O primeiro caractere do texto está na posição 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Localize o caractere na posição 4 na cadeia de caracteres \"Olá, Mundo\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Retorna a porção de <code>text</code> antes do <code>delimiter</code> especificado.\r\n    Um valor numérico opcional <code>index</code> indica qual ocorrência do <code>delimiter</code> deve ser considerada.\r\n    Uma lista opcional <code>index</code> indica a ocorrência do <code>delimiter</code> que deve ser considerada, assim como se a indexação deve ser feita a partir do início ou do final da entrada.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a porção de \"111-222-333\" antes do (primeiro) hífen.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Obtenha a porção de \"111-222-333\" antes do segundo hífen.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Obtenha a porção de \"111-222-333\" antes do segundo hífen a partir do fim.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Especifica se o texto contém a subcadeia de caracteres.",
        "Documentation.LongDescription": "Detecta se <code>text</code> contém o valor <code>substring</code>. Retorna true se o valor for encontrado. Esta função não aceita curingas ou expressões regulares.\r\n      <br>\r\n      <br>\r\n      O argumento opcional <code>comparer</code> pode ser usado para especificar comparações que não diferenciam maiúsculas de minúsculas ou com reconhecimento de cultura e localidade.\r\n      Os seguintes comparadores internos estão disponíveis na linguagem da fórmula:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: usado para realizar uma comparação ordinal com distinção entre maiúsculas e minúsculas</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: usado para realizar uma comparação ordinal sem diferenciar maiúsculas de minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: usado para realizar uma comparação com reconhecimento de cultura</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Descubra se o texto \"Olá, Mundo\" contém \"Olá\".",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Descubra se o texto \"Olá, Mundo\" contém \"olá\".",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Descubra se o texto “Olá, Mundo” contém “Olá”, usando um comparador que não diferencia maiúsculas de minúsculas.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Retorna os últimos caracteres do texto.",
        "Documentation.LongDescription": "Retorna um valor <code>text</code> que representa os <code>count</code> últimos caracteres do valor <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Obtenha os cinco últimos caracteres do texto \"Olá, Mundo\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Indica se o texto termina no valor especificado.",
        "Documentation.LongDescription": "Indica se o texto fornecido, <code>text</code>, termina com o valor especificado, <code>substring</code>. A indicação diferencia maiúsculas de minúsculas.\r\n\r\n      <div>\r\n        <code>comparer</code> é um <code>Comparer</code> que é usado para controlar a comparação. Os comparadores podem ser usados ​​para fornecer comparações sem diferenciar maiúsculas de minúsculas ou com reconhecimento de cultura e localidade.\r\n      </div>\r\n      <div>\r\n        Os seguintes comparadores internos estão disponíveis na linguagem da fórmula:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: usado para realizar uma comparação ordinal exata</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: usado para realizar uma comparação ordinal exata sem diferenciar maiúsculas de minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: usado para realizar uma comparação com reconhecimento de cultura</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Verifique se \"Olá, Mundo\" termina com \"mundo\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Verifique se \"Olá, Mundo\" termina com \"Mundo\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Retorna texto formatado de uma cadeia de formato e argumentos.",
        "Documentation.LongDescription": "Retorna o texto formatado que é criado aplicando <code>arguments</code> de uma lista ou de um registro a uma cadeia de caracteres de formato <code>formatString</code>. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Formata uma lista de números.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Formata diferentes tipos de dados de um registro de acordo com a cultura do inglês (Estados Unidos).",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Retorna a subcadeia de caracteres até um comprimento específico.",
        "Documentation.LongDescription": "Retorna <code>count</code> caracteres, ou até o final de <code>text</code>; no deslocamento <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Encontre a subcadeia de caracteres no texto \"Olá Mundo\" iniciando no índice 6 abrangendo 5 caracteres.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Encontre a subcadeia de caracteres no texto \"Olá Mundo\" iniciando no índice 6 até o final.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Retorna o texto de um comprimento especificado preenchendo o fim do texto especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>text</code> preenchido até o comprimento <code>count</code> inserindo espaços no final do valor de texto <code>text</code>.\r\n    Um caractere <code>character</code> opcional pode ser usado para especificar o caractere usado no preenchimento. O caractere de preenchimento padrão é um espaço.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preencha o final de um valor de texto para que tenha 10 caracteres.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Preencha o final de um valor de texto com \"|\" para que tenha 10 caracteres.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Retorna o texto de um comprimento especificado preenchendo o início do texto especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>text</code> preenchido até o comprimento <code>count</code> inserindo espaços no início do valor de texto <code>text</code>. \r\n    Um caractere <code>character</code> opcional pode ser usado para especificar o caractere usado no preenchimento. O caractere de preenchimento padrão é um espaço.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preencha o início de um valor de texto para que tenha 10 caracteres.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Preencha o início de um valor de texto com \"|\" para que tenha 10 caracteres.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Retorna a primeira posição do valor (- 1 se ela não for encontrada).",
        "Documentation.LongDescription": "Retorna a posição da ocorrência especificada do valor de texto <code>substring</code> encontrado em <code>text</code>.\r\n    Um parâmetro opcional <code>occurrence</code> pode ser usado para especificar qual posição de ocorrência retornar (primeira ocorrência por padrão).\r\n    Retorna -1 se <code>substring</code> não for encontrado.\r\n\r\n      <div>\r\n        <code>comparer</code> é um <code>Comparer</code> que é usado para controlar a comparação. Os comparadores podem ser usados ​​para fornecer comparações sem diferenciar maiúsculas de minúsculas ou com reconhecimento de cultura e localidade.\r\n      </div>\r\n      <div>\r\n        Os seguintes comparadores internos estão disponíveis na linguagem da fórmula:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: usado para realizar uma comparação ordinal exata</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: usado para realizar uma comparação ordinal exata sem diferenciar maiúsculas de minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: usado para realizar uma comparação com reconhecimento de cultura</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a posição da primeira ocorrência de \"Mundo\" no texto \"Olá, Mundo! Olá, Mundo!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Obtenha a posição da última ocorrência de \"Mundo\" no texto \"Olá, Mundo! Olá, Mundo!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Retorna a primeira posição no valor de texto de qualquer caractere listado (- 1 se ela não for encontrada).",
        "Documentation.LongDescription": "Retorna a primeira posição de qualquer caractere na lista <code>characters</code> encontrada em <code>text</code>.\n    Um parâmetro opcional <code>occurrence</code> pode ser usado para especificar qual posição de ocorrência retornar.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Localize a posição do \"M\" ou do \"O\" no texto \"Olá, Mundo!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Localize todas as posições do \"M\" ou do \"O\" no texto \"Olá, Mundo!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Retorna a subcadeia de caracteres encontrada no deslocamento.",
        "Documentation.LongDescription": "Retorna a subcadeia de caracteres do texto <code>text</code> encontrada no deslocamento <code>offset</code>.\r\n    Um parâmetro <code>count</code> opcional pode ser incluído para especificar quantos caracteres serão retornados. Se não houver caracteres suficientes, será gerado um erro.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Localize a subcadeia de caracteres no texto \"Olá, Mundo\", começando no índice. 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Localize a subcadeia de caracteres no texto \"Olá, Mundo, Olá\", começando no índice 6 e abrangendo 5 caracteres.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Remove todas as ocorrências do caractere especificado ou da lista de caracteres no valor de texto de entrada.",
        "Documentation.LongDescription": "Retorna uma cópia do valor de texto <code>text</code> com todos os caracteres na <code>removeChars</code> removida.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Remova os caracteres , e ; do valor de texto.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Remove uma contagem de caracteres começando no deslocamento especificado",
        "Documentation.LongDescription": "Retorna uma cópia do valor de texto <code>text</code> com todos os caracteres na posição <code>offset</code> removida.\r\n    Um parâmetro <code>count</code> opcional pode ser usado para especificar o número de caracteres a serem removidos. O valor padrão de <code>count</code> é 1. Os valores de posição começam em 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Remova um caractere do valor de texto \"ABEFC\" na posição 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Remova dois caracteres do valor de texto \"ABEFC\" começando na posição 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Retorna um valor de texto composto pelo texto de entrada repetido um número de vezes especificado.",
        "Documentation.LongDescription": "Retorna um valor de texto composto pelo texto de entrada <code>text</code> repetido <code>count</code> vezes.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Repita o texto \"a\" cinco vezes.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Repita o texto \"olámundo\" três vezes.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Seleciona todas as ocorrências do caractere especificado ou da lista de caracteres no valor de texto de entrada.",
        "Documentation.LongDescription": "Retorna uma cópia do valor de texto <code>text</code> com todos os caracteres que não estão na <code>selectChars</code> removida.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Selecione todos os caracteres no intervalo de 'a' a 'z' no valor de texto.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Divide o texto em uma lista de valores de texto com base em um delimitador especificado.",
        "Documentation.LongDescription": "Retorna uma lista de valores de texto resultantes da divisão de um valor de texto <code>text</code> com base no delimitador especificado, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista a partir do valor de texto delimitado por \"|\", \"Name|Address|PhoneNumber\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Retorna uma lista de valores de texto, divididos em qualquer caractere do delimitador.",
        "Documentation.LongDescription": "Retorna uma lista de valores de texto resultantes da divisão de um valor de texto <code>text</code> com base em qualquer caractere no delimitador especificado, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista a partir do valor de texto \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Retorna o início do texto.",
        "Documentation.LongDescription": "Retorna os <code>count</code> primeiros caracteres de <code>text</code> como um valor de texto.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Obtenha os cinco primeiros caracteres de \"Olá, Mundo\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Indica se o texto começa com um valor especificado.",
        "Documentation.LongDescription": "Retorna true se o valor do texto <code>text</code> começar com o valor do texto <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Um valor <code>text</code> que deve ser pesquisado</li>\r\n        <li><code>substring</code>: <i></i> Um valor <code>text</code> que é a substring a ser pesquisada em <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Optional]</i> Um <code>Comparer</code> usado para controlar a comparação. Por exemplo, <code>Comparer.OrdinalIgnoreCase</code> pode ser usado para realizar pesquisas sem diferenciar maiúsculas de minúsculas</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> é um <code>Comparer</code> que é usado para controlar a comparação. Os comparadores podem ser usados ​​para realizar comparações sem diferenciar maiúsculas de minúsculas ou com reconhecimento de cultura e localidade.\r\n      </div>\r\n      <div>\r\n        Os seguintes comparadores internos estão disponíveis na linguagem da fórmula:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: usado para realizar uma comparação ordinal exata</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: usado para realizar uma comparação ordinal exata sem diferenciar maiúsculas de minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: usado para realizar uma comparação com reconhecimento de culturati</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Verifique se o texto \"Olá, Mundo\" começa com o texto \"olá\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Verifique se o texto \"Olá, Mundo\" começa com o texto \"Olá\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Retorna um tipo que representa funções com parâmetro específico e restrições de tipo de retorno",
        "Documentation.LongDescription": "Cria um <code>tipo de função</code> de <code>signature</code>, um registro de <code>ReturnType</code> e <code>Parâmetros</code>, e <code>min</code>, o número mínimo de argumentos necessários para invocar a função.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Cria o tipo para uma função que aceita um parâmetro de número denominado X e retorna um número.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Retorna um tipo que representa registros com restrições de tipo específicas em campos.",
        "Documentation.LongDescription": "Retorna um tipo que representa registros com restrições de tipo específicas em campos.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Gerar dinamicamente um tipo de tabela.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Determina se um valor do primeiro tipo é sempre compatível com o segundo tipo.",
        "Documentation.LongDescription": "Determina se um valor de <code>type1</code> é sempre compatível com <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determine se um valor do tipo number também pode ser tratado como tipo any.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Determine se um valor do tipo any também pode ser tratado como número do tipo.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Substitui as facetas de um tipo.",
        "Documentation.LongDescription": "Substitui as facetas de <code>type</code> pelas facetas contidas no registro <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Retorna um novo tipo de tabela com todas as chaves substituídas pela lista de chaves especificada.",
        "Documentation.LongDescription": "Retorna um novo tipo de tabela com todas as chaves substituídas pela lista de chaves especificada.<br>\r\n    <br>\r\n    Cada chave é definida usando um registro no seguinte formato:\r\n    <ul>\r\n      <li>\r\n        <code>Colunas</code>: uma lista dos nomes das colunas que definem a chave\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code> se a chave for a chave primária da tabela; caso contrário, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    A lista de chaves especificada é validada para garantir que não mais de uma chave primária seja definida e que todos os nomes de colunas de chave existam no tipo de tabela.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Substitua as informações principais em um tipo de tabela.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Limpe as principais informações definidas anteriormente em um tipo de tabela.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Retorna o tipo de uma coluna em uma tabela.",
        "Documentation.LongDescription": "Retorna o tipo da coluna <code>column</code> no tipo de tabela <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Retorna um URI absoluto que é a combinação do URI base de entrada e URI relativo.",
        "Documentation.LongDescription": "Retorna um URI absoluto que é a combinação do <code>baseUri</code> de entrada e do <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Retorna a soma dos dois valores.",
        "Documentation.LongDescription": "Retorna a soma de <code>value1</code> e <code>value2</code>. Um parâmetro <code>precision</code> opcional pode ser especificado; <code>Precision.Double</code> é usado por padrão.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Retorna o valor se for compatível com o tipo especificado.",
        "Documentation.LongDescription": "Retorna o valor se for compatível com o tipo especificado. Isso é equivalente ao operador \"as\" em M, com a exceção de que pode aceitar referências de tipo de identificador, como Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Converta um número em um número.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Tente converter um valor de texto em um número.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Retorna -1, 0 ou 1 se o primeiro valor for menor, igual ou maior que o segundo.",
        "Documentation.LongDescription": "Retorna -1, 0 ou 1 se o primeiro valor for menor, igual ou maior que o segundo.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Retorna o resultado da divisão do primeiro valor pelo segundo.",
        "Documentation.LongDescription": "Retorna o resultado da divisão de <code>value1</code> por <code>value2</code>. Um parâmetro <code>precision</code> opcional pode ser especificado; <code>Precision.Double</code> é usado por padrão.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Especifica se os dois valores são iguais.",
        "Documentation.LongDescription": "Retornará true se o valor <code>value1</code> for igual ao valor <code>value2</code>; do contrário, false será retornado.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Determina se um valor é compatível com o tipo especificado.",
        "Documentation.LongDescription": "Determina se um valor é compatível com o tipo especificado. Isso é equivalente ao operador \"is\" em M, com a exceção de que pode aceitar referências de tipo de identificador, como Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Compare duas maneiras de determinar se um número é compatível com o número do tipo.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Retorna o produto dos dois valores.",
        "Documentation.LongDescription": "Retorna o produto da multiplicação de <code>value2</code> por <code>value1</code>. Um parâmetro <code>precision</code> opcional pode ser especificado; <code>Precision.Double</code> é usado por padrão.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Avalia uma consulta em relação a um destino.",
        "Documentation.LongDescription": "<p>Avalia <code>query</code> em relação a <code>target</code> usando os parâmetros especificados em <code>parameters</code> e as opções especificadas em <code>options</code>.</p>\r\n<p>A saída da consulta é definida por <code>target</code>.</p>\r\n<p><code>target</code> fornece o contexto para a operação descrita por <code>query</code>.</p>\r\n<p><code>query</code> descreve a consulta a ser executada em relação a <code>target</code>. <code>query</code> é expressa de uma maneira específica para <code>target</code> (por exemplo, uma instrução T-SQL).</p>\r\n<p> O valor opcional <code>parameters</code> pode conter uma lista ou registro conforme apropriado para fornecer os valores de parâmetro esperados por <code>query</code>.</p>\r\n<p> O registro opcional <code>options</code> pode conter opções que afetam o comportamento de avaliação de <code>query</code> em relação a <code>target</code>. Essas opções são específicas para <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Especifica se os dois valores são iguais.",
        "Documentation.LongDescription": "Retorna nulo se um argumento '<code>value1</code>', '<code>value2</code>' for nulo, caso contrário, equivalente a Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Substitui as informações de metadados da entrada.",
        "Documentation.LongDescription": "Substitui as informações de metadados da entrada.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Substitui o tipo do valor.",
        "Documentation.LongDescription": "Substitui o tipo do <code>value</code> pelo <code>type</code> fornecido.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Substitua o tipo padrão de um registro por um tipo mais específico.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Retorna a diferença dos dois valores.",
        "Documentation.LongDescription": "Retorna a diferença de <code>value1</code> e <code>value2</code>. Um parâmetro <code>precision</code> opcional pode ser especificado; <code>Precision.Double</code> é usado por padrão.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Cria uma ação que, quando executada, retorna os resultados de realizar uma solicitação HTTP como um valor binário.",
        "Documentation.LongDescription": "Cria uma ação que, quando executada, retornará os resultados da execução de uma solicitação <code>method</code> em relação a<code>url</code> HHTTP como um valor binário.\r\n Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n <ul>\r\n<li><code>Query</code> : Adicione programaticamente par&#226;metros de consulta &#224; URL sem precisar se preocupar com a sa&#237;da.</li>\r\n<li><code>ApiKeyName</code> : Se o site de destino tiver uma no&#231;&#227;o de uma chave de API, este par&#226;metro poder&#225; ser usado para especificar o nome (n&#227;o o valor) do par&#226;metro de chave que precisa ser usado na URL. O valor da chave real &#233; fornecido na credencial.</li>\r\n<li><code>Headers</code> : A especifica&#231;&#227;o deste valor como um registro fornecer&#225; cabe&#231;alhos adicionais a uma solicita&#231;&#227;o HTTP.</li>\r\n<li><code>Timeout</code> : A especifica&#231;&#227;o deste valor como uma dura&#231;&#227;o alterar&#225; o tempo limite de uma solicita&#231;&#227;o HTTP. O valor padr&#227;o &#233; 100 segundos.</li>\r\n<li><code>ExcludedFromCacheKey</code> : A especifica&#231;&#227;o deste valor como uma lista excluir&#225; essas chaves de cabe&#231;alho HTTP de fazer parte do c&#225;lculo para o cache de dados.</li>\r\n<li><code>IsRetry</code> : A especifica&#231;&#227;o deste valor l&#243;gico como true ignorar&#225; qualquer resposta existente no cache ao buscar dados.</li>\r\n<li><code>ManualStatusHandling</code> : A especifica&#231;&#227;o deste valor como uma lista impedir&#225; qualquer tratamento interno para solicita&#231;&#245;es HTTP cuja resposta tenha um desses c&#243;digos de status.</li>\r\n<li><code>RelativePath</code> : A especifica&#231;&#227;o deste valor como texto o anexar&#225; &#224; URL base antes de fazer a solicita&#231;&#227;o.</li>\r\n<li><code>Content</code> : A especifica&#231;&#227;o deste valor far&#225; com que o conte&#250;do se torne o corpo da solicita&#231;&#227;o HTTP.</li>\r\n</ul>\r\n\r\n    <br>\r\n     Observe que essa função está desabilitada na maioria dos contextos. Considere usar Web.Contents ou Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Executar uma solicitação GET no Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Digite a URL do ponto de extremidade da API REST do Azure Enterprise associada ao seu registro",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Retorna os resultados binários da chamada para a url fornecida para a API do Azure Enterprise.",
        "Documentation.Examples": [
          {
            "Description": "Usando a função AzureEnterprise.Contents para retornar os resultados de um relatório específico.",
            "Code": "        relatório\r\n            de let = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            ignora = Table.Skip(relatório, 2),\r\n            divide =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promovido = Table.PromoteHeaders(split)\r\n        em\r\n            promovido",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Retorna o conteúdo do blob especificado de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Retorna o conteúdo do blob na URL, <code>url</code>, de um cofre do Armazenamento do Azure. <code>options</code> pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>BlockSize</code> : O n&#250;mero de bytes a serem lidos antes de aguardar o consumidor de dados. O valor padr&#227;o &#233; 4 MB.</li>\r\n<li><code>RequestSize</code> : O n&#250;mero de bytes cuja leitura ser&#225; tentada em uma &#250;nica solicita&#231;&#227;o HTTP para o servidor. O valor padr&#227;o &#233; 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : A op&#231;&#227;o ConcurrentRequests d&#225; suporte ao download mais r&#225;pido de dados por meio da especifica&#231;&#227;o do n&#250;mero de solicita&#231;&#245;es a serem feitas em paralelo, ao custo da utiliza&#231;&#227;o de mem&#243;ria. A mem&#243;ria necess&#225;ria &#233; (ConcurrentRequest * RequestSize). O valor padr&#227;o &#233; 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Retorna o conteúdo do arquivo especificado de um sistema de arquivos do Azure Data Lake Storage.",
        "Documentation.LongDescription": "Retorna o conteúdo do arquivo na URL, <code>url</code>, de um sistema de arquivos do Azure Data Lake Storage. <code>options</code> pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>BlockSize</code> : O n&#250;mero de bytes a serem lidos antes de aguardar o consumidor de dados. O valor padr&#227;o &#233; 4 MB.</li>\r\n<li><code>RequestSize</code> : O n&#250;mero de bytes cuja leitura ser&#225; tentada em uma &#250;nica solicita&#231;&#227;o HTTP para o servidor. O valor padr&#227;o &#233; 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : A op&#231;&#227;o ConcurrentRequests d&#225; suporte ao download mais r&#225;pido de dados por meio da especifica&#231;&#227;o do n&#250;mero de solicita&#231;&#245;es a serem feitas em paralelo, ao custo da utiliza&#231;&#227;o de mem&#243;ria. A mem&#243;ria necess&#225;ria &#233; (ConcurrentRequest * RequestSize). O valor padr&#227;o &#233; 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Retorna o comprimento aproximado do binário.",
        "Documentation.LongDescription": "Retorna o comprimento aproximado de <code>binary</code> ou um erro se a fonte de dados não for compatível com um comprimento aproximado.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o comprimento aproximado do valor binário.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Armazena em buffer o valor binário na memória.",
        "Documentation.LongDescription": "Armazena em buffer o valor binário na memória. O resultado dessa chamada é um valor binário estável, o que significa que ele terá um comprimento e uma ordem de bytes deterministas.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Crie uma versão estável do valor binário.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Combina uma lista de binários em um binário único.",
        "Documentation.LongDescription": "Combina uma lista de binários em um binário único.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Cria um binário a partir do valor especificado",
        "Documentation.LongDescription": "Retorna um valor <code>binary</code> com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Binary.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>binary</code>, <code>value</code> será retornado. Os valores dos tipos a seguir podem ser convertidos em um valor <code>binary</code>:\r\n      <ul>\r\n        <li><code>text</code>: um valor <code>binary</code> da representação de texto. Confira <code>Binary.FromText</code> para obter detalhes.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, um erro será retornado.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor <code>binary</code> de <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Converte uma lista de números em valor binário.",
        "Documentation.LongDescription": "Converte uma lista de números em valor binário.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Decodifica dados de um formato de texto em binário.",
        "Documentation.LongDescription": "Retorna o resultado da conversão do valor de texto <code>text</code> em binário (lista de <code>number</code>). <code>encoding</code> pode ser especificado para indicar a codificação usada no valor de texto.\r\n      Os valores <code>BinaryEncoding</code> a seguir podem ser usados para <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codificação de base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codificação hexadecimal</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Decodifique \"1011\" em binário.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Decodifique \"1011\" em binário com codificação hexadecimal.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Lê o fluxo binário e tenta determinar as informações de formato e tipo de conteúdo do fluxo.",
        "Documentation.LongDescription": "Retorna um registro com o campo Content.Type que contém o tipo de MIME inferido.\r\n    Se o tipo de conteúdo inferido for texto/* e uma página de código de codificação for detectada, retornará também o campo Content.Encoding que contém a codificação do fluxo.\r\n    Se o tipo de conteúdo deduzido for texto/csv, e o formato for delimitado, retornará também o campo Csv.PotentialDelimiter que contém uma tabela para análise de delimitadores em potencial.\r\n    Se o tipo de conteúdo inferido for texto/csv e o formato for largura fixa, retornará também campo Csv.PotentialPositions contendo uma lista para análise de possíveis posições de coluna de largura fixa.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Retorna o número de caracteres.",
        "Documentation.LongDescription": "Retorna o número de caracteres.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Converte um valor binário em lista de números.",
        "Documentation.LongDescription": "Converte um valor binário em lista de números.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Codifica dados binários em formato de texto.",
        "Documentation.LongDescription": "Retorna o resultado da conversão de uma lista binária de números <code>binary</code> em valor de texto. Se desejar, <code>encoding</code> pode ser especificado para indicar a codificação a ser usada no valor de texto produzido\r\n      Os valores <code>BinaryEncoding</code> a seguir podem ser usados para <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codificação de base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codificação hexadecimal</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Cria um registro de erro modificado que não acionará um fallback quando lançado por um manipulador definido em uma exibição (via Binary.View).",
        "Documentation.LongDescription": "Cria um registro de erro modificado de <code>errorRecord</code> que não acionará um fallback quando lançado por um manipulador definido em uma exibição (via Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Cria uma função que pode ser interceptada por um manipulador definido em uma exibição (via Binary.View).",
        "Documentation.LongDescription": "<p>Cria uma função de visualização baseada em <code>function</code> que pode ser tratada em uma visualização criada por <code>Binary.View</code>.</p>\r\n<p>O manipulador <code>OnInvoke</code> de <code> Binary.View</code> pode ser usado para definir um manipulador para a função de visualização.</p>\r\n<p>Assim como os manipuladores para operações internas, se nenhum manipulador <code>OnInvoke</code> for especificado, ou se não manipular a função de exibição, ou se um erro for gerado pelo manipulador, <code>function</code> será aplicado na parte superior da exibição.</p>\r\n<p>Consulte a documentação publicada do conector personalizado do Power Query para uma descrição mais completa de <code>Binary.View</code> e funções de visualização personalizada.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Um formato binário que lê um número inteiro de 64 bits com sinal que foi codificado usando a codificação de comprimento variável de 7 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro de 64 bits com sinal que foi codificado usando a codificação de comprimento variável de 7 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Um formato binário que lê um número inteiro de 64 bits sem sinal que foi codificado usando a codificação de comprimento variável de 7 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro de 64 bits sem sinal que foi codificado usando a codificação de comprimento variável de 7 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Um formato binário que lê um número inteiro de 8 bits sem sinal.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro de 8 bits sem sinal.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Um formato binário que lê um valor decimal .NET de 16 bytes.",
        "Documentation.LongDescription": "Um formato binário que lê um valor decimal .NET de 16 bytes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Um formato binário que lê um valor de ponto flutuante de precisão dupla IEEE de 8 bytes.",
        "Documentation.LongDescription": "Um formato binário que lê um valor de ponto flutuante de precisão dupla IEEE de 8 bytes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Retorna um formato binário que lê uma sequência de itens e retorna uma lista.",
        "Documentation.LongDescription": "Retorna um formato binário que lê uma sequência de itens e retorna uma <code>lista</code>.  O <code>binaryFormat</code> parâmetro especifica o formato binário de cada item.  Há três formas de determinar o número de itens lidos: <ul><li>Se o <code>countOrCondition</code> não for especificado, o formato binário será lido até que não haja mais itens.</li><li>Se o <code>countOrCondition</code> for um número, o formato binário lerá muitos itens.</li><li>Se o <code>countOrCondition</code> for uma função, essa função será invocada para cada item lido.  A função retorna verdadeiro para continuar e falso para interromper a leitura de itens.  O item final é incluído na lista.</li><li>Se o <code>countOrCondition</code> for um formato binário, a contagem de itens deverá preceder a lista e o formato especificado será usado para ler a contagem.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Bytes lidos até o fim dos dados.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Dois bytes lidos.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Bytes lidos até que o valor de byte seja maior ou igual a dois.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Um formato binário que indica a leitura de zero bytes e retorna nulo.",
        "Documentation.LongDescription": "Um formato binário que indica a leitura de zero bytes e retorna nulo.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Retorna um formato binário que lê um registro.",
        "Documentation.LongDescription": "Retorna um formato binário que lê um registro.  O parâmetro <code>record</code> especifica o formato do registro.  Cada campo do registro pode ter um formato binário diferente.  Se um campo contiver um valor que não seja um valor de formato binário, nenhum dado será lido para esse campo, e o valor do campo será refletido no resultado.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Leia um registro contendo um número inteiro de 16 bits e um número inteiro de 32 bits.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Um formato binário que lê um número inteiro de 16 bits com sinal.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro de 16 bits com sinal.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Um formato binário que lê um número inteiro de 32 bits com sinal.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro de 32 bits com sinal.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Um formato binário que lê um número inteiro de 64 bits com sinal.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro de 64 bits com sinal.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Um formato binário que lê um valor de ponto flutuante de precisão única IEEE de 4 bytes.",
        "Documentation.LongDescription": "Um formato binário que lê um valor de ponto flutuante de precisão única IEEE de 4 bytes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Retorna um formato binário que lê um valor de texto.",
        "Documentation.LongDescription": "Retorna um formato binário que lê um valor de texto.  O <code>length</code> especifica o número de bytes a decodificar ou o formato binário do comprimento que precede o texto. O valor opcional <code>encoding</code> especifica a codificação do texto.  Se o <code>encoding</code> não for especificado, a codificação será determinada a partir das marcas de ordem de byte Unicode. Se nenhuma marca de ordem de byte estiver presente, então <code>TextEncoding.Utf8</code> será usado.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Decodifique dois bytes como texto ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Decodifique o texto ASCII em que o comprimento do texto em bytes aparece antes do texto como um byte.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Um formato binário que lê um número inteiro de 16 bits sem sinal.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro de 16 bits sem sinal.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Um formato binário que lê um número inteiro de 32 bits sem sinal.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro de 32 bits sem sinal.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Um formato binário que lê um número inteiro de 64 bits sem sinal.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro de 64 bits sem sinal.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Cria um inteiro de 8 bits de um determinado valor.",
        "Documentation.LongDescription": "Retorna um valor de <code>number</code> inteiro de 8 bits com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Byte.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for um <code>number</code> dentro do intervalo de número inteiro de 8 bits sem uma parte fracionária, <code>value</code> será retornado. Se tiver uma parte fracionária, então o número será arredondado com o modo de arredondamento especificado. O modo de arredondamento padrão é <code>RoundingMode.ToEven</code>. Se <code>value</code> for qualquer outro tipo, será convertido primeiro para um <code>number</code> usando <code>Number.FromText</code>. Confira <code>Number.Round</code> para os modos de arredondamento disponíveis. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor <code>number</code> inteiro de 8 bits de <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtenha o valor de <code>number</code> inteiro de 8 bits de <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Converte um número em um caractere de texto.",
        "Documentation.LongDescription": "Retorna o equivalente de caracteres do número.<br>\r\n    <br>\r\n    O <code>number</code> fornecido deve ser um ponto de código Unicode de 21 bits.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Converte um número em seu valor de caractere equivalente.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Converte um caractere em um número e retorna a ser caractere.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Converte o ponto de código hexadecimal para smiley \"rosto sorridente\" em seu par alternativo UTF-16 equivalente.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Converte um caractere em um valor numérico.",
        "Documentation.LongDescription": "Retorna o equivalente numérico de <code>character</code>.<br>\r.\n    <br>\r\n    O resultado será o ponto de código Unicode de 21 bits representado pelo caractere fornecido ou pelo par alternativo.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Converte um caractere em seu valor de número equivalente.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Converte o par alternativo UTF-16 para smiley \"rosto sorridente\" em seu ponto de código hexadecimal equivalente.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Retorna uma função que combina uma lista de texto usando o delimitador especificado.",
        "Documentation.LongDescription": "Retorna uma função que combina uma lista de texto em texto único usando o delimitador especificado.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina uma lista de valores de texto usando um delimitador de ponto e vírgula.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Combine o texto de duas colunas usando um delimitador de vírgulas e aspas no estilo CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Retorna uma função que combina uma lista de texto usando uma sequência de delimitadores.",
        "Documentation.LongDescription": "Retorna uma função que combina uma lista de valores texto em um único valor de texto usando uma sequência de delimitadores.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina uma lista de valores de texto usando uma sequência de delimitadores.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Retorna uma função que combina uma lista de texto usando os comprimentos especificados.",
        "Documentation.LongDescription": "Retorna uma função que combina uma lista de valores de texto em um único valor de texto usando os comprimentos especificados.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina uma lista de valores de texto extraindo os números de caracteres especificados de cada valor de entrada.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Combina uma lista de valores de texto extraindo os números de caracteres especificados, após o primeiro pré-preenchimento do resultado com o texto do modelo.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Retorna uma função que combina uma lista de texto usando posições de saída especificadas.",
        "Documentation.LongDescription": "Retorna uma função que combina uma lista de texto em um valor de texto único usando o posições de saída especificados.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina uma lista de valores de texto colocando-os na saída nas posições especificadas.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Retorna uma função que combina uma lista de texto usando as posições e os comprimentos especificados.",
        "Documentation.LongDescription": "Retorna uma função que combina uma lista de texto em um valor de texto único usando o posições de saída e comprimentos especificados. Um comprimento nulo indica que todo o valor do texto deve ser incluído.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina uma lista de valores de texto usando as posições e os comprimentos de saída especificados.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Retorna uma função de comparador com base na cultura e diferenciação de maiúsculas e minúsculas especificadas.",
        "Documentation.LongDescription": "Retorna uma função de comparador que usa o <code>culture</code> e a diferenciação de maiúsculas e minúsculas especificados pelo <code>ignoreCase</code> para executar comparações.<br>\r\n      <br>\r\n      Uma função de comparador aceita dois argumentos e retorna -1, 0 ou 1 se o primeiro valor for menor, igual ou maior que o segundo.<br>\r\n      <br>\r\n      O valor padrão de <code>ignoreCase</code> é false. O <code>culture</code> deve ser uma das localidades com suporte pelo .NET Framework (por exemplo, “en-US”).\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Comparar \"a\" e \"A\" usando a localidade \"pt-BR\" para determinar se os valores são iguais.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Comparar \"a\" e \"A\" usando a localidade \"pt-BR\", ignorando maiúsculas e minúsculas, para determinar se os valores são iguais.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Retorna o identificador de membro exclusivo do valor de propriedade dos membros.",
        "Documentation.LongDescription": "Retorna um identificador de membro exclusivo de um valor de propriedade do membro. <code>attribute</code>. Retorna nulo para quaisquer outros valores.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Retorna a chave de uma propriedade.",
        "Documentation.LongDescription": "Retorna a chave da propriedade <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Retorna um valor de moeda de um determinado valor.",
        "Documentation.LongDescription": "Retorna um valor de <code>currency</code> com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Currency.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>number</code> dentro do intervalo de moeda, a parte fracional de <code>value</code> será arredondada para 4 dígitos decimais e retornada. Se o <code>value</code> for de qualquer outro tipo, será convertido primeiro para um <code>number</code> usando <code>Number.FromText</code>. O intervalo válido para moeda é <code>-922,337,203,685,477.5808</code> a <code>922,337,203,685,477.5807</code>. Confira <code>Number.Round</code> para os modos de arredondamento disponíveis. O padrão é <code>RoundingMode.ToEven</code>. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor de <code>moeda</code> de <code>\"1,23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Obter o valor de <code>moeda</code> <code>\"1.23455\"</code> usando <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Retorna o componente de dia.",
        "Documentation.LongDescription": "Retorna o componente de dia de um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> com base no qual o componente de dia é extraído.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o componente de dia de um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> que representa a data e a hora 14/5/2011 05:00: 00 PM.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Retorna um número (de 0 a 6) que indica o dia da semana do valor fornecido.",
        "Documentation.LongDescription": "Retorna um número (de 0 a 6) que indica o dia da semana do <code>dateTime</code> fornecido.\r\n  <ul>\r\n        <li><code>dateTime</code>: Um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: Um valor de <code>Day</code> que indica qual dia deve ser considerado como o primeiro dia da semana. Os valores permitidos são Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday ou Day.Saturday. Se o valor não for especificado, um padrão dependente da cultura será usado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o dia da semana representado por segunda-feira, 21 de fevereiro de 2011, tratando o domingo como o primeiro dia da semana.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Obter o dia da semana representado por segunda-feira, 21 de fevereiro de 2011, tratando a segunda-feira como o primeiro dia da semana.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Retorna o nome do dia da semana.",
        "Documentation.LongDescription": "Retorna o dia do nome da semana para o <code>date</code> fornecido. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o nome do dia da semana.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Retorna um número de 1 a 366 que representa o dia do ano.",
        "Documentation.LongDescription": "Retorna um número que representa o dia do ano no valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "O dia do ano para 1º de março de 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Retorna um número de 28 a 31 que indica o número de dias do mês.",
        "Documentation.LongDescription": "Retorna o número de dias do mês no valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> <code>dateTime</code>. \r\n <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> para o qual o número de dias do mês é retornado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Número de dias do mês de dezembro conforme representado por <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Retorna o final do dia.",
        "Documentation.LongDescription": "Retorna o final do dia representado por <code>dateTime</code>. As informações de fuso horário são preservadas.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o final do dia é calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o fim do dia de 14/5/2011 05:00: 00 PM.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Obtenha o fim do dia de 17/5/2011 05:00: 00 PM -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Retorna o final do mês.",
        "Documentation.LongDescription": "Retorna o final do mês que contém <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o final do mês é calculado</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o fim do mês de 14/5/2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Obtenha o fim do mês de 17/5/2011 05:00:00 PM -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Retorna o final do trimestre.",
        "Documentation.LongDescription": "Retorna o final do trimestre que contém <code>dateTime</code>. As informações de fuso horário são preservadas.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o final do trimestre é calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o final do trimestre para 10 de outubro de 2011, 8h.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Retorna o final da semana.",
        "Documentation.LongDescription": "Retorna o final da semana que contém <code>dateTime</code>.\r\n    Esta função recebe um opcional <code>Day</code>, <code>firstDayOfWeek</code>, para definir como o primeiro dia da semana para este cálculo relativo. o valor padrão é <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> valor a partir do qual o último dia da semana é calculado</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Optional]</i> um valor <code>Day.Type</code> representando o primeiro dia da semana. Os valores possíveis são <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> e <code>Day.Saturday.</code> . O valor padrão é <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o fim da semana de 14/5/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Obtenha o fim da semana de 17/5/2011 05:00: 00 PM. -7:00, considerando o domingo como primeiro dia da semana.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Retorna o final do ano.",
        "Documentation.LongDescription": "Retorna um valor que representa o fim do ano em <code>dateTime</code>, incluindo segundos fracionários. As informações de fuso horário são preservadas.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> com base no qual o fim do ano é calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o fim do ano de 14/5/2011 05:00: 00 PM.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Obtenha o fim da hora de 17/5/2011 05:00: 00 PM -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Cria uma data a partir do valor especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>date</code> do <code>value</code> fornecido. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").\r\nSe o <code>value</code> fornecido for <code>null</code>, <code>Date.From</code> retorna <code>null</code>. Se o <code>value</code> fornecido for <code>date</code>, <code>value</code> será retornado. Os valores dos seguintes tipos podem ser convertidos em um valor <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: um <code>date</code> valor da representação textual. Consulte <code>Date.FromText</code> para obter detalhes.</li>\r\n        <li><code>datetime</code>: o componente de data do <code>value</code>.</li> \r\n        <li><code>datetimezone</code>: o componente de data do local datetime equivalente a <code>value</code>.</li>\r\n        <li><code>number</code>: o componente de data do equivalente datetime da Data de Automação OLE expresso por <code>value</code>.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, um erro é retornado.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>43910</code> em um valor <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Converta <code>#datetime(1899, 12, 30, 06, 45, 12)</code> em um valor <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Cria uma Data a partir de Formatos de data locais, universais e personalizados.",
        "Documentation.LongDescription": "Cria um valor <code>date</code> a partir de uma representação textual, <code>text</code>. Um parâmetro opcional <code>record</code>, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code > indica o formato a ser usado. Para obter mais detalhes, acesse https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na análise da data usando o melhor esforço possível.</li>\r\n <li><code>Culture</code>: Quando <code> Format</code> não é nulo, <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto em <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato padrão a ser usado. Quando <code>Culture</code> é <code>null</code> ou omitido, <code>Culture.Current</code> é usado.</li>\r\n</ul>\r\nPara oferecer suporte a fluxos de trabalho legados, <code>options</code> também pode ser um valor de texto. Isso tem o mesmo comportamento como se <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>\"2010-12-31\"</code> em um valor <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Converta usando um formato personalizado e a cultura alemã.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Localize a data no calendário gregoriano que corresponde ao início de 1400 no calendário islâmico.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Indica se essa data ocorre durante o dia atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o dia atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se a hora atual do sistema ocorre no dia atual.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Indica se essa data ocorre durante o mês atual, conforme determinado pela data e hora atuais do sistema.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o mês atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se a hora atual do sistema ocorre no mês atual.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Indica se essa data ocorre durante o trimestre atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o trimestre atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se a hora atual do sistema ocorre no trimestre atual.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Indica se essa data ocorre durante a semana atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante a semana atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se a hora atual do sistema ocorre na semana atual.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Indica se essa data ocorre durante o ano atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o ano atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se a hora atual do sistema ocorre no ano atual.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Indica se esta data ocorre durante o dia seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no dia atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o dia seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no dia atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se o dia após a hora atual do sistema é o dia seguinte.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Indica se esta data ocorre durante o mês seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no mês atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o mês seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no mês atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se o mês após a hora atual do sistema é o mês seguinte.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Indica se esta data ocorre durante o trimestre seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no trimestre atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o trimestre seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no trimestre atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se o trimestre após a hora atual do sistema é o trimestre seguinte.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Indica se esta data ocorre durante a semana seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na semana atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante a semana seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na semana atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se a semana após a hora atual do sistema é a semana seguinte.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Indica se esta data ocorre durante o ano seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no ano atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o ano seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no ano atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se o ano após a hora atual do sistema é o ano seguinte.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Indica se esta data ocorre durante o dia anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no dia atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o dia anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no dia atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se o dia antes da hora atual do sistema é o dia anterior.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Indica se esta data ocorre durante o mês anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no mês atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o mês anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no mês atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se o mês antes da hora atual do sistema é o mês anterior.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Indica se esta data ocorre durante o trimestre anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no trimestre atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o trimestre anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no trimestre atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se o trimestre antes da hora atual do sistema é o trimestre anterior.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Indica se esta data ocorre durante a semana anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na semana atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante a semana anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na semana atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se a semana antes da hora atual do sistema é a semana anterior.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Indica se esta data ocorre durante o ano anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no ano atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o ano anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no ano atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se o ano antes da hora atual do sistema é o ano anterior.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Indica se essa data ocorre durante o ano atual e no ou antes do dia atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o ano atual e no ou antes do dia atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine se a hora atual do sistema ocorre desde o início do ano.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Indica se esta data cairá em um ano bissexto.",
        "Documentation.LongDescription": "Indica se o valor datetime <code>dateTime</code> especificado cairá em um ano bissexto.\r\n <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se o ano 2012, conforme representado por <code>#date(2012, 01, 01)</code>, é um ano bissexto.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Retorna o componente de mês.",
        "Documentation.LongDescription": "Retorna o componente de mês do valor <code>datetime</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Localize o mês em #datetime (2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Retorna o componente do nome do mês.",
        "Documentation.LongDescription": "Retorna o nome do componente de mês para o <code>date</code> fornecido. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o nome do mês.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Retorna uma número indicando em qual trimestre do ano a data cairá.",
        "Documentation.LongDescription": "Retorna uma número de 1 a 4 indicando em qual trimestre do ano a data <code>dateTime</code> cairá. <code>dateTime</code> pode ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Localize em qual trimestre do ano a data #date(2011, 12, 31) cairá.",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Retorna o início do dia.",
        "Documentation.LongDescription": "Retorna o início do dia representado por <code>dateTime</code>.\r\n    <code>dateTime</code> deve ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início do dia para 10 de outubro de 2011, 8h.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Retorna o início do mês.",
        "Documentation.LongDescription": "Retorna o início do mês que contém <code>dateTime</code>.\r\n    <code>dateTime</code> deve ser um valor <code>date</code> ou <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início do mês de 10 de outubro de 2011, 8h10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Retorna o início do trimestre.",
        "Documentation.LongDescription": "Retorna o início do trimestre que contém <code>dateTime</code>.\r\n      <code>dateTime</code> deve ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início do trimestre de 10 de outubro de 2011, às 8h.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Retorna o início da semana.",
        "Documentation.LongDescription": "Retorna o início da semana que contém <code>dateTime</code>.\r\n    <code>dateTime</code> deve ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início da semana para terça-feira, 11 de outubro de 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Encontre o início da semana para terça-feira, 11 de outubro de 2011, usando segunda-feira como o início da semana.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Retorna o início do ano.",
        "Documentation.LongDescription": "Retorna o início do ano que contém <code>dateTime</code>.\r\n    <code>dateTime</code> deve ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início do ano para 10 de outubro de 2011, 8h10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Retorna um registro contendo partes do valor date.",
        "Documentation.LongDescription": "Retorna um registro contendo as partes do valor date especificado, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: um valor <code>date</code> com base no qual o registro das partes será calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converta o valor <code>#date(2011, 12, 31)</code> em um registro contendo parte do valor date.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Retorna uma representação textual do valor da data.",
        "Documentation.LongDescription": "Retorna uma representação textual de <code>date</code>. Um parâmetro <code>record</code> opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. <code>culture</code> só é usado para fluxos de trabalho herdados. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> que indica o formato a ser usado. Para obter mais detalhes, acesse https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na formatação da data usando o padrão definido por  <code>Culture</code>. </li>\r\n   <li><code>Culture</code>: Quando <code>Format</code> não é nulo, <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto em <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato padrão a ser usado. Quando <code>Culture</code> é <code>null</code> ou omitido,  <code>Culture.Current</code> é usado.</li>\r\n</ul>\r\nPara dar suporte a fluxos de trabalho herdados, <code>options</code> e <code>culture</code> também podem ser valores de texto. Isso tem o mesmo comportamento como se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>#date(2010, 12, 31)</code> em um valor <code>text</code>. <i>O resultado pode variar dependendo da cultura atual.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Converta usando um formato personalizado e a cultura alemã.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Localize o ano no calendário islâmico que corresponde a 1° de janeiro de 2000 no calendário gregoriano.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Retorna um número de 1 a 6 que indica em qual semana do mês esta data cairá.",
        "Documentation.LongDescription": "Retorna um número de 1 a 6 que indica em qual semana do mês a data <code>dateTime</code> cairá. \r\n <ul>\r\n        <li><code>dateTime</code>: um valor <code>Data/Hora</code> para o qual a semana do m~es será determinada.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine em qual semana de março cai o dia 15 de 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Retorna um número de 1 a 54 que indica em qual semana do ano esta data cairá.",
        "Documentation.LongDescription": "Retorna um número de 1 a 54 que indica em qual semana do ano a data, <code>dateTime</code>, cairá.\r\n <ul>\r\n        <li><code>dateTime</code>: Um valor <code>datetime</code> para o qual a semana do ano será determinada.</li>\r\n        <li><code>firstDayOfWeek</code>: Um valor <code>Day.Type</code> opcional que indica qual dia é considerado o início de uma nova semana (por exemplo, <code>Day.Sunday</code>). Se não for especificado, um padrão dependente de cultura será usado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine qual semana do ano contém 27 de março de 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Determine qual semana do ano contém 27 de março de 2011, usando segunda-feira como o início da semana.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Retorna o componente de ano.",
        "Documentation.LongDescription": "Retorna o componente de ano do valor <code>datetime</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Localize o ano em #datetime (2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Retorna o componente de data do valor date, datetime ou datetimezone especificado.",
        "Documentation.LongDescription": "Retorna o componente de data de <code>dateTime</code>, o valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> especificado.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Localize o valor date #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Cria um valor datetime a partir do valor especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>datetime</code> do <code>value</code> fornecido. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").\r\nSe o <code>value</code> fornecido for <code>null</code>, <code>DateTime.From</code> retorna <code>null</code>. Se o <code>value</code> fornecido for <code>datetime</code>, <code>value</code> será retornado. Os valores dos seguintes tipos podem ser convertidos em um valor <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: A <code>datetime</code> valor da representação textual. Consulte <code>DateTime.FromText</code> para obter detalhes.</li>\r\n        <li><code>date</code>: um <code>datetime</code> com <code>value</code> como o componente de data e <code>12:00:00 AM</code> como o componente de hora.</li>\r\n        <li><code>datetimezone</code>: o <code> local datetime</code> equivalente a <code>value</code>.</li>\r\n        <li><code>time</code>: A <code>datetime</code> com o equivalente de data da automação OLE Data de <code>0</code> como componente de data e <code>value</code> como componente de hora.</li>\r\n        <li><code>number</code>: um <code>datetime</code> equivalente à Data de Automação OLE expressa por <code>value</code>. </li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, um erro será retornado.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>#time(06, 45, 12)</code> em um valor <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Converta <code>#date(1975, 4, 4)</code> em um valor <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Cria um valor datetime a partir de um número longo de 64 bits.",
        "Documentation.LongDescription": "Cria um valor <code>datetime</code> a partir do valor <code>fileTime</code> e o converte em fuso horário local. O filetime é um valor de hora de arquivo do Windows que representa o número de intervalos de 100 nanossegundos decorridos desde a meia-noite de 1º de janeiro de 1601. (C.E.) Tempo Universal Coordenado (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>129876402529842245</code> em um valor datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Cria um valor datetimezone com formatos de data e hora locais e universais.",
        "Documentation.LongDescription": "Cria um valor <code>datetime</code> a partir de uma representação textual, <code>text</code>. Um parâmetro <code>record</code> opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> indicando o formato a ser usado. Para mais detalhes, acesse https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na análise da data usando o melhor esforço.</li>\r\n   <li><code>Culture</code>: Quando o <code>Format</code> não for nulo, <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code> o <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto em <code>\"ru-RU\"</code> o <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando o <code>Format</code> for <code>null</code>, <code>Culture</code> controla o formato padrão a ser usado. Quando <code>Culture</code> for <code>null</code> ou omitido, <code>Culture.Current</code> é usado.</li>\r\n</ul>\r\nPara suportar fluxos de trabalho herdados, <code>options</code> também pode ser um valor de texto. Isso tem o mesmo comportamento como se <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>\"2010-12-31T01:30:00\"</code> em um valor datetime.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Converta <code>\"2010-12-31T01:30:00.121212\"</code> em um valor datetime.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Converta <code>\"2010-12-31T01:30:00\"</code> em um valor datetime.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Converta <code>\"20101231T013000\"</code> em um valor datetime.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Indica se este datetime ocorre durante a hora atual, conforme determinado pelo horário e pela data atuais do sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime fornecido <code>dateTime</code> ocorre durante a hora atual, conforme determinado pelo horário e pela data atuais do sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o horário atual do sistema está na hora atual.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Indica se este datetime ocorre durante o minuto atual, conforme determinado pelo horário e pela data atuais do sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime fornecido <code>dateTime</code> ocorre durante o minuto atual, conforme determinado pelo horário e pela data atuais do sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o horário atual do sistema está no minuto atual.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Indica se este datetime ocorre durante o segundo atual, conforme determinado pelo horário e pela data atuais do sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime fornecido <code>dateTime</code> ocorre durante o segundo atual, conforme determinado pelo horário e pela data atuais do sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: Um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o horário atual do sistema está no segundo atual.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Indica se este datetime ocorre durante a hora seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na hora atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante a hora seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na hora atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora após o horário atual do sistema está na próxima hora.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Indica se este datetime ocorre durante o minuto seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no minuto atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o minuto seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no minuto atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o minuto após o horário atual do sistema está no próximo minuto.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Indica se este datetime ocorre durante o segundo seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no segundo atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o segundo seguinte, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no segundo atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o segundo após o horário atual do sistema está no próximo segundo.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Indica se este datetime ocorre durante a hora anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na hora atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante a hora anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra na hora atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora antes do horário atual do sistema está na hora anterior.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Indica se este datetime ocorre durante o minuto anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no minuto atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o minuto anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no minuto atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o minuto antes do horário atual do sistema está no minuto anterior.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Indica se este datetime ocorre durante o segundo anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no segundo atual.",
        "Documentation.LongDescription": "Indica se o valor de datetime especificado <code>dateTime</code> ocorre durante o segundo anterior, conforme a determinação da data e hora atuais no sistema. Observe que essa função retornará false quando for passado um valor que ocorra no segundo atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor de <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o segundo antes do horário atual do sistema está no segundo anterior.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Retorna a parte de hora do valor datetime especificado.",
        "Documentation.LongDescription": "Retorna a parte de hora do valor datetime especificado, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Localize o valor de hora #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Retorna um registro contendo as partes do valor datetime.",
        "Documentation.LongDescription": "Retorna um registro contendo as partes do valor datetime especificado, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: um valor <code>datetime</code> com base no qual o registro das partes será calculado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converta o valor <code>#datetime(2011, 12, 31, 11, 56, 2)</code> em um registro contendo os valores Date e Time.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Retorna uma representação textual do valor datetime.",
        "Documentation.LongDescription": "Retorna uma representação textual de <code>dateTime</code>. Um parâmetro <code>record</code> opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. <code>culture</code> só é usado para fluxos de trabalho herdados. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> que indica o formato a ser usado. Para obter mais detalhes, acesse https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na formatação da data usando o padrão definido por  <code>Culture</code>. </li>\r\n   <li><code>Culture</code>: Quando <code>Format</code> não é nulo, <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto em <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato padrão a ser usado. Quando <code>Culture</code> é <code>null</code> ou omitido,  <code>Culture.Current</code> é usado.</li>\r\n</ul>\r\nPara dar suporte a fluxos de trabalho herdados, <code>options</code> e <code>culture</code> também podem ser valores de texto. Isso tem o mesmo comportamento como se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>#datetime(2010, 12, 31, 01, 30, 25)</code> em um valor <code>text</code>. <i>O resultado pode variar dependendo da cultura atual.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Converta usando um formato personalizado e a cultura alemã.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Converta usando o padrão ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Cria um valor datetimezone a partir do valor especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>datetimezone</code> do <code>value</code> fornecido. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").\r\nSe o <code>value</code> fornecido for <code>null</code>, <code>DateTimeZone.From</code> retorna <code>null</code>. Se o <code>value</code> fornecido for <code>datetimezone</code>, <code>value</code> será retornado. Os valores dos seguintes tipos podem ser convertidos em um valor <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: um valor <code>datetimezone</code> da representação textual. Consulte <code>DateTimeZone.FromText</code> para obter detalhes.</li>\r\n        <li><code>date</code>: um <code>datetimezone</code> com <code>value</code> como o componente de data, <code>12:00:00 AM</code> como o componente de hora e o deslocamento correspondente ao fuso horário local.</li>\r\n        <li><code>datetime</code>: um <code>datetimezone</code> com <code>value</code> como o datetime e o deslocamento correspondente ao fuso horário local.</li>\r\n        <li><code>time</code>: um <code>datetimezone</code> com o equivalente de data da Data de Automação OLE de <code>0</code> como o componente de data, <code>value</code> como o componente de hora e o deslocamento correspondente ao fuso horário local.</li>\r\n        <li><code>number</code>: um <code>datetimezone</code> com o equivalente datetime da Data de Automação OLE expresso por <code>value</code> e o deslocamento correspondente ao fuso horário local.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, um erro será retornado.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>\"2020-10-30T01:30:00-08:00\"</code> em um valor <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Cria um valor datetimezone a partir de um número longo de 64 bits.",
        "Documentation.LongDescription": "Cria um valor <code>datetimezone</code> com base no valor <code>fileTime</code> e o converte em fuso horário local. O filetime é um valor temporal de arquivo do Windows que representa o número de intervalos de 100 nanossegundos decorridos desde a meia-noite de 1º de janeiro de 1601 D.C. (C.E.) Tempo Universal Coordenado (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>129876402529842245</code> em um valor datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Cria uma datetimezone a partir de Formatos datetimezone locais, universais e personalizados.",
        "Documentation.LongDescription": "Cria um valor <code>datetimezone</code> a partir de uma representação textual, <code>text</code>. Um parâmetro <code>record</code> opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> indicando o formato a ser usado. Para mais detalhes, acesse https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na análise da data usando o melhor esforço.</li>\r\n   <li><code>Culture</code>: Quando o <code>Format</code> não for nulo, <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code> o <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto em <code>\"ru-RU\"</code> o <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando o <code>Format</code> for <code>null</code>, <code>Culture</code> controla o formato padrão a ser usado. Quando <code>Culture</code> for <code>null</code> ou omitido, <code>Culture.Current</code> é usado.</li>\r\n</ul>\r\nPara suportar fluxos de trabalho herdados, <code>options</code> também pode ser um valor de texto. Isso tem o mesmo comportamento como se <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>\"2010-12-31T01:30:00-08:00\"</code> em um valor <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Converta usando um formato personalizado e a cultura alemã.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Converter usando a ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Remova as informações de fuso horário do valor datetimezone especificado.",
        "Documentation.LongDescription": "Retorna um valor #datetime de <code>dateTimeZone</code> com as informações de fuso horário removidas.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Remova as informações de fuso horário do valor #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Converte o componente de fuso horário para o fuso horário local.",
        "Documentation.LongDescription": "Altera as informações de fuso horário do valor datetimezone <code>dateTimeZone</code> para as informações de fuso horário local.\r\n    Se <code>dateTimeZone</code> não tiver um componente de fuso horário, as informações de fuso horário local serão adicionadas.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Altere as informações de fuso horário de #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) para o fuso horário local (assumindo o PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Retorna um registro contendo as partes do valor datetimezone.",
        "Documentation.LongDescription": "Retorna um registro contendo as partes do valor datetimezone especificado, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: um valor <code>datetimezone</code> com base no qual o registro das partes será calculado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converta o valor <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> em um registro contendo os valores Date, Time e Zone.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Retorna uma representação textual do valor datetimezone.",
        "Documentation.LongDescription": "Retorna uma representação textual de <code>dateTimeZone</code>. Um parâmetro <code>record</code> opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. <code>culture</code> só é usado para fluxos de trabalho herdados. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> que indica o formato a ser usado. Para obter mais detalhes, acesse https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na formatação da data usando o padrão definido por  <code>Culture</code>. </li>\r\n   <li><code>Culture</code>: Quando <code>Format</code> não é nulo, <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto em <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato padrão a ser usado. Quando <code>Culture</code> é <code>null</code> ou omitido,  <code>Culture.Current</code> é usado.</li>\r\n</ul>\r\nPara dar suporte a fluxos de trabalho herdados, <code>options</code> e <code>culture</code> também podem ser valores de texto. Isso tem o mesmo comportamento como se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> em um valor <code>text</code>. <i>O resultado pode variar dependendo da cultura atual.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Converta usando um formato personalizado e a cultura alemã.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Converta usando o padrão ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Converte o componente de fuso horário em fuso horário UTC.",
        "Documentation.LongDescription": "Altera as informações de fuso horário do valor datetime <code>dateTimeZone</code> em informações de fuso horário UTC ou Tempo Universal.\r\n    Se <code>dateTimeZone</code> não tiver um componente de fuso horário, as informações de fuso horário UTC serão adicionadas.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Altere as informações de fuso horário de #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) para fuso horário UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Altera o fuso horário do valor.",
        "Documentation.LongDescription": "Altera o fuso horário do valor.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Altera o fuso horário do valor.",
        "Documentation.LongDescription": "Altera o fuso horário do valor.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Cria um Decimal para o valor especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>number</code> de Decimal com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Decimal.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for um <code>number</code> dentro do intervalo de Decimal, <code>value</code> será retornado. Caso contrário, um erro será retornado. Se o <code>value</code> for de qualquer outro tipo, será convertido primeiro para um <code>number</code> usando <code>Number.FromText</code>. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor <code>number</code> Decimal de <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Retorna o conteúdo da tabela Delta Lake.",
        "Documentation.LongDescription": "Retorna o conteúdo da tabela Delta Lake.",
        "Documentation.Category": "Acessando dados",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Cria um Dobro do valor determinado.",
        "Documentation.LongDescription": "Retorna um valor <code>number</code> Dobro com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Double.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for um <code>number</code> dentro do intervalo de Dobro, <code>value</code> será retornado. Caso contrário, um erro será retornado. Se o <code>value</code> for de qualquer outro tipo, será convertido primeiro para um <code>number</code> usando <code>Number.FromText</code>. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor de <code>number</code> de Dobro de <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Retorna a parte de dias de uma duração.",
        "Documentation.LongDescription": "Retorna a parte de dias do <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extraia o número de dias entre duas datas.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Cria uma duração a partir do valor especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>duration</code> com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Duration.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>duration</code>, <code>value</code> será retornado. Os valores dos tipos a seguir podem ser convertidos em um valor <code>duration</code>:\r\n      <ul>\r\n        <li><code>text</code>: um valor <code>duration</code> com base no formato textual de tempo decorrido (d.h:m:s). Consulte <code>Duration.FromText</code> para obter informações detalhadas.</li>\r\n        <li><code>number</code>: um equivalente de <code>duration</code> para o número de dias inteiros e fracionários expressos por <code>value</code>.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, um erro será retornado.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>2.525</code> em um valor <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Retorna um valor duration a partir do formato textual de tempo decorrido (d.h:m:s).",
        "Documentation.LongDescription": "Retorna um valor de duração com base no texto especificado, <code>text</code>. Os seguintes formatos podem ser analisados por esta função:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Todos os intervalos são inclusivos)<br>\r\n        ddd: número de dias.<br>\r\n        hh: número de horas, entre 0 e 23.<br>\r\n        mm: número de minutos, entre 0 e 59.<br>\r\n        ss: número de segundos, entre 0 e 59.<br>\r\n        ff: fração de segundos, entre 0 e 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>\"2.05:55:20\"</code> em um valor <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Retorna a parte de horas de uma duração.",
        "Documentation.LongDescription": "Retorna a parte de horas do <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extraia as horas de um valor de duração.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Retorna a parte de minutos de uma duração.",
        "Documentation.LongDescription": "Retorna a parte de minutos de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extraia os minutos de um valor de duração.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Retorna a parte de segundos de uma duração.",
        "Documentation.LongDescription": "Retorna a parte de segundos de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extraia os segundos de um valor de duração.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Retorna um registro contendo as partes do valor duration.",
        "Documentation.LongDescription": "Retorna um registro contendo as partes do valor duration, <code>duration</code>. \r\n  <ul>\r\n        <li><code>duration</code>: um valor <code>duration</code> por meio do qual o registro é criado.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>#duration(2, 5, 55, 20)</code> em um registro das partes, incluindo dias, horas, minutos e segundos, se aplicável.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Retorna o texto no formato \"d.h:m:s\".",
        "Documentation.LongDescription": "Retorna uma representação textual no formato \"day.hour:mins:sec\" do valor de duração especificado, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: uma <code>duration</code> usada para calcular a representação textual.</li>\r\n  <li><code>format</code>: <i>[Opcional]</i> Preterido, gerará um erro se não for nulo</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>#duration(2, 5, 55, 20)</code> em um valor de texto.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Retorna o total de dias desta duração.",
        "Documentation.LongDescription": "Retorna o total de dias estendidos por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Localize o total de dias estendidos por um valor de duração.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Retorna o total de horas desta duração.",
        "Documentation.LongDescription": "Retorna o total de horas abrangidas por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Localize o total de horas abrangidas por um valor de duração.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Retorna o total de minutos desta duração.",
        "Documentation.LongDescription": "Retorna o total de minutos estendidos por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Localize o total de minutos estendidos por um valor de duração.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Retorna o total de segundos desta duração.",
        "Documentation.LongDescription": "Retorna o total de segundos estendidos por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Localize o total de segundos estendidos por um valor de duração.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Retorna um registro de erro dos valores de texto fornecidos para motivo, mensagem e detalhes.",
        "Documentation.LongDescription": "Retorna um registro de erro dos valores de texto fornecidos para motivo, mensagem e detalhes.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Retorna a representação do código-fonte M de um valor constante.",
        "Documentation.LongDescription": "Retorna a representação do código-fonte M de um valor constante.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Obter a representação do código-fonte M de um valor numérico.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Obter a representação do código-fonte M de um valor de data.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Obter a representação do código-fonte M de um valor de texto.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Retorna o resultado da avaliação de uma expressão M.",
        "Documentation.LongDescription": "Retorna o resultado da avaliação de uma expressão M <code>document</code>, com os identificadores disponíveis que podem ser referenciados por <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Avaliar uma soma simples.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Avaliar uma soma mais complexa.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Avaliar a concatenação de um valor de texto com um identificador.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Retorna a representação do código-fonte M de um identificador.",
        "Documentation.LongDescription": "Retorna a representação do código-fonte M de um identificador <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Obter a representação do código-fonte M de um identificador.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Obter a representação do código-fonte M de um identificador que contenha um espaço.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Retorna o conteúdo do arquivo especificado como binário.",
        "Documentation.LongDescription": "Retorna o conteúdo do arquivo, <code>path</code>, como binário. O parâmetro <code>options</code> é atualmente destinado apenas para uso interno.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Retorna se uma função em particular ou não, for considerada uma fonte de dados.",
        "Documentation.LongDescription": "Retorna se <code>function</code> ou não, for considerada uma fonte de dados.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Converte texto representando um valor geográfico no formato WKT (Texto Bem Conhecido) em um registro estruturado.",
        "Documentation.LongDescription": "Converte texto representando um valor geográfico no formato WKT (Texto Bem Conhecido) em um registro estruturado. WKT é um formato padrão definido pelo Open Geospatial Consortium (OGC) e é o formato de serialização típico usado por bancos de dados, incluindo SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Converte um valor de ponto geográfico estruturado em sua representação WKT (Texto Bem Conhecido).",
        "Documentation.LongDescription": "Converte um valor de ponto geográfico estruturado em sua representação WKT (Texto Bem Conhecido), formato de serialização usado por muitos bancos de dados, incluindo SQL Server, conforme definido pelo OGC (Open Geospatial Consortium).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Converte texto representando um valor geométrico no formato WKT (Texto Bem Conhecido) em um registro estruturado.",
        "Documentation.LongDescription": "Converte texto representando um valor geométrico no formato WKT (Texto Bem Conhecido) em um registro estruturado. WKT é um formato padrão definido pelo OGC (Open Geospatial Consortium) e é o formato de serialização típico usado por bancos de dados, incluindo SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Converte um valor de ponto geométrico estruturado em sua representação WKT (Texto Bem Conhecido).",
        "Documentation.LongDescription": "Converte um valor de ponto geométrico estruturado em sua representação WKT (Texto Bem Conhecido), formato de serialização usado por muitos bancos de dados, incluindo SQL Server, conforme definido pelo OGC (Open Geospatial Consortium).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Retorna um valor de GUID de um determinado valor.",
        "Documentation.LongDescription": "Retorna um valor de <code>Guid.Type</code> do <code>value</code> determinado. Se o <code>value</code> determinado for <code>null</code>, o <code>Guid.From</code> retornará <code>null</code>. Será executada uma verificação para determinar se o <code>value</code> determinado está em um formato aceitável. Formatos aceitáveis fornecidos nos exemplos.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "A GUID pode ser fornecida como 32 dígitos hexadecimais contíguos.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "A GUID pode ser fornecida como 32 dígitos hexadecimais separados por hífen em blocos de 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "A GUID pode ser fornecida como 32 dígitos hexadecimais separados por hífen e delimitados por chaves.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "A GUID pode ser fornecida como 32 dígitos hexadecimais separados por hífen e delimitados por parênteses.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Cria um inteiro de 16 bits do valor determinado.",
        "Documentation.LongDescription": "Retorna um valor <code>number</code> inteiro de 16 bits com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Int16.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>number</code> dentro do intervalo de número inteiro de 16 bits sem uma parte fracionária, <code>value</code> será retornado. Se tiver uma parte fracionária, então o número será arredondado com o modo de arredondamento especificado. O modo de arredondamento padrão é <code>RoundingMode.ToEven</code>. Se <code>value</code> for qualquer outro tipo, será convertido primeiro para um <code>number</code> usando <code>Number.FromText</code>. Confira <code>Number.Round</code> para os modos de arredondamento disponíveis. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor de <code>number</code> inteiro de 16 bits de <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtém o valor <code>number</code> inteiro de 16 bits de <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Cria um inteiro de 32 bits do valor determinado.",
        "Documentation.LongDescription": "Retorna um valor <code>number</code> inteiro de 32 bits com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Int32.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>number</code> dentro do intervalo de número inteiro de 32 bits sem uma parte fracionária, <code>value</code> será retornado. Se tiver uma parte fracionária, então o número será arredondado com o modo de arredondamento especificado. O modo de arredondamento padrão é <code>RoundingMode.ToEven</code>. Se <code>value</code> for qualquer outro tipo, será convertido primeiro para um <code>number</code> usando <code>Number.FromText</code>. Confira <code>Number.Round</code> para os modos de arredondamento disponíveis. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor de <code>number</code> inteiro de 32 bits de <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtenha o valor de <code>number</code> inteiro de 32 bits de <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Cria um número inteiro de 64 bits a partir de um valor fornecido.",
        "Documentation.LongDescription": "Retorna um valor <code>number</code> inteiro de 64 bits com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Int64.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>number</code> dentro do intervalo de número inteiro de 64 bits sem uma parte fracionária, <code>value</code> será retornado. Se tiver uma parte fracionária, então o número será arredondado com o modo de arredondamento especificado. O modo de arredondamento padrão é <code>RoundingMode.ToEven</code>. Se <code>value</code> for qualquer outro tipo, será convertido primeiro para um <code>number</code> usando <code>Number.FromText</code>. Confira <code>Number.Round</code> para os modos de arredondamento disponíveis. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor <code>number</code> inteiro de 64 bits de <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obter o valor <code>número</code> inteiro de 64 bits de <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Cria um inteiro de 8 bits assinado do valor determinado.",
        "Documentation.LongDescription": "Retorna um valor <code>number</code> inteiro de 8 bits assinado com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Int8.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>number</code> dentro do intervalo de número inteiro de 8 bits assinado sem uma parte fracionária, <code>value</code> será retornado. Se tiver uma parte fracionária, então o número será arredondado com o modo de arredondamento especificado. O modo de arredondamento padrão é <code>RoundingMode.ToEven</code>. Se <code>value</code> for qualquer outro tipo, será convertido primeiro para um <code>number</code> usando <code>Number.FromText</code>. Confira <code>Number.Round</code> para os modos de arredondamento disponíveis. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor de <code>number</code> inteiro de 8 bits assinado de <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtenha o valor de <code>number</code> inteiro de 8 bits assinado de <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Retorna a árvore de sintaxe abstrata (AST) para o corpo de uma função.",
        "Documentation.LongDescription": "<p>Retorna a árvore de sintaxe abstrata (AST) para o corpo de <code>function</code>, normalizada em uma <i>expressão de item</i>:\r\n<ul>\r\n   <li>A função deve ser um lambda de 1 argumento.</li>\r\n   <li>Todas as referências ao parâmetro de função são substituídas por <code>ItemExpression.Item</code>.</li>\r\n   <li>O AST será simplificado para conter apenas nós dos tipos:\r\n     <ul>\r\n       <li><code>Constante</code></li>\r\n       <li><code>Invocação</code></li>\r\n       <li><code>Unário</code></li>\r\n       <li><code>Binário</code></li>\r\n       <li><code>Se</code></li>\r\n       <li><code>FieldAccess</code></li>\r\n     </ul>\r\n   </li>\r\n</ul>\r\n</p>\r\n</p>Um erro é levantado se uma expressão de item AST não puder ser retornada para o corpo de <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Retorna o AST para o corpo da função <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Retorna o conteúdo do documento JSON.",
        "Documentation.LongDescription": "Retorna o conteúdo do documento JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Produz uma representação JSON de um valor especificado.",
        "Documentation.LongDescription": "<p>Produz uma representação JSON do valor fornecido <code>value</code> com codificação de tempo especificada por <code>encoding</code>. Se <code>encoding</code> for omitido, UTF8 será usado. Os valores são representados da seguinte maneira:</p>\r\n <ul>\r\n        <li>Nulo, texto e valores lógicos são representados como os tipos JSON correspondentes</li>\r\n        <li>Números são representados como números em JSON, exceto <code>#infinity</code>, <code>-#infinity</code> e <code>#nan</code>, convertidos a nulo</li>\r\n        <li>Listas são representadas como matrizes JSON</li>\r\n        <li>Registros são representados como objetos JSON</li>\r\n        <li>Tabelas são representadas como uma matriz de objetos</li>\r\n        <li>Datas, horas, datetimes, datetimezones e durações são representadas como texto ISO-8601</li>\r\n        <li>Valores binários são representados como texto codificado base-64</li>\r\n        <li>Tipos e funções produzem um erro</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Converter um valor complexo em JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Converte um valor binário em uma lista de valores de texto divididos em quebras de linha. Se um delimitador for especificado, as quebras de linha possivelmente aparecerão entre aspas. Se includeLineSeparators for true, os caracteres de quebra de linha serão incluídos no texto.",
        "Documentation.LongDescription": "Converte um valor binário em uma lista de valores de texto divididos em quebras de linha. Se um delimitador for especificado, as quebras de linha possivelmente aparecerão entre aspas. Se includeLineSeparators for true, os caracteres de quebra de linha serão incluídos no texto.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Converte um valor de texto em uma lista de valores de texto divididos em quebras de linha. Se includeLineSeparators for true, os caracteres de quebra de linha serão incluídos no texto.",
        "Documentation.LongDescription": "Converte um valor de texto para uma lista de valores de texto dividida em quebras de linha. Se includeLineSeparators for true, os caracteres de quebra de linha serão incluídos no texto.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (padrão) Nenhum comportamento entre aspas é necessário.</li>\r\n            <li><code>QuoteStyle.Csv:</code> As aspas estão de acordo com o Csv. Um caractere de aspas duplas é usado para limitar as regiões e um par de caracteres de aspas duplas é usado para indicar um único caractere de aspas duplas dentro dessa região. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Converte uma lista de texto em valor binário usando a codificação especificada e o lineSeparator. O lineSeparator especificado é acrescentado a cada linha.  Se não for especificado, o retorno de carro e os caracteres de alimentação de linha serão usados.",
        "Documentation.LongDescription": "Converte uma lista de texto em valor binário usando a codificação especificada e o lineSeparator. O lineSeparator especificado é acrescentado a cada linha.  Se não for especificado, o retorno de carro e os caracteres de alimentação de linha serão usados.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Converte uma lista de texto em um único texto.  O lineSeparator especificado é acrescentado a cada linha.  Se não for especificado, o retorno de carro e os caracteres de alimentação de linha serão usados.",
        "Documentation.LongDescription": "Converte uma lista de texto em um único texto.  O lineSeparator especificado é acrescentado a cada linha.  Se não for especificado, o retorno de carro e os caracteres de alimentação de linha serão usados.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Retornará true se todas as expressões forem true.",
        "Documentation.LongDescription": "Retornará true se todas as expressões da lista <code>list</code> forem true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determina se todas as expressões da lista {true, true, 2 > 0} serão true.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Determina se todas as expressões da lista {true, true, 2 < 0} serão true.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Retornará true se alguma expressão for true.",
        "Documentation.LongDescription": "Retornará true alguma expressão na lista <code>list</code> for true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determina se alguma expressão na lista {true, false, 2 > 0} será true.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Determina se alguma expressão na lista {2 = 0, false, 2 < 0} será true.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Retorna a média dos valores. Funciona com valores number, date, datetime, datetimezone e duration.",
        "Documentation.LongDescription": "Retorna o valor médio dos itens na lista, <code>list</code>. O resultado é especificado no mesmo tipo de dados dos valores na lista. Funciona somente com valores number, date, time, datetime, datetimezone e duration.\r\n    Se a lista estiver vazia, um valor nulo será retornado.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Localize a média de lista de números, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Localize a média dos valores date 1º de janeiro de 2011, 2 de janeiro de 2011 e 3 de janeiro de 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Armazena uma lista em buffer.",
        "Documentation.LongDescription": "Armazena a lista <code>list</code> em buffer na memória. O resultado desta chamada é uma lista estável.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Crie uma cópia estável da lista {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Retorna uma única lista combinando várias listas.",
        "Documentation.LongDescription": "Faça uma lista das listas, <code>lists</code>, e mescle-as em uma única lista nova.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Combine as duas listas simples {1, 2} e {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Combine as duas listas, {1, 2} e {3, {4, 5}}, uma delas contendo uma lista aninhada.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Retorna o número de itens na lista.",
        "Documentation.LongDescription": "Retorna o número de itens na lista <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Localize o número de valores na lista {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Retorna uma lista de valores com as duplicatas removidas.",
        "Documentation.LongDescription": "Retorna uma lista que contém todos os valores na lista <code>list</code> com as duplicatas removidas. Se a lista estiver vazia, o resultado será uma lista vazia.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Remova as duplicatas da lista {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Retorna o primeiro valor da lista ou o valor padrão especificado, caso ela esteja vazia.",
        "Documentation.LongDescription": "Retorna o primeiro item da lista <code>list</code> ou o valor padrão <code>defaultValue</code> opcional, se a lista estiver vazia.\r\n    Se a lista estiver vazia e um valor padrão não for especificado, a função retornará <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize o primeiro valor da lista {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Localize o primeiro valor da lista {}. Se a lista estiver vazia, retorne -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Retorna a interseção dos valores de lista encontrados na entrada.",
        "Documentation.LongDescription": "Retorna a interseção dos valores de lista encontrados na lista de entrada <code>lists</code>. Um parâmetro opcional, <code>equationCriteria</code>, pode ser especificado.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Localize a interseção das listas {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Indica se há duplicatas na lista.",
        "Documentation.LongDescription": "Retorna um valor lógico se houver duplicatas na lista <code>list</code>. <code>true</code> será retornado se a lista for distinta; <code>false</code> será retornado se houver valores duplicados. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Descubra se a lista {1, 2, 3} é distinta (por exemplo, se não há duplicatas).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Descubra se a lista {1, 2, 3, 3} é distinta (por exemplo, se não há duplicatas).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Retornará true se a lista estiver vazia.",
        "Documentation.LongDescription": "Retornará <code>true</code> se a lista <code>list</code> não contiver nenhum valor (comprimento 0). Se a lista contiver valores (comprimento > 0), <code>false</code> será retornado.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Descubra se a lista {} está vazia.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Descubra se a lista {1, 2} está vazia.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Retorna o último valor da lista ou o valor padrão especificado, caso ela esteja vazia.",
        "Documentation.LongDescription": "Retorna o último item da lista <code>list</code> ou o valor padrão <code>defaultValue</code> opcional, se a lista estiver vazia.\r\n    Se a lista estiver vazia e um valor padrão não for especificado, a função retornará <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize o último valor da lista {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Localize o último valor da lista {} ou -1, se ela estiver vazia.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Retorna o último valor da lista.  Opcionalmente, pode especificar quantos valores serão retornados ou uma condição de qualificação.",
        "Documentation.LongDescription": "Retorna o último item da lista <code>list</code>. Se a lista estiver vazia, uma exceção será lançada.\r\n Esta função assume um parâmetro opcional <code>countOrCondition</code>, a fim de oferecer suporte à coleta de vários itens ou à filtragem de itens. <code>countOrCondition</code> pode ser especificado de três maneiras:\r\n <ul>\r\n  <li>Se um número for especificado, essa será a quantidade de itens retornados. </li>\r\n  <li>Se uma condição for especificada, todos os itens que atenderem inicialmente à condição serão retornados, começando pelo fim da lista. Quando um item não atender à condição, nenhum outro item será considerado. </li>\r\n  <li>Se esse parâmetro for nulo, o último item da lista será retornado.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize o último valor da lista {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Localize os últimos valores da lista {3, 4, 5, -1, 7, 8, 2} que sejam maiores que 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Retornará o valor máximo ou o valor padrão, se a lista estiver vazia.",
        "Documentation.LongDescription": "Retorna o item máximo da lista <code>list</code> ou o valor padrão <code>default</code> opcional, caso a lista esteja vazia.\r\n    Um valor opcional de comparisonCriteria, <code>comparisonCriteria</code>, pode ser especificado para determinar como comparar os itens na lista. Se esse parâmetro for nulo, o comparador padrão será usado.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localize o item máximo da lista {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Localize o item máximo da lista {} ou retorne -1, se ela estiver vazia. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Retorna o valor mediano da lista.",
        "Documentation.LongDescription": "Retorna o item mediano da lista <code>list</code>. Essa função retorna <code>null</code> caso a lista não contenha nenhum valor não <code>null</code>.\r\n    Se houver um número par de itens, a função escolherá o menor dos dois itens medianos, a menos que a lista seja\r\n    constituída inteiramente de datas e horas, durações, números ou os horários, caso em que ela retornará uma média dos dois itens.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localize o item mediano da lista <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Retornará o valor mínimo ou o valor padrão, se a lista estiver vazia.",
        "Documentation.LongDescription": "Retorna o item mínimo da lista <code>list</code> ou o valor padrão <code>default</code> opcional, caso a lista esteja vazia.\r\n    Um valor comparisonCriteria opcional <code>comparisonCriteria</code> pode ser especificado para determinar como comparar os itens na lista. Se esse parâmetro for nulo, o comparador padrão será usado.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localize o item mínimo da lista {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Localize o item mínimo da lista {} ou retorne -1, se ela estiver vazia. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Retorna o valor mais frequente da lista.",
        "Documentation.LongDescription": "Retorna o item exibido com mais frequência na lista, <code>list</code>. Se a lista estiver vazia, uma exceção será lançada. Se vários itens aparecerem com a mesma frequência máxima, o último será escolhido.\r\n    Um valor <code>comparisonCriteria</code> opcional, <code>equationCriteria</code>, pode ser especificado para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Localize o item exibido com mais frequência na lista <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Localize o item exibido com mais frequência na lista <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Retorna uma lista dos valores mais frequentes da lista.",
        "Documentation.LongDescription": "Retorna o item exibido com mais frequência na lista, <code>list</code>. Se a lista estiver vazia, uma exceção será lançada. Se vários itens aparecerem com a mesma frequência máxima, o último será escolhido.\r\n    Um valor <code>comparisonCriteria</code> opcional, <code>equationCriteria</code>, pode ser especificado para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Localize os itens exibidos com mais frequência na lista <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Retorna o número de itens não nulos da lista.",
        "Documentation.LongDescription": "Retorna o número de itens não nulos da lista <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Retorna uma lista de deslocamentos para a entrada.",
        "Documentation.LongDescription": "Retorna uma lista de deslocamentos para a lista de entrada <code>list</code>.\r\n    Ao usar List.Transform para alterar uma lista, a lista de posições pode ser usada para conceder acesso de transformação à posição.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize os deslocamentos de valores na lista {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Retorna o produto dos números na lista.",
        "Documentation.LongDescription": "Retorna o produto dos números não nulos na lista, <code>numbersList</code>. Retornará um valor nulo se não houver valores não nulos na lista.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Localize o produto dos números na lista <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Retorna uma lista de números aleatórios.",
        "Documentation.LongDescription": "Retorna uma lista de números aleatórios entre 0 e 1, de acordo com o número de valores a ser gerado e um valor de semente opcional.\r\n<ul>\r\n   <li><code>count</code>: o número de valores aleatórios a ser gerado.</li>\r\n   <li><code>seed</code>:  <i>[opcional]</i> um valor numérico usado para propagar o gerador de números aleatórios. Se omitido, uma lista exclusiva de números aleatórios será gerada cada vez que você chamar a função. Se você especificar o valor de semente com um número, cada chamada à função gerará a mesma lista de números aleatórios.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista de três números aleatórios.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Crie uma lista de três números aleatórios, especificando o valor de semente.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Retorna uma lista que ignora o número especificado de elementos no início da lista.",
        "Documentation.LongDescription": "Retorna uma lista que remove o primeiro elemento da lista <code>list</code>. Se <code>list</code> for uma lista vazia, uma lista vazia será retornada.\r\nEssa função assume um parâmetro opcional, <code>countOrCondition</code>, para que você possa remover vários valores, conforme listado abaixo.\r\n <ul>\r\n <li>Se um número for especificado, essa será a quantidade de itens removidos. </li>\r\n <li>Se uma condição for especificada, a lista retornada começará com o primeiro elemento em <code>list</code> que atende aos critérios. Quando um item não atender à condição, nenhum outro item será considerado. </li>\r\n <li>Se esse parâmetro for nulo, o comportamento padrão será observado. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista a partir de {1, 2, 3, 4, 5} sem os três primeiros números.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Crie uma lista a partir de {5, 4, 2, 6, 1} que comece com um número menor que 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Retorna uma lista que remove o número especificado de elementos do final da lista.",
        "Documentation.LongDescription": "Retorna uma lista que remove os <code>countOrCondition</code> últimos elementos do final da lista <code>list</code>. Se <code>list</code> tiver menos que <code>countOrCondition</code> elementos, uma lista vazia será retornada.\r\n <ul>\r\n <li>Se um número for especificado, essa será a quantidade de itens removidos. </li>\r\n <li>Se uma condição for especificada, a lista retornado terminará com o primeiro elemento no final em <code>list</code> que atende aos critérios. Quando um item não atender à condição, nenhum outro item será considerado. </li>\r\n <li>Se esse parâmetro for nulo, somente um item será removido. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista a partir de {1, 2, 3, 4, 5} sem os três últimos números.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Crie uma lista a partir de {5, 4, 2, 6, 4} que termine com um número menor que 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Remove todos os valores \"null\" da lista especificada.",
        "Documentation.LongDescription": "Remove todas as ocorrências de valores \"null\" na <code>list</code>. Se não houver valores 'null' na lista, a lista original será retornada.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Remova os valores \"null\" na lista {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Reverte a ordem dos valores na lista.",
        "Documentation.LongDescription": "Retorna uma lista com os valores da lista <code>list</code> na ordem inversa.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista a partir de {1..10} na ordem inversa.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Retorna o item de lista 1 de uma lista de comprimento 1; caso contrário, uma exceção será lançada.",
        "Documentation.LongDescription": "Se houver somente um item na lista <code>list</code>, esse item será retornado.\r\n    Se houver mais de um item ou se a lista estiver vazia, a função gerará uma exceção.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize o valor único na lista {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Localize o valor único na lista {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Retorna o item de lista 1 de uma lista de comprimento 1 e o valor padrão de uma lista vazia.",
        "Documentation.LongDescription": "Se houver somente um item na lista <code>list</code>, esse item será retornado.\r\n    Se a lista estiver vazia, a função retornará um valor nulo, a menos que um <code>default</code> opcional seja especificado. Se houver mais de um item na lista, a função retornará um erro.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localize o valor único na lista {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Localize o valor único na lista {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Localize o valor único na lista {}. Se ela estiver vazia, -1 será retornado.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Retorna uma lista que ignora o número especificado de elementos no início da lista.",
        "Documentation.LongDescription": "Retorna uma lista que ignora o primeiro elemento da lista <code>list</code>. Se <code>list</code> for uma lista vazia, uma lista vazia será retornada.\r\nEssa função assume um parâmetro opcional, <code>countOrCondition</code>, para que você possa ignorar vários valores, conforme listado abaixo.\r\n <ul>\r\n <li>Se um número for especificado, essa será a quantidade de itens ignorados. </li>\r\n <li>Se uma condição for especificada, a lista retornado começará com o primeiro elemento em <code>list</code> que atende aos critérios. Quando um item não atender à condição, nenhum outro item será considerado. </li>\r\n <li>Se esse parâmetro for nulo, o comportamento padrão será observado. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista a partir de {1, 2, 3, 4, 5} sem os três primeiros números.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Crie uma lista a partir de {5, 4, 2, 6, 1} que comece com um número menor que 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Classifica uma lista de dados de acordo com os critérios especificados.",
        "Documentation.LongDescription": "Classifica uma lista de dados, <code>list</code>, de acordo com os critérios opcionais especificados.\r\n    Um parâmetro opcional, <code>comparisonCriteria</code>, pode ser especificado como o critério de comparação. Isso pode assumir os seguintes valores:\r\n    <ul>\r\n    <li> Para controlar o pedido, o critério de comparação pode ser um valor Enum do pedido. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li>Para calcular uma chave a ser usada para classificação, uma função de 1 argumento pode ser usada.</li>\r\n    <li> Para selecionar uma chave e uma ordem de controle, o critério de comparação pode ser uma lista contendo a chave e a ordem (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Para controlar completamente a comparação, uma função de 2 argumentos pode ser usada. Esta função receberá dois itens da lista (quaisquer dois itens, em qualquer ordem). A função deve retornar um dos seguintes valores:\r\n        <ul>\r\n            <li> <code>-1</code>: o primeiro item é menor que o segundo item.</li>\r\n            <li> <code>0</code>: os itens são iguais.</li>\r\n            <li> <code>1</code>: o primeiro item é maior que o segundo item.</li>\r\n        </ul>\r\n        Compare é um método que pode ser usado para delegar essa lógica. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Classifique a lista {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Classifique a lista {2, 3, 1} em ordem decrescente.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Classifique a lista {2, 3, 1} em ordem decrescente usando o método Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Retorna uma amostra com base na estimativa do desvio padrão.",
        "Documentation.LongDescription": "Retorna uma estimativa com base em amostra do desvio padrão dos valores na lista, <code>numbersList</code>.\r\n    Se <code>numbersList</code> for uma lista de números, um número será retornado.\r\n    Uma exceção será lançada em uma lista vazia ou em uma lista de itens que não seja do tipo <code>number</code>.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Localize o desvio padrão dos números de 1 a 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Retorna a soma dos itens na lista.",
        "Documentation.LongDescription": "Retorna a soma dos valores não nulos na lista, <code>list</code>.  Retornará um valor nulo se não houver valores não nulos na lista.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Localize a soma dos números na lista <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Retorna a união dos valores de lista encontrados na entrada.",
        "Documentation.LongDescription": "Assume uma lista das listas <code>lists</code>, une os itens nas listas individuais e as retorna na lista de saída. Consequentemente, a lista retornada conterá todos os itens em qualquer lista de entrada.\r\n    Esta operação mantém a semântica tipo Bag tradicional, para que os valores duplicados sejam correspondentes como parte da União.\r\n    Um valor de critérios de equação opcional, <code>equationCriteria</code>, pode ser especificado para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Crie uma união da lista {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Retorna uma lista de listas, combinando itens na mesma posição em várias listas.",
        "Documentation.LongDescription": "Utiliza uma lista de listas, <code>lists</code>, e retorna uma lista de listas, combinando itens na mesma posição.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zipa as duas listas simples {1, 2} e {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Zipa as duas listas simples de comprimentos diferentes {1, 2} e {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Cria uma lógica a partir do valor especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>logical</code> com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Logical.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>logical</code>, <code>value</code> será retornado. Os valores dos tipos a seguir podem ser convertidos em um valor <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: um valor <code>logical</code> do valor de texto, <code>\"true\"</code> ou <code>\"false\"</code>. Consulte <code>Logical.FromText</code> para obter informações detalhadas.</li>\r\n        <li><code>number</code>: <code>false</code> se <code>value</code> for igual a <code>0</code>; do contrário, <code>true</code> será retornado.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, um erro será retornado.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>2</code> em um valor <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Cria um valor lógico a partir dos valores de texto \"true\" e \"false\".",
        "Documentation.LongDescription": "Cria um valor lógico a partir do valor de texto <code>text</code>, \"true\" ou \"false\". Se <code>text</code> contiver uma cadeia de caracteres diferente, uma exceção será lançada. O valor de texto <code>text</code> não diferencia maiúsculas de minúsculas.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Crie um valor lógico a partir da cadeia de caracteres de texto \"true\".",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Crie um valor lógico a partir da cadeia de caracteres de texto \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Retorna o texto \"true\" ou \"false\" a partir de um valor lógico.",
        "Documentation.LongDescription": "Cria um valor de texto a partir do valor lógico <code>logicalValue</code>, <code>true</code> ou <code>false</code>. Se <code>logicalValue</code> não for um valor lógico, uma exceção será lançada.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Crie um valor de texto a partir do valor <code>true</code> lógico.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Retorna o valor absoluto do número.",
        "Documentation.LongDescription": "Retorna o valor absoluto de <code>number</code>. Se <code>number</code> for nulo, <code>Number.Abs</code> retornará nulo.\r\n    <ul>\r\n        <li><code>number</code>: um <code>number</code> cujo valor absoluto deve ser calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Valor absoluto -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Retorna o arco cosseno do número.",
        "Documentation.LongDescription": "Retorna o arco cosseno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Retorna o arco seno do número.",
        "Documentation.LongDescription": "Retorna o arco seno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Retorna o arco tangente do número.",
        "Documentation.LongDescription": "Retorna o arco tangente de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Retorna um byte em que cada bit é o oposto da entrada.",
        "Documentation.LongDescription": "Retorna o resultado da execução de uma operação bit a bit \"Not\" em <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Retorna o cosseno do número.",
        "Documentation.LongDescription": "Retorna o cosseno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Localize o cosseno do ângulo 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Retorna o cosseno hiperbólico do número.",
        "Documentation.LongDescription": "Retorna o cosseno hiperbólico de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Eleva e à potência especificada.",
        "Documentation.LongDescription": "Retorna o resultado de elevar e à <code>number</code>ª potência (função exponencial).\r\n      <ul>\r\n        <li><code>number</code>: um <code>number</code> cuja função exponencial deve ser calculada. Se <code>number</code> for nulo, <code>Number.Exp</code> retornará nulo. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Eleva e à potência 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Retorna o fatorial do número.",
        "Documentation.LongDescription": "Retorna o fatorial do número <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Localize o fatorial 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Cria um número a partir do valor especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>number</code> com base no <code>value</code> especificado. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").\r\nSe o <code>value</code> especificado for <code>null</code>, <code>Number.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>number</code>, <code>value</code> será retornado. Os valores dos seguintes tipos podem ser convertidos em um valor <code>number</code>:\r\n      <ul>\r\n        <li><code>text</code>: um valor <code>number</code> da representação textual. Os formatos de texto comuns são tratados (\"15\", \"3,423.10\", \"5.0E-10\"). Confira <code>Number.FromText</code> para obter informações detalhadas.</li>\r\n        <li><code>logical</code>: 1 para <code>true</code>, 0 para <code>false</code>.</li>\r\n        <li><code>datetime</code>: um número de ponto flutuante de precisão dupla que contém um equivalente de data de Automação OLE.</li>\r\n        <li><code>datetimezone</code>: um número de ponto flutuante de precisão dupla que contém um equivalente de data de Automação OLE da data e hora locais <code>value</code>.</li>\r\n        <li><code>date</code>: um número de ponto flutuante de precisão dupla que contém um equivalente de data de Automação OLE.</li>\r\n        <li><code>date</code>: expresso em dias fracionários.</li>\r\n        <li><code>duration</code>: expresso em dias inteiros e fracionários.</li>  \r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, um erro será retornado.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor <code>number</code> de <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtenha o valor <code>number</code> de <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Obtém o valor <code>number</code> de <code>\"12.3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Cria números com formatos de texto comuns (\"15\", \"3,423.10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Retorna um valor <code>número</code> com base no valor de texto especificado, <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: a representação textual de um valor numérico. A representação precisa estar em um formato numérico comum, como \"15\", \"3.423,10\" ou \"5.0E-10\".</li>\r\n  <li><code>culture</code>: uma cultura opcional que controla como <code>text</code> é interpretado (por exemplo, \"pt-br\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor numérico <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtenha o valor numérico <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Indica se o valor é par.",
        "Documentation.LongDescription": "Indica se o valor, <code>number</code>, é par retornando <code>true</code>; do contrário, o valor <code>false</code> será retornado.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verifique se 625 é um número par.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Verifique se 82 é um número par.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Indica se o valor é NaN (e não um número).",
        "Documentation.LongDescription": "Indica se o valor é NaN (e não um número). Retornará <code>true</code> se <code>number</code> for equivalente a <code>Number.IsNaN</code>; do contrário, <code>false</code> será retornado.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verifique se 0 dividido por 0 é NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Verifique se 1 dividido por 0 é NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Indica se o valor é ímpar.",
        "Documentation.LongDescription": "Indica se o valor é ímpar. Retornará <code>true</code> se <code>number</code> for um número ímpar; do contrário, <code>false</code> será retornado.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verifique se 625 é um número ímpar.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Verifique se 82 é um número ímpar.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Retorna o logaritmo natural do número.",
        "Documentation.LongDescription": "Retorna o logaritmo natural de um número, <code>number</code>. Se <code>number</code> for nulo, <code>Number.Ln</code> retornará um valor nulo.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o logaritmo natural 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Retorna o logaritmo do número à base especificada (padrão e).",
        "Documentation.LongDescription": "Retorna o logaritmo de um número, <code>number</code>, à base <code>base</code> especificada. Se <code>base</code> não for especificada, o valor padrão será Number.E.\r\n    Se <code>number</code> for nulo, <code>Number.Log</code> retornará um valor nulo.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obtém o logaritmo de base 10 de 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Obtém o logaritmo de base e de 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Retorna o logaritmo de base 10 do número.",
        "Documentation.LongDescription": "Retorna o logaritmo de base 10 de um número, <code>number</code>. Se <code>number</code> for nulo, <code>Number.Log10</code> retornará nulo.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obtém o logaritmo de base 10 de 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Retorna o número arredondado. O número de dígitos e o modo de arredondamento podem ser especificados.",
        "Documentation.LongDescription": "Retorna o resultado do arredondamento <code>number</code> até o número mais próximo. Se <code>number</code> for nulo, <code>Number.Round</code> retornará nulo.<br>\r\n      <br>\r\n      Por padrão, <code>number</code> é arredondado para o número inteiro mais próximo e os empates são quebrados arredondando para o número par mais próximo (usando <code>RoundingMode.ToEven</code>, também conhecido como \"arredondamento bancário\").<br>\r\n      <br>\r\n      No entanto, esses padrões podem ser substituídos pelos parâmetros opcionais a seguir.\r\n      <ul>\r\n        <li><code>digits</code>: faz com que <code>number</code> seja arredondado para o número de dígitos decimais especificado.</li>\r\n        <li><code>roundingMode</code>: substitui o comportamento de desempate padrão quando <code>number</code> está no ponto médio entre dois valores arredondados potenciais\r\n      (confira <code>RoundingMode.Type</code> para possíveis valores).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredonde 1,234 para o próximo número inteiro.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Arredonde 1,56 para o próximo número inteiro.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Arredonde 1,2345 para duas casas decimais.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Arredonde 1,2345 para três casas decimais (arredondamento para cima).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Arredonde 1,2345 para três casas decimais (arredondamento para baixo).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Retorna o resultado de números positivos de arrendondamento para cima e de números negativos para baixo. O número de dígitos pode ser especificado.",
        "Documentation.LongDescription": "Retorna o resultado do arredondamento de <code>number</code> com base no sinal do número. Essa função arrendondará números positivos para cima e números negativos para baixo.\r\n    Se <code>digits</code> for especificado, <code>number</code> será arredondado ao <code>digits</code> número de casas decimais.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredonde o número -1,2 em direção oposta a zero.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Arredonde o número 1,2 em direção oposta a zero.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Arredonda o número -1,234 em duas casas decimais após o zero.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Retorna o número mais alto anterior. O número de dígitos pode ser especificado.",
        "Documentation.LongDescription": "Retorna o resultado do arredondamento <code>number</code> para baixo para o número inteiro mais alto anterior. Se <code>number</code> for nulo, esta função retornará nulo.\r\n\r\n    Se <code>digits</code> for fornecido, <code>number</code> será arredondado para o número especificado de dígitos decimais.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredonde 1,234 para baixo, de modo que se torne um número inteiro.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Arredonde 1,999 para baixo, de modo que se torne um número inteiro.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Arredondar 1,999 para duas casas decimais.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Retorna o resultado de arredondar números positivos para baixo e números negativos para cima. O número de dígitos pode ser especificado.",
        "Documentation.LongDescription": "Retorna o resultado do arredondamento de <code>number</code> com base no sinal do número. Essa função arrendondará números positivos para baixo e números negativos para cima.\r\n    Se <code>digits</code> for especificado, <code>number</code> será arredondado ao <code>digits</code> número de casas decimais.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredonde o número -1,2 em direção a zero.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Arredonde o número 1,2 em direção a zero.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Arredondar o número -1,234 para duas casas decimais após o zero.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Retorna o próximo número mais alto. O número de dígitos pode ser especificado.",
        "Documentation.LongDescription": "Retorna o resultado do arredondamento <code>number</code> para o próximo inteiro mais alto. Se <code>number</code> for nulo, esta função retornará nulo.\r\n    Se <code>digits</code> for fornecido, <code>number</code> será arredondado para o número especificado de dígitos decimais.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredonde 1,234 para cima, de modo que se torne um número inteiro.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Arredonde 1,999 para cima, de modo que se torne um número inteiro.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Arredondar 1,234 para duas casas decimais.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Retornará 1 se o número for positivo, -1 se o número for negativo e 0 se o número for zero.",
        "Documentation.LongDescription": "Retornará 1 se <code>number</code> for um número positivo, -1 se for um número negativo e 0 se for zero.\r\n    Se <code>number</code> for nulo, <code>Number.Sign</code> retornará um valor nulo.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determina o sinal de 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Determina o sinal de -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Determina o sinal de 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Retorna o seno do número.",
        "Documentation.LongDescription": "Retorna o seno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Localize o seno do ângulo 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Retorna o seno hiperbólico do número.",
        "Documentation.LongDescription": "Retorna o seno hiperbólico de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Retorna a raiz quadrada do número.",
        "Documentation.LongDescription": "Retorna a raiz quadrada de <code>number</code>.\r\n    Se <code>number</code> for nulo, <code>Number.Sqrt</code> retornará um valor nulo. Se for um valor negativo, <code>Number.NaN</code> será retornado (e não um número).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Localize a raiz quadrada de 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Localize a raiz quadrada de 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Retorna a tangente do número.",
        "Documentation.LongDescription": "Retorna a tangente de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Localize a tangente do ângulo 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Retorna a tangente hiperbólica do número.",
        "Documentation.LongDescription": "Retorna a tangente hiperbólica de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Converte o número fornecido em texto.",
        "Documentation.LongDescription": "Converte o valor numérico <code>number</code> em um valor de texto de acordo com o formato especificado por <code>format</code>.<br>\r\n    <br>\r\n     O formato é um valor de texto que indica como o número deve ser convertido. Para obter mais detalhes sobre os valores de formato com suporte, acesse https://go.microsoft.com/fwlink/?linkid=2241210 e https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\") para controlar o comportamento dependente da cultura de <code>format</code>.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Converta um número em texto sem especificar um formato.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Converter um número para o formato exponencial.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Converta um número em formato de porcentagem com apenas uma casa decimal.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Retorna uma tabela de feeds OData oferecidos por um serviço OData.",
        "Documentation.LongDescription": "Retorna uma tabela de feeds OData oferecidos por um serviço OData de um URI <code>serviceUri</code>, cabeçalhos <code>headers</code>. Um valor booleano especificando se desejar usar conexões simultâneas ou um parâmetro de registro opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n    <li><code>Consulta</code>: Adicione parâmetros de consulta ao URL de forma programática sem ter que se preocupar com o escape. </li>\r\n    <li> <code>Cabeçalhos</code>: Especificar esse valor como um registro fornecerá cabeçalhos adicionais para uma solicitação HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Especificar esse valor como uma lista excluirá essas chaves de cabeçalho HTTP de fazer parte do cálculo para armazenar dados em cache.</li>\r\n    <li> <code>ApiKeyName</code>: Se o site de destino tiver uma noção de uma chave de API, este parâmetro pode ser usado para especificar o nome (não o valor) do parâmetro de chave que deve ser usado no URL. O valor real da chave é fornecido na credencial.</li>\r\n    <li> <code>Tempo limite</code>: Especificar esse valor como uma duração alterará o tempo limite para uma solicitação HTTP. O valor padrão é 600 segundos.</li>\r\n    <li> <code>EnableBatch</code>: Um lógico (true/false) que define se deve permitir a geração de uma solicitação OData $batch se o MaxUriLength for excedido (o padrão é false).</li>\r\n    <li> <code>MaxUriLength</code>: um número que indica o comprimento máximo de um URI permitido enviado para um serviço OData. Se excedido e EnableBatch for true, a solicitação será feita para um ponto de extremidade OData $batch, caso contrário, falhará (o padrão é 2048).</li>\r\n    <li> <code>Simultâneo</code>: Uma lógica (true/false) quando definido como true, as solicitações para o serviço serão feitas simultaneamente. Quando definido como false, as solicitações serão feitas sequencialmente. Quando não especificado, o valor será determinado pela anotação AsynchronousRequestsSupported do serviço. Se o serviço não especificar se AsynchronousRequestsSupported é suportado, as solicitações serão feitas sequencialmente.</li>\r\n    <li> <code>ODataVersion</code>: Um número (3 ou 4) que especifica a versão do protocolo OData a ser usado para este serviço OData. Quando não especificado, todas as versões suportadas serão solicitadas. A versão do serviço será determinada pelo cabeçalho OData-Version retornado pelo serviço.</li>\r\n    <li> <code>FunctionOverloads</code>: Uma lógica (true/false) quando definida como true, sobrecargas de importação de função serão listadas no navegador como entradas separadas, quando definida como false, as sobrecargas de importação de função serão listadas como uma função de união no navegador. Valor padrão para V3: false. Valor padrão para V4: true.</li>\r\n    <li> <code>MoreColumns</code>: Uma lógica (true/false) quando definida como true, adiciona uma coluna \"Mais Colunas\" a cada feed de entidade contendo tipos abertos e tipos polimórficos. Isso conterá os campos não declarados no tipo base. Quando falso, este campo não está presente. O padrão é falso.</li>\r\n    <li> <code>IncludeAnnotations</code>: Uma lista separada por vírgulas de padrões ou termos qualificados de namespaces para incluir com \"*\" como curinga. Por padrão, nenhuma das anotações está incluída.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: Uma lista separada por vírgulas de padrões ou termos qualificados de namespaces para incluir em solicitações de documentos de metadados, com \"*\" como curinga. Por padrão, inclui as mesmas anotações que IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code>: Permite que o serviço OData evite escrever certos valores nas respostas. Se reconhecido pelo serviço, inferiremos esses valores a partir dos campos omitidos. As opções incluem:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code>: Permite que o serviço OData omita valores nulos.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementação</code>: Especifica a implementação do conector OData a ser usado. Os valores válidos são \"2.0\" ou nulo.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Conecte-se ao serviço TripPin OData.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Retorna o resultado de uma tentativa de inferir as funcionalidades do SQL de um driver ODBC.",
        "Documentation.LongDescription": "Retorna o resultado da tentativa de inferir funcionalidades do SQL com a cadeia de conexão <code>connectionString</code> usando ODBC. <code>connectionString</code> pode ser texto ou um registro dos pares de valor da propriedade. Os valores da propriedade podem ser texto ou número.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Retorna as funcionalidades SQL inferidas para uma cadeia de conexão.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Retorna o conteúdo do documento Parquet como uma tabela.",
        "Documentation.LongDescription": "Retorna o conteúdo do documento Parquet como uma tabela. Opções incluem:\n    <ul>\n    <li> <code>TypeMapping</code>: um valor de texto que controla o mapeamento de tipo padrão ao ler e gravar arquivos. O valor padrão é nulo e tenta preservar o máximo de fidelidade possível ao tipo original. Um valor de \"Sql\" produzirá resultados mais compatíveis com o Sql Server.</li>\n    </ul>",
        "Documentation.Category": "Acessando dados",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Acessando dados",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Retorna um valor de porcentagem de um determinado valor.",
        "Documentation.LongDescription": "Retorna um valor <code>percentage</code> com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Percentage.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>text</code> com um símbolo de porcentagem final, o número decimal convertido será retornado. Caso contrário, o valor será convertido para um <code>number</code> usando <code>Number.From</code>. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtém o valor <code>percentage</code> de <code>\"12.3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Retorna um registro de quadros de dados do arquivo RData.",
        "Documentation.LongDescription": "Retorna um registro de quadros de dados do arquivo RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Combina os registros na lista especificada.",
        "Documentation.LongDescription": "Combina os registros na <code>records</code> especificada. Se a <code>records</code> contiver valores não pertencentes a registro, um erro será retornado.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Criar um registro combinado dos registros.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Retorna o número de campos no registro.",
        "Documentation.LongDescription": "Retorna o número de campos no registro <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Localizar o número de campos no registro.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Retorna os nomes dos campos.",
        "Documentation.LongDescription": "Retorna os nomes dos campos no registro <code>record</code> como texto.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localizar os nomes dos campos no registro.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Retorna uma lista dos valores de campo.",
        "Documentation.LongDescription": "Retorna uma lista dos valores de campo no registro <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Localizar os valores de campo no registro.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Cria um registro de uma tabela no formato {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Retorna um registro de uma tabela de registros <code>table</code> que contêm nomes de campo e nomes de valor <code>{[Name = name, Value = value]}</code>. Uma exceção será lançada se os nomes de campo não forem exclusivos.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Criar um registro a partir da tabela no formato Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Retorna uma lista de valores que contêm valores de campo do registro de entrada.",
        "Documentation.LongDescription": "Retorna uma lista de valores que contêm valores de campo da entrada <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Extraia os valores de campo de um registro.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Retorna uma árvore de sintaxe abstrata (AST) que representa o acesso a uma coluna em uma expressão de linha.",
        "Documentation.LongDescription": "Retorna uma árvore de sintaxe abstrata (AST) que representa o acesso à coluna <code>columnName</code> da linha em uma expressão de linha.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Cria um AST representando o acesso da coluna \"CustomerName\".",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Retorna a árvore de sintaxe abstrata (AST) para o corpo de uma função.",
        "Documentation.LongDescription": "<p>Retorna a árvore de sintaxe abstrata (AST) para o corpo de <code>function</code>, normalizada em uma <i>expressão de linha</i>:\r\n<ul>\r\n   <li>A função deve ser um lambda de 1 argumento.</li>\r\n  <li>Todas as referências ao parâmetro de função são substituídas por <code>RowExpression.Row</code>.</li>\r\n   <li>Todas as referências a colunas são substituídas por <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n   <li>O AST será simplificado para conter apenas nós dos tipos:\r\n     <ul>\r\n       <li><code>Constante</code></li>\r\n       <li><code>Invocação</code></li>\r\n       <li><code>Unário</code></li>\r\n       <li><code>Binário</code></li>\r\n       <li><code>Se</code></li>\r\n       <li><code>FieldAccess</code></li>\r\n     </ul>\r\n   </li>\r\n</ul>\r\n</p>\r\n</p>Um erro será gerado se uma expressão de linha AST não puder ser retornada para o corpo de <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Retorna o AST para o corpo da função <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Cria um Único para o valor determinado.",
        "Documentation.LongDescription": "Retorna um valor <code>number</code> Único com base no <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Single.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for um <code>number</code> dentro do intervalo de Único, <code>value</code> será retornado. Caso contrário, um erro será retornado. Se o <code>value</code> for de qualquer outro tipo, será convertido primeiro para um <code>number</code> usando <code>Number.FromText</code>. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"pt-BR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o valor <code>number</code> Único de <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Retorna uma tabela de dados de um ponto de extremidade de índice do Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Efetua uma chamada à API REST do Smartsheet 2.0 no ponto de extremidade especificado e transforma o elemento de dados retornado em uma tabela.",
        "Documentation.Examples": [
          {
            "Description": "Efetua pull de uma tabela de informações de usuários da API do Smartsheet",
            "Code": "Smartsheet.Content(\"usuários\")",
            "Result": "Uma tabela com informações de usuários conforme retornadas pela API do Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Retorna uma função que divide o texto em uma lista de texto em qualquer delimitador especificado.",
        "Documentation.LongDescription": "Retorna uma função que divide o texto em uma lista de texto em qualquer delimitador especificado.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada por vírgula ou ponto e vírgula, ignorando aspas e delimitadores entre aspas e começando do início da entrada.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Divida a entrada por vírgula ou ponto e vírgula, ignorando aspas e delimitadores entre aspas e começando do final da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Retorna uma função que divide o texto em uma lista de texto de acordo com o delimitador especificado.",
        "Documentation.LongDescription": "Retorna uma função que divide o texto em uma lista de texto de acordo com o delimitador especificado.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada por vírgula, ignorando vírgulas entre aspas.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Retorna uma função que divide o texto em uma lista de texto em cada delimitador especificado sequencialmente.",
        "Documentation.LongDescription": "Retorna uma função que divide o texto em uma lista de texto em cada delimitador especificado sequencialmente.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada por vírgula e, em seguida, ponto e vírgula, começando do início da entrada.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Divida a entrada por vírgula e, em seguida, ponto e vírgula, tratando aspas como qualquer outro caractere e começando do final da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Retorna uma função que divide o texto em uma lista de texto por cada comprimento especificado.",
        "Documentation.LongDescription": "Retorna uma função que divide o texto em uma lista de texto por cada comprimento especificado.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada nos dois primeiros caracteres seguidos pelos três próximos, começando do início da entrada.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Divida a entrada nos três primeiros caracteres seguidos pelos dois próximos, começando no final da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Retorna uma função que divide o texto em uma lista de texto em cada posição especificada.",
        "Documentation.LongDescription": "Retorna uma função que divide o texto em uma lista de texto em cada posição especificada.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada nas posições especificadas, começando do início da entrada.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Divida a entrada nas posições especificadas, começando do final da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Retorna uma função que divide o texto em uma lista de texto de acordo com os deslocamentos e comprimentos especificados.",
        "Documentation.LongDescription": "Retorna uma função que divide o texto em uma lista de texto de acordo com os deslocamentos e comprimentos especificados. Um comprimento nulo indica que todas as entradas restantes devem ser incluídas.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada pelos pares de posição e comprimento especificados, começando do início da entrada. Observe que os intervalos neste exemplo se sobrepõem.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Divida a entrada pelos pares de posição e comprimento especificados, começando do final da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Divida a entrada em um código postal de comprimento fixo seguido por um nome de cidade de comprimento variável.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Retorna uma função que divide o texto em uma lista de texto após o comprimento especificado repetidamente.",
        "Documentation.LongDescription": "Retorna uma função que divide o texto em uma lista de texto após o comprimento especificado repetidamente.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida repetidamente a entrada em partes de três caracteres, começando do início da entrada.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Divida repetidamente a entrada em partes de três caracteres, começando do final da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Retorna o número de linhas aproximado na tabela.",
        "Documentation.LongDescription": "Retorna o número aproximado de linhas no <code>table</code>ou um erro se a fonte de dados não dá suporte à aproximação.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Estime o número de combinações distintas de cidade e estado em uma tabela grande, que pode ser usada como uma estimativa de cardinalidade para as colunas. Estimativas de cardinalidade são importantes o suficiente para que várias fontes de dados (como SQL Server) dão suporte a essa aproximação específica, geralmente usando um algoritmo chamado HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Retorna o número de colunas na tabela.",
        "Documentation.LongDescription": "Retorna o número de colunas na tabela <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Localizar o número de colunas na tabela.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Retorna os nomes de coluna como uma lista.",
        "Documentation.LongDescription": "Retorna os nomes de coluna na tabela <code>table</code> como uma lista de texto.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar os nomes de coluna da tabela.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Retorna a primeira linha ou um valor padrão especificado.",
        "Documentation.LongDescription": "Retorna a primeira linha da <code>table</code> ou um valor padrão <code>default</code> opcional, se a tabela estiver vazia.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar a primeira linha da tabela.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Localize a primeira linha da tabela <code>({})</code> ou retorne [a = 0, b = 0] se ela estiver vazia.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Retorna a primeira coluna da primeira linha da tabela ou um valor padrão especificado.",
        "Documentation.LongDescription": "Retorna a primeira coluna da primeira linha da tabela <code>table</code> ou um valor padrão especificado.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Indica se a tabela contém somente linhas distintas (sem duplicatas).",
        "Documentation.LongDescription": "Indica se a tabela <code>table</code> contém somente linhas distintas (sem duplicatas). Retorna <code>true</code> se as linhas forem distintas; caso contrário, <code>false</code>.\r\n    Um parâmetro opcional, <code>comparisonCriteria</code>, especifica quais colunas da tabela são testadas para duplicata. Se <code>comparisonCriteria</code> não for especificado, todas as colunas serão testadas.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela é distinta.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar se a tabela é distinta na coluna.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Indica se a tabela contém linhas.",
        "Documentation.LongDescription": "Indica se a tabela <code>table</code> contém linhas. Retorna <code>true</code> se as linhas forem distintas; caso contrário, <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela está vazia.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determine se a tabela <code>({})</code> está vazia.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Retorna as chaves da tabela especificada.",
        "Documentation.LongDescription": "Retorna as chaves da tabela especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Obter a lista de chaves de uma tabela.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Retorna a última linha ou um valor padrão especificado.",
        "Documentation.LongDescription": "Retorna a última linha da <code>table</code> ou um valor padrão <code>default</code> opcional, se a tabela estiver vazia.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar a última linha da tabela.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Localize a última linha da tabela <code>({})</code> ou retorne [a = 0, b = 0], se ela estiver vazia.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Retorna o número de linhas na tabela.",
        "Documentation.LongDescription": "Retorna o número de linhas na <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Localizar o número de linhas da tabela.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Retorna a única linha da tabela.",
        "Documentation.LongDescription": "Retorna a única linha da única <code>table</code> de linhas. Se a <code>table</code> tiver mais de uma linha, uma exceção será lançada.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar a única linha da tabela.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Cria uma lista de listas aninhadas de valores de coluna a partir de uma tabela.",
        "Documentation.LongDescription": "Cria uma lista de listas aninhadas a partir da tabela, <code>table</code>.  Cada item de lista é uma lista interna que contém os valores de coluna.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista dos valores de coluna da tabela.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Converte uma tabela em lista aplicando a função de combinação especificada a cada linha de valores na tabela.",
        "Documentation.LongDescription": "Converte uma tabela em lista aplicando a função de combinação especificada a cada linha de valores na tabela.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Combina o texto de todas as linhas com uma vírgula.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Converte uma tabela a uma lista de registros.",
        "Documentation.LongDescription": "Converte uma tabela, <code>table</code>, a uma lista de registros.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Converta a tabela a uma lista de registros.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Cria uma lista de listas aninhadas de valores de linha a partir de uma tabela.",
        "Documentation.LongDescription": "Cria uma lista de listas aninhadas a partir da tabela, <code>table</code>.  Cada item de lista é uma lista interna que contém os valores de linha.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista dos valores de linha da tabela.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Cria um registro de erro modificado que não acionará um fallback quando lançado por um manipulador definido em uma exibição (via Table.View).",
        "Documentation.LongDescription": "Cria um registro de erro modificado de <code>errorRecord</code> que não acionará um fallback quando lançado por um manipulador definido em uma exibição (via Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Cria uma função que pode ser interceptada por um manipulador definido em uma exibição (por meio do Table.View).",
        "Documentation.LongDescription": "<p>Cria uma função de exibição baseada em <code>function</code> que pode ser manipulada em uma exibição criada por <code>Table.View</code>.</p>\r\n<p>O manipulador <code>OnInvoke</code> de <code>Table.View</code> pode ser usado para definir um manipulador para a função de exibição.</p>\r\n<p>Assim como com os manipuladores para operações internas, se nenhum manipulador <code>OnInvoke</code> for especificado, se ele não manipular a função de exibição ou se um erro for gerado pelo manipulador, <code>function</code> será aplicado no topo da exibição.</p>\r\n<p>Consulte a documentação publicada de conector personalizado do Power Query para obter uma descrição mais completa de <code>Table.View</code> e das funções de exibição personalizadas.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Retorna o valor de texto com todos os caracteres de controle removidos.",
        "Documentation.LongDescription": "Retorna um valor de texto com todos os caracteres de controle de <code>text</code> removidos.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remover os feeds de linha e outros caracteres de controle de um valor de texto.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Concatena uma lista de valores de texto em um único valor de texto.",
        "Documentation.LongDescription": "Retorna o resultado da combinação da lista de valores de texto, <code>texts</code>, em um único valor de texto. Todos os valores <code>nulos</code> presentes em <code>texts</code> serão ignorados.\r\n    Um <code>separator</code> opcional usado no texto combinado final pode ser especificado.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Combine os valores \"Seattle\" e \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Combine os valores de texto \"Seattle\" e \"WA\" separados por uma vírgula e um espaço.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Combine os valores \"Seattle\", <code>nulos</code> e \"WA\", separados por uma vírgula e um espaço. (Observe que o <code>nulo</code> é ignorado.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Cria um valor de texto a partir do valor especificado.",
        "Documentation.LongDescription": "Retorna a representação de texto de <code>value</code>. <code>value</code> pode ser um valor <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> ou <code>binary</code>.\r\n    Se o valor especificado for null, <code>Text.From</code> retornará null. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Crie um valor de texto a partir do número 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Decodifica dados de um formato binário em texto.",
        "Documentation.LongDescription": "Decodifica os dados, <code>binary</code>, de um valor binário em valor de texto, usando o tipo <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Deduz o tipo de número granular (Int64.Type, Double.Type, etc.) de um número codificado no texto.",
        "Documentation.LongDescription": "Deduz o tipo de número granular (Int64.Type, Double.Type, etc.) de <code>text</code>. Um erro será gerado se <code>text</code> não for um número. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, “en-US”).",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Retorna o número de caracteres.",
        "Documentation.LongDescription": "Retorna o número de caracteres no texto <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Localize quantos caracteres existem no texto \"Olá, Mundo\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Converte todos os caracteres em minúsculas.",
        "Documentation.LongDescription": "Retorna o resultado da conversão de todos os caracteres em <code>text</code> em minúsculas. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a versão minúscula de \"AbCd\".",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Coloque a primeira letra de cada palavra em maiúscula.",
        "Documentation.LongDescription": "Retorna o resultado do uso de maiúsculas somente da primeira letra de cada palavra no valor de texto <code>text</code>. Todas as outras letras são retornadas em minúsculas. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Use <code>Text.Proper</code> em uma frase simples.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Inverte o <code>text</code> fornecido.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Inverta o texto \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Codifica o texto em formato binário.",
        "Documentation.LongDescription": "Codifica o valor de texto especificado, <code>text</code> em valor binário usando o <code>encoding</code> especificado.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Retorna uma lista de valores de caractere do valor de texto especificado.",
        "Documentation.LongDescription": "Retorna uma lista de valores de caractere do valor de texto especificado <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista de valores de caractere do texto \"Olá, Mundo\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Remove qualquer espaço em branco à direita e à esquerda.",
        "Documentation.LongDescription": "Retorna o resultado da remoção de todos os espaços em branco à esquerda e à direita do valor de texto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remova o espaço em branco à esquerda e à direita de \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Remove todos os espaços em branco à direita.",
        "Documentation.LongDescription": "Retorna o resultado da remoção de todos os espaços em branco à direita do valor de texto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remova o espaço em branco à direita de \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Remove todos os espaços em branco à esquerda.",
        "Documentation.LongDescription": "Retorna o resultado da remoção de todos os espaços em branco à esquerda do valor de texto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remova o espaço em branco à esquerda de \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Converte todos os caracteres em maiúsculas.",
        "Documentation.LongDescription": "Retorna o resultado da conversão de todos os caracteres em <code>text</code> em maiúsculas. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a versão maiúscula de \"aBcD\".",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Retorna o final da hora.",
        "Documentation.LongDescription": "Retorna o final da hora representado por <code>dateTime</code>, incluindo segundos fracionários. As informações de fuso horário são preservadas.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o fim da hora é calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o fim da hora de 14/5/2011 05:00: 00 PM.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Obtenha o fim da hora de 17/5/2011 05:00: 00 PM -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Cria uma hora a partir do valor especificado.",
        "Documentation.LongDescription": "Retorna um valor <code>time</code> com base no <code>value</code> especificado. Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").\r\nSe o <code>value</code> especificado for <code>null</code>, <code>Time.From</code> retornará <code>null</code>. Se o <code>value</code> especificado for <code>time</code>, <code>value</code> será retornado. Os valores dos seguintes tipos podem ser convertidos em um valor <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: um valor <code>time</code> da representação textual. Confira <code>Time.FromText</code> para obter informações detalhadas.</li>\r\n        <li><code>datetime</code>: o componente de hora do <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: o componente de hora do equivalente de datetime local <code>value</code>.</li>\r\n        <li><code>number</code>: um equivalente de <code>time</code> para o número de dias fracionários expressos por <code>value</code>. Se <code>value</code> for negativo ou superior ou igual a 1, um erro será retornado.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, um erro será retornado.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>0.7575</code> em um valor <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Converta <code>#datetime(1899, 12, 30, 06, 45, 12)</code> em um valor <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Cria uma Hora com Formatos de hora locais, universais e personalizados.",
        "Documentation.LongDescription": "Cria um valor <code>time</code> a partir de uma representação textual, <code>text</code>. Um parâmetro opcional <code>record</code>, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> que indica o formato a ser usado. Para obter mais detalhes, acesse https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na análise do tempo usando o melhor esforço possível.</li>\r\n <li><code>Culture</code>: Quando <code>Format</code> não é nulo, <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code> <code>\"tt\"</code> é <code>\"AM\" ou \"PM\"</code>, enquanto em <code>\"ar- EG\"</code> <code>\"tt\"</code> é <code>\"ص\" ou \"م\"</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato padrão a ser usado. Quando <code>Culture</code> é <code>null</code> ou omitido, <code>Culture.Current</code> é usado.</li>\r\n</ul>\r\nPara oferecer suporte a fluxos de trabalho legados, <code>options</code> também pode ser um valor de texto. Isso tem o mesmo comportamento como se <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>\"10:12:31am\"</code> em um valor Time.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Converta <code>\"1012\"</code> em um valor Temporal.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Converta <code>\"10\"</code> em um valor Temporal.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Retorna o componente de hora.",
        "Documentation.LongDescription": "Retorna o componente de hora do valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Localize a hora em #datetime (2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Retorna o componente de minuto.",
        "Documentation.LongDescription": "Retorna o componente de minuto do valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Localize o minuto em #datetime (2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Retorna o componente de segundo.",
        "Documentation.LongDescription": "Retorna o componente de segundo do valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Localize o segundo valor por meio do valor datetime.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Retorna o início da hora.",
        "Documentation.LongDescription": "Retorna o início da hora representado por <code>dateTime</code>.\r\n    <code>dateTime</code> deve ser um valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início da hora para 10 de outubro de 2011, 8h10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Retorna um registro contendo as partes do valor Time.",
        "Documentation.LongDescription": "Retorna um registro contendo as partes do valor Time especificado, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: um valor <code>time</code> com base no qual o registro das partes será calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converta o valor <code>#time(11, 56, 2)</code> em um registro contendo os valores Time.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Retorna uma representação textual do valor temporal.",
        "Documentation.LongDescription": "Retorna uma representação textual de <code>time</code>. Um parâmetro opcional <code>record</code>, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. <code>culture</code> é usado apenas para fluxos de trabalho legados. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> que indica o formato a ser usado. Para obter mais detalhes, acesse https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na formatação da data usando o padrão definido por <code>Culture</code>.</li>\r\n <li><code>Culture</code>: Quando <code>Format</code> não é nulo, <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code> <code>\"tt\"</code> é <code>\"AM\" ou \"PM\"</code>, enquanto em <code>\"ar- EG\"</code> <code>\"tt\"</code> é <code>\"ص\" ou \"م\"</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato padrão a ser usado. Quando <code>Culture</code> é <code>null</code> ou omitido, <code>Culture.Current</code> é usado.</li>\r\n</ul>\r\nPara oferecer suporte a fluxos de trabalho legados, <code>options</code> e <code>culture</code> também podem ser valores de texto. Isso tem o mesmo comportamento como se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converta <code>#time(01, 30, 25)</code> em um valor <code>text</code>. <i>O resultado pode variar dependendo da cultura atual.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Converta usando um formato personalizado e a cultura alemã.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Converta usando o formato de hora padrão.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Retorna uma versão fechada do tipo de registro determinado (ou do mesmo tipo, se já está fechado).",
        "Documentation.LongDescription": "Retorna uma versão fechada do <code>registro</code> determinado <code>type</code> (ou do mesmo tipo, se já está fechado).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Crie uma versão fechada de <code>tipo [ A = número,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Retorna as facetas de um tipo.",
        "Documentation.LongDescription": "Retorna um registro contendo as facetas de <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Retorna um registro com valores de campo definidos para o nome dos parâmetros de um tipo de função, e seus valores definidos para seus tipos correspondentes.",
        "Documentation.LongDescription": "Retorna um registro com valores de campo definidos para o nome dos parâmetros de <code>type</code>, e seus valores definidos para seus tipos correspondentes.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Encontre os tipos dos parâmetros para a função <code>(x como número, y como texto)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Retorna um número que indica o número mínimo de parâmetros necessários para invocar o tipo de função.",
        "Documentation.LongDescription": "Retorna um número que indica o número mínimo de parâmetros necessários para invocar a entrada <code>type</code> da função.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Encontre o número de parâmetros necessários para a função <code>(x como número, opcionalmente como texto)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Retorna um tipo retornado por um tipo de função.",
        "Documentation.LongDescription": "Retorna um tipo retornado por uma função <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Encontre o tipo de retorno de <code>() como qualquer um)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Retorna true se um tipo for um tipo anulável; caso contrário, false.",
        "Documentation.LongDescription": "Retorna <code>true</code> se um tipo for um tipo <code>nulo</code>; caso contrário, <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determine se <code>número</code> é anulável.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Determine se <code>número nulo de tipo</code> é anulável.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Retorna se um tipo de registro for aberto.",
        "Documentation.LongDescription": "Retorna uma <code>lógico</code> indicando se um registro <code>type</code> é aberto.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determine se o registro <code>tipo [ A = número, ...]</code> é aberto.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Retorna um tipo de item de um tipo de lista.",
        "Documentation.LongDescription": "Retorna um tipo de item de uma lista <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Encontre o tipo de item a partir da lista <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Retorna o tipo não anulável de um tipo.",
        "Documentation.LongDescription": "Retorna o tipo não <code>nulo</code> de <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Retorne o tipo não anulável de <code>número nulo de tipo</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Retorna uma versão aberta do tipo de registro determinado (ou do mesmo tipo, se já está aberto).",
        "Documentation.LongDescription": "Retorna uma versão aberta do <code>registro</code> determinado <code>type</code> (ou do mesmo tipo, se já está aberto).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Crie uma versão aberta de <code>tipo [ A = número]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Retorna um registro descrevendo os campos de um tipo de registro com cada campo do tipo de registro retornado tendo um nome correspondente e um valor.",
        "Documentation.LongDescription": "Retorna um registro descrevendo os campos de um registro <code>type</code>. Cada campo do tipo de registro retornado tem um nome correspondente e um valor, na forma de um registro <code>[ Tipo = tipo,Opcional = lógico ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Encontre o nome e o valor do registro <code>[ A = número, opcional B = qualquer um]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Retorna a lista de chaves possivelmente vazias do tipo de tabela especificado.",
        "Documentation.LongDescription": "Retorna a lista de chaves possivelmente vazia para o tipo de tabela fornecido.<br>\r\n    <br>\r\n    Cada chave é definida usando um registro no seguinte formato:\r\n    <ul>\r\n      <li>\r\n        <code>Colunas</code>: uma lista dos nomes das colunas que definem a chave\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code> se a chave for a chave primária da tabela; caso contrário, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Retorne as principais informações de um tipo de tabela.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Retorna o tipo de linha do tipo de tabela.",
        "Documentation.LongDescription": "Retorna o tipo de linha do tipo de tabela especificada. O resultado será sempre um tipo de registro.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Devolver a informação do tipo de linha para uma tabela simples.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Retorna a união de uma lista de tipos.",
        "Documentation.LongDescription": "Retorna a união de uma lista de tipos em <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Monte um registro em uma cadeia de caracteres de consulta da URI.",
        "Documentation.LongDescription": "Monte o registro <code>query</code> em uma cadeia de caracteres de consulta da URI, liberando caracteres conforme necessário.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codifique uma cadeia de caracteres de consulta que contém alguns caracteres especiais.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Codifica caracteres especiais de acordo com o RFC 3986.",
        "Documentation.LongDescription": "Codifica caracteres especiais na entrada <code>data</code> de acordo com as regras do RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codifique os caracteres especiais em \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Retorna as partes do URI absoluto de entrada como um registro.",
        "Documentation.LongDescription": "Retorna as partes do <code>absoluteUri</code> de entrada como um registro, contendo valores como Scheme, Host, Port, Path, Query, Fragment, UserName e Password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Localize as partes do URI absoluto \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Decodificar uma cadeia de caracteres codificada por percentual.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Insira a URL do Serviço Analítico do Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Retorna os conteúdos baixados da URL do Serviço Analítico do Azure DevOps como um valor binário. Essa função usa credenciais diferentes para organizações diferentes."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Insira a URL do Serviço Analítico do Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Retorna os conteúdos baixados da URL do Serviço Analítico do Azure DevOps como um valor binário. Essa função usa as credenciais globais para toda a organização acessível."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Expressa planos de consulta alternativos.",
        "Documentation.LongDescription": "Expressa planos de consulta alternativos em uma expressão do plano de consulta obtida por meio de Value.Expression(Value.Optimize(...)). Não se destina a outros usos.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Retorna uma árvore de sintaxe abstrata (AST) que representa a expressão do valor.",
        "Documentation.LongDescription": "Retorna uma árvore de sintaxe abstrata (AST) que representa a expressão do valor",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Cria um valor fortemente tipado a partir de uma representação textual.",
        "Documentation.LongDescription": "Decodifica um valor de uma representação textual, <code>text</code>, e o interpreta como um valor com um tipo apropriado.\r\n    <code>Value.FromText</code> assume um valor de texto e retorna um número, um valor lógico, um valor nulo, um valor datetime, um valor de duração ou um valor de texto. O valor de texto vazio é interpretado como um valor nulo.\r\n    Um <code>culture</code> opcional também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Retorna um registro que contém os metadados da entrada.",
        "Documentation.LongDescription": "Retorna um registro que contém os metadados da entrada.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Sinaliza Value.Expression para retornar a expressão otimizada para um valor.",
        "Documentation.LongDescription": "Quando usado em Value.Expression, se <code>value</code> representa uma consulta que pode ser otimizada, esta função indica que a expressão otimizada deve ser retornada. Caso contrário, o <code>value</code> será passado sem efeito.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Distribui a entrada dos metadados.",
        "Documentation.LongDescription": "Distribui a entrada dos metadados.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Retorna o tipo do valor especificado.",
        "Documentation.LongDescription": "Retorna o tipo do valor especificado.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Esta função é destinada somente para uso interno.",
        "Documentation.LongDescription": "Esta função é destinada somente para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Retorna o HTML para o URL especificado, conforme exibido por um navegador da Web.",
        "Documentation.LongDescription": "Retorna o HTML para o <code>url</code> especificado, conforme exibido por um navegador da Web. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registro pode conter os seguintes campos:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: se o site de destino tiver uma noção de uma chave de API, esse parâmetro poderá ser usado para especificar o nome (não o valor) do parâmetro da chave que deverá ser usada na URL. O valor real da chave é fornecido na credencial.</li>\r\n        <li><code>WaitFor</code>: especifica uma condição para aguardar antes de baixar o HTML, além de aguardar o carregamento da página (o que sempre é feito). Pode ser um registro contendo os campos de Tempo Limite e/ou Seletor. Se apenas um Tempo Limite for especificado, a função aguardará a quantidade de tempo especificada antes de baixar o HTML. Se um Seletor e um Tempo Limite forem especificados e o Tempo Limite decorrer antes que um Seletor exista na página, um erro será gerado. Se um Seletor for especificado sem Tempo Limite, um Tempo Limite padrão de 30 segundos será aplicado.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Dados acessados",
        "Documentation.Examples": [
          {
            "Description": "Retorna o HTML para https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Retorna o HTML para https://microsoft.com depois de aguardar pela existência de um seletor de CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Retorna o HTML para https://microsoft.com após esperar dez segundos.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Retorna o HTML para https://microsoft.com depois de esperar por até dez segundos pela existência de um seletor de CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Retorna o conteúdo baixado da URL como binário.",
        "Documentation.LongDescription": "Retorna o conteúdo baixado do <code>url</code> como binário. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar as propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>Query</code> : Adicione programaticamente par&#226;metros de consulta &#224; URL sem precisar se preocupar com a sa&#237;da.</li>\r\n<li><code>ApiKeyName</code> : Se o site de destino tiver uma no&#231;&#227;o de uma chave de API, este par&#226;metro poder&#225; ser usado para especificar o nome (n&#227;o o valor) do par&#226;metro de chave que precisa ser usado na URL. O valor da chave real &#233; fornecido na credencial.</li>\r\n<li><code>Headers</code> : A especifica&#231;&#227;o deste valor como um registro fornecer&#225; cabe&#231;alhos adicionais a uma solicita&#231;&#227;o HTTP.</li>\r\n<li><code>Timeout</code> : A especifica&#231;&#227;o deste valor como uma dura&#231;&#227;o alterar&#225; o tempo limite de uma solicita&#231;&#227;o HTTP. O valor padr&#227;o &#233; 100 segundos.</li>\r\n<li><code>ExcludedFromCacheKey</code> : A especifica&#231;&#227;o deste valor como uma lista excluir&#225; essas chaves de cabe&#231;alho HTTP de fazer parte do c&#225;lculo para o cache de dados.</li>\r\n<li><code>IsRetry</code> : A especifica&#231;&#227;o deste valor l&#243;gico como true ignorar&#225; qualquer resposta existente no cache ao buscar dados.</li>\r\n<li><code>ManualStatusHandling</code> : A especifica&#231;&#227;o deste valor como uma lista impedir&#225; qualquer tratamento interno para solicita&#231;&#245;es HTTP cuja resposta tenha um desses c&#243;digos de status.</li>\r\n<li><code>RelativePath</code> : A especifica&#231;&#227;o deste valor como texto o anexar&#225; &#224; URL base antes de fazer a solicita&#231;&#227;o.</li>\r\n<li><code>Content</code> : A especifica&#231;&#227;o deste valor alterar&#225; a solicita&#231;&#227;o da Web de um GET para um POST, usando o valor da op&#231;&#227;o como o conte&#250;do do POST.</li>\r\n</ul>\r\n\r\n    A solicitação HTTP é feita como GET (quando nenhum Conteúdo é especificado) ou um POST (quando há Conteúdo). As solicitações POST só podem ser feitas anonimamente.\r\n    <br>\r\n    Os cabeçalhos da resposta HTTP estão disponíveis como metadados no resultado binário. Fora de um contexto de conector de dados personalizado, apenas um subconjunto de cabeçalhos de resposta está disponível (por motivos de segurança).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Recupere o conteúdo de  of <code>\"https://bing.com/search?q=Power+Query\"</code> usando as opções RelativePath e Query. Essas opções podem ser usadas para consultar dinamicamente um URL de base estática.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Execute um POST em uma URL, passando uma carga útil JSON binária e analisando a resposta como JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Conecte-se a uma URL segura que aceite uma chave de autenticação como parte de sua cadeia de caracteres de consulta. Em vez de codificar a chave secreta em M (o que representaria um risco de segurança), \r\n    a chave pode ser fornecida com segurança especificando seu nome (não seu valor) em M, escolhendo a autenticação de API Web e inserindo o valor da chave como parte da credencial da API Web.\r\n    Quando usado dessa forma, o exemplo a seguir gerará uma solicitação para <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Retorna os cabeçalhos HTTP baixados da URL como um valor de registro.",
        "Documentation.LongDescription": "Retorna os cabeçalhos baixados do <code>url</code> como um registro. Um parâmetro de registro opcional, <code>options</code>, pode ser fornecido para especificar as propriedades adicionais. O registro pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>Query</code> : Adicione programaticamente par&#226;metros de consulta &#224; URL sem precisar se preocupar com a sa&#237;da.</li>\r\n<li><code>ApiKeyName</code> : Se o site de destino tiver uma no&#231;&#227;o de uma chave de API, este par&#226;metro poder&#225; ser usado para especificar o nome (n&#227;o o valor) do par&#226;metro de chave que precisa ser usado na URL. O valor da chave real &#233; fornecido na credencial.</li>\r\n<li><code>Headers</code> : A especifica&#231;&#227;o deste valor como um registro fornecer&#225; cabe&#231;alhos adicionais a uma solicita&#231;&#227;o HTTP.</li>\r\n<li><code>Timeout</code> : A especifica&#231;&#227;o deste valor como uma dura&#231;&#227;o alterar&#225; o tempo limite de uma solicita&#231;&#227;o HTTP. O valor padr&#227;o &#233; 100 segundos.</li>\r\n<li><code>ExcludedFromCacheKey</code> : A especifica&#231;&#227;o deste valor como uma lista excluir&#225; essas chaves de cabe&#231;alho HTTP de fazer parte do c&#225;lculo para o cache de dados.</li>\r\n<li><code>IsRetry</code> : A especifica&#231;&#227;o deste valor l&#243;gico como true ignorar&#225; qualquer resposta existente no cache ao buscar dados.</li>\r\n<li><code>ManualStatusHandling</code> : A especifica&#231;&#227;o deste valor como uma lista impedir&#225; qualquer tratamento interno para solicita&#231;&#245;es HTTP cuja resposta tenha um desses c&#243;digos de status.</li>\r\n<li><code>RelativePath</code> : A especifica&#231;&#227;o deste valor como texto o anexar&#225; &#224; URL base antes de fazer a solicita&#231;&#227;o.</li>\r\n</ul>\r\n\r\n    A solicitação HTTP é feita com o método HEAD. Fora de um contexto de conector de dados personalizado, apenas um subconjunto de cabeçalhos de resposta está disponível (por motivos de segurança).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Recupere os cabeçalhos HTTP de <code>\"https://bing.com/search?q=Power+Query\"</code> usando as opções RelativePath e Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "O contexto de autorização em relação ao qual uma condição de ACE (entrada de controle de acesso) é avaliada.",
        "Documentation.LongDescription": "O contexto de autorização em relação ao qual uma condição de ACE (entrada de controle de acesso) é avaliada.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Uma tabela de ACEs (entradas de controle de acesso).",
        "Documentation.LongDescription": "Uma tabela ordenada de ACEs (entradas de controle de acesso) que representa as regras de autorização. Cada linha é avaliada em relação ao contexto de autorização atual (na ordem) e a primeira linha para a qual a expressão <code>Condition</code> retorna true determina qual regra é aplicada. A coluna <code>Action</code> representa o tipo de ação ao qual a regra se aplica. A coluna <code>AccessControlKind</code> determina se o acesso deve ser permitido ou negado para a ação.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Especifica o tipo de controle de acesso.",
        "Documentation.LongDescription": "Especifica o tipo de controle de acesso.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "O tipo que representa todos os valores.",
        "Documentation.LongDescription": "O tipo que representa todos os valores.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "O tipo que representa todos os valores binários.",
        "Documentation.LongDescription": "O tipo que representa todos os valores binários.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Especifica o tipo de codificação de binário.",
        "Documentation.LongDescription": "Especifica o tipo de codificação de binário.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Especifica quantas vezes o item deve aparecer no grupo.",
        "Documentation.LongDescription": "Especifica quantas vezes o item deve aparecer no grupo.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Descreve o tipo de buffer a ser executado.",
        "Documentation.LongDescription": "Descreve o tipo de buffer a ser executado.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "O tipo que representa todos os bytes.",
        "Documentation.LongDescription": "O tipo que representa todos os bytes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Especifica a ordem de bytes.",
        "Documentation.LongDescription": "Especifica a ordem de bytes.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "O tipo que representa todos os caracteres.",
        "Documentation.LongDescription": "O tipo que representa todos os caracteres.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Especifica o tipo de compactação.",
        "Documentation.LongDescription": "Especifica o tipo de compactação.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Especifica o significado de aspas em documentos Csv.",
        "Documentation.LongDescription": "Especifica o significado de aspas em documentos Csv.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "O tipo que representa o valor da moeda.",
        "Documentation.LongDescription": "O tipo que representa o valor da moeda.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "O tipo que representa todos os valores date.",
        "Documentation.LongDescription": "O tipo que representa todos os valores date.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "O tipo que representa todos os valores de data e hora sem um fuso horário associado.",
        "Documentation.LongDescription": "O tipo que representa todos os valores de data e hora sem um fuso horário associado.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "O tipo que representa todos os valores de data e hora relativos a um fuso horário.",
        "Documentation.LongDescription": "O tipo que representa todos os valores de data e hora relativos a um fuso horário.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Especifica um dia da semana.",
        "Documentation.LongDescription": "Especifica um dia da semana.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "O tipo que representa o número decimal de ponto fixo.",
        "Documentation.LongDescription": "O tipo que representa o número decimal de ponto fixo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "O tipo que representa o número do ponto flutuante de precisão dupla.",
        "Documentation.LongDescription": "O tipo que representa o número do ponto flutuante de precisão dupla.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "O tipo que representa todos os valores duration.",
        "Documentation.LongDescription": "O tipo que representa todos os valores duration.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Especifica a ação esperada para valores extras em uma linha que contém mais colunas do que o esperado.",
        "Documentation.LongDescription": "Especifica a ação esperada para valores extras em uma linha que contém mais colunas do que o esperado.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "O tipo que representa todas as funções.",
        "Documentation.LongDescription": "O tipo que representa todas as funções.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Especifica o tipo de agrupamento.",
        "Documentation.LongDescription": "Vários grupos locais podem ser produzidos com o mesmo valor de chave, mas somente um único grupo global é produzido para um determinado valor de chave.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "O tipo que representa o valor da GUID.",
        "Documentation.LongDescription": "O tipo que representa o valor da GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Uma identidade representa um usuário, um grupo, um dispositivo ou outra coisa identificável.",
        "Documentation.LongDescription": "Uma identidade representa um usuário, um grupo, um dispositivo ou outra coisa identificável.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Define um escopo no qual as identidades são criadas e comparadas.",
        "Documentation.LongDescription": "Define um escopo no qual as identidades são criadas e comparadas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "O tipo que representa o inteiro de 16 bits assinado.",
        "Documentation.LongDescription": "O tipo que representa o inteiro de 16 bits assinado.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "O tipo que representa o inteiro de 32 bits assinado.",
        "Documentation.LongDescription": "O tipo que representa o inteiro de 32 bits assinado.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "O tipo que representa o inteiro de 64 bits assinado.",
        "Documentation.LongDescription": "O tipo que representa o inteiro de 64 bits assinado.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "O tipo que representa o inteiro de 8 bits assinado.",
        "Documentation.LongDescription": "O tipo que representa o inteiro de 8 bits assinado.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Especifica o algoritmo join a ser usado na operação join.",
        "Documentation.LongDescription": "Especifica o algoritmo join a ser usado na operação join.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Especifica o tipo de operação join.",
        "Documentation.LongDescription": "Especifica o tipo de operação join.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Especifica a tabela à esquerda ou à direita de uma junção.",
        "Documentation.LongDescription": "Especifica a tabela à esquerda ou à direita de uma junção.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Descreve o tipo de cláusula limite compatível com o dialeto SQL usado por esta fonte de dados.",
        "Documentation.LongDescription": "Descreve o tipo de cláusula limite compatível com o dialeto SQL usado por esta fonte de dados.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "O tipo que representa todas as listas.",
        "Documentation.LongDescription": "O tipo que representa todas as listas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "O tipo que representa todos os valores lógicos.",
        "Documentation.LongDescription": "O tipo que representa todos os valores lógicos.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Especifica a ação esperada para valores ausentes em uma linha que contém menos colunas do que o esperado.",
        "Documentation.LongDescription": "Especifica a ação esperada para valores ausentes em uma linha que contém menos colunas do que o esperado.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "O tipo que representa um valor nulo.",
        "Documentation.LongDescription": "O tipo que representa um valor nulo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "O tipo que representa todos os números.",
        "Documentation.LongDescription": "O tipo que representa todos os números.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Especifica os tipos de valores que um serviço OData pode omitir.",
        "Documentation.LongDescription": "Especifica os tipos de valores que um serviço OData pode omitir.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Especifica a ocorrência de um elemento em uma sequência.",
        "Documentation.LongDescription": "Especifica a ocorrência de um elemento em uma sequência.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Especifica a direção da classificação.",
        "Documentation.LongDescription": "Especifica a direção da classificação.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "O tipo que representa uma senha de texto.",
        "Documentation.LongDescription": "O tipo que representa uma senha de texto.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "O tipo que representa o valor de porcentagem.",
        "Documentation.LongDescription": "O tipo que representa o valor de porcentagem.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Especifica o tipo do modo de percentil.",
        "Documentation.LongDescription": "Especifica o tipo do modo de percentil.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Especifica a precisão da comparação.",
        "Documentation.LongDescription": "Especifica a precisão da comparação.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Especifica o estilo de aspas.",
        "Documentation.LongDescription": "Especifica o estilo de aspas.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Especifica o tipo de classificação.",
        "Documentation.LongDescription": "Especifica o tipo de classificação.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "O tipo que representa todos os registros.",
        "Documentation.LongDescription": "O tipo que representa todos os registros.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Indica se a indexação deve ser feita a partir do início ou do final da entrada.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Especifica a direção de arredondamento quando há um vínculo entre possíveis números para arredondar.",
        "Documentation.LongDescription": "Especifica a direção de arredondamento quando há um vínculo entre possíveis números para arredondar.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Opções válidas para a opção de modo de execução do SAP Business Warehouse.",
        "Documentation.LongDescription": "Opções válidas para a opção de modo de execução do SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Opções de distribuição válidas para SAP HANA.",
        "Documentation.LongDescription": "Opções de distribuição válidas para SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Um operador de intervalo para parâmetros de entrada do SAP HANA.",
        "Documentation.LongDescription": "Um operador de intervalo para parâmetros de entrada do SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "O tipo que representa o número do ponto de flutuação da precisão única.",
        "Documentation.LongDescription": "O tipo que representa o número do ponto de flutuação da precisão única.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "O protocolo a usar ao conectar a uma instância do Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "O tipo que representa todas as tabelas.",
        "Documentation.LongDescription": "O tipo que representa todas as tabelas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "O tipo que representa todos os valores de texto.",
        "Documentation.LongDescription": "O tipo que representa todos os valores de texto.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Especifica o tipo de codificação de texto.",
        "Documentation.LongDescription": "Especifica o tipo de codificação de texto.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "O tipo que representa todos os valores de hora.",
        "Documentation.LongDescription": "O tipo que representa todos os valores de hora.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Especifica o nível de rastreamento.",
        "Documentation.LongDescription": "Especifica o nível de rastreamento.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "O tipo que representa todos os tipos.",
        "Documentation.LongDescription": "O tipo que representa todos os tipos.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "O tipo que representa um URI de texto.",
        "Documentation.LongDescription": "O tipo que representa um URI de texto.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Especifica um método HTTP.",
        "Documentation.LongDescription": "Especifica um método HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
