{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Atgriež Access datu bāzes struktūras attēlojumu.",
        "Documentation.LongDescription": "Tiek atgriezts Access datu bāzes <code>database</code> struktūras attēlojums. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “false”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Tiek atgrieztas Analysis Services datubāzes konkrētā resursdatorā.",
        "Documentation.LongDescription": "Tiek atgrieztas datu bāzes analīzes pakalpojumu instancē <code>server</code>. Lai precizētu papildu rekvizītus, var norādīt neobligātu ieraksta parametru <code>options</code>. Ierakstā var ietvert tālāk norādītos laukus.\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Loģiska vērtība, kas norāda, vai daudzdimensiju vai tabulveida modelī norādītie veidi tiks izmantoti pievienotajām mēru kolonnām. Ja ir iestatīta vērtība “false”, visām mēru kolonnām tiks izmantots veids “number”. Šīs opcijas noklusējuma vērtība ir “false”.</li>\r\n<li><code>Culture</code> : Kultūras nosaukums, kas norāda datu kultūru. Šī vērtība atbilst savienojuma virknes rekvizītam Lokālais identifikators.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>SubQueries</code> : Skaitlis (0, 1 vai 2), ar kuru tiek iestatīta rekvizīta SubQueries vērtība savienojuma virknē. Tas nodrošina aprēķināto elementu darbības pārvaldību apakšatlasēs un apakškubos. (Noklusējuma vērtība ir&#160;2.)</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "AtScale kubi",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Importēt/DirectQuery kuba datus no AtScale.",
        "Documentation.LongDescription": "\r\nAtgriež kuba datus no AtScale serverī <code>server</code>. Ir iespējams norādīt papildu ieraksta parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: loģiskā vērtība, kas norāda, vai daudzdimensiju vai tabulārajā modelī norādītie tipi tiks izmantoti pievienoto mēru kolonnu tipiem. Ja šī opcija ir iestatīta uz “false” (aplams), tips“skaitlis” tiek izmantots visām mēra kolonnām. Šīs opcijas noklusējuma vērtība ir “false” (aplams).</li>\r\n        <li><code>CommandTimeout</code>: ilgums (sekundēs), kas kontrolē, cik ilgi servera puses vaicājumam tiek atļauts darboties, pirms tas tiek atcelts. Noklusējuma vērtība ir atkarīga no draivera. </li>\r\n        <li><code>ConnectionTimeout</code>: lgums (sekundēs), kas kontrolē, cik ilgi ir jāgaida, pirms tiek atmests mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera. </li>\r\n\r\n</ul>\r\nIeraksta parametrs tiek norādīts šādā formātā: [opcija1 = vērtība1, opcija2 = vērtība2...].",
        "Documentation.Examples": {
          "Description": "Uzskaita kuba datus AtScale kubā.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importē datus no Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Tiek importēti dati no Azure Data Explorer (Kusto) instances",
        "Documentation.Examples": [
          {
            "Description": "Atgriež Storm notikumu informācijas tabulu",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabula ar Storm notikumiem no datubāzes “Samples” (Paraugi), kas atrodas klasterī “help” (palīdzība)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Ievadiet Azure DevOps Analytics pakalpojuma vietrādi URL.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Tiek atgriezts saturs, kas ir lejupielādēts no Azure DevOps Analytics pakalpojuma vietrāža URL kā bināra vērtība. Šajā funkcijā dažādām organizācijām tiek izmantoti dažādi akreditācijas dati."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps pakalpojumu plūsma",
        "Documentation.DisplayName": "Azure DevOps pakalpojumu plūsma",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Tiek atgriezta Azure DevOps nodrošinātā OData plūsmu tabula."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Ievadiet ar reģistrāciju saistītā Azure Enterprise REST API galapunkta vietrādi URL",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Atgriež saskarnē Azure Enterprise API pieejamo atskaišu un mēnešu sarakstu",
        "Documentation.Name": "Datu importēšana no Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Funkcijas AzureEnterprise.Tables izmantošana un pāriešana uz noteiktu vērtību, lai iegūtu rezultātus.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tabula"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "See https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli for starter query samples.",
        "Documentation.Examples": [
          {
            "Description": "Return a table with query results of user query 'resources'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Skatīt Azure Spark instancē esošās tabulas.",
        "Documentation.LongDescription": "Skatīt Azure Spark instancē esošās tabulas.",
        "Documentation.Examples": [
          {
            "Description": "Skatīt Azure Spark instancē esošās tabulas.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Atgriež navigācijas tabulu ar konteineriem, kas atrasti norādītajā kontā no Azure krātuves akreditācijas datu komplekta.",
        "Documentation.LongDescription": "Atgriež navigācijas tabulu ar rindām par katru konteineri, kas atrasts, izmantojot konta vietrādi URL, <code>account</code>, no Azure krātuves akreditācijas datu komplekta. Katrā rindā ir saite uz konteinera BLOB failiem. Var tikt norādīts <code>options</code>, lai kontrolētu šādas opcijas:\r\n    <ul>\r\n<li><code>BlockSize</code> : To baitu skaits, kas jālasa pirms datu patēriņa gaidīšanas. Noklusējuma vērtība ir 4 MB.</li>\r\n<li><code>RequestSize</code> : Baitu skaits, ko mēģināt lasīt vienā HTTP pieprasījumā uz serveri. Noklusējuma vērtība ir 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcija ConcurrentRequests nodrošina ātrāku datu lejupielādi, norādot pieprasījumu skaitu, kas jāsniedz vienlaicīgi, izmantojot atmiņas izmantošanas izmaksas. Nepieciešamā atmiņa ir (ConcurrentRequest * RequestSize). Noklusējuma vērtība ir 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Tiek atgriezta navigācijas tabula, kurā ir ietverti dokumenti, kas atrasti norādītajā konteinerā un tā apakšmapēs repozitorijā Azure Data Lake Storage.",
        "Documentation.LongDescription": "No Azure Data Lake Storage failu sistēmas tiek atgriezta navigācijas tabula, kurā ir ietverti dokumenti, kas atrasti norādītajā konteinerā un tā apakšmapēs konta vietrādī URL <code>endpoint</code>. Var tikt norādīts <code>options</code>, lai kontrolētu šādas opcijas:\r\n    <ul>\r\n<li><code>BlockSize</code> : To baitu skaits, kas jālasa pirms datu patēriņa gaidīšanas. Noklusējuma vērtība ir 4 MB.</li>\r\n<li><code>RequestSize</code> : Baitu skaits, ko mēģināt lasīt vienā HTTP pieprasījumā uz serveri. Noklusējuma vērtība ir 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcija ConcurrentRequests nodrošina ātrāku datu lejupielādi, norādot pieprasījumu skaitu, kas jāsniedz vienlaicīgi, izmantojot atmiņas izmantošanas izmaksas. Nepieciešamā atmiņa ir (ConcurrentRequest * RequestSize). Noklusējuma vērtība ir 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģisks (patiess/aplams), kas kontrolē, vai faili tiek atgriezti kokā, piemēram, direktorija skatā vai izplātā sarakstā. Noklusējuma vērtība ir FALSE.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Tiek atgriezta navigācijas tabula, kurā ir ietverti norādītajā Azure krātuves kontā atrastās tabulas.",
        "Documentation.LongDescription": "Atgriež navigācijas tabulu, kurā ir rinda katrai tabulai, kas atrasta konta vietrādī URL <code>account</code> no Azure krātuves seifa. Katrā rindā ir saite uz Azure tabulu. Lai norādītu papildu rekvizītus, var tikt nodrošināts neobligāts ieraksta parametrs <code>options</code>. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>Timeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms pamest servera pieprasījumu. Noklusējuma vērtība ir atkarīga no avota.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure laika sērijas ieskati"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight pakalpojumā AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Šī funkcija nav pieejama, jo tai ir nepieciešams komponents .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (mantots)",
        "Documentation.Caption": "Common Data Service (mantots)",
        "Documentation.LongDescription": "Izveidojiet savienojumu ar saviem datiem, kas tiek glabāti Common Data Service instancē (Dynamics 365 un PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Atgriež CSV dokumenta saturu kā tabulu.",
        "Documentation.LongDescription": "Atgriež CSV dokumenta saturu kā tabulu.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> var būt Null, kolonnu skaits, kolonnu nosaukumu saraksts, tabulas tips vai opciju ieraksts.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> var būt viena rakstzīme, rakstzīmju saraksts vai vērtība <code>\"\"</code>, kas norāda, ka rindas ir jāsadala ar secīgām atstarpes rakstzīmēm. Noklusējums: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Skatiet <code>ExtraValues.Type</code>, lai uzzinātu <code>extraValues</code> atbalstītās vērtības.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> norāda teksta kodējuma tipu.\r\n      </li>\r\n    </ul>\r\n\r\n    Ja ir norādīts <code>columns</code> ieraksts (un <code>delimiter</code>, <code>extraValues</code>, un <code>encoding</code> vērtība ir Null), var tikt norādīti tālāk minētie ierakstu lauki:\r\n    <ul>\r\n      <li>\r\n        <code>Atdalītājs</code>: kolonnu atdalītājs. Noklusējums: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Kolonnas</code>: var būt Null, kolonnu skaits, kolonnu nosaukumu saraksts vai tabulas tips. Ja kolonnu skaits ir mazāks nekā ievadē esošais skaitlis, papildu kolonnas tiek ignorētas. Ja kolonnu skaits ir lielāks nekā ievadē esošais skaitlis, papildu kolonnu vērtība ir Null. Ja skaits nav norādīts, kolonnu skaitu nosaka ievadē esošā vērtība.\r\n      </li>\r\n      <li>\r\n        <code>Kodējums</code>: faila teksta kodējums. Noklusējums: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: norāda, kā tiek lietotas pēdiņas.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (noklusējums):  laukā esošām pēdiņām nozīme ir tikai tad, ja tās atrodas uzreiz aiz atdalītāja.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: laukā esošām pēdiņām vienmēr ir nozīme neatkarīgi no to novietojuma.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: norāda, kā tiek apstrādāti rindiņu pārtraukumi ar pēdiņām.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (noklusējums): rindiņu pārtraukumi ar pēdiņām tiek apstrādāti kā daļa no datiem, nevis kā pašreizējās rindas beigas.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: visi rindiņu pārtraukumi tiek apstrādāti kā pašreizējās rindas beigas, pat ja tie ir daļa no pēdiņās esošas vērtības.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Apstrādājiet CSV tekstu ar kolonnu galvenēm.",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Atgriež tabulu, kas satur pieejamo dimensiju kopu.",
        "Documentation.LongDescription": "Atgriež tabulu, kas satur to dimensiju kopu, kas pieejamas šeit: <code>cube</code>. Katra dimensija ir tabula, kas satur dimensijas atribūtu kopu, un katrs dimensijas atribūts ir attēlots kā dimensijas tabulas kolonna. Dimensijas var izvērst kubā, izmantojot funkciju Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Atgriež ligzdotu koku ar tabulām, kurās attēlota objektu (piemēram, dimensiju un mēru) hierarhija parādāmajā mapē.",
        "Documentation.LongDescription": "Atgriež ligzdotu koku ar tabulām, kurās attēlota tādu objektu (piemēram, dimensiju un mēru) hierarhija parādāmajā mapē, kuri ir pieejami izmantošanai šeit: <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Atgriež tabulu ar pieejamo mēru rekvizītu, kas ir izvērsti kubā, kopu.",
        "Documentation.LongDescription": "Atgriež tabulu ar pieejamo rekvizītu kopu mēriem, kas ir izvērsti kubā.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Atgriež tabulu, kas satur pieejamo mēru kopu.",
        "Documentation.LongDescription": "Atgriež tabulu, kas satur to mēru kopu, kas pieejami šeit: <code>cube</code>.\r\n    Katrs mērs ir attēlots kā funkcija. Mērus var lietot kubam, izmantojot Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Atgriež tabulu, kurā iekļauta parametru kopa, ko var lietot kubam.",
        "Documentation.LongDescription": "Atgriež tabulu, kurā iekļauta parametru kopa, ko iespējams lietot vienumam <code>cube</code>. Katrs parametrs ir funkcija, kuru iespējams izsaukt, lai iegūtu <code>cube</code>, kam lietots parametrs un tā argumenti.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Atgriež tabulu ar pieejamo rekvizītu kopu dimensijām, kas ir izvērstas kubā.",
        "Documentation.LongDescription": "Atgriež tabulu ar pieejamo rekvizītu kopu dimensijām, kas ir izvērstas kubā.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Ievadiet sava Azure Data Lake Storage Gen1 konta vietrādi URL.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverta viena rinda katrai Azure Data Lake Storage Gen1 vietrādī <code>url</code> norādītajai mapei un failam. Katrā rindā ir ietverti mapes vai faila rekvizīti un saite uz tā saturu."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Ievadiet sava Azure Data Lake Storage konta vietrādi URL.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverta viena rinda katram Azure Data Lake Storage Gen1 vietrādī <code>url</code> norādītajam failam. Katrā rindā ir ietverti faila rekvizīti un saite uz tā saturu."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Ievadiet Azure Cosmos DB konta vietrādi URL.",
        "Documentation.LongDescription": "Tiek atgriezta tabula ar Azure Cosmos DB datu bāzēm, kas pieejamas vietrādī <code>url</code>. Ja ir norādīta datu bāze <code>database</code>, tiek atgriezta kolekciju tabula. Turklāt, ja ierakstā <code>options</code> ir norādīts lauks <code>Query</code>, tiek atgriezti norādītajā datu bāzē un/vai kolekcijā izpildītā vaicājuma rezultāti."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Ievadiet Dynamics 365 Central (lokālā) OData pakalpojuma galapunkta vietrādi URL.",
        "Documentation.DisplayName": "Dynamics 365 Business Central (on-premises)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (on-premises)",
        "Documentation.LongDescription": "Atgriež tabulu ar atbilstošiem Dynamics 365 Business Central (on-premises) datiem. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Ievadiet sava Dynamics NAV OData pakalpojuma galapunkta vietrādi URL.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Atgriež tabulu ar atbilstošiem datiem no risinājuma Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Atgriež kubus Essbase instancē, grupētus pēc Essbase servera.",
        "Documentation.LongDescription": "Atgriež tabulu ar kubiem, kas ir grupēti pēc Essbase servera no Essbase instances APS serverī <code>url</code>. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai kontrolētu šādas opcijas:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Atgriež Excel darbgrāmatas saturu.",
        "Documentation.LongDescription": "Atgriež Excel darbgrāmatas saturu.\r\n    <ul>\r\n     <li> <code>useHeaders</code> var būt Null, loģiska (true/false) vērtība, kas norāda, vai katras atgrieztās tabulas pirmā rinda ir jāuzskata par galveni, vai opciju ieraksts. Noklusējums: false.</li>\r\n     <li> <code>delayTypes</code> var būt Null vai loģiskā (true/false) vērtība, kas norāda, vai katras atgrieztās tabulas kolonnas ir jāatstāj bez tipa. Noklusējuma vērtība: false.</li>\r\n    </ul>\r\n\r\n    Ja parametram <code>useHeaders</code> ir norādīts ieraksts (un parametra <code>delayTypes</code> vērtība ir Null), var tikt nodrošināti šādi ieraksta lauki:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: var būt Null vai loģiska (true/false) vērtība, kas norāda, vai katras atgrieztās tabulas pirmā rinda ir jāuzskata par galveni. Noklusējums: false.</li>\r\n     <li> <code>DelayTypes</code>: var būt Null vai loģiska (true/false) vērtība, kas norāda, vai katras atgrieztās tabulas kolonnas ir jāatstāj bez tipa. Noklusējums: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: var būt Null vai loģiska (true/false) vērtība, kas norāda, vai darblapas apgabalam, kurā ir dati, ir jābūt izsecinātam, lasot pašu darblapu, nevis failā lasot dimensiju metadatus. Tas var būt noderīgi gadījumos, ja dimensiju metadati nav pareizi. Ņemiet vērā, ka šī opcija tiek atbalstīta tikai Open XML Excel failiem, bet ne mantotajiem Excel failiem. Noklusējuma vērtība: false. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Atgriežas uz Excel darbgrāmatas Lapas1 saturu.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietverti norādītajā mapē atrasto failu un mapju rekvizīti un saturs.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverta viena rinda katrai mapei un failam, kas atrasts mapē <code>path</code>. Katrā rindā ir ietverti mapes vai faila rekvizīti un saite uz to saturu. Parametrs <code>options</code> pašlaik ir paredzēts tikai iekšējai lietošanai.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietverti norādītajā mapē un tās apakšmapēs atrasto failu rekvizīti un saturs.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverta viena rinda katram failam, kas atrasts mapē <code>path</code> un visās tās apakšmapēs. Katrā rindā ir ietverti faila rekvizīti un saite uz to saturu. Parametrs <code>options</code> pašlaik ir paredzēts tikai iekšējai lietošanai.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Importēt datus no Google BigQuery datu bāzes, izmantojot Azure AD",
        "Documentation.LongDescription": "\r\n      Atgriež sarakstu tabulas veidā ar Google BigQuery pieejamajiem sarakstiem, izmantojot Azure AD <code>norēķinu projekta ID</code>. Neobligāts ieraksta parametrs, <code>opcijas</code>, var tikt definēts tālāk norādīto opciju pārvaldībai:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: laika periods, kas nosaka, cik ilgi ir jāgaida pirms savienojuma ar serveri izveides mēģinājuma atmešanas. Noklusējuma vertība ir ODBC savienojuma noildzes vērtība.</li>\r\n        <li><code>CommandTimeout</code>: laika periods, kas nosaka, cik ilgi tiek atļauts darboties pieprasījumam no servera puses pirms tā atcelšanas.</li>\r\n        <li><code>UseStorageApi</code>: norāda, vai izmantot BigQuery Storage API lielām rezultātu kopām. Noklusējuma vērtība ir true — izmantot Storage API. Iestatiet false, lai neizmantotu Storage API</li>\r\n        <li><code>AudienceUri</code>: šis ir auditorijas URI, ko ODBC draiveris var izmantot saviem marķieru apmaiņas pieprasījumiem. Šajā laukā ir jābūt norādītai pilnībā atbilstošai URI adresei (piem., //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread), kur pool_id ir globāli unikāls nosaukums, kas identificē darbaspēka kopu.</li>\r\n      </ul>\r\n    Ieraksta parametrs tiek norādīts kā [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Norādīt pieejamos projektus pakalpojumā Google BigQuery, izmantojot Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Sheets",
        "Documentation.Caption": "Google Sheets",
        "Documentation.Description": "Importē datus no GoogleSheets",
        "Documentation.LongDescription": "Importē datus no GoogleSheets"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Atgriež navigācijas tabulu ar konteineriem, kas atrasti norādītajā kontā no Azure krātuves akreditācijas datu komplekta.",
        "Documentation.LongDescription": "Atgriež navigācijas tabulu ar rindām par katru konteineri, kas atrasts, izmantojot konta vietrādi URL, <code>account</code>, no Azure krātuves akreditācijas datu komplekta. Katrā rindā ir saite uz konteinera BLOB failiem.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Atgriež navigācijas tabulu ar konteineriem, kas atrasti norādītajā kontā no Azure krātuves akreditācijas datu komplekta.",
        "Documentation.LongDescription": "Atgriež navigācijas tabulu ar rindām par katru konteineri, kas atrasts, izmantojot konta vietrādi URL, <code>account</code>, no Azure krātuves akreditācijas datu komplekta. Katrā rindā ir saite uz konteinera BLOB failiem.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietverti norādītajā Hadoop failu sistēmas mapē atrasto failu un mapju rekvizīti un saturs.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverta viena rinda atbilstoši katrai Hadoop failu sistēmas mapes vietrādī URL <code>url</code> norādītajai mapei un failam. Katrā rindā ir ietverti mapes vai faila rekvizīti un saite uz mapes vai faila saturu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietverti norādītajā Hadoop failu sistēmas mapē atrasto mapju un apakšmapju rekvizīti un saturs.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverta viena rinda atbilstoši katram Hadoop failu sistēmas mapes vietrādī URL <code>url</code> un tā apakšmapēs atrastajam failam. Katrā rindā ir ietverti faila rekvizīti un saite uz tā saturu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importē datus no Impala klastera.",
        "Documentation.LongDescription": "Importē datus Impala klastera <code>server</code>. Ja ports netika norādīts, tiks izmantots noklusējuma ports 21050.",
        "Documentation.Examples": [
          {
            "Description": "Norādītas Impala klasterī pieejamās tabulas.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Tiek importēti dati no Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Tiek importēti dati no Azure Data Explorer (Kusto) instances",
        "Documentation.Examples": [
          {
            "Description": "Atgriež Storm notikumu informācijas tabulu",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabula ar Storm notikumiem no datubāzes “Samples” (Paraugi), kas atrodas klasterī “help” (palīdzība)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Atgriež tabulu ar datiem no MailChimp galapunkta.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Izsauc MailChimp API un atgriež iegūto datu kopu tabulas veidā. Automātiski pārlapo visus rezultātus. Ja JSON atbildē saknes galapunkts un galvenais parametrs entityName nav atbilstoši, API galapunktiem var izmantot neobligātu parametru entityName.",
        "Documentation.Examples": [
          {
            "Description": "Atgādā tabulu ar datiem no MailChimp API sarakstu galapunkta.",
            "Code": "MailChimp.Collection(\"saraksti\")",
            "Result": "Tabula ar sarakstu datiem."
          },
          {
            "Description": "Izvelk tabulu ar datiem no MailChimp API kampaņas-mapju galapunkta.",
            "Code": "MailChimp.Collection(\"kampaņa-mapes\", \"mapes\")",
            "Result": "Tabula ar kampaņas-mapju datiem."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Atgriež neapstrādātu atbildi ar rezultātiem no MailChimp API galapunkta.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Izsauc MailChimp API un atgriež neapstrādātu atbildi.",
        "Documentation.Examples": [
          {
            "Description": "Attiecīgai kampaņai atgriež neapstrādātus datus no atskaitēm/datiem par klikšķiem no MailChimp API galapunkta.",
            "Code": "MailChimp.Instance(\"atskaites/{campaign_id}/dati par klikšķiem\")",
            "Result": "Attiecīgās kampaņas neapstrādāti dati par klikšķiem."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Nodrošiniet papildu vaicājumu funkcijas.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Nodrošiniet papildu vaicājumu funkcijas.",
        "Documentation.Examples": [
          {
            "Description": "Pieņemot, ka šodien ir 15.06.2017, iegūt kopsavilkumu datus starp 01.05.2017 un 15.06.2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija atgriezīs kopsavilkumu datus no 01.05.2017 līdz 15.06.2017"
          },
          {
            "Description": "Pieņemot, ka šodien ir 15.06.2017, iegūt 2017. gada aprīļa kopsavilkumu datus.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija atgriezīs datus starp 01.04.2017 un 30.04.2017"
          },
          {
            "Description": "Pieņemot, ka šodien ir 15.06.2017, iegūt kopsavilkumu datus no 2017. gada aprīļa līdz pašreizējam brīdim.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija atgriezīs datus starp 01.04.2017 un 15.06.2017"
          },
          {
            "Description": "Pieņemot, ka šodien ir 15.06.2017, iegūt kopsavilkumu datus no pagājušā gada decembra līdz šī gada februārim ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija atgriezīs datus starp 01.12.2016 un 28.02.2017"
          },
          {
            "Description": "Pieņemot, ka šodien ir 15.06.2017., iegūt maksas par tiešsaistes tirgu pēdējos 18 mēnešos",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija atgriezīs datus starp 01.12.2015 un 15.06.2017"
          },
          {
            "Description": "Pieņemot, ka šodien ir 15.06.2017, saņemt detalizētu informāciju par maksām 2017. gada jūnijā un 2017. gada maijā",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija atgriezīs datus starp 01.05.2017 un 15.06.2017"
          },
          {
            "Description": "Pieņemot, ka šodien ir 03.07.2017., saņemt detalizētu informāciju par maksām 2016. gada jūlijā ",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija atgriezīs datus par periodu no 01.07.2016. līdz 31.07.2016."
          },
          {
            "Description": "Pieņemot, ka šodien ir 13.07.2017, saņemt bilances kopsavilkumus par pēdējiem 10 mēnešiem un 13 dienām šajā mēnesī",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija atgriezīs datus starp 01.09.2016 un 13.07.2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Atgriež no ODBC datu avota tabulu ar SQL tabulām un skatiem. ",
        "Documentation.LongDescription": "Tiek atgriezta tabula ar SQL tabulām un skatiem no ODBC datu avota, ko norādīja savienojuma virkne <code>connectionString</code>. <code>connectionString</code> var būt teksts vai rekvizīta vērtību pāru ieraksts. Rekvizīta vērtības var būt teksts vai skaitlis. Lai norādītu papildu rekvizītus, var tikt norādīts ieraksta izvēles parametrs <code>options</code>. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir 15&#160;sekundes.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loģiskais operators (True/False), kas nosaka, vai izveidot ar SQL&#160;Server saderīgas savienojuma virknes opcijas, ko izmantot Windows autentifikācijas procesā. Noklusējuma vērtība ir True.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Atgrieziet SQL tabulas un skatus no nodrošinātās savienojuma virknes.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Atgriež no OLE DB datu avota tabulu ar SQL tabulām un skatiem.",
        "Documentation.LongDescription": "Tiek atgriezta SQL tabulu un skatu tabula, kura ir iegūta no savienojuma virknē <code>connectionString</code> norādītā OLE DB datu avota. Parametra <code>connectionString</code> vērtība var būt teksts vai rekvizītu vērtību pāru ieraksts. Rekvizītu vērtības var būt teksts vai skaitlis. Lai precizētu papildu rekvizītus, var norādīt neobligātu ieraksta parametru <code>options</code>. Ierakstā var ietvert tālāk norādītos laukus.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “true”).</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loģiskais operators (True/False), kas nosaka, vai izveidot ar SQL&#160;Server saderīgas savienojuma virknes opcijas, ko izmantot Windows autentifikācijas procesā. Noklusējuma vērtība ir True.</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...] vai [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Tiek atgriezta SQL tabulu un skatu tabula no Oracle datu bāzes.",
        "Documentation.LongDescription": "Atgriež tabulu ar SQL tabulām un skatiem no Oracle datu bāzes serverī <code>server</code>. Kopā ar serveri pēc izvēles var norādīt portu, atdalot to ar kolu. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk minētās opcijas.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...] vai [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Atgriež visas PDF failā atrastās tabulas.",
        "Documentation.LongDescription": "Atgriež visas tabulas, kas tika atrastas sadaļā <code>pdf</code>. Lai norādītu papildu rekvizītus, var nodrošināt neobligātu ieraksta parametru <code>options</code>. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>Implementation</code> : Tā algoritma versija, kas jāizmanto, identificējot tabulas. Vecās versijas ir pieejamas tikai atpakaļsaderības nodrošināšanai, lai novērstu veco vaicājumu nedarbošanos algoritmu atjaunināšanas dēļ. Jaunākajai versijai vienmēr būs vislabākie rezultāti. Derīgās vērtības ir &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot; vai nulle.</li>\r\n<li><code>StartPage</code> : Norāda lappušu diapazona pirmo pārbaudāmo lappusi. Noklusējuma vērtība ir&#160;1.</li>\r\n<li><code>EndPage</code> : Norāda lappušu diapazona pēdējo pārbaudāmo lappusi. Noklusējuma vērtība ir dokumenta pēdējā lappuse.</li>\r\n<li><code>MultiPageTables</code> : Nosaka to, vai līdzīgas tabulas secīgās lapās tiks automātiski apvienotas vienā tabulā. Noklusējuma vērtība ir True.</li>\r\n<li><code>EnforceBorderLines</code> : Nosaka to, vai apmales līnijas ir vienmēr tiek izmantotas kā šūnas robežas (ja vērtība ir True). Var izmantot arī kā vienu norādi no daudzām, lai noteiktu šūnas robežas (ja vērtība ir False). Noklusējuma vērtība ir False.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Notiek piekļūšana datiem",
        "Documentation.Examples": [
          {
            "Description": "Tiek atgrieztas tabulas, kas atrodas failā sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\:\\foosample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Ievadiet Planview Projectplace konta vietrādi URL.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Atgriež tabulu ar atbilstošiem Planview Projectplace datiem."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Ρỳťђσή śċřĭρť",
        "Documentation.Description": "Єжэĉύťёѕ Рўтĥбй ŝсřįþτ áňδ ŗ℮тŭѓñŝ ďáťд ƒгαmёś",
        "Documentation.Examples": {
          "Description": "Єжэĉύťёѕ Рўтĥбй ŝсřįþτ áňδ ŗ℮тŭѓñŝ ďáťд ƒгαmёś",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Ѓ ščгíρτ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Tiek atgriezta tabula, kuras katrā rindā ir norādīts ievades ieraksta lauka nosaukums un vērtība.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietvertas kolonnas <code>Name</code> un <code>Value</code> un viena rinda atbilstoši katram ieraksta <code>record</code> laukam.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet tabulu no ieraksta.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Atgriež paketes SAP HANA datu bāzē.",
        "Documentation.LongDescription": "Tiek atgriezta daudzdimensiju pakotņu tabula no SAP HANA datu bāzes <code>server</code>. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    <ul>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>Distribution</code> : SapHanaDistribution, kas nosaka rekvizīta “Izplatīšana” vērtību savienojuma virknē. Priekšrakstu maršrutēšana ir veids, kā novērtēt pareizo servera mezglu izplatītajai sistēmai pirms priekšraksta izpildes. Noklusējuma vērtība ir SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Norāda, kuru SAP Hana savienotāja implementāciju izmantot.</li>\r\n<li><code>EnableColumnBinding</code> : Ienesot datus, mainīgos saista SAP Hana rezultātu kopas kolonnām. Var uzlabot veiktspēju ar mazliet lielāku atmiņas lietojumu. Noklusējuma vērtība ir False.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir 15&#160;sekundes.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietverts SharePoint vietnes saturs.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverta viena rinda atbilstoši katrai mapei un dokumentam, kas atrasts norādītajā SharePoint vietnē <code>url</code>. Katrā rindā ir ietverti mapes vai faila rekvizīti un saite uz tā saturu. Var norādīt parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    <ul>\r\n<li><code>ApiVersion</code> : Skaitlis (14 vai 15) vai teksts “Auto”, kas norāda šai vietnei izmantojamo SharePoint&#160;API versiju. Ja šī vērtība nav norādīta, tiek izmantota API&#160;versija 14. Ja ir norādīta vērtība Auto, servera versija tiek noteikta automātiski, bet, ja tas nav iespējams, pēc noklusējuma tiek izmantota versija 14. SharePoint vietnēm, kas nav angļu valodā, nepieciešama vismaz versija 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietverti SharePoint vietnē esošie dokumenti.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverta viena rinda atbilstoši katram dokumentam, kas atrasts norādītajā SharePoint vietnē <code>url</code> un apakšmapēs. Katrā rindā ir ietverti mapes vai faila rekvizīti un saite uz tā saturu. Var norādīt parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    <ul>\r\n<li><code>ApiVersion</code> : Skaitlis (14 vai 15) vai teksts “Auto”, kas norāda šai vietnei izmantojamo SharePoint&#160;API versiju. Ja šī vērtība nav norādīta, tiek izmantota API&#160;versija 14. Ja ir norādīta vērtība Auto, servera versija tiek noteikta automātiski, bet, ja tas nav iespējams, pēc noklusējuma tiek izmantota versija 14. SharePoint vietnēm, kas nav angļu valodā, nepieciešama vismaz versija 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Atgriež tabulu, kurā ir ietverts SharePoint saraksta saturs.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverta viena rinda atbilstoši katram saraksta vienumam, kas atrasts norādītajā SharePoint sarakstā <code>url</code>. Katrā rindā ir ietverti saraksta rekvizīti. Var norādīt parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    <ul>\r\n<li><code>ApiVersion</code> : Skaitlis (14 vai 15) vai teksts “Auto”, kas norāda šai vietnei izmantojamo SharePoint&#160;API versiju. Ja šī vērtība nav norādīta, tiek izmantota API&#160;versija 14. Ja ir norādīta vērtība Auto, servera versija tiek noteikta automātiski, bet, ja tas nav iespējams, pēc noklusējuma tiek izmantota versija 14. SharePoint vietnēm, kas nav angļu valodā, nepieciešama vismaz versija 15.</li>\r\n<li><code>Implementation</code> : Neobligāti. Norāda, kuru SharePoint savienotāja versiju izmantot. Akceptētās vērtības ir &quot;2.0&quot; vai Null. Ja vērtība ir &quot;2.0&quot;, tiek izmantota SharePoint savienotāja 2.0 implementācija. Ja vērtība ir Null, tiek izmantota sākotnējā SharePoint savienotāja implementācija.</li>\r\n<li><code>ViewMode</code> : Neobligāti. Šī opcija ir derīga tikai 2.0 implementācijai. Pieņemtās vērtības ir &quot;Visi&quot; un &quot;Noklusējums&quot;. Ja vērtība nav norādīta, vērtība tiek iestatīta kā &quot;Visi&quot;. Ja ir norādīta vērtība &quot;Visi&quot;, skatā ir iekļautas visas lietotāja izveidotās un sistēmas definētās kolonnas. Ja ir norādīta vērtība &quot;Noklusējums&quot;, skats atbildīs tam, ko lietotājs redz, skatot sarakstu tiešsaistē neatkarīgi no tā, kurš lietotājs iestatījumos ir iestatījis kā &quot;Noklusējums&quot;. Ja lietotājs rediģē savu noklusējuma skatu, lai pievienotu vai noņemtu lietotāja izveidotas vai sistēmas definētas kolonnas vai izveido jaunu skatu un iestata to kā noklusējumu, šīs izmaiņas tiks izplatītas, izmantojot savienotāju.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Neļauj savienotājam piezīmju kolonnās izmantot atsevišķu galapunktu.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Tiek atgriezta tabula no satura norādītajā vietrādī URL, kas formatēta atbilstoši SODA 2.0 API.",
        "Documentation.LongDescription": "Tiek atgriezta tabula no satura norādītajā vietrādī URL <code>url</code>, kas formatēta atbilstoši SODA 2.0 API. Vietrādim URL ir jānorāda uz derīgu ar SODA saderīgu avotu, kura beigās ir paplašinājums .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Šo funkciju var izmantot, lai izsauktu jebkuru SparkPost API v1 piedāvāto saraksta galapunktu. Ja SparkPost API izsaukumiem tiek izmantota šī funkcija, ņemiet vērā, ka SparkPost API ir strikts API pieprasījumu saņemšanas biežuma ierobežojums. Ja no SparkPost servera tiek atgriezts statusa kods 429, tas nozīmē, ka tika sasniegts maksimālais atļautais pieprasījumu biežums. Lai veiktu jaunus izsaukumus, nedaudz uzgaidiet.",
        "Documentation.Examples": [
          {
            "Description": "Tiek atgriezta tabula ar vienu kolonnu, kas tiek aizpildīta ar datiem no viena SparkPost API v1 sarakstu galapunkta (papildinformāciju skatiet SparkPost dokumentācijā).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Tiek izgūtas iebūvētas tabulas, kas ir saistītas ar savienotāju SparkPost. Šajās tabulās tiek iekļauti dati, kas apkopoti, ņemot vērā lietotāja norādīto dienu skaitu. Ja šīs tabulas tiek atsvaidzinātas vai izsaukumi uz SparkPost API tiek veikti, izmantojot šo savienotāju, ņemiet vērā, ka SparkPost API ir strikts API pieprasījumu saņemšanas biežuma ierobežojums. Ja no SparkPost servera tiek atgriezts statusa kods 429, tas nozīmē, ka tika sasniegts maksimālais atļautais pieprasījumu biežums. Lai veiktu jaunus izsaukumus, nedaudz uzgaidiet. Izvēloties vērtību parametram Dienu skaits, jāņem vērā, ka API saglabā datus tikai par 6 mēnešiem."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietvertas SQL Server serverī esošās datu bāzes.",
        "Documentation.LongDescription": "Atgriež tabulu, kurā ir uzskaitītas norādītajā SQL serverī <code>server</code> esošās datu bāzes. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Skaitlis, kas iestata vaicājuma “maxdop” klauzulas vērtību ģenerētajā SQL vaicājumā.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n<li><code>MultiSubnetFailover</code> : Loģiskā funkcija (true/false), kura nosaka rekvizīta MultiSubnetFailover vērtību savienojuma virknē (noklusējuma vērtība ir “false”).</li>\r\n<li><code>UnsafeTypeConversions</code> : Loģiska (true/false) vērtība, kas, ja ir true, mēģina īsināt tipu pārvēršanas, kas varētu neizdoties un izraisīt visa vaicājuma kļūmi. Nav ieteicams vispārējai lietošanai.</li>\r\n<li><code>ContextInfo</code> : Binārā vērtība, kas tiek izmantota, lai iestatītu CONTEXT_INFO pirms katras komandas palaišanas.</li>\r\n<li><code>OmitSRID</code> : Loģiskā (true/false) vērtība, kura, ja tā ir true, izlaiž SRID, veidojot Well-Known Text no ģeometrijas un ģeogrāfijas tipiem.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Ja loģiskā (true/false) vērtība ir iestatīta kā Patiess, tā atļauj vaicājumu īsināšanas piekļuvi datu bāzēm tajā pašā serverī. Noklusējuma vērtība ir iestatīta kā aplams.</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...].\r\n    <br>\r\n    Netiek atbalstīta SQL vaicājuma iestatīšana, lai tas darbotos serverī. Lai izpildītu SQL vaicājumu, tā vietā jāizmanto komanda <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Šī funkcija izsauc Stripe API; ir pieejama iespēja ierobežot API izsaukumu skaitu.",
        "Documentation.LongDescription": "Šī funkcija izsauc pakalpojuma Stripe API adresē https://api.stripe.com/v1/<code>metode</code>, pieņemot neobligātu ierakstu <code>vaicājums</code> kā papildu parametrus un neobligātu vērtību <code>pageLimit</code> kā API pieprasījumu skaita ierobežojumu. Vispirms tiek atgriezti nesenākie dati. Ja netiek norādīta vērtība <code>pageLimit</code>, tiek atgriezti visi dati. Tiek izmantota pakalpojuma Stripe versija 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Šī funkcija atgriež visus datus par maksām",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Tabula, kurā norādīti visi pašreizējā Stripe konta dati par maksām"
          },
          {
            "Description": "Šī funkcija atgriež datus par maksām vienas lappuses apjomā",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Tabula, kurā norādīti pašreizējā Stripe konta pēdējie dati par maksām"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Tabula tiek ievietota atmiņas buferī, nodrošinot tās aizsardzību pret ārējām izmaiņām novērtēšanas laikā.",
        "Documentation.LongDescription": "Tabula tiek ievietota atmiņas buferī, novērtēšanas laikā izolējot to no ārējām izmaiņām.\r\n    Ievietošana buferī ir sekla. Tas liek novērtēt visas skalārās šūnas vērtības, taču atstāj neskalārās vērtības (ierakstus, sarakstus, tabulas un tā tālāk) tādas, kādas tās ir.\r\n    <br>\r\n    <br>\r\n    Ņemiet vērā, ka, izmantojot šo funkciju, vaicājumi, iespējams, var darboties ātrāk. Dažos gadījumos tas var palēnināt jūsu vaicājumu izpildi, jo rodas papildu \r\n    izmaksas par visu datu nolasīšanu un saglabāšanu atmiņā, kā arī tāpēc, ka ievietošana buferī novērš pakārtoto locīšanu. Ja datiem nav jābūt \r\n  buferī, bet jūs vienkārši vēlaties novērst tālāku datu locīšanu, tā vietā izmantojiet <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Ielādējiet atmiņā visas SQL tabulas rindas, lai neviena lejupstraumes operācija vairs nevarētu veikt vaicājumu SQL serverī.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Tiek atgriezta tabula, kas ir iegūta, apvienojot sarakstā ietvertās tabulas.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kas tiek iegūta, sapludinot tabulu sarakstu, <code>tables</code>. Iegūtās tabulas rindu struktūru nosaka <code>columns</code>, bet, ja “<code>columns</code>” vērtība nav norādīta, rindu struktūru nosaka ievades tipu apvienojums.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Sapludiniet visas trīs tabulas.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Varat sapludināt trīs tabulas ar dažādu struktūru.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Varat sapludināt divas tabulas un projicēt uz doto tipu.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Kolonnu virsraksti tiek pazemināti līdz pirmajai vērtību rindai.",
        "Documentation.LongDescription": "Kolonnu virsraksti (t.i., kolonnu nosaukumi) tiek pazemināti līdz pirmajai vērtību rindai. Pēc noklusējuma tiek lietoti šādi kolonnu nosaukumi: Column1, Column2 utt.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pazeminiet tabulas pirmo vērtību rindu.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "No tabulas tiek noņemti rindu dublikāti.",
        "Documentation.LongDescription": "Noņem rindu dublikātus no tabulas.\r\n    Neobligāts parametrs <code>equationCriteria</code>, kas norāda, kuras tabulas kolonnas tiek pārbaudītas, lai noteiktu dublikātus. Ja <code>equationCriteria</code> nav norādīts, tiek pārbaudītas visas kolonnas.<br>\r\n    <br>\r\n    Tā kā Power Query dažkārt pārlādē noteiktas operācijas aizmugursistēmas datu avotiem (pazīstamas kā “locīšana”), un dažkārt arī optimizē vaicājumus, \r\n    tādu darbību izlaišana, kas nav obligāti nepieciešamas, vispār nav garantijas, kas konkrēti dublikāti tiks saglabāti.\r\n    Piemēram, nevar pieņemt, ka pirmā rinda ar unikālu kolonnu vērtību kopu paliks, bet rindas tālāk tabulā tiks noņemtas.\r\n    Ja vēlaties, lai dublikāta noņemšana darbotos paredzami, vispirms buferējiet tabulu, izmantojot <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet no tabulas rindu dublikātus.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Noņemiet no tabulas <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code> rindu dublikātus, kas ir ietverti kolonnā [b].",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Tiek izveidota tabula no kolonnu saraksta un norādītajām vērtībām.",
        "Documentation.LongDescription": "Izveido tabulu ar tipu <code>columns</code> no saraksta <code>lists</code>, kas ietver ligzdotus sarakstus ar kolonnu nosaukumiem un vērtībām.\r\n    Ja atsevišķās kolonnās ir vairāk vērtību nekā citās, trūkstošās vērtības tiks aizpildītas ar noklusējuma vērtību Null, ja kolonnās var ietvert vērtību Null.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet tabulu no sarakstā esošo klientu vārdiem. Katra vērtība klientu saraksta vienībā kļūst par rindas vērtību, un katrs saraksts kļūst par kolonnu.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Izveidojiet tabulu no norādītā kolonnu saraksta un kolonnu nosaukumu saraksta.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Izveidojiet tabulu ar atšķirīgu kolonnu skaitu rindās. Trūkstošā rindas vērtība ir Null.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Saraksts tiek pārvērsts tabulā, lietojot norādīto sadalīšanas funkciju katram sarakstā ietvertajam vienumam.",
        "Documentation.LongDescription": "Saraksts <code>list</code> tiek pārvērsts tabulā, lietojot neobligātu sadalīšanas funkciju <code>splitter</code> katram sarakstā ietvertajam vienumam. Pēc noklusējuma saraksts tiek uzskatīts par komatatdalītu teksta vērtību sarakstu. Neobligāts <code>columns</code> var būt kolonnu skaits, kolonnu saraksts vai TableType. Var norādīt arī neobligātu <code>default</code> un <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Izveidot tabulu no saraksta, izmantojot noklusējuma sadalītāju.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Izveidot tabulu no saraksta, izmantojot pielāgotu sadalītāju.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Izveidot tabulu no saraksta, izmantojot sadalītāju Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Ierakstu saraksts tiek pārvērsts tabulā.",
        "Documentation.LongDescription": "Ierakstu saraksts <code>records</code> tiek pārvērsts tabulā.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Izveidot tabulu no ierakstiem, kā kolonnu nosaukumus izmantojot ierakstu lauku nosaukumus.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Izveidot tabulu no ierakstiem ar tipizētām kolonnām un atlasīt skaitlisko vērtību kolonnas.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Tiek izveidota tabula no rindu vērtību saraksta un neobligātām kolonnām.",
        "Documentation.LongDescription": "No saraksta <code>rows</code> tiek izveidota tabula, kurā katrs saraksta elements ir iekšējs saraksts, kurā ir ietvertas vienas rindas kolonnu vērtības. Elementam <code>columns</code> var tikt norādīts neobligāts kolonnu nosaukumu saraksts, tabulas tips vai kolonnu skaits.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Tiek izveidota tabula ar kolonnu [CustomerID] ar vērtībām {1, 2} un kolonnu [Name] ar vērtībām {\"Bob\", \"Jim\"}, un kolonna [Phone] ar vērtībām {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Tiek izveidota tabula ar kolonnu [CustomerID] ar vērtībām {1, 2} un kolonnu [Name] ar vērtībām {\"Bob\", \"Jim\"}, un kolonnu [Phone] ar vērtībām {\"123-4567\", \"987-6543\"}, kur [CustomerID] ir skaitlis, bet [Name] un [Phone] ir teksts.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Tiek izveidota tabula ar kolonnu no norādītās(-ajām) vērtības(-ām).",
        "Documentation.LongDescription": "Tiek izveidota tabula, kurā ir kolonna ar norādīto vērtību vai vērtību sarakstu, <code>value</code>. Var norādīt papildu ieraksta parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: kolonnas nosaukums, kas tiek izmantots, veidojot tabulu no saraksta vai skalāras vērtības.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet tabulu no 1. vērtības.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Izveidojiet tabulu no saraksta.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Izveidojiet tabulu no vērtības 1, izmantojot pielāgotu kolonnas nosaukumu.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Tiek atgriezta informācija par to, kā tabula ir sadalīta.",
        "Documentation.LongDescription": "Tiek atgriezta informācija par to, kā tabula ir sadalīta.  Tiek atgriezta tabula, kur katra kolonna ir nodalījuma kolonna sākotnējā tabulā un katra rinda atbilst nodalījumam sākotnējā tabulā.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Atgriež tabulas kolonnu profilu.",
        "Documentation.LongDescription": "<p>Atgriež <code>table</code> iekļauto kolonnu profilu.</p>\r\n<p>Katrai kolonnai (ja piemērojams) tiek atgriezta šāda informācija:\r\n<ul>\r\n  <li>minimums</li>\r\n  <li>maksimums</li>\r\n  <li>vidējais</li>\r\n  <li>standarta novirze</li>\r\n  <li>skaits</li>\r\n  <li>nedefinētu vērtību skaits</li>\r\n  <li>unikālu vērtību skaits</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Vērtību pirmā rinda tiek paaugstināta kā jauno kolonnu virsraksti (piemēram, kolonnu nosaukumi).",
        "Documentation.LongDescription": "Vērtību pirmā rinda tiek paaugstināta kā jauno kolonnu virsraksti (piemēram, kolonnu nosaukumi). Pēc noklusējuma uz galvenēm tiek paaugstinātas tikai teksta vai skaitliskās vērtības. Derīgas opcijas:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: ja iestatīts <code>true</code>, visas pirmajā rindā esošās skalārās vērtības uz gakvenēm tiek paaugstinātas, izmantojot opciju <code>Culture</code> (ja tāda pastāv (vai pašreizējā dokumenta lokalizācija).\r\n    Vērtībām, kuras nevar pārveidot par tekstu, tiks izmantots noklusējuma kolonnas nosaukums.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: kultūras nosaukums, kas norāda datu kultūru.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Paaugstiniet vērtību pirmo rindu tabulā.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Visas tabulas pirmajā rindā esošās skalārās vērtības paaugstina uz galvenēm.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Tiek atgriezta tabula ar pirmajām izlaistajām skaita rindām.",
        "Documentation.LongDescription": "Atgriež tabulu, kurā nav ietverts tabulas <code>table</code> pirmais norādītais rindu skaits <code>countOrCondition</code>.\r\n    Noņemto rindu skaits ir atkarīgs no neobligātā parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Ja <code>countOrCondition</code> nav norādīts, tiek noņemta tikai pirmā rinda. </li>\r\n    <li> Ja <code>countOrCondition</code> ir skaitlis, tiek noņemts attiecīgais rindu skaits (sākot no augšas). </li>\r\n    <li> Ja <code>countOrCondition</code> ir nosacījums, tiek noņemtas nosacījumam atbilstošās rindas, līdz rinda neatbilst nosacījumam.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet tabulas pirmo rindu.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Noņemiet tabulas pirmās divas rindas.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Noņemiet tabulas pirmās rindas, kur [CustomerID] <=2.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Tiek atgriezta tabula, kurā noņemtas pēdējās N rindas.",
        "Documentation.LongDescription": "Atgriež tabulu, kurā nav ietvertas tabulas <code>table</code> pēdējās <code>countOrCondition</code> rindas.\r\n        Noņemto rindu skaits ir atkarīgs no neobligātā parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Ja <code>countOrCondition</code> nav norādīts, tiek noņemta tikai pēdējā rinda. </li>\r\n    <li> Ja <code>countOrCondition</code> ir skaitlis, tiek noņemts attiecīgais rindu skaits (sākot no apakšas). </li>\r\n    <li> Ja <code>countOrCondition</code> ir nosacījums, tiek noņemtas nosacījumam atbilstošās rindas, līdz rinda neatbilst nosacījumam.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet tabulas pēdējo rindu.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Noņemiet tabulas pēdējās rindas, kur [CustomerID] > 2.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Tiek atgriezta tabula ar rindām, kas noņemtas no ievades tabulas, kurā ir kļūda vismaz vienā no šūnām. Ja ir norādīts kolonnu saraksts, tad kļūdas tiek pārbaudītas tikai šūnās, kas ir norādītajās kolonnās.",
        "Documentation.LongDescription": "Tiek atgriezta tabula ar rindām, kas noņemtas no ievades tabulas, kurā ir kļūda vismaz vienā no šūnām. Ja ir norādīts kolonnu saraksts, tad kļūdas tiek pārbaudītas tikai šūnās, kas ir norādītajās kolonnās.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Noņemt kļūdas vērtības no pirmās rindas.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Tiek atgriezta tabula ar rindām apgrieztā secībā.",
        "Documentation.LongDescription": "Tiek atgriezta tabula ar rindām no ievades <code>table</code> apgrieztā secībā.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Apgrieziet rindu secību tabulā.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Atgriež tabulu, kas satur norādītās tabulas kolonnu aprakstu (t.i., shēmu).",
        "Documentation.LongDescription": "<p>Atgriež tabulu, kurā sniegts <code>table</code> kolonnu apraksts.</p>\r\n<p>Katrā tabulas rindā ir aprakstīti <code>table</code> kolonnas rekvizīti:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Kolonnas nosaukums</b></td>\r\n    <td><b>Apraksts</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Kolonnas nosaukums.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td> <code>table</code>iekļautās kolonnas pozīcija, sākot skaitīt ar 0.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Kolonnas tipa nosaukums.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Kolonnas tipa veids.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Norāda, vai kolonnā drīkst būt ietvertas vērtības <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Skaitliskā bāze (piemēram, bāze 2, bāze 10) laukiem <code>NumericPrecision</code> un <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Skaitliskās kolonnas precizitāte ar bāzi, kas norādīta vienumā <code>NumericPrecisionBase</code>. Šis ir maksimālais ciparu skaits, kas var tikt attēlots ar šī tipa vērtību (ieskaitot ciparus aiz komata).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Skaitliskās kolonnas skala ar bāzi, kas norādīta vienumā <code>NumericPrecisionBase</code>. Šis ir ciparu skaits šī tipa vērtības daļā aiz komata. Vērtība <code>0</code> norāda uz fiksētu mērogu bez cipariem aiz komata. Vērtība <code>null</code> norāda, ka mērogs nav zināms (tāpēc, ka tas ir peldošs vai nav definēts).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Maksimālais aiz komata esošo ciparu skaits, kāds tiek atbalstīts datuma vai laika vērtības sekunžu daļā.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Maksimālais rakstzīmju skaits, kāds tiek atļauts kolonnā ar tipu <code>text</code> (teksts), vai maksimālais baitu skaits, kāds tiek atļauts kolonnā ar tipu <code>binary</code> (bināra).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Norāda, vai šīs kolonnas garums var būt dažāds (līdz vērtībai <code>MaxLength</code>) vai tās lielums ir fiksēts.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Kolonnas tipa nosaukums avota vietējā tipu sistēmā (piemēram, <code>nvarchar</code> sistēmai SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Noklusējuma izteiksme šīs kolonnas vērtībai avota vietējā izteiksmju valodā (piemēram, <code>42</code> vai <code>newid()</code> sistēmai SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Kolonnas apraksts.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Tiek atgriezta tabula tikai ar tām ievades tabulas rindām, kas ietver kļūdu vismaz vienā no šūnām. Ja ir norādīts kolonnu saraksts, tad kļūdas tiek pārbaudītas tikai šūnās, kas ir norādītajās kolonnās.",
        "Documentation.LongDescription": "Tiek atgriezta tabula tikai ar tām ievades tabulas rindām, kas ietver kļūdu vismaz vienā no šūnām. Ja ir norādīts kolonnu saraksts, tad kļūdas tiek pārbaudītas tikai šūnās, kas ir norādītajās kolonnās.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atlasīt to klientu vārdus, kuriem atbilstošajās rindās ir kļūdas.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Tiek atgriezta tabula ar pirmajām izlaistajām skaita rindām.",
        "Documentation.LongDescription": "Atgriež tabulu, kurā nav ietverts tabulas <code>table</code> pirmais norādītais rindu skaits <code>countOrCondition</code>.\r\n    Izlaisto rindu skaits ir atkarīgs no neobligātā parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Ja <code>countOrCondition</code> nav norādīts, tiek izlaista tikai pirmā rinda. </li>\r\n    <li> Ja <code>countOrCondition</code> ir skaitlis, tiek izlaists attiecīgais rindu skaits (sākot no augšas). </li>\r\n    <li> Ja <code>countOrCondition</code> ir nosacījums, tiek izlaistas nosacījumam atbilstošās rindas, līdz rinda neatbilst nosacījumam.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Izlaidiet tabulas pirmo rindu.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Izlaidiet tabulas pirmās divas rindas.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Izlaidiet tabulas pirmās rindas, kur [Price] > 25.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Neļauj jebkādu lejupstraumes darbību palaišanu pret oriģinālo datu avotu.",
        "Documentation.LongDescription": "Neļauj jebkādu lejupstraumes darbību palaišanu pret oriģinālo datu avotu līdzeklī <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Ienes datus no SQL tabulas veidā, kas neļauj lejupstraumes darbības palaist kā pieprasījumu SQL serverī.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Kolonnas tiek pārvērstas rindās un rindas tiek pārvērstas kolonnās.",
        "Documentation.LongDescription": "Kolonnas tiek pārvērstas rindās un rindas tiek pārvērstas kolonnās.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pārvērtiet nosaukumu vērtību pāru tabulas rindas par kolonnām.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Iegūst tabulu kopas relācijas.",
        "Documentation.LongDescription": "Iegūst tabulu kopas relācijas. Tiek uzskatīts, ka kopas <code>tables</code> struktūra ir līdzīga navigācijas tabulā ietvertās kopas struktūrai. Kopā <code>dataColumn</code> definētajā kolonnā ir ietvertas faktiskās datu tabulas.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Tiek atgriezta SQL tabulu un skatu tabula no Teradata datu bāzes.",
        "Documentation.LongDescription": "Atgriež servera <code>server</code> Teradata datu bāzē pieejamo SQL tabulu un skatu tabulu. Kopā ar serveri pēc izvēles var norādīt portu, atdalot to ar kolu. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk minētās opcijas.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...] vai [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure laika sērijas ieskati"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Ievadiet to mēnešu skaitu, no kuriem izgūt vēsturiskos Twilio datus.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Atgriež tabulu ar atbilstošiem Twilio datiem."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Atgriež tabulu ar kolonnu aprakstu (t. i., shēmu) ar norādīto tabulas tipu.",
        "Documentation.LongDescription": "<p>Atgriež tabulu, kurā aprakstītas <code>tableType</code> kolonnas.</p>\r\n<p>Iegūtās tabulas aprakstu skatiet <code>Table.Schema</code> dokumentācijā.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps pakalpojumu plūsma",
        "Documentation.DisplayName": "Azure DevOps pakalpojumu plūsma",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Tiek atgriezta Azure DevOps nodrošinātā OData plūsmu tabula."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Savienojuma izveide ar Viva ieskatu datiem",
        "Documentation.LongDescription": "Importēt nedēļas metriku un atribūtu datus no Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Atgriež tabulu ar redzamiem atribūtiem un nedēļas metriku katram nodalījumā mērītajam darbiniekam.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "advancedParameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Tiek atgriezts tā HTML dokumenta saturs, kas ir sadalīts tā saistītajās struktūrās, kā arī kā pilna dokumenta atveidojums un tā teksts pēc tagu noņemšanas.",
        "Documentation.LongDescription": "Tiek atgriezts tā HTML dokumenta saturs, kas ir sadalīts tā saistītajās struktūrās, kā arī kā pilna dokumenta atveidojums un tā teksts pēc tagu noņemšanas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Atgriež tabulu ar galveno Webtrends metriku.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Izsauc Webtrends galapunktu KeyMetrics un atgriež visus datus tabulas formā.",
        "Documentation.Examples": [
          {
            "Description": "Atgādā tabulu, kurā norādīta nomnieka 98765 galvenā metrika pēdējās 30 dienās",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Galvenās metrikas tabula"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Ievadiet ar Webtrends kontu saistīto profila ID.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Atgriež tabulu ar atbilstošiem datiem no risinājuma Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Savienojuma izveide ar Viva ieskatu datiem",
        "Documentation.LongDescription": "Importēt nedēļas metriku un atribūtu datus no Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Atgriež tabulu ar redzamiem atribūtiem un nedēļas metriku katram nodalījumā mērītajam darbiniekam.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Tiek atgriezts XML dokumenta saturs kā hierarhijas tabula.",
        "Documentation.LongDescription": "Tiek atgriezts XML dokumenta saturs kā hierarhijas tabula.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Tiek atgriezts XML dokumenta saturs kā izplātu tabulu ligzdota kolekcija.",
        "Documentation.LongDescription": "Tiek atgriezts XML dokumenta saturs kā izplātu tabulu ligzdota kolekcija.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Izgūstiet lokāla xml faila saturu.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Ievadiet Zendesk konta vietrādi URL.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Atgriež tabulu ar attiecīgajiem Zendesk datiem."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Atgriež ADO.NET datu avota shēmu kolekciju.",
        "Documentation.LongDescription": "Tiek atgriezta ADO.NET datu avota shēmu kolekcija ar nodrošinātāja nosaukumu <code>providerName</code> un savienojuma virkni <code>connectionString</code>. <code>connectionString</code> var būt teksts vai rekvizīta vērtību pāru ieraksts. Rekvizīta vērtības var būt teksts vai skaitlis. Lai norādītu papildu rekvizītus, var tikt norādīts ieraksta izvēles parametrs <code>options</code>. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loģiskais operators (True/False), kas nosaka, vai izveidot ar SQL&#160;Server saderīgas savienojuma virknes opcijas, ko izmantot Windows autentifikācijas procesā. Noklusējuma vērtība ir True.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (beta)",
        "Documentation.Description": "Importējiet datus no Amazon Redshift datu bāzes.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā uzskaitītas tabulas Amazon Redshift klasterī <code>server</code> datu bāzē <code>database</code>. Var norādīt neobligātu ieraksta parametru, <code>opcijas</code>, lai kontrolētu šādas opcijas:\r\n<ul>\r\n<li><code>Provider Name</code>: teksta vērtība, kas savienojumam jāizmanto kā nodrošinātāja nosaukums. To lieto, izmantojot Microsoft Authentication.</li>\r\n<li><code>Batch Size</code>: rindu skaits, kas tiek ienestas vienā servera izsaukumā.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietverti daudzdimensiju kubi vai tabulveida modeļi no analīzes pakalpojumu datu bāzes.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietverti daudzdimensiju kubi vai tabulveida modeļi no analīzes pakalpojumu datu bāzes <code>database</code> serverī <code>server</code>. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    <ul>\r\n<li><code>Query</code> : Iekšējs MDX vaicājums, ko izmanto datu izgūšanai.</li>\r\n<li><code>TypedMeasureColumns</code> : Loģiska vērtība, kas norāda, vai daudzdimensiju vai tabulveida modelī norādītie veidi tiks izmantoti pievienotajām mēru kolonnām. Ja ir iestatīta vērtība “false”, visām mēru kolonnām tiks izmantots veids “number”. Šīs opcijas noklusējuma vērtība ir “false”.</li>\r\n<li><code>Culture</code> : Kultūras nosaukums, kas norāda datu kultūru. Šī vērtība atbilst savienojuma virknes rekvizītam Lokālais identifikators.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>SubQueries</code> : Skaitlis (0, 1 vai 2), ar kuru tiek iestatīta rekvizīta SubQueries vērtība savienojuma virknē. Tas nodrošina aprēķināto elementu darbības pārvaldību apakšatlasēs un apakškubos. (Noklusējuma vērtība ir&#160;2.)</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietvertas Spark klasterī esošās tabulas.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietvertas parametrā <code>host</code> norādītajā Spark klasterī ietvertās tabulas, izmantojot parametrā <code>protocol</code> norādīto protokolu. Derīgie protokoli ir:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Tiek atgriezta tabula, kurā ir ietvertas Spark klasterī esošās tabulas.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Ievadiet organizācijas un projekta nosaukumu.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (tikai paneļi)",
        "Documentation.LongDescription": "Tiek atgriezta Azure DevOps nodrošinātā Analytics skatu tabula."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Importējiet datus no HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nTiek atgriezts HDInsight Interactive Query tabulu saraksts, kurš norādīts HDInsight Interactive Query serverī <code>server</code> esošajā datu bāzē <code>database</code>. Kopā ar serveri pēc izvēles var norādīt porta numuru, atdalot to ar kolu. Var norādīt neobligātu parametru <code>options</code>, lai pārvaldītu tālāk norādītās opcijas.\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: ilgums, kas tiek izmantots, lai pārvaldītu, cik ilgi jāgaida, pirms tiek atmests mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n        <li><code>CommandTimeout</code>: ilgums, kas tiek izmantots, lai pārvaldītu, cik ilgi drīkst izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n</ul>\r\nParametrs <code>options</code> tiek norādīts šādi: [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Tiek atgriezta tabula ar kolonnām, kas līdzeklī Common Data Model ir kartētas atbilstoši elementa atribūtiem, tostarp datu tipiem.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Tiek atgriezta tabula ar kolonnām, kas līdzeklī Common Data Model ir kartētas atbilstoši elementa atribūtiem, tostarp datu tipiem. Ja elementa definīcijas kolonnas netiks kartētas, tās tiks pievienotas, un jebkuras nekartētās kolonnas tiks noņemtas.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "Retrieve all pages of data",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Atgriež kubu pēc parametra lietošanas.",
        "Documentation.LongDescription": "Atgriež kubu pēc <code>parameter</code> ar <code>arguments</code> lietošanas vienumam <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Maina kuba filtra konteksta dimensiju granularitāti, sakļaujot norādītajām kolonnām kartētos atribūtus.",
        "Documentation.LongDescription": "Maina <code>cube</code> filtra konteksta dimensiju granularitāti, sakļaujot norādītajām kolonnām <code>columnNames</code> kartētos atribūtus. Kolonnas arī tiek noņemtas no kuba tabulveida skata.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Aizstāj dimensiju kopu, ko atgrieza cube.Dimensions.",
        "Documentation.LongDescription": "Aizstāj dimensiju kopu, ko atgrieza <code>Cube.Dimensions</code>.\r\n    Piemēram, šo funkciju var izmantot, lai dimensijas atribūtam pievienotu ID kolonnu, lai datu avots varētu grupēt pēc ID, nevis parādītās vērtības.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Paredzēts kuba funkciju sarakstam.",
        "Documentation.LongDescription": "Paredzēts kuba funkciju sarakstam <code>transforms</code>, kas pieejams šeit: <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Tiek atgriezta DB2 datu bāzē pieejamo SQL tabulu un skatu tabula.",
        "Documentation.LongDescription": "Tiek atgriezta servera <code>server</code> DB2 datu bāzē pieejamo SQL tabulu un skatu tabula datu bāzes instancē <code>database</code>. Kopā ar serveri pēc izvēles var norādīt portu, atdalot to ar kolu. Lai pārvaldītu tālāk minētās opcijas, var norādīt neobligātu ieraksta parametru <code>options</code>. \r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n<li><code>Implementation</code> : Norāda, kura iekšējās datu bāzes nodrošinātāja implementācija jāizmanto. Derīgās vērtības ir “IBM” un “Microsoft”.</li>\r\n<li><code>BinaryCodePage</code> : Skaitlis, kas tiek izmantots CCSID (Coded Character Set Identifier&#160;— kodēto rakstzīmju kopas identifikators), ko izmanto, lai dekodētu DB2&#160;FOR&#160;BIT bināros datus uz rakstzīmju virknēm. Ir spēkā tad, ja parametra Implementation vērtība ir Microsoft. Lai atspējotu konvertēšanu, iestatiet vērtību&#160;0 (noklusējuma vērtība). Lai konvertētu, pamatojoties uz datu bāzes kodējumu, iestatiet vērtību&#160;1. Lai konvertētu uz lietojumprogrammas kodējumu, iestatiet citu CCSID&#160;skaitli.</li>\r\n<li><code>PackageCollection</code> : Norāda pakotņu kolekcijas virknes vērtību (noklusējuma vērtība ir NULLID), lai iespējotu koplietoto pakotņu lietošanu, kas nepieciešama SQL priekšrakstu apstrādāšanai. Ir spēkā tad, ja parametra Implementation vērtība ir Microsoft.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Norāda, vai savienojums tiek veidots, izmantojot DB2&#160;Connect vārteju. Spēkā tad, ja lauka “Ieviešana” vērtība ir “Microsoft”.</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts šādi: [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Izgūst Data.World datu kopu"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Atgriež tabulu ar to BLOB failu rekvizītiem un saturu, kas atrasti norādītajā konteinerā no Azure krātuves akreditācijas datu komplekta.",
        "Documentation.LongDescription": "Atgriež tabulu ar rindām par katru BLOB failu, kas atrasts, izmantojot konteinera vietrādi URL, <code>account</code>, no Azure krātuves akreditācijas datu komplekta. Katrā rindā ir faila rekvizīti un saite uz tā saturu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Atgriež tabulu, kurā ir ietverti norādīto CSS atlasītāju palaišanas rezultāti norādītajā HTML.",
        "Documentation.LongDescription": "Atgriež tabulu, kas satur rezultātus, kuri iegūti, palaižot norādītos CSS atlasītājus nodrošinātajā parametrā <code>html</code>. Lai norādītu papildu rekvizītus, var tikt nodrošināts neobligāts ieraksta parametrs <code>options</code>. Ieraksts var saturēt šādus laukus:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n",
        "Documentation.Category": "Piekļuve datiem",
        "Documentation.Examples": [
          {
            "Description": "Atgriež tabulu no HTML teksta parauga vērtības.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Izvelk visus HREF atribūtus no HTML teksta vērtības parauga.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Tests</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Atgriež tabulu ar Informix datu bāzē pieejamajām SQL tabulām un skatiem.",
        "Documentation.LongDescription": "Atgriež servera <code>server</code> Informix datu bāzē pieejamo SQL tabulu un skatu tabulu datu bāzes instancē <code>database</code>. Kopā ar serveri pēc izvēles var norādīt portu, atdalot to ar kolu. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk minētās opcijas.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...] vai [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Šī funkcija atgriež tabulu ar informāciju par potenciālajiem klientiem.",
        "Documentation.LongDescription": "Šī funkcija izsauc Marketo REST API galapunktu adresē <code>URL</code>/rest/v1/leads.json. Tiek atgriezti visi potenciālie klienti sarakstā <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Šī funkcija atgādā detalizētu informāciju par trim potenciālajiem klientiem",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Tabula ar detalizētu informāciju par norādītajiem potenciālajiem klientiem"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Ievadiet tā Marketo REST API galapunkta vietrādi URL, kas ir saistīts ar jūsu kontu.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Šī funkcija atgriež tabulu, kurā norādīti attiecīgi dati no pakalpojuma Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Tiek atgriezta MySQL datu bāzē pieejamo SQL tabulu, skatu un saglabāto skalāro funkciju tabula.",
        "Documentation.LongDescription": "Atgriež servera <code>server</code>MySQL datu bāzē pieejamo SQL tabulu, skatu un iekļauto skalāro funkciju tabulu datu bāzes instancē <code>database</code>. Kopā ar serveri pēc izvēles var norādīt portu, atdalot to ar kolu. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk minētās opcijas.\r\n    <ul>\r\n<li><code>Encoding</code> : TextEncoding vērtība, kas norāda rakstzīmju kopu, ko izmanto, lai šifrētu visus uz serveri nosūtītos vaicājumus (noklusējuma vērtība ir Null).</li>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Loģiskā funkcija (true/false), kura nosaka, vai tipa tinyint kolonnas serverī ir jāapstrādā kā loģiskās vērtības. Noklusējuma vērtība ir “true”.</li>\r\n<li><code>OldGuids</code> : Loģiskā funkcija (true/false), kura nosaka, vai kā GUID objektus apstrādāt tipa char(36) kolonnas (ja vērtība ir “false”) vai tipa binary(16) kolonnas (ja vērtība ir “true”). Noklusējuma vērtība ir “false”.</li>\r\n<li><code>ReturnSingleDatabase</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāatgriež visu datu bāzu visas tabulas (ja vērtība ir “false”) vai norādītās datu bāzes tabulas un skati (ja vērtība ir “true”). Noklusējuma vērtība ir “false”.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...] vai [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Importēt datus no IBM Netezza datu bāzes.",
        "Documentation.LongDescription": "\r\nTiek atgrieztas Netezza tabulas, skati un saglabātās funkcijas no serverī <code>server</code> esošās Netezza servera datubāzes <code>database</code>. Kopā ar serveri pēc izvēles var norādīt pieslēgvietu, atdalot to ar kolu. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk norādītās opcijas.\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: loģiskā vērtība (true/false), kas nosaka, vai ir jāģenerē atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir false).</li>\r\n        <li><code>HierarchicalNavigation</code>: loģiskā vērtība (true/false), kura nosaka, vai tabulas ir jāskata, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir false).</li>\r\n        <li><code>ConnectionTimeout</code>: ilgums, kas tiek izmantots, lai pārvaldītu, cik ilgi jāgaida, pirms tiek atmests mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n        <li><code>CommandTimeout</code>: ilgums, kas tiek izmantots, lai pārvaldītu, cik ilgi drīkst izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>NormalizeDatabaseName</code>: loģiskā vērtība (true/false), kas iestata to, vai normalizēt datu bāzes nosaukumu, izmantojot lielos burtus, vai interpretēt to burtiski (noklusējuma vērtība ir true).</li>\r\n</ul>\r\nIeraksta parametrs tiek norādīts šādi: [opcija1 = vērtība1, opcija2= vērtība2...].",
        "Documentation.Examples": [
          {
            "Description": "Norādīt IBM Netezza projektā iekļautās tabulas.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Atgriež rezultātu, kas iegūts, palaižot iekšēju vaicājumu ODBC datu avotā.",
        "Documentation.LongDescription": "Izmantojot ODBC, tiek atgriezts <code>query</code> palaišanas rezultāts ar savienojuma virkni <code>connectionString</code>. <code>connectionString</code> var būt teksts vai rekvizīta vērtību pāru ieraksts. Rekvizīta vērtības var būt teksts vai skaitlis. Lai norādītu papildu rekvizītus, var tikt norādīts ieraksta izvēles parametrs <code>options</code>. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir 15&#160;sekundes.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loģiskais operators (True/False), kas nosaka, vai izveidot ar SQL&#160;Server saderīgas savienojuma virknes opcijas, ko izmantot Windows autentifikācijas procesā. Noklusējuma vērtība ir True.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Tiek atgriezts rezultāts, kas iegūts, izpildot vienkāršu vaicājumu ar norādīto savienojuma virkni.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Atgriež rezultātu, kas iegūts, palaižot iekšēju vaicājumu OLE DB datu avotā.",
        "Documentation.LongDescription": "Izmantojot OLE DB, tiek atgriezts <code>query</code> palaišanas rezultāts ar savienojuma virkni <code>connectionString</code>. <code>connectionString</code> var būt teksts vai rekvizīta vērtību pāru ieraksts. Rekvizīta vērtības var būt teksts vai skaitlis. Lai norādītu papildu rekvizītus, var tikt norādīts ieraksta izvēles parametrs <code>options</code>. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loģiskais operators (True/False), kas nosaka, vai izveidot ar SQL&#160;Server saderīgas savienojuma virknes opcijas, ko izmantot Windows autentifikācijas procesā. Noklusējuma vērtība ir True.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Tiek atgriezta PostgreSQL datu bāzē pieejamo SQL tabulu un skatu tabula.",
        "Documentation.LongDescription": "Atgriež servera <code>server</code> PostgreSQL datu bāzē pieejamo SQL tabulu un skatu tabulu datu bāzes instancē <code>database</code>. Kopā ar serveri pēc izvēles var norādīt portu, atdalot to ar kolu. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk minētās opcijas.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...] vai [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Importēt datus no Snowflake Computing noliktavas.",
        "Documentation.LongDescription": "Atgriež tabulu, kurā ir norādītas Snowflake Computing <code>noliktavas</code> tabulas, kas atrodas <code>serverī</code>. Var norādīt papildu ieraksta parametru <code>opcijas</code>, lai pārvaldītu šādas opcijas:\r\n<ul>\r\n<li><code>Role</code>: teksta vērtība, ko izmantot kā lomas nosaukumu savienojumam.</li>\r\n<li><code>CreateNavigationProperties</code>: loģiskā vērtība (true/false), kas nosaka, vai atgrieztajām vērtībām ģenerēt navigācijas rekvizītus (noklusējuma vērtība ir true).</li>\r\n<li><code>ConnectionTimeout</code>: ilgums sekundēs, cik ilgi gaidīt tīkla atbildes no Snowflake.</li>\r\n<li><code>CommandTimeout</code>: ilgums sekundēs, cik ilgi gaidīt vaicājuma izpildi.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Uzskaitīt Snowflake noliktavā ietvertās tabulas.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Tiek atgriezta tabula, kurā ir ietvertas Spark klasterī esošās tabulas.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietvertas parametrā <code>host</code> norādītajā Spark klasterī ietvertās tabulas, izmantojot parametrā <code>protocol</code> norādīto protokolu. Derīgie protokoli ir:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Skatīt Azure Spark instancē esošās tabulas.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Tiek atgriezta SQL tabulu, skatu un saglabāto funkciju tabula no SQL Server datu bāzes.",
        "Documentation.LongDescription": "Atgriež servera <code>server</code> SQL Server datu bāzē <code>database</code> pieejamo SQL tabulu, skatu un iekļauto funkciju tabulu. Kopā ar serveri pēc izvēles var norādīt portu, atdalot to ar kolu vai komatu. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk minētās opcijas.\r\n    <ul>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Skaitlis, kas iestata vaicājuma “maxdop” klauzulas vērtību ģenerētajā SQL vaicājumā.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n<li><code>MultiSubnetFailover</code> : Loģiskā funkcija (true/false), kura nosaka rekvizīta MultiSubnetFailover vērtību savienojuma virknē (noklusējuma vērtība ir “false”).</li>\r\n<li><code>UnsafeTypeConversions</code> : Loģiska (true/false) vērtība, kas, ja ir true, mēģina īsināt tipu pārvēršanas, kas varētu neizdoties un izraisīt visa vaicājuma kļūmi. Nav ieteicams vispārējai lietošanai.</li>\r\n<li><code>ContextInfo</code> : Binārā vērtība, kas tiek izmantota, lai iestatītu CONTEXT_INFO pirms katras komandas palaišanas.</li>\r\n<li><code>OmitSRID</code> : Loģiskā (true/false) vērtība, kura, ja tā ir true, izlaiž SRID, veidojot Well-Known Text no ģeometrijas un ģeogrāfijas tipiem.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Ja loģiskā (true/false) vērtība ir iestatīta kā Patiess, tā atļauj vaicājumu īsināšanas piekļuvi datu bāzēm tajā pašā serverī. Noklusējuma vērtība ir iestatīta kā aplams.</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...] vai [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Atgriež tabulu, kur apkopotas Sybase datu bāzē pieejamās SQL tabulas un skati.",
        "Documentation.LongDescription": "Atgriež servera <code>server</code> Sybase datu bāzē pieejamo SQL tabulu un skatu tabulu datu bāzes instancē <code>database</code>. Kopā ar serveri pēc izvēles var norādīt portu, atdalot to ar kolu. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk minētās opcijas.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “true”).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, ko izmanto navigācijas rekvizītu nosaukumu izveidē.</li>\r\n<li><code>Query</code> : Iekšējs SQL vaicājums, ko izmanto datu izgūšanai. Ja vaicājumam ir vairākas rezultātu kopas, tiek atgriezta tikai pirmā.</li>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>ConnectionTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms tiek atcelts mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n</ul>\r\n\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...] vai [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Tiek pievienota kolonna, kurā ir ietvertas konkrētas pozīciju vērtības.",
        "Documentation.LongDescription": "Tabulai <code>table</code> tiek pievienota kolonna ar nosaukumu <code>newColumnName</code>, kurā ir ietvertas konkrētas pozīciju vērtības.\r\n    Varat norādīt papildu sākotnējā indeksa vērtību <code>initialValue</code>. Varat norādīt papildu vērtību <code>increment</code>, lai noteiktu katras indeksa vērtības palielinājumu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet tabulai indeksa kolonnu ar nosaukumu \"Index\".",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Pievienojiet tabulai indeksa kolonnu ar nosaukumu \"index\", kuras pirmā vērtība ir 10 un katra nākamā vērtība ir palielināta par 5.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Ņemot vērā tabulā sniegto sarakstu kolonnu, izveidojiet rindas kopiju katrai vērtībai tās sarakstā.",
        "Documentation.LongDescription": "Ja norādīts <code>table</code>, kur <code>column</code> ir vērtību saraksts, saraksts tiek sadalīts rindā katrai vērtībai. Citās kolonnās ietvertās vērtības tiek dublētas katrā jaunizveidotajā rindā.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Sadaliet sarakstu kolonnu [Name] tabulā.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Iepriekšējās šūnas vērtība tiek izplatīta uz zemāk esošajām kolonnas šūnām ar vērtību Null.",
        "Documentation.LongDescription": "Tiek atgriezta tabula no norādītās <code>table</code>, kur iepriekšējās šūnas vērtība tiek izplatīta uz tālāk norādītajām šūnām ar vērtību Null norādītajā <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tiek atgriezta tabula ar Null vērtībām kolonnā [Place], kas aizpildīta ar vērtību, kas norādīta iepriekš par vērtību no tabulas.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Šūnas vērtība tiek izplatīta uz iepriekšējām kolonnas šūnām ar vērtību Null.",
        "Documentation.LongDescription": "Tiek atgriezta tabula no norādītās <code>table</code>, kur nākamās šūnas vērtība tiek izplatīta uz iepriekš norādītajām šūnām ar vērtību Null norādītajā <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tiek atgriezta tabula ar Null vērtībām kolonnā [Column2], kas aizpildīta ar vērtību, kas norādīta zemāk par vērtību no tabulas.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Tiek atgrieztas visas rindas, kas ietver tabulā norādīto tekstu.",
        "Documentation.LongDescription": "Tiek atgrieztas tās tabulas <code>table</code> rindas, kas ietver tekstu <code>text</code>. Ja teksts netiek atrasts, tiek atgriezta tukša tabula.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet tās tabulas rindas, kas ietver \"Bob\".",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Tiek atgrieztas norādītās pirmās skaita rindas.",
        "Documentation.LongDescription": "Tiek atgriezta tabulas <code>table</code> pirmā(-s) rinda(-s) atkarībā no <code>countOrCondition</code> vērtības:\r\n    <ul>\r\n    <li> Ja <code>countOrCondition</code> ir skaitlis, tiks atgriezts tik daudz rindu (sākot no augšas). </li>\r\n    <li> Ja <code>countOrCondition</code> ir nosacījums, tiks atgrieztas nosacījumam atbilstošās rindas, līdz rinda neatbilst nosacījumam.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet tabulas pirmās divas rindas.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Atrodiet tabulā pirmo rindu, kur [a] > 0.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Tiek atgriezta tabula, kas ir iegūta, apvienojot nodalītu tabulu kopu.",
        "Documentation.LongDescription": "Atgriež tabulu, kas ir nodalītu tabulu kopas, <code>partitions</code>, apvienošanas rezultāts. <code>partitionColumn</code> ir pievienojamās kolonnas nosaukums. Kolonnas tips pēc noklusējuma tiek atiestatīts uz <code>any</code>, taču to var norādīt <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet vienuma tipu sarakstā <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Tiek atgriezts pēdējais norādītais rindu skaits.",
        "Documentation.LongDescription": "Tiek atgriezta tabulas <code>table</code> pēdējā(-s) rinda(-s) atkarībā no <code>countOrCondition</code> vērtības:\r\n    <ul>\r\n    <li> Ja <code>countOrCondition</code> ir skaitlis, tiks atgrieztas daudzas rindas, sākot no pozīcijas (beigas — <code>countOrCondition</code>). </li>\r\n    <li> Ja <code>countOrCondition</code> ir nosacījums, augošā pozīcijā tiks atgrieztas nosacījumam atbilstošās rindas, līdz rinda neatbilst nosacījumam.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet tabulas pēdējās divas rindas.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Atrodiet tabulā pēdējās rindas, kur [a] > 0.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Tiek atgriezta tabula, kur visām kolonnām ir pievienots prefikss ar norādīto tekstu.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kur visiem kolonnu nosaukumiem no norādītā <code>table</code> ir prefiksi ar norādīto tekstu <code>prefix</code>, kā arī punkts šādā formātā: <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet tabulas kolonnām prefiksu \"MyTable\".",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Tiek atgrieztas rindas, kas sākas ar norādīto nobīdi.",
        "Documentation.LongDescription": "Tiek atgrieztas rindas no <code>table</code>, kas sākas ar norādīto <code>offset</code>. Neobligāts parametrs <code>count</code> norāda, cik rindas tiks atgrieztas. Pēc noklusējuma tiek atgrieztas visas rindas pēc nobīdes.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tabulā tiek atgrieztas visas rindas, sākot no 1. nobīdes.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Tabulā tiek atgriezta viena rinda, sākot no 1. nobīdes.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Norādītās kolonnas tiek noņemtas.",
        "Documentation.LongDescription": "Noņem norādīto <code>columns</code> no norādītā <code>table</code>.\r\n    Ja norādītā kolonna nepastāv, tiek parādīts kļūdas ziņojums, ja vien neobligātais parametrs <code>missingField</code> nenorādīs alternatīvu reakciju (piemēram, <code>MissingField.UseNull</code> vai <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet kolonnu [Phone] no tabulas.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Mēģiniet noņemt neesošu kolonnu no tabulas.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "No tabulas tiek noņemti visi norādīto rindu gadījumi.",
        "Documentation.LongDescription": "No <code>table</code> noņem visus norādītās <code>rows</code> gadījumus.\r\n    Varat norādīt neobligātu parametru <code>equationCriteria</code>, lai kontrolētu salīdzināšanu starp tabulas rindām.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet visas rindas, kur [a = 1], no tabulas <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Tiek noņemts norādītais rindu skaits.",
        "Documentation.LongDescription": "Tiek noņemtas <code>count</code> rindas no <code>table</code> sākuma, sākot ar norādīto <code>offset</code>. Ja nav norādīts <code>count</code> parametrs, tiek lietots noklusējuma skaits 1. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet pirmo rindu no tabulas.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Noņemiet 1. pozīcijā esošo rindu no tabulas.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Sākot no 1. pozīcijas, noņemiet divas rindas no tabulas.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Tiek pārdēvēta forma {old, new}.",
        "Documentation.LongDescription": "Tabulā <code>table</code> tiek veikta norādītā kolonnu pārdēvēšana. Aizstāšanas operācijā <code>renames</code> ir ietverts saraksts, kurā ir divas vērtības — vecais kolonnas nosaukums un jaunais kolonnas nosaukums.\r\n    Ja kolonna nepastāv, tiek aktivizēts izņēmums, ja neobligātais parametrs <code>missingField</code> nenorāda alternatīvu (piem., <code>MissingField.UseNull</code> vai <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Aizvietojiet tabulā kolonnas nosaukumu \"CustomerNum\" ar \"CustomerID\".",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Aizvietojiet tabulā kolonnas nosaukumu \"CustomerNum\" ar \"CustomerID\" un \"PhoneNum\" ar \"Phone\".",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Aizstājiet tabulā kolonnas nosaukumu \"NewCol\" ar \"NewColumn\" un ignorējiet, ja kolonna nepastāv.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Tiek atgriezta tabula ar kolonnām norādītajā secībā.",
        "Documentation.LongDescription": "Tiek atgriezta tabula no ievades <code>table</code> ar kolonnām, kuru secību norāda <code>columnOrder</code>. To kolonnu secība, kuras nav norādītas sarakstā, netiks mainīta.\r\n     Ja kolonna nepastāv, tiek aktivizēts izņēmums, ja neobligātais parametrs <code>missingField</code> nenorāda alternatīvu (piemēram, <code>MissingField.UseNull</code> vai <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Mainiet kolonnu [Phone] un [Name] secību tabulā.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Mainiet kolonnu [Phone] un [Address] secību vai lietojiet MissingField.Ignore tabulā. Šī darbība nemaina tabulu, jo kolonna [Address] nepastāv.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Tabulas rindas tiek atkārtotas norādīto reižu skaitu.",
        "Documentation.LongDescription": "Tiek atgriezta tabula ar rindām no ievades <code>table</code>, kas atkārtotas norādītās <code>count</code> reizes.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atkārtojiet tabulā rindas divas reizes.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Kļūdu vērtības norādītajās kolonnās aizstāj ar atbilstošo norādīto vērtību.",
        "Documentation.LongDescription": "Kļūdu vērtības <code>table</code> norādītajās kolonnās aizstāj ar jaunām vērtībām sarakstā <code>errorReplacement</code>. Saraksta formāts ir {{column1, value1}, …}. Katrā kolonnā var norādīt tikai vienu aizstāšanas vērtību. Norādot kolonnu vairāk nekā vienu reizi, radīsies kļūda.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Aizstājiet tabulā kļūdas vērtību ar tekstu \"world\".",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Aizstājiet kļūdas vērtību tabulas kolonnā A ar tekstu \"hello\" un kolonnā B ar tekstu \"world\".",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Aizstāj norādītās tabulas atslēgas.",
        "Documentation.LongDescription": "Aizstāj norādītās tabulas atslēgas.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Aizstājiet tabulas esošās atslēgas.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Tiek aizstātas visas norādītās rindas ar nodrošināto(-ajām) rindu(-ām).",
        "Documentation.LongDescription": "Aizstāj visas norādītās <code>table</code> rindas ar nodrošinātajām rindām. Aizstājamās rindas un aizvietojumi ir norādīti <code>replacements</code>, izmantojot {old, new} formatējumu.\r\n    Varat norādīt neobligātu parametru <code>equationCriteria</code>, lai kontrolētu salīdzināšanu starp tabulas rindām.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Aizstājiet rindas [a = 1, b = 2] un [a = 2, b = 3] ar [a = -1, b = -2],[a = -2, b = -3] tabulā.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Tiek atgriezta tabula tikai ar norādītajām kolonnām.",
        "Documentation.LongDescription": "Tiek atgriezta <code>table</code> tikai ar norādīto <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: norādītā tabula.</li>\r\n       <li><code>columns</code>: kolonnu saraksts no tabulas <code>table</code>, ko atgriezt. Kolonnas atgrieztajā tabulā ir secībā, kas norādīta <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Neobligāti)</i> Kā rīkoties, ja kolonna nepastāv.  Piemērs: <code>MissingField.UseNull</code> vai <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Ietvert tikai kolonnu [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Ietvert tikai kolonnas [CustomerID] un [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Ja ietvertā kolonna nepastāv, pēc noklusējuma tiek atgriezta kļūda.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Ja ietvertā kolonna nepastāv, izmantojot opciju <code>MissingField.UseNull</code>, tiek izveidota kolonna ar vērtībām Null.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Tiek atlasītas rindas, kas atbilst nosacījuma funkcijai.",
        "Documentation.LongDescription": "Tiek atgriezta rindu tabula no <code>table</code>, kas atbilst atlases <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atlasīt tās tabulas rindas, kurās kolonnas [CustomerID] vērtība ir lielāka nekā 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Atlasīt tās tabulas rindas, kurās esošajos nosaukumos nav ietverts burts “B”.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Tiek kārtota tabula, izmantojot vienu vai vairākus kolonnu nosaukumus un salīdzināšanas kritērijus.",
        "Documentation.LongDescription": "Tiek kārtota <code>table</code>, izmantojot sarakstu ar vienu vai vairākiem kolonnu nosaukumiem un neobligāto <code>comparisonCriteria</code> šādā formātā: { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Kārtojiet tabulu kolonnā \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Kārtojiet tabulu kolonnā \"OrderID\" dilstošā secībā.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Kārtojiet tabulu kolonnā \"CustomerID\", pēc tam \"OrderID\", un \"CustomerID\" ir dilstošā secībā.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Pārveido kolonnu nosaukumus, izmantojot norādīto funkciju.",
        "Documentation.LongDescription": "Pārveido kolonnu nosaukumus, izmantojot norādīto funkciju <code>nameGenerator</code>. Tālāk norādītas derīgās opcijas:\r\n    <div>\r\n      <code>MaxLength</code>: norāda jauno kolonnu nosaukumu maksimālo garumu. Ja attiecīgā funkcija atgriež garāku kolonnas nosaukumu, šis nosaukums tiek saīsināts.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code>: izmanto, lai kontrolētu salīdzināšanu, kad tiek ģenerēti jaunie kolonnu nosaukumi. Salīdzinātājus var izmantot, lai nodrošinātu reģistrnejutīgu vai kultūrai un lokalizācijai atbilstošu salīdzināšanu.\r\n    </div>\r\n    <div>\r\n      Formulu valodā ir pieejami tālāk norādītie iebūvētie salīdzinātāji:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: izmanto precīzai kārtas salīdzināšanai</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: izmanto precīzai kārtas salīdzināšanai, kas nav reģistrjutīga</li>\r\n      <li> <code>Comparer.FromCulture</code>: izmanto, lai veiktu kultūrai atbilstošu salīdzināšanu</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Noņemt kolonnu nosaukumiem rakstzīmi <code>#(tab)</code>",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Transformē kolonnu nosaukumus, lai ģenerētu nosaukumus, kas nav garāki par 6 rakstzīmēm un nav reģistrjutīgi.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Tiek lietota formāta { column, type } tipa pārvēršana, izmantojot konkrētu kultūru.",
        "Documentation.LongDescription": "Tiek atgriezta tabula no ievades <code>table</code>, lietojot pārvēršanas operāciju kolonnās, kas norādītas parametrā <code>typeTransformations</code> (kur formāts ir { column name, type name}), izmantojot norādīto kultūru neobligātajā parametrā <code>culture</code> (piemēram, \"lv-LV\").\r\n    Ja kolonna nepastāv, tiek aktivizēts izņēmums.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pārvērtiet skaitliskās vērtības kolonnā [a] par teksta vērtībām no tabulas <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Pārveido vienas vai vairāku kolonnu vērtības.",
        "Documentation.LongDescription": "Pārveido <code>table</code>, lietojot katru <code>transformOperations</code> norādīto kolonnas operāciju (kur formāts ir { column name, transformation } vai { column name, transformation, new column type }).\r\n    Ja <code>defaultTransformation</code> ir norādīts, tas tiks lietots visām kolonnām, kas nav uzskaitītas <code>transformOperations</code>.\r\n    Ja <code>transformOperations</code> norādītā kolonna nepastāv, tiek aktivizēts izņēmums, izņemot gadījumus, kad neobligātais parametrs <code>missingField</code> norāda alternatīvu (piemēram, <code>MissingField.UseNull</code> vai <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pārvērtiet kolonnas [A] teksta vērtības par skaitliskajām vērtībām un kolonnas [B] skaitliskās vērtības par teksta vērtībām.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Pārvērtiet trūkstošās kolonnas [X] skaitliskās vērtības par teksta vērtībām, ignorējot neesošās kolonnas.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Pārvērst trūkstošās kolonnas [X] skaitliskās vērtības par teksta vērtībām, neesošajām kolonnām pēc noklusējuma lietojot vērtību Null.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Palielināt kolonnas [B] skaitliskās vērtības un pārvērst tās par teksta vērtībām, kā arī visas pārējās kolonnas pārvērst par skaitļiem.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Izveido vai izvērš tabulu ar lietotāja definētiem apdarinātājiem vaicājumu un darbību operācijām.",
        "Documentation.LongDescription": "<p>Atgriež <code>table</code> skatu, kur <code>handlers</code> norādītās funkcijas tiek izmantotas operācijas noklusējuma darbības vietā, kad operācija tiek lietota skatam.</p>\r\n<p>Ja <code>table</code> ir norādīta, visas apdarinātāja funkcijas nav obligātas. Ja <code>table</code> nav norādīta, <code>GetType</code> un <code>GetRows</code> apdarinātāja funkcijas ir obligātas. Ja apdarinātāja funkcija operācijai nav norādīta, tās vietā vienumam <code>table</code> tiek lietota operācijas noklusējuma darbība (izņemot <code> GetExpression</code> gadījumu).</p>\r\n<p>Apdarinātāja funkcijām jāatgriež vērtība, kas ir semantiski ekvivalenta rezultātam, kas tiek iegūts, lietojot operāciju vienumam <code>table</code> (<code> GetExpression</code> gadījumā\r— rezultāta skatam).</p>\n\r<p>Ja apdarinātāja funkcija izraisa kļūdu, skatam tiek lietota operācijas noklusējuma darbība.</p>\n\r<p><code>Table.View</code> var izmantot, lai ieviestu datu avota locīšanu\n— Mvaicājumu pārveidošanu avotam atbilstošos vaicājumos (piemēram, lai izveidotu T-SQL priekšrakstus no Mvaicājumiem).</p><p>Detalizētu <code>Table.View</code> aprakstu skatiet publicētajā dokumentācijā.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet pamata skatu, kam nav nepieciešama piekļuve rindām, lai noteiktu tipu vai rindu skaitu.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Ievadiet organizācijas un projekta nosaukumu.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (tikai paneļi)",
        "Documentation.LongDescription": "Tiek atgriezta Azure DevOps nodrošinātā Analytics skatu tabula."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Importēt datus no platformas Vertica",
        "Documentation.LongDescription": "Atgriež noteiktā serverī un datu bāzē pieejamo shēmu tabulu. Servera nosaukums ir norādīts parametrā <code>server</code>, un datu bāzes nosaukums ir norādīts parametrā <code>database</code>.\r\nLai precizētu papildu rekvizītus, var norādīt neobligātu ieraksta parametru <code>options</code>. Ierakstā var būt tālāk norādītie lauki.\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: ilgums, kas tiek izmantots, lai pārvaldītu, cik ilgi jāgaida, pirms tiek atmests mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n    <li><code>CommandTimeout</code>: ilgums, ko izmanto, lai pārvaldītu to, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Uzskaitīt platformā Vertica esošās tabulas"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Atgriež tabulu ar atskaišu saturu no risinājuma Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Izsauc norādīto Webtrends atskaišu galapunktu un atgriež visus datus tabulas formā.",
        "Documentation.Examples": [
          {
            "Description": "Izsauc Webtrends apmeklētāju atskaišu galapunktu, pieprasot datus par pēdējām 30 dienām",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Apmeklētāju datu tabula"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Atgriež Active Directory domēnu sarakstu tajā pašā mežā, kur atrodas norādītais domēns, vai pašreizējā iekārtas domēna sarakstu, ja neviens nav norādīts.",
        "Documentation.LongDescription": "Atgriež Active Directory domēnu sarakstu tajā pašā mežā, kur atrodas norādītais domēns, vai pašreizējā iekārtas domēna sarakstu, ja neviens nav norādīts.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Atgriež rezultātu, kas iegūts, izpildot vietēju vaicājumu ADO.NET datu avotā.",
        "Documentation.LongDescription": "Izmantojot ADO.NET nodrošinātāju <code>providerName</code>, tiek atgriezts <code>query</code> palaišanas rezultāts ar savienojuma virkni <code>connectionString</code>. <code>connectionString</code> var būt teksts vai rekvizīta vērtību pāru ieraksts. Rekvizīta vērtības var būt teksts vai skaitlis. Lai norādītu papildu rekvizītus, var tikt norādīts ieraksta izvēles parametrs <code>options</code>. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir desmit minūtes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loģiskais operators (True/False), kas nosaka, vai izveidot ar SQL&#160;Server saderīgas savienojuma virknes opcijas, ko izmantot Windows autentifikācijas procesā. Noklusējuma vērtība ir True.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Tiek atgriezti atskaišu komplekti no pakalpojuma Adobe Analytics.",
        "Documentation.LongDescription": "Tiek atgriezta daudzdimensiju pakotņu tabula no pakalpojuma Adobe Analytics. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Loģiskā funkcija (true/false), kura nosaka, vai skatīt tabulas, grupējot pēc shēmu nosaukumiem (noklusējuma vērtība ir “false”).</li>\r\n<li><code>MaxRetryCount</code> : Norāda, cik atkārtotu mēģinājumu jāveic, pieprasot vaicājuma rezultātu. Noklusējuma vērtība ir 120.</li>\r\n<li><code>RetryInterval</code> : Laiks starp atkārtotiem mēģinājumiem. Noklusējuma vērtība ir viena sekunde.</li>\r\n<li><code>Implementation</code> : Norāda Adobe Analytics API versiju. Derīgās vērtības ir “2.0”. Pēc noklusējuma tiek izmantota API versija&#160;1.4.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Importējiet datus no Hive LLAP",
        "Documentation.LongDescription": "\r\nTiek atgriezts Hive LLAP tabulu saraksts, kurš norādīts Hive LLAP serverī <code>server</code> esošajā datu bāzē <code>database</code>, izmantojot atlasīto protokolu <code>protocol</code>. Kopā ar serveri pēc izvēles var norādīt porta numuru, atdalot to ar kolu. Protokols Thrift Transport Protocol (TTP) ir uzskaitījuma tips ar vērtībām “Standard”, “HTTP”. Var norādīt neobligātu parametru <code>options</code>, lai pārvaldītu tālāk norādītās opcijas.\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: ilgums, kas tiek izmantots, lai pārvaldītu, cik ilgi jāgaida, pirms tiek atmests mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n        <li><code>CommandTimeout</code>: ilgums, kas tiek izmantots, lai pārvaldītu, cik ilgi drīkst izpildīt servera puses vaicājumu, pirms tas tiek atcelts. Noklusējuma vērtība ir atkarīga no draivera.</li>\r\n</ul>\r\nParametrs <code>options</code> tiek norādīts šādi: [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Pieņemot, ka šodien ir 15.06.2017, iegūt kopsavilkumu datus starp 01.05.2017 un 15.06.2017",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkcija atgriezīs kopsavilkumu datus no 01.05.2017 līdz 15.06.2017"
          },
          {
            "Description": "Pieņemot, ka šodien ir 15.06.2017, iegūt 2017. gada aprīļa kopsavilkumu datus.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkcija atgriezīs datus starp 01.04.2017 un 30.04.2017"
          },
          {
            "Description": "Pieņemot, ka šodien ir 15.06.2017, iegūt kopsavilkumu datus no 2017. gada aprīļa līdz pašreizējam brīdim.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkcija atgriezīs datus starp 01.04.2017 un 15.06.2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure izmaksu pārvaldība",
        "Documentation.Description": "Azure izmaksu pārvaldība",
        "Documentation.DisplayName": "Azure izmaksu pārvaldība",
        "Documentation.LongDescription": "Azure izmaksu pārvaldība",
        "Documentation.Name": "Azure izmaksu pārvaldība"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Ievadiet organizācijas un projekta nosaukumu.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps pakalpojumi",
        "Documentation.LongDescription": "Tiek atgriezta Azure DevOps nodrošinātā OData plūsmu tabula."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Izveidot savienojumu ar savu Dataverse instanci (Dynamics 365 un PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Sapludina norādīto dimensiju tabulu ar kuba filtra kontekstu un maina filtra konteksta dimensiju granularitāti, izvēršot norādīto dimensiju atribūtu kopu.",
        "Documentation.LongDescription": "Sapludina norādīto dimensiju tabulu <code>dimensionSelector</code> ar kuba <code>cube</code> filtra kontekstu un maina dimensiju granularitāti, izvēršot norādīto dimensiju atribūtu kopu <code>attributeNames</code>. Dimensijas atribūti ir pievienoti tabulveida skatam ar kolonnām, kuru nosaukums ir <code>newColumnNames</code>, vai arī nav norādīts šis: <code>attributeNames</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Pievieno kolonnu kubam, kas satur tā mēra rezultātus, kurš lietots katras rindas kontekstā.",
        "Documentation.LongDescription": "Pievieno kolonnu <code>column</code> kubam <code>cube</code>, kas satur mēra <code>measureSelector</code> rezultātus, kurš lietots katras rindas kontekstā. Mēra lietojumu ietekmē dimensijas granularitātes un segmentēšanas izmaiņas. Mēra vērtības tiks pielāgotas pēc noteiktu kuba operāciju veikšanas.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Norādiet savu Dynamics 365 Business Central vidi un uzņēmumu.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Atgriež tabulu ar attiecīgajiem Dynamics 365 Business Central datiem. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Norādiet savu Dynamics 365 Business Central vidi un uzņēmumu.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Atgriež tabulu ar attiecīgajiem Dynamics 365 Business Central datiem. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Norādiet savu Dynamics 365 Business Central vidi un uzņēmumu.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Atgriež tabulu ar attiecīgajiem Dynamics 365 Business Central datiem. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Norādiet savu Dynamics 365 Business Central vidi un uzņēmumu.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Atgriež tabulu ar attiecīgajiem Dynamics 365 Business Central datiem. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Atgriež pašreizējās Excel darbgrāmatas saturu.",
        "Documentation.LongDescription": "Atgriež pašreizējās Excel darbgrāmatas saturu. Tas atgriež tabulas, nosauktos diapazonus un dinamiskos masīvus. Pretēji <code>Excel.Workbook</code>, tas neatgriež lapas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Atgriež satura rādītāju no Microsoft Exchange konta.",
        "Documentation.LongDescription": "Atgriež Microsoft Exchange konta <code>mailboxAddress</code> satura rādītāju. Ja konts <code>mailboxAddress</code> nav norādīts, tiks izmantots noklusējuma akreditācijas datu konts.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Noliktava",
        "Documentation.Caption": "Noliktava",
        "Documentation.Description": "Importē datus no noliktavas",
        "Documentation.LongDescription": "Importē datus no noliktavas"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Atgriež Google Analytics kontus.",
        "Documentation.LongDescription": "Atgriež Google Analytics kontus, kam var piekļūt, izmantojot pašreizējos akreditācijas datus.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Importējiet datus no Google BigQuery datu bāzes.",
        "Documentation.LongDescription": "\r\n      Atgriež tabulu, kurā ir norādīti pakalpojumā Google BigQuery pieejamie vaicājumi. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai kontrolētu šādas opcijas:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: ilgums, kas tiek izmantots, lai pārvaldītu, cik ilgi jāgaida, pirms tiek atmests mēģinājums izveidot savienojumu ar serveri. Noklusējuma vērtība ir ODBC savienojuma taimauta vērtība.</li>\r\n        <li><code>CommandTimeout</code>: ilgums, ko izmanto, lai pārvaldītu to, cik ilgi tiek atļauts izpildīt servera puses vaicājumu, pirms tas tiek atcelts.</li>\r\n        <li><code>BillingProject</code>: norēķinu projekta nosaukums. Noklusējuma vērtība ir pirmā pieejamā projekta nosaukums.</li>\r\n        <li><code>UseStorageApi</code>: norāda, vai lielām rezultātu kopām izmantot BigQuery Storage API. Noklusējuma vērtība ir \"true\", lai izmantotu Storage API. Iestatiet \"false\", lai neizmantotu Storage API</li>\r\n      </ul>\r\n    Ieraksta parametrs tiek norādīts, piemēram, šādi: [1.\ropcija = 1.\nvērtība, 2. opcija = 2. vērtība...].",
        "Documentation.Examples": [
          {
            "Description": "Norādiet pakalpojumā Google BigQuery pieejamos projektus",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Importēt datus no Lakehouse",
        "Documentation.Description": "Importēt datus no Lakehouse",
        "Documentation.LongDescription": "Izveidojiet savienojumu ar visām Lakehouses, kurām jums ir atļauts piekļūt, un izvēlieties izmantojamās entītijas"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Atgriež tabulu ar galvenajiem MailChimp datiem.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Atgriež tabulu ar galvenajiem MailChimp datiem.",
        "Documentation.Examples": [
          {
            "Description": "Atgriež tabulu ar galvenajiem MailChimp datiem.",
            "Code": "MailChimp.Tables()",
            "Result": "Tabula ar galvenajiem MailChimp datiem."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Šī funkcija atgriež tabulu, kurā norādītas potenciālo klientu darbības.",
        "Documentation.LongDescription": "Šī funkcija izsauc Marketo REST API galapunktu adresē <code>URL</code>/rest/v1/activities.json. Tiek atgrieztas visas darbības sarakstā <code>activityIds</code>, kuras ir notikušas kopš datuma <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Šī funkcija atgādā tabulu, kurā uzskaitītas darbības kategorijā Visit Webpage (Tīmekļa lapas apmeklējums) kopš 2015. gada 1. novembra",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Tabula, kurā norādīta detalizēta informācija par visām darbībām kategorijā Visit Webpage (Tīmekļa lapas apmeklējums) kopš 1. novembra"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PVE_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI datplūsmas (mantotas)",
        "Documentation.Caption": "Importēt datus no Power BI datplūsmas",
        "Documentation.LongDescription": "Izveidojiet savienojumu ar visām Power BI datplūsmām, kurām jums ir atļauts piekļūt, un izvēlieties izmantojamās entītijas."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Data marts",
        "Documentation.Caption": "Data marts",
        "Documentation.Description": "Importē datus no data marts",
        "Documentation.LongDescription": "Importē datus no data marts"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Datplūsmas",
        "Documentation.Caption": "Importēt datus no datplūsmas",
        "Documentation.Description": "Importēt datus no datplūsmas",
        "Documentation.LongDescription": "Izveidojiet savienojumu ar visām datplūsmām, kurām jums ir atļauts piekļūt, un izvēlieties izmantojamās entītijas"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importējiet datus no pakalpojuma QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Atgriež tabulu, kurā ir norādītas pakalpojumā QuickBooks Online pieejamās tabulas. Var norādīt neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk norādītās opcijas.\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: ilgums, kas nosaka, cik ilgi jāgaida, pirms atmest mēģinājumu izveidot savienojumu ar serveri.</li>\r\n            <li><code>CommandTimeout</code>: ilgums, kas nosaka, cik ilgi atļauts darbināt servera puses vaicājumu, pirms tas tiek atcelts.</li>\r\n          </ul>\r\n        Ieraksta parametrs tiek norādīts, piemēram, šādi: [option1 = value1, option2 = value2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Tiek atgriezti objekti no Salesforce konta.",
        "Documentation.LongDescription": "Tiek atgriezti objekti Salesforce kontā, kas norādīts akreditācijas datos. Konts tiek savienots, izmantojot norādīto vidi <code>loginUrl</code>. Ja vide nav norādīta, konts tiek savienots ar ražošanu (https://login.salesforce.com). Lai precizētu papildu rekvizītus, var norādīt neobligātu ieraksta parametru <code>options</code>. Ierakstā var ietvert tālāk norādītos laukus.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loģiskā funkcija (true/false), kura nosaka, vai ir jāveido atgriezto vērtību navigācijas rekvizīti (noklusējuma vērtība ir “false”).</li>\r\n<li><code>ApiVersion</code> : Šim vaicājumam izmantojamā Salesforce API versija. Ja šī vērtība nav norādīta, tiek izmantota API versija 29.0.</li>\r\n<li><code>Timeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms pamest servera pieprasījumu. Noklusējuma vērtība ir atkarīga no avota.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Tiek atgriezta atskaite no Salesforce konta.",
        "Documentation.LongDescription": "Tiek atgrieztas atskaites Salesforce kontā, kas norādīts akreditācijas datos. Konts tiek savienots, izmantojot norādīto vidi <code>loginUrl</code>. Ja vide nav norādīta, konts tiek savienots ar ražošanu (https://login.salesforce.com). Lai precizētu papildu rekvizītus, var norādīt neobligātu ieraksta parametru <code>options</code>. Ierakstā var ietvert tālāk norādītos laukus.\r\n    <ul>\r\n<li><code>ApiVersion</code> : Šim vaicājumam izmantojamā Salesforce API versija. Ja šī vērtība nav norādīta, tiek izmantota API versija 29.0.</li>\r\n<li><code>Timeout</code> : Ilgums, kurš tiek izmantots, lai noteiktu, cik ilgi gaidīt, pirms pamest servera pieprasījumu. Noklusējuma vērtība ir atkarīga no avota.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "SAP Business Warehouse sistēmā tiek atgrieztas InfoCubes vērtības un vaicājumi, grupējot pēc InfoArea.",
        "Documentation.LongDescription": "Tiek atgriezta tabula, kurā ir ietvertas InfoCubes vērtības un vaicājumi, kas grupēti pēc InfoArea, no SAP Business Warehouse instances serverī <code>server</code> ar sistēmas numuru <code>systemNumberOrSystemId</code> un klienta ID <code>clientId</code>. Var norādīt neobligātu ieraksta parametru <code>optionsOrLogonGroup</code>, lai kontrolētu tālāk norādītās opcijas.\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Atgriež no Smartsheet API tabulu, kurā ir norādītas lapas, atskaites, mapes un darbvietas",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Atgriež no Smartsheet API ligzdtabulu, kurā ir norādītas pieejamās lapas, atskaites, mapes un darbvietas.",
        "Documentation.Examples": [
          {
            "Description": "Atgriež Smartsheet hierarhijas augšējā līmenī pieejamās lapas, mapes, atskaites un darbvietas",
            "Code": "Smartsheet.Tables()",
            "Result": "Tabula, kurā norādītas Smartsheet hierarhijas augšējā līmeņa mapes, atskaites un darbvietas"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Atgriež pieejamās metrikas tabulu no SparkPost API v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Šo funkciju var izmantot, lai izgūtu datus no konkrēta SparkPost API v1 galapunkta “Metrika”. Ja šīs tabulas tiek atsvaidzinātas vai izsaukumi uz SparkPost API tiek veikti, izmantojot šo savienotāju, ņemiet vērā, ka SparkPost API ir strikts API pieprasījumu saņemšanas biežuma ierobežojums. Ja no SparkPost servera tiek atgriezts statusa kods 429, tas nozīmē, ka tika sasniegts maksimālais atļautais pieprasījumu biežums. Pirms veikt jaunus izsaukumus, nedaudz uzgaidiet. Izvēloties vērtību parametram Dienu skaits, jāņem vērā, ka API saglabā datus tikai par 6 mēnešiem.",
        "Documentation.Examples": [
          {
            "Description": "Tiek izgūta piegādes metriku count_sent un count_rejected saistībā ar visām kampaņām campaign_ids, kas apkopotas pēdējo trīs dienu laikā.",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabula"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Šī funkcija izsauc Stripe API.",
        "Documentation.LongDescription": "Šī funkcija izsauc pakalpojuma Stripe API adresē https://api.stripe.com/v1/<code>metode</code>, pieņemot ierakstu <code>additionalParameters</code> kā papildu parametrus un paredzēto kolonnu nosaukumu sarakstu <code>ColumnNames</code>. Tiek izmantota pakalpojuma Stripe versija 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Šī funkcija atgriež tabulu, kurā uzskaitīti pēc 2015. gada 1. novembra izveidotie notikumi",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Tabula, kurā uzskaitīti norādītie pašreizējā Stripe konta notikumi"
          },
          {
            "Description": "Šī funkcija atgriež tabulu, kurā norādītas visas SKU",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Tabula, kurā norādītas visas pašreizējā Stripe konta SKU"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Šī funkcija atgriež tabulu, kurā uzskaitītas pieejamās Stripe tabulas un funkcijas.",
        "Documentation.LongDescription": "Šī funkcija atgriež tabulu, kurā uzskaitītas pieejamās Stripe tabulas un funkcijas."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Synapse Analytics darbvieta",
        "Documentation.Caption": "Azure Synapse Analytics darbvieta",
        "Documentation.LongDescription": "PQ savienotājs Azure Synapse Analytics darbvietai",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Tiek pievienota kolonna ar norādīto nosaukumu. Vērtība tiek aprēķināta, izmantojot norādīto atlases funkciju un kā ievades datus lietojot katru rindu.",
        "Documentation.LongDescription": "Tabulai <code>table</code> tiek pievienota kolonna ar nosaukumu <code>newColumnName</code>. Kolonnas vērtības tiek aprēķinātas, izmantojot norādīto atlases funkciju <code>columnGenerator</code> un kā ievades datus lietojot katru rindu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pievienot skaitļu kolonnu ar nosaukumu \"TotalPrice\" tabulā, ar katru vērtību kā kolonnu [Price] un [Shipping] summu.",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Pievieno jaunu kolonnu ar reprezentatīvām vērtībām, kas iegūtas, aptuveni grupējot tabulā norādītās kolonnas vērtības.",
        "Documentation.LongDescription": "Šim (<code>table</code>) pievieno jaunu kolonnu <code>newColumnName</code> ar reprezentatīvām <code>columnName</code> vērtībām. Katrai rindai pārstāvji tiek iegūti, aptuveni saskaņojot <code>columnName</code> vērtības.\r\n    <p>Var iekļaut papildu <code>options</code> kopu, lai norādītu, kā salīdzināt atslēgas kolonnas. Opcijas ietver: \r\n    <ul>\r\n<li><code>Culture</code> : Atļauj ierakstu grupēšanu atbilstoši kultūrspecifiskām kārtulām. Tas var būt jebkurš derīgs kultūras nosaukums. Piemēram, kultūras opcija &quot;ja-JP&quot; grupē ierakstus atbilstoši japāņu valodas kultūrai. Noklusējuma vērtība ir &quot;&quot;, kas grupē atbilstoši angļu valodas invarianta kultūrai.</li>\r\n<li><code>IgnoreCase</code> : Loģiskā vērtība (true/false), kas atļauj reģistrnejutīgu atslēgu grupēšanu. Piemēram, ja true, &quot;Vīnogas&quot; tiek grupētas ar &quot;vīnogas&quot;. Noklusējuma vērtība ir true.</li>\r\n<li><code>IgnoreSpace</code> : Loģiskā vērtība (true/false), kas ļauj kombinēt teksta daļas, lai atrastu grupas. Piemēram, ja true, &quot;Vīn ogas&quot; tiek grupēts ar &quot;Vīnogas&quot;. Noklusējuma vērtība ir true.</li>\r\n<li><code>SimilarityColumnName</code> : Kolonnas nosaukums, kas norāda ievades vērtības līdzību ar šīs ievades reprezentatīvo vērtību. Noklusējuma vērtība ir Null, un tādā gadījumā jauna kolonna līdzībām netiek pievienota.</li>\r\n<li><code>Threshold</code> : Skaitlis diapazonā 0,00 līdz 1,00, kas norāda līdzības vērtējumu, pie kura tiks grupētas divas vērtības.\r\n    Piemēram, &quot;Vīnogas&quot; un &quot;Vīnoas&quot; (trūkst &quot;g&quot;),) tiek grupētas kopā tikai tad, ja šī opcija ir iestatīta uz mazāku par 0,90.\r\n    Slieksnis 1,00 atļauj tikai precīzas atbilstības.\r\n    (Ņemiet vērā, ka aptuvenā &quot;precīzā atbilstība&quot; var ignorēt atšķirības, piemēram, lielos burtus, vārdu secību un pieturzīmes.)\r\n    Noklusējuma vērtība ir 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabula, kas ļauj grupēt ierakstus atbilstoši pielāgotu vērtību kartējumiem. Tajā ir jābūt kolonnām &quot;No&quot; un &quot;Uz&quot;. Piemēram, vērtība &quot;Vīnogas&quot; tiek grupēta ar &quot;Rozīnes&quot;, ja transformācijas tabulā kolonna &quot;No&quot;, kurā ir vērtība &quot;Vīnogas&quot;, kolonna &quot;Uz&quot;, kas kurā ir vērtība &quot;Rozīnes&quot;. Ņemiet vērā, ka transformācija tiks lietota visiem transformācijas tabulas teksta gadījumiem. Izmantojot iepriekšminēto transformācijas tabulu, teksts &quot;Vīnogas ir saldas&quot; tiks grupēts arī ar tekstu &quot;Rozīnes ir saldas&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet reprezentatīvas vērtības darbinieku atrašanās vietai.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Tiek veikta tabulu savienošana pēc norādītajām kolonnām, un savienošanas rezultāts tiek ietverts jaunā kolonnā.",
        "Documentation.LongDescription": "Tabulas <code>table1</code> rindas tiek savienotas ar tabulas <code>table2</code> rindām atbilstoši tam, vai ar funkcijām <code>key1</code> (tabulai <code>table1</code>) un <code>key2</code> (tabulai <code>table2</code>) atlasīto atslēgas kolonnu vērtības ir vienādas. Rezultāti tiek ietverti kolonnā ar nosaukumu <code>newColumnName</code>.\r\nŠī funkcija darbojas līdzīgi kā funkcija Table.Join ar parametra JoinKind vērtību LeftOute, taču savienojuma rezultāts tiek izvadīts ligzdotā, nevis izplātā veidā.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet tabulai ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) savienojuma kolonnu ar nosaukumu price/stock, veicot šīs tabulas savienošanu ar tabulu ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) pēc kolonnas [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Atslēga tiek pievienota tabulai.",
        "Documentation.LongDescription": "Atslēga tiek pievienota tabulai <code>table</code>, kur <code>columns</code> ir atslēgu definējošais kolonnu nosaukumu saraksts, un <code>isPrimary</code> norāda, vai šī atslēga ir primārā.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet tabulai vienas kolonnas primāro atslēgu.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Pievieno kolonnu ar vienas vai vairāku citu kolonnu rangu.",
        "Documentation.LongDescription": "Pievieno kolonnai ar nosaukumu <code>newColumnName</code> <code>table</code> ar vienas vai vairāku citu kolonnu rangu, ko apraksta <code>comparisonCriteria</code>.\r\nDetalizētās informācijas opciju RankKind <code>options</code> izmantot pieredzējuši lietotāji, lai izvēlētos precīzāku vērtēšanas metodi.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet tabulai kolonnu ar nosaukumu \"RevenueRank\", kuras rangs ir \"Revenue\" kolonna no augstākās līdz zemākajai.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Tabulu kolonna tiek apkopota vairākās ietverošās tabulas kolonnās.",
        "Documentation.LongDescription": "Kolonnā <code>table</code>[<code>column</code>] ietvertās tabulas tiek apkopotas vairākās kolonnās, kurās ir ietvertas tabulu apkopojuma vērtības. Parametrs <code>aggregations</code> tiek izmantots, lai norādītu kolonnas, kurās ir ietvertas apkopojamās tabulas, apkopošanas funkcijas, kas ir jālieto tabulām, lai ģenerētu to vērtības, un izveidojamo apkopojuma kolonnu nosaukumus.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Apkopojiet tabulas <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> kolonnā <code>[t]</code> norādītās tabulu kolonnas, lai iegūtu <code>[t.a]</code> summu, <code>[t.b]</code> minimālo un maksimālo vērtību un <code>[t.a]</code> vērtību skaitu.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Tiek saglabāta sākotnējā nobīde, un pēc tam tiek pārmaiņus paturētas un izlaistas nākamās rindas.",
        "Documentation.LongDescription": "Tiek saglabāta sākotnējā nobīde, un pēc tam tiek pārmaiņus paturētas un izlaistas nākamās rindas.\r\n    <ul>\r\n       <li><code>table</code>: ievades tabula.</li>\r\n       <li><code>offset</code>: pirms iterāciju sākšanas saglabājamo rindu skaits.</li>\r\n       <li><code>skip</code>: katras iterācijas ietvaros noņemamo rindu skaits.</li>\r\n       <li><code>take</code>: katras iterācijas ietvaros paturamo rindu skaits.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet tabulu no tabulas, saglabājot pirmo rindu un pēc tam secīgi izlaižot 1 vērtību un paturot 1 vērtību.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Norādītās kolonnas tiek apvienotas jaunā kolonnā, izmantojot norādīto apvienošanas funkciju.",
        "Documentation.LongDescription": "Norādītās kolonnas tiek apvienotas jaunā kolonnā, izmantojot norādīto apvienošanas funkciju.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Apvieno vārdus un uzvārdus, atdalot tos ar komatu, jaunā kolonnā.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Apvieno norādītās kolonnas jaunā ieraksta vērtību kolonnā, kurā katram ierakstam ir lauku nosaukumi un vērtības, kas atbilst to kolonnu nosaukumiem un vērtībām, kuras tika apvienotas.",
        "Documentation.LongDescription": "Norādītās \"<code>table</code>\" kolonnas apvieno jaunā ieraksta vērtības kolonnā ar nosaukumu <code>newColumnName</code>, kur katram ierakstam ir lauku nosaukumi un vērtības, kas atbilst kombinētās kolonnas nosaukumiem un vērtībām. Ja objektam <code>options</code> tiek norādīts ieraksts, var norādīt šādas opcijas: \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: ja norādīts kā teksts, norāda, ka norādītais kolonnas nosaukums ir jāizmanto kā ieraksta parādāmais vārds. Tai nav jābūt kādai no paša ieraksta kolonnām.</li>\r\n     <li> <code>TypeName</code>: ja norādīts kā teksts, nodrošina iegūtā ieraksta loģiskā tipa nosaukumu, ko var izmantot datu ielādes laikā, lai vadītu ielādes vides darbību.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Tiek izveidots kolonnas dublikāts, piešķirot tam norādīto nosaukumu. Vērtības un tips tiek kopēti no avota kolonnas.",
        "Documentation.LongDescription": "Dublējiet kolonnu ar nosaukumu <code>columnName</code> tabulā <code>table</code>. Vērtības un tips kolonnai <code>newColumnName</code> tiek kopēti no kolonnas <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Dublicēt kolonnu \"a\" kolonnā \"copied column\" tabulā <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Ierakstu kolonna tiek izvērsta kolonnās, norādot katru vērtību.",
        "Documentation.LongDescription": "Ievades <code>table</code> norādot ierakstu <code>column</code>, tiek izveidota tabula ar kolonnu katram ieraksta laukam. Pēc izvēles var norādīt <code>newColumnNames</code>, lai nodrošinātu unikālus kolonnu nosaukumus jaunajā tabulā.\r\n    <ul>\r\n        <li><code>table</code>: sākotnējā tabula ar izvēršamo ierakstu kolonnu. </li>\r\n        <li><code>column</code>: izvēršamā kolonna.</li>\r\n        <li><code>fieldNames</code>: lauku saraksts, ko tabulā izvērst kolonnās.</li>\r\n        <li><code>newColumnNames</code>: jaunajām kolonnām piešķiramo kolonnu nosaukumu saraksts. Jaunie kolonnu nosaukumi nevar dublēt nevienu kolonnu jaunajā tabulā.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kolonnu [a] tabulā <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> izvērsiet 3 kolonnās: aa, bb un cc.",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Ierakstu kolonna vai tabulu kolonna tiek izvērsta vairākās kolonnās ietverošajā tabulā.",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>] tabulas tiek izvērstas vairākās rindās un kolonnās. <code>columnNames</code> tiek lietots, lai atlasītu no iekšējās tabulas izvēršamās kolonnas. Norādiet <code>newColumnNames</code>, lai nerastos konflikti starp esošajām un jaunajām kolonnām.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>[a]</code> tabulas kolonnas tabulā <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> izvērsiet 3 kolonnās: <code>[t.a]</code>, <code>[t.b]</code> un <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Grupē tabulas rindas, pamatojoties uz atslēgu aptuveno atbilstību.",
        "Documentation.LongDescription": "Grupē <code>table</code> rindas pēc aptuvenās atbilstības vērtībām norādītajā kolonnā <code>key</code>.\r\n    Katrai grupai tiek izveidots ieraksts, kurā ir iekļautas atslēgas kolonnas (un to vērtības) kopā ar visām apkopotajām kolonnām, ko norāda <code>aggregatedColumns</code>.\r\n    Šī funkcija nevar garantēt fiksētas rindu secības atgriešanu.\r\n    <p>Var iekļaut papildu <code>options</code> kopu, lai norādītu, kā salīdzināt atslēgas kolonnas. Opcijas ietver: \r\n    <ul>\r\n<li><code>Culture</code> : Atļauj ierakstu grupēšanu atbilstoši kultūrspecifiskām kārtulām. Tas var būt jebkurš derīgs kultūras nosaukums. Piemēram, kultūras opcija &quot;ja-JP&quot; grupē ierakstus atbilstoši japāņu valodas kultūrai. Noklusējuma vērtība ir &quot;&quot;, kas grupē atbilstoši angļu valodas invarianta kultūrai.</li>\r\n<li><code>IgnoreCase</code> : Loģiskā vērtība (true/false), kas atļauj reģistrnejutīgu atslēgu grupēšanu. Piemēram, ja true, &quot;Vīnogas&quot; tiek grupētas ar &quot;vīnogas&quot;. Noklusējuma vērtība ir true.</li>\r\n<li><code>IgnoreSpace</code> : Loģiskā vērtība (true/false), kas ļauj kombinēt teksta daļas, lai atrastu grupas. Piemēram, ja true, &quot;Vīn ogas&quot; tiek grupēts ar &quot;Vīnogas&quot;. Noklusējuma vērtība ir true.</li>\r\n<li><code>SimilarityColumnName</code> : Kolonnas nosaukums, kas norāda ievades vērtības līdzību ar šīs ievades reprezentatīvo vērtību. Noklusējuma vērtība ir Null, un tādā gadījumā jauna kolonna līdzībām netiek pievienota.</li>\r\n<li><code>Threshold</code> : Skaitlis diapazonā 0,00 līdz 1,00, kas norāda līdzības vērtējumu, pie kura tiks grupētas divas vērtības.\r\n    Piemēram, &quot;Vīnogas&quot; un &quot;Vīnoas&quot; (trūkst &quot;g&quot;),) tiek grupētas kopā tikai tad, ja šī opcija ir iestatīta uz mazāku par 0,90.\r\n    Slieksnis 1,00 atļauj tikai precīzas atbilstības.\r\n    (Ņemiet vērā, ka aptuvenā &quot;precīzā atbilstība&quot; var ignorēt atšķirības, piemēram, lielos burtus, vārdu secību un pieturzīmes.)\r\n    Noklusējuma vērtība ir 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabula, kas ļauj grupēt ierakstus atbilstoši pielāgotu vērtību kartējumiem. Tajā ir jābūt kolonnām &quot;No&quot; un &quot;Uz&quot;. Piemēram, vērtība &quot;Vīnogas&quot; tiek grupēta ar &quot;Rozīnes&quot;, ja transformācijas tabulā kolonna &quot;No&quot;, kurā ir vērtība &quot;Vīnogas&quot;, kolonna &quot;Uz&quot;, kas kurā ir vērtība &quot;Rozīnes&quot;. Ņemiet vērā, ka transformācija tiks lietota visiem transformācijas tabulas teksta gadījumiem. Izmantojot iepriekšminēto transformācijas tabulu, teksts &quot;Vīnogas ir saldas&quot; tiks grupēts arī ar tekstu &quot;Rozīnes ir saldas&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Grupējiet tabulu, pievienojot apkopojuma kolonnu [Count], kurā ir norādīts darbinieku skaits katrā atrašanās vietā (\"each Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Rindas no abām aptuveni atbilstošajām tabulām tiek savienotas, pamatojoties uz norādītajām atslēgām.",
        "Documentation.LongDescription": "<p>Rindas no <code>table1</code> savieno ar rindām no <code>table2</code>, pamatojoties uz vērtību aptuveno atbilstību atslēgas kolonnās, kuras ir atlasītas pēc <code>key1</code> (attiecībā uz <code>table1</code>) un <code>key2</code> (attiecībā uz <code>table2</code>).</p>\r\n<p>Aptuvenā atbilstība ir salīdzinājums, kas balstīts uz teksta līdzību, ne vienādību.</p>\r\n<p>Pēc noklusējuma tiek veikta iekšējā savienošana, taču var iekļaut papildu <code>joinKind</code>, lai norādītu savienojuma veidu. Opcijas ietver:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Papildu <code>joinOptions</code> komplekts var tikt iekļauts, lai norādītu, kā salīdzināt atslēgas kolonnas. Opcijas iekļauj:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Skaitlis diapazonā no 1 līdz 8, kas norāda to paralēlo pavedienu skaitu, ko izmantot aptuvenajai atbilstībai. Noklusējuma vērtība ir 1.</li>\r\n<li><code>Culture</code> : Atļauj ierakstu saskaņošanu atbilstoši kultūrspecifiskām kārtulām. Tas var būt jebkurš derīgs kultūras nosaukums. Piemēram, kultūras opcija &quot;ja-JP&quot; saskaņo ierakstus atbilstoši japāņu valodas kultūrai. Noklusējuma vērtība ir &quot;&quot;, kas saskaņo atbilstoši angļu valodas invarianta kultūrai.</li>\r\n<li><code>IgnoreCase</code> : Loģiskā vērtība (true/false), kas atļauj reģistrnejutīgu atslēgu saskaņošanu. Piemēram, ja true, &quot;Vīnogas&quot; tiek saskaņotas ar &quot;vīnogas&quot;. Noklusējuma vērtība ir true.</li>\r\n<li><code>IgnoreSpace</code> : Loģiskā vērtība (true/false), kas ļauj kombinēt teksta daļas, lai atrastu atbilstības. Piemēram, ja true, &quot;Vīn ogas&quot; tiek saskaņots ar &quot;Vīnogas&quot;. Noklusējuma vērtība ir true.</li>\r\n<li><code>NumberOfMatches</code> : Vesels skaitlis, kas norāda maksimālo atbilstošo rindu skaitu, ko var atgriezt katrai ievades rindai. Piemēram, vērtība 1 atgriezīs tikai vienu atbilstošu rindu katrai ievades rindai. Ja šī opcija netiek norādīta, tiek atgrieztas visas atbilstošās rindas.</li>\r\n<li><code>SimilarityColumnName</code> : Kolonnas nosaukums, kas norāda ievades vērtības līdzību ar šīs ievades reprezentatīvo vērtību. Noklusējuma vērtība ir Null, un tādā gadījumā jauna kolonna līdzībām netiek pievienota.</li>\r\n<li><code>Threshold</code> : Skaitlis diapazonā no 0,00 līdz 1,00, kas norāda līdzības vērtējumu, pie kura tiks atrastas divas vērtības.\r\n   Piemēram, &quot;Vīnogas&quot; un &quot;Vīnoas&quot; (trūkst &quot;g&quot;),) tiek saskaņotas tikai tad, ja šī opcija ir iestatīta uz mazāku par 0,90.\r\n    Slieksnis 1,00 atļauj tikai precīzas atbilstības.\r\n    (Ņemiet vērā, ka aptuvenā &quot;precīzā atbilstība&quot; var ignorēt atšķirības, piemēram, lielos burtus, vārdu secību un pieturzīmes.)\r\n Noklusējuma vērtība ir 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabula, kas ļauj saskaņot ierakstus atbilstoši pielāgotu vērtību kartējumiem. Tajā ir jābūt kolonnām &quot;No&quot; un &quot;Uz&quot;. Piemēram, vērtība &quot;Vīnogas&quot; tiek saskaņota ar &quot;Rozīnes&quot;, ja transformācijas tabulā kolonna &quot;No&quot;, kurā ir vērtība &quot;Vīnogas&quot;, kolonna &quot;Uz&quot;, kas kurā ir vērtība &quot;Rozīnes&quot;. Ņemiet vērā, ka transformācija tiks lietota visiem transformācijas tabulas teksta gadījumiem. Izmantojot iepriekšminēto transformācijas tabulu, teksts &quot;Vīnogas ir saldas&quot; tiks saskaņots arī ar tekstu &quot;Rozīnes ir saldas&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kreisās puses iekšējo aptuvenais divu tabulu apvienojums, pamatojoties uz [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Norādītajām kolonnām veic aptuvenu savienošanu starp tabulām un šīs savienošanas rezultātu nodrošina jaunā kolonnā.",
        "Documentation.LongDescription": "<p>Rindas no <code>table1</code> savieno ar rindām no <code>table2</code>, pamatojoties uz vērtību aptuveno atbilstību atslēgas kolonnās, kuras ir atlasītas pēc <code>key1</code> (attiecībā uz <code>table1</code>) un <code>key2</code> (attiecībā uz <code>table2</code>). Rezultāti tiek atgriezti jaunā kolonnā ar nosaukumu <code>newColumnName</code>.</p>\r\n<p>Aptuvenās atbilstības noteikšana ir salīdzinājums, pamatojoties uz teksta līdzību, nevis teksta vienādību.</p>\r\n<p>Neobligātais parametrs <code>joinKind</code> norāda, kāda veida savienošana ir jāveic. Pēc noklusējuma, ja parametrs <code>joinKind</code> nav norādīts, tiek veikta kreisā ārējā savienošana. Iespējamās opcijas:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Var ietvert neobligātu <code>joinOptions</code> kopu, lai norādītu, kā ir jāsalīdzina atslēgas kolonnas. Iespējamās opcijas:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Skaitlis diapazonā no 1 līdz 8, kas norāda to paralēlo pavedienu skaitu, ko izmantot aptuvenajai atbilstībai. Noklusējuma vērtība ir 1.</li>\r\n<li><code>Culture</code> : Atļauj ierakstu saskaņošanu atbilstoši kultūrspecifiskām kārtulām. Tas var būt jebkurš derīgs kultūras nosaukums. Piemēram, kultūras opcija &quot;ja-JP&quot; saskaņo ierakstus atbilstoši japāņu valodas kultūrai. Noklusējuma vērtība ir &quot;&quot;, kas saskaņo atbilstoši angļu valodas invarianta kultūrai.</li>\r\n<li><code>IgnoreCase</code> : Loģiskā vērtība (true/false), kas atļauj reģistrnejutīgu atslēgu saskaņošanu. Piemēram, ja true, &quot;Vīnogas&quot; tiek saskaņotas ar &quot;vīnogas&quot;. Noklusējuma vērtība ir true.</li>\r\n<li><code>IgnoreSpace</code> : Loģiskā vērtība (true/false), kas ļauj kombinēt teksta daļas, lai atrastu atbilstības. Piemēram, ja true, &quot;Vīn ogas&quot; tiek saskaņots ar &quot;Vīnogas&quot;. Noklusējuma vērtība ir true.</li>\r\n<li><code>NumberOfMatches</code> : Vesels skaitlis, kas norāda maksimālo atbilstošo rindu skaitu, ko var atgriezt katrai ievades rindai. Piemēram, vērtība 1 atgriezīs tikai vienu atbilstošu rindu katrai ievades rindai. Ja šī opcija netiek norādīta, tiek atgrieztas visas atbilstošās rindas.</li>\r\n<li><code>SimilarityColumnName</code> : Kolonnas nosaukums, kas norāda ievades vērtības līdzību ar šīs ievades reprezentatīvo vērtību. Noklusējuma vērtība ir Null, un tādā gadījumā jauna kolonna līdzībām netiek pievienota.</li>\r\n<li><code>Threshold</code> : Skaitlis diapazonā no 0,00 līdz 1,00, kas norāda līdzības vērtējumu, pie kura tiks atrastas divas vērtības.\r\n   Piemēram, &quot;Vīnogas&quot; un &quot;Vīnoas&quot; (trūkst &quot;g&quot;),) tiek saskaņotas tikai tad, ja šī opcija ir iestatīta uz mazāku par 0,90.\r\n    Slieksnis 1,00 atļauj tikai precīzas atbilstības.\r\n    (Ņemiet vērā, ka aptuvenā &quot;precīzā atbilstība&quot; var ignorēt atšķirības, piemēram, lielos burtus, vārdu secību un pieturzīmes.)\r\n Noklusējuma vērtība ir 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabula, kas ļauj saskaņot ierakstus atbilstoši pielāgotu vērtību kartējumiem. Tajā ir jābūt kolonnām &quot;No&quot; un &quot;Uz&quot;. Piemēram, vērtība &quot;Vīnogas&quot; tiek saskaņota ar &quot;Rozīnes&quot;, ja transformācijas tabulā kolonna &quot;No&quot;, kurā ir vērtība &quot;Vīnogas&quot;, kolonna &quot;Uz&quot;, kas kurā ir vērtība &quot;Rozīnes&quot;. Ņemiet vērā, ka transformācija tiks lietota visiem transformācijas tabulas teksta gadījumiem. Izmantojot iepriekšminēto transformācijas tabulu, teksts &quot;Vīnogas ir saldas&quot; tiks saskaņots arī ar tekstu &quot;Rozīnes ir saldas&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kreisās puses iekšējo aptuvenais divu tabulu apvienojums, pamatojoties uz [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Rindas tiek grupētas tabulā, kam ir tāda pati atslēga.",
        "Documentation.LongDescription": "Grupē vienuma <code>table</code> rindas pēc atslēgu kolonnām, kuras definētas ar <code>key</code>. <code>key</code> var būt gan vienas kolonnas nosaukums, gan kolonnu nosaukumu saraksts.\r\n    Katrai grupai tiek izveidots ieraksts, kas satur atslēgu kolonnas (un to vērtības), kā arī visas apkopotās kolonnas, kuras norāda <code>aggregatedColumns</code>.\r\n    Pēc izvēles var norādīt <code>groupKind</code> un <code>comparer</code>.<br>\r\n    <br>\r\n    Ja dati jau ir sakārtoti pēc atslēgu kolonnām, var norādīt GroupKind.Local <code>groupKind</code>. Tas dažos gadījumos var uzlabot grupēšanas veiktspēju,\r\n    tā kā tiek pieņemts, ka visas rindas ar noteiktu galveno vērtību kopumu ir blakus.<br>\r\n    <br>\r\n    Ievadot <code>comparer</code>, ņemiet vērā, ka, ja dažādus taustiņus uzskata par vienādiem, rindu var ievietot grupā, kuras atslēgas atšķiras no tās.<br>\r\n    <br>\r\n    Šī funkcija negarantē, ka tiek atgriezto rindu secība.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Grupējiet tabulu, pievienojot apkopotu kolonnu [total], kurā ietverta cenu summa (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Tabulā tiek ievietots rindu saraksts norādītajā pozīcijā.",
        "Documentation.LongDescription": "Tiek atgriezta tabula ar rindu sarakstu <code>rows</code>, kas ievietots <code>table</code> norādītajā pozīcijā <code>offset</code>. Katrai kolonnai ievietojamā rindā ir jāatbilst tabulas kolonnu tipiem.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tabulā ievietojiet rindu 1. pozīcijā.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Tabulā ievietojiet rindas 1. pozīcijā.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Rindas no abām atbilstošajām tabulām tiek savienotas, pamatojoties uz norādītajām atslēgām.",
        "Documentation.LongDescription": "<p>Savieno rindas no <code>table1</code> ar rindām no <code>table2</code>, ņemot vērā vērtības <code>key1</code> (vērtībai <code>table1</code>) un <code>key2</code> (vērtībai <code>table2</code>) atlasīto atslēgas kolonnu vērtību vienlīdzību.</p>\r\n<p>Pēc noklusējuma iekšējais savienojums tiek izveidots, tomēr var tikt ietverts papildu <code>joinKind</code>, lai norādītu savienojuma veidu. Ir pieejamas šādas opcijas:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Var tikt iekļauta papildu <code>keyEqualityComparers</code> kopa, lai norādītu, kā ir jāveic atslēgas kolonnu salīdzināšana. Šobrīd šis parametrs ir paredzēts tikai iekšējai lietošanai.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Apvienojiet divas tabulas, izmantojot vienu galveno kolonnu.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Savienojiet divas tabulas ar konfliktējošiem kolonnu nosaukumiem, izmantojot vairākas atslēgas kolonnas.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Tiek atgriezta(-s) lielākā(-s) rinda(-s), izmantojot norādītos kritērijus.",
        "Documentation.LongDescription": "Atgriež tabulas <code>table</code> rindas ar lielāko vērtību, ņemot vērā parametru <code>comparisonCriteria</code>.\r\n    Pēc rindu kārtošanas ir jānorāda parametrs <code>countOrCondition</code>, lai precīzāk filtrētu rezultātu. Ņemiet vērā, ka kārtošanas algoritms nevar nodrošināt nemainīgu kārtošanas rezultātu. Parametru <code>countOrCondition</code> var norādīt dažādos veidos.\r\n    <ul>\r\n        <li> Ja ir norādīts skaitlis, tiek atgriezts augošā secībā sakārtots saraksts, kurā vienumu skaits nepārsniedz parametra <code>countOrCondition</code> vērtību. </li>\r\n        <li> Ja ir norādīts nosacījums, tiek atgriezts to vienumu saraksts, kuri sākotnēji atbilst nosacījumam. Ja kāds vienums neatbilst nosacījumam, nākamie vienumi netiek pārbaudīti. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet tabulā rindu ar lielāko vērtību kolonnā [a] ar nosacījumu [a] > 0. Ņemiet vērā, ka rindas tiek kārtotas pirms filtra lietošanas.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Atrodiet tabulā rindu ar lielāko vērtību kolonnā [a] ar nosacījumu [b] > 0. Ņemiet vērā, ka rindas tiek kārtotas pirms filtra lietošanas.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Tiek atgriezta(-s) mazākā(-s) rinda(-s), izmantojot norādītos kritērijus.",
        "Documentation.LongDescription": "Tiek atgrieztas tabulas <code>table</code> rindas ar mazāko vērtību, ņemot vērā parametru <code>comparisonCriteria</code>. Pēc rindu kārtošanas ir jānorāda parametrs <code>countOrCondition</code>, lai precīzāk filtrētu rezultātu. Ņemiet vērā, ka kārtošanas algoritms nevar nodrošināt nemainīgu kārtošanas rezultātu. Parametru <code>countOrCondition</code> var norādīt dažādos veidos.\r\n    <ul>\r\n        <li> Ja ir norādīts skaitlis, tiek atgriezts augošā secībā sakārtots saraksts, kurā vienumu skaits nepārsniedz parametra <code>countOrCondition</code> vērtību. </li>\r\n        <li> Ja ir norādīts nosacījums, tiek atgriezts to vienumu saraksts, kuri sākotnēji atbilst nosacījumam. Ja kāds vienums neatbilst nosacījumam, nākamie vienumi netiek pārbaudīti. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet tabulā rindu ar mazāko vērtību kolonnā [a] ar nosacījumu [a] < 3. Ņemiet vērā, ka rindas tiek kārtotas pirms filtra lietošanas.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Atrodiet tabulā rindu ar mazāko vērtību kolonnā [a] ar nosacījumu [b] < 0. Ņemiet vērā, ka rindas tiek kārtotas pirms filtra lietošanas.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Tiek veikta tabulu savienošana pēc norādītajām kolonnām, un savienošanas rezultāts tiek ietverts jaunā kolonnā.",
        "Documentation.LongDescription": "<p>Savieno rindas no <code>table1</code> ar rindām no <code>table2</code>, ņemot vērā pēc vērtības <code>key1</code> (vērtībai <code>table1</code>) un <code>key2</code> (vērtībai <code>table2</code>) atlasīto atslēgas kolonnu vērtību vienlīdzību. Rezultāti tiek ievadīti kolonnā ar nosaukumu <code>newColumnName</code>.</p>\r\n<p>Neobligātā vērtība <code>joinKind</code> norāda izveidojamā savienojuma veidu. Pēc noklusējuma kreisais ārējais savienojums tiek izveidots, ja vērtība <code>joinKind</code> nav norādīta.</p>\r\n<p>Var tikt iekļauta papildu <code>keyEqualityComparers</code> kopa, lai norādītu, kā ir jāveic atslēgas kolonnu salīdzināšana. Šobrīd šis līdzeklis ir paredzēts tikai iekšējai lietošanai.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Apvienojiet divas tabulas, izmantojot vienu galveno kolonnu.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Ņemot vērā kolonnu pārus, kas pārstāv atribūtu vērtību pārus, dati atribūtu kolonnā tiek pārvērsti par kolonnu virsrakstiem.",
        "Documentation.LongDescription": "Ņemot vērā kolonnu pārus, kas pārstāv atribūtu vērtību pārus, dati atribūtu kolonnā tiek pārvērsti par kolonnu virsrakstiem.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Izmantojiet vērtības a, b un c tabulas <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> atribūtu kolonnā un novietojiet tās atsevišķās kolonnās.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Izmantojiet vērtības a, b un c tabulas <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> atribūtu kolonnā un novietojiet tās atsevišķās kolonnās.  Ar atslēgas x atribūtu c ir saistītas vairākas vērtības, tāpēc izmantojiet funkciju List.Max, lai novērstu konfliktu.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Tiek aizstāts norādītais rindu diapazons ar nodrošināto(-ajām) rindu(-ām).",
        "Documentation.LongDescription": "Tiek aizstāts norādītais rindu skaits <code>count</code> ievadē <code>table</code> ar norādīto <code>rows</code>, kas sākas pēc <code>offset</code>. <code>rows</code> parametram ir ierakstu saraksts.\r\n    <ul>\r\n       <li><code>table</code> tabula, kurā tiek veikta aizstāšana.</li>\r\n       <li><code>offset</code>: rindu skaits, kas jāizlaiž, pirms aizvietojuma veikšanas.</li>\r\n       <li><code>count</code>: aizstājamo rindu skaits.</li>\r\n       <li><code>rows</code>: rindu ierakstu saraksts, ko ievietot <code>table</code>, <code>offset</code> norādītajā atrašanās vietā.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Sākot no 1. pozīcijas, aizstājiet 3 rindas.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Viena vērtība tiek aizstāta ar citu vērtību norādītajās kolonnās.",
        "Documentation.LongDescription": "<code>oldValue</code> tiek aizstāta ar <code>newValue</code> norādītajās <code>table</code> kolonnās.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "B kolonnā aizstājiet tekstu \"uz redzēšanos\" ar \"pasaule\", kas atbilst tikai visai vērtībai.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "B kolonnā aizstājiet tekstu \"ur\" ar \"vai\", kas atbilst jebkurai vērtības daļai.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimizējiet ASV darbinieku vārdus.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimizējiet visas ASV darbinieku kolonnas.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Norādītās kolonnas tiek sadalītas papildu kolonnu kopā, izmantojot norādīto sadalīšanas funkciju.",
        "Documentation.LongDescription": "Norādītās kolonnas tiek sadalītas papildu kolonnu kopā, izmantojot norādīto sadalīšanas funkciju.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Sadalīt kolonnu [Name] divās kolonnās, sadalot vērtības burta “i” pozīcijā.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Kolonnu kopa tabulā tiek pārveidota par atribūtu vērtību pāriem.",
        "Documentation.LongDescription": "Kolonnu kopa tabulā tiek pārveidota par atribūtu vērtību pāriem, kas apvienota ar pārējām vērtībām katrā rindā.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Izmantojiet kolonnas a, b un c tabulā <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> un atceliet to novietošanu atribūtu vērtību pāros.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Tulko visas kolonnas, kas nav norādītā kopā, atribūta vērtības pāros.",
        "Documentation.LongDescription": "Tulko visas kolonnas, kas nav norādītā kopā, atribūta vērtības pāros apvienojumā ar pārējām vērtībām katrā rindā.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tulko visas kolonnas, kas nav norādītā kopā, atribūta vērtības pāros apvienojumā ar pārējām vērtībām katrā rindā.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams personiskā analīze",
        "Documentation.LongDescription": "<p>Teams analīzes savienotājs ļauj gūt ieskatu par Teams lietojumu. Dati ir pieejami par jūsu personiskajām Teams darbībām un darbībām darba grupās, kurās esat dalībnieks.</p>\r\n<p>Dati ir pieejami par iepriekšējām 90 dienām.</p>\r\n<p>Detalizētu informāciju par pieejamajiem datu veidiem skatiet šādā palīdzības dokumentācijā: </p>\r\n<ul>\r\n<li><b>Teams lietojums:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Teams lietotāja darbības:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Ievadiet organizācijas un projekta nosaukumu.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps pakalpojumi",
        "Documentation.LongDescription": "Tiek atgriezta Azure DevOps nodrošinātā OData plūsmu tabula."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Atgriež bināru formātu, kas satur bināru vērtību.",
        "Documentation.LongDescription": "Atgriež bināru formātu, kas satur bināru vērtību. Ja ir norādīts <code>length</code>, tas nozīmē, ka binārajā vērtībā ir tik daudz baitu. Ja nav norādīts <code>length</code>, tas nozīmē, ka binārajā vērtībā ir atlikušie baiti. Vērtību <code>length</code> var norādīt kā skaitli vai kā bināru formātu garumam, kas atrodas bināro datu priekšā.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Atgriež loģisku vērtību, pamatojoties uz divu norādīto vērtību vienādības pārbaudi.",
        "Documentation.LongDescription": "Atgriež <code>logical</code> vērtību, pamatojoties uz vienādības pārbaudi divām norādītajām vērtībām, <code>x</code> un <code>y</code>, izmantojot norādīto vērtību <code>x</code> <code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> ir <code>Salīdzinātājs</code>, kuru izmanto, lai kontrolētu salīdzināšanu.\r\nSalīdzināšanas funkcija pieņem divus argumentus un atgriež -1, 0 vai 1, balstoties uz to, vai pirmā vērtība ir mazāka, vienāda vai lielāka par otro vērtību.\r\n Salīdzinātājus var izmantot, lai nodrošinātu reģistrnejutīgu vai kultūrai un lokalizācijai atbilstošu salīdzināšanu.\r\n      </div>\r\n      <div>\r\n        Formulu valodā ir pieejami tālāk norādītie iebūvētie salīdzinātāji:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: izmanto precīzai kārtas skaitļu salīdzināšanai</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: izmanto precīzai kārtas skaitļu salīdzināšanai, kas nav reģistrjutīga</li>\r\n        <li> <code>Comparer.FromCulture</code>: izmanto, lai veiktu kultūrai atbilstošu salīdzināšanu</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Lai noteiktu, vai vērtības ir vienlīdzīgas, salīdziniet \"1\" un \"A\", izmantojot lokalizāciju \"en-US\".",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Atgriež pašreizējo datumu un laiku vietējā laika joslā. Šī vērtība ir fiksēta, un turpmākajās izsaukšanas reizēs tā netiks mainīta.",
        "Documentation.LongDescription": "Atgriež <code>datetime</code> vērtību kopu uz sistēmas pašreizējo datumu un laiku. Šī vērtība ir fiksēta, un turpmākajās izsaukšanas reizēs tā netiks mainīta, atšķirībā no vērtības DateTime.LocalNow, kas izteiksmes izpildīšanas gaitā var atgriezt dažādas vērtības.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Atgriež pašreizējo datumu un laiku vietējā laika joslā.",
        "Documentation.LongDescription": "Atgriež <code>datetime</code> vērtību kopu uz sistēmas pašreizējo datumu un laiku.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Atgriež pašreizējo datumu un laiku vietējā laika joslā. Šī vērtība ir fiksēta, un turpmākajās izsaukšanas reizēs tā netiks mainīta.",
        "Documentation.LongDescription": "Atgriež <code>datetime</code> vērtību kopu uz sistēmas pašreizējo datumu un laiku. Atgrieztā vērtība ietver informāciju par laika joslu, atainojot vietējo laika joslu. Šī vērtība ir fiksēta, un turpmākajās izsaukšanas reizēs tā netiks mainīta atšķirībā no vērtības DateTimeZone.LocalNow, kas izteiksmes izpildīšanas gaitā var atgriezt dažādas vērtības.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Atgriež pašreizējo datumu un laiku UTC (GMT laika joslā). Šī vērtība ir fiksēta, un turpmākajās izsaukšanas reizēs tā netiks mainīta.",
        "Documentation.LongDescription": "Atgriež pašreizējo datumu un laiku UTC (GMT laika joslā). Šī vērtība ir fiksēta, un turpmākajās izsaukšanas reizēs tā netiks mainīta.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Atgriež pašreizējo datumu un laiku vietējā laika joslā.",
        "Documentation.LongDescription": "Atgriež <code>datetimezone</code> vērtību kopu uz sistēmas pašreizējo datumu un laiku. \r\n    Atgrieztā vērtība ietver informāciju par laika joslu, atainojot vietējo laika joslu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Atgriež pašreizējo datumu un laiku UTC (GMT laika joslā).",
        "Documentation.LongDescription": "Atgriež pašreizējo datumu un laiku UTC (GMT laika joslā).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet pašreizējo datumu un laiku UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Tiek atgriezts necaurredzams identifikators tam novērtēšanas procesam, kas pašlaik darbojas.",
        "Documentation.LongDescription": "Tiek atgriezts necaurredzams identifikators tam novērtēšanas procesam, kas pašlaik darbojas.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Atgriež necaurspīdīgu identifikatoru, lai saistītu ienākošos pieprasījumus ar izejošajiem.",
        "Documentation.LongDescription": "Atgriež necaurspīdīgu identifikatoru, lai saistītu ienākošos pieprasījumus ar izejošajiem.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Raksta izsekošanas ierakstu, ja izsekošana ir iespējota, un atgriež vērtību.",
        "Documentation.LongDescription": "Raksta izsekošanu <code>message</code>, ja izsekošana ir iespējota, un atgriež <code>value</code>. Neobligāts parametrs <code>delayed</code> norāda, vai atlikt vienuma <code>value</code> novērtēšanu līdz ziņojuma izsekošanas pabeigšanai. Parametram <code>traceLevel</code> var būt viena no tālāk norādītajām vērtībām:\r\n    <code>TraceLevel.Critical</code>,\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Pirms funkcijas Text.From izsaukšanas izsekot ziņojumam un atgriezt rezultātu.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Pašreizējā resursdatora noklusējuma identitātes nodrošinātājs.",
        "Documentation.LongDescription": "Pašreizējā resursdatora noklusējuma identitātes nodrošinātājs.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Tiek apkopota saraksta vienumu kopsavilkuma vērtība.",
        "Documentation.LongDescription": "Tiek apkopota saraksta <code>list</code> vienumu kopsavilkuma vērtība, izmantojot <code>accumulator</code>.\r\n    Varat iestatīt papildu sākotnējās vērtības parametru <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Tiek apkopota saraksta {1, 2, 3, 4, 5} vienumu kopsavilkuma vērtība, izmantojot izteiksmi ((state, current) => state + current).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Tiek ģenerēts datuma, laika un laika joslas vērtību saraksts noteiktai sākotnējai vērtībai, vērtību skaitam un pakāpeniska ilguma palielinājuma vērtībai.",
        "Documentation.LongDescription": "Tiek atgriezts tipa <code>datetimezone</code> vērtību saraksts, kura vērtību skaits ir <code>count</code> un pirmā vērtība ir <code>start</code>. Norādītais palielinājums <code>step</code> ir tipa <code>duration</code> vērtība, kas tiek pieskaitīta katrai saraksta vērtībai.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet 10 vērtību sarakstu, kura pirmā vērtība ir 5 minūtes pirms Jaungada dienas (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) un katra nākamā vērtība ir palielināta par 1 minūti (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Tiek ģenerēts datuma un laika vērtību saraksts noteiktai sākotnējai vērtībai, vērtību skaitam un pakāpeniska ilguma palielinājuma vērtībai.",
        "Documentation.LongDescription": "Tiek atgriezts tipa <code>datetime</code> vērtību saraksts, kura vērtību skaits ir <code>count</code> un pirmā vērtība ir <code>start</code>. Norādītais palielinājums <code>step</code> ir tipa <code>duration</code> vērtība, kas tiek pieskaitīta katrai saraksta vērtībai.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet 10 vērtību sarakstu, kura pirmā vērtība ir 5 minūtes pirms Jaungada dienas (#datetime(2011, 12, 31, 23, 55, 0)) un katra nākamā vērtība ir palielināta par 1 minūti (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Tiek ģenerēts datuma vērtību saraksts noteiktai sākotnējai vērtībai, vērtību skaitam un pakāpeniska ilguma palielinājuma vērtībai.",
        "Documentation.LongDescription": "Tiek atgriezts tipa <code>date</code> vērtību saraksts, kura vērtību skaits ir <code>count</code> un pirmā vērtība ir <code>start</code>. Norādītais palielinājums <code>step</code> ir tipa <code>duration</code> vērtība, kas tiek pieskaitīta katrai saraksta vērtībai.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet 5 vērtību sarakstu, kura pirmā vērtība ir Jaungada priekšvakars (#date(2011, 12, 31)) un katra nākamā vērtība ir palielināta par 1 dienu (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Tiek ģenerēts tipa duration vērtību saraksts atbilstoši norādītajai sākotnējai vērtībai, vērtību skaitam un tipa duration palielinājuma vērtībai.",
        "Documentation.LongDescription": "Tiek atgriezts <code>count</code> tipa <code>duration</code> vērtību saraksts, kura pirmā vērtība ir <code>start</code> un katra nākamā vērtība ir palielināta par norādīto tipa <code>duration</code> vērtību <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet 5 vērtību sarakstu, kura pirmā vērtība ir 1 stunda un katra nākamā vērtība ir palielināta par stundu.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Tiek ģenerēts vērtību saraksts.",
        "Documentation.LongDescription": "Tiek ģenerēts vērtību saraksts, izmantojot norādītās funkcijas. Funkcija <code>initial</code> ģenerē sākuma kandidāta vērtību, kas pēc tam tiek pārbaudīta pret <code>condition</code>.\r\n    Ja kandidāta vērtība ir apstiprināta, tad tā tiek atgriezta kā daļa no iegūtā saraksta, un nākamā kandidāta vērtība tiek ģenerēta, nododot jaunapstiprināto vērtību <code>next</code>.\r\n    Kad kandidāta vērtība neatbilst <code>condition</code>, saraksta ģenerēšanas process tiek apturēts.\r\n    Lai pārveidotu vienumus iegūtajā sarakstā, var norādīt arī neobligātu parametru, <code>selector</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu, sākot ar desmit, atkārtoti samazinot par vienu un nodrošinot, ka katrs vienums ir lielāks par nulli.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Ģenerējiet sarakstu ar ierakstiem, kas satur x un y, kur x ir vērtība un y ir saraksts. Vērtībai x ir jābūt mazākai par 10 un jānorāda vienumu skaitu sarakstā y. Pēc saraksta ģenerēšanas tiek atgrieztas tikai x vērtības.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Sarakstā tiek ievietotas vērtības atbilstoši norādītajam indeksam.",
        "Documentation.LongDescription": "Tiek atgriezts jauns saraksts, kas ir izveidots, ievietojot saraksta <code>values</code> vērtības sarakstā <code>list</code> atbilstoši indeksam <code>index</code>. Pirmajai pozīcijai sarakstā atbilst indekss 0.\r\n      <ul>\r\n        <li><code>list</code>: mērķa saraksts, kurā ir jāievieto vērtības.</li>\r\n        <li><code>index</code>: mērķa saraksta (<code>list</code>) indekss, atbilstoši kuram ir jāievieto vērtības. Pirmajai pozīcijai sarakstā atbilst indekss 0.</li>\r\n        <li><code>values</code>: sarakstā <code>list</code> ievietojamo vērtību saraksts.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ievietojiet sarakstu ({3, 4}) mērķa sarakstā ({1, 2, 5}) atbilstoši indeksam 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Ievietojiet sarakstu ar ligzdotu sarakstu ({1, {1.1, 1.2}}) mērķa sarakstā ({2, 3, 4}) atbilstoši indeksam 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Sākot no norādītās pozīcijas, norādītais skaits vērtību tiek aizstāts ar aizstājējvērtībām.",
        "Documentation.LongDescription": "Sākot no norādītās pozīcijas <code>index</code>, <code>count</code> saraksta <code>list</code> vērtības tiek aizstātas ar sarakstu <code>replaceWith</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Aizstājiet saraksta {1, 2, 7, 8, 9, 5} daļu {7, 8, 9} ar sarakstu {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Sarakstā tiek meklēta norādītā vērtība, un tā tiek aizstāta.",
        "Documentation.LongDescription": "Vērtību sarakstā <code>list</code> tiek meklēta vērtība <code>oldValue</code>, un katrs tās gadījums tiek aizstāts ar aizstājējvērtību <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Aizstājiet visas saraksta {\"a\", \"B\", \"a\", \"a\"} vērtības a ar vērtību A.",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Tiek ģenerēts laika vērtību saraksts atbilstoši norādītajai sākotnējai vērtībai, vērtību skaitam un pakāpeniska ilguma palielinājuma vērtībai.",
        "Documentation.LongDescription": "Tiek atgriezts tipa <code>time</code> vērtību saraksts, kura vērtību skaits ir <code>count</code> un pirmā vērtība ir <code>start</code>. Norādītais palielinājums <code>step</code> ir tipa <code>duration</code> vērtība, kas tiek pieskaitīta katrai saraksta vērtībai.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet 4 vērtību sarakstu, kura pirmā vērtība ir dienas vidus (#time(12, 0, 0)) un katra nākamā vērtība ir palielināta par vienu stundu (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Tiek atgriezts saraksts, kura elementi ir iegūti no ievades saraksta, izmantojot norādītās transformācijas funkcijas.",
        "Documentation.LongDescription": "Tiek atgriezts saraksts, kura elementi ir projicēti no ievades saraksta.<br>\r\n    <br>\r\n    Funkcija <code>collectionTransform</code> katru elementu pārveido starpniekelementu sarakstā, un funkcija <code>resultTransform</code> saņem sākotnējo elementu, kā arī starpniekelementu sarakstā esošu elementu, lai izveidotu galīgo rezultātu.<br>\r\n    <br>\r\n    Funkcijai <code>collectionTransform</code> ir paraksts <code>(x kā jebkurš) kā saraksts => ...</code>, kur <code>x</code> ir elements <code>list</code>.\r\n    Funkcija <code>resultTransform</code> izveido rezultāta formu un tās paraksts ir <code>(x kā jebkurš, y kā jebkurš) kā jebkurš => ...</code>, kur <code>x</code> ir elements <code>list</code> un <code>y</code> ir elements no saraksta, kas ģenerēts, novirzot <code>x</code> uz <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Izplājiet personu un viņu mājdzīvnieku sarakstu.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Tiek atgriezts gadījumskaitlis.",
        "Documentation.LongDescription": "Tiek atgriezts gadījumskaitlis diapazonā no 0 līdz 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet gadījumskaitli.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Ierakstam tiek pievienots lauks.",
        "Documentation.LongDescription": "Ierakstam <code>record</code> tiek pievienots lauks atbilstoši norādītajam lauka nosaukumam <code>fieldName</code> un vērtībai <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet ierakstam lauku \"Address\".",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Ievades datos tiek aizstāts teksts.",
        "Documentation.LongDescription": "Sākotnējā virknē <code>text</code> teksts <code>old</code> tiek aizstāts ar tekstu <code>new</code>. Šo aizstāšanas funkciju var izmantot izteiksmēs <code>List.ReplaceValue</code> un <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Virknē hEllo world aizstājiet tekstu hE ar tekstu He.",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Norādītajos ievades datos tiek aizstātas vērtības.",
        "Documentation.LongDescription": "Sākotnējā sarakstā vai tabulā <code>value</code> vērtība <code>old</code> tiek aizstāta ar vērtību <code>new</code>. Šo aizstāšanas funkciju var izmantot izteiksmēs <code>List.ReplaceValue</code> un <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Aizstājiet vērtību 11 ar vērtību 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Atgriež JSON rezultātu no Smartsheet API",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Izsauc Smartsheet 2.0 REST API norādītajā galapunktā un atgriež rezultātus kā JSON ierakstu.",
        "Documentation.Examples": [
          {
            "Description": "Atgādā datus no lapu Smartsheet API galapunkta ar norādītajiem papildu argumentiem",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Smartsheet API atgrieztā tabula ar informāciju par lapām"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.TestContents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Tiek atgriezta funkcija, kas nenodrošina sadali un atgriež argumentu kā viena elementa sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezta funkcija, kas nenodrošina sadali un atgriež argumentu kā viena elementa sarakstu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši baltstarpas pozīcijai, izveidojot teksta vērtību sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši baltstarpas pozīcijai, izveidojot teksta vērtību sarakstu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Sadalīt ievadi pēc baltstarpas rakstzīmēm, apstrādājot pēdiņas tāpat kā citas rakstzīmes.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Tabula tiek sadalīta tabulu sarakstā, pamatojoties uz norādīto grupu un kolonnu skaitu.",
        "Documentation.LongDescription": "<code>table</code> tiek sadalīta <code>groups</code> saraksta tabulās, pamatojoties uz <code>column</code> vērtību un <code>hash</code> funkciju.\r\n    <code>hash</code> funkcija tiek lietota <code>column</code> rindas vērtībai, lai rindai iegūtu jaucējvērtību. Jaucējvērtības modulis <code>groups</code> nosaka, kurās atgrieztajās tabulās rinda tiks ievietota.\r\n    <ul>\r\n       <li><code>table</code>: sadalāmā tabula.</li>\r\n       <li><code>column</code>: jaucamā kolonna, lai noteiktu, kurā atgrieztajā tabulā ir rinda.</li>\r\n       <li><code>groups</code>: norāda, cik tabulās tiks sadalīta ievades tabula.</li>\r\n       <li><code>hash</code>: funkcija, kas tiek lietota, lai iegūtu jaucējvērtību.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tabulu <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> sadaliet 2 tabulās kolonnā [a], izmantojot kolonnu vērtību kā jaucējfunkciju.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Atgriež ievades <code>text</code> daļu starp norādītajiem elementiem <code>startDelimiter</code> un <code>endDelimiter</code>.\r\n    Neobligāta skaitliska vērtība <code>startIndex</code> norāda, kurš no elementiem <code>startDelimiter</code> ir jāņem vērā.\r\n    Neobligāts saraksts <code>startIndex</code> norāda, kurš no elementiem <code>startDelimiter</code> ir jāņem vērā, kā arī vai indeksēšana ir jāveic no ievades sākuma vai beigām.\r\n    Elements <code>endIndex</code> ir līdzīgs, izņemot to, ka indeksēšana tiek veikta attiecībā pret sarakstu <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Iegūt ievades “111 (222) 333 (444)” daļu starp (pirmo) atverošo iekavu un tai sekojošo (pirmo) aizverošo iekavu.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Iegūt ievades “111 (222) 333 (444)” daļu starp otro atverošo iekavu un tai sekojošo pirmo aizverošo iekavu.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Iegūt ievades “111 (222) 333 (444)” daļu starp otro atverošo iekavu no beigām un tai sekojošo otro aizverošo iekavu.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Viena teksta vērtība tiek ievietota citas teksta vērtības noteiktā pozīcijā.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas iegūts, ievietojot teksta vērtību <code>newText</code> teksta vērtībā <code>text</code> pozīcijā <code>offset</code>. Pozīcijas sākas ar skaitli 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Ievietojiet C starp B un D šeit: ABD.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Tiek atgriezts jauns, nejaušs vispārēji unikāls identifikators (GUID).",
        "Documentation.LongDescription": "Tiek atgriezts jauns, nejaušs vispārēji unikāls identifikators (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Tekstā tiek aizstāti visi norādītās apakšvirknes gadījumi.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas iegūts, aizstājot visus teksta vērtības <code>old</code> gadījumus teksta vērtībā <code>text</code> ar teksta vērtību <code>new</code>. Šī funkcija ir reģistrjutīga.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Visi “the” gadījumi teikumā tiek aizstāti ar “a”.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Tiek noņemts rakstzīmju diapazons un tiek ievietota jauna vērtība norādītajā pozīcijā.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas iegūts, noņemot rakstzīmju skaitu <code>count</code> no teksta vērtības <code>text</code>, sākot no pozīcijas <code>offset</code>, un pēc tam ievietojot teksta vērtību <code>newText</code> tajā pašā pozīcijā <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Viena rakstzīme 2. pozīcija teksta vērtībā ABGF tiek aizstāta ar jaunu teksta vērtību CDE.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Atslēga tiek pievienota norādītajam tabulas tipam.",
        "Documentation.LongDescription": "Atslēga tiek pievienota norādītajam tabulas tipam.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Tiek atgriezts to identitāšu saraksts, kas tiks akceptētas saskaņā ar nosacījumu.",
        "Documentation.LongDescription": "<p>Izmantojot norādīto <code>identityProvider</code>, konvertē <code>condition</code> identitāšu sarakstā, kam <code>condition</code> atgriež vērtību <code>true</code> visos atļaujas kontekstos, kuros identitātes nodrošinātājs ir <code>identityProvider</code>. Kļūda rodas tad, ja <code>condition</code> neizdodas konvertēt identitāšu sarakstā, piemēram, ja lēmuma pieņemšanā <code>condition</code> izmanto atribūtus, kas nav lietotāja vai grupas identitātes.</p>\r\n    <p>Ņemiet vērā, ka identitāšu sarakstā identitātes tiek iekļautas tādas, kādas tās ir <code>condition</code>, un tām netiek veiktas nekādas normalizēšanas darbības (piemēram, grupas paplašināšana).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Binārā vērtība tiek saspiesta, izmantojot norādīto saspiešanas tipu.",
        "Documentation.LongDescription": "Saspiež bināro vērtību, izmantojot norādīto saspiešanas tipu. Veicot šo izsaukumu, tiek iegūta saspiesta ievadīto datu kopija. Ir pieejami tālāk norādītie saspiešanas tipi.\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Saspiediet bināro vērtību.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Atspiež bināro vērtību, izmantojot norādīto saspiešanas tipu.",
        "Documentation.LongDescription": "Atspiež bināro vērtību, izmantojot norādīto saspiešanas tipu.  Veicot šo izsaukumu, tiek iegūta atspiesta ievadīto datu kopija. Ir pieejami tālāk norādītie saspiešanas tipi.\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Atspiest bināro vērtību.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Atgriež binārās vērtības apakškopu, kas sākas atbilstoši norādītajai nobīdei.",
        "Documentation.LongDescription": "Atgriež binārās vērtības apakškopu, kas sākas atbilstoši nobīdei <code>binary</code>. Izmantojot papildu parametru <code>offset</code>, var iestatīt maksimālo apakškopas garumu.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Atgriež binārās vērtības apakškopu, kas sākas ar nobīdi 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Atgriež binārās vērtības apakškopu ar garumu 2, sākot ar nobīdi 6.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Sadala norādīto bināro elementu bināro failu sarakstā, izmantojot norādītos lappuses izmērus.",
        "Documentation.LongDescription": "Sadala <code>binary</code> bināro failu sarakstā, kur pirmais izvades saraksta elements ir binārs, kas satur pirmos <code>pageSize</code> baitus no\r\n    bināra avota, nākamais izvades saraksta elements ir binārs, kas satur nākamos <code>pageSize</code> baitus no bināra avota, un tā tālāk.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Izveido vai izvērš bināru ar lietotāja definētiem apdarinātājiem vaicājumu un darbību operācijām.",
        "Documentation.LongDescription": "<p>Atgriež <code>binary</code> skatu, kur <code>handlers</code> norādītās funkcijas tiek izmantotas operācijas noklusējuma darbības vietā, kad operācija tiek lietota skatam.</p>\r\n<p>Ja <code>binary</code> ir norādīta, visas apdarinātāja funkcijas nav obligātas. Ja <code>binary</code> nav norādīta, <code>GetStream</code> apdarinātāja funkcijas ir obligātas. Ja apdarinātāja funkcija operācijai nav norādīta, tās vietā vienumam <code>binary</code> tiek lietota operācijas noklusējuma darbība (izņemot <code>GetExpression</code> gadījumu).</p>\r\n<p>Apdarinātāja funkcijām jāatgriež vērtība, kas ir semantiski ekvivalenta rezultātam, kas tiek iegūts, lietojot operāciju vienumam <code>binary</code> (vai <code>GetExpression</code> gadījumā rezultāta skatam).</p>\r\n<p>Ja apdarinātāja funkcija izraisa kļūdu, skatam tiek lietota operācijas noklusējuma darbība.</p>\r\n<p><code>Binary.View</code> var izmantot, lai ieviestu datu avota locīšanu — M vaicājumu tulkojumu avotam atbilstošās operācijās (piemēram, lai lejupielādētu faila sadaļu).</p>\r\n<p>Pilnīgāku <code>Binary.View</code> aprakstu skatiet publicētajā Power Query pielāgotā savienotāja dokumentācijā.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet pamata skatu, kuram nav nepieciešama piekļuve datiem, lai noteiktu garumu.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Atgriež bināru formātu, kura baitu secība ir norādīta funkcijā.",
        "Documentation.LongDescription": "Atgriež bināru formātu, kura baitu secība ir norādīta ar <code>binaryFormat</code>.  Noklusējuma baitu secība ir <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Atgriež bināru formātu, kas izvēlas nākamo bināro formātu, ņemot vērā jau nolasītu vērtību.",
        "Documentation.LongDescription": "Atgriež bināru formātu, kas izvēlas nākamo bināro formātu, ņemot vērā jau nolasītu vērtību.  Ar šo funkciju izveidotā binārā formāta vērtība darbojas pakāpeniski:<ul>\r\n<li>Vērtības nolasīšanai tiek izmantots ar parametru <code>binaryFormat</code> norādītais binārais formāts.</li>\r\n<li>Šī vērtība tiek nodota izvēlētajai funkcijai, ko norādīja parametrs <code>chooseFunction</code>.</li>\r\n<li>Izvēlētā funkcija pārbauda vērtību un atgriež otru bināro formātu.</li>\r\n<li>Otrs binārais formāts tiek izmantots otras vērtības nolasīšanai.</li>\r\n<li>Ja ir norādīta kombinēšanas funkcija, tad pirmā un otrā vērtība tiek nodota kombinēšanas funkcijai un tiek atgriezta rezultāta vērtība.</li>\r\n<li>Ja kombinēšanas funkcija nav norādīta, tiek atgriezta otrā vērtība.</li>\r\n<li>Tiek atgriezta otrā vērtība.</li>\r\n</ul>Neobligātais parametrs <code>type</code> norāda tipu tam binārajam formātam, ko atgriezīs izvēlēta funkcija.  Var norādīt tipu <code>type any</code>, <code>type list</code> vai <code>type binary</code>.  Ja parametrs <code>type</code> nav norādīts, tad tiek izmantots tips <code>type any</code>.   Ja tiek izmantots tips <code>type list</code> vai <code>type binary</code>, tad sistēma var atgriezt straumes <code>binary</code> vai <code>list</code> vērtību, nevis buferī ievietotu vērtību, un tas var samazināt formāta nolasīšanai nepieciešamo atmiņas daudzumu.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Nolasīt baitu sarakstu, kur elementu skaitu nosaka pirmais baits.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Nolasīt baitu sarakstu, kur elementu skaitu nosaka pirmais baits, un saglabāt pirmo nolasīto baitu.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Nolasīt baitu sarakstu, kur elementu skaitu nosaka pirmais baits, izmantojot straumes sarakstu.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Atgriež bināru formātu, kas satur vienumu grupu.",
        "Documentation.LongDescription": "Parametri ir norādīti tālāk.\r\n<ul>\r\n<li>Parametrs <code>binaryFormat</code> norāda atslēgas vērtības bināro formātu.</li>\r\n<li>Parametrs <code>group</code> sniedz informāciju par zināmo vienumu grupu.</li>\r\n<li>Neobligāto parametru <code>extra</code> var izmantot, lai norādītu funkciju, kura atgriezīs bināra formāta vērtību tādai vērtībai, kura atrodas aiz jebkuras neparedzētas atslēgas.  Ja parametrs <code>extra</code> nav norādīts, tad gadījumos, ja tiek izmantotas neparedzētas atslēgas vērtības, tiek aktivizēta kļūda.</li>\r\n</ul>\r\nParametrs <code>group</code> norāda vienumu definīciju sarakstu.  Katra vienuma definīcija ir saraksts ar 3–5 vērtībām, kā parādīts tālāk.\r\n<ul>\r\n<li>Atslēgas vērtība.  Vienumam atbilstošā atslēgas vērtība.  Vienumu kopā šai vērtībai ir jābūt unikālai.</li>\r\n<li>Vienuma formāts.  Vienuma vērtībai atbilstošais binārais formāts.  Izmantojot šo vērtību, katram vienumam var būt citāds formāts. </li>\r\n<li>Vienuma gadījumi.  Vērtība <code>BinaryOccurrence.Type</code> (Bināro gadījumu veids), kura norāda, cik šī vienuma gadījumu ir paredzēts attiecīgajā grupā.   Ja trūkst obligāto vienumu, tad rodas kļūda.  Obligāti un neobligāti vienumu dublikāti tiek apstrādāti kā neparedzētas atslēgas vērtības.</li>\r\n<li>Noklusējuma vienuma vērtība (neobligāta).  Ja noklusējuma vienuma vērtība ir norādīta vienuma definīciju sarakstā un tā nav Null, tad šī vērtība tiek izmantota noklusējuma vietā.  Atkārtoto un neobligāto vienumu noklusējums ir Null, un atkārtoto vērtību noklusējums ir tukšs saraksts { }.</li>\r\n<li>Vienuma vērtības transformēšana (neobligāta).   Ja vienuma vērtības transformēšanas funkcija ir norādīta vienuma definīciju sarakstā un tā nav Null, tad pirms vienuma atgriešanas tā tiek izsaukta, lai pārveidotu vienuma vērtību.  Transformēšanas funkcija tiek izsaukta tikai tad, ja vienums atrodas ievadē (tā nekad netiek izsaukta ar noklusējuma vērtību). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Nākamajā procedūrā tiek pieņemts, ka atslēgas vērtība ir viens baits, grupā ir paredzēti 4 vienumi, un tiem visiem aiz atslēgas ir datu baits.  Vienumi ievadē tiek parādīti tālāk aprakstītajā veidā.\r\n<ul>\r\n<li>Atslēga 1 ir obligāta, un tā tiek parādīta ar vērtību 11.</li>\r\n<li>Atslēga 2 atkārtojas, tā divreiz ir norādīta ar vērtību 22, un rezultāta vērtība ir { 22, 22 }.</li>\r\n<li>Atslēga 3 ir neobligāta, tā netiek parādīta, un rezultāta vērtība ir Null.</li>\r\n<li>Atslēga 4 atkārtojas, bet netiek parādīta, un rezultāta vērtība ir { }.</li>\r\n<li>Atslēga 5 nav daļa no grupas, bet tiek vienreiz parādīta ar vērtību 55.  Papildu funkcija tiek izsaukta ar atslēgas vērtību 5 un atgriež formātu, kas atbilst šai vērtībai (BinaryFormat.Byte).  Vērtība 55 tiek nolasīta un atmesta.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Nākamajā piemērā ir parādīta vienuma vērtības transformācija un noklusējuma vienuma vērtība.   Atkārtotais vienums ar atslēgu 1 summē ar List.Sum nolasīto vērtību summu.  Neobligātajam vienumam ar atslēgu 2 noklusējuma vērtība ir 123, nevis Null.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Atgriež bināro formātu, kas ierobežo nolasāmo datu apjomu.",
        "Documentation.LongDescription": "Atgriež bināro formātu, kas ierobežo nolasāmo datu apjomu. Gan <code>BinaryFormat.List</code>, gan <code>BinaryFormat.Binary</code> var izmantot lasīšanai līdz datu beigām. <code>BinaryFormat.Length</code> var izmantot, lai ierobežotu nolasāmo baitu skaitu. Parametrs <code>binaryFormat</code> norāda ierobežojamo bināro formātu. Parametrs <code>length</code> norāda nolasāmo baitu skaitu. Parametrs <code>length</code> var būt skaitliska vērtība vai bināra formāta vērtība, kas norāda formātu garuma vērtībai, kura tiek rādīta pirms vērtības nolasīšanas.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Lasot baitu sarakstus, ierobežot nolasīto baitu skaitu uz 2.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Lasot baitu sarakstus, ierobežot nolasāmo baitu skaitu uz baitu vērtību, kas norādīta saraksta priekšā.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Atgriež bināru formātu, kas transformēs ar citu bināro formātu nolasītās vērtības.",
        "Documentation.LongDescription": "Atgriež bināru formātu, kas transformēs ar citu bināro formātu nolasītās vērtības.  Parametrs <code>binaryFormat</code> nosaka bināro formātu, kas tiks izmantots vērtības lasīšanai.  Ar nolasīto vērtību tiek izsaukta funkcija <code>function</code>, un tiek atgriezta transformētā vērtība.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Nolasīt baitu un pievienot tam vienu.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Atgriež salīdzināšanas funkciju, kas izmanto kārtas skaitļa kārtulas, lai salīdzinātu vērtības.",
        "Documentation.LongDescription": "Atgriež salīdzinātāja funkciju, kas izmanto kārtas skaitļu kārtulas, lai salīdzinātu norādītās vērtības <code>x</code> un <code>y</code>.<br>\r\n        <br>\r\n        Salīdzināšanas funkcija pieņem divus argumentus un atgriež -1, 0 vai 1, balstoties uz to, vai pirmā vērtība ir mazāka, vienāda vai lielāka par otro vērtību.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Izmantojot kārtas skaitļa kārtulas, salīdziniet, vai vērtības \"encyclopædia\" un \"encyclopaedia\" ir vienādas. Ņemiet vērā, ka šīs vērtības ir vienādas, izmantojot <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Atgriež salīdzināšanas funkciju, kura nav reģistrjutīga un kura norādīto vērtību salīdzināšanai izmanto kārtas kārtulas.",
        "Documentation.LongDescription": "Atgriež reģistrnejutīgu salīdzinātāja funkciju, kas izmanto kārtas skaitļu kārtulas, lai salīdzinātu norādītās vērtības <code>x</code> un <code>y</code>.<br>\r\n        <br>\r\n        Salīdzināšanas funkcija pieņem divus argumentus un atgriež -1, 0 vai 1, balstoties uz to, vai pirmā vērtība ir mazāka, vienāda vai lielāka par otro vērtību.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Izmantojot kārtas kārtulas, kas nav reģistrjutīgas, salīdzina \"Abc\" un \"abc\". Izmantojot <code>Comparer.Ordinal</code>, \"Abc\" ir mazāks nekā \"abc\".",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Atgriež dimensijas atribūta rekvizītu.",
        "Documentation.LongDescription": "Atgriež rekvizītu <code>propertyName</code> no dimensijas atribūta <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Atgriež mēra rekvizītu (šūnas rekvizīts).",
        "Documentation.LongDescription": "Atgriež mēra <code>measure</code> rekvizītu <code>propertyName</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL vaicājuma avots",
        "Documentation.LongDescription": "Definējiet Databricks datu avotu SQL vaicājumu palaišanai"
      },
      "ReturnType": "Databricks SQL vaicājums",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL vaicājuma avots",
        "Documentation.LongDescription": "Definējiet Databricks datu avotu SQL vaicājumu palaišanai"
      },
      "ReturnType": "Databricks SQL vaicājums",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Pievieno datumam norādītās dienas.",
        "Documentation.LongDescription": "Atgriež rezultātu <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> no <code>numberOfDays</code> dienu pievienošanas <code>datetime</code> vērtībai <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kam tiek pievienotas dienas.</li>\r\n      <li><code>numberOfDays</code>: pievienojamo dienu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet 5 dienas <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībai, kas apzīmē datumu 14.05.2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Pievieno datumam norādītos mēnešus.",
        "Documentation.LongDescription": "Atgriež <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> rezultātu no <code>numberOfMonths</code> mēnešu pievienošanas <code>datetime</code> vērtībai <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kam tiek pievienoti mēneši.</li>\r\n        <li><code>numberOfMonths</code>: pievienojamo mēnešu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet 5 mēnešus <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībai, kas apzīmē datumu 14.05.2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Pievienojiet 18 mēnešus <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībai, kas apzīmē datumu un laiku 14.05.2011. plkst. 08:15:22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Pievieno datumam norādītos ceturkšņus.",
        "Documentation.LongDescription": "Atgriež <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> rezultātu no <code>numberOfQuarters</code> ceturkšņu pievienošanas <code>datetime</code> vērtībai <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kam tiek pievienoti ceturkšņi.</li>\r\n      <li><code>numberOfQuarters</code>: pievienojamo ceturkšņu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet 1 ceturksni <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībai, kas apzīmē datumu 14.05.2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Pievieno datumam norādītās nedēļas.",
        "Documentation.LongDescription": "Atgriež <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> rezultātu no <code>numberOfWeeks</code> nedēļu pievienošanas <code>datetime</code> vērtībai <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kam tiek pievienotas nedēļas.</li>\r\n      <li><code>numberOfWeeks</code>: pievienojamo nedēļu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pievienot 2 nedēļas <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībai, kas apzīmē datumu 14.05.2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Pievieno datumam norādītos gadus.",
        "Documentation.LongDescription": "Atgriež <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> rezultātu no <code>numberOfYears</code> pievienošanas <code>datetime</code> vērtībai <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kam tiek pievienoti gadi.</li>\r\n        <li><code>numberOfYears</code>: pievienojamo gadu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet 4 gadus <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībai, kas apzīmē datumu 14.05.2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Pievienojiet 10 gadus <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībai, kas apzīmē datumu un laiku 14.05.2011. plkst. 08:15:22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajās dienās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā dienā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajās dienās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā dienā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>days</code>: dienu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai šī diena (pēc pašreizējā sistēmas laika) ir nākamajās divās dienās.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajos mēnešos atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā mēnesī.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajos mēnešos atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā mēnesī.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>months</code>: mēnešu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai šis mēnesis (pēc pašreizējā sistēmas laika) ir nākamajos divos mēnešos.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajos ceturkšņos atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā ceturksnī.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajos ceturkšņos atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā ceturksnī.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>quarters</code>: ceturkšņu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai šis ceturksnis (pēc pašreizējā sistēmas laika) ir nākamajos divos ceturkšņos.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajās nedēļās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā nedēļā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajās nedēļās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā nedēļā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>weeks</code>: nedēļu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai šī nedēļa (pēc pašreizējā sistēmas laika) ir nākamajās divās nedēļās.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajos gados atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā gadā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajos gados atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā gadā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>years</code>: gadu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai šis gads (pēc pašreizējā sistēmas laika) ir nākamajos divos gados.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējās dienās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā dienā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējās dienās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā dienā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>days</code>: dienu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai iepriekšējā diena (pirms pašreizējā sistēmas laika) ir divās iepriekšējās dienās.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējos mēnešos atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā mēnesī.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējos mēnešos atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā mēnesī.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>months</code>: mēnešu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai iepriekšējais mēnesis (pirms pašreizējā sistēmas laika) ir divos iepriekšējos mēnešos.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējos ceturkšņos atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā ceturksnī.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējos ceturkšņos atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā ceturksnī.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>quarters</code>: ceturkšņu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai iepriekšējais ceturksnis (pirms pašreizējā sistēmas laika) ir divos iepriekšējos ceturkšņos.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējās nedēļās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā nedēļā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējās nedēļās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā nedēļā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>weeks</code>: nedēļu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai iepriekšējā nedēļa (pirms pašreizējā sistēmas laika) ir divās iepriekšējās nedēļās.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējos gados atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā gadā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējos gados atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā gadā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>years</code>: gadu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai iepriekšējais gads (pirms pašreizējā sistēmas laika) ir divos iepriekšējos gados.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Pievieno informāciju par laika joslu datetime vērtībai.",
        "Documentation.LongDescription": "Pievieno informāciju par laika joslu <code>dateTime</code> vērtībai. Informācija par laika joslu ietver <code>timezoneHours</code> un neobligāti <code>timezoneMinutes</code>, kas norāda vēlamo nobīdi no UTC laika.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Iestatiet laika joslu uz UTC+7:30 (7 stundas un 30 minūtes pēc UTC laika).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir nākamajās stundās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā stundā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajās stundās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā stundā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>hours</code>: stundu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai stunda pēc pašreizējā sistēmas laika ir nākamās divas stundas.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir nākamajās minūtēs atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā minūtē.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajās minūtēs atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā minūtē.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>minutes</code>: minūšu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai minūte pēc pašreizējā sistēmas laika ir nākamajās divās minūtēs.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir nākamajās sekundēs atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā sekundē.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajās sekundēs atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā sekundē.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>seconds</code>: sekunžu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai sekunde pēc pašreizējā sistēmas laika ir nākamajās divās sekundēs.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir iepriekšējās stundās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā stundā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējās stundās atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā stundā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>hours</code>: stundu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai stunda pirms pašreizējā sistēmas laika ir iepriekšējās divās stundās.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir iepriekšējās minūtēs atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā minūtē.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējās minūtēs atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā minūtē.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>minutes</code>: minūšu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai minūte pirms pašreizējā sistēmas laika ir iepriekšējās divās minūtēs.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir iepriekšējās sekundēs atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā sekundē.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējās sekundēs atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā sekundē.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      <li><code>seconds</code>: sekunžu skaits.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai sekunde pirms pašreizējā sistēmas laika ir iepriekšējās divās sekundēs.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Maina vērtības laika joslu.",
        "Documentation.LongDescription": "Maina informāciju par laika joslu datetimezone vērtībai <code>dateTimeZone</code> uz jauno informāciju par laika joslu, kas norādīta ar <code>timezoneHours</code> un neobligāto <code>timezoneMinutes</code>.\r\n    Ja vērtībai <code>dateTimeZone</code> nav laika joslas komponenta, tiek aktivizēts izņēmums.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mainīt informāciju par laika joslu vērtībai #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) uz 8 stundām.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Mainiet informāciju par laika joslu vērtībai #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) uz -30 minūtes.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Piekļūt vērtībai pēc nosaukuma iegultā jaucējprogrammā.",
        "Documentation.LongDescription": "Piekļūt vērtībai pēc nosaukuma iegultā jaucējprogrammā.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Papildus funkcijai, kas izmanto viena saraksta argumentu, izveido funkciju ar īpašu parametra parakstu",
        "Documentation.LongDescription": "Izmantojot unāro funkciju <code>function</code>, izveido jaunu <code>functionType</code> tipa funkciju, kura izveido sarakstu no tās argumentiem un nodod to <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Pārvērš List.Sum divu argumentu funkcijā, kuras argumenti ir saskaitīti",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Pārvērš funkciju, sadalot sarakstu divu argumentu funkcijā",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Tiek izsaukta norādītā funkcija.",
        "Documentation.LongDescription": "Tiek izsaukta norādītā funkcija, izmantojot norādīto argumentu sarakstu, un tiek atgriezts rezultāts.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Tiek izsaukta funkcija Record.FieldNames ar vienu argumentu [A=1,B=2].",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Pēc norādītā ilguma tiek izsaukta konkrētā funkcija.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tiek iegūts, pēc ilguma <code>delay</code> izsaucot funkciju <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Papildus vektora funkcijai izveido skalāru funkciju, apvienojot vairākas izsaukšanas.",
        "Documentation.LongDescription": "<p>Atgriež skalāru funkciju ar tipu <code>scalarFunctionType</code>, kas izsauc <code>vectorFunction</code> ar vienu argumentu rindu un atgriež tā vienkāršo izvadi. Turklāt, kad skalārā funkcija tiek atkārtoti lietota katrai ievades tabulas rindai, piemēram, Table.AddColumn, tā vietā vektrora funkcija <code>vectorFunction</code> visām ievadēm tiek lietota vienreiz.</p>\r\n<p><code>vectorFunction</code> tiks nodots uz tabulu, kuras kolonnu nosaukums un pozīcija atbilst <code>scalarFunctionType</code> parametriem. Katrā šīs tabulas rindā ir argumenti vienam izsaukumam uz skalāro funkciju, un kolonnas atbilst <code>scalarFunctionType</code> parametriem.</p>\r\n<p><code>vectorFunction</code> ir jāatgriež tāda paša garuma saraksts kā ievades tabulai, kuras vienumam katrā pozīcijā ir nepieciešams tāds pats rezultāts kā skalārās fukcijas vērtējumam tās pašas pozīcijas ievades rindā.</p>\r\n<p>Ievades tabulu ir paredzēts iestraumēt, tādēļ tiek gaidīts, ka <code>vectorFunction</code> savu izvadi straumē, ienākot ievadei, vienlaikus strādājot tikai ar vienu ievades porciju. Konkrētāk — <code>vectorFunction</code> nedrīkst uzskaitīt savu ievades tabulu vairākas reizes.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Izveido ierakstu, kas no daļām atveido ģeogrāfisku punktu.",
        "Documentation.LongDescription": "Izveido ierakstu, kas atveido ģeogrāfisku punktu no tā sastāvdaļām, piemēram, platuma, garuma, un, ja ir, augstuma (Z) un mēra (M). Var norādīt papildu teritoriālās atskaites identifikatoru (SRID), ja tas atšķiras no noklusējuma vērtības (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Izveido ierakstu, kas no daļām atveido ģeometrisku punktu.",
        "Documentation.LongDescription": "Izveido ierakstu, kas atveido ģeogrāfisku punktu no tā sastāvdaļām, piemēram, koordinātas X, koordinātas Y, un, ja ir, koordinātas Z un mēra (M). Var norādīt papildu teritoriālās atskaites identifikatoru (SRID), ja tas atšķiras no noklusējuma vērtības (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Izveido identitāti.",
        "Documentation.LongDescription": "Izveido identitāti.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Nosaka, vai identitāte ir iekļauta identitāšu kolekcijā.",
        "Documentation.LongDescription": "Nosaka, vai identitāte ir iekļauta identitāšu kolekcijā.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Tiek atgriezts saraksts, kurā ir ietverti visi sarakstā esošie nobīdes elementi, kuru numurs ir nepāra skaitlis.",
        "Documentation.LongDescription": "Tiek atgriezts saraksts, kurā ir ietverti visi sarakstā esošie nobīdes elementi, kuru numurs ir nepāra skaitlis. Atkarībā no parametriem tiek iegūtas vai izlaistas noteiktas saraksta <code>list</code> vērtības.\r\n    <ul>\r\n    <li><code>count</code>: tiek norādīts katrā izpildes reizē izlaižamo vērtību skaits.</li>\r\n    <li><code>repeatInterval</code>: papildu atkārtošanas intervāls, ar kuru tiek norādīts starp izlaistajām vērtībām pievienojamo vērtību skaits.</li>\r\n    <li><code>offset</code>: papildu nobīdes parametrs, ar kuru tiek norādīts, ka vērtību izlaišana ir jāsāk atbilstoši sākotnējai nobīdei.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu no saraksta {1..10}, izlaižot pirmo skaitli.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Izveidojiet sarakstu no saraksta {1..10}, izlaižot katru otro skaitli.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Izveidojiet sarakstu no saraksta {1..10}, ietverot skaitli 1 un izlaižot katru otro skaitli.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Izveidojiet sarakstu no saraksta {1..10}, ietverot skaitli 1, izlaižot vienu vērtību, ietverot divas nākamās vērtības utt.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Tiek norādīts, vai sarakstā ir ietverta konkrētā vērtība.",
        "Documentation.LongDescription": "Norāda, vai sarakstā <code>list</code> ir ietverta vērtība <code>value</code>.\r\n    Ja sarakstā tiek atrasta vērtība, tiek atgriezta vērtība True, pretējā gadījumā tiek atgriezta vērtība False. Varat norādīt papildu vienādojuma kritēriju vērtību <code>equationCriteria</code>, lai kontrolētu vienādības pārbaudi. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Uzziniet, vai sarakstā {1, 2, 3, 4, 5} ir ietverta vērtība 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Uzziniet, vai sarakstā {1, 2, 3, 4, 5} ir ietverta vērtība 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Tiek norādīts, vai sarakstā ir ietvertas visas cita saraksta vērtības.",
        "Documentation.LongDescription": "Tiek norādīts, vai sarakstā <code>list</code> ir ietvertas visas cita saraksta <code>values</code> vērtības.\r\n    Ja sarakstā tiek atrasta vērtība, tiek atgriezta vērtība True, pretējā gadījumā tiek atgriezta vērtība False. Varat norādīt papildu vienādojuma kritērija vērtību <code>equationCriteria</code>, lai kontrolētu vienādības pārbaudi. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Uzziniet, vai sarakstā {1, 2, 3, 4, 5} ir ietvertas vērtības 3 un 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Uzziniet, vai sarakstā {1, 2, 3, 4, 5} ir ietvertas vērtības 5 un 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Tiek norādīts, vai sarakstā ir ietverta kāda no cita saraksta vērtībām.",
        "Documentation.LongDescription": "Tiek norādīts, vai sarakstā <code>list</code> ir ietverta kāda no cita saraksta <code>values</code> vērtībām.\r\n        Ja sarakstā tiek atrasta vērtība, tiek atgriezta vērtība True, pretējā gadījumā tiek atgriezta vērtība False. Varat norādīt papildu vienādojuma kritērija vērtību <code>equationCriteria</code>, lai kontrolētu vienādības pārbaudi. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Uzziniet, vai sarakstā {1, 2, 3, 4, 5} ir ietverta vērtība 3 vai 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Uzziniet, vai sarakstā {1, 2, 3, 4, 5} ir ietverta vērtība 6 vai 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Tiek atgriezta divu skaitļu sarakstu kovariācija.",
        "Documentation.LongDescription": "Tiek atgriezta sarakstu <code>numberList1</code> un <code>numberList2</code> kovariācija. Sarakstos <code>numberList1</code> un <code>numberList2</code> ir jābūt vienādam tipa <code>number</code> vērtību skaitam.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Aprēķiniet divu sarakstu kovariāciju.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Tiek atgriezta divu norādīto sarakstu starpība.",
        "Documentation.LongDescription": "Atgriež saraksta <code>list1</code> vienumus, kas nav ietverti sarakstā <code>list2</code>. Tiek atbalstīti vērtību dublikāti.\r\n    Varat norādīt papildu vienādojuma kritēriju vērtību <code>equationCriteria</code>, lai kontrolētu vienādības pārbaudi. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet vienumus, kas nav ietverti sarakstā {4, 5, 3}, sarakstā {1, 2, 3, 4, 5}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Iegūstiet saraksta {1, 2} vienumus, kas nav ietverti sarakstā {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Tiek atgriezts to vērtību (tostarp ierakstu lauku) saraksts, kurās ir ietverts norādītais teksts.",
        "Documentation.LongDescription": "Tiek atgriezts to saraksta <code>list</code> vērtību saraksts, kurās ir ietverta vērtība <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {\"a\", \"b\", \"ab\"} teksta vērtības, kas atbilst vērtībai a. ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Tiek atgriezta saraksta pirmā vienumu kopa atbilstoši norādītajam atgriežamo vienumu skaitam vai kvalifikācijas nosacījumam.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Ja ir norādīts skaitlis, tiek atgriezts šāds vai mazāks skaits vienumu. </li>\r\n  <li>Ja ir norādīts nosacījums, tiek atgriezti visi vienumi, kas sākotnēji atbilst šim nosacījumam. Ja kāds vienums neatbilst nosacījumam, nākamie vienumi netiek apstrādāti. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {3, 4, 5, -1, 7, 8, 2} sākotnējās vērtības, kas ir lielākas par 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Tiek atgriezta vērtība True, ja visas saraksta vērtības atbilst nosacījuma funkcijai.",
        "Documentation.LongDescription": "Tiek atgriezta vērtība <code>true</code>, ja visas saraksta <code>list</code> vērtības atbilst nosacījuma funkcijai <code>condition</code>, pretējā gadījumā tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai visas saraksta {11, 12, 13} vērtības ir lielākas par 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Nosakiet, vai visas saraksta {1, 2, 3} vērtības ir lielākas par 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Tiek atgriezta vērtība True, ja kāda no vērtībām atbilst nosacījuma funkcijai.",
        "Documentation.LongDescription": "Tiek atgriezta vērtība <code>true</code>, ja kāda no saraksta <code>list</code> vērtībām atbilst nosacījuma funkcijai <code>condition</code>, pretējā gadījumā tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Uzziniet, vai kāda no saraksta {9, 10, 11} vērtībām ir lielāka par 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Uzziniet, vai kāda no saraksta {1, 2, 3} vērtībām ir lielāka par 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Tiek atgriezta(-s) saraksta maksimālā(-s) vērtība(-s). Ir jānorāda atgriežamo vērtību skaits vai filtrēšanas nosacījums.",
        "Documentation.LongDescription": "Atgriež saraksta <code>list</code> maksimālo(-ās) vērtību(-as).\r\n    Varat norādīt papildu parametrus, lai precizētu rezultātu filtrēšanu pēc rindu sakārtošanas. Izmantojot papildu parametru <code>countOrCondition</code>, tiek norādīts atgriežamo vērtību skaits vai filtrēšanas nosacījums. Izmantojot papildu parametru <code>comparisonCriteria</code>, tiek norādīts saraksta vērtību salīdzināšanas veids.\r\n <ul>\r\n        <li> <code>list</code>: vērtību saraksts.</li>\r\n        <li> <code>countOrCondition</code>: ja ir norādīts skaitlis, tiek atgriezts augošā secībā sakārtotu vienumu saraksts, kura ierakstu skaits nepārsniedz <code>countOrCondition</code> vērtību. Ja ir norādīts nosacījums, tiek atgriezts to vienumu saraksts, kas sākotnēji atbilst nosacījumam. Ja kāds vienums neatbilst nosacījumam, nākamie vienumi netiek apstrādāti.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Neobligāti]</i> varat norādīt papildu <code>comparisonCriteria</code> vērtību, lai noteiktu saraksta vienumu salīdzināšanas veidu. Ja šī parametra vērtība ir Null, tiek lietota noklusējuma salīdzināšana.\r\n </ul>>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Tiek atgriezta(-s) saraksta minimālā(-s) vērtība(-s). Varat norādīt atgriežamo vērtību skaitu vai filtrēšanas nosacījumu.",
        "Documentation.LongDescription": "Atgriež saraksta <code>list</code> minimālo(-ās) vērtību(-as).\r\n    Izmantojot parametru <code>countOrCondition</code>, tiek norādīts atgriežamo vērtību skaits vai filtrēšanas nosacījums. Izmantojot papildu parametru <code>comparisonCriteria</code>, tiek norādīts saraksta vērtību salīdzināšanas veids.\r\n <ul>\r\n        <li> <code>list</code>: vērtību saraksts.</li>\r\n        <li> <code>countOrCondition</code>: ja ir norādīts skaitlis, tiek atgriezts augošā secībā sakārtotu vienumu saraksts, kura ierakstu skaits nepārsniedz <code>countOrCondition</code> vērtību. Ja ir norādīts nosacījums, tiek atgriezts to vienumu saraksts, kas sākotnēji atbilst nosacījumam. Ja kāds vienums neatbilst nosacījumam, nākamie vienumi netiek apstrādāti. Ja šī parametra vērtība ir Null, tiek atgriezta saraksta mazākā vērtība.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Neobligāti]</i> varat norādīt papildu <code>comparisonCriteria</code> vērtību, lai noteiktu saraksta vienumu salīdzināšanas veidu. Ja šī parametra vērtība ir Null, tiek lietota noklusējuma salīdzināšana.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta <code>{3, 4, 5, -1, 7, 8, 2}</code> 5 mazākās vērtības.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Tiek atgriezts skaitļu saraksts atbilstoši norādītajai sākotnējai vērtībai, vērtību skaitam un papildu palielinājuma vērtībai.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļu saraksts atbilstoši norādītajai sākotnējai vērtībai, vērtību skaitam un papildu palielinājuma vērtībai. Noklusējuma palielinājuma vērtība ir 1.\r\n<ul>\r\n   <li><code>start</code>: saraksta sākotnējā vērtība.</li>\r\n   <li><code>count</code>: izveidojamo vērtību skaits.</li>\r\n   <li><code>increment</code>: <i>(papildu)</i> palielinājuma vērtība. Ja šī vērtība nav norādīta, saraksta vērtības tiek palielinātas par 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Ģenerējiet 10 secīgu skaitļu sarakstu, kura pirmā vērtība ir 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Ģenerējiet 10 skaitļu sarakstu, kura pirmā vērtība ir 1 un katrs nākamais skaitlis ir palielināts par 2.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Atgriež vienu vai vairākus procentiļu paraugus, kas atbilst norādītajām varbūtībām.",
        "Documentation.LongDescription": "Atgriež vienu vai vairākus saraksta <code>list</code> procentiļu paraugus. Ja vērtība <code>percentiles</code> ir skaitlis diapazonā no 0,0 līdz 1,0, tā tiek apstrādāta kā procentile, bet rezultāts ir\r\n    atsevišķa vērtība, kas atbilst šai varbūtībai. Ja vērtība <code>percentiles</code> ir skaitļu saraksts ar vērtībām no 0,0 līdz 1,0, tad rezultāts ir procentiļu saraksts,\r\n    kas atbilst ievades varbūtībai. <code>options</code> opciju PercentileMode var izmantot pieredzējuši lietotāji, lai atlasītu konkrētāku interpolācijas metodi, taču tas nav ieteicams vairākumā lietošanas gadījumu.\r\n    Sākotnēji definētie simboli <code>PercentileMode.ExcelInc</code> un <code>PercentileMode.ExcelExc</code> atbilst interpolācijas metodēm, ko izmanto Excel funkcijas\r\n    <code>PROCENTILES.INC</code> un <code>PROCENTILES.EXC</code>. Noklusējuma darbība atbilst simbolam <code>PercentileMode.ExcelInc</code>. Simboli\r\n    <code>PercentileMode.SqlCont</code> un <code>PercentileMode.SqlDisc</code> atbilst SQL Server funkcijas <code>PERCENTILE_CONT</code> un\r\n    <code>PERCENTILE_DISC</code> darbībai.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta <code>{5, 3, 1, 7, 9}</code> pirmo procentili.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Iegūstiet saraksta <code> {5, 3, 1, 7, 9} </code> procentiles, izmantojot interpolācijas metodi, kas atbilst Excel funkcijai <code>PROCENTILES.EXC</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Tiek atgrieztas vērtības nobīdes sarakstā.",
        "Documentation.LongDescription": "Atgriež vērtības <code>value</code> pozīcijas nobīdi sarakstā <code>list</code>. Ja šī vērtība nav ietverta sarakstā, tiek atgriezta vērtība -1.\r\n    Varat norādīt papildu gadījumu parametru <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: maksimālais parādāmo gadījumu skaits.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet vērtības 3 pozīciju sarakstā {1, 2, 3}.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Tiek atgriezta vērtības pirmā nobīde sarakstā.",
        "Documentation.LongDescription": "Atgriež saraksta <code>values</code> vērtības pirmā gadījuma nobīdi sarakstā <code>list</code>. Ja nav atrasts neviens gadījums, tiek atgriezta vērtība -1.\r\n    Varat norādīt papildu gadījumu parametru <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: maksimālais atgriežamo gadījumu skaits.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet vērtības 2 vai 3 pirmo pozīciju sarakstā {1, 2, 3}.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Tiek atgriezta saraksta apakškopa, kas sākas atbilstoši norādītajai nobīdei.",
        "Documentation.LongDescription": "Tiek atgriezta saraksta apakškopa, kas sākas atbilstoši nobīdei <code>list</code>. Izmantojot papildu parametru <code>offset</code>, var iestatīt maksimālo apakškopas vienumu skaitu.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitļu saraksta no 1 līdz 10 apakškopu, kas sākas atbilstoši nobīdei 6.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Iegūstiet skaitļu saraksta no 1 līdz 10 apakškopu, kas sākas atbilstoši nobīdei 6 un kurā ir 2 vienumi.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "No pirmā saraksta tiek noņemti visi vienumi, kas ir ietverti otrajā sarakstā.",
        "Documentation.LongDescription": "No saraksta <code>list1</code> tiek noņemti visi sarakstā <code>list2</code> norādīto vērtību gadījumi. Ja sarakstā <code>list1</code> nav ietvertas saraksta <code>list2</code> vērtības, tiek atgriezts sākotnējais saraksts.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet no saraksta {1, 2, 3, 4, 2, 5, 5} sarakstā {2, 4, 6} ietvertos vienumus.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Tiek noņemti visi ievades vērtību gadījumi.",
        "Documentation.LongDescription": "No saraksta <code>list1</code> tiek noņemti visi sarakstā <code>list2</code> norādīto vērtību gadījumi. Ja sarakstā <code>list1</code> nav ietvertas saraksta <code>list2</code> vērtības, tiek atgriezts sākotnējais saraksts.\r\n    Varat norādīt papildu vienādojuma kritērija vērtību <code>equationCriteria</code>, lai kontrolētu vienādības pārbaudi. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu no saraksta {1, 2, 3, 4, 5, 5}, neietverot sarakstu {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Tiek noņemts noteikts vērtību skaits, sākot no norādītās pozīcijas.",
        "Documentation.LongDescription": "No saraksta <code>list</code> tiek noņemtas <code>count</code> vērtības, sākot no norādītās pozīcijas <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet no saraksta {1, 2, 3, 4, -6, -2, -1, 5} 3 vērtības, sākot no indeksa 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Tiek atgriezts saraksts, kurā norādītās reizes ir atkārtoti ietverts sākotnējais saraksts.",
        "Documentation.LongDescription": "Tiek atgriezts saraksts, kurā <code>count</code> reizes ir atkārtoti ietverts sākotnējais saraksts <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu, kurā 3 reizes ir atkārtoti ietverts saraksts {1, 2}.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Tiek veikti visi pāra { old, new } aizvietojumi.",
        "Documentation.LongDescription": "Sarakstā <code>list</code> tiek veikti norādītie aizvietojumi. Aizstāšanas operācijā <code>replacements</code> ir ietverts saraksts, kurā ir divas vērtības — vecā vērtība un jaunā vērtība.\r\n    Varat norādīt papildu vienādojuma kritērija vērtību <code>equationCriteria</code>, lai kontrolētu vienādības pārbaudi.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu no saraksta {1, 2, 3, 4, 5}, aizstājot vērtību 5 ar vērtību -5 un vērtību 1 ar vērtību -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Tiek atgriezts nosacījumam atbilstošo vērtību saraksts.",
        "Documentation.LongDescription": "Tiek atgriezts to saraksta <code>list</code> vērtību saraksts, kuras atbilst atlases nosacījumam <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {1, -3, 4, 9, -2} vērtības, kas ir lielākas par 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Sadala norādīto sarakstu sarakstu sarakstā, izmatojot norādītos lapas izmērus.",
        "Documentation.LongDescription": "Sadala <code>list</code> sarakstu sarakstā, kur pirmais izvades saraksta elements ir saraksts, kas satur pirmos <code>pageSize</code> elementus no\r\n    avotu saraksta, nākamais izvades saraksta elements ir saraksts, kas satur nākamos <code>pageSize</code>elementus no avotu saraksta utt.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Tiek atgriezts jauns saraksts, kura vērtības ir aprēķinātas, izmantojot šo sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezts jauns vērtību saraksts, kas tiek iegūts, sarakstam <code>list</code> lietojot transformācijas funkciju <code>transform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Pieskaitiet 1 katrai saraksta {1, 2} vērtībai.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Tiek atgriezts divu skaitļu dalījuma arktangenss.",
        "Documentation.LongDescription": "Tiek atgriezts divu skaitļu <code>y</code> un <code>x</code> dalījuma arktangenss. Dalījums tiek veidots šādi: <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Tiek atgriezts rezultāts, kas tiek iegūts, ar divām ievades vērtībām veicot bitu operāciju And.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tiek iegūts, ar vērtībām <code>number1</code> un <code>number2</code> veicot bitu operāciju And.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Tiek atgriezts rezultāts, kas tiek iegūts, ar divām ievades vērtībām veicot bitu operāciju Or.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tiek iegūts, ar vērtībām <code>number1</code> un <code>number2</code> veicot bitu operāciju Or.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Bitu kopa tiek pārbīdīta pa kreisi.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tiek iegūts, veicot vērtības <code>number1</code> bitu pārbīdi pa kreisi par norādīto bitu skaitu <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Bitu kopa tiek pārbīdīta pa labi.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tiek iegūts, veicot vērtības <code>number1</code> bitu pārbīdi pa labi par norādīto bitu skaitu <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Tiek atgriezts rezultāts, kas tiek iegūts, ar divām ievades vērtībām veicot bitu operāciju XOR (izslēdzošo OR).",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tiek iegūts, ar vērtībām <code>number1</code> un <code>number2</code> veicot bitu operāciju XOR (izslēdzošo OR).",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Tiek atgriezts unikālo kombināciju skaits.",
        "Documentation.LongDescription": "Tiek atgriezts vienumu saraksta <code>setSize</code> unikālo kombināciju skaits, ņemot vērā norādīto kombināciju lielumu <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: saraksta vienumu skaits.</li>\r\n    <li><code>combinationSize</code>: vienumu skaits katrā kombinācijā.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet no 5 vienumiem izveidojamo 3 vienumu kombināciju skaitu.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Tiek atgriezta divu skaitļu dalījuma veselā skaitļa daļa.",
        "Documentation.LongDescription": "Atgriež skaitļu <code>number1</code> un <code>number2</code> dalījuma veselā skaitļa daļu.\r\n    Ja <code>number1</code> vai <code>number2</code> vērtība ir Null, funkcija <code>Number.IntegerDivide</code> atgriež vērtību Null.\r\n      <ul>\r\n        <li><code>number1</code>: dalāmais.</li>\r\n        <li><code>number2</code>: dalītājs.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Daliet 6 ar 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Daliet 8,3 ar 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Tiek atgriezts divu veselu skaitļu dalījuma atlikums.",
        "Documentation.LongDescription": "Atgriež veselu skaitļu <code>number</code> un <code>divisor</code> dalījuma atlikumu.\r\n    Ja <code>number</code> vai <code>divisor</code> vērtība ir Null, funkcija <code>Number.Mod</code> atgriež vērtību Null.\r\n      <ul>\r\n        <li><code>number</code>: dalāmais.</li>\r\n        <li><code>divisor</code>: dalītājs.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet atlikumu, kas rodas, 5 dalot ar 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Tiek atgriezts permutāciju skaits.",
        "Documentation.LongDescription": "Tiek atgriezts to permutāciju skaits, kuras var ģenerēt no norādītā vienumu skaita <code>setSize</code> atbilstoši norādītajam permutācijas lielumam <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet no 5 vienumiem izveidojamo 3 vienumu permutāciju skaitu.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Skaitlis tiek kāpināts norādītajā pakāpē.",
        "Documentation.LongDescription": "Atgriež rezultātu, kas tiek iegūts, skaitli <code>number</code> kāpinot šādā pakāpē: <code>power</code>.\r\n    Ja <code>number</code> vai <code>power</code> vērtība ir Null, funkcija <code>Number.Power</code> atgriež vērtību Null.\r\n      <ul>\r\n        <li><code>number</code>: bāze.</li>\r\n        <li><code>power</code>: kāpinātājs.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet vērtību, kas rodas, skaitli 5 kāpinot 3. pakāpē (5 kubā).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Tiek atgriezts gadījumskaitlis diapazonā starp diviem skaitļiem.",
        "Documentation.LongDescription": "Tiek atgriezts gadījumskaitlis diapazonā no <code>bottom</code> līdz <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet gadījumskaitli diapazonā no 1 līdz 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Tiek atgriezta norādītā ieraksta lauka vērtība.",
        "Documentation.LongDescription": "Tiek atgriezta norādītā ieraksta <code>record</code> lauka <code>field</code> vērtība. Ja lauks netiek atrasts, tiek aktivizēts izņēmums.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet ieraksta lauka \"CustomerID\" vērtību.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Tiek atgriezta norādītā ieraksta lauka vērtība vai noklusējuma vērtība, ja ieraksts netiek atrasts.",
        "Documentation.LongDescription": "Tiek atgriezta norādītā ieraksta <code>record</code> lauka <code>field</code> vērtība. Ja lauks netiek atrasts, tiek atgriezta papildu vērtība <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet ieraksta lauka \"Phone\" vērtību. Ja šāds lauks nepastāv, tiek atgriezta vērtība Null.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Iegūstiet ieraksta lauka \"Phone\" vērtību. Ja šāds lauks nepastāv, tiek atgriezta noklusējuma vērtība.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Tiek atgriezts ieraksts atbilstoši norādītajam lauku vērtību sarakstam un lauku kopai.",
        "Documentation.LongDescription": "Tiek atgriezts ieraksts atbilstoši norādītajam lauku vērtību sarakstam <code>list</code> un lauku kopai.  Lai norādītu <code>fields</code>, varat izmantot teksta vērtību sarakstu vai ieraksta tipu.  Ja lauki nav unikāli, tiek atgriezta kļūda.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet ierakstu, izmantojot lauku vērtību sarakstu un lauku nosaukumu sarakstu.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Izveidojiet ierakstu, izmantojot lauku vērtību sarakstu un ieraksta tipu.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Tiek norādīts, vai ierakstā ir ietverti norādītie lauki.",
        "Documentation.LongDescription": "Atgriežot loģisko vērtību (True vai False), tiek norādīts, vai ierakstā <code>record</code> ir ietverti sarakstā <code>fields</code> norādītie lauki.\r\n    Izmantojot sarakstu, var norādīt vairākas lauku vērtības.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Pārbaudiet, vai ierakstā ir ietverts lauks \"CustomerID\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Pārbaudiet, vai ierakstā ir ietverti lauki \"CustomerID\" un \"Address\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "No ievades ieraksta tiek noņemti norādītie lauki.",
        "Documentation.LongDescription": "Tiek atgriezts ieraksts, kurā ir ietverti ievades ieraksta <code>record</code> lauki, noņemot sarakstā <code>fields</code> norādītos laukus. Ja norādītais lauks nepastāv, tiek aktivizēts izņēmums.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet no ieraksta lauku \"Price\".",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Noņemiet no ieraksta laukus \"Price\" un \"Item\".",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Tiek veikta pārdēvēšana atbilstoši šāda formāta sarakstam: { old, new }.",
        "Documentation.LongDescription": "Tiek atgriezts ieraksts, kurā ievades ieraksta <code>record</code> laukiem ir piešķirti sarakstā <code>renames</code> norādītie jaunie nosaukumi. Lai norādītu vairākus nosaukumus, varat izveidot ligzdotu sarakstu:({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pārdēvējiet ieraksta lauku \"UnitPrice\" par \"Price\".",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Pārdēvējiet ieraksta lauku \"UnitPrice\" par \"Price\" un lauku \"OrderNum\" par \"OrderID\".",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Norādītie lauki tiek pārkāroti jaunajā secībā.",
        "Documentation.LongDescription": "Tiek atgriezts ieraksts, kurā ieraksta <code>record</code> laukiem ir sakārtoti sarakstā <code>fieldOrder</code> norādītajā secībā. Lauku vērtības tiek saglabātas, un sarakstā <code>fieldOrder</code> neietvertie lauki netiek pārkārtoti.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pārkārtojiet dažus ieraksta laukus.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Tiek atgriezts ieraksts, kurā ir ietverti tikai norādītie lauki.",
        "Documentation.LongDescription": "Tiek atgriezts ieraksts, kurā ir ietverti tikai tie ievades ieraksta <code>record</code> lauki, kas ir norādīti sarakstā <code>fields</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Atlasiet ieraksta laukus \"Item\" un \"Price\".",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Tiek atgriezts ieraksts, kura laukiem ir veiktas norādītās transformācijas.",
        "Documentation.LongDescription": "Atgriež ierakstu, kurā ir ietverti ieraksta <code>record</code> lauki, kuriem ir veiktas sarakstā <code>transformOperations</code> norādītās pārveidošanas darbības.\r\n    Vienlaikus var pārveidot vienu vai vairākus laukus.\r\n      <div>Ja tiek pārveidots viens lauks, sarakstā <code>transformOperations</code> ir jābūt ietvertiem diviem vienumiem. Saraksta <code>transformOperations</code> pirmais vienums norāda lauka nosaukumu, bet saraksta <code>transformOperations</code> otrais vienums — lietojamo pārveidošanas funkciju. Piemēram, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Ja tiek pārveidoti vairāki lauki, sarakstā <code>transformOperations</code> ir jābūt ietvertiem sarakstiem, un katrā no tiem ir jābūt norādītam lauka nosaukumam un pārveidošanas operācijai. Piemēram, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet lauka Price vērtību par skaitli.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Pārveidot lauku OrderID un Price vērtības par skaitļiem.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Atgriež funkciju, kas tekstu sadala teksta sarakstā saskaņā ar pāreju no viena veida rakstzīmes uz citu. Parametrs {0} un {1} var būt rakstzīmju saraksts vai funkcija, kas pieņem rakstzīmi un atgriež vērtību true/false (patiess/aplams).",
        "Documentation.LongDescription": "Atgriež funkciju, kas tekstu sadala teksta sarakstā saskaņā ar pāreju no viena veida rakstzīmes uz citu. Parametrs <code>before</code> un <code>after</code> var būt rakstzīmju saraksts vai funkcija, kas pieņem rakstzīmi un atgriež vērtību true/false (patiess/aplams).",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Sadalīt ievadi ikreiz, kad pēc lielajiem vai mazajiem burtiem seko cipars.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Norādīto SQL vaicājumu konvertē par M kodu. Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Pārvērš sniegto <code>sql</code> vaicājumu par M kodu ar pieejamajiem identifikatoriem, ko definē <code>environment</code>. Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Norādītā tabulas datu kolonna tiek atgriezta saraksta formātā.",
        "Documentation.LongDescription": "Norādītā tabulas <code>table</code> datu kolonna <code>column</code> tiek atgriezta saraksta formātā.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet tabulas kolonnā [Name] ietvertos datus.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Atgriež to kolonnu nosaukumu sarakstu, kuras atbilst norādītajiem tipiem.",
        "Documentation.LongDescription": "Atgriež to kolonnu nosaukumu sarakstu no tabulas <code>table</code>, kuras atbilst <code>listOfTypes</code> norādītajiem tipiem.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Atgriež to kolonnu nosaukumus, kuru tips ir Number.Type, no tabulas.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Tiek norādīts, vai tabulā ir ietverta norādītajam ierakstam atbilstoša rinda.",
        "Documentation.LongDescription": "Tiek norādīts, vai tabulā <code>table</code> ir ietverta norādītajam ierakstam <code>row</code> atbilstoša rinda.\r\n    Varat norādīt papildu parametru <code>equationCriteria</code>, lai kontrolētu tabulas rindu salīdzinājumu.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai tabulā ir ietverta rinda.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Nosakiet, vai tabulā ir ietverta rinda.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Nosakiet, vai tabulā ir ietverta rinda, salīdzinot tikai kolonnu [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Tiek norādīts, vai tabulā ir ietvertas visiem norādītajiem ierakstiem atbilstošas rindas.",
        "Documentation.LongDescription": "Tiek norādīts, vai tabulā <code>table</code> ir ietvertas visiem sarakstā <code>rows</code> norādītajiem ierakstiem atbilstošas rindas.\r\n    Varat norādīt papildu parametru <code>equationCriteria</code>, lai kontrolētu tabulas rindu salīdzinājumu.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai tabulā ir ietvertas visas rindas, salīdzinot tikai kolonnu [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Nosakiet, vai tabulā ir ietvertas visas rindas.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Tiek norādīts, vai tabulā ir ietverta kādam no norādītajiem ierakstiem atbilstoša rinda.",
        "Documentation.LongDescription": "Tiek norādīts, vai tabulā <code>table</code> ir ietverta kādam no sarakstā <code>rows</code> norādītajiem ierakstiem atbilstoša rinda.\r\n    Varat norādīt papildu parametru <code>equationCriteria</code>, lai kontrolētu tabulas rindu salīdzinājumu.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai tabulā <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> ir ietverta rinda <code>[a = 1, b = 2]</code> vai <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Nosakiet, vai tabulā <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> ir ietverta rinda <code>[a = 1, b = 3]</code> vai <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Nosakiet, vai tabulā <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> ir ietverta rinda <code>[a = 1, b = 3]</code> vai <code>[a = 3, b = 5]</code>, salīdzinot tikai kolonnu [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Tiek norādīts, vai tabulā ir ietverta(-s) norādītā(-s) kolonna(-s).",
        "Documentation.LongDescription": "Tiek norādīts, vai <code>table</code> ietver norādīto(-ās) kolonnu(-as) <code>columns</code>. Tiek atgriezta vērtība <code>true</code>, ja tabulā ir ietverta(-s) kolonna(-s); pretējā gadījumā tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai tabulā ir kolonna [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Uzziniet, vai tabulā ir kolonna [Name] un [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Tiek norādīts, vai visas tabulas rindas atbilst norādītajam nosacījumam.",
        "Documentation.LongDescription": "Tiek norādīts, vai <code>table</code> visas rindas atbilst norādītajam <code>condition</code>. Tiek atgriezta vērtība <code>true</code>, ja visas rindas atbilst; pretējā gadījumā tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai kolonnas [a] visas rindu vērtības ir vienādas tabulā.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Uzziniet, vai visas rindu vērtības ir [a = 1, b = 2] tabulā <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Tiek norādīts, vai kāda no tabulas rindām atbilst norādītajam nosacījumam.",
        "Documentation.LongDescription": "Tiek norādīts, vai kāda no <code>table</code> rindām atbilst norādītajam <code>condition</code>. Tiek atgriezta vērtība <code>true</code>, ja jebkura no rindām atbilst; pretējā gadījumā tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai kāda no kolonnas [a] rindu vērtībām ir vienāda tabulā <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Nosakiet, vai tabulā <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> jebkura no rindu vērtībām ir [a = 1, b = 2].",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Tiek atgriezta lielākā rinda vai noklusējuma vērtība, izmantojot norādītos kritērijus.",
        "Documentation.LongDescription": "Tiek atgriezta <code>table</code> lielākā rinda, izmantojot <code>comparisonCriteria</code>. Ja tabula ir tukša, tiek atgriezta neobligātā <code>default</code> vērtība. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet rindu ar lielāko vērtību kolonnā [a] tabulā <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Atrodiet rindu ar lielāko vērtību kolonnā [a] tabulā <code>({})</code>. Ja tā ir tukša, tiek atgriezta vērtība -1.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Tiek atgriezta mazākā rinda vai noklusējuma vērtība, izmantojot norādītos kritērijus.",
        "Documentation.LongDescription": "Tiek atgriezta <code>table</code> mazākā rinda, izmantojot <code>comparisonCriteria</code>. Ja tabula ir tukša, tiek atgriezta neobligātā <code>default</code> vērtība.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet tabulā rindu ar mazāko vērtību kolonnā [a].",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Atrodiet tabulā rindu ar mazāko vērtību kolonnā [a]. Ja tā ir tukša, tiek atgriezta vērtība -1.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Tiek atgriezta tabulā esošas rindas pozīcija vai pozīcijas.",
        "Documentation.LongDescription": "Atgriež <code>row</code> pirmā gadījuma rindas pozīciju norādītajā <code>table</code>. Ja nav atrasts neviens gadījums, tiek atgriezta vērtība -1.\r\n    <ul>\r\n       <li><code>table</code>: ievades tabula.</li>\r\n       <li><code>row</code>: tabulas rinda, kurai jāatrod pozīcija.</li>\r\n       <li><code>occurrence</code>: <i>[Neobligāti]</i> norāda, kuri rindas gadījumi jāatgriež.</li>\r\n       <li><code>equationCriteria</code>: <i>[Neobligāti]</i> kontrolē salīdzināšanu starp tabulas rindām.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet [a = 2, b = 4] pirmā gadījuma pozīciju tabulā <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Atrodiet [a = 2, b = 4] otrā gadījuma pozīciju tabulā <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Atrodiet [a = 2, b = 4] visu gadījumu pozīcijas tabulā <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Tiek atgriezta tabulā esošas jebkuras norādītās rindas pozīcija vai pozīcijas.",
        "Documentation.LongDescription": "Atgriež rindas(-u) pozīciju(-as) no <code>rows</code> saraksta pirmā gadījuma <code>table</code>. Ja nav atrasts neviens gadījums, tiek atgriezta vērtība -1.\r\n    <ul>\r\n    <li><code>table</code>: ievades tabula.</li>\r\n       <li><code>rows</code>: to tabulas rindu saraksts, kam jāatrod pozīcijas.</li>\r\n       <li><code>occurrence</code>: <i>[Neobligāti]</i> norāda, kuri rindas gadījumi jāatgriež.</li>\r\n       <li><code>equationCriteria</code>: <i>[Neobligāti]</i> kontrolē salīdzināšanu starp tabulas rindām.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet [a = 2, b = 4] vai [a = 6, b = 8] pirmā gadījuma pozīciju tabulā <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Atrodiet [a = 2, b = 4] vai [a = 6, b = 8] visu gadījumu pozīcijas tabulā <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Sadala norādīto tabulu tabulu sarakstā, izmantojot norādītos lapas izmērus.",
        "Documentation.LongDescription": "Sadala <code>table</code> tabulu sarakstā, kur pirmais saraksta elements ir tabula, kas satur pirmās <code>pageSize</code> rindas no\r\n    avota tabulas, nākamais saraksta elements ir tabula, kas satur nākamās <code>pageSize</code> rindas no avota tabulas utt.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Sadala tabulu ar pieciem ierakstiem tabulās ar diviem ierakstiem katrā.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Atgriež sarakstu, kurā ir pirmās norādītās skaitīšanas rindas un atlikušās rindas.",
        "Documentation.LongDescription": "Atgriež sarakstu, kurā ir divas tabulas: tabulu ar pirmajām <code>table</code> N rindām (kā norādīja <code>count</code>) un tabulu, kurā ir pārējās rindas <code>table</code>.\r\n\r\nJa iegūtā saraksta tabulas tiek uzskaitītas tieši vienu reizi un secībā, funkcija uzskaitīs <code>table</code> tikai vienu reizi.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atgrieziet pirmās divas tabulas rindas un pārējās tabulas rindas.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Tabulas rindas tiek pārvērstas, izmantojot norādīto pārvēršanas funkciju.",
        "Documentation.LongDescription": "Izveido <code>list</code>, lietojot <code>transform</code> darbību katrai <code>table</code> rindai.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pārveidot tabulas rindas skaitļu sarakstā.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Pārveidot rindas skaitļu tabulā teksta ierakstos.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Atgriež ievades <code>text</code> daļu aiz norādītā elementa <code>delimiter</code>.\r\n    Neobligāta skaitliska vērtība <code>index</code> norāda, kurš no elementiem <code>delimiter</code> ir jāņem vērā.\r\n    Neobligāts saraksts <code>index</code> norāda, kurš no elementiem <code>delimiter</code> ir jāņem vērā, kā arī norāda, vai indeksēšana ir jāveic no ievades sākuma vai beigām.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Iegūt ievades “111-222-333” daļu aiz (pirmās) defises.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Iegūt ievades “111-222-333” daļu aiz otrās defises.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Iegūt ievades “111-222-333” daļu aiz otrās defises no beigām.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Tiek atgriezta rakstzīme norādītajā pozīcijā.",
        "Documentation.LongDescription": "Tiek atgriezta rakstzīme teksta vērtībā <code>text</code> pozīcijā <code>index</code>. Pirmā rakstzīme tekstā ir pozīcijā 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet rakstzīmi 4. pozīcijā virknē Hello, World.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Atgriež ievades <code>text</code> daļu pirms norādītā elementa <code>delimiter</code>.\r\n    Neobligāta skaitliska vērtība <code>index</code> norāda, kurš no elementiem <code>delimiter</code> ir jāņem vērā.\r\n    Neobligāts saraksts <code>index</code> norāda, kurš no elementiem <code>delimiter</code> ir jāņem vērā, kā arī norāda, vai indeksēšana ir jāveic no ievades sākuma vai beigām.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Iegūt ievades “111-222-333” daļu pirms (pirmās) defises.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Iegūt ievades “111-222-333” daļu pirms otrās defises.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Iegūt ievades “111-222-333” daļu pirms otrās defises no beigām.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Tiek atgriezts, vai tekstā ir ietverta apakšvirkne.",
        "Documentation.LongDescription": "Nosaka, vai <code>text</code> ir vērtība <code>substring</code>. Ja vērtība tiek atrasta, tiek atgriezta vērtība True. Šī funkcija neatbalsta aizstājējzīmes vai regulāras izteiksmes.\r\n      <br>\r\n      <br>\r\n      Neobligāto argumentu <code>comparer</code> var izmantot, lai norādītu reģistrnejutīgus vai kultūrai un lokalizācijai atbilstošus salīdzinājumus.\r\n      Formulas valodā ir pieejami turpmāki iebūvētie salīdzinātāji:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: izmanto, lai veiktu reģistrjutīgu kārtas salīdzinājumu.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: izmanto, lai veiktu reģistrnejutīgu kārtas salīdzinājumu.</li>\r\n        <li> <code>Comparer.FromCulture</code>: izmanto, lai veiktu kultūrai atbilstoši salīdzinājumu.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Uzziniet, vai tekstā Hello World ir ietverts Hello.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Uzziniet, vai tekstā Hello World ir ietverts hello.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Uzziniet, vai tekstā “Sveika, pasaule” ir ietverts vārds “sveiki”, izmantojot salīdzināšanas līdzekli, kas nav reģistrjutīgs.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Tiek atgrieztas teksta pēdējās rakstzīmes.",
        "Documentation.LongDescription": "Tiek atgriezta <code>text</code> vērtība, kas ir <code>text</code> vērtības <code>text</code> pēdējās <code>count</code> rakstzīmes.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet teksta Hello, World pēdējās 5 rakstzīmes.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Tiek norādīts, vai teksts beidzas ar norādīto vērtību.",
        "Documentation.LongDescription": "Norāda, vai norādītais teksts <code>text</code> beidzas ar norādīto vērtību <code>substring</code>. Norādīšana ir reģistrjutīga.\r\n\r\n      <div>\r\n        <code>comparer</code> ir <code>Comparer</code>, ko izmanto, lai kontrolētu salīdzināšanu. Salīdzinātājus var izmantot, lai nodrošinātu reģistrnejutīgu vai kultūrai un lokalizācijai atbilstošu salīdzināšanu.\r\n      </div>\r\n      <div>\r\n        Formulu valodā ir pieejami tālāk norādītie iebūvētie salīdzinātāji:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: izmanto precīzai kārtas salīdzināšanai</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: izmanto precīzai kārtas salīdzināšanai, kas nav reģistrjutīga.</li>\r\n        <li> <code>Comparer.FromCulture</code>: izmanto, lai veiktu kultūrai atbilstošu salīdzināšanu.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Pārbaudiet, vai Hello, World beidzas ar world.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Pārbaudiet, vai Hello, World beidzas ar World.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Tiek atgriezts formatēts teksts, kas ir iegūts, izmantojot formatējuma virkni un argumentus.",
        "Documentation.LongDescription": "Tiek atgriezts formatēts teksts, kas ir izveidots, parametrā <code>formatString</code> norādītajai formatējuma virknei lietojot parametrā <code>arguments</code> norādītos saraksta vai ieraksta argumentus. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Formatējiet skaitļu sarakstu.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Formatējiet dažādus ieraksta datu tipus atbilstoši ASV angļu valodas kultūrai.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Atgriež apakšvirkni ar norādīto garumu.",
        "Documentation.LongDescription": "Atgriež <code>count</code> rakstzīmes vai līdz <code>text</code> beigām; pie nobīdes <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Atrod apakšvirkni tekstā “Hello World”, kas sākas 6. indeksā un kuras diapazons ir 5 rakstzīmes.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Atrod apakšvirkni tekstā “Hello World”, kas sākas 6. indeksā un kuras diapazons ir līdz beigām.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Tiek atgriezts teksts norādītajā garumā, teksta beigās pievienojot papildinājumu.",
        "Documentation.LongDescription": "Atgriež <code>text</code> vērtību ar papildinājumu līdz garumam <code>count</code>, ievietojot atstarpes teksta vērtības <code>text</code> beigās.\r\n    Var izmantot neobligātu rakstzīmi <code>character</code>, lai norādītu papildinājumam izmantoto rakstzīmi. Noklusējuma bloka rakstzīme ir atstarpe.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet papildinājumu teksta vērtības beigās, lai tās garums būtu 10 rakstzīmes.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Pievienojiet papildinājumu | teksta vērtības beigās, lai tās garums būtu 10 rakstzīmes.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Tiek atgriezts teksts norādītajā garumā, sniegtā teksta sākumā pievienojot papildinājumu.",
        "Documentation.LongDescription": "Atgriež <code>text</code> vērtību ar papildinājumu līdz garumam <code>count</code>, ievietojot atstarpes teksta vērtības <code>text</code> sākumā.\r\n    Var izmantot neobligātu rakstzīmi <code>character</code>, lai norādītu papildinājumam izmantoto rakstzīmi. Noklusējuma bloka rakstzīme ir atstarpe.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pievienojiet papildinājumu teksta vērtības sākumā, lai tās garums būtu 10 rakstzīmes.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Pievienojiet papildinājumu | teksta vērtības sākumā, lai tās garums būtu 10 rakstzīmes.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Tiek atgriezta vērtības pirmā pozīcija (-1, ja netiek atrasta).",
        "Documentation.LongDescription": "Atgriež norādītā teksta vērtības <code>substring</code> gadījuma pozīciju tekstā <code>text</code>.\r\n    Var izmantot neobligātu parametru <code>occurrence</code>, lai norādītu, kura gadījuma pozīcija jāatgriež (pēc noklusējuma tiek atgriezts pirmais gadījums).\r\n    Ja vērtība <code>substring</code> netiek atrasta, tiek atgriezta pozīcija -1.\r\n\r\n      <div>\r\n        <code>comparer</code> ir <code>Comparer</code>, ko izmanto, lai kontrolētu salīdzināšanu. Salīdzinātājus var izmantot, lai nodrošinātu reģistrnejutīgu vai kultūrai un lokalizācijai atbilstošu salīdzināšanu.\r\n      </div>\r\n      <div>\r\n        Formulu valodā ir pieejami tālāk norādītie iebūvētie salīdzinātāji:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: izmanto precīzai kārtas salīdzināšanai</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: izmanto precīzai kārtas salīdzināšanai, kas nav reģistrjutīga</li>\r\n        <li> <code>Comparer.FromCulture</code>: izmanto, lai veiktu kultūrai atbilstošu salīdzināšanu</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet World pirmā gadījuma pozīciju tekstā Hello, World! Hello, World!.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Iegūstiet vārda World pēdējā lietojuma pozīciju tekstā Hello, World! Hello, World!.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Tiek atgriezta teksta vērtības vai jebkuras norādītās rakstzīmes pirmā pozīcija (-1, ja netiek atrasta).",
        "Documentation.LongDescription": "Atgriež jebkuras sarakstā <code>characters</code> norādītās rakstzīmes pirmo pozīciju, kas atrodama <code>text</code>.\n    Var izmantot neobligātu parametru <code>occurrence</code>, lai norādītu atgriežamo gadījuma pozīciju.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet \"W\" vai \"H\" pirmo pozīciju tekstā \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Atrodiet visas \"W\" vai \"H\" pozīcijas tekstā \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Tiek atgriezta apakšvirkne, kas tika atrasta nobīdē.",
        "Documentation.LongDescription": "Atgriež apakšvirkni no teksta <code>text</code>, kas atrasta nobīdē <code>offset</code>.\r\n    Var ietvert neobligātu parametru <code>count</code>, lai norādītu, cik rakstzīmju jāatgriež. Ja nav pietiekami daudz rakstzīmju, tiek parādīta kļūda.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet apakšvirkni no teksta Hello World, kas sākas 6. indeksā.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Atrodiet apakšvirkni no teksta Hello World Hello, kas sākas 6. indeksā un kuras diapazons ir 5 rakstzīmes.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "No ievades teksta vērtības tiek noņemti visi norādītās rakstzīmes vai rakstzīmju saraksta gadījumi.",
        "Documentation.LongDescription": "Tiek atgriezta teksta vērtības <code>text</code> kopija, kurā noņemtas visas rakstzīmes no <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet rakstzīmes , un ; no teksta vērtības.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Tiek noņemts rakstzīmju skaits, sākot no norādītās nobīdes.",
        "Documentation.LongDescription": "Atgriež teksta vērtības <code>text</code> kopiju, kurā noņemtas visas rakstzīmes no pozīcijas <code>offset</code>.\r\n    Var lietot neobligātu parametru <code>count</code>, lai norādītu noņemamo rakstzīmju skaitu. <code>count</code> noklusējuma vērtība ir 1. Pozīcijas vērtības sākas ar 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet 1 rakstzīmi no teksta vērtības ABEFC 2. pozīcijā.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Noņemiet divas rakstzīmes no teksta vērtības ABEFC, sākot no 2. pozīcijas.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Tiek atgriezta teksta vērtība, kas veidota no ievades teksta, kas tiek atkārtots noteiktu reižu skaitu.",
        "Documentation.LongDescription": "Tiek atgriezta teksta vērtība, kas veidota no ievades teksta <code>text</code>, kas atkārtots <code>count</code> reizes.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Atkārtojiet tekstu a piecas reizes.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Atkārtojiet tekstu helloworld trīs reizes.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Ievades teksta vērtībā tiek atlasīti visi norādītās rakstzīmes vai rakstzīmju saraksta gadījumi.",
        "Documentation.LongDescription": "Tiek atgriezta teksta vērtības “<code>text</code>” kopija, kurā noņemtas visas rakstzīmes, kas nav ietvertas <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Atlasīt teksta vērtībā visas rakstzīmes diapazonā no “a” līdz “z”.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Teksts tiek sadalīts teksta vērtību sarakstā, pamatojoties uz norādīto norobežotāju.",
        "Documentation.LongDescription": "Tiek atgriezts teksta vērtību saraksts, kas tiek iegūts, sadalot teksta vērtību <code>text</code>, pamatojoties uz norādīto norobežotāju <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu no \"|\" norobežotās teksta vērtības \"Name|Address|PhoneNumber\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Tiek atgriezts teksta vērtību saraksts, kas norobežotājā sadalīts jebkurā no rakstzīmēm.",
        "Documentation.LongDescription": "Tiek atgriezts teksta vērtību saraksts, kas tiek iegūts, sadalot teksta vērtību <code>text</code>, pamatojoties uz jebkuru rakstzīmi norādītajā norobežotājā <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu no teksta vērtības \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Tiek atgriezts teksta sākums.",
        "Documentation.LongDescription": "<code>text</code> pirmās <code>count</code> rakstzīmes tiek atgrieztas kā teksta vērtība.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet Hello, World pirmās 5 rakstzīmes.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Tiek norādīts, vai teksts sākas ar norādīto vērtību.",
        "Documentation.LongDescription": "Atgriež vērtību True, ja teksta vērtība <code>text</code> sākas ar teksta vērtību <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> <code>text</code> vērtība, ko paredzēts meklēt</li>\r\n        <li><code>substring</code>: <i></i><code>text</code> vērtība, kas ir apakšvirkne, kuru paredzēts meklēt <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Neobligāti]</i> <code>Comparer</code> vērtība, ko izmanto, lai kontrolētu salīdzināšanu. Piemēram, <code>Comparer.OrdinalIgnoreCase</code> var izmantot, lai veiktu meklēšanu, kas nav reģistrjutīga</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> ir <code>Comparer</code>, ko izmanto, lai kontrolētu salīdzināšanu. Salīdzinātājus var izmantot, lai nodrošinātu reģistrnejutīgu vai kultūrai un lokalizācijai atbilstošu salīdzināšanu.\r\n      </div>\r\n      <div>\r\n        Formulu valodā ir pieejami tālāk norādītie iebūvētie salīdzinātāji:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: izmanto, lai veiktu precīzu kārtas salīdzināšanu</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: izmanto, lai veiktu precīzu kārtas salīdzināšanu, kas nav reģistrjutīga</li>\r\n        <li> <code>Comparer.FromCulture</code>: izmanto, lai veiktu kultūrai atbilstošu salīdzināšanu</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Pārbaudiet, vai teksts Hello, World sākas ar tekstu hello.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Pārbaudiet, vai teksts Hello, World sākas ar tekstu Hello.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Tiek atgriezts tips, kas norāda funkcijas ar konkrētu parametru un atgriež tipa ierobežojumus.",
        "Documentation.LongDescription": "Izveido <code>function type</code> no <code>signature</code>, <code>ReturnType</code> un <code>Parameters</code> ierakstu, un <code>min</code>, minimālais nepieciešamo argumentu skaits, lai izsauktu funkciju.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Izveido tipu funkcijai, kas izmanto skaitļa parametru ar nosaukumu X un atgriež skaitli.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Tiek atgriezts tips, kas norāda ierakstus ar konkrēta tipa ierobežojumiem laukos.",
        "Documentation.LongDescription": "Tiek atgriezts tips, kas norāda ierakstus ar konkrēta tipa ierobežojumiem laukos.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Dinamiski ģenerē tabulas tipu.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Nosaka, vai pirmā tipa vērtība vienmēr ir saderīga ar otro tipu.",
        "Documentation.LongDescription": "Nosaka, vai <code>type1</code> vērtība vienmēr ir saderīga ar <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai jebkāda tipa skaitļa vērtību vienmēr var apstrādāt arī kā jebkuru tipu.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Nosakiet, vai jebkāda tipa vērtību vienmēr var apstrādāt arī kā tipa skaitli.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Aizstāj tipa fasetes.",
        "Documentation.LongDescription": "Aizstāj <code>type</code> fasetes ar fasetēm, kuras atrodas ierakstā <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Tiek atgriezts jauns tabulas tips, kurā visas atslēgas ir aizstātas ar norādīto atslēgu sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezts jauns tabulas tips, kurā visas atslēgas ir aizstātas ar norādīto atslēgu sarakstu.<br>\r\n    <br>\r\n    Katra atslēga tiek definēta, izmantojot ierakstu šādā formā:\r\n    <ul>\r\n      <li>\r\n        <code>Kolonnas</code>: kolonnu nosaukumu saraksts, kas definē atslēgu\r\n      </li>\r\n      <li>\r\n        <code>Primārā</code>: <code>patiess</code>, ja atslēga ir tabulas primārā atslēga; pretējā gadījumā <code>aplams</code>\r\n      </li>\r\n    </ul>\r\n    Norādītais atslēgu saraksts tiek validēts, lai nodrošinātu, ka nav definētas vairākas primārās atslēgas un vai tabulas tipam ir visi atslēgas kolonnu nosaukumi.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Aizstājiet tabulas tipa atslēgas informāciju.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Notīriet atslēgas informāciju, kas iepriekš definēta tabulas tipam.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Tiek atgriezts kolonnas tips tabulā.",
        "Documentation.LongDescription": "Tiek atgriezts kolonnas tips <code>column</code> tabulas tipā <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Tiek atgriezts absolūts URI, kas tiek iegūts, apvienojot ievades bāzes URI un relatīvo URI.",
        "Documentation.LongDescription": "Tiek atgriezts absolūts URI, kas tiek iegūts, apvienojot ievades <code>baseUri</code> un <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Tiek atgriezta abu vērtību summa.",
        "Documentation.LongDescription": "Tiek atgriezta <code>value1</code> un <code>value2</code> summa. Varat norādīt neobligātu parametru <code>precision</code>; pēc noklusējuma tiek lietots <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Tiek atgriezta vērtība, ja tā ir saderīga ar norādīto tipu.",
        "Documentation.LongDescription": "Tiek atgriezta vērtība, ja tā ir saderīga ar norādīto tipu. Tas ir ekvivalents \"as\" operatoram opcijā M, izņemot to, ka tas var akceptēt identifikatora tipu atsauces, piemēram, Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Skaitļa pārvēršana skaitlī.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Mēģinājums pārvērst teksta vērtību par skaitli.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Atgriež vērtību -1, 0 vai 1, pamatojoties uz to, vai pirmā vērtība ir mazāka par, vienāda ar vai lielāka par otro.",
        "Documentation.LongDescription": "Atgriež vērtību -1, 0 vai 1, pamatojoties uz to, vai pirmā vērtība ir mazāka par, vienāda ar vai lielāka par otro.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Tiek atgriezts rezultāts, kas iegūts, pirmo vērtību dalot ar otro vērtību.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas iegūts, <code>value1</code> dalot ar <code>value2</code>. Varat norādīt neobligātu parametru <code>precision</code>; pēc noklusējuma tiek lietots <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Tiek atgriezts, vai abas vērtības ir vienādas.",
        "Documentation.LongDescription": "Ja vērtība <code>value1</code> ir vienāda ar vērtību <code>value2</code>, tiek atgriezta vērtība True, pretējā gadījumā tiek atgriezta vērtība False.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Nosaka, vai vērtība ir saderīga ar norādīto tipu.",
        "Documentation.LongDescription": "Nosaka, vai vērtība ir saderīga ar norādīto tipu. Tas ir ekvivalents \"is\" operatoram opcijā M, izņemot to, ka tas var akceptēt identifikatora tipu atsauces, piemēram, Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Salīdziniet divus veidus, kā noteikt, vai skaitlis ir saderīgs ar tipa skaitli.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Tiek atgriezts abu vērtību iznākums.",
        "Documentation.LongDescription": "Tiek atgriezts <code>value1</code> un <code>value2</code> reizinājums. Varat norādīt neobligātu parametru <code>precision</code>; pēc noklusējuma tiek lietots <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Novērtē vaicājumu attiecībā pret mērķi.",
        "Documentation.LongDescription": "<p>Novērtē <code>query</code> attiecībā pret <code>target</code>, izmantojot vienumā <code>parameters</code> norādītos parametrus un vienumā <code>options</code> norādītās opcijas.</p>\r\n<p>Vaicājuma rezultātu nosaka <code>target</code>.</p>\r\n<p><code>target</code> norāda kontekstu operācijai, ko apraksta <code>query</code>.</p>\r\n<p><code>query</code> apraksta vaicājumu, kas jāizpilda attiecībā pret <code>target</code>. <code>query</code> tiek izteikts parametram <code>target</code> raksturīgā veidā (piemēram, T-SQL priekšraksta veidā).</p>\r\n<p>Izvēles vērtība <code>parameters</code> var saturēt sarakstu vai ierakstu atkarībā no tā, kas nepieciešams, lai nodrošinātu parametra vērtības, ko paredz <code>query</code>.</p>\r\n<p>Izvēles ieraksts <code>options</code> var saturēt opcijas, kas ietekmē parametra <code>query</code> novērtēšanas uzvedību attiecībā pret <code>target</code>. Šīs opcijas ir raksturīgas parametram <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Tiek atgriezts, vai abas vērtības ir vienādas.",
        "Documentation.LongDescription": "Ja arguments <code>value1</code>, <code>value2</code> ir Null, tiek atgriezta vērtība Null, pretējā gadījumā tiek atgriezts Value.Equals ekvivalents.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Tiek aizstāta informācija par ievades metadatiem.",
        "Documentation.LongDescription": "Tiek aizstāta informācija par ievades metadatiem.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Aizstāj vērtības tipu.",
        "Documentation.LongDescription": "Aizstāj <code>value</code> tipu ar nodrošināto <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Aizstāj ieraksta noklusējuma tipu ar specifiskāku tipu.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Tiek atgriezta abu vērtību starpība.",
        "Documentation.LongDescription": "Tiek atgriezta <code>value1</code> un <code>value2</code> starpība. Varat norādīt neobligātu parametru <code>precision</code>; pēc noklusējuma tiek lietots <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Tiek izveidota darbība, kuras izpilde atgriež HTTP pieprasījuma izpildes rezultātus kā bināru vērtību.",
        "Documentation.LongDescription": "Izveido darbību, kas, to izpildot, atgriezīs pieprasījuma <code>method</code> izpildes attiecībā pret <code>url</code> rezultātus, izmantojot HTTP kā bināru vērtību.\r\n   Lai norādītu papildu rekvizītus, <code>options</code>, var norādīt neobligātu ieraksta parametru. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>Query</code> : Programmiski pievienojiet vaicājuma parametrus vietrādim URL, neraizējoties par atkāpi.</li>\r\n<li><code>ApiKeyName</code> : Ja mērķa vietnei ir priekšstats par API atslēgu, šo parametru var izmantot, lai norādītu vietrādī URL izmantojamo atslēgas parametra nosaukumu (nevis vērtību). Faktiskā atslēgas vērtība ir norādīta akreditācijas datos.</li>\r\n<li><code>Headers</code> : Norādot šo vērtību kā ierakstu, HTTP pieprasījumam tiks nodrošinātas papildu galvenes.</li>\r\n<li><code>Timeout</code> : Norādot šo vērtību kā ilgumu, tiks mainīts HTTP pieprasījuma taimauts. Noklusējuma vērtība ir 100 sekundes.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Norādot šo vērtību kā sarakstu, šīs HTTP galvenes atslēgas tiks izslēgtas no datu kešdarbes aprēķina daļas.</li>\r\n<li><code>IsRetry</code> : Ja norādīsit šo loģisko vērtību kā true (patiess), ienesot datus, tiks ignorētas visas kešatmiņā esošās atbildes.</li>\r\n<li><code>ManualStatusHandling</code> : Norādot šo vērtību kā sarakstu, netiks pieļauta jebkāda iebūvētā apstrāde tiem HTTP pieprasījumiem, kuru atbilde ir viens no šiem statusa kodiem.</li>\r\n<li><code>RelativePath</code> : Norādot šo vērtību kā tekstu, pirms pieprasījuma veikšanas tas tiek pievienots pamata vietrādim URL.</li>\r\n<li><code>Content</code> : Norādot šo vērtību, tās saturs kļūs par HTTP pieprasījuma pamattekstu.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Ņemiet vērā, ka šī funkcija ir atspējota lielākajā daļā kontekstu. Tā vietā apsveriet izmantot Web.Contents vai Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Veiciet GET pieprasījumu attiecībā uz Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Ievadiet ar reģistrāciju saistītā Azure Enterprise REST API galapunkta vietrādi URL",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Atgriež bināros rezultātus izsaukumam uz vietrādi URL, kas norādīts saskarnei Azure Enterprise API.",
        "Documentation.Examples": [
          {
            "Description": "Funkcijas AzureEnterprise.Contents izmantošana, lai atgrieztu noteiktas atskaites rezultātus.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabula"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Atgriež norādītā BLOB saturu no Azure krātuves akreditācijas datu komplekta.",
        "Documentation.LongDescription": "Atgriež BLOB saturu vietrādī URL, <code>url</code> no Azure krātuves glabātavas. <code>options</code> var norādīt, lai vadītu šādas opcijas:\r\n    <ul>\r\n<li><code>BlockSize</code> : To baitu skaits, kas jālasa pirms datu patēriņa gaidīšanas. Noklusējuma vērtība ir 4 MB.</li>\r\n<li><code>RequestSize</code> : Baitu skaits, ko mēģināt lasīt vienā HTTP pieprasījumā uz serveri. Noklusējuma vērtība ir 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcija ConcurrentRequests nodrošina ātrāku datu lejupielādi, norādot pieprasījumu skaitu, kas jāsniedz vienlaicīgi, izmantojot atmiņas izmantošanas izmaksas. Nepieciešamā atmiņa ir (ConcurrentRequest * RequestSize). Noklusējuma vērtība ir 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Atgriež norādītā faila saturu no Azure Data Lake Storage failu sistēmas.",
        "Documentation.LongDescription": "Tiek atgriezts faila saturs vietrādī URL, <code>url</code> no Azure Data Lake Storage filesystem. <code>options</code> var norādīt, lai vadītu šādas opcijas:\r\n    <ul>\r\n<li><code>BlockSize</code> : To baitu skaits, kas jālasa pirms datu patēriņa gaidīšanas. Noklusējuma vērtība ir 4 MB.</li>\r\n<li><code>RequestSize</code> : Baitu skaits, ko mēģināt lasīt vienā HTTP pieprasījumā uz serveri. Noklusējuma vērtība ir 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcija ConcurrentRequests nodrošina ātrāku datu lejupielādi, norādot pieprasījumu skaitu, kas jāsniedz vienlaicīgi, izmantojot atmiņas izmantošanas izmaksas. Nepieciešamā atmiņa ir (ConcurrentRequest * RequestSize). Noklusējuma vērtība ir 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Atgriež binārā objekta aptuveno garumu.",
        "Documentation.LongDescription": "Atgriež aptuveno <code>binary</code> garumu vai kļūdu, ja datu avots neatbalsta aptuveno garumu.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Iegūst binārās vērtības aptuveno garumu.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Binārā vērtība tiek ievietota atmiņas buferī.",
        "Documentation.LongDescription": "Binārā vērtība tiek ievietota atmiņas buferī.  Šī izsaukuma rezultāts ir stabila bināra vērtība, kas nozīmē, ka tai ir noteikts garums un baitu secība.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Izveidot stabilu binārās vērtības versiju.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Bināro vērtību sarakstu apvieno vienā binārajā vērtībā.",
        "Documentation.LongDescription": "Bināro vērtību sarakstu apvieno vienā binārajā vērtībā.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Izveido bināro vērtību no sniegtās vērtības",
        "Documentation.LongDescription": "Atgriež <code>binary</code> vērtību no norādītās vērtības <code>value</code>. Ja norādītā vērtība <code>value</code> ir <code>Null</code>, <code>Binary.From</code> atgriež <code>Null</code>.  Ja norādītā vērtība <code>value</code> ir <code>binary</code>, tiek atgriezts <code>value</code>. Tālāk minēto tipu vērtības var pārvērst par <code>binary</code> vērtību.\r\n      <ul>\r\n        <li><code>text</code>: <code>binary</code> vērtība no teksta atveidojuma. Papildinformāciju skatiet sadaļā <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nJa vērtībai <code>value</code> ir jebkāds cits tips, tiek atgriezta kļūda.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Iegūt <code>\"1011\"</code> vērtību <code>binary</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Skaitļu sarakstu pārveido par bināru vērtību.",
        "Documentation.LongDescription": "Skaitļu sarakstu pārveido par bināru vērtību.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Datus no teksta formas dekodē binārajā formātā.",
        "Documentation.LongDescription": "Atgriež rezultātu teksta vērtības <code>text</code> pārvēršanai par bināru vērtību (<code>number</code> saraksts). Var tikt iekļauts <code>encoding</code>, lai norādītu teksta vērtībai izmantoto kodējumu.\r\n      Vērtībai <code>encoding</code> var izmantot tālāk norādītās <code>BinaryEncoding</code> vērtības.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: kodējums Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: heksadecimālais kodējums</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekodēt 1011 par bināro vērtību.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Dekodēt 1011 par bināro vērtību, izmantojot heksadecimālo kodējumu.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Nolasa bināro straumi un mēģina noteikt straumes satura tipu un formāta informāciju.",
        "Documentation.LongDescription": "Atgriež ierakstu ar lauku Content.Type, kas satur izsecināto MIME-type.\r\n    Ja izsecinātais satura tips ir text/* un ir noteikta kodēšanas kodu lapa, papildus atgriež lauku Content.Encoding, kas satur straumes kodēšanu.\r\n    Ja izsecinātais satura tips ir text/csv un formāts ir atdalītu vērtību formāts, papildus atgriež lauku Csv.PotentialDelimiter, kas satur tabulu iespējamo atdalītāju analīzei.\r\n    Ja izsecinātais satura tips ir text/csv un formāts ir fiksēta platuma formāts, papildus atgriež lauku Csv.PotentialPositions, kas satur sarakstu iespējamo fiksētā platuma kolonnu pozīciju analīzei.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Tiek atgriezts rakstzīmju skaits.",
        "Documentation.LongDescription": "Tiek atgriezts rakstzīmju skaits.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Bināru vērtību pārveido par skaitļu sarakstu.",
        "Documentation.LongDescription": "Bināru vērtību pārveido par skaitļu sarakstu.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Binārus datus iekodē teksta formā.",
        "Documentation.LongDescription": "Atgriež rezultātu bināru skaitļu saraksta <code>binary</code> pārvēršanai par teksta vērtību. Pēc izvēles var iekļaut vērtību <code>encoding</code>, lai norādītu kodējumu, ko izmantot izveidotajai teksta vērtībai\r\n      Vērtībai <code>encoding</code> var izmantot tālāk norādītās <code>BinaryEncoding</code> vērtības.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: kodējums Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: heksadecimālais kodējums</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Izveido modificētu kļūdas ierakstu, kas neaktivizēs atkāpšanos, kad to aktivizēs skatam noteiktais apstrādātājs (izmantojot Binary.View).",
        "Documentation.LongDescription": "Izveido modificētu kļūdas ierakstu no <code>errorRecord</code>, kas neaktivizēs atkāpšanos, kad to aktivizēs skatam noteiktais apdarinātājs (izmantojot Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Izveido funkciju, kuru var pārtvert skatā definētais apdarinātājs (izmantojot Binary.View).",
        "Documentation.LongDescription": "<p>Pamatojoties uz <code>function</code>, tiek izveidota skata funkcija, kuru var apstrādāt funkcijas <code>Binary.View</code> izveidotajā skatā.</p>\r\n<p>Skata funkcijai var definēt apdarinātāju, izmantojot funkcijas <code>Binary.View</code> apdarinātāju <code>OnInvoke</code>.</p>\r\n<p>Tāpat kā iebūvēto darbību apdarinātājiem, ja apdarinātājs <code>OnInvoke</code> netiek norādīts vai tas neapstrādā skata funkciju, vai rada kļūdu, <code>function</code> tiek lietota virs skata.</p>\r\n<p>Pilnīgāku <code>Binary.View</code> un pielāgoto skata funkciju aprakstu skatiet publicētajā Power Query pielāgotā savienotāja dokumentācijā.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Binārs formāts, kas satur 64 bitu veselo skaitli ar zīmi, kurš tika iekodēts, izmantojot 7 bitu mainīga garuma kodējumu.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 64 bitu veselo skaitli ar zīmi, kurš tika iekodēts, izmantojot 7 bitu mainīga garuma kodējumu.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Binārs formāts, kas satur 64 bitu veselo skaitli bez zīmes, kurš tika iekodēts, izmantojot 7 bitu mainīga garuma kodējumu.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 64 bitu veselo skaitli bez zīmes, kurš tika iekodēts, izmantojot 7 bitu mainīga garuma kodējumu.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Binārs formāts, kas satur 8 bitu veselo skaitli bez zīmes.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 8 bitu veselo skaitli bez zīmes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Binārs formāts, kas satur .NET 16 baitu decimālo vērtību.",
        "Documentation.LongDescription": "Binārs formāts, kas satur .NET 16 baitu decimālo vērtību.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Binārs formāts, kas satur 8 baitu IEEE dubultprecizitātes peldošā komata vērtību.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 8 baitu IEEE dubultprecizitātes peldošā komata vērtību.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Atgriež bināru formātu, kas nolasa vienumu sekvenci un atgriež sarakstu.",
        "Documentation.LongDescription": "Atgriež bināru formātu, kas satur vienumu secību un atgriež <code>sarakstu</code>. Parametrs <code>binaryFormat</code> norāda katra vienuma bināro formātu. Lasīto vienumu skaitu var noteikt trīs veidos. <ul><li>Ja vērtība <code>countOrCondition</code> nav norādīta, tad binārais formāts lasīs, līdz vairs nebūs vienumu.</li><li>Ja vērtība <code>countOrCondition</code> ir skaitlis, tad binārais formāts lasīs atbilstšu vienumu daudzumu.</li><li>Ja vērtība <code>countOrCondition</code> ir funkcija, tad šī funkcija tiks izsaukta katram lasītajam vienumam. Funkcija atgriež vērtību “patiess”, lai turpinātu, un vērtību “aplams”, lai pārtrauktu vienumu lasīšanu. Pēdējais vienums tiek iekļauts sarakstā.</li><li>Ja <code>countOrCondition</code> ir binārs formāts, tad tiek sagaidīts, ka vienumu skaits ir pirms saraksta, un skaita lasīšanai tiek izmantots norādītais formāts.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Lasīt baitus līdz datu beigām.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Lasīt divus baitus.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Lasīt baitus, līdz baitu vērtība ir lielāka par vai vienāda ar divi.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Binārs formāts, kas satur nulli baitu un atgriež Null.",
        "Documentation.LongDescription": "Binārs formāts, kas satur nulli baitu un atgriež Null.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Atgriež bināru formātu, kas satur ierakstu.",
        "Documentation.LongDescription": "Atgriež bināru formātu, kas satur ierakstu.  Parametrs <code>record</code> norāda ieraksta formātu.  Katram ieraksta laukam var būt citāds binārais formāts.  Ja laukā ir vērtība, kas nav bināra formāta vērtība, tad attiecīgajam laukam netiek nolasīti nekādi dati, un rezultātā tiek izvadīta lauka vērtība.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Lasiet ierakstu, kurā ir viens 16 bitu veselais skaitlis un viens 32 bitu veselais skaitlis.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Binārs formāts, kas satur 16 bitu veselo skaitli ar zīmi.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 16 bitu veselo skaitli ar zīmi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Binārs formāts, kas satur 32 bitu veselo skaitli ar zīmi.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 32 bitu veselo skaitli ar zīmi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Binārs formāts, kas satur 64 bitu veselo skaitli ar zīmi.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 64 bitu veselo skaitli ar zīmi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Binārs formāts, kas satur 4 baitu IEEE vienkāršās precizitātes peldošā komata vērtību.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 4 baitu IEEE vienkāršās precizitātes peldošā komata vērtību.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Atgriež bināru formātu, kas satur teksta vērtību.",
        "Documentation.LongDescription": "Atgriež bināru formātu, kas satur teksta vērtību. Vērtība <code>length</code> norāda dekodējamo baitu skaitu vai garuma bināro formātu, kas atrodas teksta priekšā. Neobligātā vērtība <code>encoding</code> norāda teksta kodējumu. Ja vērtība <code>encoding</code> nav norādīta, tad kodējums tiek noteikts no Unikoda baitu secības atzīmēm. Ja nav nevienas baitu secības atzīmes, tad tiek izmantots <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Dekodēt divus baitus kā ASCII tekstu.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Dekodēt ASCII tekstu, ja teksta garums baitos tiek rādīts teksta priekšā kā baits.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Binārs formāts, kas satur 16 bitu veselo skaitli bez zīmes.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 16 bitu veselo skaitli bez zīmes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Binārs formāts, kas satur 32 bitu veselo skaitli bez zīmes.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 32 bitu veselo skaitli bez zīmes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Binārs formāts, kas satur 64 bitu veselo skaitli bez zīmes.",
        "Documentation.LongDescription": "Binārs formāts, kas satur 64 bitu veselo skaitli bez zīmes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Izveido veselu 8 bitu skaitli no dotās vērtības.",
        "Documentation.LongDescription": "Atgriež 8 bitu veselā skaitļa <code>number</code> vērtību no dotā <code>value</code>. Ja dotais <code>value</code> ir <code>null</code>, <code>Byte.From</code> atgriež <code>null</code>. Ja dotais <code>value</code> ir <code>number</code> 8 bitu veselā skaitļa diapazonā bez daļskaitļa, tad tiek atgriezts <code>value</code>. Ja skaitlis ir daļskaitlis, tad skaitlis tiek noapaļots atbilstoši norādītajam noapaļošanas režīmam. Noklusējuma noapaļošanas režīms ir <code>RoundingMode.ToEven</code>. Ja <code>value</code> ir jebkura cita veida, tad vispirms tas tiks konvertēts par <code>skaitli</code>, izmantojot <code>Number.FromText</code>. Skatiet <code>Number.Round</code>, lai uzzinātu par pieejamajiem noapaļošanas režīmiem. Ir iespējams izmantot papildu <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūt <code>\"4\"</code> vesela 8 bitu skaitļa <code>number</code> vērtību.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Iegūt <code>\"4.5\"</code> vesela 8 bitu skaitļa <code>number</code> vērtību, izmantojot <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Pārvērš skaitli par teksta rakstzīmi.",
        "Documentation.LongDescription": "Atgriež skaitlim atbilstošo rakstzīmi.<br>\r\n    <br>\r\n    Norādītajam <code>number</code> ir jābūt 21 bita unikoda rakstzīmes kodam.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Pārvērst skaitli par tam atbilstošo rakstzīmes vērtību.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Pārvērst rakstzīmi par skaitli un atpakaļ.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Pārvērst smaidiņa “plati smaidoša seja” heksadecimālo rakstzīmes kodu par atbilstošo UTF-16 surogātpāri.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Pārvērš rakstzīmi par skaitlisku vērtību.",
        "Documentation.LongDescription": "Atgriež rakstzīmei <code>character</code> atbilstošo skaitli.<br>\r\n    <br>\r\n    Rezultāts būs 21 bita unikoda rakstzīmes kods, kam atbilst norādītā rakstzīme vai surogātpāris.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Pārvērst rakstzīmi par tai atbilstošo skaitļa vērtību.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Pārvērst smaidiņa “plati smaidoša seja” UTF-16 surogātpāri par atbilstošo heksadecimālo rakstzīmes kodu.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Atgriež funkciju, kas kombinē teksta sarakstu, izmantojot norādīto norobežotāju.",
        "Documentation.LongDescription": "Atgriež funkciju, kas teksta vērtību sarakstu apvieno vienā teksta vērtībā, izmantojot norādīto norobežotāju.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinējiet teksta vērtību sarakstu, izmantojot semikolu norobežotāju.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Apvienojiet divu kolonnu tekstu, izmantojot komata atdalītāju un CSV stila pēdiņās.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Atgriež funkciju, kas kombinē teksta sarakstu, izmantojot norobežotāju secību.",
        "Documentation.LongDescription": "Atgriež funkciju, kas teksta vērtību sarakstu kombinē vienā teksta vērtībā, izmantojot atdalītāju secību.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinēt teksta vērtību sarakstu, izmantojot norobežotāju secību.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Atgriež funkciju, kas kombinē teksta sarakstu, izmantojot norādītos garumus.",
        "Documentation.LongDescription": "Atgriež funkciju, kas teksta vērtību sarakstu kombinē vienā teksta vērtībā, izmantojot norādītos garumus.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinēt teksta vērtību sarakstu, no katras ievades vērtības izvelkot norādītos rakstzīmju daudzumus.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Kombinēt teksta vērtību sarakstu, izvelkot norādītos rakstzīmju daudzumus, pirms tam aizpildot rezultātu ar veidnes tekstu.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Atgriež funkciju, kas kombinē teksta sarakstu, izmantojot norādītās izvades pozīcijas.",
        "Documentation.LongDescription": "Atgriež funkciju, kas teksta vērtību sarakstu kombinē vienā teksta vērtībā, izmantojot norādītās izvades pozīcijas.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinēt teksta vērtību sarakstu, izvadē tās ievietojot norādītajās pozīcijās.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Atgriež funkciju, kas kombinē teksta sarakstu, izmantojot norādītās pozīcijas un garumus.",
        "Documentation.LongDescription": "Atgriež funkciju, kas teksta vērtību sarakstu kombinē vienā teksta vērtībā, izmantojot norādītās izvades pozīcijas un garumus. Garums Null norāda, ka ir jāiekļauj visa teksta vērtība.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Kombinēt teksta vērtību sarakstu, izmantojot norādītās izvades pozīcijas un garumus.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Atgriež salīdzināšanas funkciju atbilstoši norādītajai kultūrai un reģistrjutīgumam.",
        "Documentation.LongDescription": "Atgriež salīdzināšanas funkciju, kas salīdzināšanai izmanto <code>culture</code> un <code>ignoreCase</code> norādīto reģistrjutību. <br>\r\n      <br>\r\n      Salīdzināšanas funkcija pieņem divus argumentus un atgriež -1, 0 vai 1, pamatojoties uz to, vai pirmā vērtība ir mazāka par, vienāda ar vai lielāka par otro.<br>\r\n      <br>\r\n      Noklusējuma vērtība <code>ignoreCase</code> ir “nepatiess”. <code>culture</code> jābūt vienai no .NET struktūras atbalstītajām lokalizācijām (piemēram, \"lv-LV\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Lai noteiktu, vai vērtības ir vienādas, salīdziniet \"a\" un \"A\", izmantojot lokalizāciju \"en-US\". ",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Lai noteiktu, vai vērtības ir vienādas, salīdziniet \"a\" un \"A\", izmantojot lokalizāciju \"en-US\" un ignorējot lielo/mazo burtu lietojumu.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Tiek atgriezts unikālais dalībnieka identifikators no dalībnieka rekvizīta vērtības.",
        "Documentation.LongDescription": "Tiek atgriezts unikālais dalībnieka identifikators no dalībnieka rekvizīta vērtības. <code>attribute</code>. Citām vērtībām tiek atgriezta vērtība Null.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Atgriež rekvizīta atslēgu.",
        "Documentation.LongDescription": "Atgriež rekvizīta <code>property</code> atslēgu.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Atgriež valūtas vērtību no dotās vērtības.",
        "Documentation.LongDescription": "Tiek atgriezta tipa <code>currency</code> vērtība, kas ir iegūta no norādītās parametra <code>value</code> vērtības. Ja norādītā parametra <code>value</code> vērtība ir <code>null</code>, funkcija <code>Currency.From</code> atgriež vērtību <code>null</code>.  Ja norādītās parametra <code>value</code> vērtības tips ir <code>number</code> un tā ir valūtas vērtību diapazonā, parametra <code>value</code> vērtības daļa aiz komata tiek noapaļota līdz 4 cipariem un tā tiek atgriezta. Ja <code>value</code> ir jebkura cita veida, tas vispirms tiks konvertēts par <code>number</code>, izmantojot <code>Number.FromText</code>. Derīgs valūtas vērtību diapazons ir no <code>-922337203685477,5808</code> līdz <code>922337203685477,5807</code>. Informāciju par pieejamajiem noapaļošanas režīmiem skatiet funkcijas <code>Number.Round</code> aprakstā. Pēc noklusējuma tiek izmantots režīms <code>RoundingMode.ToEven</code>. Ir iespējams nodrošināt arī papildu <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūt <code>\"1.23455\"</code> vērtību <code>currency</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Iegūstiet tipa <code>currency</code> vērtību <code>\"1.23455\"</code>, izmantojot funkciju <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Atgriež dienas komponentu.",
        "Documentation.LongDescription": "Atgriež <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtības dienas komponentu.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, no kuras tiek izgūts dienas komponents.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Iegūt dienas komponentu <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībai, kas apzīmē datumu un laiku 14.05.2011. plkst. 17:00:00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Atgriež skaitli (no 0 līdz 6), kas apzīmē norādītās vērtības nedēļas dienu.",
        "Documentation.LongDescription": "Atgriež skaitli (no 0 līdz 6), kas apzīmē norādītās <code>dateTime</code> vērtības nedēļas dienu.\r\n  <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība.</li>\r\n        <li><code>firstDayOfWeek</code>: <code>Day</code> vērtība, kas norāda, kura diena jāuzskata par pirmo nedēļas dienu. Atļautās vērtības ir Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday un Day.Saturday. Ja vērtība nav norādīta, tiek izmantots no kultūras atkarīgs noklusējums.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noskaidrojiet, kurā nedēļas dienā iekrīt pirmdiena, 2011. gada 21. februāris, ja par pirmo nedēļas dienu tiek uzskatīta svētdiena.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Noskaidrojiet, kurā nedēļas dienā iekrīt pirmdiena, 2011. gada 21. februāris, ja par pirmo nedēļas dienu tiek uzskatīta pirmdiena.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Atgriež nedēļas dienas nosaukumu.",
        "Documentation.LongDescription": "Atgriež norādītā parametra <code>date</code> nedēļas dienas nosaukumu. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Saņemiet nedēļas dienas nosaukumu.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Atgriež skaitli no 1 līdz 366, kas norāda dienu gadā.",
        "Documentation.LongDescription": "Atgriež skaitli, kas norāda gada dienu sniegtajā <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībā, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gada diena 2011. gada 1. martam.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Atgriež skaitli no 28 līdz 31, kas norāda dienu skaitu mēnesī.",
        "Documentation.LongDescription": "Atgriež dienu skaitu mēnesī <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībā <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kam tiek atgriezts dienu skaits mēnesī.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Decembra mēneša dienu skaits, norādīts ar <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Atgriež dienas beigas.",
        "Documentation.LongDescription": "Atgriež dienas beigas, kas apzīmēts ar <code>dateTime</code>. Informācija par laika joslu tiek saglabāta.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, no kuras tiek aprēķinātas dienas beigas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet dienas beigas vērtībai 14.05.2011. plkst. 17:00:00.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Iegūstiet dienas beigas vērtībai 17.05.2011. plkst. 17:00:00 -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Atgriež mēneša beigas.",
        "Documentation.LongDescription": "Atgriež mēneša beigas vērtībā, kas satur <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, no kuras tiek aprēķinātas mēneša beigas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet mēneša beigas vērtībai 14.05.2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Iegūstiet mēneša beigas vērtībai 17.05.2011. plkst. 17:00:00 -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Atgriež ceturkšņa beigas.",
        "Documentation.LongDescription": "Atgriež ceturkšņa beigas vērtībā, kas satur <code>dateTime</code>. Informācija par laika joslu tiek saglabāta.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, no kuras tiek aprēķinātas ceturkšņa beigas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet ceturkšņa beigas 2011. gada 10. oktobrim, plkst. 8.00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Atgriež nedēļas beigas.",
        "Documentation.LongDescription": "Atgriež nedēļas beigas, kas satur <code>dateTime</code>. \r\nŠī funkcija izmanto neobligātu <code>Day</code> vērtību, <code>firstDayOfWeek</code>, ko iestatīt kā nedēļas pirmo dienu šim relatīvajam aprēķinam. Noklusējuma vērtība ir <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, no kuras tiek aprēķināta pēdējā nedēļas diena</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Neobligāti]</i> <code>Day.Type</code> vērtība, kas norāda pirmo nedēļas dienu. Iespējamās vērtības: <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> un <code>Day.Saturday.</code>. Noklusējuma vērtība ir <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet nedēļas beigas vērtībai 14.05.2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Noskaidrojiet nedēļas beigas vērtībai 17.05.2011 plkst. 17:00:00 -7:00, ja nedēļas pirmā diena ir svētdiena.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Atgriež gada beigas.",
        "Documentation.LongDescription": "Atgriež gada beigas, kas satur <code>dateTime</code>, ieskaitot sekunžu daļas. Tiek saglabāta informācija par laika joslu.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, no kuras tiek aprēķinātas gada beigas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet gada beigas vērtībai 14.05.2011. plkst 17:00:00.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Iegūstiet stundas beigas vērtībai 17.05.2011. plkst. 17:00:00 -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Izveido datumu no sniegtās vērtības.",
        "Documentation.LongDescription": "Atgriež <code>date</code> vērtību no norādītās vērtības <code>value</code>. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").\r\nJa norādītā vērtība <code>value</code> ir <code>Null</code>, <code>Date.From</code> atgriež <code>Null</code>. Ja norādītā vērtība <code>value</code> ir <code>date</code>, tiek atgriezts <code>value</code>. Tālāk minēto tipu vērtības var pārvērst par <code>date</code> vērtību.\r\n      <ul>\r\n        <li><code>text</code>: <code>date</code> vērtība no teksta atveidojuma. Papildinformāciju skatiet sadaļā <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: <code>value</code> datuma komponents.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> vietējā datetime ekvivalenta datuma komponents.</li>\r\n        <li><code>number</code>: datetime ekvivalenta datuma komponents OLE automatizācijas datumam, kas izteikts ar <code>value</code>.</li>\r\n      </ul>\r\nJa vērtībai <code>value</code> ir jebkāds cits tips, tiek atgriezta kļūda.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet <code>43910</code> par <code>date</code> vērtību.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Pārveidojiet <code>#datetime(1899, 12, 30, 06, 45, 12)</code> par <code>date</code> vērtību.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Izveido Date no lokālā, universālā un pielāgotā Date formāta.",
        "Documentation.LongDescription": "Izveido <code>date</code> vērtību no teksta atveidojuma, <code>text</code>. Neobligāts <code>ieraksta</code> parametrs, <code>options</code>, var tikt nodrošināts, lai precizētu papildu rekvizītus. <code>Ieraksts</code> var saturēt tālāk norādītos laukus:\r\n<ul>\r\n   <li><code>Format</code>: <code>teksta</code> vērtība, kas norāda uz izmantojamo formātu. Dodieties uz https://go.microsoft.com/fwlink/?linkid=2180104 un https://go.microsoft.com/fwlink/?linkid=2180105. Šī lauka izlaišanas vai <code>null</code> vērtības norādīšanas rezultātā notiks datuma parsēšana, izmantojot labākos rezultātus.</li>\r\n   <li><code>Culture</code>: kad <code>Format</code> vērtība nav null, <code>Culture</code> kontrolē atsevišķus formāta apzīmētājus. Piemēram, <code>\"en-US\"</code> <code>\"MMM\"</code> ir <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, bet <code>\"ru-RU\"</code> <code>\"MMM\"</code> ir <code>\"янв\", \"фев\", \"мар\", ...</code>. Kad <code>Format</code> ir <code>null</code>, <code>Culture</code> kontrolē noklusējuma formāta izmantošanu. Kad <code>Culture</code> ir <code>null</code> vai izlaists, tiek izmantots <code>Culture.Current</code>.</li>\r\n</ul>\r\nLai atbalstītu mantotās darbplūsmas, <code>options</code> var būt arī teksta vērtības. Tam ir tāda pati uzvedība kā tad, ja <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertēt <code>\"2010-12-31\"</code> par <code>date</code> vērtību.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Konvertēt, izmantojot pielāgotu formātu un vācu kultūru.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Atrodiet datumu Gregora kalendārā, kas atbilst 1400. gada pēc Hidžras kalendāra sākumam.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Norāda, vai šis datums ir pašreizējā dienā, kā to nosaka sistēmas pašreizējais datums un laiks.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datetime vērtība <code>dateTime</code> ir pašreizējā dienā, kā to nosaka sistēmas pašreizējais datums un laiks.\r\n      <ul>\r\n      <li><code>dateTime</code>: novērtējamā <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai pašreizējais sistēmas laiks atrodas pašreizējā dienā.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Norāda, vai šis datums ir pašreizējā mēnesī, kā to nosaka sistēmas pašreizējais datums un laiks.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datetime vērtība <code>dateTime</code> ir pašreizējā mēnesī, kā to nosaka sistēmas pašreizējais datums un laiks.\r\n      <ul>\r\n      <li><code>dateTime</code>: novērtējamā <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai pašreizējais sistēmas laiks atrodas pašreizējā mēnesī.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Norāda, vai šis datums ir pašreizējā ceturksnī, kā to nosaka sistēmas pašreizējais datums un laiks.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datetime vērtība <code>dateTime</code> ir pašreizējā ceturksnī, kā to nosaka sistēmas pašreizējais datums un laiks.\r\n      <ul>\r\n      <li><code>dateTime</code>: novērtējamā <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai pašreizējais sistēmas laiks atrodas pašreizējā ceturksnī.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Norāda, vai šis datums ir pašreizējā nedēļā, kā to nosaka sistēmas pašreizējais datums un laiks.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datetime vērtība <code>dateTime</code> ir pašreizējā nedēļā, kā to nosaka sistēmas pašreizējais datums un laiks.\r\n      <ul>\r\n      <li><code>dateTime</code>: novērtējamā <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai pašreizējais sistēmas laiks atrodas pašreizējā nedēļā.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Norāda, vai šis datums ir pašreizējā gadā, kā to nosaka sistēmas pašreizējais datums un laiks.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datetime vērtība <code>dateTime</code> ir pašreizējā gadā, kā to nosaka sistēmas pašreizējais datums un laiks.\r\n      <ul>\r\n      <li><code>dateTime</code>: novērtējamā <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai pašreizējais sistēmas laiks atrodas pašreizējā gadā.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajā dienā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā dienā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajā dienā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā dienā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai nākamā diena pēc pašreizējā sistēmas laika atrodas nākamajā dienā.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajā mēnesī atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā mēnesī.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajā mēnesī atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā mēnesī.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai nākamais mēnesis pēc pašreizējā sistēmas laika atrodas nākamajā mēnesī.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajā ceturksnī atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā ceturksnī.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajā ceturksnī atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā ceturksnī.\r\n      <ul> <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.\r\n      </li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai nākamais ceturksnis pēc pašreizējā sistēmas laika atrodas nākamajā ceturksnī.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajā nedēļā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā nedēļā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajā nedēļā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā nedēļā.\r\n      <ul> <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.\r\n      </li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai nākamā nedēļa pēc pašreizējā sistēmas laika atrodas nākamajā nedēļā.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Norāda, vai šis datums ir nākamajā gadā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā gadā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajā gadā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā gadā.\r\n      <ul> <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.\r\n      </li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai nākamais gads pēc pašreizējā sistēmas laika atrodas nākamajā gadā.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējā dienā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā dienā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējā dienā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā dienā.\r\n      <ul> <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.\r\n      </li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai iepriekšējā diena pirms pašreizējā sistēmas laika atrodas iepriekšējā dienā.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējā mēnesī atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā mēnesī.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējā mēnesī atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā mēnesī.\r\n      <ul> <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.\r\n      </li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai iepriekšējais mēnesis pirms pašreizējā sistēmas laika atrodas iepriekšējā mēnesī.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējā ceturksnī atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā ceturksnī.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējā ceturksnī atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā ceturksnī.\r\n      <ul> <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.\r\n      </li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai iepriekšējais ceturksnis pirms pašreizējā sistēmas laika atrodas iepriekšējā ceturksnī.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējā nedēļā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā nedēļā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējā nedēļā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā nedēļā.\r\n      <ul> <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.\r\n      </li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai iepriekšējā nedēļa pirms pašreizējā sistēmas laika atrodas iepriekšējā nedēļā.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Norāda, vai šis datums ir iepriekšējā gadā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā gadā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējā gadā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā gadā.\r\n      <ul> <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.\r\n      </li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai iepriekšējais gads pirms pašreizējā sistēmas laika atrodas iepriekšējā gadā.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Norāda, vai šis datums ir pašreizējā gadā un vai tas ir pašreizējā dienā vai pirms tās, kā to nosaka sistēmas pašreizējais datums un laiks.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datetime vērtība <code>dateTime</code> ir pašreizējā gadā un vai tā ir pašreizējā dienā vai pirms tās, kā to nosaka sistēmas pašreizējais datums un laiks.\r\n      <ul>\r\n      <li><code>dateTime</code>: novērtējamā <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Noteikt, vai pašreizējais sistēmas laiks atrodas līdzšinējā gadā.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Norāda, vai šis datums iekrīt garajā gadā.",
        "Documentation.LongDescription": "Norāda, vai norādītā datetime vērtība <code>dateTime</code> iekrīt garajā gadā. \r\n <ul>\r\n        <li><code>dateTime</code>: novērtējamā <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai 2012. gads, kā to norāda <code>#date(2012, 01, 01)</code>, ir garais gads.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Atgriež mēneša komponentu.",
        "Documentation.LongDescription": "Atgriež sniegtās <code>datetime</code> vērtības, <code>dateTime</code>, mēneša komponentu.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet mēnesi vērtībā #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Atgriež mēneša komponenta nosaukumu.",
        "Documentation.LongDescription": "Atgriež norādītā parametra <code>date</code> mēneša komponenta nosaukumu. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Saņemiet mēneša nosaukumu.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Atgriež skaitli, kas norāda, kurā gada ceturksnī šis datums iekrīt.",
        "Documentation.LongDescription": "Atgriež skaitli no 1 līdz 4, kas norāda, kurā gada ceturksnī iekrīt datums <code>dateTime</code>. <code>dateTime</code> var būt <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet, kurā gada ceturksnī iekrīt datums #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Atgriež dienas sākumu.",
        "Documentation.LongDescription": "Atgriež dienas sākumu, kas apzīmēts ar <code>dateTime</code>.\r\n    <code>dateTime</code> jābūt vērtībai <code>date</code>, <code>datetime</code> vai <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet dienas sākumu 2011. gada 10. oktobrim, plkst. 8.00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Atgriež mēneša sākumu.",
        "Documentation.LongDescription": "Atgriež tā mēneša sākumu, kas satur <code>dateTime</code>.\r\n    <code>dateTime</code> jābūt vērtībai <code>date</code> vai <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet mēneša sākumu 2011. gada 10. oktobrim, plkst. 8:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Atgriež ceturkšņa sākumu.",
        "Documentation.LongDescription": "Atgriež ceturkšņa sākumu, kas satur <code>dateTime</code>.\r\n    <code>dateTime</code> jābūt vērtībai <code>date</code>, <code>datetime</code> vai <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet ceturkšņa sākumu 2011. gada 10. oktobrim, plkst. 8.00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Tiek atgriezts nedēļas sākums.",
        "Documentation.LongDescription": "Atgriež nedēļas sākumu, kas satur <code>dateTime</code>.\r\n    <code>dateTime</code> jābūt vērtībai <code>date</code>, <code>datetime</code> vai <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet nedēļas sākumu otrdienai, 2011. gada 11. oktobrim.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Atrodiet nedēļas sākumu otrdienai, 2011. gada 11. oktobrim, izmantojot pirmdienu kā nedēļas sākumu.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Atgriež gada sākumu.",
        "Documentation.LongDescription": "Atgriež gada sākumu, kas satur <code>dateTime</code>.\r\n    <code>dateTime</code> jābūt vērtībai <code>date</code>, <code>datetime</code> vai <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet gada sākumu 2011. gada 10. oktobrim, plkst. 8:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Atgriež ierakstu, kurā ir datuma vērtības daļas.",
        "Documentation.LongDescription": "Atgriež ierakstu, kurā ir daļas no norādītās datuma vērtības <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: <code>date</code> vērtība, no kuras tiek aprēķināts tās daļu ieraksts.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet vērtību <code>#date(2011, 12, 31)</code> par ierakstu, kas ietver daļas no datuma vērtības.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Atgriež datuma vērtības teksta attēlojumu.",
        "Documentation.LongDescription": "Atgriež <code>date</code> teksta atveidojumu. Neobligāts <code>record</code> parametrs, <code>options</code>, var tikt nodrošināts, lai precizētu papildu rekvizītus. <code>culture</code> tiek izmantots tikai mantotās darbplūsmās. <code>record</code> var saturēt tālāk norādītos laukus:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> vērtība, kas norāda uz izmantojamo formātu. Dodieties uz https://go.microsoft.com/fwlink/?linkid=2180104 un https://go.microsoft.com/fwlink/?linkid=2180105. Šī lauka izlaišanas vai <code>null</code> vērtības norādīšanas rezultātā tiks izmantots noklusējuma datuma noformējums, ko nosaka <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: kad <code>Format</code> vērtība nav null, <code>Culture</code> kontrolē atsevišķus formāta apzīmētājus. Piemēram, <code>\"en-US\"</code> <code>\"MMM\"</code> ir <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, bet <code>\"ru-RU\"</code> <code>\"MMM\"</code> ir <code>\"янв\", \"фев\", \"мар\", ...</code>. Kad <code>Format</code> ir <code>null</code>, <code>Culture</code> kontrolē noklusējuma formāta izmantošanu. Kad <code>Culture</code> ir <code>null</code> vai izlaists, tiek izmantots <code>Culture.Current</code>.</li>\r\n</ul>\r\nLai atbalstītu mantotās darbplūsmas, <code>options</code> un <code>culture</code> var būt arī teksta vērtības. Tam ir tāda pati uzvedība kā tad, ja <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertēt <code>#date(2010, 12, 31)</code> par <code>text</code> vērtību. <i>Rezultāts var atšķirties atkarībā no pašreizējās kultūras.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Konvertēt, izmantojot pielāgotu formātu un vācu kultūru.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Atrodiet gadu Hidžras kalendārā, kas atbilst 2000. gada 1. janvārim pēc Gregora kalendāra.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Atgriež skaitli no 1 līdz 6, kas norāda, kurā mēneša nedēļā iekrīt šis datums.",
        "Documentation.LongDescription": "Atgriež skaitli no 1 līdz 6, kas norāda, kurā mēneša nedēļā iekrīt datums <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: <code>datetime</code> vērtība, kurai tiek noteikta mēneša nedēļas vērtība.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, kurā 2011. gada marta nedēļā ir 15. datums.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Atgriež skaitli no 1 līdz 54, kas norāda, kurā gada nedēļā iekrīt šis datums.",
        "Documentation.LongDescription": "Atgriež skaitli no 1 līdz 54, norādot, kurā gada nedēļā iekrīt datums <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Vērtība <code>datetime</code>, kurai ir noteikta gada nedēļa.</li>\r\n        <li><code>firstDayOfWeek</code>: Neobligāta vērtība <code>Day.Type</code>, kas norāda, kura diena tiek uzskatīta par jaunas nedēļas sākumu (piemēram, <code>Day.Sunday</code>). Ja šī vērtība nav norādīta, tiek izmantota no kultūras atkarīgā noklusējuma vērtība.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, kurā gada nedēļā ir 2011. gada 27. marts.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Nosakiet, kurā gada nedēļā ir 2011. gada 27. marts, kā nedēļas sākumu izmantojot pirmdienu.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Atgriež gada komponentu.",
        "Documentation.LongDescription": "Atgriež sniegtās <code>datetime</code> vērtības, <code>dateTime</code>, gada komponentu.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrast gadu vērtībā #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Atgriež datuma komponentu noteiktai datuma, datuma un laika vai datuma, laika un laika joslas vērtībai.",
        "Documentation.LongDescription": "Atgriež datuma komponentu <code>dateTime</code>, dotajai <code>date</code>, <code>datetime</code> vai <code>datetimezone</code> vērtībai.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Atrast datuma vērtību vērtībai #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Izveido datetime vērtību no sniegtās vērtības.",
        "Documentation.LongDescription": "Atgriež <code>datetime</code> vērtību no norādītās vērtības <code>value</code>. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").\r\nJa norādītā vērtība <code>value</code> ir <code>Null</code>, <code>DateTime.From</code> atgriež <code>Null</code>. Ja norādītā vērtība <code>value</code> ir <code>datetime</code>, tiek atgriezts <code>value</code>. Tālāk minēto tipu vērtības var pārvērst par <code>datetime</code> vērtību.\r\n      <ul>\r\n        <li><code>text</code>: <code>datetime</code> vērtība no teksta atveidojuma. Papildinformāciju skatiet sadaļā <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: <code>datetime</code> vērtība ar <code>value</code> kā datuma komponentu un <code>12:00:00 AM</code> kā laika komponentu.</li>\r\n        <li><code>datetimezone</code>: vietējais <code>datetime</code> ekvivalents vērtībai <code>value</code>.</li>\r\n        <li><code>time</code>: <code>datetime</code> vērtība, kuras datuma komponents ir OLE automatizācijas datuma <code>0</code> ekvivalents un kuras laika komponents ir <code>value</code>.</li>\r\n        <li><code>number</code>: <code>datetime</code> vērtības ekvivalents OLE automatizācijas datumam, kas izteikts ar <code>value</code>. </li>\r\n      </ul>\r\nJa vērtībai <code>value</code> ir jebkāds cits tips, tiek atgriezta kļūda.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet <code>#time(06, 45, 12)</code> par <code>datetime</code> vērtību.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Pārveidojiet <code>#date(1975, 4, 4)</code> par <code>datetime</code> vērtību.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Izveido datetime vērtību no 64 bitu gara skaitļa.",
        "Documentation.LongDescription": "Izveido <code>datetime</code> vērtību no vērtības <code>fileTime</code> un konvertē to vietējā laika joslā. Vērtība filetime ir Windows faila laika vērtība, kas ataino 100 nanosekunžu intervālu skaitu, kuri ir pagājuši kopš m.ē. 1601. gada 1. janvāra pusnakts, 24:00. (C.E.), Universālais koordinētais laiks (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertējiet <code>129876402529842245</code> par datetime vērtību.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Izveido datetimezone vērtību no vietējā un universālā datetime formāta.",
        "Documentation.LongDescription": "Izveido <code>datetime</code> vērtību no teksta atveidojuma, <code>text</code>. Neobligāts <code>ieraksta</code> parametrs, <code>options</code>, var tikt nodrošināts, lai precizētu papildu rekvizītus. <code>Ieraksts</code> var saturēt tālāk norādītos laukus:\r\n<ul>\r\n   <li><code>Format</code>: <code>teksta</code> vērtība, kas norāda uz izmantojamo formātu. Dodieties uz https://go.microsoft.com/fwlink/?linkid=2180104 un https://go.microsoft.com/fwlink/?linkid=2180105. Šī lauka izlaišanas vai <code>null</code> vērtības norādīšanas rezultātā notiks datuma parsēšana, izmantojot labākos rezultātus.</li>\r\n   <li><code>Culture</code>: kad <code>Format</code> vērtība nav null, <code>Culture</code> kontrolē atsevišķus formāta apzīmētājus. Piemēram, <code>\"en-US\"</code> <code>\"MMM\"</code> ir <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, bet <code>\"ru-RU\"</code> <code>\"MMM\"</code> ir <code>\"янв\", \"фев\", \"мар\", ...</code>. Kad <code>Format</code> ir <code>null</code>, <code>Culture</code> kontrolē noklusējuma formāta izmantošanu. Kad <code>Culture</code> ir <code>null</code> vai izlaists, tiek izmantots <code>Culture.Current</code>.</li>\r\n</ul>\r\nLai atbalstītu mantotās darbplūsmas, <code>options</code> var būt arī teksta vērtības. Tam ir tāda pati uzvedība kā tad, ja <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertēt <code>\"2010-12-31T01:30:00\"</code> uz datetime vērtību.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Konvertēt <code>\"2010-12-31T01:30:00.121212\"</code> uz datetime vērtību.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Konvertēt <code>\"2010-12-31T01:30:00\"</code> uz datetime vērtību.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Konvertēt <code>\"20101231T013000\"</code> uz datetime vērtību.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Norāda, vai šī datetime vērtība rodas pašreizējās stundas laikā, kā to nosaka pašreizējais sistēmas datums un laiks.",
        "Documentation.LongDescription": "Norāda, vai piešķirtā datetime vērtība <code>dateTime</code> rodas pašreizējās stundas laikā, kā to nosaka pašreizējais sistēmas datums un laiks.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai pašreizējais sistēmas laiks ir pašreizējā stundā.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Norāda, vai šī datetime vērtība rodas pašreizējās minūtes laikā, kā to nosaka pašreizējais sistēmas datums un laiks.",
        "Documentation.LongDescription": "Norāda, vai piešķirtā datetime vērtība <code>dateTime</code> rodas pašreizējās minūtes laikā, kā to nosaka pašreizējais sistēmas datums un laiks.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai pašreizējais sistēmas laiks ir pašreizējā minūtē.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Norāda, vai šī datetime vērtība rodas pašreizējās sekundes laikā, kā to nosaka pašreizējais sistēmas datums un laiks.",
        "Documentation.LongDescription": "Norāda, vai piešķirtā datetime vērtība <code>dateTime</code> rodas pašreizējās sekundes laikā, kā to nosaka pašreizējais sistēmas datums un laiks.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai pašreizējais sistēmas laiks ir pašreizējā sekundē.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir nākamajā stundā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā stundā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajā stundā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā stundā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai stunda pēc pašreizējā sistēmas laika ir nākamajā stundā.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir nākamajā minūtē atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā minūtē.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajā minūtē atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā minūtē.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai minūte pēc pašreizējā sistēmas laika ir nākamajā minūtē.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir nākamajā sekundē atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā sekundē.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir nākamajā sekundē atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā sekundē.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai sekunde pēc pašreizējā sistēmas laika ir nākamajā sekundē.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir iepriekšējā stundā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā stundā.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējā stundā atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā stundā.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai stunda pirms pašreizējā sistēmas laika ir iepriekšējā stundā.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir iepriekšējā minūtē atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā minūtē.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējā minūtē atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā minūtē.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai minūte pirms pašreizējā sistēmas laika ir iepriekšējā minūtē.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Norāda, vai šī datuma un laika vērtība ir iepriekšējā sekundē atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā sekundē.",
        "Documentation.LongDescription": "Norāda, vai sniegtā datuma un laika vērtība <code>dateTime</code> ir iepriekšējā sekundē atbilstoši sistēmas pašreizējam datumam un laikam. Ņemiet vērā, ka šī funkcija atgriež vērtību false, ja ir nodota vērtība, kas ir pašreizējā sekundē.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> vai <code>datetimezone</code> vērtība, kas ir jānovērtē.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai sekunde pirms pašreizējā sistēmas laika ir iepriekšējā sekundē.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Atgriež sniegtās datetime vērtības laika daļu.",
        "Documentation.LongDescription": "Atgriež sniegtās datetime vērtības, <code>dateTime</code>, laika daļu.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Atrast laika vērtību vērtībai #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Atgriež ierakstu, kurā ir datetime vērtības daļas.",
        "Documentation.LongDescription": "Atgriež ierakstu, kurā ir daļas no norādītās datetime vērtības, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: <code>datetime</code> vērtība, no kuras tiek aprēķināts tās daļu ieraksts.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet vērtību <code>#datetime(2011, 12, 31, 11, 56, 2)</code> par ierakstu, kas ietver vērtības Datums un Laiks.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Atgriež datetime vērtības teksta attēlojumu.",
        "Documentation.LongDescription": "Atgriež <code>dateTime</code> teksta atveidojumu. Neobligāts <code>record</code> parametrs, <code>options</code>, var tikt nodrošināts, lai precizētu papildu rekvizītus. <code>culture</code> tiek izmantots tikai mantotās darbplūsmās. <code>record</code> var saturēt tālāk norādītos laukus:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> vērtība, kas norāda uz izmantojamo formātu. Dodieties uz https://go.microsoft.com/fwlink/?linkid=2180104 un https://go.microsoft.com/fwlink/?linkid=2180105. Šī lauka izlaišanas vai <code>null</code> vērtības norādīšanas rezultātā tiks izmantots noklusējuma datuma noformējums, ko nosaka <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: kad <code>Format</code> vērtība nav null, <code>Culture</code> kontrolē atsevišķus formāta apzīmētājus. Piemēram, <code>\"en-US\"</code> <code>\"MMM\"</code> ir <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, bet <code>\"ru-RU\"</code> <code>\"MMM\"</code> ir <code>\"янв\", \"фев\", \"мар\", ...</code>. Kad <code>Format</code> ir <code>null</code>, <code>Culture</code> kontrolē noklusējuma formāta izmantošanu. Kad <code>Culture</code> ir <code>null</code> vai izlaists, tiek izmantots <code>Culture.Current</code>.</li>\r\n</ul>\r\nLai atbalstītu mantotās darbplūsmas, <code>options</code> un <code>culture</code> var būt arī teksta vērtības. Tam ir tāda pati uzvedība kā tad, ja <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertēt <code>#datetime(2010, 12, 31, 01, 30, 25)</code> par <code>text</code> vērtību. <i>Rezultāts var atšķirties atkarībā no pašreizējās kultūras.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Konvertēt, izmantojot pielāgotu formātu un vācu kultūru.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Konvertēt, izmantojot ISO 8601 modeli.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Izveido datetimezone vērtību no sniegtās vērtības.",
        "Documentation.LongDescription": "Atgriež <code>datetimezone</code> vērtību no norādītās vērtības <code>value</code>. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").\r\nJa norādītā vērtība <code>value</code> ir <code>Null</code>, <code>DateTimeZone.From</code> atgriež <code>Null</code>. Ja norādītā vērtība <code>value</code> ir <code>datetimezone</code>, tiek atgriezts <code>value</code>. Tālāk minēto tipu vērtības var pārvērst par <code>datetimezone</code> vērtību.\r\n      <ul>\r\n        <li><code>text</code>: <code>datetimezone</code> vērtība no teksta atveidojuma. Papildinformāciju skatiet sadaļā <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: <code>datetimezone</code> vērtība ar <code>value</code> kā datuma komponentu, <code>12:00:00 AM</code> kā laika komponentu un vietējai laika joslai atbilstošo nobīdi.</li>\r\n        <li><code>datetime</code>: <code>datetimezone</code> vērtība ar <code>value</code> kā datetime vērtību un vietējai laika joslai atbilstošo nobīdi.</li>\r\n        <li><code>time</code>: <code>datetimezone</code> vērtība, kuras datuma komponents ir OLE automatizācijas datuma <code>0</code> ekvivalents, kuras laika komponents ir <code>value</code> un kuras nobīde atbilst vietējai laika joslai.</li>\r\n        <li><code>number</code>: <code>datetimezone</code> vērtība ar OLE automatizācijas datuma datetime ekvivalentu, kas izteikts ar <code>value</code>, un vietējai laika joslai atbilstošo nobīdi.</li>\r\n      </ul>\r\nJa vērtībai <code>value</code> ir jebkāds cits tips, tiek atgriezta kļūda.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet <code>\"2020-10-30T01:30:00-08:00\"</code> par <code>datetimezone</code> vērtību.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Izveido datetimezone vērtību no 64 bitu gara skaitļa.",
        "Documentation.LongDescription": "Izveido vērtību <code>datetimezone</code> no vērtības <code>fileTime</code> un konvertē to uz vietējo laika joslu. Vērtība filetime ir Windows faila laika vērtība, kas ataino 100 nanosekunžu intervālu skaitu, kuri ir pagājuši kopš m.ē. 1601. gada 1. janvāra plkst. 24:00 pēc universālā koordinētā laika (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertēt <code>129876402529842245</code> par datetimezone vērtību.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Izveidot datetimezone no lokālā, universālā un pielāgota datetimezone formāta.",
        "Documentation.LongDescription": "Izveido <code>datetimezone</code> vērtību no teksta atveidojuma, <code>text</code>. Neobligāts <code>ieraksta</code> parametrs, <code>options</code>, var tikt nodrošināts, lai precizētu papildu rekvizītus. <code>Ieraksts</code> var saturēt tālāk norādītos laukus:\r\n<ul>\r\n   <li><code>Format</code>: <code>teksta</code> vērtība, kas norāda uz izmantojamo formātu. Dodieties uz https://go.microsoft.com/fwlink/?linkid=2180104 un https://go.microsoft.com/fwlink/?linkid=2180105. Šī lauka izlaišanas vai <code>null</code> vērtības norādīšanas rezultātā notiks datuma parsēšana, izmantojot labākos rezultātus.</li>\r\n   <li><code>Culture</code>: kad <code>Format</code> vērtība nav null, <code>Culture</code> kontrolē atsevišķus formāta apzīmētājus. Piemēram, <code>\"en-US\"</code> <code>\"MMM\"</code> ir <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, bet <code>\"ru-RU\"</code> <code>\"MMM\"</code> ir <code>\"янв\", \"фев\", \"мар\", ...</code>. Kad <code>Format</code> ir <code>null</code>, <code>Culture</code> kontrolē noklusējuma formāta izmantošanu. Kad <code>Culture</code> ir <code>null</code> vai izlaists, tiek izmantots <code>Culture.Current</code>.</li>\r\n</ul>\r\nLai atbalstītu mantotās darbplūsmas, <code>options</code> var būt arī teksta vērtības. Tam ir tāda pati uzvedība kā tad, ja <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertēt <code>\"2010-12-31T01:30:00-08:00\"</code> par <code>datetimezone</code> vērtību.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Konvertēt, izmantojot pielāgotu formātu un vācu kultūru.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Konvertēt, izmantojot ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Sniegtajā datetimezone vērtībā noņem informāciju par laika joslu.",
        "Documentation.LongDescription": "Atgriež #datetime vērtību no <code>dateTimeZone</code>, kur noņemta informācija par laika joslu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet informāciju par laika joslu no vērtības #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Pārveido laika joslas komponentu uz vietējo laika joslu.",
        "Documentation.LongDescription": "Vērtībai datetimezone <code>dateTimeZone</code> maina informāciju par laika joslu uz vietējās laika joslas informāciju.\r\n    Ja vērtībai <code>dateTimeZone</code> nav laika joslas komponenta, tiek pievienota informācija par vietējo laika joslu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mainīt informāciju par laika joslu vērtībai #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) uz vietējo laika joslu (pieņemot PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Atgriež ierakstu, kurā ir datetimezone vērtības daļas.",
        "Documentation.LongDescription": "Atgriež ierakstu, kurā ir daļas no norādītās datetime vērtības <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: <code>datetime</code> vērtība, no kuras tiek aprēķināts tās daļu ieraksts.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet vērtību <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> par ierakstu, kas ietver vērtības Datums, Laiks un Josla.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Atgriež datetimezone vērtības teksta attēlojumu.",
        "Documentation.LongDescription": "Atgriež <code>dateTimeZone</code> teksta atveidojumu. Neobligāts <code>record</code> parametrs, <code>options</code>, var tikt nodrošināts, lai precizētu papildu rekvizītus. <code>culture</code> tiek izmantots tikai mantotās darbplūsmās. <code>record</code> var saturēt tālāk norādītos laukus:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> vērtība, kas norāda uz izmantojamo formātu. Dodieties uz https://go.microsoft.com/fwlink/?linkid=2180104 un https://go.microsoft.com/fwlink/?linkid=2180105. Šī lauka izlaišanas vai <code>null</code> vērtības norādīšanas rezultātā tiks izmantots noklusējuma datuma noformējums, ko nosaka <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: kad <code>Format</code> vērtība nav null, <code>Culture</code> kontrolē atsevišķus formāta apzīmētājus. Piemēram, <code>\"en-US\"</code> <code>\"MMM\"</code> ir <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, bet <code>\"ru-RU\"</code> <code>\"MMM\"</code> ir <code>\"янв\", \"фев\", \"мар\", ...</code>. Kad <code>Format</code> ir <code>null</code>, <code>Culture</code> kontrolē noklusējuma formāta izmantošanu. Kad <code>Culture</code> ir <code>null</code> vai izlaists, tiek izmantots <code>Culture.Current</code>.</li>\r\n</ul>\r\nLai atbalstītu mantotās darbplūsmas, <code>options</code> un <code>culture</code> var būt arī teksta vērtības. Tam ir tāda pati uzvedība kā tad, ja <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertēt <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> par <code>text</code> vērtību. <i>Rezultāts var atšķirties atkarībā no pašreizējās kultūras.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Konvertēt, izmantojot pielāgotu formātu un vācu kultūru.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Konvertēt, izmantojot ISO 8601 modeli.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Pārveido laika joslas komponentu uz UTC laika joslu.",
        "Documentation.LongDescription": "Vērtības datetime <code>dateTimeZone</code> laika joslas informāciju maina uz UTC jeb universālā laika joslas informāciju.\r\n    Ja vērtībai <code>dateTimeZone</code> nav laika joslas komponenta, tiek pievienota informācija par UTC laika joslu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mainiet informāciju par laika joslu vērtībai #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) uz UTC laika joslu.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Maina vērtības laika joslu.",
        "Documentation.LongDescription": "Maina vērtības laika joslu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Maina vērtības laika joslu.",
        "Documentation.LongDescription": "Maina vērtības laika joslu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Izveido decimāldaļskaitli no dotās vērtības.",
        "Documentation.LongDescription": "Atgriež decimālo <code>number</code> vērtību no dotā <code>value</code>. Ja dotais <code>value</code> ir <code>null</code>, <code>Decimal.From</code> atgriež <code>null</code>.  Ja dotais <code>value</code> ir <code>number</code> decimāldaļskaitļa diapazonā, tiek atgriezts <code>value</code>, bet pretējā gadījumā tiek atgriezta kļūda. Ja <code>value</code> ir jebkura cita tipa, tas vispirms tiks konvertēts par <code>number</code> using <code>Number.FromText</code>. Ir iespējams nodrošināt arī papildu <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūt <code>\"4.5\"</code> decimāldaļskaitļa <code>number</code> vērtību.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Tiek atgriezts tabulas Delta Lake saturs.",
        "Documentation.LongDescription": "Tiek atgriezts tabulas Delta Lake saturs.",
        "Documentation.Category": "Piekļuve datiem",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Izveido dubultprecizitātes skaitli no dotās vērtības.",
        "Documentation.LongDescription": "Atgriež dubulto <code>number</code> vērtību no dotā <code>value</code>. Ja dotais <code>value</code> ir <code>null</code>, <code>Double.From</code> atgriež <code>null</code>.  Ja dotais <code>value</code> ir <code>number</code> dubultā diapazonā, tiek atgriezts <code>value</code>, bet pretējā gadījumā tiek atgriezta kļūda. Ja <code>value</code> ir jebkura cita tipa, tas vispirms tiks konvertēts par <code>number</code> using <code>Number.FromText</code>. Ir iespējams nodrošināt arī papildu <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūt <code>\"4\"</code> dubultprecizitātes <code>number</code> vērtību.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Atgriež ilguma dienu daļu.",
        "Documentation.LongDescription": "Atgriež<code>duration</code> dienu vērtību.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Izvelk dienu skaitu starp diviem datumiem.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Izveido ilgumu no sniegtās vērtības.",
        "Documentation.LongDescription": "Atgriež <code>duration</code> vērtību no norādītās vērtības <code>value</code>. Ja norādītā vērtība <code>value</code> ir <code>Null</code>, <code>Duration.From</code> atgriež <code>Null</code>.  Ja norādītā vērtība <code>value</code> ir <code>duration</code>, tiek atgriezts <code>value</code>. Tālāk minēto tipu vērtības var pārvērst par <code>duration</code> vērtību.\r\n      <ul>\r\n        <li><code>text</code>: <code>duration</code> vērtība no teksta pagājušā laika formām (d.h:m:s). Papildinformāciju skatiet sadaļā <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>: <code>duration</code> ekvivalents veselam un daļējam dienu skaitam, kas izteikts ar <code>value</code>.</li>\r\n      </ul>\r\nJa vērtībai <code>value</code> ir jebkāds cits tips, tiek atgriezta kļūda.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet <code>2.525</code> par <code>duration</code> vērtību.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Atgriež ilguma vērtību no teksta pagājušā laika formām (d.h:m:s).",
        "Documentation.LongDescription": "Atgriež ilguma vērtību <code>text</code> no norādītā teksta. Ar šo funkciju var parsēt tālāk uzskaitītos formātus.\r\n <ul>\r\n        <li>(-)hh:mm(:ss(,ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(,ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Visi diapazoni ir ietveroši.)<br>\r\n        ddd: dienu skaits.<br>\r\n        hh: stundu skaits no 0 līdz 23.<br>\r\n        mm: minūšu skaits no 0 līdz 59.<br>\r\n        ss: sekunžu skaits no 0 līdz 59.<br>\r\n        ff: sekundes daļa no 0 līdz 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet <code>\"2.05:55:20\"</code> par <code>duration</code> vērtību.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Atgriež ilguma stundu daļu.",
        "Documentation.LongDescription": "Atgriež <code>duration</code> stundu daļu.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Izvelk stundas no ilguma vērtības.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Atgriež ilguma minūšu daļu.",
        "Documentation.LongDescription": "Atgriež <code>duration</code> minūšu daļu.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Izvelk minūtes no ilguma vērtības.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Atgriež ilguma sekunžu daļu.",
        "Documentation.LongDescription": "Atgriež <code>duration</code> sekunžu daļu.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Izvelk sekundes no ilguma vērtības.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Atgriež ierakstu, kurā ir ilguma daļas.",
        "Documentation.LongDescription": "Atgriež ierakstu, kurā ir ilguma vērtības <code>duration</code> daļas. \r\n  <ul>\r\n        <li><code>duration</code>: <code>duration</code> vērtība, no kuras tiek izveidots ieraksts.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet <code>#duration(2, 5, 55, 20)</code> par tā daļu ierakstu, ietverot dienas, stundas, minūtes un sekundes, ja piemērojams.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Atgriež tekstu formā d.h:m:s.",
        "Documentation.LongDescription": "Atgriež norādītās ilguma vērtības <code>duration</code> teksta izteiksmi formātā “dienas:stundas:minūtes:sekundes”.\r\n <ul>\r\n        <li><code>duration</code>: vērtība formātā <code>duration</code>, no kuras tiek aprēķināta teksta izteiksme.</li>\r\n  <li><code>format</code>: <i>[Neobligāti]</i> Novecojis. Tiks atgriezta kļūda, ja šī parametra vērtība nebūs Null.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Pārveidojiet <code>#duration(2, 5, 55, 20)</code> par teksta vērtību.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Atgriež kopējo dienu skaitu šajos intervālos.",
        "Documentation.LongDescription": "Atgriež kopējo dienu skaitu, kas ietilpst <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Atrast kopējo dienu skaitu, kas ietilpst ilguma vērtībā.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Atgriež kopējo stundu skaitu šajos intervālos.",
        "Documentation.LongDescription": "Atgriež kopējo stundu skaitu, kas ietilpst <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Atrast kopējo stundu skaitu, kas ietilpst ilguma vērtībā.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Atgriež kopējo minūšu skaitu šajos intervālos.",
        "Documentation.LongDescription": "Atgriež kopējo minūšu skaitu, kas ietilpst <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Atrast kopējo minūšu skaitu, kas ietilpst ilguma vērtībā.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Atgriež kopējo sekunžu skaitu šajos intervālos.",
        "Documentation.LongDescription": "Atgriež kopējo sekunžu skaitu, kas ietilpst <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Atrast kopējo sekunžu skaitu, kas ietilpst ilguma vērtībā.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Atgriež kļūdas ierakstu no sniegtajām teksta vērtībām attiecībā uz iemeslu, ziņojumu un detalizētu informāciju.",
        "Documentation.LongDescription": "Atgriež kļūdas ierakstu no sniegtajām teksta vērtībām attiecībā uz iemeslu, ziņojumu un detalizētu informāciju.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Atgriež konstantas vērtības M pirmkoda atveidojumu.",
        "Documentation.LongDescription": "Atgriež konstantas vērtības M pirmkoda atveidojumu.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitliskas vērtības M pirmkoda atveidojumu.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Iegūstiet datuma vērtības M pirmkoda atveidojumu.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Iegūstiet teksta vērtības M pirmkoda atveidojumu.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Atgriež M izteiksmes novērtēšanas rezultātu.",
        "Documentation.LongDescription": "Atgriež M izteiksmes <code>document</code> novērtēšanas rezultātu ar pieejamajiem identifikatoriem, uz kuriem var būt atsauces, ko definē <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Novērtējiet vienkāršu summu.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Novērtējiet sarežģītāku summu.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Novērtējiet teksta vērtības savienošanu ar identifikatoru.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Atgriež identifikatora M pirmkoda atveidojumu.",
        "Documentation.LongDescription": "Atgriež identifikatora <code>name</code> M pirmkoda atveidojumu.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet identifikatora M pirmkoda atveidojumu.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Iegūstiet identifikatora ar atstarpi M pirmkoda atveidojumu.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Atgriež norādītā faila saturu binārā formātā.",
        "Documentation.LongDescription": "Tiek atgriezts faila saturs <code>path</code> kā binārs. Parametrs <code>options</code> pašlaik ir paredzēts tikai iekšējai lietošanai.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Tiek atgriezts neatkarīgi no tā, vai noteiktā funkcija tiek uzskatīta par datu avotu.",
        "Documentation.LongDescription": "Tiek atgriezts neatkarīgi no tā, vai funkcija <code>function</code> tiek uzskatīta par datu avotu.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Tekstu, kas ģeogrāfisku vērtību norāda Well-Known Text (WKT) formātā, pārveido strukturētā ierakstā.",
        "Documentation.LongDescription": "Tekstu, kas ģeogrāfisku vērtību norāda Well-Known Text (WKT) formātā, pārveido strukturētā ierakstā. WKT ir standarta formāts, ko definēja organizācija Open Geospatial Consortium (OGC), un tas ir tipisks serializācijas formāts, ko izmanto datu bāzes, tostarp SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Strukturētu ģeogrāfiskā punkta vērtību pārveido par tā Well-Known Text (WKT) atveidojumu.",
        "Documentation.LongDescription": "Strukturētu ģeogrāfiskā punkta vērtību pārveido par tā Well-Known Text (WKT) atveidojumu, ko definēja organizācija Open Geospatial Consortium (OGC) un kas ir arī serializācijas formāts, kuru izmanto daudzas datu bāzes, tostarp SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Tekstu, kas ģeometrisku vērtību norāda Well-Known Text (WKT) formātā, pārveido strukturētā ierakstā.",
        "Documentation.LongDescription": "Tekstu, kas ģeometrisku vērtību norāda Well-Known Text (WKT) formātā, pārveido strukturētā ierakstā. WKT ir standarta formāts, ko definēja organizācija Open Geospatial Consortium (OGC), un tas ir tipisks serializācijas formāts, ko izmanto datu bāzes, tostarp SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Strukturētu ģeometriskā punkta vērtību pārveido par tā Well-Known Text (WKT) atveidojumu.",
        "Documentation.LongDescription": "Strukturētu ģeometriskā punkta vērtību pārveido par tā Well-Known Text (WKT) atveidojumu, ko definēja organizācija Open Geospatial Consortium (OGC) un kas ir arī serializācijas formāts, kuru izmanto daudzas datu bāzes, tostarp SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Atgriež dotās vērtības GUID vērtību.",
        "Documentation.LongDescription": "Atgriež <code>Guid.Type</code> vērtību atbilstoši dotajai vērtībai <code>value</code>. Ja dotā vērtība <code>value</code> ir <code>Null</code>, <code>Guid.From</code> atgriež <code>Null</code>.  Tiks veikta pārbaude, lai noskaidrotu, vai dotā vērtība <code>value</code> ir pieņemamā formātā. Piemēros ir norādīti pieņemami formāti.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Var norādīt GUID kā 32 blakusesošus heksadecimālciparus.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Var norādīt GUID kā 32 heksadecimālciparus, kas ar defisēm sadalīti 8-4-4-4-12 ciparu blokos.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Var norādīt GUID kā 32 blakusesošus heksadecimālciparus, kas atdalīti ar defisēm un iekļauti figūriekavās.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Var norādīt GUID kā 32 blakusesošus heksadecimālciparus, kas atdalīti ar defisēm un iekļauti iekavās.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Izveido veselu 16 bitu skaitli no dotās vērtības.",
        "Documentation.LongDescription": "Atgriež 16 bitu veselā skaitļa <code>number</code> vērtību no dotā <code>value</code>. Ja dotais <code>value</code> ir <code>null</code>, <code>Int16.From</code> atgriež <code>null</code>. Ja dotais <code>value</code> ir <code>number</code> 16 bitu veselā skaitļa diapazonā bez daļskaitļa, tad tiek atgriezts <code>value</code>. Ja skaitlis ir daļskaitlis, tad skaitlis tiek noapaļots atbilstoši norādītajam noapaļošanas režīmam. Noklusējuma noapaļošanas režīms ir <code>RoundingMode.ToEven</code>. Ja <code>value</code> ir jebkura cita veida, tad vispirms tas tiks konvertēts par <code>skaitli</code>, izmantojot <code>Number.FromText</code>. Skatiet <code>Number.Round</code>, lai uzzinātu par pieejamajiem noapaļošanas režīmiem. Ir iespējams izmantot papildu <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūt <code>\"4\"</code> vesela 16 bitu skaitļa <code>number</code> vērtību.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Iegūt <code>\"4.5\"</code> vesela 16 bitu skaitļa <code>number</code> vērtību, izmantojot <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Izveido veselu 32 bitu skaitli no dotās vērtības.",
        "Documentation.LongDescription": "Atgriež 32 bitu veselā skaitļa <code>number</code> vērtību no dotā <code>value</code>. Ja dotais <code>value</code> ir <code>null</code>, <code>Int32.From</code> atgriež <code>null</code>. Ja dotais <code>value</code> ir <code>number</code> 32 bitu veselā skaitļa diapazonā bez daļskaitļa, tad tiek atgriezts <code>value</code>. Ja skaitlis ir daļskaitlis, tad skaitlis tiek noapaļots atbilstoši norādītajam noapaļošanas režīmam. Noklusējuma noapaļošanas režīms ir <code>RoundingMode.ToEven</code>. Ja <code>value</code> ir jebkura cita veida, tad vispirms tas tiks konvertēts par <code>skaitli</code>, izmantojot <code>Number.FromText</code>. Skatiet <code>Number.Round</code>, lai uzzinātu par pieejamajiem noapaļošanas režīmiem. Ir iespējams izmantot papildu <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūt <code>\"4\"</code> vesela 32 bitu skaitļa <code>number</code> vērtību.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Iegūt <code>\"4.5\"</code> vesela 32 bitu skaitļa <code>number</code> vērtību, izmantojot <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Izveido 64 bitu veselu skaitli no dotās vērtības.",
        "Documentation.LongDescription": "Atgriež 64 bitu veselā skaitļa <code>number</code> vērtību no dotā <code>value</code>. Ja dotais <code>value</code> ir <code>null</code>, <code>Int64.From</code> atgriež <code>null</code>. Ja dotais <code>value</code> ir <code>number</code> 64 bitu veselā skaitļa diapazonā bez daļskaitļa, tad tiek atgriezts <code>value</code>. Ja skaitlis ir daļskaitlis, tad skaitlis tiek noapaļots atbilstoši norādītajam noapaļošanas režīmam. Noklusējuma noapaļošanas režīms ir <code>RoundingMode.ToEven</code>. Ja <code>value</code> ir jebkura cita veida, tad vispirms tas tiks konvertēts par <code>skaitli</code>, izmantojot <code>Number.FromText</code>. Skatiet <code>Number.Round</code>, lai uzzinātu par pieejamajiem noapaļošanas režīmiem. Ir iespējams izmantot papildu <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūt 64 bitu veselā skaitļa <code>number</code> vērtību vērtībai <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "64 bitu vesela skaitļa <code>number</code> iegūšana no vērtības <code>\"4.5\"</code>, izmantojot režīmu <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Izveido veselu 8 bitu skaitli ar zīmi no dotās vērtības.",
        "Documentation.LongDescription": "Atgriež parakstīta 8 bitu veselā skaitļa <code>number</code> vērtību no dotā <code>value</code>. Ja dotais <code>value</code> ir <code>null</code>, <code>Int8.From</code> atgriež <code>null</code>. Ja dotais <code>value</code> ir <code>number</code> parakstīta 8 bitu veselā skaitļa diapazonā bez daļskaitļa, tad tiek atgriezts <code>value</code>. Ja skaitlis ir daļskaitlis, tad skaitlis tiek noapaļots atbilstoši norādītajam noapaļošanas režīmam. Noklusējuma noapaļošanas režīms ir <code>RoundingMode.ToEven</code>. Ja <code>value</code> ir jebkura cita veida, tad vispirms tas tiks konvertēts par <code>skaitli</code>, izmantojot <code>Number.FromText</code>. Skatiet <code>Number.Round</code>, lai uzzinātu par pieejamajiem noapaļošanas režīmiem. Ir iespējams izmantot papildu <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūt <code>\"4\"</code> vesela 8 bitu skaitļa ar zīmi <code>number</code> vērtību.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Iegūt <code>\"4.5\"</code> vesela 8 bitu skaitļa ar zīmi <code>number</code> vērtību, izmantojot <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Atgriež funkcijas pamatteksta abstrakto sintakses koku (AST).",
        "Documentation.LongDescription": "<p>Atgriež abstrakto sintakses koku (AST) <code>function</code> pamattekstam, kas ir normalizēts <i>vienuma izteiksmē</i>:\r\n<ul>\r\n  <li>Šai funkcijai ir jābūt 1 argumenta lambdai.</li>\r\n  <li>Visas atsauces uz šo funkcijas parametru tiek aizstātas ar <code>ItemExpression.Item</code>.</li>\r\n  <li>AST tiks vienkāršots, lai ietvertu tikai šādu veidu mezglus:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Ja <code>function</code> pamattekstam nevar atgriezt kādu vienuma izteiksmes AST, rodas kļūda.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Atgriež funkcijas <code>each _ <> null</code> pamatteksta AST",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Tiek atgriezts JSON dokumenta saturs.",
        "Documentation.LongDescription": "Tiek atgriezts JSON dokumenta saturs.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Tiek izveidots noteiktas vērtības JSON apliecinājums.",
        "Documentation.LongDescription": "<p>Sniedz attiecīgās vērtības <code>value</code> JSON attēlojumu ar teksta kodējumu, ko norāda <code>encoding</code>. Ja vērtība <code>encoding</code> ir izlaista, tiek izmantots UTF8. Vērtības tiek attēlotas šādi:</p>\r\n <ul>\r\n        <li>Null, teksta un loģiskās vērtības tiek attēlotas kā atbilstošie JSON tipi</li>\r\n        <li>Skaitļi JSON tiek attēloti kā skaitliskas vērtības, izņemot vērtības <code>#infinity</code>, <code>-#infinity</code> un <code>#nan</code>, kuras tiek konvertētas uz null</li>\r\n        <li>Saraksti tiek attēloti kā JSON masīvi</li>\r\n        <li>Ieraksti tiek attēloti kā JSON objekti</li>\r\n        <li>Tabulas tiek attēlotas kā objektu masīvs</li>\r\n        <li>Datumu, laika, datuma un laika, datuma un laika joslu un ilguma vērtības tiek attēlotas kā ISO-8601 teksts</li>\r\n        <li>Binārās vērtības tiek attēlotas kā teksts, kurš iekodēts ar bāzi 64</li>\r\n        <li>Tipi un funkcijas izraisa kļūdu</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Pārvērst komplekso vērtību par JSON vērtību.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Bināra vērtība tiek pārvērsta par teksta vērtību sarakstu, kas ir sadalīts atbilstoši rindiņu pārtraukumiem. Ja ir norādīts pēdiņu stils, rindiņu pārtraukumi var tikt rādīti pēdiņās. Ja parametra includeLineSeparators vērtība ir True, rindiņu pārtraukuma rakstzīmes tiek ietvertas tekstā.",
        "Documentation.LongDescription": "Bināra vērtība tiek pārvērsta par teksta vērtību sarakstu, kas ir sadalīts atbilstoši rindiņu pārtraukumiem. Ja ir norādīts pēdiņu stils, rindiņu pārtraukumi var tikt rādīti pēdiņās. Ja parametra includeLineSeparators vērtība ir True, rindiņu pārtraukuma rakstzīmes tiek ietvertas tekstā.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Teksta vērtība tiek pārvērsta par teksta vērtību sarakstu, kas ir sadalīts atbilstoši rindiņu pārtraukumiem. Ja parametra includeLineSeparators (Ietvert rindiņu atdalītājus) vērtība ir “patiess”, rindiņu pārtraukuma rakstzīmes tiek ietvertas tekstā.",
        "Documentation.LongDescription": "Teksta vērtība tiek pārveidota par teksta vērtību sarakstu, kas ir sadalīts atbilstoši rindiņu pārtraukumiem. Ja parametra includeLineSeparators (Ietvert rindiņu atdalītājus) vērtība ir “patiess”, rindiņu atdalītāju rakstzīmes tiek ietvertas tekstā.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None</code> (Pēdiņu stils: nekādas) (pēc noklusējuma): pēdiņu lietošana nav nepieciešama.</li>\r\n            <li><code>QuoteStyle.Csv</code> (Pēdiņu stils: CSV): pēdiņu lietojums atbilstoši CSV. Dubultpēdiņu rakstzīme tiek izmantota, lai atdalītu šādus reģionus, un divas dubultpēdiņu rakstzīmes tiek izmantotas, lai norādītu vienu dubultpēdiņu rakstzīmi šādā reģionā. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Teksta vērtību saraksts tiek pārvērsts binārā vērtībā, izmantojot norādīto kodējumu un parametra lineSeparator vērtību. Norādītā parametra lineSeparator vērtība tiek pievienota katras rindiņas beigās.  Ja šī vērtība nav norādīta, tiek izmantotas rakstatgriezes un rindiņas padeves rakstzīmes.",
        "Documentation.LongDescription": "Teksta vērtību saraksts tiek pārvērsts binārā vērtībā, izmantojot norādīto kodējumu un parametra lineSeparator vērtību. Norādītā parametra lineSeparator vērtība tiek pievienota katras rindiņas beigās.  Ja šī vērtība nav norādīta, tiek izmantotas rakstatgriezes un rindiņas padeves rakstzīmes.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Teksta vērtību saraksts tiek pārvērsts vienā teksta vērtībā.  Norādītā parametra lineSeparator vērtība tiek pievienota katras rindiņas beigās.  Ja šī vērtība nav norādīta, tiek izmantotas rakstatgriezes un rindiņas padeves rakstzīmes.",
        "Documentation.LongDescription": "Teksta vērtību saraksts tiek pārvērsts vienā teksta vērtībā.  Norādītā parametra lineSeparator vērtība tiek pievienota katras rindiņas beigās.  Ja šī vērtība nav norādīta, tiek izmantotas rakstatgriezes un rindiņas padeves rakstzīmes.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Tiek atgriezta vērtība True, ja visas izteiksmes ir patiesas.",
        "Documentation.LongDescription": "Tiek atgriezta vērtība True, ja visas sarakstā <code>list</code> ietvertās izteiksmes ir patiesas.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai visas sarakstā {true, true, 2 > 0} ietvertās izteiksmes ir patiesas.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Nosakiet, vai visas sarakstā {true, true, 2 < 0} ietvertās izteiksmes ir patiesas.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Tiek atgriezta vērtība True, ja kāda no izteiksmēm ir patiesa.",
        "Documentation.LongDescription": "Tiek atgriezta vērtība True, ja kāda no sarakstā <code>list</code> ietvertajām izteiksmēm ir patiesa.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai kāda no sarakstā {true, false, 2 > 0} ietvertajām izteiksmēm ir patiesa.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Nosakiet, vai kāda no sarakstā {2 = 0, false, 2 < 0} ietvertajām izteiksmēm ir patiesa.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Tiek atgriezta norādīto vērtību vidējā vērtība. Var apstrādāt tipu number, date, datetime, datetimezone un duration vērtības.",
        "Documentation.LongDescription": "Tiek atgriezta saraksta <code>list</code> vienumu vidējā vērtība. Rezultāta datu tips atbilst saraksta vērtību datu tipam. Var apstrādāt tikai tipu number, date, time, datetime, datetimezone un duration vērtības.\r\n    Ja saraksts ir tukšs, tiek atgriezta vērtība Null.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitļu saraksta <code>{3, 4, 6}</code> vidējo vērtību.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Iegūstiet šo tipa date vērtību vidējo vērtību: 2011. gada 1. janvāris, 2011. gada 2. janvāris un 2011. gada 3. janvāris.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Saraksts tiek ievietots buferī.",
        "Documentation.LongDescription": "Saraksts <code>list</code> tiek ievietots atmiņas buferī. Veicot šo izsaukumu, tiek iegūts nemainīgs saraksts.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet nemainīgu saraksta {1..10} kopiju.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Tiek atgriezts viens saraksts, kas ir izveidots, apvienojot vairākus sarakstus.",
        "Documentation.LongDescription": "Tiek apstrādāts sarakstu saraksts <code>lists</code> un šie saraksti tiek sapludināti vienā jaunā sarakstā.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Apvienojiet šos divus vienkāršos sarakstus: {1, 2} un {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Apvienojiet šos divus sarakstus: {1, 2} un {3, {4, 5}}, vienā no kuriem ir ietverts ligzdots saraksts.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Tiek atgriezts saraksta vienumu skaits.",
        "Documentation.LongDescription": "Tiek atgriezts saraksta <code>list</code> vienumu skaits.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {1, 2, 3} vērtību skaitu.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Tiek atgriezts vērtību saraksts, no kura ir noņemti vērtību dublikāti.",
        "Documentation.LongDescription": "Tiek atgriezts saraksts, kurā ir ietvertas visas saraksta <code>list</code> unikālās vērtības. Ja saraksts ir tukšs, arī rezultāts ir tukšs saraksts.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet vērtību dublikātus no saraksta {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Tiek atgriezta saraksta pirmā vērtība vai norādītā noklusējuma vērtība, ja saraksts ir tukšs.",
        "Documentation.LongDescription": "Tiek atgriezts saraksta <code>list</code> pirmais vienums vai papildu noklusējuma vērtība <code>defaultValue</code>, ja saraksts ir tukšs.\r\n    Ja saraksts ir tukšs un nav norādīta noklusējuma vērtība, funkcija atgriež vērtību <code>Null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {1, 2, 3} pirmo vērtību.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Iegūstiet saraksta {} pirmo vērtību. Ja saraksts ir tukšs, tiek atgriezta vērtība -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Tiek atgriezts ievades sarakstu vērtību krustpunkts.",
        "Documentation.LongDescription": "Tiek atgriezts ievades sarakstā <code>lists</code> ietverto sarakstu vērtību krustpunkts. Varat norādīt papildu parametru <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet sarakstu {1..5}, {2..6} un {3..7} krustpunktu.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Tiek norādīts, vai sarakstā ir ietverti vērtību dublikāti.",
        "Documentation.LongDescription": "Tiek noteikts, vai sarakstā <code>list</code> ir ietverti vērtību dublikāti, un tiek atgriezta attiecīgā loģiskā vērtība: <code>true</code>, ja visas saraksta vērtības ir unikālas, vai <code>false</code>, ja sarakstā ir vērtību dublikāti. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Uzziniet, vai visas saraksta {1, 2, 3} vērtības ir unikālas (t.i., nav vērtību dublikātu).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Uzziniet, vai visas saraksta {1, 2, 3, 3} vērtības ir unikālas (t.i., nav vērtību dublikātu).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Tiek atgriezta vērtība True, ja saraksts ir tukšs.",
        "Documentation.LongDescription": "Tiek atgriezta vērtība <code>true</code>, ja sarakstā <code>list</code> nav nevienas vērtības (tā garums ir 0). Ja sarakstā ir kāda vērtība (garums > 0), tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Uzziniet, vai saraksts {} ir tukšs.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Uzziniet, vai saraksts {1, 2} ir tukšs.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Tiek atgriezta saraksta pēdējā vērtība vai norādītā noklusējuma vērtība, ja saraksts ir tukšs.",
        "Documentation.LongDescription": "Tiek atgriezts saraksta <code>list</code> pēdējais vienums vai papildu noklusējuma vērtība <code>defaultValue</code>, ja saraksts ir tukšs.\r\n    Ja saraksts ir tukšs un nav norādīta noklusējuma vērtība, funkcija atgriež vērtību <code>Null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {1, 2, 3} pēdējo vērtību.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Iegūstiet saraksta {} pēdējo vērtību. Ja saraksts ir tukšs, tiek atgriezta vērtība -1.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Tiek atgriezta saraksta pēdējā vērtība.  Varat papildus norādīt atgriežamo vērtību skaitu vai kvalifikācijas nosacījumu.",
        "Documentation.LongDescription": "Atgriež saraksta <code>list</code> pēdējo vienumu. Ja saraksts ir tukšs, tiek aktivizēts izņēmums.\r\n Šajā funkcijā var norādīt papildu parametru <code>countOrCondition</code>, kas nodrošina vairāku vienumu apkopošanu vai vienumu filtrēšanu. Parametru <code>countOrCondition</code> var norādīt trīs veidos.\r\n <ul>\r\n  <li>Ja ir norādīts skaitlis, tiek atgriezts šāds vai mazāks skaits vienumu. </li>\r\n  <li>Ja ir norādīts nosacījums, tiek atgriezti visi vienumi, kas sākotnēji atbilst šim nosacījumam, pārbaudi sākot no saraksta beigām. Ja kāds vienums neatbilst nosacījumam, nākamie vienumi netiek apstrādāti. </li>\r\n  <li>Ja šī parametra vērtība ir nulle, tiek atgriezts saraksta pēdējais vienums.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {3, 4, 5, -1, 7, 8, 2} pēdējo vērtību.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Iegūstiet saraksta {3, 4, 5, -1, 7, 8, 2} pēdējās vērtības, kas ir lielākas par 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Tiek atgriezta maksimālā vērtība vai noklusējuma vērtība, ja saraksts ir tukšs.",
        "Documentation.LongDescription": "Atgriež saraksta <code>list</code> maksimālo vērtību vai papildu noklusējuma vērtību <code>default</code>, ja saraksts ir tukšs.\r\n    Varat norādīt papildu comparisonCriteria vērtību <code>comparisonCriteria</code>, lai noteiktu saraksta vienumu salīdzināšanas veidu. Ja šī parametra vērtība ir Null, tiek lietota noklusējuma salīdzināšana.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {1, 4, 7, 3, -2, 5} maksimālo vērtību.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Iegūstiet saraksta {} maksimālo vērtību. Ja saraksts ir tukšs, tiek atgriezta vērtība -1. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Tiek atgriezta saraksta mediānas vērtība.",
        "Documentation.LongDescription": "Atgriež vidējo saraksta <code>list</code> vienumu. Ja sarakstā nav iekļautas vērtības, kas nav <code>Null</code>, šī funkcija atgriež vērtību <code>Null</code>.\r\n    Ja vienumu skaits ir pāra skaitlis, funkcija no diviem vidējiem vienumiem izvēlas to, kuram ir mazāka vērtība, ja vien visi sarakstā\r\n    iekļautie vienumi nav datums/laiks, ilgums, skaitļi vai laiks. Tādā gadījumā tiek atgriezta divu vienumu vidējā vērtība.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta <code>{5, 3, 1, 7, 9}</code> mediānas vienumu.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Tiek atgriezta minimālā vērtība vai noklusējuma vērtība, ja saraksts ir tukšs.",
        "Documentation.LongDescription": "Atgriež saraksta <code>list</code> minimālo vērtību vai papildu noklusējuma vērtību <code>default</code>, ja saraksts ir tukšs.\r\n    Varat norādīt papildu comparisonCriteria vērtību <code>comparisonCriteria</code>, lai noteiktu saraksta vienumu salīdzināšanas veidu. Ja šī parametra vērtība ir Null, tiek lietota noklusējuma salīdzināšana.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {1, 4, 7, 3, -2, 5} minimālo vērtību.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Iegūstiet saraksta {} minimālo vērtību. Ja saraksts ir tukšs, tiek atgriezta vērtība -1. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Tiek atgriezta sarakstā visbiežāk lietotā vērtība.",
        "Documentation.LongDescription": "Atgriež sarakstā <code>list</code> visbiežāk lietoto vienumu. Ja saraksts ir tukšs, tiek aktivizēts izņēmums. Ja vairākiem vienumiem ir vienāds maksimālais biežums, tiek izvēlēts pēdējais vienums.\r\n    Varat norādīt papildu <code>comparisonCriteria</code> vērtību <code>equationCriteria</code>, lai kontrolētu vienādības pārbaudi. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet sarakstā <code>{\"A\", 1, 2, 3, 3, 4, 5}</code> visbiežāk lietoto vienumu.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Iegūstiet sarakstā <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> visbiežāk lietoto vienumu.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Tiek atgriezts saraksts, kurā ir ietvertas sarakstā visbiežāk lietotās vērtības.",
        "Documentation.LongDescription": "Atgriež sarakstā <code>list</code> visbiežāk lietoto vienumu. Ja saraksts ir tukšs, tiek aktivizēts izņēmums. Ja vairākiem vienumiem ir vienāds maksimālais biežums, tiek izvēlēts pēdējais vienums.\r\n    Varat norādīt papildu <code>comparisonCriteria</code> vērtību <code>equationCriteria</code>, lai kontrolētu vienādības pārbaudi. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet sarakstā <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> visbiežāk lietotos vienumus.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Tiek atgriezts to saraksta vienumu skaits, kuru vērtība nav Null.",
        "Documentation.LongDescription": "Tiek atgriezts to saraksta <code>list</code> vienumu skaits, kuru vērtība nav Null.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Tiek atgriezts saraksts, kurā ir ietvertas ievades vērtību nobīdes.",
        "Documentation.LongDescription": "Atgriež sarakstu, kurā ir ietvertas ievades saraksta <code>list</code> vērtību nobīdes.\r\n    Ja maināt sarakstu, izmantojot funkciju List.Transform, pozīciju sarakstu varat izmantot, lai pārveidošanas funkcijai nodrošinātu piekļuvi konkrētajai pozīcijai.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet vērtību nobīdes sarakstā {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Tiek atgriezts sarakstā ietverto skaitļu reizinājums.",
        "Documentation.LongDescription": "Tiek atgriezts to saraksta <code>numbersList</code> skaitlisko vērtību reizinājums, kas nav Null. Ja visas saraksta vērtības ir Null, tiek atgriezta vērtība Null.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet sarakstā <code>{1, 2, 3, 3, 4, 5, 5}</code> ietverto skaitļu reizinājumu.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Tiek atgriezts gadījumskaitļu saraksts.",
        "Documentation.LongDescription": "Atgriež gadījumskaitļu (diapazonā starp 0 un 1) sarakstu atbilstoši norādītajam ģenerējamo vērtību skaitam un papildu sākotnējai vērtībai.\r\n<ul>\r\n   <li><code>count</code>: ģenerējamo gadījumvērtību skaits.</li>\r\n   <li><code>seed</code>: <i>[Neobligāti]</i> skaitliska vērtība, kas tiek izmantota kā gadījumskaitļu ģeneratora sākotnējā vērtība.  Ja šī vērtība netiek norādīta, ikreiz, kad izsaucat šo funkciju, tiek ģenerēts unikāls gadījumskaitļu saraksts.  Ja tiek norādīta skaitliska sākotnējā vērtība, ikreiz, kad izsaucat šo funkciju, tiek ģenerēts nemainīgs gadījumskaitļu saraksts.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet 3 gadījumskaitļu sarakstu.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Izveidojiet 3 gadījumskaitļu sarakstu, norādot sākotnējo vērtību.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Atgriež sarakstu, kurā ir ietverti ievades saraksta elementi, izlaižot norādīto skaitu elementu saraksta sākumā.",
        "Documentation.LongDescription": "Atgriež sarakstu, kas noņem pirmo saraksta <code>list</code> elementu. Ja saraksts <code>list</code> ir tukšs, tiek atgriezts tukšs saraksts.\r\nŠajā funkcijā varat norādīt papildu parametru <code>countOrCondition</code>, kas nodrošina vairāku vērtību noņemšanu, kā tas ir norādīts tālāk.\r\n <ul>\r\n <li>Ja ir norādīts skaitlis, tiek noņemts šāds vai mazāks skaits vienumu. </li>\r\n <li>Ja ir norādīts nosacījums, atgrieztais saraksts sākas ar saraksta <code>list</code> pirmo elementu, kas atbilst kritērijiem. Ja kāds vienums neatbilst nosacījumam, nākamie vienumi netiek apstrādāti. </li>\r\n <li>Ja šī parametra vērtība ir Null, tiek veikta noklusējuma darbība. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu no saraksta {1, 2, 3, 4, 5}, neietverot pirmos 3 skaitļus.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "No saraksta {5, 4, 2, 6, 1} izveidojiet sarakstu, kura pirmā skaitliskā vērtība ir mazāka par 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Tiek atgriezts saraksts, kurā ir ietverti ievades saraksta elementi, noņemot norādīto skaitu elementu saraksta beigās.",
        "Documentation.LongDescription": "Tiek atgriezts saraksts, kurā ir noņemti pēdējie <code>countOrCondition</code> elementi saraksta <code>list</code> beigās. Ja sarakstā <code>list</code> ir mazāk par <code>countOrCondition</code> elementiem, tiek atgriezts tukšs saraksts.\r\n <ul>\r\n <li>Ja ir norādīts skaitlis, tiek noņemts šāds vai mazāks skaits vienumu. </li>\r\n <li>Ja ir norādīts nosacījums, atgrieztais saraksts beidzas ar saraksta <code>list</code> beigās esošo pirmo elementu, kas atbilst šim nosacījumam. Ja kāds vienums neatbilst nosacījumam, nākamie vienumi netiek apstrādāti. </li>\r\n <li>Ja šī parametra vērtība ir Nulle, tiek noņemts tikai viens vienums. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu no saraksta {1, 2, 3, 4, 5}, neietverot pēdējos 3 skaitļus.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "No saraksta {5, 4, 2, 6, 4} izveidojiet sarakstu, kura pēdējā skaitliskā vērtība ir mazāka par 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "No norādītā saraksta tiek noņemtas visas vērtības Null.",
        "Documentation.LongDescription": "No saraksta <code>list</code> tiek noņemti visi vērtības Null gadījumi. Ja sarakstā nav nevienas vērtības Null, tiek atgriezts sākotnējais saraksts.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet no saraksta {1, 2, 3, null, 4, 5, null, 6} vērtības Null.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Saraksta vērtības tiek apvērstas pretējā secībā.",
        "Documentation.LongDescription": "Tiek atgriezts saraksts, kurā saraksta <code>list</code> vērtības ir apvērstas pretējā secībā.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu no saraksta {1..10}, apvēršot vērtības pretējā secībā.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Tiek atgriezts saraksta vienums, ja sarakstā ir tikai viens vienums, pretējā gadījumā tiek aktivizēts izņēmums.",
        "Documentation.LongDescription": "Ja sarakstā <code>list</code> ir tikai viens vienums, tiek atgriezts šis vienums.\r\n    Ja sarakstā ir vairāki vienumi vai tas ir tukšs, funkcija aktivizē izņēmumu.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {1} vienīgo vērtību.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Iegūstiet saraksta {1, 2, 3} vienīgo vērtību.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Tiek atgriezts saraksta vienums, ja sarakstā ir tikai viens vienums, bet, ja saraksts ir tukšs, tiek atgriezta noklusējuma vērtība.",
        "Documentation.LongDescription": "Ja sarakstā <code>list</code> ir tikai viens vienums, tiek atgriezts šis vienums.\r\n    Ja saraksts ir tukšs un nav norādīts papildu parametrs <code>default</code>, funkcija atgriež vērtību Null. Ja sarakstā ir vairāki vienumi, funkcija atgriež kļūdu.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet saraksta {1} vienīgo vērtību.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Iegūstiet saraksta {} vienīgo vērtību.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Iegūstiet saraksta {} vienīgo vērtību. Ja saraksts ir tukšs, tiek atgriezta vērtība -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Atgriež sarakstu, kurā ir ietverti ievades saraksta elementi, izlaižot norādīto skaitu elementu saraksta sākumā.",
        "Documentation.LongDescription": "Atgriež sarakstu, kurā ir ietverti saraksta <code>list</code> elementi, izlaižot tā pirmo elementu. Ja saraksts <code>list</code> ir tukšs, tiek atgriezts tukšs saraksts.\r\nŠajā funkcijā varat norādīt papildu parametru <code>countOrCondition</code>, kas nodrošina vairāku vērtību izlaišanu, kā tas ir norādīts tālāk.\r\n <ul>\r\n <li>Ja ir norādīts skaitlis, tiek izlaists šāds vai mazāks skaits vienumu. </li>\r\n <li>Ja ir norādīts nosacījums, atgrieztais saraksts sākas ar saraksta <code>list</code> pirmo elementu, kas atbilst kritērijiem. Ja kāds vienums neatbilst nosacījumam, nākamie vienumi netiek apstrādāti. </li>\r\n <li>Ja šī parametra vērtība ir Null, tiek veikta noklusējuma darbība. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu no saraksta {1, 2, 3, 4, 5}, neietverot pirmos 3 skaitļus.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "No saraksta {5, 4, 2, 6, 1} izveidojiet sarakstu, kura pirmā skaitliskā vērtība ir mazāka par 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Datu saraksts tiek sakārtots atbilstoši norādītājam kritērijam.",
        "Documentation.LongDescription": "Datu saraksts <code>list</code> tiek sakārtots atbilstoši norādītājiem papildu kritērijiem.\r\n    Varat norādīt papildu parametru <code>comparisonCriteria</code>, lai definētu salīdzināšanas kritēriju. Tālāk ir norādītas šī parametra iespējamās vērtības.\r\n    <ul>\r\n    <li> Lai kontrolētu secību, salīdzināšanas kritērijam varat norādīt tipa Order uzskaitījuma vērtību. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li> \r\n    <li> Lai aprēķinātu kārtošanai lietojamo atslēgu, varat izmantot 1 argumenta funkciju. </li> \r\n    <li> Lai atlasītu atslēgu un kontrolētu secību, kā salīdzināšanas kritērija vērtību varat izmantot sarakstu, kurā ir norādīta atslēga un tipa Order vērtība (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Lai pilnībā kontrolētu salīdzināšanu, var izmantot 2 argumentu funkciju. Šī funkcija nodos divus vienumus no saraksta (jebkurus divus vienumus jebkādā secībā). Šai funkcijai ir jāatgriež kāda no šīm vērtībām:\r\n        <ul>\r\n            <li> <code>-1</code>: pirmais vienums ir mazāks par otro vienumu.</li>\r\n            <li> <code>0</code>: vienumi ir vienādi.</li>\r\n            <li> <code>1</code>: pirmais vienums ir lielāks par otro vienumu.</li>\r\n        </ul>\r\n        Lai lietotu šo pieeju, varat izmantot metodi Value.Compare. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Sakārtojiet sarakstu {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Sakārtojiet sarakstu {2, 3, 1} dilstošā secībā.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Sakārtojiet sarakstu {2, 3, 1} dilstošā secībā, izmantojot metodi Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Tiek atgriezta atbilstoši paraugam aprēķinātā standartnovirze.",
        "Documentation.LongDescription": "Atgriež no parauga atkarīgu novērtējumu par vērtību standarta novirzi sarakstā <code>numbersList</code>.\r\n    Ja <code>numbersList</code> ir skaitļu saraksts, tiek atgriezts skaitlis.\r\n    Ja saraksts ir tukšs vai ja saraksta vienumu tips nav <code>number</code>, tiek parādīts izņēmums.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitļu no 1 līdz 5 standartnovirzi.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Tiek atgriezta saraksta vienumu summa.",
        "Documentation.LongDescription": "Tiek atgriezta to saraksta <code>list</code> vērtību summa, kas nav Null.  Ja visas saraksta vērtības ir Null, tiek atgriezta vērtība Null.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet sarakstā <code>{1, 2, 3}</code> ietverto skaitļu summu.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Tiek atgriezts ievades sarakstu vērtību apvienojums.",
        "Documentation.LongDescription": "Apstrādā sarakstu sarakstu <code>lists</code>, apvieno atsevišķo sarakstu vienumus un atgriež izvades sarakstu, kurā ir ietverti šie vienumi. Tādējādi atgrieztajā sarakstā ir ietverti visi vienumi, kas ir iekļauti jebkurā no ievades sarakstiem.\r\n    Šīs operācijas ietvaros tiek lietota standarta krājsemantika, tāpēc, veicot apvienošanu, tiek noteikta vērtību dublikātu atbilstība.\r\n    Varat norādīt papildu vienādojuma kritēriju vērtību <code>equationCriteria</code>, lai kontrolētu vienādības pārbaudi. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet sarakstu {1..5}, {2..6} un {3..7} apvienojumu.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Atgriež sarakstu sarakstu, apvienojot vienumus, kuri vairākos sarakstos atrodas vienā un tajā pašā pozīcijā.",
        "Documentation.LongDescription": "Tiek apstrādāts sarakstu saraksts, <code>lists</code>, un atgriezts sarakstu saraksts, kurā apvienoti vienā un tajā pašā pozīcijā esoši vienumi.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Tilpsaspiež šos divus vienkāršos sarakstus: {1, 2} un {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Tilpsaspiež šos divus dažāda garuma vienkāršos sarakstus: {1, 2} un {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "No norādītās vērtības tiek izveidota loģiskā vērtība.",
        "Documentation.LongDescription": "Atgriež tipa <code>logical</code> vērtību, kas ir iegūta no norādītās vērtības <code>value</code>. Ja norādītā vērtība <code>value</code> ir <code>Null</code>, funkcija <code>Logical.From</code> atgriež vērtību <code>Null</code>.  Ja norādītā vērtība <code>value</code> ir <code>logical</code>, tiek atgriezta vērtība <code>value</code>. Par tipa <code>logical</code> vērtību var pārvērst tālāk norādīto tipu vērtības.\r\n      <ul>\r\n        <li><code>text</code>: no teksta vērtības, kas var būt <code>True</code> vai <code>False</code>, tiek iegūta tipa <code>logical</code> vērtība. Papildinformāciju skatiet sadaļā <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: ja vērtība <code>value</code> ir vienāda ar <code>0</code>, tiek atgriezta vērtība <code>False</code>, pretējā gadījumā tiek atgriezta vērtība <code>True</code>.</li>\r\n      </ul>\r\nJa vērtībai <code>value</code> ir jebkāds cits tips, tiek atgriezta kļūda.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Pārvērtiet vērtību <code>2</code> par tipa <code>logical</code> vērtību.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "No teksta vērtībām true un false tiek izveidota loģiskā vērtība.",
        "Documentation.LongDescription": "No teksta vērtības <code>text</code>, kas var būt true vai false, tiek izveidota loģiskā vērtība. Ja vērtībā <code>text</code> ir ietverta cita virkne, tiek aktivizēts izņēmums. Teksta vērtība <code>text</code> ir reģistrjutīga.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "No teksta virknes true tiek izveidota loģiskā vērtība.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Izveidojiet loģisko vērtību no teksta virknes a.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Tiek atgriezta teksta vērtība true vai false atbilstoši norādītajai loģiskajai vērtībai.",
        "Documentation.LongDescription": "No loģiskās vērtības <code>logicalValue</code>, kas var būt <code>true</code> vai <code>false</code>, tiek izveidota teksta vērtība. Ja <code>logicalValue</code> nav loģiskā vērtība, tiek aktivizēts izņēmums.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet teksta vērtību no loģiskās vērtības <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Tiek atgriezta skaitļa absolūtā vērtība.",
        "Documentation.LongDescription": "Atgriež parametra <code>number</code> absolūto vērtību. Ja parametra <code>number</code> vērtība ir Null, funkcija <code>Number.Abs</code> atgriež vērtību Null.\r\n    <ul>\r\n        <li><code>number</code>: tipa <code>number</code> vērtība, kuras absolūtā vērtība ir jāaprēķina.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Skaitļa -3 absolūtā vērtība.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Tiek atgriezts skaitļa arkkosinuss.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> arkkosinuss.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Tiek atgriezts skaitļa arksinuss.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> arksinuss.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Tiek atgriezts skaitļa arktangenss.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> arktangenss.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Tiek atgriezts baits, kurā katra bita vērtība ir pretēja ievades datiem.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tiek iegūts, ar vērtību <code>number</code> veicot bitu operāciju Not.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Tiek atgriezts skaitļa kosinuss.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> kosinuss.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet 0 grādu leņķa kosinusu.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Tiek atgriezts skaitļa hiperboliskais kosinuss.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> hiperboliskais kosinuss.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Skaitlis e tiek kāpināta norādītajā pakāpē.",
        "Documentation.LongDescription": "Atgriež rezultātu, kas tiek iegūts, skaitli e kāpinot šādā pakāpē: <code>number</code> (eksponenciāla funkcija).\r\n      <ul>\r\n        <li><code>number</code>: tipa <code>number</code> vērtība, kurai ir jāaprēķina eksponenciālā funkcija. Ja <code>number</code> vērtība ir Null, funkcija <code>Number.Exp</code> atgriež vērtību Null. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Kāpiniet konstanti e 3. pakāpē.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Tiek atgriezts skaitļa faktoriāls.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> faktoriāls.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitļa 10 faktoriālu.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "No norādītās vērtības tiek izveidots skaitlis.",
        "Documentation.LongDescription": "Atgriež tipa <code>number</code> vērtību, kas ir iegūta no norādītās vērtības <code>value</code>. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").\r\nJa norādītā vērtība <code>value</code> ir <code>Null</code>, funkcija <code>Number.From</code> atgriež vērtību <code>Null</code>. Ja norādītās vērtības <code>value</code> tips ir <code>number</code>, tiek atgriezta vērtība <code>value</code>. Par tipa <code>number</code> vērtību var pārvērst tālāk norādīto tipu vērtības.\r\n      <ul>\r\n        <li><code>text</code>: <code>number</code> vērtība no teksta atveidojuma. Var apstrādāt parastos teksta formātus (15, 3,423.10, 5,0E-10). Papildinformāciju skatiet sadaļā <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: vērtībai <code>True</code> atbilst skaitlis\r1, bet vērtībai <code>False</code>\n— skaitlis\r0.</li>\n<code>value</code>        <li><code>datetime</code>: dubultprecizitātes peldošā komata skaitlis, kurā ir ietverts OLE\rautomatizācijas datuma ekvivalents.</li>\n\r        <li><code>datetimezone</code>: dubultprecizitātes peldošā komata skaitlis, kurā ir ietverts \n vietējā datuma un laika OLE\rautomatizācijas datuma ekvivalents.</li>\n\r        <li><code>date</code>: dubultprecizitātes peldošā komata skaitlis, kurā ir ietverts OLE\nautomatizācijas datuma ekvivalents.</li>\r\n        <li><code>time</code>: vērtība ir izteikta dienas daļās.</li><code>value</code>        <li><code>duration</code>: vērtība ir izteikta veselās dienās un dienas daļās.</li>      </ul>Ja vērtībai  ir jebkāds cits tips, tiek atgriezta kļūda.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet <code>number</code> vērtību no vērtības <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Iegūstiet tipa <code>number</code> vērtību no vērtības <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Iegūstiet izteiksmes <code>\"12.3%\"</code> vērtību <code>number</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "No parasto teksta formātu (15, 3,423.10, 5,0E-10) vērtībām tiek izveidotas skaitliskās vērtības.",
        "Documentation.LongDescription": "Atgriež tipa <code>number</code> vērtību, kas ir iegūta no norādītās teksta vērtības <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: teksta formātā izteikta skaitliskā vērtība. Vērtībai ir jābūt izteiktai parastā skaitliskā formātā, piemēram, \"15\", \"3423,10\" vai \"5,0E-10\".</li>\r\n  <li><code>culture</code>: neobligāta kultūra, kas nosaka, kā tiek interpretēts parametrs <code>text</code> (piemēram, \"lv-LV\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitlisko vērtību no vērtības <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Iegūstiet skaitlisko vērtību no vērtības <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Tiek norādīts, vai vērtība ir pāra skaitlis.",
        "Documentation.LongDescription": "Tiek norādīts, vai vērtība <code>number</code> ir pāra skaitlis. Ja tā ir, tiek atgriezta vērtība <code>true</code>, pretējā gadījumā tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Pārbaudiet, vai 625 ir pāra skaitlis.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Pārbaudiet, vai 82 ir pāra skaitlis.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Tiek norādīts, vai vērtība nav skaitlis (NaN).",
        "Documentation.LongDescription": "Tiek norādīts, vai vērtība nav skaitlis (NaN). Ja vērtība <code>number</code> atbilst funkcijas <code>Number.IsNaN</code> rezultātam, tiek atgriezta vērtība <code>true</code>, pretējā gadījumā tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Pārbaudiet, vai skaitļu 0 un 0 dalījuma rezultāts nav skaitlis.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Pārbaudiet, vai skaitļu 1 un 0 dalījuma rezultāts nav skaitlis.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Tiek norādīts, vai vērtība ir nepāra skaitlis.",
        "Documentation.LongDescription": "Tiek norādīts, vai vērtība ir nepāra skaitlis. Ja vērtība <code>number</code> ir nepāra skaitlis, tiek atgriezta vērtība <code>true</code>, pretējā gadījumā tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Pārbaudiet, vai 625 ir nepāra skaitlis.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Pārbaudiet, vai 82 ir nepāra skaitlis.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Tiek atgriezts skaitļa naturālais logaritms.",
        "Documentation.LongDescription": "Tiek atgriezts parametra <code>number</code> vērtības naturālais logaritms. Ja parametra <code>number</code> vērtība ir Null, funkcija <code>Number.Ln</code> atgriež vērtību Null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitļa 15 naturālo logaritmu.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Tiek atgriezts skaitļa logaritms ar norādīto bāzi (noklusējuma bāze ir konstante e).",
        "Documentation.LongDescription": "Atgriež skaitļa <code>number</code> logaritmu norādītajai bāzei <code>base</code>. Ja <code>base</code> vērtība nav norādīta, tiek izmantota noklusējuma vērtība Number.E.\r\n    Ja <code>number</code> vērtība ir Null, funkcija <code>Number.Log</code> atgriež vērtību Null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitļa 2 logaritmu ar bāzi 10.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Iegūstiet skaitļa 2 logaritmu ar bāzi e.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Tiek atgriezts skaitļa logaritms ar bāzi 10.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> logaritms ar bāzi 10. Ja <code>number</code> vērtība ir Null, funkcija <code>Number.Log10</code> atgriež nulles vērtību.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitļa 2 logaritmu ar bāzi 10.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Tiek atgriezts noapaļots skaitlis. Varat norādīt ciparu skaitu un noapaļošanas metodi.",
        "Documentation.LongDescription": "Atgriež noapaļošanas rezultātu <code>number</code> līdz tuvākajam skaitlim. Ja <code>number</code> ir nulle, <code>Number.Round</code> atgriež nulli.<br>\r\n      <br>\r\n      Pēc noklusējuma <code>number</code> tiek noapaļots līdz tuvākajam skaitlim, un saites tiek pārtrauktas, noapaļojot līdz tuvākajam pāra skaitlim (izmantojot noapaļošanu <code>RoundingMode.ToEven</code>, kas zināma arī kā \"baņķiera noapaļošana\").<br>\r\n      <br>\r\n      Tomēr šos noklusējumus var ignorēt, izmantojot turpmākos izvēles parametrus.\r\n      <ul>\r\n        <li><code>digits</code>: liek <code>number</code> būt noapaļotam līdz norādītajam ciparam aiz komata.</li>\r\n        <li><code>roundingMode</code>: ignorē noklusējuma sasaistīšanas procesu, <code>number</code> kad atrodas viduspunktā starp divām iespējamām noapaļotām vērtībām\r\n      (iespējamās vērtības skatiet <code>RoundingMode.Type</code>).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Noapaļojiet skaitli 1,234 līdz tuvākajam veselajam skaitlim.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Noapaļojiet skaitli 1,56 līdz tuvākajam veselajam skaitlim.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Noapaļojiet skaitli 1,2345 līdz skaitlim, kurā ir divi cipari aiz komata.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Noapaļojiet skaitli 1,2345 līdz skaitlim, kurā ir trīs cipari aiz komata (noapaļošana uz augšu).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Noapaļojiet skaitli 1,2345 līdz skaitlim, kurā ir trīs cipari aiz komata (noapaļošana uz leju).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Tiek atgriezts rezultāts, kas tiek iegūts, pozitīvus skaitļus noapaļojot uz augšu, bet negatīvus skaitļus noapaļojot uz leju. Var norādīt ciparu skaitu.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tiek iegūts, noapaļojot vērtību <code>number</code> atbilstoši skaitļa zīmei. Izmantojot šo funkciju, pozitīvi skaitļi tiek noapaļoti uz augšu, bet negatīvi skaitļi — uz leju.\r\n    Ja ir norādīts parametrs <code>digits</code>, vērtība <code>number</code> tiek noapaļota līdz skaitlim, kurā ciparu skaits aiz komata atbilst parametra <code>digits</code> vērtībai.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Noapaļojiet skaitli -1,2 virzienā prom no Nulles.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Noapaļojiet skaitli 1,2 virzienā prom no Nulles.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Noapaļojiet skaitli -1,234 virzienā prom no nulles līdz skaitlim, kurā ir divi cipari aiz komata.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Tiek atgriezts iepriekšējais lielākais skaitlis. Var norādīt ciparu skaitu.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas iegūts, noapaļojot vērtību <code>number</code> uz leju līdz iepriekšējam lielākajam veselajam skaitlim. Ja vērtība <code>number</code> ir Null, šī funkcija atgriež vērtību Null.\r\n\r\n    Ja ir norādīts parametrs <code>digits</code>, vērtība <code>number</code> tiek noapaļota līdz skaitlim, kurā ciparu skaits aiz komata atbilst norādītajai vērtībai.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Noapaļojiet skaitli 1,234 uz leju līdz veselam skaitlim.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Noapaļojiet skaitli 1,999 uz leju līdz veselam skaitlim.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Noapaļojiet skaitli 1,999 to uz leju līdz skaitlim, kurā ir divi cipari aiz komata.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Tiek atgriezts rezultāts, kas tiek iegūts pozitīvus skaitļus noapaļojot uz leju, bet negatīvus skaitļus noapaļojot uz augšu. Var norādīt ciparu skaitu.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tiek iegūts, noapaļojot vērtību <code>number</code> atbilstoši skaitļa zīmei. Izmantojot šo funkciju, pozitīvi skaitļi tiek noapaļoti uz leju, bet negatīvi skaitļi — uz augšu.\r\n    Ja ir norādīts parametrs <code>digits</code>, vērtība <code>number</code> tiek noapaļota līdz skaitlim, kurā ciparu skaits aiz komata atbilst parametra <code>digits</code> vērtībai.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Noapaļojiet skaitli -1,2 Nulles virzienā.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Noapaļojiet skaitli 1,2 Nulles virzienā.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Noapaļojiet skaitli -1,234 nulles virzienā līdz skaitlim, kurā ir divi cipari aiz komata.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Tiek atgriezts nākamais lielākais skaitlis. Var norādīt ciparu skaitu.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas iegūts, noapaļojot vērtību <code>number</code> uz augšu līdz nākamajam lielākajam veselajam skaitlim. Ja vērtība <code>number</code> ir Null, šī funkcija atgriež vērtību Null.\r\n    Ja ir norādīts parametrs <code>digits</code>, vērtība <code>number</code> tiek noapaļota līdz skaitlim, kurā ciparu skaits aiz komata atbilst norādītajai vērtībai.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Noapaļojiet skaitli 1,234 uz augšu līdz veselam skaitlim.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Noapaļojiet skaitli 1,999 uz augšu līdz veselam skaitlim.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Noapaļojiet skaitli 1,234 uz augšu līdz skaitlim, kurā ir divi cipari aiz komata.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Tiek atgriezta vērtība 1, ja skaitlis ir pozitīvs, vērtība -1, ja skaitlis ir negatīvs, un vērtība 0, ja skaitlis ir Nulle.",
        "Documentation.LongDescription": "Atgriež vērtību 1, ja skaitlis <code>number</code> ir pozitīvs, vērtību -1, ja tas ir negatīvs, un vērtību 0, ja šis skaitlis ir nulle. \r\n    Ja <code>number</code> vērtība ir Null, funkcija <code>Number.Sign</code> atgriež vērtību Null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet skaitļa 182 zīmi.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Nosakiet skaitļa -182 zīmi.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Nosakiet skaitļa 0 zīmi.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Tiek atgriezts skaitļa sinuss.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> sinuss.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet 0 grādu leņķa sinusu.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Tiek atgriezts skaitļa hiperboliskais sinuss.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> hiperboliskais sinuss.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Tiek atgriezta skaitļa kvadrātsakne.",
        "Documentation.LongDescription": "Atgriež skaitļa <code>number</code> kvadrātsakni.\r\n    Ja <code>number</code> vērtība ir Null, funkcija <code>Number.Sqrt</code> atgriež vērtību Null. Ja šī vērtība ir negatīva, tiek atgriezta funkcija <code>Number.NaN</code> (nav skaitlis).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet skaitļa 625 kvadrātsakni.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Iegūstiet skaitļa 85 kvadrātsakni.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Tiek atgriezts skaitļa tangenss.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> tangenss.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet 1 grāda leņķa tangensu.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Tiek atgriezts skaitļa hiperboliskais tangenss.",
        "Documentation.LongDescription": "Tiek atgriezts skaitļa <code>number</code> hiperboliskais tangenss.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Konvertē norādīto skaitli par tekstu.",
        "Documentation.LongDescription": "Konvertē skaitlisko vērtību <code>number</code> par teksta vērtību atbilstoši formātam, ko norāda <code>format</code>.<br>\r\n     <br>\r\n     Formāts ir teksta vērtība, kas norāda, kā skaitlis ir jākonvertē. Lai iegūtu papildinformāciju par atbalstītajām formāta vērtībām, dodieties uz https://go.microsoft.com/fwlink/?linkid=2241210 un https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Var norādīt arī neobligātu <code>culture</code> (piemēram, \"lv-LV\"), lai kontrolētu no kultūras atkarīgo <code>format</code> reakciju.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Konvertējiet skaitli par tekstu, nenorādot formātu.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Konvertējiet skaitli eksponenciālā formātā.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Konvertējiet skaitli procentu formātā, izmantojot tikai vienu skaitli aiz komata.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Tiek atgriezta OData pakalpojumā nodrošināto OData plūsmu tabula.",
        "Documentation.LongDescription": "Atgriež OData plūsmu tabulu, ko piedāvā OData pakalpojums no URI <code>serviceUri</code>, galvenes <code>headers</code>. Var norādīt Būla vērtību, kura norāda, vai izmantot laiksakritīgus savienojumus vai neobligātu ieraksta parametru <code>options</code>, lai pārvaldītu tālāk minētās opcijas.\r\n    <ul>\r\n    <li><code>Vaicājums</code>: programmiski pievienojiet vaicājuma parametrus vietrādim URL, neuztraucoties par atsoli. </li>\r\n    <li> <code>Headers</code>: norādot šo vērtību kā ierakstu, HTTP pieprasījumam tiks nodrošinātas papildu galvenes.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: norādot šo vērtību kā sarakstu, HTTP galveņu atslēgas vairs netiks izmantotas kešatmiņas datu aprēķinā.</li>\r\n    <li> <code>ApiKeyName</code>: ja mērķa vietnē ir kāda informācija par API atslēgu, šo parametru var izmantot, lai norādītu vietrādim URL izmantojamā atslēgas parametra nosaukumu (nevis vērtību). Atslēgas faktiskā vērtība ir norādīta akreditācijas datos.</li>\r\n    <li> <code>Timeout</code>: norādot šo vērtību kā ilgumu, tiks mainīts HTTP pieprasījuma taimauts. Noklusējuma vērtība ir 600 sekundes.</li>\r\n    <li> <code>EnableBatch</code>: loģiskā vērtība (True/False), kura iestata, vai atļaut ģenerēt OData $pakešveida pieprasījumu, ja tiek pārsniegta vērtība MaxUriLength (noklusējuma vērtība ir False).</li>\r\n    <li> <code>MaxUriLength</code>: skaitlis, kurš norāda OData pakalpojumam nosūtāmā URI maksimālo atļauto garumu. Ja tas tiek pārsniegts un parametra EnableBatch vērtība ir True, pieprasījums tiek veikts uz OData $pakešveida uzdevumu galapunktu. Pretējā gadījumā pieprasījums neizdodas (noklusējuma vērtība ir 2048).</li>\r\n    <li> <code>Concurrent</code>: loģiskā vērtība (True/False). Ja iestatīts True, pieprasījumi pakalpojumam tiks nosūtīti vienlaicīgi. Ja iestatīts False, pieprasījumi tiks nosūtīti secīgi. Ja nav norādīts, vērtību noteiks pakalpojuma anotācija AsynchronousRequestsSupported. Ja pakalpojumā nav norādīts, vai tiek atbalstīta anotācija AsynchronousRequestsSupported, pieprasījumi tiks nosūtīti secīgi.</li>\r\n    <li> <code>ODataVersion</code>: skaitlis (3 vai 4), kas apzīmē OData protokola versiju, kura tiek izmantota šim OData pakalpojumam. Ja nav norādīts, tiks pieprasītas visas atbalstītās versijas. Pakalpojuma versija tiks noteikta, izmantojot pakalpojuma atgriezto galveni OData-Version.</li>\r\n    <li> <code>FunctionOverloads</code>: loģiskā vērtība (True/False). Ja iestatīts True, funkcijas importa pārslodzes tiks ietvertas navigatora sarakstā kā atsevišķi ieraksti. Ja iestatīts False, funkcijas importa pārslodzes tiks ietvertas navigatora sarakstā kā apvienota funkcija. V3 noklusējuma vērtība: False. V4 noklusējuma vērtība: True.</li>\r\n    <li> <code>MoreColumns</code> : loģiskā vērtība (True/False). Ja iestatīts True, kolonna More Columns tiek pievienota visām entītijas plūsmām, kas satur atklātus un polimorfiskus tipus. Šī kolonna satur laukus, kas nav noteikti pamattipā. Ja iestatīts False, šis lauks netiek ietverts. Noklusējuma vērtība ir False.</li>\r\n    <li> <code>IncludeAnnotations</code>: komatatdalīts saraksts, kurā ietverti nosaukumvietas kvalificētu terminu nosaukumi vai shēmas, kas jāiekļauj ar aizstājējzīmi “*”. Pēc noklusējuma netiek ietverta neviena no anotācijām.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: komatatdalīts saraksts, kurā ietverti nosaukumvietas kvalificētu terminu nosaukumi vai shēmas, kas jāiekļauj metadatu dokumentu pieprasījumos ar aizstājējzīmi “*”. Pēc noklusējuma tiek ietvertas tādas pašas anotācijas, kādas ir sarakstā IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code>: atļauj pakalpojumā OData atbildēs nerakstīt noteiktas vērtības. Ja šī opcija tiks apstiprināta, attiecīgās vērtības tiks izsecinātas no izlaistajiem laukiem. Pieejama, piemēram, šādas opcijas:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code>: atļauj pakalpojumā OData izlaist vērtības Null.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : norāda izmantojamā OData savienotāja ieviešanu. Derīgās vērtības ir 2.0 vai Null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Izveidot savienojumu ar pakalpojumu TripPin OData.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Atgriež rezultātu, kas iegūts, mēģinot izsecināt SQL iespējas ODBC draiverim.",
        "Documentation.LongDescription": "Atgriež rezultātu, kas iegūts, mēģinot izsecināt SQL iespējas ar savienojuma virkni <code>connectionString</code>, izmantojot ODBC. <code>connectionString</code> var būt teksts vai rekvizītu vērtību pāru ieraksts. Rekvizītu vērtības var būt teksts vai skaitlis.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Atgriež izsecinātās SQL iespējas savienojuma virknei.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Atgriež Parquet dokumenta saturu kā tabulu.",
        "Documentation.LongDescription": "Atgriež Parquet dokumenta saturu kā tabulu. Opcijas ietver:\n    <ul>\n    <li> <code>TypeMapping</code> : teksta vērtība, kas kontrolē noklusējuma tipa kartējumu, lasot un rakstot failus. Noklusējuma vērtība ir Null, un tiek mēģināts saglabāt pēc iespējas vairāk precizitātes pret sākotnējo tipu. Vērtība \"Sql\" radīs rezultātus, kas ir visatbilstošākie ar Sql Server.</li>\n    </ul>",
        "Documentation.Category": "Piekļuve datiem",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Piekļuve datiem",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Atgriež dotās vērtības procentuālo vērtību.",
        "Documentation.LongDescription": "Atgriež dotās izteiksmes <code>value</code> vērtību <code>percentage</code>. Ja dotā izteiksme <code>value</code> ir <code>Null</code>, komanda <code>Percentage.From</code> atgriež vērtību <code>Null</code>. Ja dotā izteiksme <code>value</code> ir formātā <code>text</code> ar noslēdzošu procentu zīmi, tiek atgriezts pārveidotais decimāldaļskaitlis. Citos gadījumos vērtība tiks konvertēta <code>number</code>, izmantojot <code>Number.From</code>. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet izteiksmes <code>\"12.3%\"</code> vērtību <code>percentage</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Atgriež datu kadru ierakstu no faila RData.",
        "Documentation.LongDescription": "Atgriež datu kadru ierakstu no faila RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Tiek apvienoti norādītajā sarakstā ietvertie ieraksti.",
        "Documentation.LongDescription": "Tiek apvienoti norādītajā sarakstā <code>records</code> ietvertie ieraksti. Ja sarakstā <code>records</code> ir ietvertas vērtības, kas nav ieraksti, tiek atgriezta kļūda.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet apvienotu ierakstu no ierakstiem.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Tiek atgriezts ieraksta lauku skaits.",
        "Documentation.LongDescription": "Tiek atgriezts ieraksta <code>record</code> lauku skaits.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet ieraksta lauku skaitu.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Tiek atgriezti lauku nosaukumi.",
        "Documentation.LongDescription": "Teksta formātā tiek atgriezti ieraksta <code>record</code> lauku nosaukumi.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet ieraksta lauku nosaukumus.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Tiek atgriezts lauku vērtību saraksts.",
        "Documentation.LongDescription": "Tiek atgriezts ieraksta <code>record</code> lauku vērtību saraksts.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet ieraksta lauku vērtības.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Tiek izveidots ieraksts no šāda formāta tabulas: {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Tiek atgriezts ieraksts, kas ir izveidots no ierakstu tabulas <code>table</code>, kurā ir ietverti lauku nosaukumi un vērtības <code>{[Name = name, Value = value]}</code>. Ja lauku nosaukumi nav unikāli, tiek aktivizēts izņēmums.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet ierakstu no šāda formāta tabulas: Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Tiek atgriezts vērtību saraksts, kurā ir ietvertas ievades ieraksta lauku vērtības.",
        "Documentation.LongDescription": "Tiek atgriezts vērtību saraksts, kurā ir ietvertas ievades ieraksta <code>record</code> lauku vērtības.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Izgūstiet ieraksta lauku vērtības.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Atgriež abstraktu sintakses koku (AST), kas apzīmē piekļuvi kolonnai rindas izteiksmē.",
        "Documentation.LongDescription": "Atgriež abstraktu sintakses koku (AST), kas apzīmē piekļuvi rindas <code>columnName</code> kolonnai rindas izteiksmē.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Izveido AST, kas apzīmē kolonnas “CustomerName” piekļuvi.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Atgriež funkcijas pamatteksta abstrakto sintakses koku (AST).",
        "Documentation.LongDescription": "<p>Atgriež abstrakto sintakses koku (AST) <code>function</code> pamattekstam, kas ir normalizēts <i>rindas izteiksmē</i>:\r\n<ul>\r\n  <li>Šai funkcijai ir jābūt 1 argumenta lambdai.</li>\r\n  <li>Visas atsauces uz šo funkcijas parametru tiek aizstātas ar <code>RowExpression.Row</code>.</li>\r\n  <li>Visas atsauces uz kolonnām tiek aizstātas ar <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>AST tiks vienkāršots, lai ietvertu tikai šādu veidu mezglus:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Ja <code>function</code> pamattekstam nevar atgriezt kādu rindas izteiksmes AST, rodas kļūda.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Atgriež AST funkcijas <code>each [CustomerID] = \"ALFKI\"</code> pamattekstam",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Izveido vienkāršās precizitātes skaitli no dotās vērtības.",
        "Documentation.LongDescription": "Atgriež atsevišķo <code>number</code> vērtību no dotā <code>value</code>. Ja dotais <code>value</code> ir <code>null</code>, <code>Single.From</code> atgriež <code>null</code>.  Ja dotais <code>value</code> ir <code>number</code> atsevišķa diapazonā, tiek atgriezts <code>value</code>, bet pretējā gadījumā tiek atgriezta kļūda. Ja <code>value</code> ir jebkura cita tipa, tas vispirms tiks konvertēts par <code>number</code> using <code>Number.FromText</code>. Ir iespējams nodrošināt arī papildu <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Iegūt <code>\"1.5\"</code> vienkāršās precizitātes <code>number</code> vērtību.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Atgriež datu tabulu no Smartsheet indeksa galapunkta.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Izsauc Smartsheet 2.0 REST API norādītajā galapunktā un transformē atgriezto datu elementu tabulā.",
        "Documentation.Examples": [
          {
            "Description": "Atgādā lietotāju informācijas tabulu no Smartsheet API",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Smartsheet API atgrieztā lietotāju informācijas tabula"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši jebkuram no norādītajiem atdalītājiem, izveidojot teksta vērtību sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši jebkuram no norādītajiem atdalītājiem, izveidojot teksta vērtību sarakstu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Sadalīt ievadi pēc komata vai semikola, ignorējot pēdiņas un pēdiņas norobežotājus un sākot no ievades sākuma.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Sadalīt ievadi pēc komata vai semikola, ignorējot pēdiņas un pēdiņas norobežotājus un sākot no ievades beigām.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši norādītajam atdalītājam, izveidojot teksta vērtību sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši norādītajam atdalītājam, izveidojot teksta vērtību sarakstu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Sadalīt ievadi pēc komata, ignorējot pēdiņās norādītos komatus.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši katram secīgi norādītajam atdalītājam, izveidojot teksta vērtību sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši katram secīgi norādītajam atdalītājam, izveidojot teksta vērtību sarakstu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Sadalīt ievadi pēc komata, pēc tam semikolu, sākot no ievades sākuma.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Sadalīt ievadi pēc komata, pēc tam semikolu, apstrādājot pēdiņas kā citas rakstzīmes un sākot no ievades beigām.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši katrai norādītajai garuma vērtībai, izveidojot teksta vērtību sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši katrai norādītajai garuma vērtībai, izveidojot teksta vērtību sarakstu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Sadalīt ievadi pirmajās divās rakstzīmes, kam seko nākamās trīs rakstzīmes, sākot no ievades sākuma.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Sadalīt ievadi pirmajās trīs rakstzīmes, kam seko nākamās divas rakstzīmes, sākot no ievades beigām.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši katrai norādītajai pozīcijai, izveidojot teksta vērtību sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši katrai norādītajai pozīcijai, izveidojot teksta vērtību sarakstu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Sadalīt ievadi norādītajās pozīcijās, sākot no ievades sākumu.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Sadalīt ievadi norādītajās pozīcijās, sākot no ievades beigām.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši norādītajām nobīdēm un garuma vērtībām, izveidojot teksta vērtību sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezta funkcija, kas nodrošina teksta sadali atbilstoši norādītajai nobīdei un garumam, sadalot tekstu teksta sarakstā. Nulles garums norāda, ka ir jāietver visa atlikusī ievade.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Sadalīt ievadi pēc norādītās pozīcijas un garuma pāriem, sākot no ievades sākuma. Ņemiet vērā, ka diapazoni šajā piemērā pārklājas.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Sadalīt ievadi pēc norādītās pozīcijas un garuma pāriem, sākot no ievades beigām.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Sadalīt ievadi fiksēta garuma pasta indeksā, kam seko mainīga garuma pilsētas nosaukums.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Tiek atgriezta funkcija, kas nodrošina teksta atkārtotu sadali atbilstoši norādītajai garuma vērtībai, izveidojot teksta vērtību sarakstu.",
        "Documentation.LongDescription": "Tiek atgriezta funkcija, kas nodrošina teksta atkārtotu sadali atbilstoši norādītajai garuma vērtībai, izveidojot teksta vērtību sarakstu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Atkārtoti sadalīt ievadi trīs rakstzīmju porcijās, sākot no ievades sākuma.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Atkārtoti sadalīt ievadi trīs rakstzīmju porcijās, sākot no ievades beigām.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Tiek atgriezts aptuvenais rindu skaits tabulā.",
        "Documentation.LongDescription": "Atgriež aptuveno rindu skaitu kolonnā<code>table</code> vai kļūdu, ja datu avots neatbalsta aptuveno skaitu.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Novērtējiet lielas tabulas atšķirīgo pilsētas un novada kombināciju skaitu, ko var izmantot kolonnu kardinalitātes novērtējumam. Kardinalitātes novērtējumi ir pietiekami svarīgi, lai dažādi datu avoti (piemēram, SQL Server) atbalsta šo konkrēto attēlojumu, bieži izmantojot algoritmu HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Tiek atgriezts tabulas kolonnu skaits.",
        "Documentation.LongDescription": "Tiek atgriezts tabulas <code>table</code> kolonnu skaits.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet tabulas kolonnu skaitu.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Tiek atgriezts saraksts, kurā ir ietverti kolonnu nosaukumi.",
        "Documentation.LongDescription": "Tiek atgriezts teksta vērtību saraksts, kurā ir ietverti tabulas <code>table</code> kolonnu nosaukumi.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet tabulas kolonnu nosaukumus.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Tiek atgriezta pirmā rinda vai norādītā noklusējuma vērtība.",
        "Documentation.LongDescription": "Tiek atgriezta <code>table</code> pirmā rinda vai neobligāta noklusējuma vērtība <code>default</code>, ja tabula ir tukša.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet tabulas pirmo rindu.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Atrodiet tabulas <code>({})</code> pirmo rindu vai tiek atgriezts [a = 0, b = 0], ja tukšs.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Tiek atgriezta pirmās rindas pirmā kolonna, kas iekļauta tabulā vai norādītajā noklusējuma vērtībā.",
        "Documentation.LongDescription": "Tiek atgriezta pirmās rindas pirmā kolonna, kas iekļauta tabulā <code>table</code> vai norādītajā noklusējuma vērtībā.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Norāda, vai tabulā ir ietvertas tikai atšķirīgas rindas (nevis dublikāti).",
        "Documentation.LongDescription": "Norāda, vai <code>table</code> ietver tikai atšķirīgas rindas (nevis dublikātus). Tiek atgriezta vērtība <code>true</code>, ja rindas ir atšķirīgas; pretējā gadījumā tiek atgriezta vērtība <code>false</code>.\r\n    Izmantojot papildu parametru <code>comparisonCriteria</code>, tiek norādīts, kuras tabulas kolonnas tiek pārbaudītas, lai noteiktu dublikātus. Ja parametrs <code>comparisonCriteria</code> nav norādīts, tiek pārbaudītas visas kolonnas.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai tabula ir atšķirīga.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Nosakiet, vai tabula ir atšķirīga kolonnā.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Norāda, vai tabulā ir ietvertas jebkādas rindas.",
        "Documentation.LongDescription": "Norāda, vai <code>table</code> ietver jebkādas rindas. Tiek atgriezta vērtība <code>true</code>, ja nav nevienas rindas (piemēram, ja tabula ir tukša); pretējā gadījumā tiek atgriezta vērtība <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai tabula ir tukša.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Nosakiet, vai tabula <code>({})</code> ir tukša.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Atgriež norādītās tabulas atslēgas.",
        "Documentation.LongDescription": "Atgriež norādītās tabulas atslēgas.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet tabulas atslēgu sarakstu.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Tiek atgriezta pēdējā rinda vai norādītā noklusējuma vērtība.",
        "Documentation.LongDescription": "Tiek atgriezta <code>table</code> pēdējā rinda vai neobligāta noklusējuma vērtība <code>default</code>, ja tabula ir tukša.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet tabulas pēdējo rindu.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Atrodiet tabulas <code>({})</code> pēdējo rindu vai tiek atgriezts [a = 0, b = 0], ja tā ir tukša.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Tiek atgriezts rindu skaits tabulā.",
        "Documentation.LongDescription": "Tiek atgriezts <code>table</code> rindu skaits.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet rindu skaitu tabulā.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Tiek atgriezta viena rinda tabulā.",
        "Documentation.LongDescription": "Tiek atgriezta viena rinda vienā rindu <code>table</code>. Ja <code>table</code> ietver vairākas rindas, tiek aktivizēts izņēmums.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Atgrieziet atsevišķu rindu tabulā.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Tiek izveidots saraksts ar kolonnu vērtību ligzdotajiem sarakstiem no tabulas.",
        "Documentation.LongDescription": "Tiek izveidots saraksts ar ligzdotajiem sarakstiem no tabulas <code>table</code>.  Katrs saraksta vienums ir iekšējs saraksts, kas ietver kolonnu vērtības.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Tiek izveidots kolonnu vērtību saraksts no tabulas.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Tabula tiek pārvērsta sarakstā, lietojot norādīto apvienošanas funkciju katrai tabulas vērtību rindai.",
        "Documentation.LongDescription": "Tabula tiek pārvērsta sarakstā, lietojot norādīto apvienošanas funkciju katrai tabulas vērtību rindai.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Apvienot katras rindas teksta vērtību ar komatu.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Tabula tiek pārvērsta ierakstu sarakstā.",
        "Documentation.LongDescription": "Tabula <code>table</code> tiek pārvērsta ierakstu sarakstā.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Tabulu pārvērtiet ierakstu sarakstā.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Tiek izveidots saraksts ar rindu vērtību ligzdotajiem sarakstiem no tabulas.",
        "Documentation.LongDescription": "Tiek izveidots saraksts ar ligzdotajiem sarakstiem no tabulas <code>table</code>.  Katrs saraksta vienums ir iekšējs saraksts, kas ietver rindu vērtības.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet rindu vērtību sarakstu no tabulas.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Izveido modificētu kļūdas ierakstu, kas neaktivizēs atkāpšanos, kad to aktivizēs skatam noteiktais apstrādātājs (ar Table.View).",
        "Documentation.LongDescription": "Izveido modificētu kļūdas ierakstu no <code>errorRecord</code>, kas neaktivizēs atkāpšanos, kad to aktivizēs skatam noteiktais apstrādātājs (ar Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Tiek izveidota funkcija, kuru var pārtvert skatā definēts apdarinātājs (izmantojot Table.View).",
        "Documentation.LongDescription": "<p>Pamatojoties uz <code>function</code>, tiek izveidota skata funkcija, kuru var apstrādāt funkcijas <code>Table.View</code> izveidotā skatā.</p>\r\n<p>Skata funkcijai var definēt apdarinātāju, izmantojot funkcijas <code>Table.View</code> apdarinātāju <code>OnInvoke</code>.</p>\r\n<p>Tāpat kā iebūvēto darbību apdarinātājiem, ja apdarinātājs <code>OnInvoke</code> netiek norādīts, neapstrādā skata funkciju vai rada kļūdu, <code>function</code> tiek lietota virs skata.</p>\r\n<p>Papildinformāciju par <code>Table.View</code> un pielāgotām skata funkcijām skatiet publicētajā Power Query pielāgotā savienotāja dokumentācijā.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Tiek atgriezta teksta vērtība, kurā noņemtas visas vadības rakstzīmes.",
        "Documentation.LongDescription": "Tiek atgriezta teksta vērtība, kurā noņemtas visas <code>text</code> vadības rakstzīmes.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet rindpadeves un citas vadības rakstzīmes no teksta vērtības.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Teksta vērtību saraksts tiek savienots vienā teksta vērtībā.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas iegūts, apvienojot <code>texts</code> teksta vērtību sarakstu vienā teksta vērtībā. Visas <code>null</code> vērtības, kas ir <code>texts</code>, tiek ignorētas.\r\n    Var norādīt neobligātu <code>separator</code>, kas tiek izmantots galīgajā kombinētajā tekstā.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Apvienojiet teksta vērtības Seattle un WA.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Apvienojiet teksta vērtības Seattle un WA, kas atdalītas ar komatu un atstarpi.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Apvienojiet vērtības Seattle, <code>null</code> un WA, kas atdalītas ar komatu un atstarpi. (Ņemiet vērā, ka <code>null</code> ir ignorēta.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Tiek izveidota teksta vērtība no sniegtās vērtības.",
        "Documentation.LongDescription": "Atgriež parametra <code>value</code> vērtības atveidojumu teksta formātā. Parametra <code>value</code> vērtība var būt tipa <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> vai <code>binary</code> vērtība.\r\n    Ja norādītā vērtība ir Null, funkcija <code>Text.From</code> atgriež vērtību Null. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet teksta vērtību no skaitļa 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Dati no bināras formas tiek dekodēti tekstā.",
        "Documentation.LongDescription": "Dati <code>binary</code> no bināras vērtības tiek dekodēti teksta vērtībā, izmantojot <code>encoding</code> tipu.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Izsecina tekstā kodētā skaitļa granulārā skaitļa tipu (Int64.Type, Double.Type utt.).",
        "Documentation.LongDescription": "Izsecina parametra <code>text</code> granulveida numerācijas tipu (Int64.Type, Double.Type utt.). Ja <code>text</code> nav skaitlis, rodas kļūda. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, “lv-LV”).",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Tiek atgriezts rakstzīmju skaits.",
        "Documentation.LongDescription": "Tiek atgriezts rakstzīmju skaits tekstā <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Uzziniet, cik rakstzīmju ir tekstā Hello World.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Visas rakstzīmes tiek pārvērstas mazajos burtos.",
        "Documentation.LongDescription": "Atgriež rezultāts, kas tiek iegūts, pārvēršot visas parametra <code>text</code> vērtības rakstzīmes par mazajiem burtiem. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet AbCd versiju ar mazajiem burtiem.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Katra vārda pirmais burts tiek rakstīts ar lielo burtu.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas iegūts, pārveidojot par lielajiem burtiem tikai katra vārda pirmo burtu teksta vērtībā <code>text</code>. Pārējie burti tiek atgriezti kā mazie burti. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vienkāršā teikumā lietojiet <code>Text.Proper</code>.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Apgriež norādīto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Apgrieziet tekstu 123.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Teksts tiek kodēts binārā formā.",
        "Documentation.LongDescription": "Sniegtā teksta vērtība <code>text</code> tiek kodēta binārā vērtībā, izmantojot norādīto <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Tiek atgriezts rakstzīmju vērtību saraksts no sniegtās teksta vērtības.",
        "Documentation.LongDescription": "Tiek atgriezts rakstzīmju vērtību saraksts no sniegtās teksta vērtības <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet rakstzīmju vērtību sarakstu no teksta Hello World.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Tiek noņemtas visas sākuma un beigu baltstarpas.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tika iegūts, noņemot visas sākuma un beigu baltstarpas no teksta vērtības <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet sākuma un beigu baltstarpu no \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Tiek noņemtas visas beigu baltstarpas.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tika iegūts, noņemot visas beigu baltstarpas no teksta vērtības <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet beigu baltstarpu no \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Tiek noņemtas visas sākuma baltstarpas.",
        "Documentation.LongDescription": "Tiek atgriezts rezultāts, kas tika iegūts, noņemot visas sākuma baltstarpas no teksta vērtības <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Noņemiet sākuma baltstarpu no \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Visas rakstzīmes tiek pārvērstas par lielajiem burtiem.",
        "Documentation.LongDescription": "Atgriež rezultāts, kas tiek iegūts, pārvēršot visas parametra <code>text</code> vērtības rakstzīmes par lielajiem burtiem. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet aBcD versiju ar lielajiem burtiem.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Atgriež stundas beigas.",
        "Documentation.LongDescription": "Atgriež stundas beigas, kas apzīmētas ar <code>dateTime</code>, ieskaitot sekunžu daļas. Tiek saglabāta informācija par laika joslu.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>time</code>, <code>datetime</code> vai <code>datetimezone</code> vērtība, no kuras tiek aprēķinātas stundas beigas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Iegūstiet 14.05.2011. 17:00:00 stundas beigas.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Iegūstiet 17.05.2011. 17:00:00–7:00 stundas beigas.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Tiek izveidots laiks no sniegtās vērtības.",
        "Documentation.LongDescription": "Atgriež tipa <code>time</code> vērtību, kas ir iegūta no norādītās vērtības <code>value</code>. Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").\r\nJa norādītā vērtība <code>value</code> ir <code>Null</code>, funkcija <code>Time.From</code> atgriež vērtību <code>Null</code>. Ja norādītās vērtības <code>value</code> tips ir <code>time</code>, tiek atgriezta vērtība <code>value</code>. Par tipa <code>time</code> vērtību var pārvērst tālāk norādīto tipu vērtības.\r\n      <ul>\r\n        <li><code>text</code>: <code>time</code> vērtība no teksta atveidojuma. Papildinformāciju skatiet sadaļā <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: <code>value</code> laika komponents.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> vietējā datetime ekvivalenta laika komponents.</li>\r\n        <li><code>number</code>: <code>time</code> ekvivalents dienu daļu skaitam, kas izteikts ar <code>value</code>. Ja <code>value</code> ir negatīvs vai lielāks par vai vienāds ar\r1, tiek atgriezta kļūda.</li>\n\r      </ul>\n<code>value</code>Ja vērtībai  ir jebkāds cits tips, tiek atgriezta kļūda.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pārvērtiet vērtību <code>0.7575</code> par tipa <code>time</code> vērtību.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Pārvērtiet vērtību <code>#datetime(1899, 12, 30, 06, 45, 12)</code> par tipa <code>time</code> vērtību.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Veido Time no vietējiem, universālajiem un pielāgotajiem Time formātiem.",
        "Documentation.LongDescription": "Izveido <code>time</code> vērtību no teksta atveidojuma, <code>text</code>. Neobligāts <code>record</code> parametrs, <code>options</code>, var tikt nodrošināts, lai precizētu papildu rekvizītus. <code>Ieraksts</code> var saturēt tālāk norādītos laukus:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> vērtība, kas norāda uz izmantojamo formātu. Dodieties uz https://go.microsoft.com/fwlink/?linkid=2180104 un https://go.microsoft.com/fwlink/?linkid=2180105. Šī lauka izlaišanas vai <code>null</code> vērtības norādīšanas rezultātā notiks datuma parsēšana, izmantojot labākos rezultātus.</li>\r\n   <li><code>Culture</code>: kad <code>Format</code> vērtība nav null, <code>Culture</code> kontrolē atsevišķus formāta apzīmētājus. Piemēram, <code>\"en-US\"</code> <code>\"tt\"</code> ir <code>\"AM\" vai \"PM\"</code>, bet <code>\"ar-EG\"</code> <code>\"tt\"</code> ir <code>\"ص\" vai \"م\"</code>. Kad <code>Format</code> ir <code>null</code>, <code>Culture</code> kontrolē noklusējuma formāta izmantošanu. Kad <code>Culture</code> ir <code>null</code> vai izlaists, tiek izmantots <code>Culture.Current</code>.</li>\r\n</ul>\r\nLai atbalstītu mantotās darbplūsmas, <code>options</code> var būt arī teksta vērtības. Tam ir tāda pati uzvedība kā tad, ja <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pārvērtiet <code>\"10:12:31am\"</code> par Time vērtību.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Konvertēt <code>\"1012\"</code> uz Time vērtību.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Konvertēt <code>\"10\"</code> uz Time vērtību.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Tiek atgriezts stundas komponents.",
        "Documentation.LongDescription": "Tiek atgriezts sniegtās <code>time</code>, <code>datetime</code> vai <code>datetimezone</code> vērtības <code>dateTime</code> stundas komponents.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet stundu vērtībā #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Tiek atgriezts minūtes komponents.",
        "Documentation.LongDescription": "Tiek atgriezts sniegtās <code>time</code>, <code>datetime</code> vai <code>datetimezone</code> vērtības <code>dateTime</code> minūtes komponents.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet minūti vērtībā #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Tiek atgriezts sekundes komponents.",
        "Documentation.LongDescription": "Tiek atgriezts sniegtās <code>time</code>, <code>datetime</code> vai <code>datetimezone</code> vērtības <code>dateTime</code> sekundes komponents.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet sekundes vērtību vērtībā datetime.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Atgriež stundas sākumu.",
        "Documentation.LongDescription": "Atgriež stundas sākumu, kas apzīmēts ar <code>dateTime</code>.\r\n    <code>dateTime</code> jābūt vērtībai <code>time</code>, <code>datetime</code> vai <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet stundas sākumu 2011. gada 10. oktobrim, plkst. 8:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Tiek atgriezts ieraksts, kas ietver Time vērtības daļas.",
        "Documentation.LongDescription": "Atgriež ierakstu, kas ietver norādītās Time vērtības <code>time</code> daļas.\r\n <ul>\r\n        <li><code>time</code>: <code>time</code> vērtība, no kuras tiek aprēķināts tās daļu ieraksts.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Pārvērtiet <code>#time(11, 56, 2)</code> vērtību par ierakstu, kas ietver Time vērtības.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Atgriež laiks vērtības teksta attēlojumu.",
        "Documentation.LongDescription": "Atgriež <code>time</code> teksta atveidojumu. Neobligāts <code>record</code> parametrs, <code>options</code>, var tikt nodrošināts, lai precizētu papildu rekvizītus. <code>culture</code> tiek izmantots tikai mantotās darbplūsmās. <code>record</code> var saturēt tālāk norādītos laukus:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> vērtība, kas norāda uz izmantojamo formātu. Papildinformācijai dodieties uz https://go.microsoft.com/fwlink/?linkid=2180104 un https://go.microsoft.com/fwlink/?linkid=2180105. Šī lauka izlaišanas vai <code>null</code> vērtības norādīšanas rezultātā tiks izmantots noklusējuma datuma noformējums, ko nosaka <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: kad <code>Format</code> vērtība nav null, <code>Culture</code> kontrolē atsevišķus formāta apzīmētājus. Piemēram, <code>\"en-US\"</code> <code>\"tt\"</code> ir <code>\"AM\" vai \"PM\"</code>, bet <code>\"ar-EG\"</code> <code>\"tt\"</code> ir <code>\"ص\" vai \"م\"</code>. Kad <code>Format</code> ir <code>null</code>, <code>Culture</code> kontrolē noklusējuma formāta izmantošanu. Kad <code>Culture</code> ir <code>null</code> vai izlaists, tiek izmantots <code>Culture.Current</code>.</li>\r\n</ul>\r\nLai atbalstītu mantotās darbplūsmas, <code>options</code> un <code>culture</code> var būt arī teksta vērtības. Tam ir tāda pati uzvedība kā tad, ja <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertēt <code>#time(01, 30, 25)</code> par <code>text</code> vērtību. <i>Rezultāts var atšķirties atkarībā no pašreizējās kultūras.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Konvertēt, izmantojot pielāgotu formātu un vācu kultūru.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Konvertēt, izmantojot standarta laika formātu.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Atgriež sniegtā ieraksta tipa slēgtu versiju (vai to pašu tipu, ja tas jau ir noslēgts).",
        "Documentation.LongDescription": "Atgriež sniegtā <code>record</code> <code>type</code> slēgtu versiju (vai to pašu tipu, ja tas jau ir noslēgts).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet <code>type [ A = number,…]</code> slēgtu versiju.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Atgriež tipa fasetes.",
        "Documentation.LongDescription": "Atgriež ierakstu, kurā ir <code>type</code> fasetes.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Atgriež ierakstu ar lauku vērtībām, kas iestatītas funkcijas tipa parametru nosaukumam, un to vērtības, kas iestatītas atbilstošajiem tipiem.",
        "Documentation.LongDescription": "Atgriež ierakstu ar lauku vērtībām, kas iestatītas <code>type</code> parametru nosaukumam, un to vērtības, kas iestatītas atbilstošajiem tipiem.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet funkcijas <code>(x as number, y as text)</code> parametru tipus.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Atgriež skaitli, kas norāda minimālo nepieciešamo parametru skaitu, lai izsauktu funkcijas tipu.",
        "Documentation.LongDescription": "Atgriež skaitli, kas norāda minimālo nepieciešamo parametru skaitu, lai izsauktu funkcijas ievadi <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet funkcijai <code>(x as number, optional y as text)</code> nepieciešamo parametru skaitu.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Atgriež tipu, ko atgrieza funkcijas tips.",
        "Documentation.LongDescription": "Atgriež tipu, ko atgrieza funkcija <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet <code>() as any)</code> atgriešanas tipu.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Atgriež \"true\", ja tips ir Nullējams. Pretējā gadījumā vērtība ir \"false\".",
        "Documentation.LongDescription": "Atgriež <code>true</code>, ja tips ir <code>Nullable</code>. Pretējā gadījumā vērtība ir <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai <code>number</code> ir Nullējams.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Nosakiet, vai <code>type Nullable number</code> ir Nullējams.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Atgriež, vai ieraksta tips ir atvērts.",
        "Documentation.LongDescription": "Atgriež <code>logical</code>, kas norāda, vai ieraksts <code>type</code> ir atvērts.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nosakiet, vai ieraksts <code>type [ A = number, ...]</code> ir atvērts.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Atgriež vienuma tipu no saraksta tipa.",
        "Documentation.LongDescription": "Atgriež vienuma tipu no saraksta <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet vienuma tipu sarakstā <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Atgriež neNullējamu tipu no tipa.",
        "Documentation.LongDescription": "Atgriež tipu, kas nav <code>Nullable</code> tips, no <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Atgrieziet <code>type Nullable number</code> neNullējamu tipu.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Atgriež sniegtā ieraksta tipa atvērtu versiju (vai to pašu tipu, ja tā jau ir atvērta).",
        "Documentation.LongDescription": "Atgriež sniegtā <code>record</code> <code>type</code> atvērtu versiju (vai to pašu tipu, ja tā jau ir atvērta).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Izveidojiet <code>type [ A = number]</code> atvērtu versiju.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Atgriež ierakstu, kurā aprakstīti ieraksta tipa lauki, un katra atgrieztā ieraksta tipa laukam ir atbilstošs nosaukums un vērtība.",
        "Documentation.LongDescription": "Atgriež ierakstu, kurā aprakstīti ieraksta <code>type</code> lauki. Katram atgrieztā ieraksta tipa laukam ir atbilstošs nosaukums un vērtība ieraksta <code>[ Type = type, Optional = logical ]</code> veidā.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet ieraksta <code>[ A = number, optional B = any]</code> nosaukumu un vērtību.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Tiek atgriezts iespējami tukšs atslēgu saraksts norādītajam tabulas tipam.",
        "Documentation.LongDescription": "Tiek atgriezts iespējami tukšs atslēgu saraksts norādītajam tabulas tipam.<br>\r\n    <br>\r\n    Katra atslēga tiek definēta, izmantojot ierakstu šādā formā:\r\n    <ul>\r\n      <li>\r\n        <code>Kolonnas</code>: kolonnu nosaukumu saraksts, kas definē atslēgu\r\n      </li>\r\n      <li>\r\n        <code>Primārā</code>: <code>patiess</code>, ja atslēga ir tabulas primārā atslēga; pretējā gadījumā <code>aplams</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tiek atgriezta tabulas tipa atslēgas informācija.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Tiek atgriezts rindas tips tabulas tipā.",
        "Documentation.LongDescription": "Atgriež norādītā tabulas tipa rindas tipu. Rezultāts vienmēr būs ieraksta tips.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tiek atrakstīta rindas tipa informācija vienkāršai tabulai.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Atgriež tipu saraksta apvienojumu.",
        "Documentation.LongDescription": "Atgriež <code>types</code> tipu apvienojumu.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Apvienojiet ierakstu URI vaicājuma virknē.",
        "Documentation.LongDescription": "Apvienojiet ierakstu <code>query</code> URI vaicājuma virknē, veidojot atsoļa rakstzīmes, kad nepieciešams.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kodējiet vaicājuma virkni, kurā ietvertas speciālās rakstzīmes.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Kodē speciālās rakstzīmes saskaņā ar RFC 3986.",
        "Documentation.LongDescription": "Kodē speciālās rakstzīmes ievadē <code>data</code> saskaņā ar RFC 3986 noteikumiem.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kodējiet \"+money$\" speciālās rakstzīmes.",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Ievades absolūtā URI daļas tiek atgrieztas kā ieraksts.",
        "Documentation.LongDescription": "Ievades <code>absoluteUri</code> daļas tiek atgrieztas kā ieraksts, kas ietver tādas vērtības kā Scheme, Host, Port, Path, Query, Fragment, UserName un Password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Atrodiet absolūtā URI \"www.adventure-works.com\" daļas.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Dekodējiet procentuāli kodētu virkni.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Ievadiet Azure DevOps Analytics pakalpojuma vietrādi URL.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Tiek atgriezts saturs, kas ir lejupielādēts no Azure DevOps Analytics pakalpojuma vietrāža URL kā bināra vērtība. Šajā funkcijā dažādām organizācijām tiek izmantoti dažādi akreditācijas dati."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Ievadiet Azure DevOps Analytics pakalpojuma vietrādi URL.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Tiek atgriezts saturs, kas ir lejupielādēts no Azure DevOps Analytics pakalpojuma vietrāža URL kā bināra vērtība. Šajā funkcijā visām pieejamajām organizācijām tiek izmantoti globāli akreditācijas dati."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Izsaka alternatīvos vaicājumu plānus.",
        "Documentation.LongDescription": "Izsaka alternatīvos vaicājumu plānus vaicājumu plāna izteiksmē, kas iegūta, izmantojot Value.Expression(Value.Optimize(...)). Nav paredzēts citām vajadzībām.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Atgriež abstraktu sintakses koku (AST), kas attēlo vērtības izteiksmi.",
        "Documentation.LongDescription": "Atgriež abstraktu sintakses koku (AST), kas attēlo vērtības izteiksmi",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Tiek izveidota stingri tipēta vērtība no teksta atveidojuma.",
        "Documentation.LongDescription": "Tiek dekodēta vērtība no teksta atveidojuma <code>text</code>, un tā tiek interpretēta kā vērtība ar atbilstošu tipu.\r\n    <code>Value.FromText</code> izmanto teksta vērtību un atgriež skaitli, loģisku vērtību, Null vērtību, datetime vērtību, ilguma vērtību vai teksta vērtību. Tukša teksta vērtība tiek interpretēta kā Null vērtība.\r\n    Var norādīt arī neobligātu parametru <code>culture</code> (piemēram, \"lv-LV\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Tiek atgriezts ieraksts, kas ietver ievades metadatus.",
        "Documentation.LongDescription": "Tiek atgriezts ieraksts, kas ietver ievades metadatus.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Signalizē vērtības izteiksmi, lai vērtībai atgrieztu optimizētu izteiksmi.",
        "Documentation.LongDescription": "Ja tiek izmantots ar vērtības izteiksmi un ja <code>value</code> attēlo vaicājumu, ko var optimizēt, šī funkcija norāda, ka ir jāatgriež optimizētā izteiksme. Pretējā gadījumā bez izmaiņām tiks nodots <code>value</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Tiek joslota metadatu ievade.",
        "Documentation.LongDescription": "Tiek joslota metadatu ievade.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Tiek atgriezts norādītās vērtības tips.",
        "Documentation.LongDescription": "Tiek atgriezts norādītās vērtības tips.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.LongDescription": "Šī funkcija ir paredzēta tikai iekšējai lietošanai.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Atgriež norādītā vietrāža URL HTML, kā to aplūko tīmekļa pārlūkprogramma.",
        "Documentation.LongDescription": "Atgriež HTML norādītajam <code>url</code>, kā tas ir redzams tīmekļa pārlūkprogrammā. Lai norādītu papildu rekvizītus, var tikt norādīts papildu ieraksta parametrs <code>options</code>. Ierakstā var būt ietverti tālāk norādītie lauki.\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: ja mērķa vietnē ir kāda informācija par API atslēgu, šo parametru var izmantot, lai norādītu vietrādī URL izmantojamās atslēgas nosaukumu (nevis vērtību). Faktiskā atslēgas vērtība tiek norādīta akreditācijas datos.</li>\r\n        <li><code>WaitFor</code>: norāda nosacījumu gaidīt pirms HTML lejupielādes papildus lapas ielādes gaidīšanai (kas notiek vienmēr). Var būt ieraksts, kurā ietverts lauks Timeout un/vai Selector. Ja ir norādīts tikai lauks Timeout, funkcija pirms HTML lejupielādes gaidīs norādīto laika periodu. Ja ir atlasīts gan lauks Selector, gan lauks Timeout un taimauta laiks paiet, pirms atlasītājs ir lapā, tiks parādīta kļūda. Ja ir norādīta atlasītāja vērtība bez taimauta, tiek lietota noklusējuma taimauta vērtība — 30 sekundes.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Notiek piekļūšana datiem",
        "Documentation.Examples": [
          {
            "Description": "Atgriež HTML vietnei https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Atgriež HTML vietnei https://microsoft.com pēc tam, kad ir gaidīta CSS atlasītāja parādīšanās.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Atgriež HTML vietnei https://microsoft.com pēc desmit sekunžu gaidīšanas.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Atgriež HTML vietnei https://microsoft.com pēc laika perioda līdz desmit sekundēm, gaidot CSS atlasītāja parādīšanos.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Tiek atgriezts saturs, kas lejupielādēts no vietrāža URL kā binārs.",
        "Documentation.LongDescription": "Tiek atgriezts saturs, kas lejupielādēts no <code>url</code> binārā formātā. Lai norādītu papildu rekvizītus, <code>options</code>, var norādīt neobligātu ieraksta parametru. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>Query</code> : Programmiski pievienojiet vaicājuma parametrus vietrādim URL, neraizējoties par atkāpi.</li>\r\n<li><code>ApiKeyName</code> : Ja mērķa vietnei ir priekšstats par API atslēgu, šo parametru var izmantot, lai norādītu vietrādī URL izmantojamo atslēgas parametra nosaukumu (nevis vērtību). Faktiskā atslēgas vērtība ir norādīta akreditācijas datos.</li>\r\n<li><code>Headers</code> : Norādot šo vērtību kā ierakstu, HTTP pieprasījumam tiks nodrošinātas papildu galvenes.</li>\r\n<li><code>Timeout</code> : Norādot šo vērtību kā ilgumu, tiks mainīts HTTP pieprasījuma taimauts. Noklusējuma vērtība ir 100 sekundes.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Norādot šo vērtību kā sarakstu, šīs HTTP galvenes atslēgas tiks izslēgtas no datu kešdarbes aprēķina daļas.</li>\r\n<li><code>IsRetry</code> : Ja norādīsit šo loģisko vērtību kā true (patiess), ienesot datus, tiks ignorētas visas kešatmiņā esošās atbildes.</li>\r\n<li><code>ManualStatusHandling</code> : Norādot šo vērtību kā sarakstu, netiks pieļauta jebkāda iebūvētā apstrāde tiem HTTP pieprasījumiem, kuru atbilde ir viens no šiem statusa kodiem.</li>\r\n<li><code>RelativePath</code> : Norādot šo vērtību kā tekstu, pirms pieprasījuma veikšanas tas tiek pievienots pamata vietrādim URL.</li>\r\n<li><code>Content</code> : Norādot šo vērtību, tiek mainīts tīmekļa pieprasījums no GET uz POST, opcijas vērtību izmantojot kā POST saturu.</li>\r\n</ul>\r\n\r\n    pieprasījums tiek veikts kā GET (ja nav norādīts saturs) vai POST (ja ir saturs). POST pieprasījumus var veikt tikai anonīmi.\r\n    <br>\r\n    HTTP atbildes galvenes ir pieejamas binārā rezultāta metadatos. Ārpus pielāgota datu savienotāja konteksta ir pieejama tikai atbildes galveņu apakškopa (drošības apsvērumu dēļ).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Izgūstiet <code>\"https://bing.com/search?q=Power+Query\"</code> saturu, izmantojot opcijas RelativePath Query. Šīs opcijas var izmantot, lai dinamiski izpildītu statiska bāzes URL vaicājumu.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Izpildiet POST attiecībā uz URL, nododot bināru JSON vērtumu un parsējot atbildi kā JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Izveidojiet savienojumu ar drošu vietrādi URL, kas kā vaicājuma virknes daļu akceptē autentifikācijas atslēgu. Tā vietā, lai stingri kodētu slepeno atslēgu M (kas varētu radīt drošības risku), \r\n    atslēgu var droši norādīt, norādot tās nosaukumu (nevis tās vērtību) M, izvēloties tīmekļa API autentifikāciju un ievadot atslēgas vērtību kā tīmekļa API akreditācijas datu daļu.\r\n    Šādi izmantojot, tiks ģenerēts pieprasījums <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Atgriež HTTP galvenes, kas lejupielādētas no vietrāža URL kā ieraksta vērtība.",
        "Documentation.LongDescription": "Tiek atgrieztas galvenes, kas lejupielādētas no <code>url</code> kā ieraksts. Lai norādītu papildu rekvizītus, <code>options</code> var norādīt neobligātu ieraksta parametru. Ierakstā var būt šādi lauki:\r\n    <ul>\r\n<li><code>Query</code> : Programmiski pievienojiet vaicājuma parametrus vietrādim URL, neraizējoties par atkāpi.</li>\r\n<li><code>ApiKeyName</code> : Ja mērķa vietnei ir priekšstats par API atslēgu, šo parametru var izmantot, lai norādītu vietrādī URL izmantojamo atslēgas parametra nosaukumu (nevis vērtību). Faktiskā atslēgas vērtība ir norādīta akreditācijas datos.</li>\r\n<li><code>Headers</code> : Norādot šo vērtību kā ierakstu, HTTP pieprasījumam tiks nodrošinātas papildu galvenes.</li>\r\n<li><code>Timeout</code> : Norādot šo vērtību kā ilgumu, tiks mainīts HTTP pieprasījuma taimauts. Noklusējuma vērtība ir 100 sekundes.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Norādot šo vērtību kā sarakstu, šīs HTTP galvenes atslēgas tiks izslēgtas no datu kešdarbes aprēķina daļas.</li>\r\n<li><code>IsRetry</code> : Ja norādīsit šo loģisko vērtību kā true (patiess), ienesot datus, tiks ignorētas visas kešatmiņā esošās atbildes.</li>\r\n<li><code>ManualStatusHandling</code> : Norādot šo vērtību kā sarakstu, netiks pieļauta jebkāda iebūvētā apstrāde tiem HTTP pieprasījumiem, kuru atbilde ir viens no šiem statusa kodiem.</li>\r\n<li><code>RelativePath</code> : Norādot šo vērtību kā tekstu, pirms pieprasījuma veikšanas tas tiek pievienots pamata vietrādim URL.</li>\r\n</ul>\r\n\r\n    HTTP pieprasījums ir veikts, izmantojot metodi HEAD. Ārpus pielāgota datu savienotāja konteksta ir pieejama tikai atbildes galveņu apakškopa (drošības apsvērumu dēļ).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Izgūstiet HTTP galvenes <code>\"https://bing.com/search?q=Power+Query\"</code>, izmantojot opcijas RelativePath un Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Autorizācijas konteksts, kas tiek izmantots piekļuves vadības ieraksta (ACE) nosacījuma novērtēšanā.",
        "Documentation.LongDescription": "Autorizācijas konteksts, kas tiek izmantots piekļuves vadības ieraksta (ACE) nosacījuma novērtēšanā.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Tabula ar piekļuves vadības ierakstiem (ACE).",
        "Documentation.LongDescription": "Tabula, kurā ir secīgi norādīti piekļuves vadības ieraksti (ACE), kas attiecas uz autorizācijas kārtulām. Visām rindām tiek novērtēta atbilstība pašreizējam autorizācijas kontekstam (secīgi). To, kura kārtula tiks lietota, nosaka pēc pirmā rindas, kurai izteiksme <code>Condition</code> atgriež vērtību True. Kolonnā <code>Action</code> tiek iekļauta darbība, uz kuru attiecas kārtula. Atkarībā no kolonnas <code>AccessControlKind</code> vērtības tiek noteikts, vai darbībai piekļuve ir jāatļauj vai jāliedz.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Norāda piekļuves vadības tipu.",
        "Documentation.LongDescription": "Norāda piekļuves vadības tipu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Tips, kas norāda visas vērtības.",
        "Documentation.LongDescription": "Tips, kas norāda visas vērtības.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Tips, kas norāda visas binārās vērtības.",
        "Documentation.LongDescription": "Tips, kas norāda visas binārās vērtības.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Norāda binārās kodēšanas tipu.",
        "Documentation.LongDescription": "Norāda binārās kodēšanas tipu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Norāda, cik reižu vienums, paredzams, parādīsies grupā.",
        "Documentation.LongDescription": "Norāda, cik reižu vienums, paredzams, parādīsies grupā.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Apraksta, kāda veida ievietošana buferī jāveic.",
        "Documentation.LongDescription": "Apraksta, kāda veida ievietošana buferī jāveic.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Tips, kas norāda visus baitus.",
        "Documentation.LongDescription": "Tips, kas norāda visus baitus.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Norāda baitu kārtību.",
        "Documentation.LongDescription": "Norāda baitu kārtību.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Tips, kas norāda visas rakstzīmes.",
        "Documentation.LongDescription": "Tips, kas norāda visas rakstzīmes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Norāda saspiešanas tipu.",
        "Documentation.LongDescription": "Norāda saspiešanas tipu.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Norāda pēdiņu nozīmi Csv dokumentos.",
        "Documentation.LongDescription": "Norāda pēdiņu nozīmi Csv dokumentos.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Tips, kas apzīmē valūtas vērtību.",
        "Documentation.LongDescription": "Tips, kas apzīmē valūtas vērtību.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Tips, kas norāda visas datuma vērtības.",
        "Documentation.LongDescription": "Tips, kas norāda visas datuma vērtības.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Tips, kas norāda visas datuma un laika vērtības bez piesaistītas laika joslas.",
        "Documentation.LongDescription": "Tips, kas norāda visas datuma un laika vērtības bez piesaistītas laika joslas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Tips, kas norāda visas datuma un laika vērtības attiecība pret laika joslu.",
        "Documentation.LongDescription": "Tips, kas norāda visas datuma un laika vērtības attiecība pret laika joslu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Norāda nedēļas dienu.",
        "Documentation.LongDescription": "Norāda nedēļas dienu.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Tips, kas apzīmē fiksēta komata decimāldaļskaitli.",
        "Documentation.LongDescription": "Tips, kas apzīmē fiksēta komata decimāldaļskaitli.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Tips, kas apzīmē dubultprecizitātes peldošā komata skaitli.",
        "Documentation.LongDescription": "Tips, kas apzīmē dubultprecizitātes peldošā komata skaitli.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Tips, kas apzīmē visas ilguma vērtības",
        "Documentation.LongDescription": "Tips, kas apzīmē visas ilguma vērtības",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Norāda paredzēto darbību papildu vērtībām rindā, kurā kolonnu skaits pārsniedz paredzēto.",
        "Documentation.LongDescription": "Norāda paredzēto darbību papildu vērtībām rindā, kurā kolonnu skaits pārsniedz paredzēto.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Tips, ar kuru tiek apzīmētas visas funkcijas.",
        "Documentation.LongDescription": "Tips, ar kuru tiek apzīmētas visas funkcijas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Norāda grupēšanas veidu.",
        "Documentation.LongDescription": "Vairākas lokālās grupas var izveidot ar vienādu atslēgas vērtību, bet tikai vienu globālo grupu var izveidot vienai atslēgas vērtībai.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Tips, kas apzīmē GUID vērtību.",
        "Documentation.LongDescription": "Tips, kas apzīmē GUID vērtību.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Identitāte ir lietotājs, grupa, ierīce vai jebkas cits, kas var tikt identificēts.",
        "Documentation.LongDescription": "Identitāte ir lietotājs, grupa, ierīce vai jebkas cits, kas var tikt identificēts.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Definē tvērumu, kurā tiek izveidotas un salīdzinātas identitātes.",
        "Documentation.LongDescription": "Definē tvērumu, kurā tiek izveidotas un salīdzinātas identitātes.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Tips, kas apzīmē veselu 16 bitu skaitli ar zīmi.",
        "Documentation.LongDescription": "Tips, kas apzīmē veselu 16 bitu skaitli ar zīmi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Tips, kas apzīmē veselu 32 bitu skaitli ar zīmi.",
        "Documentation.LongDescription": "Tips, kas apzīmē veselu 32 bitu skaitli ar zīmi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Tips, kas apzīmē veselu 64 bitu skaitli ar zīmi.",
        "Documentation.LongDescription": "Tips, kas apzīmē veselu 64 bitu skaitli ar zīmi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Tips, kas apzīmē veselu 8 bitu skaitli ar zīmi.",
        "Documentation.LongDescription": "Tips, kas apzīmē veselu 8 bitu skaitli ar zīmi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Norāda savienojuma algoritmu, kas jāizmanto savienojuma operācijai.",
        "Documentation.LongDescription": "Norāda savienojuma algoritmu, kas jāizmanto savienojuma operācijai.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Norāda savienojuma operācijas veidu.",
        "Documentation.LongDescription": "Norāda savienojuma operācijas veidu.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Norāda savienojuma kreiso vai labo tabulu.",
        "Documentation.LongDescription": "Norāda savienojuma kreiso vai labo tabulu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Apraksta ierobežojuma klauzulas tipu, ko atbalsta šajā datu avotā izmantotais SQL dialekts.",
        "Documentation.LongDescription": "Apraksta ierobežojuma klauzulas tipu, ko atbalsta šajā datu avotā izmantotais SQL dialekts.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Tips, ar kuru tiek apzīmēti visi saraksti.",
        "Documentation.LongDescription": "Tips, ar kuru tiek apzīmēti visi saraksti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Tips, ar kuru tiek apzīmētas visas loģiskās vērtības.",
        "Documentation.LongDescription": "Tips, ar kuru tiek apzīmētas visas loģiskās vērtības.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Norāda paredzēto darbību trūkstošām vērtībām rindā, kurā kolonnu skaits ir mazāks par paredzēto.",
        "Documentation.LongDescription": "Norāda paredzēto darbību trūkstošām vērtībām rindā, kurā kolonnu skaits ir mazāks par paredzēto.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Tips, ar kuru tiek apzīmēta vērtība Null.",
        "Documentation.LongDescription": "Tips, ar kuru tiek apzīmēta vērtība Null.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Tips, ar kuru tiek apzīmēti visi skaitļi.",
        "Documentation.LongDescription": "Tips, ar kuru tiek apzīmēti visi skaitļi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Norāda, kādu veidu vērtības OData pakalpojumā drīkst izlaist.",
        "Documentation.LongDescription": "Norāda, kādu veidu vērtības OData pakalpojumā drīkst izlaist.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Norāda elementa sastopamību sērijā.",
        "Documentation.LongDescription": "Norāda elementa sastopamību sērijā.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Norāda kārtošanas virzienu.",
        "Documentation.LongDescription": "Norāda kārtošanas virzienu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Veids, kas apzīmē teksta paroli.",
        "Documentation.LongDescription": "Veids, kas apzīmē teksta paroli.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Tips, kas apzīmē procentuālo vērtību.",
        "Documentation.LongDescription": "Tips, kas apzīmē procentuālo vērtību.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Norāda procentiles režīma tipu.",
        "Documentation.LongDescription": "Norāda procentiles režīma tipu.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Norāda salīdzinājuma precizitāti.",
        "Documentation.LongDescription": "Norāda salīdzinājuma precizitāti.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Norāda pēdiņu stilu.",
        "Documentation.LongDescription": "Norāda pēdiņu stilu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Norāda vērtēšanas veidu.",
        "Documentation.LongDescription": "Norāda vērtēšanas veidu.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Tips, ar kuru tiek apzīmēti visi ieraksti.",
        "Documentation.LongDescription": "Tips, ar kuru tiek apzīmēti visi ieraksti.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Norāda, vai indeksēšana ir jāveic no ievades sākuma vai beigām.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Norāda noapaļošanas virzienu gadījumos, ja abi iespējamie skaitļi ir vienlīdz atbilstoši.",
        "Documentation.LongDescription": "Norāda noapaļošanas virzienu gadījumos, ja abi iespējamie skaitļi ir vienlīdz atbilstoši.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Derīgas opcijas attiecībā uz izpildes režīmu datu noliktavā SAP Business Warehouse.",
        "Documentation.LongDescription": "Derīgas opcijas attiecībā uz izpildes režīmu datu noliktavā SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Derīgas opcijas SAP HANA izplatīšanas opcijai.",
        "Documentation.LongDescription": "Derīgas opcijas SAP HANA izplatīšanas opcijai.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Diapazona operators SAP HANA diapazona ievades parametriem.",
        "Documentation.LongDescription": "Diapazona operators SAP HANA diapazona ievades parametriem.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Tips, kas apzīmē vienkāršās precizitātes peldošā komata skaitli.",
        "Documentation.LongDescription": "Tips, kas apzīmē vienkāršās precizitātes peldošā komata skaitli.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Protokols, kas jāizmanto, veidojot savienojumu ar Spark instanci.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Tips, kas norāda visas tabulas.",
        "Documentation.LongDescription": "Tips, kas norāda visas tabulas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Tips, kas norāda visas teksta vērtības.",
        "Documentation.LongDescription": "Tips, kas norāda visas teksta vērtības.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Norāda teksta kodēšanas tipu.",
        "Documentation.LongDescription": "Norāda teksta kodēšanas tipu.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Tips, kas norāda visas laika vērtības.",
        "Documentation.LongDescription": "Tips, kas norāda visas laika vērtības.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Norāda izsekošanas līmeni.",
        "Documentation.LongDescription": "Norāda izsekošanas līmeni.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Tips, kas norāda visus tipus.",
        "Documentation.LongDescription": "Tips, kas norāda visus tipus.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Veids, kas attēlo teksta URI.",
        "Documentation.LongDescription": "Veids, kas attēlo teksta URI.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Norāda HTTP metodi.",
        "Documentation.LongDescription": "Norāda HTTP metodi.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
